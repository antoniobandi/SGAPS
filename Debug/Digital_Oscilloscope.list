
Digital_Oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee24  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001aa8  0800efd8  0800efd8  0001efd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a80  08010a80  00031430  2**0
                  CONTENTS
  4 .ARM          00000008  08010a80  08010a80  00020a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a88  08010a88  00031430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a88  08010a88  00020a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a8c  08010a8c  00020a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001430  20000000  08010a90  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c18  20001430  08011ec0  00031430  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002048  08011ec0  00032048  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024fc0  00000000  00000000  00031460  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005427  00000000  00000000  00056420  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c20  00000000  00000000  0005b848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001968  00000000  00000000  0005d468  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ae0d  00000000  00000000  0005edd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c9f0  00000000  00000000  00089bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec860  00000000  00000000  000a65cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00192e2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008244  00000000  00000000  00192ea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20001430 	.word	0x20001430
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800efbc 	.word	0x0800efbc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20001434 	.word	0x20001434
 80001ec:	0800efbc 	.word	0x0800efbc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <cutOffSetup>:
#include <complex.h>
#include "fft.h"
#include "usart.h"


void cutOffSetup() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
		if(cutOffFreq == 0.1) {
 8000fac:	4b62      	ldr	r3, [pc, #392]	; (8001138 <cutOffSetup+0x190>)
 8000fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fb2:	a353      	add	r3, pc, #332	; (adr r3, 8001100 <cutOffSetup+0x158>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fd96 	bl	8000ae8 <__aeabi_dcmpeq>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d008      	beq.n	8000fd4 <cutOffSetup+0x2c>
	    	 copy_LP(firCoef_LP, firCoef_LP_01);
 8000fc2:	495e      	ldr	r1, [pc, #376]	; (800113c <cutOffSetup+0x194>)
 8000fc4:	485e      	ldr	r0, [pc, #376]	; (8001140 <cutOffSetup+0x198>)
 8000fc6:	f000 f9d3 	bl	8001370 <copy_LP>
	    	 copy_HP(firCoef_HP, firCoef_HP_01);
 8000fca:	495e      	ldr	r1, [pc, #376]	; (8001144 <cutOffSetup+0x19c>)
 8000fcc:	485e      	ldr	r0, [pc, #376]	; (8001148 <cutOffSetup+0x1a0>)
 8000fce:	f000 f9ed 	bl	80013ac <copy_HP>
	         copy_HP(firCoef_HP, firCoef_HP_08);
	       } else {
	         copy_LP(firCoef_LP, firCoef_LP_09);
	         copy_HP(firCoef_HP, firCoef_HP_09);
	       }
}
 8000fd2:	e093      	b.n	80010fc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.2) {
 8000fd4:	4b58      	ldr	r3, [pc, #352]	; (8001138 <cutOffSetup+0x190>)
 8000fd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fda:	a34b      	add	r3, pc, #300	; (adr r3, 8001108 <cutOffSetup+0x160>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fd82 	bl	8000ae8 <__aeabi_dcmpeq>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d008      	beq.n	8000ffc <cutOffSetup+0x54>
	         copy_LP(firCoef_LP, firCoef_LP_02);
 8000fea:	4958      	ldr	r1, [pc, #352]	; (800114c <cutOffSetup+0x1a4>)
 8000fec:	4854      	ldr	r0, [pc, #336]	; (8001140 <cutOffSetup+0x198>)
 8000fee:	f000 f9bf 	bl	8001370 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_02);
 8000ff2:	4957      	ldr	r1, [pc, #348]	; (8001150 <cutOffSetup+0x1a8>)
 8000ff4:	4854      	ldr	r0, [pc, #336]	; (8001148 <cutOffSetup+0x1a0>)
 8000ff6:	f000 f9d9 	bl	80013ac <copy_HP>
}
 8000ffa:	e07f      	b.n	80010fc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.3) {
 8000ffc:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <cutOffSetup+0x190>)
 8000ffe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001002:	a343      	add	r3, pc, #268	; (adr r3, 8001110 <cutOffSetup+0x168>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff fd6e 	bl	8000ae8 <__aeabi_dcmpeq>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d008      	beq.n	8001024 <cutOffSetup+0x7c>
	         copy_LP(firCoef_LP, firCoef_LP_03);
 8001012:	4950      	ldr	r1, [pc, #320]	; (8001154 <cutOffSetup+0x1ac>)
 8001014:	484a      	ldr	r0, [pc, #296]	; (8001140 <cutOffSetup+0x198>)
 8001016:	f000 f9ab 	bl	8001370 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_03);
 800101a:	494f      	ldr	r1, [pc, #316]	; (8001158 <cutOffSetup+0x1b0>)
 800101c:	484a      	ldr	r0, [pc, #296]	; (8001148 <cutOffSetup+0x1a0>)
 800101e:	f000 f9c5 	bl	80013ac <copy_HP>
}
 8001022:	e06b      	b.n	80010fc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.4) {
 8001024:	4b44      	ldr	r3, [pc, #272]	; (8001138 <cutOffSetup+0x190>)
 8001026:	e9d3 0100 	ldrd	r0, r1, [r3]
 800102a:	a33b      	add	r3, pc, #236	; (adr r3, 8001118 <cutOffSetup+0x170>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fd5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d008      	beq.n	800104c <cutOffSetup+0xa4>
	         copy_LP(firCoef_LP, firCoef_LP_04);
 800103a:	4948      	ldr	r1, [pc, #288]	; (800115c <cutOffSetup+0x1b4>)
 800103c:	4840      	ldr	r0, [pc, #256]	; (8001140 <cutOffSetup+0x198>)
 800103e:	f000 f997 	bl	8001370 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_04);
 8001042:	4947      	ldr	r1, [pc, #284]	; (8001160 <cutOffSetup+0x1b8>)
 8001044:	4840      	ldr	r0, [pc, #256]	; (8001148 <cutOffSetup+0x1a0>)
 8001046:	f000 f9b1 	bl	80013ac <copy_HP>
}
 800104a:	e057      	b.n	80010fc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.5) {
 800104c:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <cutOffSetup+0x190>)
 800104e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	4b43      	ldr	r3, [pc, #268]	; (8001164 <cutOffSetup+0x1bc>)
 8001058:	f7ff fd46 	bl	8000ae8 <__aeabi_dcmpeq>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d008      	beq.n	8001074 <cutOffSetup+0xcc>
	         copy_LP(firCoef_LP, firCoef_LP_05);
 8001062:	4941      	ldr	r1, [pc, #260]	; (8001168 <cutOffSetup+0x1c0>)
 8001064:	4836      	ldr	r0, [pc, #216]	; (8001140 <cutOffSetup+0x198>)
 8001066:	f000 f983 	bl	8001370 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_05);
 800106a:	4940      	ldr	r1, [pc, #256]	; (800116c <cutOffSetup+0x1c4>)
 800106c:	4836      	ldr	r0, [pc, #216]	; (8001148 <cutOffSetup+0x1a0>)
 800106e:	f000 f99d 	bl	80013ac <copy_HP>
}
 8001072:	e043      	b.n	80010fc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.6) {
 8001074:	4b30      	ldr	r3, [pc, #192]	; (8001138 <cutOffSetup+0x190>)
 8001076:	e9d3 0100 	ldrd	r0, r1, [r3]
 800107a:	a329      	add	r3, pc, #164	; (adr r3, 8001120 <cutOffSetup+0x178>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fd32 	bl	8000ae8 <__aeabi_dcmpeq>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d008      	beq.n	800109c <cutOffSetup+0xf4>
	         copy_LP(firCoef_LP, firCoef_LP_06);
 800108a:	4939      	ldr	r1, [pc, #228]	; (8001170 <cutOffSetup+0x1c8>)
 800108c:	482c      	ldr	r0, [pc, #176]	; (8001140 <cutOffSetup+0x198>)
 800108e:	f000 f96f 	bl	8001370 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_06);
 8001092:	4938      	ldr	r1, [pc, #224]	; (8001174 <cutOffSetup+0x1cc>)
 8001094:	482c      	ldr	r0, [pc, #176]	; (8001148 <cutOffSetup+0x1a0>)
 8001096:	f000 f989 	bl	80013ac <copy_HP>
}
 800109a:	e02f      	b.n	80010fc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.7) {
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <cutOffSetup+0x190>)
 800109e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010a2:	a321      	add	r3, pc, #132	; (adr r3, 8001128 <cutOffSetup+0x180>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff fd1e 	bl	8000ae8 <__aeabi_dcmpeq>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d008      	beq.n	80010c4 <cutOffSetup+0x11c>
	         copy_LP(firCoef_LP, firCoef_LP_07);
 80010b2:	4931      	ldr	r1, [pc, #196]	; (8001178 <cutOffSetup+0x1d0>)
 80010b4:	4822      	ldr	r0, [pc, #136]	; (8001140 <cutOffSetup+0x198>)
 80010b6:	f000 f95b 	bl	8001370 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_07);
 80010ba:	4930      	ldr	r1, [pc, #192]	; (800117c <cutOffSetup+0x1d4>)
 80010bc:	4822      	ldr	r0, [pc, #136]	; (8001148 <cutOffSetup+0x1a0>)
 80010be:	f000 f975 	bl	80013ac <copy_HP>
}
 80010c2:	e01b      	b.n	80010fc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.8) {
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <cutOffSetup+0x190>)
 80010c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ca:	a319      	add	r3, pc, #100	; (adr r3, 8001130 <cutOffSetup+0x188>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff fd0a 	bl	8000ae8 <__aeabi_dcmpeq>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <cutOffSetup+0x144>
	         copy_LP(firCoef_LP, firCoef_LP_08);
 80010da:	4929      	ldr	r1, [pc, #164]	; (8001180 <cutOffSetup+0x1d8>)
 80010dc:	4818      	ldr	r0, [pc, #96]	; (8001140 <cutOffSetup+0x198>)
 80010de:	f000 f947 	bl	8001370 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_08);
 80010e2:	4928      	ldr	r1, [pc, #160]	; (8001184 <cutOffSetup+0x1dc>)
 80010e4:	4818      	ldr	r0, [pc, #96]	; (8001148 <cutOffSetup+0x1a0>)
 80010e6:	f000 f961 	bl	80013ac <copy_HP>
}
 80010ea:	e007      	b.n	80010fc <cutOffSetup+0x154>
	         copy_LP(firCoef_LP, firCoef_LP_09);
 80010ec:	4926      	ldr	r1, [pc, #152]	; (8001188 <cutOffSetup+0x1e0>)
 80010ee:	4814      	ldr	r0, [pc, #80]	; (8001140 <cutOffSetup+0x198>)
 80010f0:	f000 f93e 	bl	8001370 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_09);
 80010f4:	4925      	ldr	r1, [pc, #148]	; (800118c <cutOffSetup+0x1e4>)
 80010f6:	4814      	ldr	r0, [pc, #80]	; (8001148 <cutOffSetup+0x1a0>)
 80010f8:	f000 f958 	bl	80013ac <copy_HP>
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	9999999a 	.word	0x9999999a
 8001104:	3fb99999 	.word	0x3fb99999
 8001108:	9999999a 	.word	0x9999999a
 800110c:	3fc99999 	.word	0x3fc99999
 8001110:	33333333 	.word	0x33333333
 8001114:	3fd33333 	.word	0x3fd33333
 8001118:	9999999a 	.word	0x9999999a
 800111c:	3fd99999 	.word	0x3fd99999
 8001120:	33333333 	.word	0x33333333
 8001124:	3fe33333 	.word	0x3fe33333
 8001128:	66666666 	.word	0x66666666
 800112c:	3fe66666 	.word	0x3fe66666
 8001130:	9999999a 	.word	0x9999999a
 8001134:	3fe99999 	.word	0x3fe99999
 8001138:	20001238 	.word	0x20001238
 800113c:	20000000 	.word	0x20000000
 8001140:	200015bc 	.word	0x200015bc
 8001144:	20000900 	.word	0x20000900
 8001148:	200016bc 	.word	0x200016bc
 800114c:	20000100 	.word	0x20000100
 8001150:	20000a04 	.word	0x20000a04
 8001154:	20000200 	.word	0x20000200
 8001158:	20000b08 	.word	0x20000b08
 800115c:	20000300 	.word	0x20000300
 8001160:	20000c0c 	.word	0x20000c0c
 8001164:	3fe00000 	.word	0x3fe00000
 8001168:	20000400 	.word	0x20000400
 800116c:	20000d10 	.word	0x20000d10
 8001170:	20000500 	.word	0x20000500
 8001174:	20000e14 	.word	0x20000e14
 8001178:	20000600 	.word	0x20000600
 800117c:	20000f18 	.word	0x20000f18
 8001180:	20000700 	.word	0x20000700
 8001184:	2000101c 	.word	0x2000101c
 8001188:	20000800 	.word	0x20000800
 800118c:	20001120 	.word	0x20001120

08001190 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 1);
 8001198:	2201      	movs	r2, #1
 800119a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119e:	4869      	ldr	r0, [pc, #420]	; (8001344 <HAL_ADC_ConvCpltCallback+0x1b4>)
 80011a0:	f004 fc76 	bl	8005a90 <HAL_GPIO_WritePin>
	for(int i = 0; i < BUFFER_SIZE; ++i) {
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
 80011a8:	e026      	b.n	80011f8 <HAL_ADC_ConvCpltCallback+0x68>
			array[i] = -amplitude + (float)buffer[i]/FS_INT * 2;
 80011aa:	4a67      	ldr	r2, [pc, #412]	; (8001348 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011bc:	eddf 6a63 	vldr	s13, [pc, #396]	; 800134c <HAL_ADC_ConvCpltCallback+0x1bc>
 80011c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011c4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <HAL_ADC_ConvCpltCallback+0x1c0>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d2:	4a60      	ldr	r2, [pc, #384]	; (8001354 <HAL_ADC_ConvCpltCallback+0x1c4>)
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	edc3 7a00 	vstr	s15, [r3]
			arrayInt[i] = buffer[i];
 80011de:	4a5a      	ldr	r2, [pc, #360]	; (8001348 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	4a5b      	ldr	r2, [pc, #364]	; (8001358 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80011ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < BUFFER_SIZE; ++i) {
 80011f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f4:	3301      	adds	r3, #1
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	2b3f      	cmp	r3, #63	; 0x3f
 80011fc:	ddd5      	ble.n	80011aa <HAL_ADC_ConvCpltCallback+0x1a>
		}

		float sum = 0;
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	623b      	str	r3, [r7, #32]

		if(!lowpass) {										//!lowpass= 1 -> HP
 8001204:	4b55      	ldr	r3, [pc, #340]	; (800135c <HAL_ADC_ConvCpltCallback+0x1cc>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f083 0301 	eor.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	2b00      	cmp	r3, #0
 8001210:	d03b      	beq.n	800128a <HAL_ADC_ConvCpltCallback+0xfa>
			for(int n = 0; n < BUFFER_SIZE; ++n) {			//L = BUFFER_SIZE
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	e034      	b.n	8001282 <HAL_ADC_ConvCpltCallback+0xf2>
				for(int k = 0; k < BUFFER_SIZE + 1; ++k) {	//N = L - 1 = BUFFER_SIZE - 1
 8001218:	2300      	movs	r3, #0
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	e01d      	b.n	800125a <HAL_ADC_ConvCpltCallback+0xca>
					if(n - k >= 0)
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	db15      	blt.n	8001254 <HAL_ADC_ConvCpltCallback+0xc4>
						sum += firCoef_HP[k] * array[n-k];
 8001228:	4a4d      	ldr	r2, [pc, #308]	; (8001360 <HAL_ADC_ConvCpltCallback+0x1d0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	ed93 7a00 	vldr	s14, [r3]
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	4a46      	ldr	r2, [pc, #280]	; (8001354 <HAL_ADC_ConvCpltCallback+0x1c4>)
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001248:	ed97 7a08 	vldr	s14, [r7, #32]
 800124c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001250:	edc7 7a08 	vstr	s15, [r7, #32]
				for(int k = 0; k < BUFFER_SIZE + 1; ++k) {	//N = L - 1 = BUFFER_SIZE - 1
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	3301      	adds	r3, #1
 8001258:	61bb      	str	r3, [r7, #24]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	2b40      	cmp	r3, #64	; 0x40
 800125e:	ddde      	ble.n	800121e <HAL_ADC_ConvCpltCallback+0x8e>
				}
				filteredArray[n] = sum;
 8001260:	edd7 7a08 	vldr	s15, [r7, #32]
 8001264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001268:	ee17 3a90 	vmov	r3, s15
 800126c:	b299      	uxth	r1, r3
 800126e:	4a3d      	ldr	r2, [pc, #244]	; (8001364 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sum = 0;
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
			for(int n = 0; n < BUFFER_SIZE; ++n) {			//L = BUFFER_SIZE
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	3301      	adds	r3, #1
 8001280:	61fb      	str	r3, [r7, #28]
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	2b3f      	cmp	r3, #63	; 0x3f
 8001286:	ddc7      	ble.n	8001218 <HAL_ADC_ConvCpltCallback+0x88>
 8001288:	e03a      	b.n	8001300 <HAL_ADC_ConvCpltCallback+0x170>
			}
		} else {											//!lowpass = 0 -> LP
			for(int n = 0; n < BUFFER_SIZE; ++n) {
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e034      	b.n	80012fa <HAL_ADC_ConvCpltCallback+0x16a>
				for(int k = 0; k < BUFFER_SIZE; ++k) {
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	e01d      	b.n	80012d2 <HAL_ADC_ConvCpltCallback+0x142>
					if(n - k >= 0)
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	db15      	blt.n	80012cc <HAL_ADC_ConvCpltCallback+0x13c>
						sum += firCoef_LP[k] * array[n-k];
 80012a0:	4a31      	ldr	r2, [pc, #196]	; (8001368 <HAL_ADC_ConvCpltCallback+0x1d8>)
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	ed93 7a00 	vldr	s14, [r3]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	4a28      	ldr	r2, [pc, #160]	; (8001354 <HAL_ADC_ConvCpltCallback+0x1c4>)
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80012c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012c8:	edc7 7a08 	vstr	s15, [r7, #32]
				for(int k = 0; k < BUFFER_SIZE; ++k) {
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	3301      	adds	r3, #1
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b3f      	cmp	r3, #63	; 0x3f
 80012d6:	ddde      	ble.n	8001296 <HAL_ADC_ConvCpltCallback+0x106>
				}
				filteredArray[n] = sum;
 80012d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80012dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012e0:	ee17 3a90 	vmov	r3, s15
 80012e4:	b299      	uxth	r1, r3
 80012e6:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_ADC_ConvCpltCallback+0x1d4>)
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sum = 0;
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
			for(int n = 0; n < BUFFER_SIZE; ++n) {
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	2b3f      	cmp	r3, #63	; 0x3f
 80012fe:	ddc7      	ble.n	8001290 <HAL_ADC_ConvCpltCallback+0x100>
			}
		}
		for(int i=0; i<BUFFER_SIZE; i++) {
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	e011      	b.n	800132a <HAL_ADC_ConvCpltCallback+0x19a>
			filteredArray_int[i] = filteredArray[i] * FS_INT_HALF + FS_INT_HALF;
 8001306:	4a17      	ldr	r2, [pc, #92]	; (8001364 <HAL_ADC_ConvCpltCallback+0x1d4>)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800130e:	b29b      	uxth	r3, r3
 8001310:	3301      	adds	r3, #1
 8001312:	b29b      	uxth	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	02d2      	lsls	r2, r2, #11
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	b299      	uxth	r1, r3
 800131c:	4a13      	ldr	r2, [pc, #76]	; (800136c <HAL_ADC_ConvCpltCallback+0x1dc>)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0; i<BUFFER_SIZE; i++) {
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3301      	adds	r3, #1
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2b3f      	cmp	r3, #63	; 0x3f
 800132e:	ddea      	ble.n	8001306 <HAL_ADC_ConvCpltCallback+0x176>
//				ShowSignal(filteredArray_int, "SIGNAL");
//			} else {
//				ShowSignal(arrayInt, "SIGNAL");
//			}
//		}
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001338:	f004 fbaa 	bl	8005a90 <HAL_GPIO_WritePin>

}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021800 	.word	0x40021800
 8001348:	20001968 	.word	0x20001968
 800134c:	457ff000 	.word	0x457ff000
 8001350:	20001230 	.word	0x20001230
 8001354:	20001aec 	.word	0x20001aec
 8001358:	20001868 	.word	0x20001868
 800135c:	20001229 	.word	0x20001229
 8001360:	200016bc 	.word	0x200016bc
 8001364:	200019e8 	.word	0x200019e8
 8001368:	200015bc 	.word	0x200015bc
 800136c:	20001a68 	.word	0x20001a68

08001370 <copy_LP>:

void copy_LP(volatile float* array1, float *array2) {
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < BUFFER_SIZE; i++)
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	e00c      	b.n	800139a <copy_LP+0x2a>
		*(array1 + i) = *(array2 + i);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	441a      	add	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	440b      	add	r3, r1
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	2b3f      	cmp	r3, #63	; 0x3f
 800139e:	ddef      	ble.n	8001380 <copy_LP+0x10>
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <copy_HP>:

void copy_HP(volatile float* array1, float *array2) {
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < BUFFER_SIZE + 1; i++)
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	e00c      	b.n	80013d6 <copy_HP+0x2a>
		*(array1 + i) = *(array2 + i);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	441a      	add	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	440b      	add	r3, r1
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE + 1; i++)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3301      	adds	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b40      	cmp	r3, #64	; 0x40
 80013da:	ddef      	ble.n	80013bc <copy_HP+0x10>
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80013ee:	463b      	mov	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <MX_ADC3_Init+0x98>)
 80013fc:	4a21      	ldr	r2, [pc, #132]	; (8001484 <MX_ADC3_Init+0x9c>)
 80013fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <MX_ADC3_Init+0x98>)
 8001402:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001406:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_ADC3_Init+0x98>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <MX_ADC3_Init+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_ADC3_Init+0x98>)
 8001416:	2201      	movs	r2, #1
 8001418:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_ADC3_Init+0x98>)
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_ADC3_Init+0x98>)
 8001424:	2200      	movs	r2, #0
 8001426:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_ADC3_Init+0x98>)
 800142a:	4a17      	ldr	r2, [pc, #92]	; (8001488 <MX_ADC3_Init+0xa0>)
 800142c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_ADC3_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_ADC3_Init+0x98>)
 8001436:	2201      	movs	r2, #1
 8001438:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_ADC3_Init+0x98>)
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_ADC3_Init+0x98>)
 8001444:	2201      	movs	r2, #1
 8001446:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <MX_ADC3_Init+0x98>)
 800144a:	f002 fb4b 	bl	8003ae4 <HAL_ADC_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001454:	f001 fc96 	bl	8002d84 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001458:	2304      	movs	r3, #4
 800145a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800145c:	2301      	movs	r3, #1
 800145e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001460:	2307      	movs	r3, #7
 8001462:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_ADC3_Init+0x98>)
 800146a:	f002 fc85 	bl	8003d78 <HAL_ADC_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001474:	f001 fc86 	bl	8002d84 <Error_Handler>
  }

}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20001820 	.word	0x20001820
 8001484:	40012200 	.word	0x40012200
 8001488:	0f000001 	.word	0x0f000001

0800148c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <HAL_ADC_MspInit+0xdc>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d158      	bne.n	8001560 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b2e      	ldr	r3, [pc, #184]	; (800156c <HAL_ADC_MspInit+0xe0>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a2d      	ldr	r2, [pc, #180]	; (800156c <HAL_ADC_MspInit+0xe0>)
 80014b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_ADC_MspInit+0xe0>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b27      	ldr	r3, [pc, #156]	; (800156c <HAL_ADC_MspInit+0xe0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a26      	ldr	r2, [pc, #152]	; (800156c <HAL_ADC_MspInit+0xe0>)
 80014d4:	f043 0320 	orr.w	r3, r3, #32
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_ADC_MspInit+0xe0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014e6:	2340      	movs	r3, #64	; 0x40
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ea:	2303      	movs	r3, #3
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	481d      	ldr	r0, [pc, #116]	; (8001570 <HAL_ADC_MspInit+0xe4>)
 80014fa:	f004 f91f 	bl	800573c <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 8001500:	4a1d      	ldr	r2, [pc, #116]	; (8001578 <HAL_ADC_MspInit+0xec>)
 8001502:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 8001506:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800150a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 800151a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 8001522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001526:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 800152a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800152e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 8001532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001536:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 8001540:	2200      	movs	r2, #0
 8001542:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001544:	480b      	ldr	r0, [pc, #44]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 8001546:	f003 fa6d 	bl	8004a24 <HAL_DMA_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001550:	f001 fc18 	bl	8002d84 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 8001558:	639a      	str	r2, [r3, #56]	; 0x38
 800155a:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_ADC_MspInit+0xe8>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40012200 	.word	0x40012200
 800156c:	40023800 	.word	0x40023800
 8001570:	40021400 	.word	0x40021400
 8001574:	200017c0 	.word	0x200017c0
 8001578:	40026410 	.word	0x40026410

0800157c <generate>:
float amplitude_check;
long int frequency_check;
_Bool gen_check;
_Bool sinewave_check;

void generate () {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af02      	add	r7, sp, #8
   if (amplitude_check != amplitude || frequency_check != frequency || gen_check != gen || sinewave_check != sinewave) {
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <generate+0xcc>)
 8001584:	ed93 7a00 	vldr	s14, [r3]
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <generate+0xd0>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001596:	d111      	bne.n	80015bc <generate+0x40>
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <generate+0xd4>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <generate+0xd8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d10b      	bne.n	80015bc <generate+0x40>
 80015a4:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <generate+0xdc>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b2c      	ldr	r3, [pc, #176]	; (800165c <generate+0xe0>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d105      	bne.n	80015bc <generate+0x40>
 80015b0:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <generate+0xe4>)
 80015b2:	781a      	ldrb	r2, [r3, #0]
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <generate+0xe8>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d041      	beq.n	8001640 <generate+0xc4>
	  if (gen) {
 80015bc:	4b27      	ldr	r3, [pc, #156]	; (800165c <generate+0xe0>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d027      	beq.n	8001614 <generate+0x98>
		  if (sinewave) {
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <generate+0xe8>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d011      	beq.n	80015f0 <generate+0x74>
			  racunaj_sinus();
 80015cc:	f000 f94c 	bl	8001868 <racunaj_sinus>
			  MX_TIM6_Freq_Init();
 80015d0:	f000 f8f8 	bl	80017c4 <MX_TIM6_Freq_Init>
			  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, signal, SAMPLES,DAC_ALIGN_12B_R);
 80015d4:	2300      	movs	r3, #0
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	2364      	movs	r3, #100	; 0x64
 80015da:	4a23      	ldr	r2, [pc, #140]	; (8001668 <generate+0xec>)
 80015dc:	2110      	movs	r1, #16
 80015de:	4823      	ldr	r0, [pc, #140]	; (800166c <generate+0xf0>)
 80015e0:	f002 ffde 	bl	80045a0 <HAL_DAC_Start_DMA>
			  SetSineOutput(frequency);
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <generate+0xd8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 ff9d 	bl	8002528 <SetSineOutput>
 80015ee:	e017      	b.n	8001620 <generate+0xa4>
		  } else {
			  racunaj_pravokutni();
 80015f0:	f000 f9b6 	bl	8001960 <racunaj_pravokutni>
			  MX_TIM6_Freq_Init();
 80015f4:	f000 f8e6 	bl	80017c4 <MX_TIM6_Freq_Init>
			  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, signal, SAMPLES,DAC_ALIGN_12B_R);
 80015f8:	2300      	movs	r3, #0
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	4a1a      	ldr	r2, [pc, #104]	; (8001668 <generate+0xec>)
 8001600:	2110      	movs	r1, #16
 8001602:	481a      	ldr	r0, [pc, #104]	; (800166c <generate+0xf0>)
 8001604:	f002 ffcc 	bl	80045a0 <HAL_DAC_Start_DMA>
			  SetSquareOutput(frequency);
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <generate+0xd8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fe5f 	bl	80022d0 <SetSquareOutput>
 8001612:	e005      	b.n	8001620 <generate+0xa4>
		  }
	  } else {
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 8001614:	2110      	movs	r1, #16
 8001616:	4815      	ldr	r0, [pc, #84]	; (800166c <generate+0xf0>)
 8001618:	f003 f870 	bl	80046fc <HAL_DAC_Stop_DMA>
		  LCDFunctionGeneratorOFF();
 800161c:	f000 fdbc 	bl	8002198 <LCDFunctionGeneratorOFF>
	  }
	  amplitude_check = amplitude;
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <generate+0xd0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a08      	ldr	r2, [pc, #32]	; (8001648 <generate+0xcc>)
 8001626:	6013      	str	r3, [r2, #0]
	  frequency_check = frequency;
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <generate+0xd8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a08      	ldr	r2, [pc, #32]	; (8001650 <generate+0xd4>)
 800162e:	6013      	str	r3, [r2, #0]
	  gen_check = gen;
 8001630:	4b0a      	ldr	r3, [pc, #40]	; (800165c <generate+0xe0>)
 8001632:	781a      	ldrb	r2, [r3, #0]
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <generate+0xdc>)
 8001636:	701a      	strb	r2, [r3, #0]
	  sinewave_check = sinewave;
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <generate+0xe8>)
 800163a:	781a      	ldrb	r2, [r3, #0]
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <generate+0xe4>)
 800163e:	701a      	strb	r2, [r3, #0]
   }
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20001bf4 	.word	0x20001bf4
 800164c:	20001230 	.word	0x20001230
 8001650:	20001dfc 	.word	0x20001dfc
 8001654:	20001234 	.word	0x20001234
 8001658:	20001bf0 	.word	0x20001bf0
 800165c:	20001226 	.word	0x20001226
 8001660:	20001bf1 	.word	0x20001bf1
 8001664:	20001227 	.word	0x20001227
 8001668:	20001bf8 	.word	0x20001bf8
 800166c:	20001d88 	.word	0x20001d88

08001670 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001676:	463b      	mov	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800167e:	4b0f      	ldr	r3, [pc, #60]	; (80016bc <MX_DAC_Init+0x4c>)
 8001680:	4a0f      	ldr	r2, [pc, #60]	; (80016c0 <MX_DAC_Init+0x50>)
 8001682:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001684:	480d      	ldr	r0, [pc, #52]	; (80016bc <MX_DAC_Init+0x4c>)
 8001686:	f002 ff68 	bl	800455a <HAL_DAC_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001690:	f001 fb78 	bl	8002d84 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001694:	2304      	movs	r3, #4
 8001696:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	2210      	movs	r2, #16
 80016a0:	4619      	mov	r1, r3
 80016a2:	4806      	ldr	r0, [pc, #24]	; (80016bc <MX_DAC_Init+0x4c>)
 80016a4:	f003 f8dd 	bl	8004862 <HAL_DAC_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80016ae:	f001 fb69 	bl	8002d84 <Error_Handler>
  }

}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20001d88 	.word	0x20001d88
 80016c0:	40007400 	.word	0x40007400

080016c4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	; 0x28
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a33      	ldr	r2, [pc, #204]	; (80017b0 <HAL_DAC_MspInit+0xec>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d160      	bne.n	80017a8 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <HAL_DAC_MspInit+0xf0>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a31      	ldr	r2, [pc, #196]	; (80017b4 <HAL_DAC_MspInit+0xf0>)
 80016f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <HAL_DAC_MspInit+0xf0>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <HAL_DAC_MspInit+0xf0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a2a      	ldr	r2, [pc, #168]	; (80017b4 <HAL_DAC_MspInit+0xf0>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <HAL_DAC_MspInit+0xf0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800171e:	2320      	movs	r3, #32
 8001720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001722:	2303      	movs	r3, #3
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4821      	ldr	r0, [pc, #132]	; (80017b8 <HAL_DAC_MspInit+0xf4>)
 8001732:	f004 f803 	bl	800573c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001736:	4b21      	ldr	r3, [pc, #132]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 8001738:	4a21      	ldr	r2, [pc, #132]	; (80017c0 <HAL_DAC_MspInit+0xfc>)
 800173a:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 800173e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001742:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001744:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 8001746:	2240      	movs	r2, #64	; 0x40
 8001748:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001750:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 8001752:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001756:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 800175a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800175e:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001760:	4b16      	ldr	r3, [pc, #88]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 8001762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001766:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001768:	4b14      	ldr	r3, [pc, #80]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 800176a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800176e:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 8001778:	2200      	movs	r2, #0
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800177c:	480f      	ldr	r0, [pc, #60]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 800177e:	f003 f951 	bl	8004a24 <HAL_DMA_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001788:	f001 fafc 	bl	8002d84 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_DAC_MspInit+0xf8>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2036      	movs	r0, #54	; 0x36
 800179e:	f002 fe98 	bl	80044d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017a2:	2036      	movs	r0, #54	; 0x36
 80017a4:	f002 feb1 	bl	800450a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80017a8:	bf00      	nop
 80017aa:	3728      	adds	r7, #40	; 0x28
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40007400 	.word	0x40007400
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	20001d9c 	.word	0x20001d9c
 80017c0:	400260a0 	.word	0x400260a0

080017c4 <MX_TIM6_Freq_Init>:
  }
}

/* USER CODE BEGIN 1 */
void MX_TIM6_Freq_Init()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ca:	463b      	mov	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <MX_TIM6_Freq_Init+0x90>)
 80017d4:	4a20      	ldr	r2, [pc, #128]	; (8001858 <MX_TIM6_Freq_Init+0x94>)
 80017d6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_TIM6_Freq_Init+0x90>)
 80017da:	2259      	movs	r2, #89	; 0x59
 80017dc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <MX_TIM6_Freq_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (10000/frequency) - 1;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_TIM6_Freq_Init+0x98>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80017ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80017f0:	3b01      	subs	r3, #1
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MX_TIM6_Freq_Init+0x90>)
 80017f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_TIM6_Freq_Init+0x90>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]

  if (frequency > 1000) {
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <MX_TIM6_Freq_Init+0x98>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001806:	dd0b      	ble.n	8001820 <MX_TIM6_Freq_Init+0x5c>
	  htim6.Init.Prescaler = (90000/frequency) - 1;
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <MX_TIM6_Freq_Init+0x98>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <MX_TIM6_Freq_Init+0x9c>)
 800180e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001812:	3b01      	subs	r3, #1
 8001814:	461a      	mov	r2, r3
 8001816:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <MX_TIM6_Freq_Init+0x90>)
 8001818:	605a      	str	r2, [r3, #4]
	  htim6.Init.Period = 10-1;
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <MX_TIM6_Freq_Init+0x90>)
 800181c:	2209      	movs	r2, #9
 800181e:	60da      	str	r2, [r3, #12]
  }
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <MX_TIM6_Freq_Init+0x90>)
 8001822:	f005 fc78 	bl	8007116 <HAL_TIM_Base_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM6_Freq_Init+0x6c>
  {
    Error_Handler();
 800182c:	f001 faaa 	bl	8002d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001830:	2320      	movs	r3, #32
 8001832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001838:	463b      	mov	r3, r7
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_TIM6_Freq_Init+0x90>)
 800183e:	f005 fe93 	bl	8007568 <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM6_Freq_Init+0x88>
  {
    Error_Handler();
 8001848:	f001 fa9c 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20001f80 	.word	0x20001f80
 8001858:	40001000 	.word	0x40001000
 800185c:	20001234 	.word	0x20001234
 8001860:	00015f90 	.word	0x00015f90
 8001864:	00000000 	.word	0x00000000

08001868 <racunaj_sinus>:

void racunaj_sinus()
{
 8001868:	b5b0      	push	{r4, r5, r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	e058      	b.n	8001926 <racunaj_sinus+0xbe>
	{
		signal[i] = (amplitude/U_REF)*(sin(i*2*PI/SAMPLES) + 1) * (0xFFF)/2;
 8001874:	4b36      	ldr	r3, [pc, #216]	; (8001950 <racunaj_sinus+0xe8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe75 	bl	8000568 <__aeabi_f2d>
 800187e:	a32e      	add	r3, pc, #184	; (adr r3, 8001938 <racunaj_sinus+0xd0>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fff2 	bl	800086c <__aeabi_ddiv>
 8001888:	4603      	mov	r3, r0
 800188a:	460c      	mov	r4, r1
 800188c:	4625      	mov	r5, r4
 800188e:	461c      	mov	r4, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe55 	bl	8000544 <__aeabi_i2d>
 800189a:	a329      	add	r3, pc, #164	; (adr r3, 8001940 <racunaj_sinus+0xd8>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7fe feba 	bl	8000618 <__aeabi_dmul>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <racunaj_sinus+0xec>)
 80018b2:	f7fe ffdb 	bl	800086c <__aeabi_ddiv>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	ec43 2b17 	vmov	d7, r2, r3
 80018be:	eeb0 0a47 	vmov.f32	s0, s14
 80018c2:	eef0 0a67 	vmov.f32	s1, s15
 80018c6:	f00c fb67 	bl	800df98 <sin>
 80018ca:	ec51 0b10 	vmov	r0, r1, d0
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	4b21      	ldr	r3, [pc, #132]	; (8001958 <racunaj_sinus+0xf0>)
 80018d4:	f7fe fcea 	bl	80002ac <__adddf3>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fe9a 	bl	8000618 <__aeabi_dmul>
 80018e4:	4603      	mov	r3, r0
 80018e6:	460c      	mov	r4, r1
 80018e8:	4618      	mov	r0, r3
 80018ea:	4621      	mov	r1, r4
 80018ec:	a316      	add	r3, pc, #88	; (adr r3, 8001948 <racunaj_sinus+0xe0>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fe91 	bl	8000618 <__aeabi_dmul>
 80018f6:	4603      	mov	r3, r0
 80018f8:	460c      	mov	r4, r1
 80018fa:	4618      	mov	r0, r3
 80018fc:	4621      	mov	r1, r4
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001906:	f7fe ffb1 	bl	800086c <__aeabi_ddiv>
 800190a:	4603      	mov	r3, r0
 800190c:	460c      	mov	r4, r1
 800190e:	4618      	mov	r0, r3
 8001910:	4621      	mov	r1, r4
 8001912:	f7ff f959 	bl	8000bc8 <__aeabi_d2uiz>
 8001916:	4601      	mov	r1, r0
 8001918:	4a10      	ldr	r2, [pc, #64]	; (800195c <racunaj_sinus+0xf4>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SAMPLES; i++)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3301      	adds	r3, #1
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b63      	cmp	r3, #99	; 0x63
 800192a:	dda3      	ble.n	8001874 <racunaj_sinus+0xc>
	}
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bdb0      	pop	{r4, r5, r7, pc}
 8001934:	f3af 8000 	nop.w
 8001938:	851eb852 	.word	0x851eb852
 800193c:	400851eb 	.word	0x400851eb
 8001940:	54442eea 	.word	0x54442eea
 8001944:	400921fb 	.word	0x400921fb
 8001948:	00000000 	.word	0x00000000
 800194c:	40affe00 	.word	0x40affe00
 8001950:	20001230 	.word	0x20001230
 8001954:	40590000 	.word	0x40590000
 8001958:	3ff00000 	.word	0x3ff00000
 800195c:	20001bf8 	.word	0x20001bf8

08001960 <racunaj_pravokutni>:

void racunaj_pravokutni()
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 8001966:	2300      	movs	r3, #0
 8001968:	607b      	str	r3, [r7, #4]
 800196a:	e026      	b.n	80019ba <racunaj_pravokutni+0x5a>
	{
		if (i < SAMPLES/2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b31      	cmp	r3, #49	; 0x31
 8001970:	dc1b      	bgt.n	80019aa <racunaj_pravokutni+0x4a>
		{
			signal[i] = amplitude*0xFFF/U_REF;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <racunaj_pravokutni+0x70>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80019d4 <racunaj_pravokutni+0x74>
 800197c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001980:	ee17 0a90 	vmov	r0, s15
 8001984:	f7fe fdf0 	bl	8000568 <__aeabi_f2d>
 8001988:	a30f      	add	r3, pc, #60	; (adr r3, 80019c8 <racunaj_pravokutni+0x68>)
 800198a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198e:	f7fe ff6d 	bl	800086c <__aeabi_ddiv>
 8001992:	4603      	mov	r3, r0
 8001994:	460c      	mov	r4, r1
 8001996:	4618      	mov	r0, r3
 8001998:	4621      	mov	r1, r4
 800199a:	f7ff f915 	bl	8000bc8 <__aeabi_d2uiz>
 800199e:	4601      	mov	r1, r0
 80019a0:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <racunaj_pravokutni+0x78>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80019a8:	e004      	b.n	80019b4 <racunaj_pravokutni+0x54>
		} else
		{
			signal[i] = 0;
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <racunaj_pravokutni+0x78>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2100      	movs	r1, #0
 80019b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SAMPLES; i++)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3301      	adds	r3, #1
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b63      	cmp	r3, #99	; 0x63
 80019be:	ddd5      	ble.n	800196c <racunaj_pravokutni+0xc>
		}
	}
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd90      	pop	{r4, r7, pc}
 80019c8:	851eb852 	.word	0x851eb852
 80019cc:	400851eb 	.word	0x400851eb
 80019d0:	20001230 	.word	0x20001230
 80019d4:	457ff000 	.word	0x457ff000
 80019d8:	20001bf8 	.word	0x20001bf8

080019dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <MX_DMA_Init+0x68>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <MX_DMA_Init+0x68>)
 80019ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <MX_DMA_Init+0x68>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <MX_DMA_Init+0x68>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <MX_DMA_Init+0x68>)
 8001a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <MX_DMA_Init+0x68>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2011      	movs	r0, #17
 8001a20:	f002 fd57 	bl	80044d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001a24:	2011      	movs	r0, #17
 8001a26:	f002 fd70 	bl	800450a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2038      	movs	r0, #56	; 0x38
 8001a30:	f002 fd4f 	bl	80044d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a34:	2038      	movs	r0, #56	; 0x38
 8001a36:	f002 fd68 	bl	800450a <HAL_NVIC_EnableIRQ>

}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800

08001a48 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_DMA2D_Init+0x5c>)
 8001a4e:	4a16      	ldr	r2, [pc, #88]	; (8001aa8 <MX_DMA2D_Init+0x60>)
 8001a50:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_DMA2D_Init+0x5c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_DMA2D_Init+0x5c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_DMA2D_Init+0x5c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_DMA2D_Init+0x5c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MX_DMA2D_Init+0x5c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <MX_DMA2D_Init+0x5c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_DMA2D_Init+0x5c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <MX_DMA2D_Init+0x5c>)
 8001a7e:	f003 fbd1 	bl	8005224 <HAL_DMA2D_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001a88:	f001 f97c 	bl	8002d84 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_DMA2D_Init+0x5c>)
 8001a90:	f003 fd26 	bl	80054e0 <HAL_DMA2D_ConfigLayer>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001a9a:	f001 f973 	bl	8002d84 <Error_Handler>
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20001e00 	.word	0x20001e00
 8001aa8:	4002b000 	.word	0x4002b000

08001aac <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <HAL_DMA2D_MspInit+0x3c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10d      	bne.n	8001ada <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <HAL_DMA2D_MspInit+0x40>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a09      	ldr	r2, [pc, #36]	; (8001aec <HAL_DMA2D_MspInit+0x40>)
 8001ac8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <HAL_DMA2D_MspInit+0x40>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	4002b000 	.word	0x4002b000
 8001aec:	40023800 	.word	0x40023800

08001af0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
 8001b04:	615a      	str	r2, [r3, #20]
 8001b06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001b08:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b0a:	4a1f      	ldr	r2, [pc, #124]	; (8001b88 <MX_FMC_Init+0x98>)
 8001b0c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b1c:	2204      	movs	r2, #4
 8001b1e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b22:	2210      	movs	r2, #16
 8001b24:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b28:	2240      	movs	r2, #64	; 0x40
 8001b2a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001b2c:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001b4e:	2310      	movs	r3, #16
 8001b50:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001b52:	2310      	movs	r3, #16
 8001b54:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001b56:	2310      	movs	r3, #16
 8001b58:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001b5e:	2310      	movs	r3, #16
 8001b60:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001b62:	2310      	movs	r3, #16
 8001b64:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4806      	ldr	r0, [pc, #24]	; (8001b84 <MX_FMC_Init+0x94>)
 8001b6c:	f005 f9f0 	bl	8006f50 <HAL_SDRAM_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001b76:	f001 f905 	bl	8002d84 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001b7a:	bf00      	nop
 8001b7c:	3720      	adds	r7, #32
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20001e40 	.word	0x20001e40
 8001b88:	a0000140 	.word	0xa0000140

08001b8c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001ba0:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_FMC_MspInit+0xe8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d160      	bne.n	8001c6a <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 8001ba8:	4b32      	ldr	r3, [pc, #200]	; (8001c74 <HAL_FMC_MspInit+0xe8>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <HAL_FMC_MspInit+0xec>)
 8001bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb6:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <HAL_FMC_MspInit+0xec>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6393      	str	r3, [r2, #56]	; 0x38
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_FMC_MspInit+0xec>)
 8001bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001bca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001bce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bdc:	230c      	movs	r3, #12
 8001bde:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	4619      	mov	r1, r3
 8001be4:	4825      	ldr	r0, [pc, #148]	; (8001c7c <HAL_FMC_MspInit+0xf0>)
 8001be6:	f003 fda9 	bl	800573c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001bea:	230d      	movs	r3, #13
 8001bec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bfa:	230c      	movs	r3, #12
 8001bfc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	481f      	ldr	r0, [pc, #124]	; (8001c80 <HAL_FMC_MspInit+0xf4>)
 8001c04:	f003 fd9a 	bl	800573c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001c08:	f248 1333 	movw	r3, #33075	; 0x8133
 8001c0c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c1a:	230c      	movs	r3, #12
 8001c1c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	4619      	mov	r1, r3
 8001c22:	4818      	ldr	r0, [pc, #96]	; (8001c84 <HAL_FMC_MspInit+0xf8>)
 8001c24:	f003 fd8a 	bl	800573c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001c28:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001c2c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c3a:	230c      	movs	r3, #12
 8001c3c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4811      	ldr	r0, [pc, #68]	; (8001c88 <HAL_FMC_MspInit+0xfc>)
 8001c44:	f003 fd7a 	bl	800573c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001c48:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001c4c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c56:	2303      	movs	r3, #3
 8001c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c5a:	230c      	movs	r3, #12
 8001c5c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4619      	mov	r1, r3
 8001c62:	480a      	ldr	r0, [pc, #40]	; (8001c8c <HAL_FMC_MspInit+0x100>)
 8001c64:	f003 fd6a 	bl	800573c <HAL_GPIO_Init>
 8001c68:	e000      	b.n	8001c6c <HAL_FMC_MspInit+0xe0>
    return;
 8001c6a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c6c:	3718      	adds	r7, #24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000144c 	.word	0x2000144c
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40021400 	.word	0x40021400
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40021800 	.word	0x40021800
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40020c00 	.word	0x40020c00

08001c90 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c98:	f7ff ff78 	bl	8001b8c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}

08001ca4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08e      	sub	sp, #56	; 0x38
 8001ca8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	623b      	str	r3, [r7, #32]
 8001cbe:	4b43      	ldr	r3, [pc, #268]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a42      	ldr	r2, [pc, #264]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001cc4:	f043 0320 	orr.w	r3, r3, #32
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b40      	ldr	r3, [pc, #256]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	623b      	str	r3, [r7, #32]
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	4b3c      	ldr	r3, [pc, #240]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	4a3b      	ldr	r2, [pc, #236]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce6:	4b39      	ldr	r3, [pc, #228]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	4b35      	ldr	r3, [pc, #212]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a34      	ldr	r2, [pc, #208]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a2d      	ldr	r2, [pc, #180]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b2b      	ldr	r3, [pc, #172]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a26      	ldr	r2, [pc, #152]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b20      	ldr	r3, [pc, #128]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d54:	6313      	str	r3, [r2, #48]	; 0x30
 8001d56:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	4a18      	ldr	r2, [pc, #96]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d6c:	f043 0310 	orr.w	r3, r3, #16
 8001d70:	6313      	str	r3, [r2, #48]	; 0x30
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <MX_GPIO_Init+0x128>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da0:	480b      	ldr	r0, [pc, #44]	; (8001dd0 <MX_GPIO_Init+0x12c>)
 8001da2:	f003 fe75 	bl	8005a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dac:	2301      	movs	r3, #1
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <MX_GPIO_Init+0x12c>)
 8001dc0:	f003 fcbc 	bl	800573c <HAL_GPIO_Init>

}
 8001dc4:	bf00      	nop
 8001dc6:	3738      	adds	r7, #56	; 0x38
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40021800 	.word	0x40021800

08001dd4 <StartScreen>:
#include <stdio.h>

int width;


void StartScreen(void){
 8001dd4:	b5b0      	push	{r4, r5, r7, lr}
 8001dd6:	b08e      	sub	sp, #56	; 0x38
 8001dd8:	af00      	add	r7, sp, #0
	TM_LCD_Init();
 8001dda:	f007 f9d7 	bl	800918c <TM_LCD_Init>
	TM_LCD_SetOrientation(2);
 8001dde:	2002      	movs	r0, #2
 8001de0:	f007 fa4c 	bl	800927c <TM_LCD_SetOrientation>
	TM_LCD_SetLayer1();
 8001de4:	f007 fba4 	bl	8009530 <TM_LCD_SetLayer1>
	TM_LCD_Fill(LCD_COLOR_WHITE);
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dec:	f007 fa3a 	bl	8009264 <TM_LCD_Fill>


	ScreenIntro();
 8001df0:	f000 f8ca 	bl	8001f88 <ScreenIntro>

	/*	prozor za osciloskop	*/

	Window();
 8001df4:	f000 fcc2 	bl	800277c <Window>

	/*	generator; ime i ON/OFF */

	TM_LCD_SetXY(0, TM_LCD_GetHeight()-22);
 8001df8:	f007 fbe8 	bl	80095cc <TM_LCD_GetHeight>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	3b16      	subs	r3, #22
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	4619      	mov	r1, r3
 8001e04:	2000      	movs	r0, #0
 8001e06:	f007 fa79 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_SetFont(&TM_Font_7x10);
 8001e0a:	485a      	ldr	r0, [pc, #360]	; (8001f74 <StartScreen+0x1a0>)
 8001e0c:	f007 fa9c 	bl	8009348 <TM_LCD_SetFont>
	char s[] = "Function generator";
 8001e10:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <StartScreen+0x1a4>)
 8001e12:	f107 0414 	add.w	r4, r7, #20
 8001e16:	461d      	mov	r5, r3
 8001e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e1c:	682b      	ldr	r3, [r5, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	8022      	strh	r2, [r4, #0]
 8001e22:	3402      	adds	r4, #2
 8001e24:	0c1b      	lsrs	r3, r3, #16
 8001e26:	7023      	strb	r3, [r4, #0]
	TM_LCD_Puts(&s[0]);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f007 fb63 	bl	80094f8 <TM_LCD_Puts>
	char on[] = "ON";
 8001e32:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <StartScreen+0x1a8>)
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	6812      	ldr	r2, [r2, #0]
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	8019      	strh	r1, [r3, #0]
 8001e3e:	3302      	adds	r3, #2
 8001e40:	0c12      	lsrs	r2, r2, #16
 8001e42:	701a      	strb	r2, [r3, #0]
	TM_LCD_SetXY(8, TM_LCD_GetHeight()-11);
 8001e44:	f007 fbc2 	bl	80095cc <TM_LCD_GetHeight>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	3b0b      	subs	r3, #11
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	4619      	mov	r1, r3
 8001e50:	2008      	movs	r0, #8
 8001e52:	f007 fa53 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_Puts(&on[0]);
 8001e56:	f107 0310 	add.w	r3, r7, #16
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f007 fb4c 	bl	80094f8 <TM_LCD_Puts>
	char off[] = "OFF";
 8001e60:	4b47      	ldr	r3, [pc, #284]	; (8001f80 <StartScreen+0x1ac>)
 8001e62:	60fb      	str	r3, [r7, #12]
	TM_LCD_SetXY(28, TM_LCD_GetHeight()-11);
 8001e64:	f007 fbb2 	bl	80095cc <TM_LCD_GetHeight>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	3b0b      	subs	r3, #11
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	4619      	mov	r1, r3
 8001e70:	201c      	movs	r0, #28
 8001e72:	f007 fa43 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_Puts(&off[0]);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f007 fb3c 	bl	80094f8 <TM_LCD_Puts>

	/*	prozor za generator	*/

	for(int i=135; i<160;i++){
 8001e80:	2387      	movs	r3, #135	; 0x87
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
 8001e84:	e00e      	b.n	8001ea4 <StartScreen+0xd0>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-22, LCD_COLOR_BLACK);
 8001e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e88:	b29c      	uxth	r4, r3
 8001e8a:	f007 fb9f 	bl	80095cc <TM_LCD_GetHeight>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	3b16      	subs	r3, #22
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2200      	movs	r2, #0
 8001e96:	4619      	mov	r1, r3
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f007 fb07 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=135; i<160;i++){
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	2b9f      	cmp	r3, #159	; 0x9f
 8001ea8:	dded      	ble.n	8001e86 <StartScreen+0xb2>
	}
	for(int i=135; i<161;i++){
 8001eaa:	2387      	movs	r3, #135	; 0x87
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
 8001eae:	e00e      	b.n	8001ece <StartScreen+0xfa>
			TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-5, LCD_COLOR_BLACK);
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	b29c      	uxth	r4, r3
 8001eb4:	f007 fb8a 	bl	80095cc <TM_LCD_GetHeight>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	3b05      	subs	r3, #5
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f007 faf2 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=135; i<161;i++){
 8001ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eca:	3301      	adds	r3, #1
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed0:	2ba0      	cmp	r3, #160	; 0xa0
 8001ed2:	dded      	ble.n	8001eb0 <StartScreen+0xdc>
		}
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 8001ed4:	f007 fb7a 	bl	80095cc <TM_LCD_GetHeight>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	3b16      	subs	r3, #22
 8001edc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ede:	e009      	b.n	8001ef4 <StartScreen+0x120>
			TM_LCD_DrawPixel(135, i, LCD_COLOR_BLACK);
 8001ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	2087      	movs	r0, #135	; 0x87
 8001eea:	f007 fadf 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 8001eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ef4:	f007 fb6a 	bl	80095cc <TM_LCD_GetHeight>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	3b05      	subs	r3, #5
 8001efc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001efe:	429a      	cmp	r2, r3
 8001f00:	dbee      	blt.n	8001ee0 <StartScreen+0x10c>
		}
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 8001f02:	f007 fb63 	bl	80095cc <TM_LCD_GetHeight>
 8001f06:	4603      	mov	r3, r0
 8001f08:	3b16      	subs	r3, #22
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f0c:	e009      	b.n	8001f22 <StartScreen+0x14e>
			TM_LCD_DrawPixel(160, i, LCD_COLOR_BLACK);
 8001f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2200      	movs	r2, #0
 8001f14:	4619      	mov	r1, r3
 8001f16:	20a0      	movs	r0, #160	; 0xa0
 8001f18:	f007 fac8 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 8001f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1e:	3301      	adds	r3, #1
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f22:	f007 fb53 	bl	80095cc <TM_LCD_GetHeight>
 8001f26:	4603      	mov	r3, r0
 8001f28:	3b05      	subs	r3, #5
 8001f2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbee      	blt.n	8001f0e <StartScreen+0x13a>
		}
	char yaxis[] = "0.15 V/div";
 8001f30:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <StartScreen+0x1b0>)
 8001f32:	463b      	mov	r3, r7
 8001f34:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f36:	c303      	stmia	r3!, {r0, r1}
 8001f38:	801a      	strh	r2, [r3, #0]
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	0c12      	lsrs	r2, r2, #16
 8001f3e:	701a      	strb	r2, [r3, #0]
	TM_LCD_SetXY(210,TM_LCD_GetHeight()*3/4+5);
 8001f40:	f007 fb44 	bl	80095cc <TM_LCD_GetHeight>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	da00      	bge.n	8001f54 <StartScreen+0x180>
 8001f52:	3303      	adds	r3, #3
 8001f54:	109b      	asrs	r3, r3, #2
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3305      	adds	r3, #5
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	20d2      	movs	r0, #210	; 0xd2
 8001f60:	f007 f9cc 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_Puts(&yaxis[0]);
 8001f64:	463b      	mov	r3, r7
 8001f66:	4618      	mov	r0, r3
 8001f68:	f007 fac6 	bl	80094f8 <TM_LCD_Puts>
}
 8001f6c:	bf00      	nop
 8001f6e:	3738      	adds	r7, #56	; 0x38
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bdb0      	pop	{r4, r5, r7, pc}
 8001f74:	20001250 	.word	0x20001250
 8001f78:	0800efd8 	.word	0x0800efd8
 8001f7c:	0800efec 	.word	0x0800efec
 8001f80:	0046464f 	.word	0x0046464f
 8001f84:	0800eff0 	.word	0x0800eff0

08001f88 <ScreenIntro>:

void ScreenIntro(void){
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	b09c      	sub	sp, #112	; 0x70
 8001f8c:	af00      	add	r7, sp, #0
	char begin[] = "Sustav za generiranje,";
 8001f8e:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <ScreenIntro+0x128>)
 8001f90:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001f94:	461d      	mov	r5, r3
 8001f96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f9e:	6020      	str	r0, [r4, #0]
 8001fa0:	3404      	adds	r4, #4
 8001fa2:	8021      	strh	r1, [r4, #0]
 8001fa4:	3402      	adds	r4, #2
 8001fa6:	0c0b      	lsrs	r3, r1, #16
 8001fa8:	7023      	strb	r3, [r4, #0]
	char end[] = "akviziciju i prikaz signala";
 8001faa:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <ScreenIntro+0x12c>)
 8001fac:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001fb0:	461d      	mov	r5, r3
 8001fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TM_LCD_SetXY(35, TM_LCD_GetHeight()/2-22);
 8001fbe:	f007 fb05 	bl	80095cc <TM_LCD_GetHeight>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	3b16      	subs	r3, #22
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	4619      	mov	r1, r3
 8001fce:	2023      	movs	r0, #35	; 0x23
 8001fd0:	f007 f994 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_Puts(&begin[0]);
 8001fd4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f007 fa8d 	bl	80094f8 <TM_LCD_Puts>
	TM_LCD_SetXY(10, TM_LCD_GetHeight()/2);
 8001fde:	f007 faf5 	bl	80095cc <TM_LCD_GetHeight>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	085b      	lsrs	r3, r3, #1
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4619      	mov	r1, r3
 8001fea:	200a      	movs	r0, #10
 8001fec:	f007 f986 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_Puts(&end[0]);
 8001ff0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f007 fa7f 	bl	80094f8 <TM_LCD_Puts>
	char fer[] = "FER, 2020./2021.";
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <ScreenIntro+0x130>)
 8001ffc:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002000:	461d      	mov	r5, r3
 8002002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002006:	682b      	ldr	r3, [r5, #0]
 8002008:	7023      	strb	r3, [r4, #0]
	TM_LCD_SetFont(&TM_Font_7x10);
 800200a:	482c      	ldr	r0, [pc, #176]	; (80020bc <ScreenIntro+0x134>)
 800200c:	f007 f99c 	bl	8009348 <TM_LCD_SetFont>
	TM_LCD_SetXY(8, TM_LCD_GetHeight()-15);
 8002010:	f007 fadc 	bl	80095cc <TM_LCD_GetHeight>
 8002014:	4603      	mov	r3, r0
 8002016:	3b0f      	subs	r3, #15
 8002018:	b29b      	uxth	r3, r3
 800201a:	4619      	mov	r1, r3
 800201c:	2008      	movs	r0, #8
 800201e:	f007 f96d 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_Puts(&fer[0]);
 8002022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002026:	4618      	mov	r0, r3
 8002028:	f007 fa66 	bl	80094f8 <TM_LCD_Puts>
	for(int i=0; i<20000000;i++){}
 800202c:	2300      	movs	r3, #0
 800202e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002030:	e002      	b.n	8002038 <ScreenIntro+0xb0>
 8002032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002034:	3301      	adds	r3, #1
 8002036:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203a:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <ScreenIntro+0x138>)
 800203c:	4293      	cmp	r3, r2
 800203e:	ddf8      	ble.n	8002032 <ScreenIntro+0xaa>
	char next1[] = "Press user button";
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <ScreenIntro+0x13c>)
 8002042:	f107 0410 	add.w	r4, r7, #16
 8002046:	461d      	mov	r5, r3
 8002048:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800204a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	8023      	strh	r3, [r4, #0]
	char next2[] = "to continue";
 8002050:	4a1d      	ldr	r2, [pc, #116]	; (80020c8 <ScreenIntro+0x140>)
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	ca07      	ldmia	r2, {r0, r1, r2}
 8002056:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	TM_LCD_SetXY(200, TM_LCD_GetHeight()-20);
 800205a:	f007 fab7 	bl	80095cc <TM_LCD_GetHeight>
 800205e:	4603      	mov	r3, r0
 8002060:	3b14      	subs	r3, #20
 8002062:	b29b      	uxth	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	20c8      	movs	r0, #200	; 0xc8
 8002068:	f007 f948 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_Puts(&next1[0]);
 800206c:	f107 0310 	add.w	r3, r7, #16
 8002070:	4618      	mov	r0, r3
 8002072:	f007 fa41 	bl	80094f8 <TM_LCD_Puts>
	TM_LCD_SetXY(200, TM_LCD_GetHeight()-10);
 8002076:	f007 faa9 	bl	80095cc <TM_LCD_GetHeight>
 800207a:	4603      	mov	r3, r0
 800207c:	3b0a      	subs	r3, #10
 800207e:	b29b      	uxth	r3, r3
 8002080:	4619      	mov	r1, r3
 8002082:	20c8      	movs	r0, #200	; 0xc8
 8002084:	f007 f93a 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_Puts(&next2[0]);
 8002088:	1d3b      	adds	r3, r7, #4
 800208a:	4618      	mov	r0, r3
 800208c:	f007 fa34 	bl	80094f8 <TM_LCD_Puts>
	while(1){
		if(TM_DISCO_ButtonPressed() > 0) {
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <ScreenIntro+0x144>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f9      	beq.n	8002090 <ScreenIntro+0x108>
			TM_LCD_Fill(LCD_COLOR_WHITE);
 800209c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020a0:	f007 f8e0 	bl	8009264 <TM_LCD_Fill>
			break;
 80020a4:	bf00      	nop
		}
	}

}
 80020a6:	bf00      	nop
 80020a8:	3770      	adds	r7, #112	; 0x70
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bdb0      	pop	{r4, r5, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	0800effc 	.word	0x0800effc
 80020b4:	0800f014 	.word	0x0800f014
 80020b8:	0800f030 	.word	0x0800f030
 80020bc:	20001250 	.word	0x20001250
 80020c0:	01312cff 	.word	0x01312cff
 80020c4:	0800f044 	.word	0x0800f044
 80020c8:	0800f058 	.word	0x0800f058
 80020cc:	40020000 	.word	0x40020000

080020d0 <LCDFunctionGeneratorON>:

void LCDFunctionGeneratorON(void){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
	for(int i=7;i<23;i++){
 80020d6:	2307      	movs	r3, #7
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	e027      	b.n	800212c <LCDFunctionGeneratorON+0x5c>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 80020dc:	f007 fa76 	bl	80095cc <TM_LCD_GetHeight>
 80020e0:	4603      	mov	r3, r0
 80020e2:	3b0d      	subs	r3, #13
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	e017      	b.n	8002118 <LCDFunctionGeneratorON+0x48>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_WHITE){
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	b292      	uxth	r2, r2
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f007 f9ed 	bl	80094d2 <TM_LCD_GetPixel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020fe:	d108      	bne.n	8002112 <LCDFunctionGeneratorON+0x42>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_GREEN2);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	b29b      	uxth	r3, r3
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	b291      	uxth	r1, r2
 8002108:	f244 3221 	movw	r2, #17185	; 0x4321
 800210c:	4618      	mov	r0, r3
 800210e:	f007 f9cd 	bl	80094ac <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3301      	adds	r3, #1
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	f007 fa58 	bl	80095cc <TM_LCD_GetHeight>
 800211c:	4603      	mov	r3, r0
 800211e:	3b02      	subs	r3, #2
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	429a      	cmp	r2, r3
 8002124:	dbe0      	blt.n	80020e8 <LCDFunctionGeneratorON+0x18>
	for(int i=7;i<23;i++){
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	3301      	adds	r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b16      	cmp	r3, #22
 8002130:	ddd4      	ble.n	80020dc <LCDFunctionGeneratorON+0xc>
			}
		}
	}
	for(int i=27;i<49;i++){
 8002132:	231b      	movs	r3, #27
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	e027      	b.n	8002188 <LCDFunctionGeneratorON+0xb8>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002138:	f007 fa48 	bl	80095cc <TM_LCD_GetHeight>
 800213c:	4603      	mov	r3, r0
 800213e:	3b0d      	subs	r3, #13
 8002140:	603b      	str	r3, [r7, #0]
 8002142:	e017      	b.n	8002174 <LCDFunctionGeneratorON+0xa4>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_RED2){
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	b29b      	uxth	r3, r3
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	b292      	uxth	r2, r2
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f007 f9bf 	bl	80094d2 <TM_LCD_GetPixel>
 8002154:	4603      	mov	r3, r0
 8002156:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800215a:	d108      	bne.n	800216e <LCDFunctionGeneratorON+0x9e>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	b29b      	uxth	r3, r3
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	b291      	uxth	r1, r2
 8002164:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002168:	4618      	mov	r0, r3
 800216a:	f007 f99f 	bl	80094ac <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	f007 fa2a 	bl	80095cc <TM_LCD_GetHeight>
 8002178:	4603      	mov	r3, r0
 800217a:	3b02      	subs	r3, #2
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	dbe0      	blt.n	8002144 <LCDFunctionGeneratorON+0x74>
	for(int i=27;i<49;i++){
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3301      	adds	r3, #1
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b30      	cmp	r3, #48	; 0x30
 800218c:	ddd4      	ble.n	8002138 <LCDFunctionGeneratorON+0x68>
			}
		}
	}
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <LCDFunctionGeneratorOFF>:

void LCDFunctionGeneratorOFF(void){
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b08b      	sub	sp, #44	; 0x2c
 800219c:	af00      	add	r7, sp, #0
	for(int i=27;i<49;i++){
 800219e:	231b      	movs	r3, #27
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
 80021a2:	e027      	b.n	80021f4 <LCDFunctionGeneratorOFF+0x5c>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 80021a4:	f007 fa12 	bl	80095cc <TM_LCD_GetHeight>
 80021a8:	4603      	mov	r3, r0
 80021aa:	3b0d      	subs	r3, #13
 80021ac:	623b      	str	r3, [r7, #32]
 80021ae:	e017      	b.n	80021e0 <LCDFunctionGeneratorOFF+0x48>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_WHITE){
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	6a3a      	ldr	r2, [r7, #32]
 80021b6:	b292      	uxth	r2, r2
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f007 f989 	bl	80094d2 <TM_LCD_GetPixel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c6:	d108      	bne.n	80021da <LCDFunctionGeneratorOFF+0x42>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_RED2);
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	6a3a      	ldr	r2, [r7, #32]
 80021ce:	b291      	uxth	r1, r2
 80021d0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80021d4:	4618      	mov	r0, r3
 80021d6:	f007 f969 	bl	80094ac <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 80021da:	6a3b      	ldr	r3, [r7, #32]
 80021dc:	3301      	adds	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
 80021e0:	f007 f9f4 	bl	80095cc <TM_LCD_GetHeight>
 80021e4:	4603      	mov	r3, r0
 80021e6:	3b02      	subs	r3, #2
 80021e8:	6a3a      	ldr	r2, [r7, #32]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	dbe0      	blt.n	80021b0 <LCDFunctionGeneratorOFF+0x18>
	for(int i=27;i<49;i++){
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	3301      	adds	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	2b30      	cmp	r3, #48	; 0x30
 80021f8:	ddd4      	ble.n	80021a4 <LCDFunctionGeneratorOFF+0xc>
			}
		}
	}
	for(int i=7;i<23;i++){
 80021fa:	2307      	movs	r3, #7
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	e028      	b.n	8002252 <LCDFunctionGeneratorOFF+0xba>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002200:	f007 f9e4 	bl	80095cc <TM_LCD_GetHeight>
 8002204:	4603      	mov	r3, r0
 8002206:	3b0d      	subs	r3, #13
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	e018      	b.n	800223e <LCDFunctionGeneratorOFF+0xa6>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_GREEN2){
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	b29b      	uxth	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	b292      	uxth	r2, r2
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f007 f95b 	bl	80094d2 <TM_LCD_GetPixel>
 800221c:	4602      	mov	r2, r0
 800221e:	f244 3321 	movw	r3, #17185	; 0x4321
 8002222:	429a      	cmp	r2, r3
 8002224:	d108      	bne.n	8002238 <LCDFunctionGeneratorOFF+0xa0>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	b29b      	uxth	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	b291      	uxth	r1, r2
 800222e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002232:	4618      	mov	r0, r3
 8002234:	f007 f93a 	bl	80094ac <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	3301      	adds	r3, #1
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	f007 f9c5 	bl	80095cc <TM_LCD_GetHeight>
 8002242:	4603      	mov	r3, r0
 8002244:	3b02      	subs	r3, #2
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbdf      	blt.n	800220c <LCDFunctionGeneratorOFF+0x74>
	for(int i=7;i<23;i++){
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	3301      	adds	r3, #1
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	2b16      	cmp	r3, #22
 8002256:	ddd3      	ble.n	8002200 <LCDFunctionGeneratorOFF+0x68>
			}
		}
	}
	for(int i=137;i<159;i++){
 8002258:	2389      	movs	r3, #137	; 0x89
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	e01b      	b.n	8002296 <LCDFunctionGeneratorOFF+0xfe>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight()-7;j++){
 800225e:	f007 f9b5 	bl	80095cc <TM_LCD_GetHeight>
 8002262:	4603      	mov	r3, r0
 8002264:	3b12      	subs	r3, #18
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	e00b      	b.n	8002282 <LCDFunctionGeneratorOFF+0xea>
			TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	b29b      	uxth	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	b291      	uxth	r1, r2
 8002272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002276:	4618      	mov	r0, r3
 8002278:	f007 f918 	bl	80094ac <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight()-7;j++){
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	3301      	adds	r3, #1
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	f007 f9a3 	bl	80095cc <TM_LCD_GetHeight>
 8002286:	4603      	mov	r3, r0
 8002288:	3b07      	subs	r3, #7
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	429a      	cmp	r2, r3
 800228e:	dbec      	blt.n	800226a <LCDFunctionGeneratorOFF+0xd2>
	for(int i=137;i<159;i++){
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	3301      	adds	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b9e      	cmp	r3, #158	; 0x9e
 800229a:	dde0      	ble.n	800225e <LCDFunctionGeneratorOFF+0xc6>
		}
	}
	char gasi[] = "               ";
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <LCDFunctionGeneratorOFF+0x130>)
 800229e:	463c      	mov	r4, r7
 80022a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 80022a6:	f007 f991 	bl	80095cc <TM_LCD_GetHeight>
 80022aa:	4603      	mov	r3, r0
 80022ac:	3b12      	subs	r3, #18
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	4619      	mov	r1, r3
 80022b2:	20a5      	movs	r0, #165	; 0xa5
 80022b4:	f007 f822 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_Puts(&gasi[0]);
 80022b8:	463b      	mov	r3, r7
 80022ba:	4618      	mov	r0, r3
 80022bc:	f007 f91c 	bl	80094f8 <TM_LCD_Puts>
}
 80022c0:	bf00      	nop
 80022c2:	372c      	adds	r7, #44	; 0x2c
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	0800f064 	.word	0x0800f064
 80022cc:	00000000 	.word	0x00000000

080022d0 <SetSquareOutput>:
			Window();
		}
	}
}

void SetSquareOutput(long int freq){
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b0b9      	sub	sp, #228	; 0xe4
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	LCDFunctionGeneratorON();
 80022d8:	f7ff fefa 	bl	80020d0 <LCDFunctionGeneratorON>
	double sinus[20];
	for(int i=0; i<20; i++){
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80022e2:	e02a      	b.n	800233a <SetSquareOutput+0x6a>
		double a = (double) i;
 80022e4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80022e8:	f7fe f92c 	bl	8000544 <__aeabi_i2d>
 80022ec:	4603      	mov	r3, r0
 80022ee:	460c      	mov	r4, r1
 80022f0:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		sinus[i] = sin(0.33*a);
 80022f4:	a389      	add	r3, pc, #548	; (adr r3, 800251c <SetSquareOutput+0x24c>)
 80022f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022fa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80022fe:	f7fe f98b 	bl	8000618 <__aeabi_dmul>
 8002302:	4603      	mov	r3, r0
 8002304:	460c      	mov	r4, r1
 8002306:	ec44 3b17 	vmov	d7, r3, r4
 800230a:	eeb0 0a47 	vmov.f32	s0, s14
 800230e:	eef0 0a67 	vmov.f32	s1, s15
 8002312:	f00b fe41 	bl	800df98 <sin>
 8002316:	eeb0 7a40 	vmov.f32	s14, s0
 800231a:	eef0 7a60 	vmov.f32	s15, s1
 800231e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002328:	4413      	add	r3, r2
 800232a:	3bc8      	subs	r3, #200	; 0xc8
 800232c:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<20; i++){
 8002330:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002334:	3301      	adds	r3, #1
 8002336:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800233a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800233e:	2b13      	cmp	r3, #19
 8002340:	ddd0      	ble.n	80022e4 <SetSquareOutput+0x14>
	}

	for(int i=0;i<20;i++){
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002348:	e031      	b.n	80023ae <SetSquareOutput+0xde>
		int amplitude = (int)(-6* sinus[i] + 227);
 800234a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002354:	4413      	add	r3, r2
 8002356:	3bc8      	subs	r3, #200	; 0xc8
 8002358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800235c:	f04f 0200 	mov.w	r2, #0
 8002360:	4b6b      	ldr	r3, [pc, #428]	; (8002510 <SetSquareOutput+0x240>)
 8002362:	f7fe f959 	bl	8000618 <__aeabi_dmul>
 8002366:	4603      	mov	r3, r0
 8002368:	460c      	mov	r4, r1
 800236a:	4618      	mov	r0, r3
 800236c:	4621      	mov	r1, r4
 800236e:	a366      	add	r3, pc, #408	; (adr r3, 8002508 <SetSquareOutput+0x238>)
 8002370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002374:	f7fd ff9a 	bl	80002ac <__adddf3>
 8002378:	4603      	mov	r3, r0
 800237a:	460c      	mov	r4, r1
 800237c:	4618      	mov	r0, r3
 800237e:	4621      	mov	r1, r4
 8002380:	f7fe fbfa 	bl	8000b78 <__aeabi_d2iz>
 8002384:	4603      	mov	r3, r0
 8002386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		TM_LCD_DrawPixel(i+138, amplitude, LCD_COLOR_WHITE );
 800238a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800238e:	b29b      	uxth	r3, r3
 8002390:	338a      	adds	r3, #138	; 0x8a
 8002392:	b29b      	uxth	r3, r3
 8002394:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002398:	b291      	uxth	r1, r2
 800239a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800239e:	4618      	mov	r0, r3
 80023a0:	f007 f884 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=0;i<20;i++){
 80023a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023a8:	3301      	adds	r3, #1
 80023aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80023ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023b2:	2b13      	cmp	r3, #19
 80023b4:	ddc9      	ble.n	800234a <SetSquareOutput+0x7a>
	}
	for(int i=147; i<159;i++){
 80023b6:	2393      	movs	r3, #147	; 0x93
 80023b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023bc:	e012      	b.n	80023e4 <SetSquareOutput+0x114>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-18, LCD_COLOR_RED2);
 80023be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023c2:	b29c      	uxth	r4, r3
 80023c4:	f007 f902 	bl	80095cc <TM_LCD_GetHeight>
 80023c8:	4603      	mov	r3, r0
 80023ca:	3b12      	subs	r3, #18
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80023d2:	4619      	mov	r1, r3
 80023d4:	4620      	mov	r0, r4
 80023d6:	f007 f869 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=147; i<159;i++){
 80023da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023de:	3301      	adds	r3, #1
 80023e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80023e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023e8:	2b9e      	cmp	r3, #158	; 0x9e
 80023ea:	dde8      	ble.n	80023be <SetSquareOutput+0xee>
	}
	for(int i=137; i<147;i++){
 80023ec:	2389      	movs	r3, #137	; 0x89
 80023ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023f2:	e012      	b.n	800241a <SetSquareOutput+0x14a>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-8, LCD_COLOR_RED2);
 80023f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023f8:	b29c      	uxth	r4, r3
 80023fa:	f007 f8e7 	bl	80095cc <TM_LCD_GetHeight>
 80023fe:	4603      	mov	r3, r0
 8002400:	3b08      	subs	r3, #8
 8002402:	b29b      	uxth	r3, r3
 8002404:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002408:	4619      	mov	r1, r3
 800240a:	4620      	mov	r0, r4
 800240c:	f007 f84e 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=137; i<147;i++){
 8002410:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002414:	3301      	adds	r3, #1
 8002416:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800241a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800241e:	2b92      	cmp	r3, #146	; 0x92
 8002420:	dde8      	ble.n	80023f4 <SetSquareOutput+0x124>
	}
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 8002422:	f007 f8d3 	bl	80095cc <TM_LCD_GetHeight>
 8002426:	4603      	mov	r3, r0
 8002428:	3b12      	subs	r3, #18
 800242a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800242e:	e00d      	b.n	800244c <SetSquareOutput+0x17c>
		TM_LCD_DrawPixel(147, i, LCD_COLOR_RED2);
 8002430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002434:	b29b      	uxth	r3, r3
 8002436:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800243a:	4619      	mov	r1, r3
 800243c:	2093      	movs	r0, #147	; 0x93
 800243e:	f007 f835 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 8002442:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002446:	3301      	adds	r3, #1
 8002448:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800244c:	f007 f8be 	bl	80095cc <TM_LCD_GetHeight>
 8002450:	4603      	mov	r3, r0
 8002452:	3b08      	subs	r3, #8
 8002454:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002458:	429a      	cmp	r2, r3
 800245a:	dbe9      	blt.n	8002430 <SetSquareOutput+0x160>
	}
	char f[10] = {0};
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	605a      	str	r2, [r3, #4]
 8002466:	811a      	strh	r2, [r3, #8]
	sprintf(f,"%ld",freq);
 8002468:	f107 030c 	add.w	r3, r7, #12
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	4929      	ldr	r1, [pc, #164]	; (8002514 <SetSquareOutput+0x244>)
 8002470:	4618      	mov	r0, r3
 8002472:	f008 ff49 	bl	800b308 <siprintf>
	for(int i=165;i<320;i++){
 8002476:	23a5      	movs	r3, #165	; 0xa5
 8002478:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800247c:	e023      	b.n	80024c6 <SetSquareOutput+0x1f6>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 800247e:	f007 f8a5 	bl	80095cc <TM_LCD_GetHeight>
 8002482:	4603      	mov	r3, r0
 8002484:	3b12      	subs	r3, #18
 8002486:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800248a:	e00f      	b.n	80024ac <SetSquareOutput+0x1dc>
			TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800248c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002490:	b29b      	uxth	r3, r3
 8002492:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002496:	b291      	uxth	r1, r2
 8002498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800249c:	4618      	mov	r0, r3
 800249e:	f007 f805 	bl	80094ac <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 80024a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a6:	3301      	adds	r3, #1
 80024a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80024ac:	f007 f88e 	bl	80095cc <TM_LCD_GetHeight>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461a      	mov	r2, r3
 80024b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024b8:	4293      	cmp	r3, r2
 80024ba:	dbe7      	blt.n	800248c <SetSquareOutput+0x1bc>
	for(int i=165;i<320;i++){
 80024bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024c0:	3301      	adds	r3, #1
 80024c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024ca:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80024ce:	dbd6      	blt.n	800247e <SetSquareOutput+0x1ae>
		}
	}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 80024d0:	f007 f87c 	bl	80095cc <TM_LCD_GetHeight>
 80024d4:	4603      	mov	r3, r0
 80024d6:	3b12      	subs	r3, #18
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4619      	mov	r1, r3
 80024dc:	20a5      	movs	r0, #165	; 0xa5
 80024de:	f006 ff0d 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_Puts(&f[0]);
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	4618      	mov	r0, r3
 80024e8:	f007 f806 	bl	80094f8 <TM_LCD_Puts>
	char f1[] = " Hz";
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <SetSquareOutput+0x248>)
 80024ee:	60bb      	str	r3, [r7, #8]
	TM_LCD_Puts(&f1[0]);
 80024f0:	f107 0308 	add.w	r3, r7, #8
 80024f4:	4618      	mov	r0, r3
 80024f6:	f006 ffff 	bl	80094f8 <TM_LCD_Puts>

}
 80024fa:	bf00      	nop
 80024fc:	37e4      	adds	r7, #228	; 0xe4
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd90      	pop	{r4, r7, pc}
 8002502:	bf00      	nop
 8002504:	f3af 8000 	nop.w
 8002508:	00000000 	.word	0x00000000
 800250c:	406c6000 	.word	0x406c6000
 8002510:	c0180000 	.word	0xc0180000
 8002514:	0800f074 	.word	0x0800f074
 8002518:	007a4820 	.word	0x007a4820
 800251c:	51eb851f 	.word	0x51eb851f
 8002520:	3fd51eb8 	.word	0x3fd51eb8
 8002524:	00000000 	.word	0x00000000

08002528 <SetSineOutput>:

void SetSineOutput(long int freq){
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b0b9      	sub	sp, #228	; 0xe4
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

	LCDFunctionGeneratorON();
 8002530:	f7ff fdce 	bl	80020d0 <LCDFunctionGeneratorON>
	double sinus[20];
	for(int i=147; i<159;i++){
 8002534:	2393      	movs	r3, #147	; 0x93
 8002536:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800253a:	e012      	b.n	8002562 <SetSineOutput+0x3a>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-18, LCD_COLOR_WHITE);
 800253c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002540:	b29c      	uxth	r4, r3
 8002542:	f007 f843 	bl	80095cc <TM_LCD_GetHeight>
 8002546:	4603      	mov	r3, r0
 8002548:	3b12      	subs	r3, #18
 800254a:	b29b      	uxth	r3, r3
 800254c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002550:	4619      	mov	r1, r3
 8002552:	4620      	mov	r0, r4
 8002554:	f006 ffaa 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=147; i<159;i++){
 8002558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800255c:	3301      	adds	r3, #1
 800255e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002566:	2b9e      	cmp	r3, #158	; 0x9e
 8002568:	dde8      	ble.n	800253c <SetSineOutput+0x14>
	}
	for(int i=137; i<147;i++){
 800256a:	2389      	movs	r3, #137	; 0x89
 800256c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002570:	e012      	b.n	8002598 <SetSineOutput+0x70>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-8, LCD_COLOR_WHITE);
 8002572:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002576:	b29c      	uxth	r4, r3
 8002578:	f007 f828 	bl	80095cc <TM_LCD_GetHeight>
 800257c:	4603      	mov	r3, r0
 800257e:	3b08      	subs	r3, #8
 8002580:	b29b      	uxth	r3, r3
 8002582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002586:	4619      	mov	r1, r3
 8002588:	4620      	mov	r0, r4
 800258a:	f006 ff8f 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=137; i<147;i++){
 800258e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002592:	3301      	adds	r3, #1
 8002594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002598:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800259c:	2b92      	cmp	r3, #146	; 0x92
 800259e:	dde8      	ble.n	8002572 <SetSineOutput+0x4a>
	}
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 80025a0:	f007 f814 	bl	80095cc <TM_LCD_GetHeight>
 80025a4:	4603      	mov	r3, r0
 80025a6:	3b12      	subs	r3, #18
 80025a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025ac:	e00d      	b.n	80025ca <SetSineOutput+0xa2>
		TM_LCD_DrawPixel(147, i, LCD_COLOR_WHITE);
 80025ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025b8:	4619      	mov	r1, r3
 80025ba:	2093      	movs	r0, #147	; 0x93
 80025bc:	f006 ff76 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 80025c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80025c4:	3301      	adds	r3, #1
 80025c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80025ca:	f006 ffff 	bl	80095cc <TM_LCD_GetHeight>
 80025ce:	4603      	mov	r3, r0
 80025d0:	3b08      	subs	r3, #8
 80025d2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80025d6:	429a      	cmp	r2, r3
 80025d8:	dbe9      	blt.n	80025ae <SetSineOutput+0x86>
	}

	for(int i=0; i<20; i++){
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025e0:	e02a      	b.n	8002638 <SetSineOutput+0x110>
		double a = (double) i;
 80025e2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80025e6:	f7fd ffad 	bl	8000544 <__aeabi_i2d>
 80025ea:	4603      	mov	r3, r0
 80025ec:	460c      	mov	r4, r1
 80025ee:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		sinus[i] = sin(0.33*a);
 80025f2:	a360      	add	r3, pc, #384	; (adr r3, 8002774 <SetSineOutput+0x24c>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80025fc:	f7fe f80c 	bl	8000618 <__aeabi_dmul>
 8002600:	4603      	mov	r3, r0
 8002602:	460c      	mov	r4, r1
 8002604:	ec44 3b17 	vmov	d7, r3, r4
 8002608:	eeb0 0a47 	vmov.f32	s0, s14
 800260c:	eef0 0a67 	vmov.f32	s1, s15
 8002610:	f00b fcc2 	bl	800df98 <sin>
 8002614:	eeb0 7a40 	vmov.f32	s14, s0
 8002618:	eef0 7a60 	vmov.f32	s15, s1
 800261c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002626:	4413      	add	r3, r2
 8002628:	3bc8      	subs	r3, #200	; 0xc8
 800262a:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<20; i++){
 800262e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002632:	3301      	adds	r3, #1
 8002634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002638:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800263c:	2b13      	cmp	r3, #19
 800263e:	ddd0      	ble.n	80025e2 <SetSineOutput+0xba>
	}

	for(int i=0;i<20;i++){
 8002640:	2300      	movs	r3, #0
 8002642:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002646:	e031      	b.n	80026ac <SetSineOutput+0x184>
		int amplitude = (int)(-6* sinus[i] + 227);
 8002648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002652:	4413      	add	r3, r2
 8002654:	3bc8      	subs	r3, #200	; 0xc8
 8002656:	e9d3 0100 	ldrd	r0, r1, [r3]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	4b42      	ldr	r3, [pc, #264]	; (8002768 <SetSineOutput+0x240>)
 8002660:	f7fd ffda 	bl	8000618 <__aeabi_dmul>
 8002664:	4603      	mov	r3, r0
 8002666:	460c      	mov	r4, r1
 8002668:	4618      	mov	r0, r3
 800266a:	4621      	mov	r1, r4
 800266c:	a33c      	add	r3, pc, #240	; (adr r3, 8002760 <SetSineOutput+0x238>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fd fe1b 	bl	80002ac <__adddf3>
 8002676:	4603      	mov	r3, r0
 8002678:	460c      	mov	r4, r1
 800267a:	4618      	mov	r0, r3
 800267c:	4621      	mov	r1, r4
 800267e:	f7fe fa7b 	bl	8000b78 <__aeabi_d2iz>
 8002682:	4603      	mov	r3, r0
 8002684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		TM_LCD_DrawPixel(i+138, amplitude, LCD_COLOR_RED2);
 8002688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800268c:	b29b      	uxth	r3, r3
 800268e:	338a      	adds	r3, #138	; 0x8a
 8002690:	b29b      	uxth	r3, r3
 8002692:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002696:	b291      	uxth	r1, r2
 8002698:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800269c:	4618      	mov	r0, r3
 800269e:	f006 ff05 	bl	80094ac <TM_LCD_DrawPixel>
	for(int i=0;i<20;i++){
 80026a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026a6:	3301      	adds	r3, #1
 80026a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80026ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026b0:	2b13      	cmp	r3, #19
 80026b2:	ddc9      	ble.n	8002648 <SetSineOutput+0x120>
	}
	char f[10] = {0};
 80026b4:	f107 030c 	add.w	r3, r7, #12
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	811a      	strh	r2, [r3, #8]
	sprintf(f,"%ld",freq);
 80026c0:	f107 030c 	add.w	r3, r7, #12
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	4929      	ldr	r1, [pc, #164]	; (800276c <SetSineOutput+0x244>)
 80026c8:	4618      	mov	r0, r3
 80026ca:	f008 fe1d 	bl	800b308 <siprintf>
	for(int i=165;i<320;i++){
 80026ce:	23a5      	movs	r3, #165	; 0xa5
 80026d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026d4:	e023      	b.n	800271e <SetSineOutput+0x1f6>
			for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 80026d6:	f006 ff79 	bl	80095cc <TM_LCD_GetHeight>
 80026da:	4603      	mov	r3, r0
 80026dc:	3b12      	subs	r3, #18
 80026de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80026e2:	e00f      	b.n	8002704 <SetSineOutput+0x1dc>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 80026e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80026ee:	b291      	uxth	r1, r2
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026f4:	4618      	mov	r0, r3
 80026f6:	f006 fed9 	bl	80094ac <TM_LCD_DrawPixel>
			for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 80026fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80026fe:	3301      	adds	r3, #1
 8002700:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002704:	f006 ff62 	bl	80095cc <TM_LCD_GetHeight>
 8002708:	4603      	mov	r3, r0
 800270a:	461a      	mov	r2, r3
 800270c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002710:	4293      	cmp	r3, r2
 8002712:	dbe7      	blt.n	80026e4 <SetSineOutput+0x1bc>
	for(int i=165;i<320;i++){
 8002714:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002718:	3301      	adds	r3, #1
 800271a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800271e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002722:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002726:	dbd6      	blt.n	80026d6 <SetSineOutput+0x1ae>
			}
		}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 8002728:	f006 ff50 	bl	80095cc <TM_LCD_GetHeight>
 800272c:	4603      	mov	r3, r0
 800272e:	3b12      	subs	r3, #18
 8002730:	b29b      	uxth	r3, r3
 8002732:	4619      	mov	r1, r3
 8002734:	20a5      	movs	r0, #165	; 0xa5
 8002736:	f006 fde1 	bl	80092fc <TM_LCD_SetXY>
	TM_LCD_Puts(&f[0]);
 800273a:	f107 030c 	add.w	r3, r7, #12
 800273e:	4618      	mov	r0, r3
 8002740:	f006 feda 	bl	80094f8 <TM_LCD_Puts>
	char f1[] = " Hz";
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <SetSineOutput+0x248>)
 8002746:	60bb      	str	r3, [r7, #8]
	TM_LCD_Puts(&f1[0]);
 8002748:	f107 0308 	add.w	r3, r7, #8
 800274c:	4618      	mov	r0, r3
 800274e:	f006 fed3 	bl	80094f8 <TM_LCD_Puts>
}
 8002752:	bf00      	nop
 8002754:	37e4      	adds	r7, #228	; 0xe4
 8002756:	46bd      	mov	sp, r7
 8002758:	bd90      	pop	{r4, r7, pc}
 800275a:	bf00      	nop
 800275c:	f3af 8000 	nop.w
 8002760:	00000000 	.word	0x00000000
 8002764:	406c6000 	.word	0x406c6000
 8002768:	c0180000 	.word	0xc0180000
 800276c:	0800f074 	.word	0x0800f074
 8002770:	007a4820 	.word	0x007a4820
 8002774:	51eb851f 	.word	0x51eb851f
 8002778:	3fd51eb8 	.word	0x3fd51eb8

0800277c <Window>:
	TM_LCD_Puts(&title[0]);
	TM_LCD_SetFont(&TM_Font_7x10);
	SendToScreen(signal);
}

void Window(void){
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
	for(int i=1; i<319;i++){
 8002782:	2301      	movs	r3, #1
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	e01f      	b.n	80027c8 <Window+0x4c>
			for(int j=1;j<TM_LCD_GetHeight()*3/4+2;j++){
 8002788:	2301      	movs	r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	e00a      	b.n	80027a4 <Window+0x28>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_BLACK);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	b29b      	uxth	r3, r3
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	b291      	uxth	r1, r2
 8002796:	2200      	movs	r2, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f006 fe87 	bl	80094ac <TM_LCD_DrawPixel>
			for(int j=1;j<TM_LCD_GetHeight()*3/4+2;j++){
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3301      	adds	r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	f006 ff12 	bl	80095cc <TM_LCD_GetHeight>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	4613      	mov	r3, r2
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da00      	bge.n	80027b8 <Window+0x3c>
 80027b6:	3303      	adds	r3, #3
 80027b8:	109b      	asrs	r3, r3, #2
 80027ba:	3302      	adds	r3, #2
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	429a      	cmp	r2, r3
 80027c0:	dbe5      	blt.n	800278e <Window+0x12>
	for(int i=1; i<319;i++){
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	3301      	adds	r3, #1
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 80027ce:	dddb      	ble.n	8002788 <Window+0xc>
			}
		}
		for(int i=1; i<319;i++){
 80027d0:	2301      	movs	r3, #1
 80027d2:	607b      	str	r3, [r7, #4]
 80027d4:	e04a      	b.n	800286c <Window+0xf0>
			for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 80027d6:	2301      	movs	r3, #1
 80027d8:	603b      	str	r3, [r7, #0]
 80027da:	e035      	b.n	8002848 <Window+0xcc>
				if(j==91){
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b5b      	cmp	r3, #91	; 0x5b
 80027e0:	d114      	bne.n	800280c <Window+0x90>
					if(i%3==0){
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4b25      	ldr	r3, [pc, #148]	; (800287c <Window+0x100>)
 80027e6:	fb83 3201 	smull	r3, r2, r3, r1
 80027ea:	17cb      	asrs	r3, r1, #31
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	1aca      	subs	r2, r1, r3
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	d108      	bne.n	800280c <Window+0x90>
						TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	b291      	uxth	r1, r2
 8002802:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002806:	4618      	mov	r0, r3
 8002808:	f006 fe50 	bl	80094ac <TM_LCD_DrawPixel>
					}
				}
				if((i%16==0)&&(j%9==0))	TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	2b00      	cmp	r3, #0
 8002814:	d115      	bne.n	8002842 <Window+0xc6>
 8002816:	6839      	ldr	r1, [r7, #0]
 8002818:	4b19      	ldr	r3, [pc, #100]	; (8002880 <Window+0x104>)
 800281a:	fb83 2301 	smull	r2, r3, r3, r1
 800281e:	105a      	asrs	r2, r3, #1
 8002820:	17cb      	asrs	r3, r1, #31
 8002822:	1ad2      	subs	r2, r2, r3
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	1aca      	subs	r2, r1, r3
 800282c:	2a00      	cmp	r2, #0
 800282e:	d108      	bne.n	8002842 <Window+0xc6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	b29b      	uxth	r3, r3
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	b291      	uxth	r1, r2
 8002838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800283c:	4618      	mov	r0, r3
 800283e:	f006 fe35 	bl	80094ac <TM_LCD_DrawPixel>
			for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	f006 fec0 	bl	80095cc <TM_LCD_GetHeight>
 800284c:	4603      	mov	r3, r0
 800284e:	461a      	mov	r2, r3
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	da00      	bge.n	800285c <Window+0xe0>
 800285a:	3303      	adds	r3, #3
 800285c:	109b      	asrs	r3, r3, #2
 800285e:	461a      	mov	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4293      	cmp	r3, r2
 8002864:	dbba      	blt.n	80027dc <Window+0x60>
		for(int i=1; i<319;i++){
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3301      	adds	r3, #1
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002872:	ddb0      	ble.n	80027d6 <Window+0x5a>
			}
		}
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	55555556 	.word	0x55555556
 8002880:	38e38e39 	.word	0x38e38e39

08002884 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b09a      	sub	sp, #104	; 0x68
 8002888:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800288a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800288e:	2234      	movs	r2, #52	; 0x34
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f007 fe34 	bl	800a500 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002898:	463b      	mov	r3, r7
 800289a:	2234      	movs	r2, #52	; 0x34
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f007 fe2e 	bl	800a500 <memset>

  hltdc.Instance = LTDC;
 80028a4:	4b4e      	ldr	r3, [pc, #312]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028a6:	4a4f      	ldr	r2, [pc, #316]	; (80029e4 <MX_LTDC_Init+0x160>)
 80028a8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80028aa:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80028b0:	4b4b      	ldr	r3, [pc, #300]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80028b6:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80028bc:	4b48      	ldr	r3, [pc, #288]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80028c8:	4b45      	ldr	r3, [pc, #276]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028ca:	2203      	movs	r2, #3
 80028cc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80028ce:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028d0:	220e      	movs	r2, #14
 80028d2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80028d4:	4b42      	ldr	r3, [pc, #264]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028d6:	2205      	movs	r2, #5
 80028d8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028dc:	f240 228e 	movw	r2, #654	; 0x28e
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80028e2:	4b3f      	ldr	r3, [pc, #252]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028e4:	f240 12e5 	movw	r2, #485	; 0x1e5
 80028e8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80028ea:	4b3d      	ldr	r3, [pc, #244]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028ec:	f44f 7225 	mov.w	r2, #660	; 0x294
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028f4:	f240 12e7 	movw	r2, #487	; 0x1e7
 80028f8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80028fa:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002902:	4b37      	ldr	r3, [pc, #220]	; (80029e0 <MX_LTDC_Init+0x15c>)
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800290a:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <MX_LTDC_Init+0x15c>)
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002912:	4833      	ldr	r0, [pc, #204]	; (80029e0 <MX_LTDC_Init+0x15c>)
 8002914:	f003 f8d6 	bl	8005ac4 <HAL_LTDC_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800291e:	f000 fa31 	bl	8002d84 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002932:	2300      	movs	r3, #0
 8002934:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 800293a:	2300      	movs	r3, #0
 800293c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800293e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002942:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002944:	2305      	movs	r3, #5
 8002946:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002966:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800296a:	2200      	movs	r2, #0
 800296c:	4619      	mov	r1, r3
 800296e:	481c      	ldr	r0, [pc, #112]	; (80029e0 <MX_LTDC_Init+0x15c>)
 8002970:	f003 fa3a 	bl	8005de8 <HAL_LTDC_ConfigLayer>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800297a:	f000 fa03 	bl	8002d84 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800299a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800299e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80029a0:	2305      	movs	r3, #5
 80029a2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80029c2:	463b      	mov	r3, r7
 80029c4:	2201      	movs	r2, #1
 80029c6:	4619      	mov	r1, r3
 80029c8:	4805      	ldr	r0, [pc, #20]	; (80029e0 <MX_LTDC_Init+0x15c>)
 80029ca:	f003 fa0d 	bl	8005de8 <HAL_LTDC_ConfigLayer>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80029d4:	f000 f9d6 	bl	8002d84 <Error_Handler>
  }

}
 80029d8:	bf00      	nop
 80029da:	3768      	adds	r7, #104	; 0x68
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20001e74 	.word	0x20001e74
 80029e4:	40016800 	.word	0x40016800

080029e8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08e      	sub	sp, #56	; 0x38
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a77      	ldr	r2, [pc, #476]	; (8002be4 <HAL_LTDC_MspInit+0x1fc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	f040 80e7 	bne.w	8002bda <HAL_LTDC_MspInit+0x1f2>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	4b75      	ldr	r3, [pc, #468]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	4a74      	ldr	r2, [pc, #464]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a1a:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1c:	4b72      	ldr	r3, [pc, #456]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a24:	623b      	str	r3, [r7, #32]
 8002a26:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	4b6e      	ldr	r3, [pc, #440]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	4a6d      	ldr	r2, [pc, #436]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a32:	f043 0320 	orr.w	r3, r3, #32
 8002a36:	6313      	str	r3, [r2, #48]	; 0x30
 8002a38:	4b6b      	ldr	r3, [pc, #428]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
 8002a48:	4b67      	ldr	r3, [pc, #412]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	4a66      	ldr	r2, [pc, #408]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6313      	str	r3, [r2, #48]	; 0x30
 8002a54:	4b64      	ldr	r3, [pc, #400]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	4b60      	ldr	r3, [pc, #384]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4a5f      	ldr	r2, [pc, #380]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a6a:	f043 0302 	orr.w	r3, r3, #2
 8002a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a70:	4b5d      	ldr	r3, [pc, #372]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
 8002a80:	4b59      	ldr	r3, [pc, #356]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4a58      	ldr	r2, [pc, #352]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8c:	4b56      	ldr	r3, [pc, #344]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	4b52      	ldr	r3, [pc, #328]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	4a51      	ldr	r2, [pc, #324]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa8:	4b4f      	ldr	r3, [pc, #316]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	4a4a      	ldr	r2, [pc, #296]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002abe:	f043 0308 	orr.w	r3, r3, #8
 8002ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac4:	4b48      	ldr	r3, [pc, #288]	; (8002be8 <HAL_LTDC_MspInit+0x200>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ae2:	230e      	movs	r3, #14
 8002ae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aea:	4619      	mov	r1, r3
 8002aec:	483f      	ldr	r0, [pc, #252]	; (8002bec <HAL_LTDC_MspInit+0x204>)
 8002aee:	f002 fe25 	bl	800573c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8002af2:	f641 0358 	movw	r3, #6232	; 0x1858
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af8:	2302      	movs	r3, #2
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b04:	230e      	movs	r3, #14
 8002b06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4838      	ldr	r0, [pc, #224]	; (8002bf0 <HAL_LTDC_MspInit+0x208>)
 8002b10:	f002 fe14 	bl	800573c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b14:	2303      	movs	r3, #3
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002b24:	2309      	movs	r3, #9
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4831      	ldr	r0, [pc, #196]	; (8002bf4 <HAL_LTDC_MspInit+0x20c>)
 8002b30:	f002 fe04 	bl	800573c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8002b34:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b42:	2300      	movs	r3, #0
 8002b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b46:	230e      	movs	r3, #14
 8002b48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4828      	ldr	r0, [pc, #160]	; (8002bf4 <HAL_LTDC_MspInit+0x20c>)
 8002b52:	f002 fdf3 	bl	800573c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8002b56:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b68:	230e      	movs	r3, #14
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b70:	4619      	mov	r1, r3
 8002b72:	4821      	ldr	r0, [pc, #132]	; (8002bf8 <HAL_LTDC_MspInit+0x210>)
 8002b74:	f002 fde2 	bl	800573c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b78:	23c0      	movs	r3, #192	; 0xc0
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002b88:	230e      	movs	r3, #14
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b90:	4619      	mov	r1, r3
 8002b92:	481a      	ldr	r0, [pc, #104]	; (8002bfc <HAL_LTDC_MspInit+0x214>)
 8002b94:	f002 fdd2 	bl	800573c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b98:	2308      	movs	r3, #8
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ba8:	230e      	movs	r3, #14
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4813      	ldr	r0, [pc, #76]	; (8002c00 <HAL_LTDC_MspInit+0x218>)
 8002bb4:	f002 fdc2 	bl	800573c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002bb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002bca:	2309      	movs	r3, #9
 8002bcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4808      	ldr	r0, [pc, #32]	; (8002bf8 <HAL_LTDC_MspInit+0x210>)
 8002bd6:	f002 fdb1 	bl	800573c <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3738      	adds	r7, #56	; 0x38
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40016800 	.word	0x40016800
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40021400 	.word	0x40021400
 8002bf0:	40020000 	.word	0x40020000
 8002bf4:	40020400 	.word	0x40020400
 8002bf8:	40021800 	.word	0x40021800
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40020c00 	.word	0x40020c00

08002c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c08:	f000 ff1a 	bl	8003a40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c0c:	f000 f82e 	bl	8002c6c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //MX_SPI1_Init();
  StartScreen();
 8002c10:	f7ff f8e0 	bl	8001dd4 <StartScreen>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c14:	f7ff f846 	bl	8001ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c18:	f7fe fee0 	bl	80019dc <MX_DMA_Init>
  MX_LTDC_Init();
 8002c1c:	f7ff fe32 	bl	8002884 <MX_LTDC_Init>
  MX_DMA2D_Init();
 8002c20:	f7fe ff12 	bl	8001a48 <MX_DMA2D_Init>
  MX_FMC_Init();
 8002c24:	f7fe ff64 	bl	8001af0 <MX_FMC_Init>
  MX_SPI1_Init();
 8002c28:	f000 fbf4 	bl	8003414 <MX_SPI1_Init>
  MX_ADC3_Init();
 8002c2c:	f7fe fbdc 	bl	80013e8 <MX_ADC3_Init>
  MX_DAC_Init();
 8002c30:	f7fe fd1e 	bl	8001670 <MX_DAC_Init>
  MX_USART1_UART_Init();
 8002c34:	f000 fdbe 	bl	80037b4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002c38:	f000 fd56 	bl	80036e8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  start_timer();
 8002c3c:	f000 fdb0 	bl	80037a0 <start_timer>
  if(HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&buffer, BUFFER_SIZE) != HAL_OK)
 8002c40:	2240      	movs	r2, #64	; 0x40
 8002c42:	4908      	ldr	r1, [pc, #32]	; (8002c64 <main+0x60>)
 8002c44:	4808      	ldr	r0, [pc, #32]	; (8002c68 <main+0x64>)
 8002c46:	f000 ff91 	bl	8003b6c <HAL_ADC_Start_DMA>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <main+0x50>
    {
      /* Start Conversation Error */
      Error_Handler();
 8002c50:	f000 f898 	bl	8002d84 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  generate();
 8002c54:	f7fe fc92 	bl	800157c <generate>

	  matlab();
 8002c58:	f000 f89a 	bl	8002d90 <matlab>
	  cutOffSetup();
 8002c5c:	f7fe f9a4 	bl	8000fa8 <cutOffSetup>
	  generate();
 8002c60:	e7f8      	b.n	8002c54 <main+0x50>
 8002c62:	bf00      	nop
 8002c64:	20001968 	.word	0x20001968
 8002c68:	20001820 	.word	0x20001820

08002c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b0a0      	sub	sp, #128	; 0x80
 8002c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002c76:	2230      	movs	r2, #48	; 0x30
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f007 fc40 	bl	800a500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c90:	f107 030c 	add.w	r3, r7, #12
 8002c94:	2230      	movs	r2, #48	; 0x30
 8002c96:	2100      	movs	r1, #0
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f007 fc31 	bl	800a500 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <SystemClock_Config+0x110>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a35      	ldr	r2, [pc, #212]	; (8002d7c <SystemClock_Config+0x110>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b33      	ldr	r3, [pc, #204]	; (8002d7c <SystemClock_Config+0x110>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <SystemClock_Config+0x114>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a2f      	ldr	r2, [pc, #188]	; (8002d80 <SystemClock_Config+0x114>)
 8002cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <SystemClock_Config+0x114>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002cd2:	607b      	str	r3, [r7, #4]
 8002cd4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cde:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ce4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ce8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002cea:	2308      	movs	r3, #8
 8002cec:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 8002cee:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002cf2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cfc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d00:	4618      	mov	r0, r3
 8002d02:	f003 fb05 	bl	8006310 <HAL_RCC_OscConfig>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002d0c:	f000 f83a 	bl	8002d84 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d10:	f003 faae 	bl	8006270 <HAL_PWREx_EnableOverDrive>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002d1a:	f000 f833 	bl	8002d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d1e:	230f      	movs	r3, #15
 8002d20:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d22:	2302      	movs	r3, #2
 8002d24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d26:	2300      	movs	r3, #0
 8002d28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8002d30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002d34:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d36:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d3a:	2105      	movs	r1, #5
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fd57 	bl	80067f0 <HAL_RCC_ClockConfig>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002d48:	f000 f81c 	bl	8002d84 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d4c:	2308      	movs	r3, #8
 8002d4e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002d50:	23c0      	movs	r3, #192	; 0xc0
 8002d52:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002d54:	2304      	movs	r3, #4
 8002d56:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d5e:	f107 030c 	add.w	r3, r7, #12
 8002d62:	4618      	mov	r0, r3
 8002d64:	f003 ff36 	bl	8006bd4 <HAL_RCCEx_PeriphCLKConfig>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8002d6e:	f000 f809 	bl	8002d84 <Error_Handler>
  }
}
 8002d72:	bf00      	nop
 8002d74:	3780      	adds	r7, #128	; 0x80
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	40007000 	.word	0x40007000

08002d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d88:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d8a:	e7fe      	b.n	8002d8a <Error_Handler+0x6>
 8002d8c:	0000      	movs	r0, r0
	...

08002d90 <matlab>:

float i = 0;



void matlab(void){
 8002d90:	b590      	push	{r4, r7, lr}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0

	for (int k = 0; k < SEND_SIZE; k++){
 8002d96:	2300      	movs	r3, #0
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	e007      	b.n	8002dac <matlab+0x1c>
		USART1_SendInt((int) amplitude_temp);
 8002d9c:	4bd8      	ldr	r3, [pc, #864]	; (8003100 <matlab+0x370>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fdd5 	bl	8003950 <USART1_SendInt>
	for (int k = 0; k < SEND_SIZE; k++){
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	2b3f      	cmp	r3, #63	; 0x3f
 8002db0:	ddf4      	ble.n	8002d9c <matlab+0xc>
	}
	USART1_SendChar('\r');
 8002db2:	200d      	movs	r0, #13
 8002db4:	f000 fdba 	bl	800392c <USART1_SendChar>
	USART1_SendChar('\n');
 8002db8:	200a      	movs	r0, #10
 8002dba:	f000 fdb7 	bl	800392c <USART1_SendChar>

	char response[RESPONSE_SIZE];
	response[0] = '-';
 8002dbe:	232d      	movs	r3, #45	; 0x2d
 8002dc0:	713b      	strb	r3, [r7, #4]
	response[1] = '\0';
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	717b      	strb	r3, [r7, #5]
	
	while (USART1_Dequeue(&c)){
 8002dc6:	e009      	b.n	8002ddc <matlab+0x4c>
		temp[0] = c;
 8002dc8:	4bce      	ldr	r3, [pc, #824]	; (8003104 <matlab+0x374>)
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	4bce      	ldr	r3, [pc, #824]	; (8003108 <matlab+0x378>)
 8002dce:	701a      	strb	r2, [r3, #0]
		strncat(response,temp,1);
 8002dd0:	1d3b      	adds	r3, r7, #4
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	49cc      	ldr	r1, [pc, #816]	; (8003108 <matlab+0x378>)
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f008 fac3 	bl	800b362 <strncat>
	while (USART1_Dequeue(&c)){
 8002ddc:	48c9      	ldr	r0, [pc, #804]	; (8003104 <matlab+0x374>)
 8002dde:	f000 fdd1 	bl	8003984 <USART1_Dequeue>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ef      	bne.n	8002dc8 <matlab+0x38>
	}

	switch (response[1]){
 8002de8:	797b      	ldrb	r3, [r7, #5]
 8002dea:	2b57      	cmp	r3, #87	; 0x57
 8002dec:	f200 82b2 	bhi.w	8003354 <matlab+0x5c4>
 8002df0:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <matlab+0x68>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08003355 	.word	0x08003355
 8002dfc:	08003355 	.word	0x08003355
 8002e00:	08003355 	.word	0x08003355
 8002e04:	08003355 	.word	0x08003355
 8002e08:	08003355 	.word	0x08003355
 8002e0c:	08003355 	.word	0x08003355
 8002e10:	08003355 	.word	0x08003355
 8002e14:	08003355 	.word	0x08003355
 8002e18:	08003355 	.word	0x08003355
 8002e1c:	08003355 	.word	0x08003355
 8002e20:	08003355 	.word	0x08003355
 8002e24:	08003355 	.word	0x08003355
 8002e28:	08003355 	.word	0x08003355
 8002e2c:	08003355 	.word	0x08003355
 8002e30:	08003355 	.word	0x08003355
 8002e34:	08003355 	.word	0x08003355
 8002e38:	08003355 	.word	0x08003355
 8002e3c:	08003355 	.word	0x08003355
 8002e40:	08003355 	.word	0x08003355
 8002e44:	08003355 	.word	0x08003355
 8002e48:	08003355 	.word	0x08003355
 8002e4c:	08003355 	.word	0x08003355
 8002e50:	08003355 	.word	0x08003355
 8002e54:	08003355 	.word	0x08003355
 8002e58:	08003355 	.word	0x08003355
 8002e5c:	08003355 	.word	0x08003355
 8002e60:	08003355 	.word	0x08003355
 8002e64:	08003355 	.word	0x08003355
 8002e68:	08003355 	.word	0x08003355
 8002e6c:	08003355 	.word	0x08003355
 8002e70:	08003355 	.word	0x08003355
 8002e74:	08003355 	.word	0x08003355
 8002e78:	08003355 	.word	0x08003355
 8002e7c:	08003355 	.word	0x08003355
 8002e80:	08003355 	.word	0x08003355
 8002e84:	08003355 	.word	0x08003355
 8002e88:	08003355 	.word	0x08003355
 8002e8c:	08003355 	.word	0x08003355
 8002e90:	08003355 	.word	0x08003355
 8002e94:	08003355 	.word	0x08003355
 8002e98:	08003355 	.word	0x08003355
 8002e9c:	08003355 	.word	0x08003355
 8002ea0:	08003355 	.word	0x08003355
 8002ea4:	08003355 	.word	0x08003355
 8002ea8:	08003355 	.word	0x08003355
 8002eac:	08003355 	.word	0x08003355
 8002eb0:	08003355 	.word	0x08003355
 8002eb4:	08003355 	.word	0x08003355
 8002eb8:	08003355 	.word	0x08003355
 8002ebc:	08003355 	.word	0x08003355
 8002ec0:	08003355 	.word	0x08003355
 8002ec4:	08003355 	.word	0x08003355
 8002ec8:	08003355 	.word	0x08003355
 8002ecc:	08003355 	.word	0x08003355
 8002ed0:	08003355 	.word	0x08003355
 8002ed4:	08003355 	.word	0x08003355
 8002ed8:	08003355 	.word	0x08003355
 8002edc:	08003355 	.word	0x08003355
 8002ee0:	08003355 	.word	0x08003355
 8002ee4:	08003355 	.word	0x08003355
 8002ee8:	08003355 	.word	0x08003355
 8002eec:	08003355 	.word	0x08003355
 8002ef0:	08003355 	.word	0x08003355
 8002ef4:	08003355 	.word	0x08003355
 8002ef8:	08003355 	.word	0x08003355
 8002efc:	0800301b 	.word	0x0800301b
 8002f00:	08003355 	.word	0x08003355
 8002f04:	08003355 	.word	0x08003355
 8002f08:	08003355 	.word	0x08003355
 8002f0c:	08003355 	.word	0x08003355
 8002f10:	08002fed 	.word	0x08002fed
 8002f14:	08002f59 	.word	0x08002f59
 8002f18:	08003355 	.word	0x08003355
 8002f1c:	08003355 	.word	0x08003355
 8002f20:	08003355 	.word	0x08003355
 8002f24:	08003355 	.word	0x08003355
 8002f28:	0800314d 	.word	0x0800314d
 8002f2c:	08003355 	.word	0x08003355
 8002f30:	08003355 	.word	0x08003355
 8002f34:	08003355 	.word	0x08003355
 8002f38:	0800306d 	.word	0x0800306d
 8002f3c:	08003197 	.word	0x08003197
 8002f40:	08003355 	.word	0x08003355
 8002f44:	080030b7 	.word	0x080030b7
 8002f48:	08003355 	.word	0x08003355
 8002f4c:	080031db 	.word	0x080031db
 8002f50:	08003355 	.word	0x08003355
 8002f54:	08002fa3 	.word	0x08002fa3
		
		case '\0':
			break;

		case 'G' :
			if (strncmp(":on",strchr(response, ':'),3) == 0 ){
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	213a      	movs	r1, #58	; 0x3a
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f008 f9f3 	bl	800b348 <strchr>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2203      	movs	r2, #3
 8002f66:	4619      	mov	r1, r3
 8002f68:	4868      	ldr	r0, [pc, #416]	; (800310c <matlab+0x37c>)
 8002f6a:	f008 fa0e 	bl	800b38a <strncmp>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d103      	bne.n	8002f7c <matlab+0x1ec>
				gen = true;
 8002f74:	4b66      	ldr	r3, [pc, #408]	; (8003110 <matlab+0x380>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
			}
			else if (strncmp(":off", strchr(response,':'),4) == 0){
				gen = false;
			}
			break;
 8002f7a:	e1ed      	b.n	8003358 <matlab+0x5c8>
			else if (strncmp(":off", strchr(response,':'),4) == 0){
 8002f7c:	1d3b      	adds	r3, r7, #4
 8002f7e:	213a      	movs	r1, #58	; 0x3a
 8002f80:	4618      	mov	r0, r3
 8002f82:	f008 f9e1 	bl	800b348 <strchr>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2204      	movs	r2, #4
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4861      	ldr	r0, [pc, #388]	; (8003114 <matlab+0x384>)
 8002f8e:	f008 f9fc 	bl	800b38a <strncmp>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f040 81df 	bne.w	8003358 <matlab+0x5c8>
				gen = false;
 8002f9a:	4b5d      	ldr	r3, [pc, #372]	; (8003110 <matlab+0x380>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	701a      	strb	r2, [r3, #0]
			break;
 8002fa0:	e1da      	b.n	8003358 <matlab+0x5c8>

		case 'W':
			if (strncmp(":Sin",strchr(response, ':'),4) == 0 ){
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	213a      	movs	r1, #58	; 0x3a
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f008 f9ce 	bl	800b348 <strchr>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2204      	movs	r2, #4
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4859      	ldr	r0, [pc, #356]	; (8003118 <matlab+0x388>)
 8002fb4:	f008 f9e9 	bl	800b38a <strncmp>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <matlab+0x236>
				sinewave = true;
 8002fbe:	4b57      	ldr	r3, [pc, #348]	; (800311c <matlab+0x38c>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	701a      	strb	r2, [r3, #0]
			}
			else if (strncmp(":Pra", strchr(response,':'),4) == 0){
				sinewave = false;
			}
			break;
 8002fc4:	e1ca      	b.n	800335c <matlab+0x5cc>
			else if (strncmp(":Pra", strchr(response,':'),4) == 0){
 8002fc6:	1d3b      	adds	r3, r7, #4
 8002fc8:	213a      	movs	r1, #58	; 0x3a
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f008 f9bc 	bl	800b348 <strchr>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4852      	ldr	r0, [pc, #328]	; (8003120 <matlab+0x390>)
 8002fd8:	f008 f9d7 	bl	800b38a <strncmp>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f040 81bc 	bne.w	800335c <matlab+0x5cc>
				sinewave = false;
 8002fe4:	4b4d      	ldr	r3, [pc, #308]	; (800311c <matlab+0x38c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
			break;
 8002fea:	e1b7      	b.n	800335c <matlab+0x5cc>

		case 'F':
			frequency = strtol(strchr(response,'0'),&ptr,10);
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	2130      	movs	r1, #48	; 0x30
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f008 f9a9 	bl	800b348 <strchr>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	220a      	movs	r2, #10
 8002ffa:	494a      	ldr	r1, [pc, #296]	; (8003124 <matlab+0x394>)
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f009 f885 	bl	800c10c <strtol>
 8003002:	4602      	mov	r2, r0
 8003004:	4b48      	ldr	r3, [pc, #288]	; (8003128 <matlab+0x398>)
 8003006:	601a      	str	r2, [r3, #0]
			if (frequency <= 0) frequency = FREQ_MIN;
 8003008:	4b47      	ldr	r3, [pc, #284]	; (8003128 <matlab+0x398>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	f300 81a7 	bgt.w	8003360 <matlab+0x5d0>
 8003012:	4b45      	ldr	r3, [pc, #276]	; (8003128 <matlab+0x398>)
 8003014:	2264      	movs	r2, #100	; 0x64
 8003016:	601a      	str	r2, [r3, #0]
			break;
 8003018:	e1a2      	b.n	8003360 <matlab+0x5d0>

		case 'A':
			amplitude_temp = strtol(strchr(response,'0'),&ptr,10);
 800301a:	1d3b      	adds	r3, r7, #4
 800301c:	2130      	movs	r1, #48	; 0x30
 800301e:	4618      	mov	r0, r3
 8003020:	f008 f992 	bl	800b348 <strchr>
 8003024:	4603      	mov	r3, r0
 8003026:	220a      	movs	r2, #10
 8003028:	493e      	ldr	r1, [pc, #248]	; (8003124 <matlab+0x394>)
 800302a:	4618      	mov	r0, r3
 800302c:	f009 f86e 	bl	800c10c <strtol>
 8003030:	4602      	mov	r2, r0
 8003032:	4b33      	ldr	r3, [pc, #204]	; (8003100 <matlab+0x370>)
 8003034:	601a      	str	r2, [r3, #0]
			amplitude = amplitude_temp * AMP_COEF;
 8003036:	4b32      	ldr	r3, [pc, #200]	; (8003100 <matlab+0x370>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003042:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800312c <matlab+0x39c>
 8003046:	ee67 7a87 	vmul.f32	s15, s15, s14
 800304a:	4b39      	ldr	r3, [pc, #228]	; (8003130 <matlab+0x3a0>)
 800304c:	edc3 7a00 	vstr	s15, [r3]
			if (amplitude < 0) amplitude = AMP_MIN;
 8003050:	4b37      	ldr	r3, [pc, #220]	; (8003130 <matlab+0x3a0>)
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800305a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305e:	d400      	bmi.n	8003062 <matlab+0x2d2>
			break;
 8003060:	e187      	b.n	8003372 <matlab+0x5e2>
			if (amplitude < 0) amplitude = AMP_MIN;
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <matlab+0x3a0>)
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
			break;
 800306a:	e182      	b.n	8003372 <matlab+0x5e2>

		case 'P':
			if (strncmp(":low",strchr(response, ':'),4) == 0 ){
 800306c:	1d3b      	adds	r3, r7, #4
 800306e:	213a      	movs	r1, #58	; 0x3a
 8003070:	4618      	mov	r0, r3
 8003072:	f008 f969 	bl	800b348 <strchr>
 8003076:	4603      	mov	r3, r0
 8003078:	2204      	movs	r2, #4
 800307a:	4619      	mov	r1, r3
 800307c:	482d      	ldr	r0, [pc, #180]	; (8003134 <matlab+0x3a4>)
 800307e:	f008 f984 	bl	800b38a <strncmp>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d103      	bne.n	8003090 <matlab+0x300>
				lowpass = true;
 8003088:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <matlab+0x3a8>)
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
			}
			else if (strncmp(":high", strchr(response,':'),5) == 0){
				lowpass = false;
			}
			break;
 800308e:	e169      	b.n	8003364 <matlab+0x5d4>
			else if (strncmp(":high", strchr(response,':'),5) == 0){
 8003090:	1d3b      	adds	r3, r7, #4
 8003092:	213a      	movs	r1, #58	; 0x3a
 8003094:	4618      	mov	r0, r3
 8003096:	f008 f957 	bl	800b348 <strchr>
 800309a:	4603      	mov	r3, r0
 800309c:	2205      	movs	r2, #5
 800309e:	4619      	mov	r1, r3
 80030a0:	4826      	ldr	r0, [pc, #152]	; (800313c <matlab+0x3ac>)
 80030a2:	f008 f972 	bl	800b38a <strncmp>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 815b 	bne.w	8003364 <matlab+0x5d4>
				lowpass = false;
 80030ae:	4b22      	ldr	r3, [pc, #136]	; (8003138 <matlab+0x3a8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
			break;
 80030b4:	e156      	b.n	8003364 <matlab+0x5d4>

		case 'S':
			if (strncmp(":Sig",strchr(response, ':'),4) == 0 ){
 80030b6:	1d3b      	adds	r3, r7, #4
 80030b8:	213a      	movs	r1, #58	; 0x3a
 80030ba:	4618      	mov	r0, r3
 80030bc:	f008 f944 	bl	800b348 <strchr>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2204      	movs	r2, #4
 80030c4:	4619      	mov	r1, r3
 80030c6:	481e      	ldr	r0, [pc, #120]	; (8003140 <matlab+0x3b0>)
 80030c8:	f008 f95f 	bl	800b38a <strncmp>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <matlab+0x34a>
				signal_q = true;
 80030d2:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <matlab+0x3b4>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]
			}
			else if (strncmp(":Spec", strchr(response,':'),5) == 0){
				signal_q = false;
			}
			break;
 80030d8:	e146      	b.n	8003368 <matlab+0x5d8>
			else if (strncmp(":Spec", strchr(response,':'),5) == 0){
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	213a      	movs	r1, #58	; 0x3a
 80030de:	4618      	mov	r0, r3
 80030e0:	f008 f932 	bl	800b348 <strchr>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2205      	movs	r2, #5
 80030e8:	4619      	mov	r1, r3
 80030ea:	4817      	ldr	r0, [pc, #92]	; (8003148 <matlab+0x3b8>)
 80030ec:	f008 f94d 	bl	800b38a <strncmp>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f040 8138 	bne.w	8003368 <matlab+0x5d8>
				signal_q = false;
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <matlab+0x3b4>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
			break;
 80030fe:	e133      	b.n	8003368 <matlab+0x5d8>
 8003100:	2000122c 	.word	0x2000122c
 8003104:	20001f24 	.word	0x20001f24
 8003108:	20001224 	.word	0x20001224
 800310c:	0800f078 	.word	0x0800f078
 8003110:	20001226 	.word	0x20001226
 8003114:	0800f07c 	.word	0x0800f07c
 8003118:	0800f084 	.word	0x0800f084
 800311c:	20001227 	.word	0x20001227
 8003120:	0800f08c 	.word	0x0800f08c
 8003124:	20001f20 	.word	0x20001f20
 8003128:	20001234 	.word	0x20001234
 800312c:	3a000801 	.word	0x3a000801
 8003130:	20001230 	.word	0x20001230
 8003134:	0800f094 	.word	0x0800f094
 8003138:	20001229 	.word	0x20001229
 800313c:	0800f09c 	.word	0x0800f09c
 8003140:	0800f0a4 	.word	0x0800f0a4
 8003144:	20001228 	.word	0x20001228
 8003148:	0800f0ac 	.word	0x0800f0ac

		case 'L':
			if (strncmp(":Yes",strchr(response, ':'),4) == 0 ){
 800314c:	1d3b      	adds	r3, r7, #4
 800314e:	213a      	movs	r1, #58	; 0x3a
 8003150:	4618      	mov	r0, r3
 8003152:	f008 f8f9 	bl	800b348 <strchr>
 8003156:	4603      	mov	r3, r0
 8003158:	2204      	movs	r2, #4
 800315a:	4619      	mov	r1, r3
 800315c:	4898      	ldr	r0, [pc, #608]	; (80033c0 <matlab+0x630>)
 800315e:	f008 f914 	bl	800b38a <strncmp>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d103      	bne.n	8003170 <matlab+0x3e0>
				filtered = true;
 8003168:	4b96      	ldr	r3, [pc, #600]	; (80033c4 <matlab+0x634>)
 800316a:	2201      	movs	r2, #1
 800316c:	701a      	strb	r2, [r3, #0]
			}
			else if (strncmp(":No", strchr(response,':'),3) == 0){
				filtered = false;
			}
			break;
 800316e:	e0fd      	b.n	800336c <matlab+0x5dc>
			else if (strncmp(":No", strchr(response,':'),3) == 0){
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	213a      	movs	r1, #58	; 0x3a
 8003174:	4618      	mov	r0, r3
 8003176:	f008 f8e7 	bl	800b348 <strchr>
 800317a:	4603      	mov	r3, r0
 800317c:	2203      	movs	r2, #3
 800317e:	4619      	mov	r1, r3
 8003180:	4891      	ldr	r0, [pc, #580]	; (80033c8 <matlab+0x638>)
 8003182:	f008 f902 	bl	800b38a <strncmp>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	f040 80ef 	bne.w	800336c <matlab+0x5dc>
				filtered = false;
 800318e:	4b8d      	ldr	r3, [pc, #564]	; (80033c4 <matlab+0x634>)
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
			break;
 8003194:	e0ea      	b.n	800336c <matlab+0x5dc>

		case 'Q':
			gen = GEN_S;
 8003196:	4b8d      	ldr	r3, [pc, #564]	; (80033cc <matlab+0x63c>)
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
			sinewave = SINE_S;
 800319c:	4b8c      	ldr	r3, [pc, #560]	; (80033d0 <matlab+0x640>)
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
			signal_q = SIG_S;
 80031a2:	4b8c      	ldr	r3, [pc, #560]	; (80033d4 <matlab+0x644>)
 80031a4:	2201      	movs	r2, #1
 80031a6:	701a      	strb	r2, [r3, #0]
			filtered= FIL_S;
 80031a8:	4b86      	ldr	r3, [pc, #536]	; (80033c4 <matlab+0x634>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
			lowpass = LOWPASS_S;
 80031ae:	4b8a      	ldr	r3, [pc, #552]	; (80033d8 <matlab+0x648>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
			amplitude_temp = AMP_TEMP;
 80031b4:	4b89      	ldr	r3, [pc, #548]	; (80033dc <matlab+0x64c>)
 80031b6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80031ba:	601a      	str	r2, [r3, #0]
			amplitude = AMP_S;
 80031bc:	4b88      	ldr	r3, [pc, #544]	; (80033e0 <matlab+0x650>)
 80031be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80031c2:	601a      	str	r2, [r3, #0]
			frequency = FREQ_S;
 80031c4:	4b87      	ldr	r3, [pc, #540]	; (80033e4 <matlab+0x654>)
 80031c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80031ca:	601a      	str	r2, [r3, #0]
			cutOffFreq = FGFREQ_S;
 80031cc:	4a86      	ldr	r2, [pc, #536]	; (80033e8 <matlab+0x658>)
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	4c86      	ldr	r4, [pc, #536]	; (80033ec <matlab+0x65c>)
 80031d4:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 80031d8:	e0cb      	b.n	8003372 <matlab+0x5e2>

		case 'U':
			if (strncmp(":0.1",strchr(response, ':'),4) == 0 ){
 80031da:	1d3b      	adds	r3, r7, #4
 80031dc:	213a      	movs	r1, #58	; 0x3a
 80031de:	4618      	mov	r0, r3
 80031e0:	f008 f8b2 	bl	800b348 <strchr>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2204      	movs	r2, #4
 80031e8:	4619      	mov	r1, r3
 80031ea:	4881      	ldr	r0, [pc, #516]	; (80033f0 <matlab+0x660>)
 80031ec:	f008 f8cd 	bl	800b38a <strncmp>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <matlab+0x474>
				cutOffFreq = 0.1;
 80031f6:	4a7c      	ldr	r2, [pc, #496]	; (80033e8 <matlab+0x658>)
 80031f8:	a461      	add	r4, pc, #388	; (adr r4, 8003380 <matlab+0x5f0>)
 80031fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031fe:	e9c2 3400 	strd	r3, r4, [r2]
				cutOffFreq = 0.8;
			}
			else if (strncmp(":0.9", strchr(response,':'),4) == 0){
				cutOffFreq = 0.9;
			}
			break;
 8003202:	e0b5      	b.n	8003370 <matlab+0x5e0>
			else if (strncmp(":0.2", strchr(response,':'),4) == 0){
 8003204:	1d3b      	adds	r3, r7, #4
 8003206:	213a      	movs	r1, #58	; 0x3a
 8003208:	4618      	mov	r0, r3
 800320a:	f008 f89d 	bl	800b348 <strchr>
 800320e:	4603      	mov	r3, r0
 8003210:	2204      	movs	r2, #4
 8003212:	4619      	mov	r1, r3
 8003214:	4877      	ldr	r0, [pc, #476]	; (80033f4 <matlab+0x664>)
 8003216:	f008 f8b8 	bl	800b38a <strncmp>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d106      	bne.n	800322e <matlab+0x49e>
				cutOffFreq = 0.2;
 8003220:	4a71      	ldr	r2, [pc, #452]	; (80033e8 <matlab+0x658>)
 8003222:	a459      	add	r4, pc, #356	; (adr r4, 8003388 <matlab+0x5f8>)
 8003224:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003228:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 800322c:	e0a0      	b.n	8003370 <matlab+0x5e0>
			else if (strncmp(":0.3", strchr(response,':'),4) == 0){
 800322e:	1d3b      	adds	r3, r7, #4
 8003230:	213a      	movs	r1, #58	; 0x3a
 8003232:	4618      	mov	r0, r3
 8003234:	f008 f888 	bl	800b348 <strchr>
 8003238:	4603      	mov	r3, r0
 800323a:	2204      	movs	r2, #4
 800323c:	4619      	mov	r1, r3
 800323e:	486e      	ldr	r0, [pc, #440]	; (80033f8 <matlab+0x668>)
 8003240:	f008 f8a3 	bl	800b38a <strncmp>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <matlab+0x4c8>
				cutOffFreq = 0.3;
 800324a:	4a67      	ldr	r2, [pc, #412]	; (80033e8 <matlab+0x658>)
 800324c:	a450      	add	r4, pc, #320	; (adr r4, 8003390 <matlab+0x600>)
 800324e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003252:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8003256:	e08b      	b.n	8003370 <matlab+0x5e0>
			else if (strncmp(":0.4", strchr(response,':'),4) == 0){
 8003258:	1d3b      	adds	r3, r7, #4
 800325a:	213a      	movs	r1, #58	; 0x3a
 800325c:	4618      	mov	r0, r3
 800325e:	f008 f873 	bl	800b348 <strchr>
 8003262:	4603      	mov	r3, r0
 8003264:	2204      	movs	r2, #4
 8003266:	4619      	mov	r1, r3
 8003268:	4864      	ldr	r0, [pc, #400]	; (80033fc <matlab+0x66c>)
 800326a:	f008 f88e 	bl	800b38a <strncmp>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d106      	bne.n	8003282 <matlab+0x4f2>
				cutOffFreq = 0.4;
 8003274:	4a5c      	ldr	r2, [pc, #368]	; (80033e8 <matlab+0x658>)
 8003276:	a448      	add	r4, pc, #288	; (adr r4, 8003398 <matlab+0x608>)
 8003278:	e9d4 3400 	ldrd	r3, r4, [r4]
 800327c:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8003280:	e076      	b.n	8003370 <matlab+0x5e0>
			else if (strncmp(":0.5", strchr(response,':'),4) == 0){
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	213a      	movs	r1, #58	; 0x3a
 8003286:	4618      	mov	r0, r3
 8003288:	f008 f85e 	bl	800b348 <strchr>
 800328c:	4603      	mov	r3, r0
 800328e:	2204      	movs	r2, #4
 8003290:	4619      	mov	r1, r3
 8003292:	485b      	ldr	r0, [pc, #364]	; (8003400 <matlab+0x670>)
 8003294:	f008 f879 	bl	800b38a <strncmp>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <matlab+0x51c>
				cutOffFreq = 0.5;
 800329e:	4a52      	ldr	r2, [pc, #328]	; (80033e8 <matlab+0x658>)
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	4c51      	ldr	r4, [pc, #324]	; (80033ec <matlab+0x65c>)
 80032a6:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 80032aa:	e061      	b.n	8003370 <matlab+0x5e0>
			else if (strncmp(":0.6", strchr(response,':'),4) == 0){
 80032ac:	1d3b      	adds	r3, r7, #4
 80032ae:	213a      	movs	r1, #58	; 0x3a
 80032b0:	4618      	mov	r0, r3
 80032b2:	f008 f849 	bl	800b348 <strchr>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2204      	movs	r2, #4
 80032ba:	4619      	mov	r1, r3
 80032bc:	4851      	ldr	r0, [pc, #324]	; (8003404 <matlab+0x674>)
 80032be:	f008 f864 	bl	800b38a <strncmp>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d106      	bne.n	80032d6 <matlab+0x546>
				cutOffFreq = 0.6;
 80032c8:	4a47      	ldr	r2, [pc, #284]	; (80033e8 <matlab+0x658>)
 80032ca:	a435      	add	r4, pc, #212	; (adr r4, 80033a0 <matlab+0x610>)
 80032cc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80032d0:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 80032d4:	e04c      	b.n	8003370 <matlab+0x5e0>
			else if (strncmp(":0.7", strchr(response,':'),4) == 0){
 80032d6:	1d3b      	adds	r3, r7, #4
 80032d8:	213a      	movs	r1, #58	; 0x3a
 80032da:	4618      	mov	r0, r3
 80032dc:	f008 f834 	bl	800b348 <strchr>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2204      	movs	r2, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4848      	ldr	r0, [pc, #288]	; (8003408 <matlab+0x678>)
 80032e8:	f008 f84f 	bl	800b38a <strncmp>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d106      	bne.n	8003300 <matlab+0x570>
				cutOffFreq = 0.7;
 80032f2:	4a3d      	ldr	r2, [pc, #244]	; (80033e8 <matlab+0x658>)
 80032f4:	a42c      	add	r4, pc, #176	; (adr r4, 80033a8 <matlab+0x618>)
 80032f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80032fa:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 80032fe:	e037      	b.n	8003370 <matlab+0x5e0>
			else if (strncmp(":0.8", strchr(response,':'),4) == 0){
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	213a      	movs	r1, #58	; 0x3a
 8003304:	4618      	mov	r0, r3
 8003306:	f008 f81f 	bl	800b348 <strchr>
 800330a:	4603      	mov	r3, r0
 800330c:	2204      	movs	r2, #4
 800330e:	4619      	mov	r1, r3
 8003310:	483e      	ldr	r0, [pc, #248]	; (800340c <matlab+0x67c>)
 8003312:	f008 f83a 	bl	800b38a <strncmp>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <matlab+0x59a>
				cutOffFreq = 0.8;
 800331c:	4a32      	ldr	r2, [pc, #200]	; (80033e8 <matlab+0x658>)
 800331e:	a424      	add	r4, pc, #144	; (adr r4, 80033b0 <matlab+0x620>)
 8003320:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003324:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8003328:	e022      	b.n	8003370 <matlab+0x5e0>
			else if (strncmp(":0.9", strchr(response,':'),4) == 0){
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	213a      	movs	r1, #58	; 0x3a
 800332e:	4618      	mov	r0, r3
 8003330:	f008 f80a 	bl	800b348 <strchr>
 8003334:	4603      	mov	r3, r0
 8003336:	2204      	movs	r2, #4
 8003338:	4619      	mov	r1, r3
 800333a:	4835      	ldr	r0, [pc, #212]	; (8003410 <matlab+0x680>)
 800333c:	f008 f825 	bl	800b38a <strncmp>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d114      	bne.n	8003370 <matlab+0x5e0>
				cutOffFreq = 0.9;
 8003346:	4a28      	ldr	r2, [pc, #160]	; (80033e8 <matlab+0x658>)
 8003348:	a41b      	add	r4, pc, #108	; (adr r4, 80033b8 <matlab+0x628>)
 800334a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800334e:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8003352:	e00d      	b.n	8003370 <matlab+0x5e0>

		default:
			break;
 8003354:	bf00      	nop
 8003356:	e00c      	b.n	8003372 <matlab+0x5e2>
			break;
 8003358:	bf00      	nop
 800335a:	e00a      	b.n	8003372 <matlab+0x5e2>
			break;
 800335c:	bf00      	nop
 800335e:	e008      	b.n	8003372 <matlab+0x5e2>
			break;
 8003360:	bf00      	nop
 8003362:	e006      	b.n	8003372 <matlab+0x5e2>
			break;
 8003364:	bf00      	nop
 8003366:	e004      	b.n	8003372 <matlab+0x5e2>
			break;
 8003368:	bf00      	nop
 800336a:	e002      	b.n	8003372 <matlab+0x5e2>
			break;
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <matlab+0x5e2>
			break;
 8003370:	bf00      	nop
	}
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	bf00      	nop
 800337c:	f3af 8000 	nop.w
 8003380:	9999999a 	.word	0x9999999a
 8003384:	3fb99999 	.word	0x3fb99999
 8003388:	9999999a 	.word	0x9999999a
 800338c:	3fc99999 	.word	0x3fc99999
 8003390:	33333333 	.word	0x33333333
 8003394:	3fd33333 	.word	0x3fd33333
 8003398:	9999999a 	.word	0x9999999a
 800339c:	3fd99999 	.word	0x3fd99999
 80033a0:	33333333 	.word	0x33333333
 80033a4:	3fe33333 	.word	0x3fe33333
 80033a8:	66666666 	.word	0x66666666
 80033ac:	3fe66666 	.word	0x3fe66666
 80033b0:	9999999a 	.word	0x9999999a
 80033b4:	3fe99999 	.word	0x3fe99999
 80033b8:	cccccccd 	.word	0xcccccccd
 80033bc:	3feccccc 	.word	0x3feccccc
 80033c0:	0800f0b4 	.word	0x0800f0b4
 80033c4:	20001450 	.word	0x20001450
 80033c8:	0800f0bc 	.word	0x0800f0bc
 80033cc:	20001226 	.word	0x20001226
 80033d0:	20001227 	.word	0x20001227
 80033d4:	20001228 	.word	0x20001228
 80033d8:	20001229 	.word	0x20001229
 80033dc:	2000122c 	.word	0x2000122c
 80033e0:	20001230 	.word	0x20001230
 80033e4:	20001234 	.word	0x20001234
 80033e8:	20001238 	.word	0x20001238
 80033ec:	3fe00000 	.word	0x3fe00000
 80033f0:	0800f0c0 	.word	0x0800f0c0
 80033f4:	0800f0c8 	.word	0x0800f0c8
 80033f8:	0800f0d0 	.word	0x0800f0d0
 80033fc:	0800f0d8 	.word	0x0800f0d8
 8003400:	0800f0e0 	.word	0x0800f0e0
 8003404:	0800f0e8 	.word	0x0800f0e8
 8003408:	0800f0f0 	.word	0x0800f0f0
 800340c:	0800f0f8 	.word	0x0800f0f8
 8003410:	0800f100 	.word	0x0800f100

08003414 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <MX_SPI1_Init+0x64>)
 800341a:	4a18      	ldr	r2, [pc, #96]	; (800347c <MX_SPI1_Init+0x68>)
 800341c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <MX_SPI1_Init+0x64>)
 8003420:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003424:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <MX_SPI1_Init+0x64>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <MX_SPI1_Init+0x64>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003432:	4b11      	ldr	r3, [pc, #68]	; (8003478 <MX_SPI1_Init+0x64>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <MX_SPI1_Init+0x64>)
 800343a:	2200      	movs	r2, #0
 800343c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <MX_SPI1_Init+0x64>)
 8003440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003444:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003446:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <MX_SPI1_Init+0x64>)
 8003448:	2200      	movs	r2, #0
 800344a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <MX_SPI1_Init+0x64>)
 800344e:	2200      	movs	r2, #0
 8003450:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <MX_SPI1_Init+0x64>)
 8003454:	2200      	movs	r2, #0
 8003456:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <MX_SPI1_Init+0x64>)
 800345a:	2200      	movs	r2, #0
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <MX_SPI1_Init+0x64>)
 8003460:	220a      	movs	r2, #10
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003464:	4804      	ldr	r0, [pc, #16]	; (8003478 <MX_SPI1_Init+0x64>)
 8003466:	f003 fdf2 	bl	800704e <HAL_SPI_Init>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003470:	f7ff fc88 	bl	8002d84 <Error_Handler>
  }

}
 8003474:	bf00      	nop
 8003476:	bd80      	pop	{r7, pc}
 8003478:	20001f28 	.word	0x20001f28
 800347c:	40013000 	.word	0x40013000

08003480 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	609a      	str	r2, [r3, #8]
 8003494:	60da      	str	r2, [r3, #12]
 8003496:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a28      	ldr	r2, [pc, #160]	; (8003540 <HAL_SPI_MspInit+0xc0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d149      	bne.n	8003536 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
 80034a6:	4b27      	ldr	r3, [pc, #156]	; (8003544 <HAL_SPI_MspInit+0xc4>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	4a26      	ldr	r2, [pc, #152]	; (8003544 <HAL_SPI_MspInit+0xc4>)
 80034ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034b0:	6453      	str	r3, [r2, #68]	; 0x44
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_SPI_MspInit+0xc4>)
 80034b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ba:	613b      	str	r3, [r7, #16]
 80034bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b20      	ldr	r3, [pc, #128]	; (8003544 <HAL_SPI_MspInit+0xc4>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_SPI_MspInit+0xc4>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6313      	str	r3, [r2, #48]	; 0x30
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <HAL_SPI_MspInit+0xc4>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034da:	2300      	movs	r3, #0
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_SPI_MspInit+0xc4>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a18      	ldr	r2, [pc, #96]	; (8003544 <HAL_SPI_MspInit+0xc4>)
 80034e4:	f043 0302 	orr.w	r3, r3, #2
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <HAL_SPI_MspInit+0xc4>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80034f6:	2380      	movs	r3, #128	; 0x80
 80034f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003506:	2305      	movs	r3, #5
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350a:	f107 0314 	add.w	r3, r7, #20
 800350e:	4619      	mov	r1, r3
 8003510:	480d      	ldr	r0, [pc, #52]	; (8003548 <HAL_SPI_MspInit+0xc8>)
 8003512:	f002 f913 	bl	800573c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003516:	2318      	movs	r3, #24
 8003518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003522:	2303      	movs	r3, #3
 8003524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003526:	2305      	movs	r3, #5
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	4619      	mov	r1, r3
 8003530:	4806      	ldr	r0, [pc, #24]	; (800354c <HAL_SPI_MspInit+0xcc>)
 8003532:	f002 f903 	bl	800573c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003536:	bf00      	nop
 8003538:	3728      	adds	r7, #40	; 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40013000 	.word	0x40013000
 8003544:	40023800 	.word	0x40023800
 8003548:	40020000 	.word	0x40020000
 800354c:	40020400 	.word	0x40020400

08003550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <HAL_MspInit+0x4c>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <HAL_MspInit+0x4c>)
 8003560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003564:	6453      	str	r3, [r2, #68]	; 0x44
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_MspInit+0x4c>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_MspInit+0x4c>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a08      	ldr	r2, [pc, #32]	; (800359c <HAL_MspInit+0x4c>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_MspInit+0x4c>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800

080035a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035a4:	e7fe      	b.n	80035a4 <NMI_Handler+0x4>

080035a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a6:	b480      	push	{r7}
 80035a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035aa:	e7fe      	b.n	80035aa <HardFault_Handler+0x4>

080035ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035b0:	e7fe      	b.n	80035b0 <MemManage_Handler+0x4>

080035b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035b6:	e7fe      	b.n	80035b6 <BusFault_Handler+0x4>

080035b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035bc:	e7fe      	b.n	80035bc <UsageFault_Handler+0x4>

080035be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035be:	b480      	push	{r7}
 80035c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035c2:	bf00      	nop
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035ec:	f005 f880 	bl	80086f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035f0:	bf00      	nop
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80035f8:	4802      	ldr	r0, [pc, #8]	; (8003604 <DMA1_Stream6_IRQHandler+0x10>)
 80035fa:	f001 fbab 	bl	8004d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80035fe:	bf00      	nop
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20001d9c 	.word	0x20001d9c

08003608 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800360c:	4803      	ldr	r0, [pc, #12]	; (800361c <USART1_IRQHandler+0x14>)
 800360e:	f004 f921 	bl	8007854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 8003612:	4802      	ldr	r0, [pc, #8]	; (800361c <USART1_IRQHandler+0x14>)
 8003614:	f000 f948 	bl	80038a8 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8003618:	bf00      	nop
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20001fd0 	.word	0x20001fd0

08003620 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8003624:	4803      	ldr	r0, [pc, #12]	; (8003634 <TIM6_DAC_IRQHandler+0x14>)
 8003626:	f001 f8aa 	bl	800477e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800362a:	4803      	ldr	r0, [pc, #12]	; (8003638 <TIM6_DAC_IRQHandler+0x18>)
 800362c:	f003 fdc2 	bl	80071b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20001d88 	.word	0x20001d88
 8003638:	20001f80 	.word	0x20001f80

0800363c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <DMA2_Stream0_IRQHandler+0x10>)
 8003642:	f001 fb87 	bl	8004d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	200017c0 	.word	0x200017c0

08003650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003658:	4a14      	ldr	r2, [pc, #80]	; (80036ac <_sbrk+0x5c>)
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <_sbrk+0x60>)
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003664:	4b13      	ldr	r3, [pc, #76]	; (80036b4 <_sbrk+0x64>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800366c:	4b11      	ldr	r3, [pc, #68]	; (80036b4 <_sbrk+0x64>)
 800366e:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <_sbrk+0x68>)
 8003670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <_sbrk+0x64>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4413      	add	r3, r2
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	429a      	cmp	r2, r3
 800367e:	d207      	bcs.n	8003690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003680:	f006 fee8 	bl	800a454 <__errno>
 8003684:	4602      	mov	r2, r0
 8003686:	230c      	movs	r3, #12
 8003688:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800368a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800368e:	e009      	b.n	80036a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <_sbrk+0x64>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <_sbrk+0x64>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4413      	add	r3, r2
 800369e:	4a05      	ldr	r2, [pc, #20]	; (80036b4 <_sbrk+0x64>)
 80036a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20030000 	.word	0x20030000
 80036b0:	00000400 	.word	0x00000400
 80036b4:	20001454 	.word	0x20001454
 80036b8:	20002048 	.word	0x20002048

080036bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036c0:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <SystemInit+0x28>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	4a07      	ldr	r2, [pc, #28]	; (80036e4 <SystemInit+0x28>)
 80036c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <SystemInit+0x28>)
 80036d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036d6:	609a      	str	r2, [r3, #8]
#endif
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ee:	463b      	mov	r3, r7
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80036f6:	4b14      	ldr	r3, [pc, #80]	; (8003748 <MX_TIM6_Init+0x60>)
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <MX_TIM6_Init+0x64>)
 80036fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <MX_TIM6_Init+0x60>)
 80036fe:	2259      	movs	r2, #89	; 0x59
 8003700:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <MX_TIM6_Init+0x60>)
 8003704:	2200      	movs	r2, #0
 8003706:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8003708:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <MX_TIM6_Init+0x60>)
 800370a:	2263      	movs	r2, #99	; 0x63
 800370c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <MX_TIM6_Init+0x60>)
 8003710:	2200      	movs	r2, #0
 8003712:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003714:	480c      	ldr	r0, [pc, #48]	; (8003748 <MX_TIM6_Init+0x60>)
 8003716:	f003 fcfe 	bl	8007116 <HAL_TIM_Base_Init>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8003720:	f7ff fb30 	bl	8002d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003724:	2320      	movs	r3, #32
 8003726:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003728:	2300      	movs	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800372c:	463b      	mov	r3, r7
 800372e:	4619      	mov	r1, r3
 8003730:	4805      	ldr	r0, [pc, #20]	; (8003748 <MX_TIM6_Init+0x60>)
 8003732:	f003 ff19 	bl	8007568 <HAL_TIMEx_MasterConfigSynchronization>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 800373c:	f7ff fb22 	bl	8002d84 <Error_Handler>
  }

}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	20001f80 	.word	0x20001f80
 800374c:	40001000 	.word	0x40001000

08003750 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <HAL_TIM_Base_MspInit+0x48>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d115      	bne.n	800378e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HAL_TIM_Base_MspInit+0x4c>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a0c      	ldr	r2, [pc, #48]	; (800379c <HAL_TIM_Base_MspInit+0x4c>)
 800376c:	f043 0310 	orr.w	r3, r3, #16
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_TIM_Base_MspInit+0x4c>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	2036      	movs	r0, #54	; 0x36
 8003784:	f000 fea5 	bl	80044d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003788:	2036      	movs	r0, #54	; 0x36
 800378a:	f000 febe 	bl	800450a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40001000 	.word	0x40001000
 800379c:	40023800 	.word	0x40023800

080037a0 <start_timer>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void start_timer() {
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <start_timer+0x10>)
 80037a6:	f003 fce1 	bl	800716c <HAL_TIM_Base_Start_IT>
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20001f80 	.word	0x20001f80

080037b4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80037b8:	4b11      	ldr	r3, [pc, #68]	; (8003800 <MX_USART1_UART_Init+0x4c>)
 80037ba:	4a12      	ldr	r2, [pc, #72]	; (8003804 <MX_USART1_UART_Init+0x50>)
 80037bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <MX_USART1_UART_Init+0x4c>)
 80037c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <MX_USART1_UART_Init+0x4c>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <MX_USART1_UART_Init+0x4c>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <MX_USART1_UART_Init+0x4c>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <MX_USART1_UART_Init+0x4c>)
 80037da:	220c      	movs	r2, #12
 80037dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037de:	4b08      	ldr	r3, [pc, #32]	; (8003800 <MX_USART1_UART_Init+0x4c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <MX_USART1_UART_Init+0x4c>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037ea:	4805      	ldr	r0, [pc, #20]	; (8003800 <MX_USART1_UART_Init+0x4c>)
 80037ec:	f003 ff4c 	bl	8007688 <HAL_UART_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80037f6:	f7ff fac5 	bl	8002d84 <Error_Handler>
  }

}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	20001fd0 	.word	0x20001fd0
 8003804:	40011000 	.word	0x40011000

08003808 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a1d      	ldr	r2, [pc, #116]	; (800389c <HAL_UART_MspInit+0x94>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d134      	bne.n	8003894 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <HAL_UART_MspInit+0x98>)
 8003830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003832:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <HAL_UART_MspInit+0x98>)
 8003834:	f043 0310 	orr.w	r3, r3, #16
 8003838:	6453      	str	r3, [r2, #68]	; 0x44
 800383a:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_UART_MspInit+0x98>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383e:	f003 0310 	and.w	r3, r3, #16
 8003842:	613b      	str	r3, [r7, #16]
 8003844:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	4b15      	ldr	r3, [pc, #84]	; (80038a0 <HAL_UART_MspInit+0x98>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	4a14      	ldr	r2, [pc, #80]	; (80038a0 <HAL_UART_MspInit+0x98>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6313      	str	r3, [r2, #48]	; 0x30
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_UART_MspInit+0x98>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003868:	2302      	movs	r3, #2
 800386a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800386c:	2300      	movs	r3, #0
 800386e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003870:	2303      	movs	r3, #3
 8003872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003874:	2307      	movs	r3, #7
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	4619      	mov	r1, r3
 800387e:	4809      	ldr	r0, [pc, #36]	; (80038a4 <HAL_UART_MspInit+0x9c>)
 8003880:	f001 ff5c 	bl	800573c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	2025      	movs	r0, #37	; 0x25
 800388a:	f000 fe22 	bl	80044d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800388e:	2025      	movs	r0, #37	; 0x25
 8003890:	f000 fe3b 	bl	800450a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003894:	bf00      	nop
 8003896:	3728      	adds	r7, #40	; 0x28
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40011000 	.word	0x40011000
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40020000 	.word	0x40020000

080038a8 <USER_UART_IRQHandler>:

/* USER CODE BEGIN 1 */
char RX_BUFFER[BUFSIZE];
int RX_BUFFER_HEAD, RX_BUFFER_TAIL;

void  USER_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	if( huart ->Instance  ==  USART1 ) {
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a17      	ldr	r2, [pc, #92]	; (8003914 <USER_UART_IRQHandler+0x6c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d125      	bne.n	8003906 <USER_UART_IRQHandler+0x5e>
		rx_data = __HAL_UART_FLUSH_DRREGISTER( huart );
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <USER_UART_IRQHandler+0x70>)
 80038c4:	701a      	strb	r2, [r3, #0]

		static  char  rx_head;
		rx_head = RX_BUFFER_HEAD + 1;
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <USER_UART_IRQHandler+0x74>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	3301      	adds	r3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	4b13      	ldr	r3, [pc, #76]	; (8003920 <USER_UART_IRQHandler+0x78>)
 80038d2:	701a      	strb	r2, [r3, #0]
		if( rx_head  ==  BUFSIZE ) {
 80038d4:	4b12      	ldr	r3, [pc, #72]	; (8003920 <USER_UART_IRQHandler+0x78>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d102      	bne.n	80038e2 <USER_UART_IRQHandler+0x3a>
			rx_head = 0;
 80038dc:	4b10      	ldr	r3, [pc, #64]	; (8003920 <USER_UART_IRQHandler+0x78>)
 80038de:	2200      	movs	r2, #0
 80038e0:	701a      	strb	r2, [r3, #0]
		}
		if( rx_head  !=  RX_BUFFER_TAIL ) {
 80038e2:	4b0f      	ldr	r3, [pc, #60]	; (8003920 <USER_UART_IRQHandler+0x78>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b0e      	ldr	r3, [pc, #56]	; (8003924 <USER_UART_IRQHandler+0x7c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d00a      	beq.n	8003906 <USER_UART_IRQHandler+0x5e>
			RX_BUFFER[RX_BUFFER_HEAD] = rx_data;
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <USER_UART_IRQHandler+0x74>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a08      	ldr	r2, [pc, #32]	; (8003918 <USER_UART_IRQHandler+0x70>)
 80038f6:	7811      	ldrb	r1, [r2, #0]
 80038f8:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <USER_UART_IRQHandler+0x80>)
 80038fa:	54d1      	strb	r1, [r2, r3]
			RX_BUFFER_HEAD = rx_head;
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <USER_UART_IRQHandler+0x78>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	4b06      	ldr	r3, [pc, #24]	; (800391c <USER_UART_IRQHandler+0x74>)
 8003904:	601a      	str	r2, [r3, #0]
		}
	}
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40011000 	.word	0x40011000
 8003918:	20001ae8 	.word	0x20001ae8
 800391c:	20002010 	.word	0x20002010
 8003920:	20001458 	.word	0x20001458
 8003924:	20002014 	.word	0x20002014
 8003928:	20001fc0 	.word	0x20001fc0

0800392c <USART1_SendChar>:

void  USART1_SendChar(uint8_t c) {
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit (&huart1 , &c, sizeof(c), 10);
 8003936:	1df9      	adds	r1, r7, #7
 8003938:	230a      	movs	r3, #10
 800393a:	2201      	movs	r2, #1
 800393c:	4803      	ldr	r0, [pc, #12]	; (800394c <USART1_SendChar+0x20>)
 800393e:	f003 fef0 	bl	8007722 <HAL_UART_Transmit>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20001fd0 	.word	0x20001fd0

08003950 <USART1_SendInt>:
	USART1_SendChar(array_cast[1]);
	USART1_SendChar(array_cast[2]);
	USART1_SendChar(array_cast[3]);
}

void USART1_SendInt(int v) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	array_cast = (uint8_t *) (&v);
 8003958:	4a09      	ldr	r2, [pc, #36]	; (8003980 <USART1_SendInt+0x30>)
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	6013      	str	r3, [r2, #0]
	USART1_SendChar(array_cast[0]);
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <USART1_SendInt+0x30>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ffe1 	bl	800392c <USART1_SendChar>
	USART1_SendChar(array_cast[1]);
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <USART1_SendInt+0x30>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3301      	adds	r3, #1
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ffda 	bl	800392c <USART1_SendChar>
}
 8003978:	bf00      	nop
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	20001bec 	.word	0x20001bec

08003984 <USART1_Dequeue>:

int  USART1_Dequeue(char* c) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	int  ret;
	ret = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]
	*c = 0;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003996:	2025      	movs	r0, #37	; 0x25
 8003998:	f000 fdc5 	bl	8004526 <HAL_NVIC_DisableIRQ>
	if (RX_BUFFER_HEAD  !=  RX_BUFFER_TAIL) {
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <USART1_Dequeue+0x5c>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <USART1_Dequeue+0x60>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d013      	beq.n	80039d0 <USART1_Dequeue+0x4c>
		*c = RX_BUFFER[RX_BUFFER_TAIL ];
 80039a8:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <USART1_Dequeue+0x60>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a0e      	ldr	r2, [pc, #56]	; (80039e8 <USART1_Dequeue+0x64>)
 80039ae:	5cd2      	ldrb	r2, [r2, r3]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	701a      	strb	r2, [r3, #0]
		RX_BUFFER_TAIL ++;
 80039b4:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <USART1_Dequeue+0x60>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3301      	adds	r3, #1
 80039ba:	4a0a      	ldr	r2, [pc, #40]	; (80039e4 <USART1_Dequeue+0x60>)
 80039bc:	6013      	str	r3, [r2, #0]
		if (RX_BUFFER_TAIL  ==  BUFSIZE) {
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <USART1_Dequeue+0x60>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d102      	bne.n	80039cc <USART1_Dequeue+0x48>
			RX_BUFFER_TAIL = 0;
 80039c6:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <USART1_Dequeue+0x60>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
		}
		ret = 1;
 80039cc:	2301      	movs	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
	}
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039d0:	2025      	movs	r0, #37	; 0x25
 80039d2:	f000 fd9a 	bl	800450a <HAL_NVIC_EnableIRQ>
	return  ret;
 80039d6:	68fb      	ldr	r3, [r7, #12]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20002010 	.word	0x20002010
 80039e4:	20002014 	.word	0x20002014
 80039e8:	20001fc0 	.word	0x20001fc0

080039ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80039ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a24 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039f2:	e003      	b.n	80039fc <LoopCopyDataInit>

080039f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039f4:	4b0c      	ldr	r3, [pc, #48]	; (8003a28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80039f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80039fa:	3104      	adds	r1, #4

080039fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80039fc:	480b      	ldr	r0, [pc, #44]	; (8003a2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a04:	d3f6      	bcc.n	80039f4 <CopyDataInit>
  ldr  r2, =_sbss
 8003a06:	4a0b      	ldr	r2, [pc, #44]	; (8003a34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a08:	e002      	b.n	8003a10 <LoopFillZerobss>

08003a0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a0c:	f842 3b04 	str.w	r3, [r2], #4

08003a10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a14:	d3f9      	bcc.n	8003a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a16:	f7ff fe51 	bl	80036bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a1a:	f006 fd21 	bl	800a460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a1e:	f7ff f8f1 	bl	8002c04 <main>
  bx  lr    
 8003a22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003a24:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003a28:	08010a90 	.word	0x08010a90
  ldr  r0, =_sdata
 8003a2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a30:	20001430 	.word	0x20001430
  ldr  r2, =_sbss
 8003a34:	20001430 	.word	0x20001430
  ldr  r3, = _ebss
 8003a38:	20002048 	.word	0x20002048

08003a3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a3c:	e7fe      	b.n	8003a3c <ADC_IRQHandler>
	...

08003a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <HAL_Init+0x40>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0d      	ldr	r2, [pc, #52]	; (8003a80 <HAL_Init+0x40>)
 8003a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a50:	4b0b      	ldr	r3, [pc, #44]	; (8003a80 <HAL_Init+0x40>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <HAL_Init+0x40>)
 8003a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <HAL_Init+0x40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <HAL_Init+0x40>)
 8003a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a68:	2003      	movs	r0, #3
 8003a6a:	f000 fd27 	bl	80044bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f000 f808 	bl	8003a84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a74:	f7ff fd6c 	bl	8003550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40023c00 	.word	0x40023c00

08003a84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a8c:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <HAL_InitTick+0x54>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <HAL_InitTick+0x58>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	4619      	mov	r1, r3
 8003a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fd4d 	bl	8004542 <HAL_SYSTICK_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e00e      	b.n	8003ad0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b0f      	cmp	r3, #15
 8003ab6:	d80a      	bhi.n	8003ace <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ac0:	f000 fd07 	bl	80044d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ac4:	4a06      	ldr	r2, [pc, #24]	; (8003ae0 <HAL_InitTick+0x5c>)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
 8003acc:	e000      	b.n	8003ad0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	20001240 	.word	0x20001240
 8003adc:	20001248 	.word	0x20001248
 8003ae0:	20001244 	.word	0x20001244

08003ae4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e033      	b.n	8003b62 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7fd fcc2 	bl	800148c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 0310 	and.w	r3, r3, #16
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d118      	bne.n	8003b54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b2a:	f023 0302 	bic.w	r3, r3, #2
 8003b2e:	f043 0202 	orr.w	r2, r3, #2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fa50 	bl	8003fdc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	f043 0201 	orr.w	r2, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
 8003b52:	e001      	b.n	8003b58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_ADC_Start_DMA+0x1e>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e0cc      	b.n	8003d24 <HAL_ADC_Start_DMA+0x1b8>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d018      	beq.n	8003bd2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bb0:	4b5e      	ldr	r3, [pc, #376]	; (8003d2c <HAL_ADC_Start_DMA+0x1c0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a5e      	ldr	r2, [pc, #376]	; (8003d30 <HAL_ADC_Start_DMA+0x1c4>)
 8003bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bba:	0c9a      	lsrs	r2, r3, #18
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	4413      	add	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003bc4:	e002      	b.n	8003bcc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d1f9      	bne.n	8003bc6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	f040 80a0 	bne.w	8003d22 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d007      	beq.n	8003c14 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c0c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c20:	d106      	bne.n	8003c30 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	f023 0206 	bic.w	r2, r3, #6
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c2e:	e002      	b.n	8003c36 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c3e:	4b3d      	ldr	r3, [pc, #244]	; (8003d34 <HAL_ADC_Start_DMA+0x1c8>)
 8003c40:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	4a3c      	ldr	r2, [pc, #240]	; (8003d38 <HAL_ADC_Start_DMA+0x1cc>)
 8003c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	4a3b      	ldr	r2, [pc, #236]	; (8003d3c <HAL_ADC_Start_DMA+0x1d0>)
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	4a3a      	ldr	r2, [pc, #232]	; (8003d40 <HAL_ADC_Start_DMA+0x1d4>)
 8003c58:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c62:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c72:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c82:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	334c      	adds	r3, #76	; 0x4c
 8003c8e:	4619      	mov	r1, r3
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f000 ff74 	bl	8004b80 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d12a      	bne.n	8003cfa <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a26      	ldr	r2, [pc, #152]	; (8003d44 <HAL_ADC_Start_DMA+0x1d8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d015      	beq.n	8003cda <HAL_ADC_Start_DMA+0x16e>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a25      	ldr	r2, [pc, #148]	; (8003d48 <HAL_ADC_Start_DMA+0x1dc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d105      	bne.n	8003cc4 <HAL_ADC_Start_DMA+0x158>
 8003cb8:	4b1e      	ldr	r3, [pc, #120]	; (8003d34 <HAL_ADC_Start_DMA+0x1c8>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a20      	ldr	r2, [pc, #128]	; (8003d4c <HAL_ADC_Start_DMA+0x1e0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d129      	bne.n	8003d22 <HAL_ADC_Start_DMA+0x1b6>
 8003cce:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <HAL_ADC_Start_DMA+0x1c8>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	2b0f      	cmp	r3, #15
 8003cd8:	d823      	bhi.n	8003d22 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11c      	bne.n	8003d22 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	e013      	b.n	8003d22 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <HAL_ADC_Start_DMA+0x1d8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d10e      	bne.n	8003d22 <HAL_ADC_Start_DMA+0x1b6>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d107      	bne.n	8003d22 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d20:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20001240 	.word	0x20001240
 8003d30:	431bde83 	.word	0x431bde83
 8003d34:	40012300 	.word	0x40012300
 8003d38:	080041d5 	.word	0x080041d5
 8003d3c:	0800428f 	.word	0x0800428f
 8003d40:	080042ab 	.word	0x080042ab
 8003d44:	40012000 	.word	0x40012000
 8003d48:	40012100 	.word	0x40012100
 8003d4c:	40012200 	.word	0x40012200

08003d50 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x1c>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e113      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x244>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b09      	cmp	r3, #9
 8003da2:	d925      	bls.n	8003df0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68d9      	ldr	r1, [r3, #12]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	461a      	mov	r2, r3
 8003db2:	4613      	mov	r3, r2
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4413      	add	r3, r2
 8003db8:	3b1e      	subs	r3, #30
 8003dba:	2207      	movs	r2, #7
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43da      	mvns	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	400a      	ands	r2, r1
 8003dc8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68d9      	ldr	r1, [r3, #12]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	4618      	mov	r0, r3
 8003ddc:	4603      	mov	r3, r0
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	4403      	add	r3, r0
 8003de2:	3b1e      	subs	r3, #30
 8003de4:	409a      	lsls	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	60da      	str	r2, [r3, #12]
 8003dee:	e022      	b.n	8003e36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6919      	ldr	r1, [r3, #16]
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	2207      	movs	r2, #7
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	400a      	ands	r2, r1
 8003e12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6919      	ldr	r1, [r3, #16]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	4618      	mov	r0, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4403      	add	r3, r0
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b06      	cmp	r3, #6
 8003e3c:	d824      	bhi.n	8003e88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3b05      	subs	r3, #5
 8003e50:	221f      	movs	r2, #31
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43da      	mvns	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	400a      	ands	r2, r1
 8003e5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	3b05      	subs	r3, #5
 8003e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	430a      	orrs	r2, r1
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34
 8003e86:	e04c      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	d824      	bhi.n	8003eda <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3b23      	subs	r3, #35	; 0x23
 8003ea2:	221f      	movs	r2, #31
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	43da      	mvns	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	400a      	ands	r2, r1
 8003eb0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	3b23      	subs	r3, #35	; 0x23
 8003ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ed8:	e023      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	3b41      	subs	r3, #65	; 0x41
 8003eec:	221f      	movs	r2, #31
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	43da      	mvns	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	400a      	ands	r2, r1
 8003efa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	4618      	mov	r0, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	3b41      	subs	r3, #65	; 0x41
 8003f16:	fa00 f203 	lsl.w	r2, r0, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f22:	4b29      	ldr	r3, [pc, #164]	; (8003fc8 <HAL_ADC_ConfigChannel+0x250>)
 8003f24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a28      	ldr	r2, [pc, #160]	; (8003fcc <HAL_ADC_ConfigChannel+0x254>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d10f      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x1d8>
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b12      	cmp	r3, #18
 8003f36:	d10b      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <HAL_ADC_ConfigChannel+0x254>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d12b      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x23a>
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1c      	ldr	r2, [pc, #112]	; (8003fd0 <HAL_ADC_ConfigChannel+0x258>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d003      	beq.n	8003f6c <HAL_ADC_ConfigChannel+0x1f4>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b11      	cmp	r3, #17
 8003f6a:	d122      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a11      	ldr	r2, [pc, #68]	; (8003fd0 <HAL_ADC_ConfigChannel+0x258>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d111      	bne.n	8003fb2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <HAL_ADC_ConfigChannel+0x25c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <HAL_ADC_ConfigChannel+0x260>)
 8003f94:	fba2 2303 	umull	r2, r3, r2, r3
 8003f98:	0c9a      	lsrs	r2, r3, #18
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fa4:	e002      	b.n	8003fac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f9      	bne.n	8003fa6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3714      	adds	r7, #20
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40012300 	.word	0x40012300
 8003fcc:	40012000 	.word	0x40012000
 8003fd0:	10000012 	.word	0x10000012
 8003fd4:	20001240 	.word	0x20001240
 8003fd8:	431bde83 	.word	0x431bde83

08003fdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fe4:	4b79      	ldr	r3, [pc, #484]	; (80041cc <ADC_Init+0x1f0>)
 8003fe6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004010:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	021a      	lsls	r2, r3, #8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004034:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004056:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6899      	ldr	r1, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	4a58      	ldr	r2, [pc, #352]	; (80041d0 <ADC_Init+0x1f4>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004082:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6899      	ldr	r1, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	e00f      	b.n	80040da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0202 	bic.w	r2, r2, #2
 80040e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6899      	ldr	r1, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	7e1b      	ldrb	r3, [r3, #24]
 80040f4:	005a      	lsls	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d01b      	beq.n	8004140 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004116:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004126:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	3b01      	subs	r3, #1
 8004134:	035a      	lsls	r2, r3, #13
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	430a      	orrs	r2, r1
 800413c:	605a      	str	r2, [r3, #4]
 800413e:	e007      	b.n	8004150 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800414e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	3b01      	subs	r3, #1
 800416c:	051a      	lsls	r2, r3, #20
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004184:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6899      	ldr	r1, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004192:	025a      	lsls	r2, r3, #9
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689a      	ldr	r2, [r3, #8]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6899      	ldr	r1, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	029a      	lsls	r2, r3, #10
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	609a      	str	r2, [r3, #8]
}
 80041c0:	bf00      	nop
 80041c2:	3714      	adds	r7, #20
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	40012300 	.word	0x40012300
 80041d0:	0f000001 	.word	0x0f000001

080041d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d13c      	bne.n	8004268 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d12b      	bne.n	8004260 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800420c:	2b00      	cmp	r3, #0
 800420e:	d127      	bne.n	8004260 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004216:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800421a:	2b00      	cmp	r3, #0
 800421c:	d006      	beq.n	800422c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004228:	2b00      	cmp	r3, #0
 800422a:	d119      	bne.n	8004260 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0220 	bic.w	r2, r2, #32
 800423a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f043 0201 	orr.w	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7fc ff95 	bl	8001190 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004266:	e00e      	b.n	8004286 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7ff fd75 	bl	8003d64 <HAL_ADC_ErrorCallback>
}
 800427a:	e004      	b.n	8004286 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff fd57 	bl	8003d50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042a2:	bf00      	nop
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b084      	sub	sp, #16
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2240      	movs	r2, #64	; 0x40
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c2:	f043 0204 	orr.w	r2, r3, #4
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f7ff fd4a 	bl	8003d64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042d0:	bf00      	nop
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <__NVIC_SetPriorityGrouping+0x44>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042f4:	4013      	ands	r3, r2
 80042f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800430a:	4a04      	ldr	r2, [pc, #16]	; (800431c <__NVIC_SetPriorityGrouping+0x44>)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	60d3      	str	r3, [r2, #12]
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000ed00 	.word	0xe000ed00

08004320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <__NVIC_GetPriorityGrouping+0x18>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	f003 0307 	and.w	r3, r3, #7
}
 800432e:	4618      	mov	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	4603      	mov	r3, r0
 8004344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	2b00      	cmp	r3, #0
 800434c:	db0b      	blt.n	8004366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	f003 021f 	and.w	r2, r3, #31
 8004354:	4907      	ldr	r1, [pc, #28]	; (8004374 <__NVIC_EnableIRQ+0x38>)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	2001      	movs	r0, #1
 800435e:	fa00 f202 	lsl.w	r2, r0, r2
 8004362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	e000e100 	.word	0xe000e100

08004378 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	4603      	mov	r3, r0
 8004380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	2b00      	cmp	r3, #0
 8004388:	db10      	blt.n	80043ac <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	f003 021f 	and.w	r2, r3, #31
 8004390:	4909      	ldr	r1, [pc, #36]	; (80043b8 <__NVIC_DisableIRQ+0x40>)
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	095b      	lsrs	r3, r3, #5
 8004398:	2001      	movs	r0, #1
 800439a:	fa00 f202 	lsl.w	r2, r0, r2
 800439e:	3320      	adds	r3, #32
 80043a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80043a4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80043a8:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	e000e100 	.word	0xe000e100

080043bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	6039      	str	r1, [r7, #0]
 80043c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	db0a      	blt.n	80043e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	490c      	ldr	r1, [pc, #48]	; (8004408 <__NVIC_SetPriority+0x4c>)
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	0112      	lsls	r2, r2, #4
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	440b      	add	r3, r1
 80043e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043e4:	e00a      	b.n	80043fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	4908      	ldr	r1, [pc, #32]	; (800440c <__NVIC_SetPriority+0x50>)
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	f003 030f 	and.w	r3, r3, #15
 80043f2:	3b04      	subs	r3, #4
 80043f4:	0112      	lsls	r2, r2, #4
 80043f6:	b2d2      	uxtb	r2, r2
 80043f8:	440b      	add	r3, r1
 80043fa:	761a      	strb	r2, [r3, #24]
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	e000e100 	.word	0xe000e100
 800440c:	e000ed00 	.word	0xe000ed00

08004410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004410:	b480      	push	{r7}
 8004412:	b089      	sub	sp, #36	; 0x24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f1c3 0307 	rsb	r3, r3, #7
 800442a:	2b04      	cmp	r3, #4
 800442c:	bf28      	it	cs
 800442e:	2304      	movcs	r3, #4
 8004430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	3304      	adds	r3, #4
 8004436:	2b06      	cmp	r3, #6
 8004438:	d902      	bls.n	8004440 <NVIC_EncodePriority+0x30>
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	3b03      	subs	r3, #3
 800443e:	e000      	b.n	8004442 <NVIC_EncodePriority+0x32>
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	43da      	mvns	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	401a      	ands	r2, r3
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004458:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	43d9      	mvns	r1, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004468:	4313      	orrs	r3, r2
         );
}
 800446a:	4618      	mov	r0, r3
 800446c:	3724      	adds	r7, #36	; 0x24
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
	...

08004478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3b01      	subs	r3, #1
 8004484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004488:	d301      	bcc.n	800448e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800448a:	2301      	movs	r3, #1
 800448c:	e00f      	b.n	80044ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800448e:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <SysTick_Config+0x40>)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3b01      	subs	r3, #1
 8004494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004496:	210f      	movs	r1, #15
 8004498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800449c:	f7ff ff8e 	bl	80043bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <SysTick_Config+0x40>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044a6:	4b04      	ldr	r3, [pc, #16]	; (80044b8 <SysTick_Config+0x40>)
 80044a8:	2207      	movs	r2, #7
 80044aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3708      	adds	r7, #8
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	e000e010 	.word	0xe000e010

080044bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff ff07 	bl	80042d8 <__NVIC_SetPriorityGrouping>
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b086      	sub	sp, #24
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	4603      	mov	r3, r0
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
 80044de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044e4:	f7ff ff1c 	bl	8004320 <__NVIC_GetPriorityGrouping>
 80044e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	6978      	ldr	r0, [r7, #20]
 80044f0:	f7ff ff8e 	bl	8004410 <NVIC_EncodePriority>
 80044f4:	4602      	mov	r2, r0
 80044f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fa:	4611      	mov	r1, r2
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff ff5d 	bl	80043bc <__NVIC_SetPriority>
}
 8004502:	bf00      	nop
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	4603      	mov	r3, r0
 8004512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff ff0f 	bl	800433c <__NVIC_EnableIRQ>
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b082      	sub	sp, #8
 800452a:	af00      	add	r7, sp, #0
 800452c:	4603      	mov	r3, r0
 800452e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff ff1f 	bl	8004378 <__NVIC_DisableIRQ>
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ff94 	bl	8004478 <SysTick_Config>
 8004550:	4603      	mov	r3, r0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800455a:	b580      	push	{r7, lr}
 800455c:	b082      	sub	sp, #8
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e014      	b.n	8004596 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	791b      	ldrb	r3, [r3, #4]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d105      	bne.n	8004582 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fd f8a1 	bl	80016c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
	...

080045a0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
 80045ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	795b      	ldrb	r3, [r3, #5]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d101      	bne.n	80045be <HAL_DAC_Start_DMA+0x1e>
 80045ba:	2302      	movs	r3, #2
 80045bc:	e08e      	b.n	80046dc <HAL_DAC_Start_DMA+0x13c>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2201      	movs	r2, #1
 80045c2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2202      	movs	r2, #2
 80045c8:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d12a      	bne.n	8004626 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	4a43      	ldr	r2, [pc, #268]	; (80046e4 <HAL_DAC_Start_DMA+0x144>)
 80045d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4a42      	ldr	r2, [pc, #264]	; (80046e8 <HAL_DAC_Start_DMA+0x148>)
 80045de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a41      	ldr	r2, [pc, #260]	; (80046ec <HAL_DAC_Start_DMA+0x14c>)
 80045e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045f6:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80045f8:	6a3b      	ldr	r3, [r7, #32]
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d009      	beq.n	8004612 <HAL_DAC_Start_DMA+0x72>
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d00c      	beq.n	800461c <HAL_DAC_Start_DMA+0x7c>
 8004602:	2b00      	cmp	r3, #0
 8004604:	d000      	beq.n	8004608 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004606:	e039      	b.n	800467c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3308      	adds	r3, #8
 800460e:	617b      	str	r3, [r7, #20]
        break;
 8004610:	e034      	b.n	800467c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	330c      	adds	r3, #12
 8004618:	617b      	str	r3, [r7, #20]
        break;
 800461a:	e02f      	b.n	800467c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3310      	adds	r3, #16
 8004622:	617b      	str	r3, [r7, #20]
        break;
 8004624:	e02a      	b.n	800467c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4a31      	ldr	r2, [pc, #196]	; (80046f0 <HAL_DAC_Start_DMA+0x150>)
 800462c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	4a30      	ldr	r2, [pc, #192]	; (80046f4 <HAL_DAC_Start_DMA+0x154>)
 8004634:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	4a2f      	ldr	r2, [pc, #188]	; (80046f8 <HAL_DAC_Start_DMA+0x158>)
 800463c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800464c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	2b04      	cmp	r3, #4
 8004652:	d009      	beq.n	8004668 <HAL_DAC_Start_DMA+0xc8>
 8004654:	2b08      	cmp	r3, #8
 8004656:	d00c      	beq.n	8004672 <HAL_DAC_Start_DMA+0xd2>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d000      	beq.n	800465e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800465c:	e00e      	b.n	800467c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3314      	adds	r3, #20
 8004664:	617b      	str	r3, [r7, #20]
        break;
 8004666:	e009      	b.n	800467c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3318      	adds	r3, #24
 800466e:	617b      	str	r3, [r7, #20]
        break;
 8004670:	e004      	b.n	800467c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	331c      	adds	r3, #28
 8004678:	617b      	str	r3, [r7, #20]
        break;
 800467a:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10f      	bne.n	80046a2 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004690:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6898      	ldr	r0, [r3, #8]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	f000 fa70 	bl	8004b80 <HAL_DMA_Start_IT>
 80046a0:	e00e      	b.n	80046c0 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80046b0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	68d8      	ldr	r0, [r3, #12]
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	f000 fa60 	bl	8004b80 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	2201      	movs	r2, #1
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	409a      	lsls	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	080048fd 	.word	0x080048fd
 80046e8:	0800491f 	.word	0x0800491f
 80046ec:	0800493b 	.word	0x0800493b
 80046f0:	080049b9 	.word	0x080049b9
 80046f4:	080049db 	.word	0x080049db
 80046f8:	080049f7 	.word	0x080049f7

080046fc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6819      	ldr	r1, [r3, #0]
 8004710:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43da      	mvns	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	400a      	ands	r2, r1
 8004722:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	2201      	movs	r2, #1
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	fa02 f303 	lsl.w	r3, r2, r3
 8004732:	43da      	mvns	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	400a      	ands	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d107      	bne.n	8004752 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fa72 	bl	8004c30 <HAL_DMA_Abort>
 800474c:	4603      	mov	r3, r0
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	e006      	b.n	8004760 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fa6a 	bl	8004c30 <HAL_DMA_Abort>
 800475c:	4603      	mov	r3, r0
 800475e:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2204      	movs	r2, #4
 800476a:	711a      	strb	r2, [r3, #4]
 800476c:	e002      	b.n	8004774 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8004774:	7bfb      	ldrb	r3, [r7, #15]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800478c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004794:	d118      	bne.n	80047c8 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2204      	movs	r2, #4
 800479a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f043 0201 	orr.w	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80047b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047c0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f843 	bl	800484e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047d6:	d118      	bne.n	800480a <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2204      	movs	r2, #4
 80047dc:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f043 0202 	orr.w	r2, r3, #2
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80047f2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004802:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f8cd 	bl	80049a4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004812:	b480      	push	{r7}
 8004814:	b083      	sub	sp, #12
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004862:	b480      	push	{r7}
 8004864:	b087      	sub	sp, #28
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	795b      	ldrb	r3, [r3, #5]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d101      	bne.n	8004882 <HAL_DAC_ConfigChannel+0x20>
 800487e:	2302      	movs	r3, #2
 8004880:	e036      	b.n	80048f0 <HAL_DAC_ConfigChannel+0x8e>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2202      	movs	r2, #2
 800488c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004896:	f640 72fe 	movw	r2, #4094	; 0xffe
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4013      	ands	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	22c0      	movs	r2, #192	; 0xc0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43da      	mvns	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	400a      	ands	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f7ff ff81 	bl	8004812 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	711a      	strb	r2, [r3, #4]
}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f7ff ff7a 	bl	8004826 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	f043 0204 	orr.w	r2, r3, #4
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f7ff ff70 	bl	800483a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	711a      	strb	r2, [r3, #4]
}
 8004960:	bf00      	nop
 8004962:	3710      	adds	r7, #16
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f7ff ffce 	bl	8004968 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	711a      	strb	r2, [r3, #4]
}
 80049d2:	bf00      	nop
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f7ff ffc7 	bl	800497c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f043 0204 	orr.w	r2, r3, #4
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff ffbd 	bl	8004990 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	711a      	strb	r2, [r3, #4]
}
 8004a1c:	bf00      	nop
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a30:	f003 fee4 	bl	80087fc <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e099      	b.n	8004b74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f022 0201 	bic.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a60:	e00f      	b.n	8004a82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a62:	f003 fecb 	bl	80087fc <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b05      	cmp	r3, #5
 8004a6e:	d908      	bls.n	8004a82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2203      	movs	r2, #3
 8004a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e078      	b.n	8004b74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e8      	bne.n	8004a62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4b38      	ldr	r3, [pc, #224]	; (8004b7c <HAL_DMA_Init+0x158>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ac6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d107      	bne.n	8004aec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 0307 	bic.w	r3, r3, #7
 8004b02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d117      	bne.n	8004b46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00e      	beq.n	8004b46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fb01 	bl	8005130 <DMA_CheckFifoParam>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2240      	movs	r2, #64	; 0x40
 8004b38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b42:	2301      	movs	r3, #1
 8004b44:	e016      	b.n	8004b74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fab8 	bl	80050c4 <DMA_CalcBaseAndBitshift>
 8004b54:	4603      	mov	r3, r0
 8004b56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b5c:	223f      	movs	r2, #63	; 0x3f
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	f010803f 	.word	0xf010803f

08004b80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_DMA_Start_IT+0x26>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e040      	b.n	8004c28 <HAL_DMA_Start_IT+0xa8>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d12f      	bne.n	8004c1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2202      	movs	r2, #2
 8004bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	68b9      	ldr	r1, [r7, #8]
 8004bce:	68f8      	ldr	r0, [r7, #12]
 8004bd0:	f000 fa4a 	bl	8005068 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd8:	223f      	movs	r2, #63	; 0x3f
 8004bda:	409a      	lsls	r2, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0216 	orr.w	r2, r2, #22
 8004bee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0208 	orr.w	r2, r2, #8
 8004c06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0201 	orr.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e005      	b.n	8004c26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004c22:	2302      	movs	r3, #2
 8004c24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004c3e:	f003 fddd 	bl	80087fc <HAL_GetTick>
 8004c42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d008      	beq.n	8004c62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2280      	movs	r2, #128	; 0x80
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e052      	b.n	8004d08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0216 	bic.w	r2, r2, #22
 8004c70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	695a      	ldr	r2, [r3, #20]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d103      	bne.n	8004c92 <HAL_DMA_Abort+0x62>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d007      	beq.n	8004ca2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0208 	bic.w	r2, r2, #8
 8004ca0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cb2:	e013      	b.n	8004cdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cb4:	f003 fda2 	bl	80087fc <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b05      	cmp	r3, #5
 8004cc0:	d90c      	bls.n	8004cdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e015      	b.n	8004d08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e4      	bne.n	8004cb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cee:	223f      	movs	r2, #63	; 0x3f
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d004      	beq.n	8004d2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2280      	movs	r2, #128	; 0x80
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e00c      	b.n	8004d48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2205      	movs	r2, #5
 8004d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0201 	bic.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d60:	4b92      	ldr	r3, [pc, #584]	; (8004fac <HAL_DMA_IRQHandler+0x258>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a92      	ldr	r2, [pc, #584]	; (8004fb0 <HAL_DMA_IRQHandler+0x25c>)
 8004d66:	fba2 2303 	umull	r2, r3, r2, r3
 8004d6a:	0a9b      	lsrs	r3, r3, #10
 8004d6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7e:	2208      	movs	r2, #8
 8004d80:	409a      	lsls	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	4013      	ands	r3, r2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01a      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d013      	beq.n	8004dc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0204 	bic.w	r2, r2, #4
 8004da6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dac:	2208      	movs	r2, #8
 8004dae:	409a      	lsls	r2, r3
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	f043 0201 	orr.w	r2, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d012      	beq.n	8004df6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00b      	beq.n	8004df6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de2:	2201      	movs	r2, #1
 8004de4:	409a      	lsls	r2, r3
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	f043 0202 	orr.w	r2, r3, #2
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	409a      	lsls	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4013      	ands	r3, r2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d012      	beq.n	8004e2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e18:	2204      	movs	r2, #4
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	f043 0204 	orr.w	r2, r3, #4
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e30:	2210      	movs	r2, #16
 8004e32:	409a      	lsls	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d043      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d03c      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4e:	2210      	movs	r2, #16
 8004e50:	409a      	lsls	r2, r3
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d018      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d108      	bne.n	8004e84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d024      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	4798      	blx	r3
 8004e82:	e01f      	b.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01b      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	4798      	blx	r3
 8004e94:	e016      	b.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d107      	bne.n	8004eb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0208 	bic.w	r2, r2, #8
 8004eb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec8:	2220      	movs	r2, #32
 8004eca:	409a      	lsls	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 808e 	beq.w	8004ff2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f000 8086 	beq.w	8004ff2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eea:	2220      	movs	r2, #32
 8004eec:	409a      	lsls	r2, r3
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b05      	cmp	r3, #5
 8004efc:	d136      	bne.n	8004f6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0216 	bic.w	r2, r2, #22
 8004f0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695a      	ldr	r2, [r3, #20]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d103      	bne.n	8004f2e <HAL_DMA_IRQHandler+0x1da>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d007      	beq.n	8004f3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0208 	bic.w	r2, r2, #8
 8004f3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f42:	223f      	movs	r2, #63	; 0x3f
 8004f44:	409a      	lsls	r2, r3
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d07d      	beq.n	800505e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	4798      	blx	r3
        }
        return;
 8004f6a:	e078      	b.n	800505e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d01c      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d108      	bne.n	8004f9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d030      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	4798      	blx	r3
 8004f98:	e02b      	b.n	8004ff2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d027      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	4798      	blx	r3
 8004faa:	e022      	b.n	8004ff2 <HAL_DMA_IRQHandler+0x29e>
 8004fac:	20001240 	.word	0x20001240
 8004fb0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10f      	bne.n	8004fe2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0210 	bic.w	r2, r2, #16
 8004fd0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d032      	beq.n	8005060 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d022      	beq.n	800504c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2205      	movs	r2, #5
 800500a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	3301      	adds	r3, #1
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	429a      	cmp	r2, r3
 8005028:	d307      	bcc.n	800503a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1f2      	bne.n	800501e <HAL_DMA_IRQHandler+0x2ca>
 8005038:	e000      	b.n	800503c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800503a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	4798      	blx	r3
 800505c:	e000      	b.n	8005060 <HAL_DMA_IRQHandler+0x30c>
        return;
 800505e:	bf00      	nop
    }
  }
}
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop

08005068 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005084:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	683a      	ldr	r2, [r7, #0]
 800508c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d108      	bne.n	80050a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050a6:	e007      	b.n	80050b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	60da      	str	r2, [r3, #12]
}
 80050b8:	bf00      	nop
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	3b10      	subs	r3, #16
 80050d4:	4a14      	ldr	r2, [pc, #80]	; (8005128 <DMA_CalcBaseAndBitshift+0x64>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	091b      	lsrs	r3, r3, #4
 80050dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050de:	4a13      	ldr	r2, [pc, #76]	; (800512c <DMA_CalcBaseAndBitshift+0x68>)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	461a      	mov	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d909      	bls.n	8005106 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050fa:	f023 0303 	bic.w	r3, r3, #3
 80050fe:	1d1a      	adds	r2, r3, #4
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	659a      	str	r2, [r3, #88]	; 0x58
 8005104:	e007      	b.n	8005116 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800510e:	f023 0303 	bic.w	r3, r3, #3
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	aaaaaaab 	.word	0xaaaaaaab
 800512c:	0800f120 	.word	0x0800f120

08005130 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005140:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d11f      	bne.n	800518a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b03      	cmp	r3, #3
 800514e:	d855      	bhi.n	80051fc <DMA_CheckFifoParam+0xcc>
 8005150:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <DMA_CheckFifoParam+0x28>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	08005169 	.word	0x08005169
 800515c:	0800517b 	.word	0x0800517b
 8005160:	08005169 	.word	0x08005169
 8005164:	080051fd 	.word	0x080051fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d045      	beq.n	8005200 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005178:	e042      	b.n	8005200 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005182:	d13f      	bne.n	8005204 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005188:	e03c      	b.n	8005204 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005192:	d121      	bne.n	80051d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d836      	bhi.n	8005208 <DMA_CheckFifoParam+0xd8>
 800519a:	a201      	add	r2, pc, #4	; (adr r2, 80051a0 <DMA_CheckFifoParam+0x70>)
 800519c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051b7 	.word	0x080051b7
 80051a8:	080051b1 	.word	0x080051b1
 80051ac:	080051c9 	.word	0x080051c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      break;
 80051b4:	e02f      	b.n	8005216 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d024      	beq.n	800520c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c6:	e021      	b.n	800520c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051d0:	d11e      	bne.n	8005210 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051d6:	e01b      	b.n	8005210 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d902      	bls.n	80051e4 <DMA_CheckFifoParam+0xb4>
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d003      	beq.n	80051ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051e2:	e018      	b.n	8005216 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
      break;
 80051e8:	e015      	b.n	8005216 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00e      	beq.n	8005214 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	73fb      	strb	r3, [r7, #15]
      break;
 80051fa:	e00b      	b.n	8005214 <DMA_CheckFifoParam+0xe4>
      break;
 80051fc:	bf00      	nop
 80051fe:	e00a      	b.n	8005216 <DMA_CheckFifoParam+0xe6>
      break;
 8005200:	bf00      	nop
 8005202:	e008      	b.n	8005216 <DMA_CheckFifoParam+0xe6>
      break;
 8005204:	bf00      	nop
 8005206:	e006      	b.n	8005216 <DMA_CheckFifoParam+0xe6>
      break;
 8005208:	bf00      	nop
 800520a:	e004      	b.n	8005216 <DMA_CheckFifoParam+0xe6>
      break;
 800520c:	bf00      	nop
 800520e:	e002      	b.n	8005216 <DMA_CheckFifoParam+0xe6>
      break;   
 8005210:	bf00      	nop
 8005212:	e000      	b.n	8005216 <DMA_CheckFifoParam+0xe6>
      break;
 8005214:	bf00      	nop
    }
  } 
  
  return status; 
 8005216:	7bfb      	ldrb	r3, [r7, #15]
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e03b      	b.n	80052ae <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d106      	bne.n	8005250 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc fc2e 	bl	8001aac <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005274:	f023 0107 	bic.w	r1, r3, #7
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689a      	ldr	r2, [r3, #8]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	430a      	orrs	r2, r1
 8005282:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800528e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	68d1      	ldr	r1, [r2, #12]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	430b      	orrs	r3, r1
 800529c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b086      	sub	sp, #24
 80052ba:	af02      	add	r7, sp, #8
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_DMA2D_Start+0x1c>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e018      	b.n	8005304 <HAL_DMA2D_Start+0x4e>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f989 	bl	8005604 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0201 	orr.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005316:	2300      	movs	r3, #0
 8005318:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d056      	beq.n	80053d6 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005328:	f003 fa68 	bl	80087fc <HAL_GetTick>
 800532c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800532e:	e04b      	b.n	80053c8 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800533e:	2b00      	cmp	r3, #0
 8005340:	d023      	beq.n	800538a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005350:	f043 0202 	orr.w	r2, r3, #2
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005366:	f043 0201 	orr.w	r2, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2221      	movs	r2, #33	; 0x21
 8005374:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2204      	movs	r2, #4
 800537a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0a5      	b.n	80054d6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005390:	d01a      	beq.n	80053c8 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005392:	f003 fa33 	bl	80087fc <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d302      	bcc.n	80053a8 <HAL_DMA2D_PollForTransfer+0x9c>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10f      	bne.n	80053c8 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ac:	f043 0220 	orr.w	r2, r3, #32
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2203      	movs	r2, #3
 80053b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e086      	b.n	80054d6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0ac      	beq.n	8005330 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d061      	beq.n	80054bc <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80053f8:	f003 fa00 	bl	80087fc <HAL_GetTick>
 80053fc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80053fe:	e056      	b.n	80054ae <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800540e:	2b00      	cmp	r3, #0
 8005410:	d02e      	beq.n	8005470 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f003 0308 	and.w	r3, r3, #8
 8005418:	2b00      	cmp	r3, #0
 800541a:	d005      	beq.n	8005428 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005420:	f043 0204 	orr.w	r2, r3, #4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	f043 0202 	orr.w	r2, r3, #2
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800544c:	f043 0201 	orr.w	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2229      	movs	r2, #41	; 0x29
 800545a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2204      	movs	r2, #4
 8005460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e032      	b.n	80054d6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005476:	d01a      	beq.n	80054ae <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005478:	f003 f9c0 	bl	80087fc <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d302      	bcc.n	800548e <HAL_DMA2D_PollForTransfer+0x182>
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10f      	bne.n	80054ae <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2203      	movs	r2, #3
 800549e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e013      	b.n	80054d6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 0310 	and.w	r3, r3, #16
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0a1      	beq.n	8005400 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2212      	movs	r2, #18
 80054c2:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3718      	adds	r7, #24
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_DMA2D_ConfigLayer+0x20>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e079      	b.n	80055f4 <HAL_DMA2D_ConfigLayer+0x114>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	011b      	lsls	r3, r3, #4
 8005514:	3318      	adds	r3, #24
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800552a:	4b35      	ldr	r3, [pc, #212]	; (8005600 <HAL_DMA2D_ConfigLayer+0x120>)
 800552c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b0a      	cmp	r3, #10
 8005534:	d003      	beq.n	800553e <HAL_DMA2D_ConfigLayer+0x5e>
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2b09      	cmp	r3, #9
 800553c:	d107      	bne.n	800554e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	e005      	b.n	800555a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	061b      	lsls	r3, r3, #24
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d120      	bne.n	80055a2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	43db      	mvns	r3, r3
 800556a:	ea02 0103 	and.w	r1, r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	697a      	ldr	r2, [r7, #20]
 8005574:	430a      	orrs	r2, r1
 8005576:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b0a      	cmp	r3, #10
 8005588:	d003      	beq.n	8005592 <HAL_DMA2D_ConfigLayer+0xb2>
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b09      	cmp	r3, #9
 8005590:	d127      	bne.n	80055e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800559e:	629a      	str	r2, [r3, #40]	; 0x28
 80055a0:	e01f      	b.n	80055e2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69da      	ldr	r2, [r3, #28]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	43db      	mvns	r3, r3
 80055ac:	ea02 0103 	and.w	r1, r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	6812      	ldr	r2, [r2, #0]
 80055c2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b0a      	cmp	r3, #10
 80055ca:	d003      	beq.n	80055d4 <HAL_DMA2D_ConfigLayer+0xf4>
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b09      	cmp	r3, #9
 80055d2:	d106      	bne.n	80055e2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	68da      	ldr	r2, [r3, #12]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80055e0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	ff03000f 	.word	0xff03000f

08005604 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005604:	b480      	push	{r7}
 8005606:	b08b      	sub	sp, #44	; 0x2c
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	041a      	lsls	r2, r3, #16
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	431a      	orrs	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800563c:	d174      	bne.n	8005728 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005644:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800564c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005654:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	b2db      	uxtb	r3, r3
 800565a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d108      	bne.n	8005676 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	431a      	orrs	r2, r3
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	4313      	orrs	r3, r2
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
 8005674:	e053      	b.n	800571e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d106      	bne.n	800568c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4313      	orrs	r3, r2
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
 800568a:	e048      	b.n	800571e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d111      	bne.n	80056b8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	0cdb      	lsrs	r3, r3, #19
 8005698:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	0a9b      	lsrs	r3, r3, #10
 800569e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	08db      	lsrs	r3, r3, #3
 80056a4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	02db      	lsls	r3, r3, #11
 80056ae:	4313      	orrs	r3, r2
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
 80056b6:	e032      	b.n	800571e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d117      	bne.n	80056f0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	0fdb      	lsrs	r3, r3, #31
 80056c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	0cdb      	lsrs	r3, r3, #19
 80056ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	0adb      	lsrs	r3, r3, #11
 80056d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	08db      	lsrs	r3, r3, #3
 80056d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	029b      	lsls	r3, r3, #10
 80056e0:	431a      	orrs	r2, r3
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	03db      	lsls	r3, r3, #15
 80056e6:	4313      	orrs	r3, r2
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
 80056ee:	e016      	b.n	800571e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	0f1b      	lsrs	r3, r3, #28
 80056f4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	0d1b      	lsrs	r3, r3, #20
 80056fa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	0b1b      	lsrs	r3, r3, #12
 8005700:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	011a      	lsls	r2, r3, #4
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	021b      	lsls	r3, r3, #8
 8005710:	431a      	orrs	r2, r3
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	031b      	lsls	r3, r3, #12
 8005716:	4313      	orrs	r3, r2
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005726:	e003      	b.n	8005730 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68ba      	ldr	r2, [r7, #8]
 800572e:	60da      	str	r2, [r3, #12]
}
 8005730:	bf00      	nop
 8005732:	372c      	adds	r7, #44	; 0x2c
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800573c:	b480      	push	{r7}
 800573e:	b089      	sub	sp, #36	; 0x24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800574e:	2300      	movs	r3, #0
 8005750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e177      	b.n	8005a48 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005758:	2201      	movs	r2, #1
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4013      	ands	r3, r2
 800576a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	429a      	cmp	r2, r3
 8005772:	f040 8166 	bne.w	8005a42 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d00b      	beq.n	8005796 <HAL_GPIO_Init+0x5a>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d007      	beq.n	8005796 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800578a:	2b11      	cmp	r3, #17
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	2b12      	cmp	r3, #18
 8005794:	d130      	bne.n	80057f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	005b      	lsls	r3, r3, #1
 80057a0:	2203      	movs	r2, #3
 80057a2:	fa02 f303 	lsl.w	r3, r2, r3
 80057a6:	43db      	mvns	r3, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4013      	ands	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4313      	orrs	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	69ba      	ldr	r2, [r7, #24]
 80057c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057cc:	2201      	movs	r2, #1
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	43db      	mvns	r3, r3
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4013      	ands	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	091b      	lsrs	r3, r3, #4
 80057e2:	f003 0201 	and.w	r2, r3, #1
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057fe:	69fb      	ldr	r3, [r7, #28]
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	2203      	movs	r2, #3
 8005804:	fa02 f303 	lsl.w	r3, r2, r3
 8005808:	43db      	mvns	r3, r3
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	4013      	ands	r3, r2
 800580e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	4313      	orrs	r3, r2
 8005820:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69ba      	ldr	r2, [r7, #24]
 8005826:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	2b02      	cmp	r3, #2
 800582e:	d003      	beq.n	8005838 <HAL_GPIO_Init+0xfc>
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	2b12      	cmp	r3, #18
 8005836:	d123      	bne.n	8005880 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	08da      	lsrs	r2, r3, #3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3208      	adds	r2, #8
 8005840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	220f      	movs	r2, #15
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	08da      	lsrs	r2, r3, #3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3208      	adds	r2, #8
 800587a:	69b9      	ldr	r1, [r7, #24]
 800587c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	2203      	movs	r2, #3
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4013      	ands	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0203 	and.w	r2, r3, #3
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80c0 	beq.w	8005a42 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	4b65      	ldr	r3, [pc, #404]	; (8005a5c <HAL_GPIO_Init+0x320>)
 80058c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ca:	4a64      	ldr	r2, [pc, #400]	; (8005a5c <HAL_GPIO_Init+0x320>)
 80058cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058d0:	6453      	str	r3, [r2, #68]	; 0x44
 80058d2:	4b62      	ldr	r3, [pc, #392]	; (8005a5c <HAL_GPIO_Init+0x320>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058de:	4a60      	ldr	r2, [pc, #384]	; (8005a60 <HAL_GPIO_Init+0x324>)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	089b      	lsrs	r3, r3, #2
 80058e4:	3302      	adds	r3, #2
 80058e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	220f      	movs	r2, #15
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4013      	ands	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a57      	ldr	r2, [pc, #348]	; (8005a64 <HAL_GPIO_Init+0x328>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d037      	beq.n	800597a <HAL_GPIO_Init+0x23e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a56      	ldr	r2, [pc, #344]	; (8005a68 <HAL_GPIO_Init+0x32c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d031      	beq.n	8005976 <HAL_GPIO_Init+0x23a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a55      	ldr	r2, [pc, #340]	; (8005a6c <HAL_GPIO_Init+0x330>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d02b      	beq.n	8005972 <HAL_GPIO_Init+0x236>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a54      	ldr	r2, [pc, #336]	; (8005a70 <HAL_GPIO_Init+0x334>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d025      	beq.n	800596e <HAL_GPIO_Init+0x232>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a53      	ldr	r2, [pc, #332]	; (8005a74 <HAL_GPIO_Init+0x338>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01f      	beq.n	800596a <HAL_GPIO_Init+0x22e>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a52      	ldr	r2, [pc, #328]	; (8005a78 <HAL_GPIO_Init+0x33c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d019      	beq.n	8005966 <HAL_GPIO_Init+0x22a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a51      	ldr	r2, [pc, #324]	; (8005a7c <HAL_GPIO_Init+0x340>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_GPIO_Init+0x226>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a50      	ldr	r2, [pc, #320]	; (8005a80 <HAL_GPIO_Init+0x344>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00d      	beq.n	800595e <HAL_GPIO_Init+0x222>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a4f      	ldr	r2, [pc, #316]	; (8005a84 <HAL_GPIO_Init+0x348>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <HAL_GPIO_Init+0x21e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a4e      	ldr	r2, [pc, #312]	; (8005a88 <HAL_GPIO_Init+0x34c>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d101      	bne.n	8005956 <HAL_GPIO_Init+0x21a>
 8005952:	2309      	movs	r3, #9
 8005954:	e012      	b.n	800597c <HAL_GPIO_Init+0x240>
 8005956:	230a      	movs	r3, #10
 8005958:	e010      	b.n	800597c <HAL_GPIO_Init+0x240>
 800595a:	2308      	movs	r3, #8
 800595c:	e00e      	b.n	800597c <HAL_GPIO_Init+0x240>
 800595e:	2307      	movs	r3, #7
 8005960:	e00c      	b.n	800597c <HAL_GPIO_Init+0x240>
 8005962:	2306      	movs	r3, #6
 8005964:	e00a      	b.n	800597c <HAL_GPIO_Init+0x240>
 8005966:	2305      	movs	r3, #5
 8005968:	e008      	b.n	800597c <HAL_GPIO_Init+0x240>
 800596a:	2304      	movs	r3, #4
 800596c:	e006      	b.n	800597c <HAL_GPIO_Init+0x240>
 800596e:	2303      	movs	r3, #3
 8005970:	e004      	b.n	800597c <HAL_GPIO_Init+0x240>
 8005972:	2302      	movs	r3, #2
 8005974:	e002      	b.n	800597c <HAL_GPIO_Init+0x240>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <HAL_GPIO_Init+0x240>
 800597a:	2300      	movs	r3, #0
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	f002 0203 	and.w	r2, r2, #3
 8005982:	0092      	lsls	r2, r2, #2
 8005984:	4093      	lsls	r3, r2
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4313      	orrs	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800598c:	4934      	ldr	r1, [pc, #208]	; (8005a60 <HAL_GPIO_Init+0x324>)
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	089b      	lsrs	r3, r3, #2
 8005992:	3302      	adds	r3, #2
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800599a:	4b3c      	ldr	r3, [pc, #240]	; (8005a8c <HAL_GPIO_Init+0x350>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	69ba      	ldr	r2, [r7, #24]
 80059a6:	4013      	ands	r3, r2
 80059a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059be:	4a33      	ldr	r2, [pc, #204]	; (8005a8c <HAL_GPIO_Init+0x350>)
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80059c4:	4b31      	ldr	r3, [pc, #196]	; (8005a8c <HAL_GPIO_Init+0x350>)
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	43db      	mvns	r3, r3
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4013      	ands	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059e8:	4a28      	ldr	r2, [pc, #160]	; (8005a8c <HAL_GPIO_Init+0x350>)
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059ee:	4b27      	ldr	r3, [pc, #156]	; (8005a8c <HAL_GPIO_Init+0x350>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	43db      	mvns	r3, r3
 80059f8:	69ba      	ldr	r2, [r7, #24]
 80059fa:	4013      	ands	r3, r2
 80059fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005a12:	4a1e      	ldr	r2, [pc, #120]	; (8005a8c <HAL_GPIO_Init+0x350>)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005a18:	4b1c      	ldr	r3, [pc, #112]	; (8005a8c <HAL_GPIO_Init+0x350>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	43db      	mvns	r3, r3
 8005a22:	69ba      	ldr	r2, [r7, #24]
 8005a24:	4013      	ands	r3, r2
 8005a26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005a34:	69ba      	ldr	r2, [r7, #24]
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a3c:	4a13      	ldr	r2, [pc, #76]	; (8005a8c <HAL_GPIO_Init+0x350>)
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3301      	adds	r3, #1
 8005a46:	61fb      	str	r3, [r7, #28]
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	2b0f      	cmp	r3, #15
 8005a4c:	f67f ae84 	bls.w	8005758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a50:	bf00      	nop
 8005a52:	3724      	adds	r7, #36	; 0x24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	40013800 	.word	0x40013800
 8005a64:	40020000 	.word	0x40020000
 8005a68:	40020400 	.word	0x40020400
 8005a6c:	40020800 	.word	0x40020800
 8005a70:	40020c00 	.word	0x40020c00
 8005a74:	40021000 	.word	0x40021000
 8005a78:	40021400 	.word	0x40021400
 8005a7c:	40021800 	.word	0x40021800
 8005a80:	40021c00 	.word	0x40021c00
 8005a84:	40022000 	.word	0x40022000
 8005a88:	40022400 	.word	0x40022400
 8005a8c:	40013c00 	.word	0x40013c00

08005a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	807b      	strh	r3, [r7, #2]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005aa0:	787b      	ldrb	r3, [r7, #1]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aa6:	887a      	ldrh	r2, [r7, #2]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005aac:	e003      	b.n	8005ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005aae:	887b      	ldrh	r3, [r7, #2]
 8005ab0:	041a      	lsls	r2, r3, #16
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	619a      	str	r2, [r3, #24]
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e0bf      	b.n	8005c56 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fc ff7c 	bl	80029e8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2202      	movs	r2, #2
 8005af4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005b06:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6999      	ldr	r1, [r3, #24]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b1c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6899      	ldr	r1, [r3, #8]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	4b4a      	ldr	r3, [pc, #296]	; (8005c60 <HAL_LTDC_Init+0x19c>)
 8005b38:	400b      	ands	r3, r1
 8005b3a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	041b      	lsls	r3, r3, #16
 8005b42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6899      	ldr	r1, [r3, #8]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699a      	ldr	r2, [r3, #24]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68d9      	ldr	r1, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	4b3e      	ldr	r3, [pc, #248]	; (8005c60 <HAL_LTDC_Init+0x19c>)
 8005b66:	400b      	ands	r3, r1
 8005b68:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	041b      	lsls	r3, r3, #16
 8005b70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68d9      	ldr	r1, [r3, #12]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1a      	ldr	r2, [r3, #32]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6919      	ldr	r1, [r3, #16]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b33      	ldr	r3, [pc, #204]	; (8005c60 <HAL_LTDC_Init+0x19c>)
 8005b94:	400b      	ands	r3, r1
 8005b96:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	041b      	lsls	r3, r3, #16
 8005b9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6919      	ldr	r1, [r3, #16]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6959      	ldr	r1, [r3, #20]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	4b27      	ldr	r3, [pc, #156]	; (8005c60 <HAL_LTDC_Init+0x19c>)
 8005bc2:	400b      	ands	r3, r1
 8005bc4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	041b      	lsls	r3, r3, #16
 8005bcc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6959      	ldr	r1, [r3, #20]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	430a      	orrs	r2, r1
 8005be2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005bf4:	041b      	lsls	r3, r3, #16
 8005bf6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 0206 	orr.w	r2, r2, #6
 8005c32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0201 	orr.w	r2, r2, #1
 8005c42:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	f000f800 	.word	0xf000f800

08005c64 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c72:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d023      	beq.n	8005cce <HAL_LTDC_IRQHandler+0x6a>
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01e      	beq.n	8005cce <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f022 0204 	bic.w	r2, r2, #4
 8005c9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2204      	movs	r2, #4
 8005ca6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cae:	f043 0201 	orr.w	r2, r3, #1
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2204      	movs	r2, #4
 8005cbc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f86f 	bl	8005dac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d023      	beq.n	8005d20 <HAL_LTDC_IRQHandler+0xbc>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d01e      	beq.n	8005d20 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0202 	bic.w	r2, r2, #2
 8005cf0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d00:	f043 0202 	orr.w	r2, r3, #2
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2204      	movs	r2, #4
 8005d0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f846 	bl	8005dac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01b      	beq.n	8005d62 <HAL_LTDC_IRQHandler+0xfe>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d016      	beq.n	8005d62 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0201 	bic.w	r2, r2, #1
 8005d42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f82f 	bl	8005dc0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01b      	beq.n	8005da4 <HAL_LTDC_IRQHandler+0x140>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f003 0308 	and.w	r3, r3, #8
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d016      	beq.n	8005da4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0208 	bic.w	r2, r2, #8
 8005d84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2208      	movs	r2, #8
 8005d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f818 	bl	8005dd4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005de8:	b5b0      	push	{r4, r5, r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_LTDC_ConfigLayer+0x1a>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e02c      	b.n	8005e5c <HAL_LTDC_ConfigLayer+0x74>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2202      	movs	r2, #2
 8005e0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2134      	movs	r1, #52	; 0x34
 8005e18:	fb01 f303 	mul.w	r3, r1, r3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	4614      	mov	r4, r2
 8005e26:	461d      	mov	r5, r3
 8005e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e34:	682b      	ldr	r3, [r5, #0]
 8005e36:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	68b9      	ldr	r1, [r7, #8]
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f000 f87f 	bl	8005f40 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2201      	movs	r2, #1
 8005e48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3710      	adds	r7, #16
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bdb0      	pop	{r4, r5, r7, pc}

08005e64 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <HAL_LTDC_SetAlpha+0x1a>
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	e024      	b.n	8005ec8 <HAL_LTDC_SetAlpha+0x64>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2234      	movs	r2, #52	; 0x34
 8005e92:	fb02 f303 	mul.w	r3, r2, r3
 8005e96:	3338      	adds	r3, #56	; 0x38
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4413      	add	r3, r2
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6979      	ldr	r1, [r7, #20]
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f849 	bl	8005f40 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_LTDC_ProgramLineEvent+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e023      	b.n	8005f30 <HAL_LTDC_ProgramLineEvent+0x60>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f022 0201 	bic.w	r2, r2, #1
 8005f06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005f08:	4a0c      	ldr	r2, [pc, #48]	; (8005f3c <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0201 	orr.w	r2, r2, #1
 8005f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	40016800 	.word	0x40016800

08005f40 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b089      	sub	sp, #36	; 0x24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	0c1b      	lsrs	r3, r3, #16
 8005f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f5c:	4413      	add	r3, r2
 8005f5e:	041b      	lsls	r3, r3, #16
 8005f60:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	01db      	lsls	r3, r3, #7
 8005f6c:	4413      	add	r3, r2
 8005f6e:	3384      	adds	r3, #132	; 0x84
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	6812      	ldr	r2, [r2, #0]
 8005f76:	4611      	mov	r1, r2
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	01d2      	lsls	r2, r2, #7
 8005f7c:	440a      	add	r2, r1
 8005f7e:	3284      	adds	r2, #132	; 0x84
 8005f80:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005f84:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	0c1b      	lsrs	r3, r3, #16
 8005f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f96:	4413      	add	r3, r2
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	01db      	lsls	r3, r3, #7
 8005fa4:	440b      	add	r3, r1
 8005fa6:	3384      	adds	r3, #132	; 0x84
 8005fa8:	4619      	mov	r1, r3
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fbe:	4413      	add	r3, r2
 8005fc0:	041b      	lsls	r3, r3, #16
 8005fc2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	01db      	lsls	r3, r3, #7
 8005fce:	4413      	add	r3, r2
 8005fd0:	3384      	adds	r3, #132	; 0x84
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	4611      	mov	r1, r2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	01d2      	lsls	r2, r2, #7
 8005fde:	440a      	add	r2, r1
 8005fe0:	3284      	adds	r2, #132	; 0x84
 8005fe2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005fe6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ff6:	4413      	add	r3, r2
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4619      	mov	r1, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	01db      	lsls	r3, r3, #7
 8006004:	440b      	add	r3, r1
 8006006:	3384      	adds	r3, #132	; 0x84
 8006008:	4619      	mov	r1, r3
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4313      	orrs	r3, r2
 800600e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	461a      	mov	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	01db      	lsls	r3, r3, #7
 800601a:	4413      	add	r3, r2
 800601c:	3384      	adds	r3, #132	; 0x84
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	4611      	mov	r1, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	01d2      	lsls	r2, r2, #7
 800602a:	440a      	add	r2, r1
 800602c:	3284      	adds	r2, #132	; 0x84
 800602e:	f023 0307 	bic.w	r3, r3, #7
 8006032:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	01db      	lsls	r3, r3, #7
 800603e:	4413      	add	r3, r2
 8006040:	3384      	adds	r3, #132	; 0x84
 8006042:	461a      	mov	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800605a:	041b      	lsls	r3, r3, #16
 800605c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	061b      	lsls	r3, r3, #24
 8006064:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	461a      	mov	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	01db      	lsls	r3, r3, #7
 8006070:	4413      	add	r3, r2
 8006072:	3384      	adds	r3, #132	; 0x84
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	01db      	lsls	r3, r3, #7
 8006080:	4413      	add	r3, r2
 8006082:	3384      	adds	r3, #132	; 0x84
 8006084:	461a      	mov	r2, r3
 8006086:	2300      	movs	r3, #0
 8006088:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006090:	461a      	mov	r2, r3
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	431a      	orrs	r2, r3
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	431a      	orrs	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4619      	mov	r1, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	01db      	lsls	r3, r3, #7
 80060a4:	440b      	add	r3, r1
 80060a6:	3384      	adds	r3, #132	; 0x84
 80060a8:	4619      	mov	r1, r3
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	461a      	mov	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	01db      	lsls	r3, r3, #7
 80060ba:	4413      	add	r3, r2
 80060bc:	3384      	adds	r3, #132	; 0x84
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	6812      	ldr	r2, [r2, #0]
 80060c4:	4611      	mov	r1, r2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	01d2      	lsls	r2, r2, #7
 80060ca:	440a      	add	r2, r1
 80060cc:	3284      	adds	r2, #132	; 0x84
 80060ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80060d2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	01db      	lsls	r3, r3, #7
 80060de:	4413      	add	r3, r2
 80060e0:	3384      	adds	r3, #132	; 0x84
 80060e2:	461a      	mov	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	695b      	ldr	r3, [r3, #20]
 80060e8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	01db      	lsls	r3, r3, #7
 80060f4:	4413      	add	r3, r2
 80060f6:	3384      	adds	r3, #132	; 0x84
 80060f8:	69db      	ldr	r3, [r3, #28]
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	4611      	mov	r1, r2
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	01d2      	lsls	r2, r2, #7
 8006104:	440a      	add	r2, r1
 8006106:	3284      	adds	r2, #132	; 0x84
 8006108:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800610c:	f023 0307 	bic.w	r3, r3, #7
 8006110:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	68f9      	ldr	r1, [r7, #12]
 800611c:	6809      	ldr	r1, [r1, #0]
 800611e:	4608      	mov	r0, r1
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	01c9      	lsls	r1, r1, #7
 8006124:	4401      	add	r1, r0
 8006126:	3184      	adds	r1, #132	; 0x84
 8006128:	4313      	orrs	r3, r2
 800612a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	01db      	lsls	r3, r3, #7
 8006136:	4413      	add	r3, r2
 8006138:	3384      	adds	r3, #132	; 0x84
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	461a      	mov	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	01db      	lsls	r3, r3, #7
 8006146:	4413      	add	r3, r2
 8006148:	3384      	adds	r3, #132	; 0x84
 800614a:	461a      	mov	r2, r3
 800614c:	2300      	movs	r3, #0
 800614e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	01db      	lsls	r3, r3, #7
 800615a:	4413      	add	r3, r2
 800615c:	3384      	adds	r3, #132	; 0x84
 800615e:	461a      	mov	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d102      	bne.n	8006174 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800616e:	2304      	movs	r3, #4
 8006170:	61fb      	str	r3, [r7, #28]
 8006172:	e01b      	b.n	80061ac <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d102      	bne.n	8006182 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800617c:	2303      	movs	r3, #3
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	e014      	b.n	80061ac <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b04      	cmp	r3, #4
 8006188:	d00b      	beq.n	80061a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800618e:	2b02      	cmp	r3, #2
 8006190:	d007      	beq.n	80061a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006196:	2b03      	cmp	r3, #3
 8006198:	d003      	beq.n	80061a2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800619e:	2b07      	cmp	r3, #7
 80061a0:	d102      	bne.n	80061a8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80061a2:	2302      	movs	r3, #2
 80061a4:	61fb      	str	r3, [r7, #28]
 80061a6:	e001      	b.n	80061ac <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80061a8:	2301      	movs	r3, #1
 80061aa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	461a      	mov	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	01db      	lsls	r3, r3, #7
 80061b6:	4413      	add	r3, r2
 80061b8:	3384      	adds	r3, #132	; 0x84
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	4611      	mov	r1, r2
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	01d2      	lsls	r2, r2, #7
 80061c6:	440a      	add	r2, r1
 80061c8:	3284      	adds	r2, #132	; 0x84
 80061ca:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80061ce:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	041a      	lsls	r2, r3, #16
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	1acb      	subs	r3, r1, r3
 80061e6:	69f9      	ldr	r1, [r7, #28]
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	3303      	adds	r3, #3
 80061ee:	68f9      	ldr	r1, [r7, #12]
 80061f0:	6809      	ldr	r1, [r1, #0]
 80061f2:	4608      	mov	r0, r1
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	01c9      	lsls	r1, r1, #7
 80061f8:	4401      	add	r1, r0
 80061fa:	3184      	adds	r1, #132	; 0x84
 80061fc:	4313      	orrs	r3, r2
 80061fe:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	01db      	lsls	r3, r3, #7
 800620a:	4413      	add	r3, r2
 800620c:	3384      	adds	r3, #132	; 0x84
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	4611      	mov	r1, r2
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	01d2      	lsls	r2, r2, #7
 800621a:	440a      	add	r2, r1
 800621c:	3284      	adds	r2, #132	; 0x84
 800621e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006222:	f023 0307 	bic.w	r3, r3, #7
 8006226:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	01db      	lsls	r3, r3, #7
 8006232:	4413      	add	r3, r2
 8006234:	3384      	adds	r3, #132	; 0x84
 8006236:	461a      	mov	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800623c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	461a      	mov	r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	01db      	lsls	r3, r3, #7
 8006248:	4413      	add	r3, r2
 800624a:	3384      	adds	r3, #132	; 0x84
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	4611      	mov	r1, r2
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	01d2      	lsls	r2, r2, #7
 8006258:	440a      	add	r2, r1
 800625a:	3284      	adds	r2, #132	; 0x84
 800625c:	f043 0301 	orr.w	r3, r3, #1
 8006260:	6013      	str	r3, [r2, #0]
}
 8006262:	bf00      	nop
 8006264:	3724      	adds	r7, #36	; 0x24
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800627a:	2300      	movs	r3, #0
 800627c:	603b      	str	r3, [r7, #0]
 800627e:	4b20      	ldr	r3, [pc, #128]	; (8006300 <HAL_PWREx_EnableOverDrive+0x90>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	4a1f      	ldr	r2, [pc, #124]	; (8006300 <HAL_PWREx_EnableOverDrive+0x90>)
 8006284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006288:	6413      	str	r3, [r2, #64]	; 0x40
 800628a:	4b1d      	ldr	r3, [pc, #116]	; (8006300 <HAL_PWREx_EnableOverDrive+0x90>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006296:	4b1b      	ldr	r3, [pc, #108]	; (8006304 <HAL_PWREx_EnableOverDrive+0x94>)
 8006298:	2201      	movs	r2, #1
 800629a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800629c:	f002 faae 	bl	80087fc <HAL_GetTick>
 80062a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062a2:	e009      	b.n	80062b8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062a4:	f002 faaa 	bl	80087fc <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062b2:	d901      	bls.n	80062b8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e01f      	b.n	80062f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80062b8:	4b13      	ldr	r3, [pc, #76]	; (8006308 <HAL_PWREx_EnableOverDrive+0x98>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c4:	d1ee      	bne.n	80062a4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80062c6:	4b11      	ldr	r3, [pc, #68]	; (800630c <HAL_PWREx_EnableOverDrive+0x9c>)
 80062c8:	2201      	movs	r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062cc:	f002 fa96 	bl	80087fc <HAL_GetTick>
 80062d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062d2:	e009      	b.n	80062e8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80062d4:	f002 fa92 	bl	80087fc <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062e2:	d901      	bls.n	80062e8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e007      	b.n	80062f8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062e8:	4b07      	ldr	r3, [pc, #28]	; (8006308 <HAL_PWREx_EnableOverDrive+0x98>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062f4:	d1ee      	bne.n	80062d4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	40023800 	.word	0x40023800
 8006304:	420e0040 	.word	0x420e0040
 8006308:	40007000 	.word	0x40007000
 800630c:	420e0044 	.word	0x420e0044

08006310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e25b      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d075      	beq.n	800641a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800632e:	4ba3      	ldr	r3, [pc, #652]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	f003 030c 	and.w	r3, r3, #12
 8006336:	2b04      	cmp	r3, #4
 8006338:	d00c      	beq.n	8006354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800633a:	4ba0      	ldr	r3, [pc, #640]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006342:	2b08      	cmp	r3, #8
 8006344:	d112      	bne.n	800636c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006346:	4b9d      	ldr	r3, [pc, #628]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800634e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006352:	d10b      	bne.n	800636c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006354:	4b99      	ldr	r3, [pc, #612]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05b      	beq.n	8006418 <HAL_RCC_OscConfig+0x108>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d157      	bne.n	8006418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e236      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006374:	d106      	bne.n	8006384 <HAL_RCC_OscConfig+0x74>
 8006376:	4b91      	ldr	r3, [pc, #580]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a90      	ldr	r2, [pc, #576]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800637c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	e01d      	b.n	80063c0 <HAL_RCC_OscConfig+0xb0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800638c:	d10c      	bne.n	80063a8 <HAL_RCC_OscConfig+0x98>
 800638e:	4b8b      	ldr	r3, [pc, #556]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a8a      	ldr	r2, [pc, #552]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	4b88      	ldr	r3, [pc, #544]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a87      	ldr	r2, [pc, #540]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e00b      	b.n	80063c0 <HAL_RCC_OscConfig+0xb0>
 80063a8:	4b84      	ldr	r3, [pc, #528]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a83      	ldr	r2, [pc, #524]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b2:	6013      	str	r3, [r2, #0]
 80063b4:	4b81      	ldr	r3, [pc, #516]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a80      	ldr	r2, [pc, #512]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d013      	beq.n	80063f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c8:	f002 fa18 	bl	80087fc <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063d0:	f002 fa14 	bl	80087fc <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b64      	cmp	r3, #100	; 0x64
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e1fb      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063e2:	4b76      	ldr	r3, [pc, #472]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0f0      	beq.n	80063d0 <HAL_RCC_OscConfig+0xc0>
 80063ee:	e014      	b.n	800641a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f0:	f002 fa04 	bl	80087fc <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063f8:	f002 fa00 	bl	80087fc <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b64      	cmp	r3, #100	; 0x64
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e1e7      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800640a:	4b6c      	ldr	r3, [pc, #432]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0xe8>
 8006416:	e000      	b.n	800641a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0302 	and.w	r3, r3, #2
 8006422:	2b00      	cmp	r3, #0
 8006424:	d063      	beq.n	80064ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006426:	4b65      	ldr	r3, [pc, #404]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f003 030c 	and.w	r3, r3, #12
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006432:	4b62      	ldr	r3, [pc, #392]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800643a:	2b08      	cmp	r3, #8
 800643c:	d11c      	bne.n	8006478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800643e:	4b5f      	ldr	r3, [pc, #380]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d116      	bne.n	8006478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800644a:	4b5c      	ldr	r3, [pc, #368]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d005      	beq.n	8006462 <HAL_RCC_OscConfig+0x152>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d001      	beq.n	8006462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e1bb      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006462:	4b56      	ldr	r3, [pc, #344]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	4952      	ldr	r1, [pc, #328]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006472:	4313      	orrs	r3, r2
 8006474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006476:	e03a      	b.n	80064ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d020      	beq.n	80064c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006480:	4b4f      	ldr	r3, [pc, #316]	; (80065c0 <HAL_RCC_OscConfig+0x2b0>)
 8006482:	2201      	movs	r2, #1
 8006484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006486:	f002 f9b9 	bl	80087fc <HAL_GetTick>
 800648a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648c:	e008      	b.n	80064a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800648e:	f002 f9b5 	bl	80087fc <HAL_GetTick>
 8006492:	4602      	mov	r2, r0
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	2b02      	cmp	r3, #2
 800649a:	d901      	bls.n	80064a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e19c      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064a0:	4b46      	ldr	r3, [pc, #280]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0f0      	beq.n	800648e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064ac:	4b43      	ldr	r3, [pc, #268]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4940      	ldr	r1, [pc, #256]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	600b      	str	r3, [r1, #0]
 80064c0:	e015      	b.n	80064ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064c2:	4b3f      	ldr	r3, [pc, #252]	; (80065c0 <HAL_RCC_OscConfig+0x2b0>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064c8:	f002 f998 	bl	80087fc <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ce:	e008      	b.n	80064e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80064d0:	f002 f994 	bl	80087fc <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	2b02      	cmp	r3, #2
 80064dc:	d901      	bls.n	80064e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e17b      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064e2:	4b36      	ldr	r3, [pc, #216]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d1f0      	bne.n	80064d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0308 	and.w	r3, r3, #8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d030      	beq.n	800655c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d016      	beq.n	8006530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006502:	4b30      	ldr	r3, [pc, #192]	; (80065c4 <HAL_RCC_OscConfig+0x2b4>)
 8006504:	2201      	movs	r2, #1
 8006506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006508:	f002 f978 	bl	80087fc <HAL_GetTick>
 800650c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800650e:	e008      	b.n	8006522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006510:	f002 f974 	bl	80087fc <HAL_GetTick>
 8006514:	4602      	mov	r2, r0
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2b02      	cmp	r3, #2
 800651c:	d901      	bls.n	8006522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800651e:	2303      	movs	r3, #3
 8006520:	e15b      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006522:	4b26      	ldr	r3, [pc, #152]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0f0      	beq.n	8006510 <HAL_RCC_OscConfig+0x200>
 800652e:	e015      	b.n	800655c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006530:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <HAL_RCC_OscConfig+0x2b4>)
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006536:	f002 f961 	bl	80087fc <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800653c:	e008      	b.n	8006550 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800653e:	f002 f95d 	bl	80087fc <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d901      	bls.n	8006550 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e144      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006550:	4b1a      	ldr	r3, [pc, #104]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d1f0      	bne.n	800653e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 80a0 	beq.w	80066aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800656a:	2300      	movs	r3, #0
 800656c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800656e:	4b13      	ldr	r3, [pc, #76]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10f      	bne.n	800659a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800657a:	2300      	movs	r3, #0
 800657c:	60bb      	str	r3, [r7, #8]
 800657e:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	4a0e      	ldr	r2, [pc, #56]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 8006584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006588:	6413      	str	r3, [r2, #64]	; 0x40
 800658a:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <HAL_RCC_OscConfig+0x2ac>)
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006592:	60bb      	str	r3, [r7, #8]
 8006594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006596:	2301      	movs	r3, #1
 8006598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659a:	4b0b      	ldr	r3, [pc, #44]	; (80065c8 <HAL_RCC_OscConfig+0x2b8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d121      	bne.n	80065ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065a6:	4b08      	ldr	r3, [pc, #32]	; (80065c8 <HAL_RCC_OscConfig+0x2b8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a07      	ldr	r2, [pc, #28]	; (80065c8 <HAL_RCC_OscConfig+0x2b8>)
 80065ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065b2:	f002 f923 	bl	80087fc <HAL_GetTick>
 80065b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b8:	e011      	b.n	80065de <HAL_RCC_OscConfig+0x2ce>
 80065ba:	bf00      	nop
 80065bc:	40023800 	.word	0x40023800
 80065c0:	42470000 	.word	0x42470000
 80065c4:	42470e80 	.word	0x42470e80
 80065c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065cc:	f002 f916 	bl	80087fc <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e0fd      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065de:	4b81      	ldr	r3, [pc, #516]	; (80067e4 <HAL_RCC_OscConfig+0x4d4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d106      	bne.n	8006600 <HAL_RCC_OscConfig+0x2f0>
 80065f2:	4b7d      	ldr	r3, [pc, #500]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f6:	4a7c      	ldr	r2, [pc, #496]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 80065f8:	f043 0301 	orr.w	r3, r3, #1
 80065fc:	6713      	str	r3, [r2, #112]	; 0x70
 80065fe:	e01c      	b.n	800663a <HAL_RCC_OscConfig+0x32a>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2b05      	cmp	r3, #5
 8006606:	d10c      	bne.n	8006622 <HAL_RCC_OscConfig+0x312>
 8006608:	4b77      	ldr	r3, [pc, #476]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	4a76      	ldr	r2, [pc, #472]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 800660e:	f043 0304 	orr.w	r3, r3, #4
 8006612:	6713      	str	r3, [r2, #112]	; 0x70
 8006614:	4b74      	ldr	r3, [pc, #464]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	4a73      	ldr	r2, [pc, #460]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 800661a:	f043 0301 	orr.w	r3, r3, #1
 800661e:	6713      	str	r3, [r2, #112]	; 0x70
 8006620:	e00b      	b.n	800663a <HAL_RCC_OscConfig+0x32a>
 8006622:	4b71      	ldr	r3, [pc, #452]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 8006624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006626:	4a70      	ldr	r2, [pc, #448]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 8006628:	f023 0301 	bic.w	r3, r3, #1
 800662c:	6713      	str	r3, [r2, #112]	; 0x70
 800662e:	4b6e      	ldr	r3, [pc, #440]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006632:	4a6d      	ldr	r2, [pc, #436]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 8006634:	f023 0304 	bic.w	r3, r3, #4
 8006638:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d015      	beq.n	800666e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006642:	f002 f8db 	bl	80087fc <HAL_GetTick>
 8006646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006648:	e00a      	b.n	8006660 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800664a:	f002 f8d7 	bl	80087fc <HAL_GetTick>
 800664e:	4602      	mov	r2, r0
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	f241 3288 	movw	r2, #5000	; 0x1388
 8006658:	4293      	cmp	r3, r2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e0bc      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006660:	4b61      	ldr	r3, [pc, #388]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	f003 0302 	and.w	r3, r3, #2
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0ee      	beq.n	800664a <HAL_RCC_OscConfig+0x33a>
 800666c:	e014      	b.n	8006698 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800666e:	f002 f8c5 	bl	80087fc <HAL_GetTick>
 8006672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006674:	e00a      	b.n	800668c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006676:	f002 f8c1 	bl	80087fc <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	f241 3288 	movw	r2, #5000	; 0x1388
 8006684:	4293      	cmp	r3, r2
 8006686:	d901      	bls.n	800668c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e0a6      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800668c:	4b56      	ldr	r3, [pc, #344]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 800668e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006690:	f003 0302 	and.w	r3, r3, #2
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1ee      	bne.n	8006676 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006698:	7dfb      	ldrb	r3, [r7, #23]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d105      	bne.n	80066aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800669e:	4b52      	ldr	r3, [pc, #328]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	4a51      	ldr	r2, [pc, #324]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 80066a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8092 	beq.w	80067d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066b4:	4b4c      	ldr	r3, [pc, #304]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 030c 	and.w	r3, r3, #12
 80066bc:	2b08      	cmp	r3, #8
 80066be:	d05c      	beq.n	800677a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d141      	bne.n	800674c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066c8:	4b48      	ldr	r3, [pc, #288]	; (80067ec <HAL_RCC_OscConfig+0x4dc>)
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ce:	f002 f895 	bl	80087fc <HAL_GetTick>
 80066d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d4:	e008      	b.n	80066e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066d6:	f002 f891 	bl	80087fc <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e078      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e8:	4b3f      	ldr	r3, [pc, #252]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1f0      	bne.n	80066d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	019b      	lsls	r3, r3, #6
 8006704:	431a      	orrs	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670a:	085b      	lsrs	r3, r3, #1
 800670c:	3b01      	subs	r3, #1
 800670e:	041b      	lsls	r3, r3, #16
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006716:	061b      	lsls	r3, r3, #24
 8006718:	4933      	ldr	r1, [pc, #204]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 800671a:	4313      	orrs	r3, r2
 800671c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800671e:	4b33      	ldr	r3, [pc, #204]	; (80067ec <HAL_RCC_OscConfig+0x4dc>)
 8006720:	2201      	movs	r2, #1
 8006722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006724:	f002 f86a 	bl	80087fc <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800672c:	f002 f866 	bl	80087fc <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e04d      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800673e:	4b2a      	ldr	r3, [pc, #168]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0x41c>
 800674a:	e045      	b.n	80067d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800674c:	4b27      	ldr	r3, [pc, #156]	; (80067ec <HAL_RCC_OscConfig+0x4dc>)
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006752:	f002 f853 	bl	80087fc <HAL_GetTick>
 8006756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006758:	e008      	b.n	800676c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800675a:	f002 f84f 	bl	80087fc <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d901      	bls.n	800676c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e036      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800676c:	4b1e      	ldr	r3, [pc, #120]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1f0      	bne.n	800675a <HAL_RCC_OscConfig+0x44a>
 8006778:	e02e      	b.n	80067d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e029      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006786:	4b18      	ldr	r3, [pc, #96]	; (80067e8 <HAL_RCC_OscConfig+0x4d8>)
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	429a      	cmp	r2, r3
 8006798:	d11c      	bne.n	80067d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d115      	bne.n	80067d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067ae:	4013      	ands	r3, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d10d      	bne.n	80067d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d106      	bne.n	80067d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d001      	beq.n	80067d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e000      	b.n	80067da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	40007000 	.word	0x40007000
 80067e8:	40023800 	.word	0x40023800
 80067ec:	42470060 	.word	0x42470060

080067f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e0cc      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006804:	4b68      	ldr	r3, [pc, #416]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	429a      	cmp	r2, r3
 8006810:	d90c      	bls.n	800682c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006812:	4b65      	ldr	r3, [pc, #404]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	b2d2      	uxtb	r2, r2
 8006818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800681a:	4b63      	ldr	r3, [pc, #396]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	429a      	cmp	r2, r3
 8006826:	d001      	beq.n	800682c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e0b8      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d020      	beq.n	800687a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006844:	4b59      	ldr	r3, [pc, #356]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4a58      	ldr	r2, [pc, #352]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800684e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b00      	cmp	r3, #0
 800685a:	d005      	beq.n	8006868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800685c:	4b53      	ldr	r3, [pc, #332]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4a52      	ldr	r2, [pc, #328]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006868:	4b50      	ldr	r3, [pc, #320]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	494d      	ldr	r1, [pc, #308]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006876:	4313      	orrs	r3, r2
 8006878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d044      	beq.n	8006910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d107      	bne.n	800689e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800688e:	4b47      	ldr	r3, [pc, #284]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d119      	bne.n	80068ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e07f      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d003      	beq.n	80068ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068aa:	2b03      	cmp	r3, #3
 80068ac:	d107      	bne.n	80068be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068ae:	4b3f      	ldr	r3, [pc, #252]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d109      	bne.n	80068ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e06f      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068be:	4b3b      	ldr	r3, [pc, #236]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e067      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068ce:	4b37      	ldr	r3, [pc, #220]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f023 0203 	bic.w	r2, r3, #3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	4934      	ldr	r1, [pc, #208]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068e0:	f001 ff8c 	bl	80087fc <HAL_GetTick>
 80068e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e6:	e00a      	b.n	80068fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068e8:	f001 ff88 	bl	80087fc <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d901      	bls.n	80068fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068fa:	2303      	movs	r3, #3
 80068fc:	e04f      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068fe:	4b2b      	ldr	r3, [pc, #172]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f003 020c 	and.w	r2, r3, #12
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	429a      	cmp	r2, r3
 800690e:	d1eb      	bne.n	80068e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006910:	4b25      	ldr	r3, [pc, #148]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d20c      	bcs.n	8006938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800691e:	4b22      	ldr	r3, [pc, #136]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006926:	4b20      	ldr	r3, [pc, #128]	; (80069a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	d001      	beq.n	8006938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e032      	b.n	800699e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d008      	beq.n	8006956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006944:	4b19      	ldr	r3, [pc, #100]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	4916      	ldr	r1, [pc, #88]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	4313      	orrs	r3, r2
 8006954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b00      	cmp	r3, #0
 8006960:	d009      	beq.n	8006976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006962:	4b12      	ldr	r3, [pc, #72]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	490e      	ldr	r1, [pc, #56]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 8006972:	4313      	orrs	r3, r2
 8006974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006976:	f000 f821 	bl	80069bc <HAL_RCC_GetSysClockFreq>
 800697a:	4601      	mov	r1, r0
 800697c:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <HAL_RCC_ClockConfig+0x1bc>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	091b      	lsrs	r3, r3, #4
 8006982:	f003 030f 	and.w	r3, r3, #15
 8006986:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006988:	5cd3      	ldrb	r3, [r2, r3]
 800698a:	fa21 f303 	lsr.w	r3, r1, r3
 800698e:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006992:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4618      	mov	r0, r3
 8006998:	f7fd f874 	bl	8003a84 <HAL_InitTick>

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	40023c00 	.word	0x40023c00
 80069ac:	40023800 	.word	0x40023800
 80069b0:	0800f108 	.word	0x0800f108
 80069b4:	20001240 	.word	0x20001240
 80069b8:	20001244 	.word	0x20001244

080069bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069be:	b085      	sub	sp, #20
 80069c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80069c2:	2300      	movs	r3, #0
 80069c4:	607b      	str	r3, [r7, #4]
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	2300      	movs	r3, #0
 80069cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069d2:	4b63      	ldr	r3, [pc, #396]	; (8006b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f003 030c 	and.w	r3, r3, #12
 80069da:	2b04      	cmp	r3, #4
 80069dc:	d007      	beq.n	80069ee <HAL_RCC_GetSysClockFreq+0x32>
 80069de:	2b08      	cmp	r3, #8
 80069e0:	d008      	beq.n	80069f4 <HAL_RCC_GetSysClockFreq+0x38>
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	f040 80b4 	bne.w	8006b50 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069e8:	4b5e      	ldr	r3, [pc, #376]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80069ea:	60bb      	str	r3, [r7, #8]
       break;
 80069ec:	e0b3      	b.n	8006b56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ee:	4b5e      	ldr	r3, [pc, #376]	; (8006b68 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80069f0:	60bb      	str	r3, [r7, #8]
      break;
 80069f2:	e0b0      	b.n	8006b56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069f4:	4b5a      	ldr	r3, [pc, #360]	; (8006b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069fe:	4b58      	ldr	r3, [pc, #352]	; (8006b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d04a      	beq.n	8006aa0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a0a:	4b55      	ldr	r3, [pc, #340]	; (8006b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	099b      	lsrs	r3, r3, #6
 8006a10:	f04f 0400 	mov.w	r4, #0
 8006a14:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	ea03 0501 	and.w	r5, r3, r1
 8006a20:	ea04 0602 	and.w	r6, r4, r2
 8006a24:	4629      	mov	r1, r5
 8006a26:	4632      	mov	r2, r6
 8006a28:	f04f 0300 	mov.w	r3, #0
 8006a2c:	f04f 0400 	mov.w	r4, #0
 8006a30:	0154      	lsls	r4, r2, #5
 8006a32:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a36:	014b      	lsls	r3, r1, #5
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	1b49      	subs	r1, r1, r5
 8006a3e:	eb62 0206 	sbc.w	r2, r2, r6
 8006a42:	f04f 0300 	mov.w	r3, #0
 8006a46:	f04f 0400 	mov.w	r4, #0
 8006a4a:	0194      	lsls	r4, r2, #6
 8006a4c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006a50:	018b      	lsls	r3, r1, #6
 8006a52:	1a5b      	subs	r3, r3, r1
 8006a54:	eb64 0402 	sbc.w	r4, r4, r2
 8006a58:	f04f 0100 	mov.w	r1, #0
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	00e2      	lsls	r2, r4, #3
 8006a62:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006a66:	00d9      	lsls	r1, r3, #3
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4614      	mov	r4, r2
 8006a6c:	195b      	adds	r3, r3, r5
 8006a6e:	eb44 0406 	adc.w	r4, r4, r6
 8006a72:	f04f 0100 	mov.w	r1, #0
 8006a76:	f04f 0200 	mov.w	r2, #0
 8006a7a:	0262      	lsls	r2, r4, #9
 8006a7c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006a80:	0259      	lsls	r1, r3, #9
 8006a82:	460b      	mov	r3, r1
 8006a84:	4614      	mov	r4, r2
 8006a86:	4618      	mov	r0, r3
 8006a88:	4621      	mov	r1, r4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f04f 0400 	mov.w	r4, #0
 8006a90:	461a      	mov	r2, r3
 8006a92:	4623      	mov	r3, r4
 8006a94:	f7fa f908 	bl	8000ca8 <__aeabi_uldivmod>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	460c      	mov	r4, r1
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	e049      	b.n	8006b34 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aa0:	4b2f      	ldr	r3, [pc, #188]	; (8006b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	099b      	lsrs	r3, r3, #6
 8006aa6:	f04f 0400 	mov.w	r4, #0
 8006aaa:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	ea03 0501 	and.w	r5, r3, r1
 8006ab6:	ea04 0602 	and.w	r6, r4, r2
 8006aba:	4629      	mov	r1, r5
 8006abc:	4632      	mov	r2, r6
 8006abe:	f04f 0300 	mov.w	r3, #0
 8006ac2:	f04f 0400 	mov.w	r4, #0
 8006ac6:	0154      	lsls	r4, r2, #5
 8006ac8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006acc:	014b      	lsls	r3, r1, #5
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4622      	mov	r2, r4
 8006ad2:	1b49      	subs	r1, r1, r5
 8006ad4:	eb62 0206 	sbc.w	r2, r2, r6
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	f04f 0400 	mov.w	r4, #0
 8006ae0:	0194      	lsls	r4, r2, #6
 8006ae2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006ae6:	018b      	lsls	r3, r1, #6
 8006ae8:	1a5b      	subs	r3, r3, r1
 8006aea:	eb64 0402 	sbc.w	r4, r4, r2
 8006aee:	f04f 0100 	mov.w	r1, #0
 8006af2:	f04f 0200 	mov.w	r2, #0
 8006af6:	00e2      	lsls	r2, r4, #3
 8006af8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006afc:	00d9      	lsls	r1, r3, #3
 8006afe:	460b      	mov	r3, r1
 8006b00:	4614      	mov	r4, r2
 8006b02:	195b      	adds	r3, r3, r5
 8006b04:	eb44 0406 	adc.w	r4, r4, r6
 8006b08:	f04f 0100 	mov.w	r1, #0
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	02a2      	lsls	r2, r4, #10
 8006b12:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006b16:	0299      	lsls	r1, r3, #10
 8006b18:	460b      	mov	r3, r1
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	4621      	mov	r1, r4
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f04f 0400 	mov.w	r4, #0
 8006b26:	461a      	mov	r2, r3
 8006b28:	4623      	mov	r3, r4
 8006b2a:	f7fa f8bd 	bl	8000ca8 <__aeabi_uldivmod>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	460c      	mov	r4, r1
 8006b32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b34:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	0c1b      	lsrs	r3, r3, #16
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	3301      	adds	r3, #1
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b4c:	60bb      	str	r3, [r7, #8]
      break;
 8006b4e:	e002      	b.n	8006b56 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b50:	4b04      	ldr	r3, [pc, #16]	; (8006b64 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006b52:	60bb      	str	r3, [r7, #8]
      break;
 8006b54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b56:	68bb      	ldr	r3, [r7, #8]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b60:	40023800 	.word	0x40023800
 8006b64:	00f42400 	.word	0x00f42400
 8006b68:	007a1200 	.word	0x007a1200

08006b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b70:	4b03      	ldr	r3, [pc, #12]	; (8006b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b72:	681b      	ldr	r3, [r3, #0]
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	20001240 	.word	0x20001240

08006b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006b88:	f7ff fff0 	bl	8006b6c <HAL_RCC_GetHCLKFreq>
 8006b8c:	4601      	mov	r1, r0
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	0a9b      	lsrs	r3, r3, #10
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	4a03      	ldr	r2, [pc, #12]	; (8006ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b9a:	5cd3      	ldrb	r3, [r2, r3]
 8006b9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	0800f118 	.word	0x0800f118

08006bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bb0:	f7ff ffdc 	bl	8006b6c <HAL_RCC_GetHCLKFreq>
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	0b5b      	lsrs	r3, r3, #13
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	4a03      	ldr	r2, [pc, #12]	; (8006bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bc2:	5cd3      	ldrb	r3, [r2, r3]
 8006bc4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	0800f118 	.word	0x0800f118

08006bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10b      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d105      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d075      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006c08:	4bad      	ldr	r3, [pc, #692]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c0e:	f001 fdf5 	bl	80087fc <HAL_GetTick>
 8006c12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c14:	e008      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006c16:	f001 fdf1 	bl	80087fc <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e18b      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006c28:	4ba6      	ldr	r3, [pc, #664]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1f0      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d009      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	019a      	lsls	r2, r3, #6
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	071b      	lsls	r3, r3, #28
 8006c4c:	499d      	ldr	r1, [pc, #628]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01f      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c60:	4b98      	ldr	r3, [pc, #608]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c66:	0f1b      	lsrs	r3, r3, #28
 8006c68:	f003 0307 	and.w	r3, r3, #7
 8006c6c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	019a      	lsls	r2, r3, #6
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	061b      	lsls	r3, r3, #24
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	071b      	lsls	r3, r3, #28
 8006c80:	4990      	ldr	r1, [pc, #576]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c82:	4313      	orrs	r3, r2
 8006c84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006c88:	4b8e      	ldr	r3, [pc, #568]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c8e:	f023 021f 	bic.w	r2, r3, #31
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	498a      	ldr	r1, [pc, #552]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00d      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	019a      	lsls	r2, r3, #6
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	061b      	lsls	r3, r3, #24
 8006cb8:	431a      	orrs	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	071b      	lsls	r3, r3, #28
 8006cc0:	4980      	ldr	r1, [pc, #512]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006cc8:	4b7d      	ldr	r3, [pc, #500]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006cca:	2201      	movs	r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cce:	f001 fd95 	bl	80087fc <HAL_GetTick>
 8006cd2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006cd4:	e008      	b.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cd6:	f001 fd91 	bl	80087fc <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d901      	bls.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e12b      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ce8:	4b76      	ldr	r3, [pc, #472]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0f0      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d079      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006d0c:	4b6e      	ldr	r3, [pc, #440]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006d12:	f001 fd73 	bl	80087fc <HAL_GetTick>
 8006d16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d18:	e008      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006d1a:	f001 fd6f 	bl	80087fc <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d901      	bls.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e109      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006d2c:	4b65      	ldr	r3, [pc, #404]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d38:	d0ef      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0304 	and.w	r3, r3, #4
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d020      	beq.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006d46:	4b5f      	ldr	r3, [pc, #380]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4c:	0f1b      	lsrs	r3, r3, #28
 8006d4e:	f003 0307 	and.w	r3, r3, #7
 8006d52:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	019a      	lsls	r2, r3, #6
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	061b      	lsls	r3, r3, #24
 8006d60:	431a      	orrs	r2, r3
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	071b      	lsls	r3, r3, #28
 8006d66:	4957      	ldr	r1, [pc, #348]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006d6e:	4b55      	ldr	r3, [pc, #340]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	4950      	ldr	r1, [pc, #320]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d01e      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006d94:	4b4b      	ldr	r3, [pc, #300]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9a:	0e1b      	lsrs	r3, r3, #24
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	019a      	lsls	r2, r3, #6
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	061b      	lsls	r3, r3, #24
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	699b      	ldr	r3, [r3, #24]
 8006db2:	071b      	lsls	r3, r3, #28
 8006db4:	4943      	ldr	r1, [pc, #268]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006dbc:	4b41      	ldr	r3, [pc, #260]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	493e      	ldr	r1, [pc, #248]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006dd2:	4b3d      	ldr	r3, [pc, #244]	; (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dd8:	f001 fd10 	bl	80087fc <HAL_GetTick>
 8006ddc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006dde:	e008      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006de0:	f001 fd0c 	bl	80087fc <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e0a6      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dfe:	d1ef      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f003 0320 	and.w	r3, r3, #32
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f000 808d 	beq.w	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006e0e:	2300      	movs	r3, #0
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	4b2c      	ldr	r3, [pc, #176]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	4a2b      	ldr	r2, [pc, #172]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006e1e:	4b29      	ldr	r3, [pc, #164]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006e2a:	4b28      	ldr	r3, [pc, #160]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a27      	ldr	r2, [pc, #156]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006e36:	f001 fce1 	bl	80087fc <HAL_GetTick>
 8006e3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e3c:	e008      	b.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e3e:	f001 fcdd 	bl	80087fc <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d901      	bls.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e077      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006e50:	4b1e      	ldr	r3, [pc, #120]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0f0      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e5c:	4b19      	ldr	r3, [pc, #100]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d039      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d032      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006e7a:	4b12      	ldr	r3, [pc, #72]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006e84:	4b12      	ldr	r3, [pc, #72]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006e86:	2201      	movs	r2, #1
 8006e88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006e8a:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006e90:	4a0c      	ldr	r2, [pc, #48]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006e96:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d11e      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ea2:	f001 fcab 	bl	80087fc <HAL_GetTick>
 8006ea6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ea8:	e014      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006eaa:	f001 fca7 	bl	80087fc <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d90b      	bls.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	e03f      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8006ec0:	42470068 	.word	0x42470068
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	42470070 	.word	0x42470070
 8006ecc:	40007000 	.word	0x40007000
 8006ed0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed4:	4b1c      	ldr	r3, [pc, #112]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d0e4      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eec:	d10d      	bne.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8006eee:	4b16      	ldr	r3, [pc, #88]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f02:	4911      	ldr	r1, [pc, #68]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	608b      	str	r3, [r1, #8]
 8006f08:	e005      	b.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006f0a:	4b0f      	ldr	r3, [pc, #60]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	4a0e      	ldr	r2, [pc, #56]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f10:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006f14:	6093      	str	r3, [r2, #8]
 8006f16:	4b0c      	ldr	r3, [pc, #48]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f22:	4909      	ldr	r1, [pc, #36]	; (8006f48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d004      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006f3a:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006f3c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40023800 	.word	0x40023800
 8006f4c:	424711e0 	.word	0x424711e0

08006f50 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e025      	b.n	8006fb0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d106      	bne.n	8006f7e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7fa fe89 	bl	8001c90 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2202      	movs	r2, #2
 8006f82:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	4619      	mov	r1, r3
 8006f90:	4610      	mov	r0, r2
 8006f92:	f001 fa65 	bl	8008460 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	f001 fad0 	bl	8008546 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d101      	bne.n	8006fd4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e018      	b.n	8007006 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f001 fb2d 	bl	8008644 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d104      	bne.n	8006ffc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2205      	movs	r2, #5
 8006ff6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006ffa:	e003      	b.n	8007004 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b082      	sub	sp, #8
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800701e:	b2db      	uxtb	r3, r3
 8007020:	2b02      	cmp	r3, #2
 8007022:	d101      	bne.n	8007028 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007024:	2302      	movs	r3, #2
 8007026:	e00e      	b.n	8007046 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	4618      	mov	r0, r3
 8007038:	f001 fb40 	bl	80086bc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d101      	bne.n	8007060 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e056      	b.n	800710e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7fc fa00 	bl	8003480 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2202      	movs	r2, #2
 8007084:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007096:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	431a      	orrs	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	431a      	orrs	r2, r3
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	431a      	orrs	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	431a      	orrs	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070bc:	431a      	orrs	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	69db      	ldr	r3, [r3, #28]
 80070c2:	431a      	orrs	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	ea42 0103 	orr.w	r1, r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	f003 0104 	and.w	r1, r3, #4
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	69da      	ldr	r2, [r3, #28]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007116:	b580      	push	{r7, lr}
 8007118:	b082      	sub	sp, #8
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e01d      	b.n	8007164 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d106      	bne.n	8007142 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7fc fb07 	bl	8003750 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2202      	movs	r2, #2
 8007146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	3304      	adds	r3, #4
 8007152:	4619      	mov	r1, r3
 8007154:	4610      	mov	r0, r2
 8007156:	f000 f967 	bl	8007428 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68da      	ldr	r2, [r3, #12]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f042 0201 	orr.w	r2, r2, #1
 8007182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f003 0307 	and.w	r3, r3, #7
 800718e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b06      	cmp	r3, #6
 8007194:	d007      	beq.n	80071a6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f042 0201 	orr.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3714      	adds	r7, #20
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d122      	bne.n	8007210 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0302 	and.w	r3, r3, #2
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d11b      	bne.n	8007210 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0202 	mvn.w	r2, #2
 80071e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2201      	movs	r2, #1
 80071e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f8f8 	bl	80073ec <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f8ea 	bl	80073d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f8fb 	bl	8007400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	2b04      	cmp	r3, #4
 800721c:	d122      	bne.n	8007264 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b04      	cmp	r3, #4
 800722a:	d11b      	bne.n	8007264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0204 	mvn.w	r2, #4
 8007234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2202      	movs	r2, #2
 800723a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f8ce 	bl	80073ec <HAL_TIM_IC_CaptureCallback>
 8007250:	e005      	b.n	800725e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f8c0 	bl	80073d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f8d1 	bl	8007400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b08      	cmp	r3, #8
 8007270:	d122      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0308 	and.w	r3, r3, #8
 800727c:	2b08      	cmp	r3, #8
 800727e:	d11b      	bne.n	80072b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0208 	mvn.w	r2, #8
 8007288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2204      	movs	r2, #4
 800728e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f8a4 	bl	80073ec <HAL_TIM_IC_CaptureCallback>
 80072a4:	e005      	b.n	80072b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f896 	bl	80073d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f8a7 	bl	8007400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	f003 0310 	and.w	r3, r3, #16
 80072c2:	2b10      	cmp	r3, #16
 80072c4:	d122      	bne.n	800730c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b10      	cmp	r3, #16
 80072d2:	d11b      	bne.n	800730c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f06f 0210 	mvn.w	r2, #16
 80072dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2208      	movs	r2, #8
 80072e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f87a 	bl	80073ec <HAL_TIM_IC_CaptureCallback>
 80072f8:	e005      	b.n	8007306 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f86c 	bl	80073d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f87d 	bl	8007400 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b01      	cmp	r3, #1
 8007318:	d10e      	bne.n	8007338 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b01      	cmp	r3, #1
 8007326:	d107      	bne.n	8007338 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f06f 0201 	mvn.w	r2, #1
 8007330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f846 	bl	80073c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007342:	2b80      	cmp	r3, #128	; 0x80
 8007344:	d10e      	bne.n	8007364 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007350:	2b80      	cmp	r3, #128	; 0x80
 8007352:	d107      	bne.n	8007364 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800735c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f988 	bl	8007674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d10e      	bne.n	8007390 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	d107      	bne.n	8007390 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f842 	bl	8007414 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b20      	cmp	r3, #32
 800739c:	d10e      	bne.n	80073bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	f003 0320 	and.w	r3, r3, #32
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	d107      	bne.n	80073bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0220 	mvn.w	r2, #32
 80073b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f952 	bl	8007660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073bc:	bf00      	nop
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a40      	ldr	r2, [pc, #256]	; (800753c <TIM_Base_SetConfig+0x114>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d013      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007446:	d00f      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a3d      	ldr	r2, [pc, #244]	; (8007540 <TIM_Base_SetConfig+0x118>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d00b      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a3c      	ldr	r2, [pc, #240]	; (8007544 <TIM_Base_SetConfig+0x11c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d007      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a3b      	ldr	r2, [pc, #236]	; (8007548 <TIM_Base_SetConfig+0x120>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d003      	beq.n	8007468 <TIM_Base_SetConfig+0x40>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a3a      	ldr	r2, [pc, #232]	; (800754c <TIM_Base_SetConfig+0x124>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d108      	bne.n	800747a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a2f      	ldr	r2, [pc, #188]	; (800753c <TIM_Base_SetConfig+0x114>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d02b      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007488:	d027      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a2c      	ldr	r2, [pc, #176]	; (8007540 <TIM_Base_SetConfig+0x118>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d023      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a2b      	ldr	r2, [pc, #172]	; (8007544 <TIM_Base_SetConfig+0x11c>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d01f      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a2a      	ldr	r2, [pc, #168]	; (8007548 <TIM_Base_SetConfig+0x120>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d01b      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a29      	ldr	r2, [pc, #164]	; (800754c <TIM_Base_SetConfig+0x124>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d017      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a28      	ldr	r2, [pc, #160]	; (8007550 <TIM_Base_SetConfig+0x128>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d013      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a27      	ldr	r2, [pc, #156]	; (8007554 <TIM_Base_SetConfig+0x12c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00f      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a26      	ldr	r2, [pc, #152]	; (8007558 <TIM_Base_SetConfig+0x130>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d00b      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a25      	ldr	r2, [pc, #148]	; (800755c <TIM_Base_SetConfig+0x134>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d007      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a24      	ldr	r2, [pc, #144]	; (8007560 <TIM_Base_SetConfig+0x138>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d003      	beq.n	80074da <TIM_Base_SetConfig+0xb2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a23      	ldr	r2, [pc, #140]	; (8007564 <TIM_Base_SetConfig+0x13c>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d108      	bne.n	80074ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a0a      	ldr	r2, [pc, #40]	; (800753c <TIM_Base_SetConfig+0x114>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d003      	beq.n	8007520 <TIM_Base_SetConfig+0xf8>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a0c      	ldr	r2, [pc, #48]	; (800754c <TIM_Base_SetConfig+0x124>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d103      	bne.n	8007528 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	615a      	str	r2, [r3, #20]
}
 800752e:	bf00      	nop
 8007530:	3714      	adds	r7, #20
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	40010000 	.word	0x40010000
 8007540:	40000400 	.word	0x40000400
 8007544:	40000800 	.word	0x40000800
 8007548:	40000c00 	.word	0x40000c00
 800754c:	40010400 	.word	0x40010400
 8007550:	40014000 	.word	0x40014000
 8007554:	40014400 	.word	0x40014400
 8007558:	40014800 	.word	0x40014800
 800755c:	40001800 	.word	0x40001800
 8007560:	40001c00 	.word	0x40001c00
 8007564:	40002000 	.word	0x40002000

08007568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800757c:	2302      	movs	r3, #2
 800757e:	e05a      	b.n	8007636 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2202      	movs	r2, #2
 800758c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a21      	ldr	r2, [pc, #132]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d022      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075cc:	d01d      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a1d      	ldr	r2, [pc, #116]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d018      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a1b      	ldr	r2, [pc, #108]	; (800764c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d013      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a1a      	ldr	r2, [pc, #104]	; (8007650 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00e      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a18      	ldr	r2, [pc, #96]	; (8007654 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d009      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a17      	ldr	r2, [pc, #92]	; (8007658 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d004      	beq.n	800760a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a15      	ldr	r2, [pc, #84]	; (800765c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d10c      	bne.n	8007624 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007610:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	4313      	orrs	r3, r2
 800761a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40010000 	.word	0x40010000
 8007648:	40000400 	.word	0x40000400
 800764c:	40000800 	.word	0x40000800
 8007650:	40000c00 	.word	0x40000c00
 8007654:	40010400 	.word	0x40010400
 8007658:	40014000 	.word	0x40014000
 800765c:	40001800 	.word	0x40001800

08007660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007668:	bf00      	nop
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800767c:	bf00      	nop
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d101      	bne.n	800769a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e03f      	b.n	800771a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d106      	bne.n	80076b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7fc f8aa 	bl	8003808 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2224      	movs	r2, #36	; 0x24
 80076b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80076ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fb4b 	bl	8007d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691a      	ldr	r2, [r3, #16]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	695a      	ldr	r2, [r3, #20]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2220      	movs	r2, #32
 800770c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b088      	sub	sp, #32
 8007726:	af02      	add	r7, sp, #8
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	603b      	str	r3, [r7, #0]
 800772e:	4613      	mov	r3, r2
 8007730:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b20      	cmp	r3, #32
 8007740:	f040 8083 	bne.w	800784a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <HAL_UART_Transmit+0x2e>
 800774a:	88fb      	ldrh	r3, [r7, #6]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e07b      	b.n	800784c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800775a:	2b01      	cmp	r3, #1
 800775c:	d101      	bne.n	8007762 <HAL_UART_Transmit+0x40>
 800775e:	2302      	movs	r3, #2
 8007760:	e074      	b.n	800784c <HAL_UART_Transmit+0x12a>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2221      	movs	r2, #33	; 0x21
 8007774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007778:	f001 f840 	bl	80087fc <HAL_GetTick>
 800777c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	88fa      	ldrh	r2, [r7, #6]
 8007782:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	88fa      	ldrh	r2, [r7, #6]
 8007788:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007792:	e042      	b.n	800781a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077aa:	d122      	bne.n	80077f2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	9300      	str	r3, [sp, #0]
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2200      	movs	r2, #0
 80077b4:	2180      	movs	r1, #128	; 0x80
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 f96a 	bl	8007a90 <UART_WaitOnFlagUntilTimeout>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d001      	beq.n	80077c6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e042      	b.n	800784c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	881b      	ldrh	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d103      	bne.n	80077ea <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	3302      	adds	r3, #2
 80077e6:	60bb      	str	r3, [r7, #8]
 80077e8:	e017      	b.n	800781a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	3301      	adds	r3, #1
 80077ee:	60bb      	str	r3, [r7, #8]
 80077f0:	e013      	b.n	800781a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2200      	movs	r2, #0
 80077fa:	2180      	movs	r1, #128	; 0x80
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f947 	bl	8007a90 <UART_WaitOnFlagUntilTimeout>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e01f      	b.n	800784c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	60ba      	str	r2, [r7, #8]
 8007812:	781a      	ldrb	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800781e:	b29b      	uxth	r3, r3
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1b7      	bne.n	8007794 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2200      	movs	r2, #0
 800782c:	2140      	movs	r1, #64	; 0x40
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f000 f92e 	bl	8007a90 <UART_WaitOnFlagUntilTimeout>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e006      	b.n	800784c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2220      	movs	r2, #32
 8007842:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	e000      	b.n	800784c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800784a:	2302      	movs	r3, #2
  }
}
 800784c:	4618      	mov	r0, r3
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b088      	sub	sp, #32
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007874:	2300      	movs	r3, #0
 8007876:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f003 030f 	and.w	r3, r3, #15
 8007882:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10d      	bne.n	80078a6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b00      	cmp	r3, #0
 8007892:	d008      	beq.n	80078a6 <HAL_UART_IRQHandler+0x52>
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f9e0 	bl	8007c64 <UART_Receive_IT>
      return;
 80078a4:	e0d1      	b.n	8007a4a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 80b0 	beq.w	8007a0e <HAL_UART_IRQHandler+0x1ba>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d105      	bne.n	80078c4 <HAL_UART_IRQHandler+0x70>
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f000 80a5 	beq.w	8007a0e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80078c4:	69fb      	ldr	r3, [r7, #28]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00a      	beq.n	80078e4 <HAL_UART_IRQHandler+0x90>
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078dc:	f043 0201 	orr.w	r2, r3, #1
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	f003 0304 	and.w	r3, r3, #4
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00a      	beq.n	8007904 <HAL_UART_IRQHandler+0xb0>
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d005      	beq.n	8007904 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fc:	f043 0202 	orr.w	r2, r3, #2
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00a      	beq.n	8007924 <HAL_UART_IRQHandler+0xd0>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791c:	f043 0204 	orr.w	r2, r3, #4
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00f      	beq.n	800794e <HAL_UART_IRQHandler+0xfa>
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	f003 0320 	and.w	r3, r3, #32
 8007934:	2b00      	cmp	r3, #0
 8007936:	d104      	bne.n	8007942 <HAL_UART_IRQHandler+0xee>
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f003 0301 	and.w	r3, r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	d005      	beq.n	800794e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007946:	f043 0208 	orr.w	r2, r3, #8
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d078      	beq.n	8007a48 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <HAL_UART_IRQHandler+0x11c>
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f97a 	bl	8007c64 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	bf0c      	ite	eq
 800797e:	2301      	moveq	r3, #1
 8007980:	2300      	movne	r3, #0
 8007982:	b2db      	uxtb	r3, r3
 8007984:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798a:	f003 0308 	and.w	r3, r3, #8
 800798e:	2b00      	cmp	r3, #0
 8007990:	d102      	bne.n	8007998 <HAL_UART_IRQHandler+0x144>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d031      	beq.n	80079fc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f000 f8c3 	bl	8007b24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a8:	2b40      	cmp	r3, #64	; 0x40
 80079aa:	d123      	bne.n	80079f4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	695a      	ldr	r2, [r3, #20]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ba:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d013      	beq.n	80079ec <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c8:	4a21      	ldr	r2, [pc, #132]	; (8007a50 <HAL_UART_IRQHandler+0x1fc>)
 80079ca:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fd f99d 	bl	8004d10 <HAL_DMA_Abort_IT>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d016      	beq.n	8007a0a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80079e6:	4610      	mov	r0, r2
 80079e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ea:	e00e      	b.n	8007a0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f845 	bl	8007a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079f2:	e00a      	b.n	8007a0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 f841 	bl	8007a7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079fa:	e006      	b.n	8007a0a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f83d 	bl	8007a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007a08:	e01e      	b.n	8007a48 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a0a:	bf00      	nop
    return;
 8007a0c:	e01c      	b.n	8007a48 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <HAL_UART_IRQHandler+0x1d6>
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f8b0 	bl	8007b88 <UART_Transmit_IT>
    return;
 8007a28:	e00f      	b.n	8007a4a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00a      	beq.n	8007a4a <HAL_UART_IRQHandler+0x1f6>
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d005      	beq.n	8007a4a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f8f8 	bl	8007c34 <UART_EndTransmit_IT>
    return;
 8007a44:	bf00      	nop
 8007a46:	e000      	b.n	8007a4a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007a48:	bf00      	nop
  }
}
 8007a4a:	3720      	adds	r7, #32
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	08007b61 	.word	0x08007b61

08007a54 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a70:	bf00      	nop
 8007a72:	370c      	adds	r7, #12
 8007a74:	46bd      	mov	sp, r7
 8007a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7a:	4770      	bx	lr

08007a7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa0:	e02c      	b.n	8007afc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aa8:	d028      	beq.n	8007afc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d007      	beq.n	8007ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ab0:	f000 fea4 	bl	80087fc <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d21d      	bcs.n	8007afc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ace:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	695a      	ldr	r2, [r3, #20]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f022 0201 	bic.w	r2, r2, #1
 8007ade:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2220      	movs	r2, #32
 8007aec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e00f      	b.n	8007b1c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	4013      	ands	r3, r2
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	bf0c      	ite	eq
 8007b0c:	2301      	moveq	r3, #1
 8007b0e:	2300      	movne	r3, #0
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	461a      	mov	r2, r3
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d0c3      	beq.n	8007aa2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007b3a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695a      	ldr	r2, [r3, #20]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 0201 	bic.w	r2, r2, #1
 8007b4a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2200      	movs	r2, #0
 8007b72:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f7ff ff7e 	bl	8007a7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b80:	bf00      	nop
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b21      	cmp	r3, #33	; 0x21
 8007b9a:	d144      	bne.n	8007c26 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ba4:	d11a      	bne.n	8007bdc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bba:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d105      	bne.n	8007bd0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a1b      	ldr	r3, [r3, #32]
 8007bc8:	1c9a      	adds	r2, r3, #2
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	621a      	str	r2, [r3, #32]
 8007bce:	e00e      	b.n	8007bee <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	621a      	str	r2, [r3, #32]
 8007bda:	e008      	b.n	8007bee <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a1b      	ldr	r3, [r3, #32]
 8007be0:	1c59      	adds	r1, r3, #1
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	6211      	str	r1, [r2, #32]
 8007be6:	781a      	ldrb	r2, [r3, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d10f      	bne.n	8007c22 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68da      	ldr	r2, [r3, #12]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	e000      	b.n	8007c28 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007c26:	2302      	movs	r3, #2
  }
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3714      	adds	r7, #20
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68da      	ldr	r2, [r3, #12]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c4a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff fefd 	bl	8007a54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b22      	cmp	r3, #34	; 0x22
 8007c76:	d171      	bne.n	8007d5c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c80:	d123      	bne.n	8007cca <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c86:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10e      	bne.n	8007cae <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca6:	1c9a      	adds	r2, r3, #2
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	629a      	str	r2, [r3, #40]	; 0x28
 8007cac:	e029      	b.n	8007d02 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8007cc8:	e01b      	b.n	8007d02 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	6858      	ldr	r0, [r3, #4]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	1c59      	adds	r1, r3, #1
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	6291      	str	r1, [r2, #40]	; 0x28
 8007ce2:	b2c2      	uxtb	r2, r0
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	e00c      	b.n	8007d02 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf4:	1c58      	adds	r0, r3, #1
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	6288      	str	r0, [r1, #40]	; 0x28
 8007cfa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007cfe:	b2d2      	uxtb	r2, r2
 8007d00:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	3b01      	subs	r3, #1
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d120      	bne.n	8007d58 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68da      	ldr	r2, [r3, #12]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f022 0220 	bic.w	r2, r2, #32
 8007d24:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68da      	ldr	r2, [r3, #12]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d34:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	695a      	ldr	r2, [r3, #20]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0201 	bic.w	r2, r2, #1
 8007d44:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7ff fe8a 	bl	8007a68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	e002      	b.n	8007d5e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e000      	b.n	8007d5e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007d5c:	2302      	movs	r3, #2
  }
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
	...

08007d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	b085      	sub	sp, #20
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007daa:	f023 030c 	bic.w	r3, r3, #12
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6812      	ldr	r2, [r2, #0]
 8007db2:	68f9      	ldr	r1, [r7, #12]
 8007db4:	430b      	orrs	r3, r1
 8007db6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699a      	ldr	r2, [r3, #24]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dd6:	f040 818b 	bne.w	80080f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4ac1      	ldr	r2, [pc, #772]	; (80080e4 <UART_SetConfig+0x37c>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d005      	beq.n	8007df0 <UART_SetConfig+0x88>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4abf      	ldr	r2, [pc, #764]	; (80080e8 <UART_SetConfig+0x380>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	f040 80bd 	bne.w	8007f6a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007df0:	f7fe fedc 	bl	8006bac <HAL_RCC_GetPCLK2Freq>
 8007df4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	461d      	mov	r5, r3
 8007dfa:	f04f 0600 	mov.w	r6, #0
 8007dfe:	46a8      	mov	r8, r5
 8007e00:	46b1      	mov	r9, r6
 8007e02:	eb18 0308 	adds.w	r3, r8, r8
 8007e06:	eb49 0409 	adc.w	r4, r9, r9
 8007e0a:	4698      	mov	r8, r3
 8007e0c:	46a1      	mov	r9, r4
 8007e0e:	eb18 0805 	adds.w	r8, r8, r5
 8007e12:	eb49 0906 	adc.w	r9, r9, r6
 8007e16:	f04f 0100 	mov.w	r1, #0
 8007e1a:	f04f 0200 	mov.w	r2, #0
 8007e1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007e22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007e26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007e2a:	4688      	mov	r8, r1
 8007e2c:	4691      	mov	r9, r2
 8007e2e:	eb18 0005 	adds.w	r0, r8, r5
 8007e32:	eb49 0106 	adc.w	r1, r9, r6
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	461d      	mov	r5, r3
 8007e3c:	f04f 0600 	mov.w	r6, #0
 8007e40:	196b      	adds	r3, r5, r5
 8007e42:	eb46 0406 	adc.w	r4, r6, r6
 8007e46:	461a      	mov	r2, r3
 8007e48:	4623      	mov	r3, r4
 8007e4a:	f7f8 ff2d 	bl	8000ca8 <__aeabi_uldivmod>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	461a      	mov	r2, r3
 8007e54:	4ba5      	ldr	r3, [pc, #660]	; (80080ec <UART_SetConfig+0x384>)
 8007e56:	fba3 2302 	umull	r2, r3, r3, r2
 8007e5a:	095b      	lsrs	r3, r3, #5
 8007e5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	461d      	mov	r5, r3
 8007e64:	f04f 0600 	mov.w	r6, #0
 8007e68:	46a9      	mov	r9, r5
 8007e6a:	46b2      	mov	sl, r6
 8007e6c:	eb19 0309 	adds.w	r3, r9, r9
 8007e70:	eb4a 040a 	adc.w	r4, sl, sl
 8007e74:	4699      	mov	r9, r3
 8007e76:	46a2      	mov	sl, r4
 8007e78:	eb19 0905 	adds.w	r9, r9, r5
 8007e7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e80:	f04f 0100 	mov.w	r1, #0
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e94:	4689      	mov	r9, r1
 8007e96:	4692      	mov	sl, r2
 8007e98:	eb19 0005 	adds.w	r0, r9, r5
 8007e9c:	eb4a 0106 	adc.w	r1, sl, r6
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	461d      	mov	r5, r3
 8007ea6:	f04f 0600 	mov.w	r6, #0
 8007eaa:	196b      	adds	r3, r5, r5
 8007eac:	eb46 0406 	adc.w	r4, r6, r6
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4623      	mov	r3, r4
 8007eb4:	f7f8 fef8 	bl	8000ca8 <__aeabi_uldivmod>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	460c      	mov	r4, r1
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4b8b      	ldr	r3, [pc, #556]	; (80080ec <UART_SetConfig+0x384>)
 8007ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ec4:	095b      	lsrs	r3, r3, #5
 8007ec6:	2164      	movs	r1, #100	; 0x64
 8007ec8:	fb01 f303 	mul.w	r3, r1, r3
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	3332      	adds	r3, #50	; 0x32
 8007ed2:	4a86      	ldr	r2, [pc, #536]	; (80080ec <UART_SetConfig+0x384>)
 8007ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed8:	095b      	lsrs	r3, r3, #5
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ee0:	4498      	add	r8, r3
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	461d      	mov	r5, r3
 8007ee6:	f04f 0600 	mov.w	r6, #0
 8007eea:	46a9      	mov	r9, r5
 8007eec:	46b2      	mov	sl, r6
 8007eee:	eb19 0309 	adds.w	r3, r9, r9
 8007ef2:	eb4a 040a 	adc.w	r4, sl, sl
 8007ef6:	4699      	mov	r9, r3
 8007ef8:	46a2      	mov	sl, r4
 8007efa:	eb19 0905 	adds.w	r9, r9, r5
 8007efe:	eb4a 0a06 	adc.w	sl, sl, r6
 8007f02:	f04f 0100 	mov.w	r1, #0
 8007f06:	f04f 0200 	mov.w	r2, #0
 8007f0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f16:	4689      	mov	r9, r1
 8007f18:	4692      	mov	sl, r2
 8007f1a:	eb19 0005 	adds.w	r0, r9, r5
 8007f1e:	eb4a 0106 	adc.w	r1, sl, r6
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	461d      	mov	r5, r3
 8007f28:	f04f 0600 	mov.w	r6, #0
 8007f2c:	196b      	adds	r3, r5, r5
 8007f2e:	eb46 0406 	adc.w	r4, r6, r6
 8007f32:	461a      	mov	r2, r3
 8007f34:	4623      	mov	r3, r4
 8007f36:	f7f8 feb7 	bl	8000ca8 <__aeabi_uldivmod>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	460c      	mov	r4, r1
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4b6a      	ldr	r3, [pc, #424]	; (80080ec <UART_SetConfig+0x384>)
 8007f42:	fba3 1302 	umull	r1, r3, r3, r2
 8007f46:	095b      	lsrs	r3, r3, #5
 8007f48:	2164      	movs	r1, #100	; 0x64
 8007f4a:	fb01 f303 	mul.w	r3, r1, r3
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	00db      	lsls	r3, r3, #3
 8007f52:	3332      	adds	r3, #50	; 0x32
 8007f54:	4a65      	ldr	r2, [pc, #404]	; (80080ec <UART_SetConfig+0x384>)
 8007f56:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	f003 0207 	and.w	r2, r3, #7
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4442      	add	r2, r8
 8007f66:	609a      	str	r2, [r3, #8]
 8007f68:	e26f      	b.n	800844a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f6a:	f7fe fe0b 	bl	8006b84 <HAL_RCC_GetPCLK1Freq>
 8007f6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	461d      	mov	r5, r3
 8007f74:	f04f 0600 	mov.w	r6, #0
 8007f78:	46a8      	mov	r8, r5
 8007f7a:	46b1      	mov	r9, r6
 8007f7c:	eb18 0308 	adds.w	r3, r8, r8
 8007f80:	eb49 0409 	adc.w	r4, r9, r9
 8007f84:	4698      	mov	r8, r3
 8007f86:	46a1      	mov	r9, r4
 8007f88:	eb18 0805 	adds.w	r8, r8, r5
 8007f8c:	eb49 0906 	adc.w	r9, r9, r6
 8007f90:	f04f 0100 	mov.w	r1, #0
 8007f94:	f04f 0200 	mov.w	r2, #0
 8007f98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007fa0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007fa4:	4688      	mov	r8, r1
 8007fa6:	4691      	mov	r9, r2
 8007fa8:	eb18 0005 	adds.w	r0, r8, r5
 8007fac:	eb49 0106 	adc.w	r1, r9, r6
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	461d      	mov	r5, r3
 8007fb6:	f04f 0600 	mov.w	r6, #0
 8007fba:	196b      	adds	r3, r5, r5
 8007fbc:	eb46 0406 	adc.w	r4, r6, r6
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4623      	mov	r3, r4
 8007fc4:	f7f8 fe70 	bl	8000ca8 <__aeabi_uldivmod>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4b47      	ldr	r3, [pc, #284]	; (80080ec <UART_SetConfig+0x384>)
 8007fd0:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd4:	095b      	lsrs	r3, r3, #5
 8007fd6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	461d      	mov	r5, r3
 8007fde:	f04f 0600 	mov.w	r6, #0
 8007fe2:	46a9      	mov	r9, r5
 8007fe4:	46b2      	mov	sl, r6
 8007fe6:	eb19 0309 	adds.w	r3, r9, r9
 8007fea:	eb4a 040a 	adc.w	r4, sl, sl
 8007fee:	4699      	mov	r9, r3
 8007ff0:	46a2      	mov	sl, r4
 8007ff2:	eb19 0905 	adds.w	r9, r9, r5
 8007ff6:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ffa:	f04f 0100 	mov.w	r1, #0
 8007ffe:	f04f 0200 	mov.w	r2, #0
 8008002:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008006:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800800a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800800e:	4689      	mov	r9, r1
 8008010:	4692      	mov	sl, r2
 8008012:	eb19 0005 	adds.w	r0, r9, r5
 8008016:	eb4a 0106 	adc.w	r1, sl, r6
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	461d      	mov	r5, r3
 8008020:	f04f 0600 	mov.w	r6, #0
 8008024:	196b      	adds	r3, r5, r5
 8008026:	eb46 0406 	adc.w	r4, r6, r6
 800802a:	461a      	mov	r2, r3
 800802c:	4623      	mov	r3, r4
 800802e:	f7f8 fe3b 	bl	8000ca8 <__aeabi_uldivmod>
 8008032:	4603      	mov	r3, r0
 8008034:	460c      	mov	r4, r1
 8008036:	461a      	mov	r2, r3
 8008038:	4b2c      	ldr	r3, [pc, #176]	; (80080ec <UART_SetConfig+0x384>)
 800803a:	fba3 1302 	umull	r1, r3, r3, r2
 800803e:	095b      	lsrs	r3, r3, #5
 8008040:	2164      	movs	r1, #100	; 0x64
 8008042:	fb01 f303 	mul.w	r3, r1, r3
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	3332      	adds	r3, #50	; 0x32
 800804c:	4a27      	ldr	r2, [pc, #156]	; (80080ec <UART_SetConfig+0x384>)
 800804e:	fba2 2303 	umull	r2, r3, r2, r3
 8008052:	095b      	lsrs	r3, r3, #5
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800805a:	4498      	add	r8, r3
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	461d      	mov	r5, r3
 8008060:	f04f 0600 	mov.w	r6, #0
 8008064:	46a9      	mov	r9, r5
 8008066:	46b2      	mov	sl, r6
 8008068:	eb19 0309 	adds.w	r3, r9, r9
 800806c:	eb4a 040a 	adc.w	r4, sl, sl
 8008070:	4699      	mov	r9, r3
 8008072:	46a2      	mov	sl, r4
 8008074:	eb19 0905 	adds.w	r9, r9, r5
 8008078:	eb4a 0a06 	adc.w	sl, sl, r6
 800807c:	f04f 0100 	mov.w	r1, #0
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008088:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800808c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008090:	4689      	mov	r9, r1
 8008092:	4692      	mov	sl, r2
 8008094:	eb19 0005 	adds.w	r0, r9, r5
 8008098:	eb4a 0106 	adc.w	r1, sl, r6
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	461d      	mov	r5, r3
 80080a2:	f04f 0600 	mov.w	r6, #0
 80080a6:	196b      	adds	r3, r5, r5
 80080a8:	eb46 0406 	adc.w	r4, r6, r6
 80080ac:	461a      	mov	r2, r3
 80080ae:	4623      	mov	r3, r4
 80080b0:	f7f8 fdfa 	bl	8000ca8 <__aeabi_uldivmod>
 80080b4:	4603      	mov	r3, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	461a      	mov	r2, r3
 80080ba:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <UART_SetConfig+0x384>)
 80080bc:	fba3 1302 	umull	r1, r3, r3, r2
 80080c0:	095b      	lsrs	r3, r3, #5
 80080c2:	2164      	movs	r1, #100	; 0x64
 80080c4:	fb01 f303 	mul.w	r3, r1, r3
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	00db      	lsls	r3, r3, #3
 80080cc:	3332      	adds	r3, #50	; 0x32
 80080ce:	4a07      	ldr	r2, [pc, #28]	; (80080ec <UART_SetConfig+0x384>)
 80080d0:	fba2 2303 	umull	r2, r3, r2, r3
 80080d4:	095b      	lsrs	r3, r3, #5
 80080d6:	f003 0207 	and.w	r2, r3, #7
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4442      	add	r2, r8
 80080e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80080e2:	e1b2      	b.n	800844a <UART_SetConfig+0x6e2>
 80080e4:	40011000 	.word	0x40011000
 80080e8:	40011400 	.word	0x40011400
 80080ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4ad7      	ldr	r2, [pc, #860]	; (8008454 <UART_SetConfig+0x6ec>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d005      	beq.n	8008106 <UART_SetConfig+0x39e>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4ad6      	ldr	r2, [pc, #856]	; (8008458 <UART_SetConfig+0x6f0>)
 8008100:	4293      	cmp	r3, r2
 8008102:	f040 80d1 	bne.w	80082a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008106:	f7fe fd51 	bl	8006bac <HAL_RCC_GetPCLK2Freq>
 800810a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	469a      	mov	sl, r3
 8008110:	f04f 0b00 	mov.w	fp, #0
 8008114:	46d0      	mov	r8, sl
 8008116:	46d9      	mov	r9, fp
 8008118:	eb18 0308 	adds.w	r3, r8, r8
 800811c:	eb49 0409 	adc.w	r4, r9, r9
 8008120:	4698      	mov	r8, r3
 8008122:	46a1      	mov	r9, r4
 8008124:	eb18 080a 	adds.w	r8, r8, sl
 8008128:	eb49 090b 	adc.w	r9, r9, fp
 800812c:	f04f 0100 	mov.w	r1, #0
 8008130:	f04f 0200 	mov.w	r2, #0
 8008134:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008138:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800813c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008140:	4688      	mov	r8, r1
 8008142:	4691      	mov	r9, r2
 8008144:	eb1a 0508 	adds.w	r5, sl, r8
 8008148:	eb4b 0609 	adc.w	r6, fp, r9
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	4619      	mov	r1, r3
 8008152:	f04f 0200 	mov.w	r2, #0
 8008156:	f04f 0300 	mov.w	r3, #0
 800815a:	f04f 0400 	mov.w	r4, #0
 800815e:	0094      	lsls	r4, r2, #2
 8008160:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008164:	008b      	lsls	r3, r1, #2
 8008166:	461a      	mov	r2, r3
 8008168:	4623      	mov	r3, r4
 800816a:	4628      	mov	r0, r5
 800816c:	4631      	mov	r1, r6
 800816e:	f7f8 fd9b 	bl	8000ca8 <__aeabi_uldivmod>
 8008172:	4603      	mov	r3, r0
 8008174:	460c      	mov	r4, r1
 8008176:	461a      	mov	r2, r3
 8008178:	4bb8      	ldr	r3, [pc, #736]	; (800845c <UART_SetConfig+0x6f4>)
 800817a:	fba3 2302 	umull	r2, r3, r3, r2
 800817e:	095b      	lsrs	r3, r3, #5
 8008180:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	469b      	mov	fp, r3
 8008188:	f04f 0c00 	mov.w	ip, #0
 800818c:	46d9      	mov	r9, fp
 800818e:	46e2      	mov	sl, ip
 8008190:	eb19 0309 	adds.w	r3, r9, r9
 8008194:	eb4a 040a 	adc.w	r4, sl, sl
 8008198:	4699      	mov	r9, r3
 800819a:	46a2      	mov	sl, r4
 800819c:	eb19 090b 	adds.w	r9, r9, fp
 80081a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80081a4:	f04f 0100 	mov.w	r1, #0
 80081a8:	f04f 0200 	mov.w	r2, #0
 80081ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081b8:	4689      	mov	r9, r1
 80081ba:	4692      	mov	sl, r2
 80081bc:	eb1b 0509 	adds.w	r5, fp, r9
 80081c0:	eb4c 060a 	adc.w	r6, ip, sl
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	4619      	mov	r1, r3
 80081ca:	f04f 0200 	mov.w	r2, #0
 80081ce:	f04f 0300 	mov.w	r3, #0
 80081d2:	f04f 0400 	mov.w	r4, #0
 80081d6:	0094      	lsls	r4, r2, #2
 80081d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081dc:	008b      	lsls	r3, r1, #2
 80081de:	461a      	mov	r2, r3
 80081e0:	4623      	mov	r3, r4
 80081e2:	4628      	mov	r0, r5
 80081e4:	4631      	mov	r1, r6
 80081e6:	f7f8 fd5f 	bl	8000ca8 <__aeabi_uldivmod>
 80081ea:	4603      	mov	r3, r0
 80081ec:	460c      	mov	r4, r1
 80081ee:	461a      	mov	r2, r3
 80081f0:	4b9a      	ldr	r3, [pc, #616]	; (800845c <UART_SetConfig+0x6f4>)
 80081f2:	fba3 1302 	umull	r1, r3, r3, r2
 80081f6:	095b      	lsrs	r3, r3, #5
 80081f8:	2164      	movs	r1, #100	; 0x64
 80081fa:	fb01 f303 	mul.w	r3, r1, r3
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	011b      	lsls	r3, r3, #4
 8008202:	3332      	adds	r3, #50	; 0x32
 8008204:	4a95      	ldr	r2, [pc, #596]	; (800845c <UART_SetConfig+0x6f4>)
 8008206:	fba2 2303 	umull	r2, r3, r2, r3
 800820a:	095b      	lsrs	r3, r3, #5
 800820c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008210:	4498      	add	r8, r3
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	469b      	mov	fp, r3
 8008216:	f04f 0c00 	mov.w	ip, #0
 800821a:	46d9      	mov	r9, fp
 800821c:	46e2      	mov	sl, ip
 800821e:	eb19 0309 	adds.w	r3, r9, r9
 8008222:	eb4a 040a 	adc.w	r4, sl, sl
 8008226:	4699      	mov	r9, r3
 8008228:	46a2      	mov	sl, r4
 800822a:	eb19 090b 	adds.w	r9, r9, fp
 800822e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008232:	f04f 0100 	mov.w	r1, #0
 8008236:	f04f 0200 	mov.w	r2, #0
 800823a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800823e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008246:	4689      	mov	r9, r1
 8008248:	4692      	mov	sl, r2
 800824a:	eb1b 0509 	adds.w	r5, fp, r9
 800824e:	eb4c 060a 	adc.w	r6, ip, sl
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	4619      	mov	r1, r3
 8008258:	f04f 0200 	mov.w	r2, #0
 800825c:	f04f 0300 	mov.w	r3, #0
 8008260:	f04f 0400 	mov.w	r4, #0
 8008264:	0094      	lsls	r4, r2, #2
 8008266:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800826a:	008b      	lsls	r3, r1, #2
 800826c:	461a      	mov	r2, r3
 800826e:	4623      	mov	r3, r4
 8008270:	4628      	mov	r0, r5
 8008272:	4631      	mov	r1, r6
 8008274:	f7f8 fd18 	bl	8000ca8 <__aeabi_uldivmod>
 8008278:	4603      	mov	r3, r0
 800827a:	460c      	mov	r4, r1
 800827c:	461a      	mov	r2, r3
 800827e:	4b77      	ldr	r3, [pc, #476]	; (800845c <UART_SetConfig+0x6f4>)
 8008280:	fba3 1302 	umull	r1, r3, r3, r2
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	2164      	movs	r1, #100	; 0x64
 8008288:	fb01 f303 	mul.w	r3, r1, r3
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	011b      	lsls	r3, r3, #4
 8008290:	3332      	adds	r3, #50	; 0x32
 8008292:	4a72      	ldr	r2, [pc, #456]	; (800845c <UART_SetConfig+0x6f4>)
 8008294:	fba2 2303 	umull	r2, r3, r2, r3
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	f003 020f 	and.w	r2, r3, #15
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4442      	add	r2, r8
 80082a4:	609a      	str	r2, [r3, #8]
 80082a6:	e0d0      	b.n	800844a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80082a8:	f7fe fc6c 	bl	8006b84 <HAL_RCC_GetPCLK1Freq>
 80082ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	469a      	mov	sl, r3
 80082b2:	f04f 0b00 	mov.w	fp, #0
 80082b6:	46d0      	mov	r8, sl
 80082b8:	46d9      	mov	r9, fp
 80082ba:	eb18 0308 	adds.w	r3, r8, r8
 80082be:	eb49 0409 	adc.w	r4, r9, r9
 80082c2:	4698      	mov	r8, r3
 80082c4:	46a1      	mov	r9, r4
 80082c6:	eb18 080a 	adds.w	r8, r8, sl
 80082ca:	eb49 090b 	adc.w	r9, r9, fp
 80082ce:	f04f 0100 	mov.w	r1, #0
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082e2:	4688      	mov	r8, r1
 80082e4:	4691      	mov	r9, r2
 80082e6:	eb1a 0508 	adds.w	r5, sl, r8
 80082ea:	eb4b 0609 	adc.w	r6, fp, r9
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	4619      	mov	r1, r3
 80082f4:	f04f 0200 	mov.w	r2, #0
 80082f8:	f04f 0300 	mov.w	r3, #0
 80082fc:	f04f 0400 	mov.w	r4, #0
 8008300:	0094      	lsls	r4, r2, #2
 8008302:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008306:	008b      	lsls	r3, r1, #2
 8008308:	461a      	mov	r2, r3
 800830a:	4623      	mov	r3, r4
 800830c:	4628      	mov	r0, r5
 800830e:	4631      	mov	r1, r6
 8008310:	f7f8 fcca 	bl	8000ca8 <__aeabi_uldivmod>
 8008314:	4603      	mov	r3, r0
 8008316:	460c      	mov	r4, r1
 8008318:	461a      	mov	r2, r3
 800831a:	4b50      	ldr	r3, [pc, #320]	; (800845c <UART_SetConfig+0x6f4>)
 800831c:	fba3 2302 	umull	r2, r3, r3, r2
 8008320:	095b      	lsrs	r3, r3, #5
 8008322:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	469b      	mov	fp, r3
 800832a:	f04f 0c00 	mov.w	ip, #0
 800832e:	46d9      	mov	r9, fp
 8008330:	46e2      	mov	sl, ip
 8008332:	eb19 0309 	adds.w	r3, r9, r9
 8008336:	eb4a 040a 	adc.w	r4, sl, sl
 800833a:	4699      	mov	r9, r3
 800833c:	46a2      	mov	sl, r4
 800833e:	eb19 090b 	adds.w	r9, r9, fp
 8008342:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008346:	f04f 0100 	mov.w	r1, #0
 800834a:	f04f 0200 	mov.w	r2, #0
 800834e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008352:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008356:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800835a:	4689      	mov	r9, r1
 800835c:	4692      	mov	sl, r2
 800835e:	eb1b 0509 	adds.w	r5, fp, r9
 8008362:	eb4c 060a 	adc.w	r6, ip, sl
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	4619      	mov	r1, r3
 800836c:	f04f 0200 	mov.w	r2, #0
 8008370:	f04f 0300 	mov.w	r3, #0
 8008374:	f04f 0400 	mov.w	r4, #0
 8008378:	0094      	lsls	r4, r2, #2
 800837a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800837e:	008b      	lsls	r3, r1, #2
 8008380:	461a      	mov	r2, r3
 8008382:	4623      	mov	r3, r4
 8008384:	4628      	mov	r0, r5
 8008386:	4631      	mov	r1, r6
 8008388:	f7f8 fc8e 	bl	8000ca8 <__aeabi_uldivmod>
 800838c:	4603      	mov	r3, r0
 800838e:	460c      	mov	r4, r1
 8008390:	461a      	mov	r2, r3
 8008392:	4b32      	ldr	r3, [pc, #200]	; (800845c <UART_SetConfig+0x6f4>)
 8008394:	fba3 1302 	umull	r1, r3, r3, r2
 8008398:	095b      	lsrs	r3, r3, #5
 800839a:	2164      	movs	r1, #100	; 0x64
 800839c:	fb01 f303 	mul.w	r3, r1, r3
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	011b      	lsls	r3, r3, #4
 80083a4:	3332      	adds	r3, #50	; 0x32
 80083a6:	4a2d      	ldr	r2, [pc, #180]	; (800845c <UART_SetConfig+0x6f4>)
 80083a8:	fba2 2303 	umull	r2, r3, r2, r3
 80083ac:	095b      	lsrs	r3, r3, #5
 80083ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083b2:	4498      	add	r8, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	469b      	mov	fp, r3
 80083b8:	f04f 0c00 	mov.w	ip, #0
 80083bc:	46d9      	mov	r9, fp
 80083be:	46e2      	mov	sl, ip
 80083c0:	eb19 0309 	adds.w	r3, r9, r9
 80083c4:	eb4a 040a 	adc.w	r4, sl, sl
 80083c8:	4699      	mov	r9, r3
 80083ca:	46a2      	mov	sl, r4
 80083cc:	eb19 090b 	adds.w	r9, r9, fp
 80083d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80083d4:	f04f 0100 	mov.w	r1, #0
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083e8:	4689      	mov	r9, r1
 80083ea:	4692      	mov	sl, r2
 80083ec:	eb1b 0509 	adds.w	r5, fp, r9
 80083f0:	eb4c 060a 	adc.w	r6, ip, sl
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	4619      	mov	r1, r3
 80083fa:	f04f 0200 	mov.w	r2, #0
 80083fe:	f04f 0300 	mov.w	r3, #0
 8008402:	f04f 0400 	mov.w	r4, #0
 8008406:	0094      	lsls	r4, r2, #2
 8008408:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800840c:	008b      	lsls	r3, r1, #2
 800840e:	461a      	mov	r2, r3
 8008410:	4623      	mov	r3, r4
 8008412:	4628      	mov	r0, r5
 8008414:	4631      	mov	r1, r6
 8008416:	f7f8 fc47 	bl	8000ca8 <__aeabi_uldivmod>
 800841a:	4603      	mov	r3, r0
 800841c:	460c      	mov	r4, r1
 800841e:	461a      	mov	r2, r3
 8008420:	4b0e      	ldr	r3, [pc, #56]	; (800845c <UART_SetConfig+0x6f4>)
 8008422:	fba3 1302 	umull	r1, r3, r3, r2
 8008426:	095b      	lsrs	r3, r3, #5
 8008428:	2164      	movs	r1, #100	; 0x64
 800842a:	fb01 f303 	mul.w	r3, r1, r3
 800842e:	1ad3      	subs	r3, r2, r3
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	3332      	adds	r3, #50	; 0x32
 8008434:	4a09      	ldr	r2, [pc, #36]	; (800845c <UART_SetConfig+0x6f4>)
 8008436:	fba2 2303 	umull	r2, r3, r2, r3
 800843a:	095b      	lsrs	r3, r3, #5
 800843c:	f003 020f 	and.w	r2, r3, #15
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4442      	add	r2, r8
 8008446:	609a      	str	r2, [r3, #8]
}
 8008448:	e7ff      	b.n	800844a <UART_SetConfig+0x6e2>
 800844a:	bf00      	nop
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008454:	40011000 	.word	0x40011000
 8008458:	40011400 	.word	0x40011400
 800845c:	51eb851f 	.word	0x51eb851f

08008460 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800846e:	2300      	movs	r3, #0
 8008470:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d029      	beq.n	80084ce <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008486:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800848a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008494:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800849a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80084a0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80084a6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80084ac:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80084b2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80084b8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80084be:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	601a      	str	r2, [r3, #0]
 80084cc:	e034      	b.n	8008538 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80084da:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80084e4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80084ea:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008502:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800850c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008512:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008518:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800851e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008524:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	4313      	orrs	r3, r2
 800852a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008546:	b480      	push	{r7}
 8008548:	b087      	sub	sp, #28
 800854a:	af00      	add	r7, sp, #0
 800854c:	60f8      	str	r0, [r7, #12]
 800854e:	60b9      	str	r1, [r7, #8]
 8008550:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008556:	2300      	movs	r3, #0
 8008558:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d02e      	beq.n	80085be <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800856c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	3b01      	subs	r3, #1
 800857a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800857c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	3b01      	subs	r3, #1
 8008584:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008586:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	3b01      	subs	r3, #1
 800858e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008590:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	3b01      	subs	r3, #1
 8008598:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 800859a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	3b01      	subs	r3, #1
 80085a2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80085a4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	699b      	ldr	r3, [r3, #24]
 80085aa:	3b01      	subs	r3, #1
 80085ac:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80085ae:	4313      	orrs	r3, r2
 80085b0:	697a      	ldr	r2, [r7, #20]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	609a      	str	r2, [r3, #8]
 80085bc:	e03b      	b.n	8008636 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085ce:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	3b01      	subs	r3, #1
 80085d6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	3b01      	subs	r3, #1
 80085de:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80085e0:	4313      	orrs	r3, r2
 80085e2:	697a      	ldr	r2, [r7, #20]
 80085e4:	4313      	orrs	r3, r2
 80085e6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80085f4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	3b01      	subs	r3, #1
 8008602:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008604:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	3b01      	subs	r3, #1
 800860c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800860e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	3b01      	subs	r3, #1
 8008616:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008618:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	3b01      	subs	r3, #1
 8008620:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008622:	4313      	orrs	r3, r2
 8008624:	693a      	ldr	r2, [r7, #16]
 8008626:	4313      	orrs	r3, r2
 8008628:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	371c      	adds	r7, #28
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008650:	2300      	movs	r3, #0
 8008652:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008654:	2300      	movs	r3, #0
 8008656:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008660:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	3b01      	subs	r3, #1
 8008668:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800866a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008672:	4313      	orrs	r3, r2
 8008674:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800867c:	f000 f8be 	bl	80087fc <HAL_GetTick>
 8008680:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008682:	e010      	b.n	80086a6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800868a:	d00c      	beq.n	80086a6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d007      	beq.n	80086a2 <FMC_SDRAM_SendCommand+0x5e>
 8008692:	f000 f8b3 	bl	80087fc <HAL_GetTick>
 8008696:	4602      	mov	r2, r0
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	1ad3      	subs	r3, r2, r3
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d201      	bcs.n	80086a6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e006      	b.n	80086b4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	699b      	ldr	r3, [r3, #24]
 80086aa:	f003 0320 	and.w	r3, r3, #32
 80086ae:	2b20      	cmp	r3, #32
 80086b0:	d0e8      	beq.n	8008684 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3718      	adds	r7, #24
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	695a      	ldr	r2, [r3, #20]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 80086e2:	b480      	push	{r7}
 80086e4:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 80086e6:	bf00      	nop
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 80086f6:	4b3e      	ldr	r3, [pc, #248]	; (80087f0 <HAL_IncTick+0x100>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3301      	adds	r3, #1
 80086fc:	4a3c      	ldr	r2, [pc, #240]	; (80087f0 <HAL_IncTick+0x100>)
 80086fe:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8008700:	4b3c      	ldr	r3, [pc, #240]	; (80087f4 <HAL_IncTick+0x104>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d004      	beq.n	8008712 <HAL_IncTick+0x22>
		TM_Time2--;
 8008708:	4b3a      	ldr	r3, [pc, #232]	; (80087f4 <HAL_IncTick+0x104>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3b01      	subs	r3, #1
 800870e:	4a39      	ldr	r2, [pc, #228]	; (80087f4 <HAL_IncTick+0x104>)
 8008710:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8008712:	2300      	movs	r3, #0
 8008714:	71fb      	strb	r3, [r7, #7]
 8008716:	e05f      	b.n	80087d8 <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8008718:	79fb      	ldrb	r3, [r7, #7]
 800871a:	4a37      	ldr	r2, [pc, #220]	; (80087f8 <HAL_IncTick+0x108>)
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	685b      	ldr	r3, [r3, #4]
		if (
 8008722:	2b00      	cmp	r3, #0
 8008724:	d055      	beq.n	80087d2 <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	4a33      	ldr	r2, [pc, #204]	; (80087f8 <HAL_IncTick+0x108>)
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	b2db      	uxtb	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d04a      	beq.n	80087d2 <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	4a2e      	ldr	r2, [pc, #184]	; (80087f8 <HAL_IncTick+0x108>)
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d007      	beq.n	800875c <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	4a2a      	ldr	r2, [pc, #168]	; (80087f8 <HAL_IncTick+0x108>)
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	689a      	ldr	r2, [r3, #8]
 8008758:	3a01      	subs	r2, #1
 800875a:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 800875c:	79fb      	ldrb	r3, [r7, #7]
 800875e:	4a26      	ldr	r2, [pc, #152]	; (80087f8 <HAL_IncTick+0x108>)
 8008760:	009b      	lsls	r3, r3, #2
 8008762:	4413      	add	r3, r2
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d132      	bne.n	80087d2 <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 800876c:	79fb      	ldrb	r3, [r7, #7]
 800876e:	4a22      	ldr	r2, [pc, #136]	; (80087f8 <HAL_IncTick+0x108>)
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	491f      	ldr	r1, [pc, #124]	; (80087f8 <HAL_IncTick+0x108>)
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	6858      	ldr	r0, [r3, #4]
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	491c      	ldr	r1, [pc, #112]	; (80087f8 <HAL_IncTick+0x108>)
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	440b      	add	r3, r1
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	4619      	mov	r1, r3
 8008790:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	4a18      	ldr	r2, [pc, #96]	; (80087f8 <HAL_IncTick+0x108>)
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	79fb      	ldrb	r3, [r7, #7]
 800879e:	4916      	ldr	r1, [pc, #88]	; (80087f8 <HAL_IncTick+0x108>)
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	440b      	add	r3, r1
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	6852      	ldr	r2, [r2, #4]
 80087a8:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	4a12      	ldr	r2, [pc, #72]	; (80087f8 <HAL_IncTick+0x108>)
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d108      	bne.n	80087d2 <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	4a0d      	ldr	r2, [pc, #52]	; (80087f8 <HAL_IncTick+0x108>)
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	7813      	ldrb	r3, [r2, #0]
 80087cc:	f36f 0341 	bfc	r3, #1, #1
 80087d0:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	3301      	adds	r3, #1
 80087d6:	71fb      	strb	r3, [r7, #7]
 80087d8:	4b07      	ldr	r3, [pc, #28]	; (80087f8 <HAL_IncTick+0x108>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	79fa      	ldrb	r2, [r7, #7]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d39a      	bcc.n	8008718 <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 80087e2:	f7ff ff7e 	bl	80086e2 <TM_DELAY_1msHandler>
}
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20001460 	.word	0x20001460
 80087f4:	2000145c 	.word	0x2000145c
 80087f8:	20001464 	.word	0x20001464

080087fc <HAL_GetTick>:
			}
		}
	}
}

uint32_t HAL_GetTick(void) {
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 8008800:	4b03      	ldr	r3, [pc, #12]	; (8008810 <HAL_GetTick+0x14>)
 8008802:	681b      	ldr	r3, [r3, #0]
}
 8008804:	4618      	mov	r0, r3
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20001460 	.word	0x20001460

08008814 <DMA2D_Convert565ToARGB8888>:
static DMA2D_HandleTypeDef DMA2DHandle;
//static DMA2D_FG_InitTypeDef GRAPHIC_DMA2D_FG_InitStruct;
volatile TM_INT_DMA2D_t DIS;

/* Convert function */
static void DMA2D_Convert565ToARGB8888(uint32_t color) {
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
	/* Input color: RRRRR GGGGGG BBBBB */
	/* Output color: RRRRR000 GGGGGG00 BBBBB000 */
    DMA2D_Color = color;
 800881c:	4a04      	ldr	r2, [pc, #16]	; (8008830 <DMA2D_Convert565ToARGB8888+0x1c>)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6013      	str	r3, [r2, #0]
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	2000124c 	.word	0x2000124c

08008834 <TM_DMA2DGRAPHIC_Init>:
void TM_INT_DMA2DGRAPHIC_InitAndTransfer(void);
void TM_INT_DMA2DGRAPHIC_SetMemory(uint32_t MemoryAddress, uint32_t Offset, uint32_t NumberOfLine, uint32_t PixelPerLine);
void TM_INT_DMA2DGRAPHIC_DrawCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color);
void TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color);

void TM_DMA2DGRAPHIC_Init(void) {
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
	/* Internal settings */
	DIS.StartAddress = DMA2D_GRAPHIC_RAM_ADDR;
 800883a:	4b23      	ldr	r3, [pc, #140]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 800883c:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8008840:	609a      	str	r2, [r3, #8]
	DIS.Offset = 0;
 8008842:	4b21      	ldr	r3, [pc, #132]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 8008844:	2200      	movs	r2, #0
 8008846:	615a      	str	r2, [r3, #20]
	DIS.Width = DMA2D_GRAPHIC_LCD_WIDTH;
 8008848:	4b1f      	ldr	r3, [pc, #124]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 800884a:	22f0      	movs	r2, #240	; 0xf0
 800884c:	801a      	strh	r2, [r3, #0]
	DIS.Height = DMA2D_GRAPHIC_LCD_HEIGHT;
 800884e:	4b1e      	ldr	r3, [pc, #120]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 8008850:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008854:	805a      	strh	r2, [r3, #2]
	DIS.Pixels = DMA2D_GRAPHIC_PIXELS;
 8008856:	4b1c      	ldr	r3, [pc, #112]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 8008858:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 800885c:	619a      	str	r2, [r3, #24]
	DIS.CurrentHeight = DMA2D_GRAPHIC_LCD_WIDTH;
 800885e:	4b1a      	ldr	r3, [pc, #104]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 8008860:	22f0      	movs	r2, #240	; 0xf0
 8008862:	80da      	strh	r2, [r3, #6]
	DIS.CurrentWidth = DMA2D_GRAPHIC_LCD_HEIGHT;
 8008864:	4b18      	ldr	r3, [pc, #96]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 8008866:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800886a:	809a      	strh	r2, [r3, #4]
	DIS.Orientation = 0;
 800886c:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 800886e:	2200      	movs	r2, #0
 8008870:	775a      	strb	r2, [r3, #29]
	DIS.PixelSize = 2;
 8008872:	4b15      	ldr	r3, [pc, #84]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 8008874:	2202      	movs	r2, #2
 8008876:	779a      	strb	r2, [r3, #30]
	DIS.LayerOffset = DMA2D_GRAPHIC_LCD_WIDTH * DMA2D_GRAPHIC_LCD_HEIGHT * DIS.PixelSize;
 8008878:	4b13      	ldr	r3, [pc, #76]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 800887a:	7f9b      	ldrb	r3, [r3, #30]
 800887c:	b2db      	uxtb	r3, r3
 800887e:	461a      	mov	r2, r3
 8008880:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8008884:	fb03 f302 	mul.w	r3, r3, r2
 8008888:	461a      	mov	r2, r3
 800888a:	4b0f      	ldr	r3, [pc, #60]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 800888c:	60da      	str	r2, [r3, #12]
	DIS.LayerNumber = 0;
 800888e:	4b0e      	ldr	r3, [pc, #56]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 8008890:	2200      	movs	r2, #0
 8008892:	741a      	strb	r2, [r3, #16]
	
	/* Set DMA2D instance value */
	DMA2DHandle.Instance = DMA2D;
 8008894:	4b0d      	ldr	r3, [pc, #52]	; (80088cc <TM_DMA2DGRAPHIC_Init+0x98>)
 8008896:	4a0e      	ldr	r2, [pc, #56]	; (80088d0 <TM_DMA2DGRAPHIC_Init+0x9c>)
 8008898:	601a      	str	r2, [r3, #0]
	
	/* Enable DMA2D clock */
	__HAL_RCC_DMA2D_CLK_ENABLE();
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]
 800889e:	4b0d      	ldr	r3, [pc, #52]	; (80088d4 <TM_DMA2DGRAPHIC_Init+0xa0>)
 80088a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088a2:	4a0c      	ldr	r2, [pc, #48]	; (80088d4 <TM_DMA2DGRAPHIC_Init+0xa0>)
 80088a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80088a8:	6313      	str	r3, [r2, #48]	; 0x30
 80088aa:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <TM_DMA2DGRAPHIC_Init+0xa0>)
 80088ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088b2:	607b      	str	r3, [r7, #4]
 80088b4:	687b      	ldr	r3, [r7, #4]
	
	/* Initialized */
	DIS.Initialized = 1;
 80088b6:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <TM_DMA2DGRAPHIC_Init+0x94>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	771a      	strb	r2, [r3, #28]
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	2000201c 	.word	0x2000201c
 80088cc:	2000147c 	.word	0x2000147c
 80088d0:	4002b000 	.word	0x4002b000
 80088d4:	40023800 	.word	0x40023800

080088d8 <TM_DMA2DGRAPHIC_SetLayer>:

void TM_DMA2DGRAPHIC_SetLayer(uint8_t layer_number) {
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	4603      	mov	r3, r0
 80088e0:	71fb      	strb	r3, [r7, #7]
	/* Set offset */
	DIS.Offset = (layer_number) * DIS.LayerOffset;
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	4a07      	ldr	r2, [pc, #28]	; (8008904 <TM_DMA2DGRAPHIC_SetLayer+0x2c>)
 80088e6:	68d2      	ldr	r2, [r2, #12]
 80088e8:	fb02 f303 	mul.w	r3, r2, r3
 80088ec:	4a05      	ldr	r2, [pc, #20]	; (8008904 <TM_DMA2DGRAPHIC_SetLayer+0x2c>)
 80088ee:	6153      	str	r3, [r2, #20]
	DIS.LayerNumber = layer_number;
 80088f0:	4a04      	ldr	r2, [pc, #16]	; (8008904 <TM_DMA2DGRAPHIC_SetLayer+0x2c>)
 80088f2:	79fb      	ldrb	r3, [r7, #7]
 80088f4:	7413      	strb	r3, [r2, #16]
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	2000201c 	.word	0x2000201c

08008908 <TM_DMA2DGRAPHIC_DrawPixel>:

void TM_DMA2DGRAPHIC_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 8008908:	b490      	push	{r4, r7}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	4603      	mov	r3, r0
 8008910:	603a      	str	r2, [r7, #0]
 8008912:	80fb      	strh	r3, [r7, #6]
 8008914:	460b      	mov	r3, r1
 8008916:	80bb      	strh	r3, [r7, #4]
	if (DIS.Orientation == 1) { /* Normal */
 8008918:	4b47      	ldr	r3, [pc, #284]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800891a:	7f5b      	ldrb	r3, [r3, #29]
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b01      	cmp	r3, #1
 8008920:	d117      	bne.n	8008952 <TM_DMA2DGRAPHIC_DrawPixel+0x4a>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * (y * DIS.Width + x)) = color;
 8008922:	4b45      	ldr	r3, [pc, #276]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	4b44      	ldr	r3, [pc, #272]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	4413      	add	r3, r2
 800892c:	4a42      	ldr	r2, [pc, #264]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800892e:	7f92      	ldrb	r2, [r2, #30]
 8008930:	b2d2      	uxtb	r2, r2
 8008932:	4610      	mov	r0, r2
 8008934:	88ba      	ldrh	r2, [r7, #4]
 8008936:	4940      	ldr	r1, [pc, #256]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8008938:	8809      	ldrh	r1, [r1, #0]
 800893a:	b289      	uxth	r1, r1
 800893c:	fb01 f102 	mul.w	r1, r1, r2
 8008940:	88fa      	ldrh	r2, [r7, #6]
 8008942:	440a      	add	r2, r1
 8008944:	fb02 f200 	mul.w	r2, r2, r0
 8008948:	4413      	add	r3, r2
 800894a:	461a      	mov	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	6013      	str	r3, [r2, #0]
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1)) = color;
	} else if (DIS.Orientation == 2) { /* 270 */
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y)) = color;
	}
}
 8008950:	e06c      	b.n	8008a2c <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 0) { /* 180 */
 8008952:	4b39      	ldr	r3, [pc, #228]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8008954:	7f5b      	ldrb	r3, [r3, #29]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b00      	cmp	r3, #0
 800895a:	d123      	bne.n	80089a4 <TM_DMA2DGRAPHIC_DrawPixel+0x9c>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - y - 1) * DIS.Width + (DIS.Width - x - 1))) = color;
 800895c:	4b36      	ldr	r3, [pc, #216]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800895e:	689a      	ldr	r2, [r3, #8]
 8008960:	4b35      	ldr	r3, [pc, #212]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8008962:	695b      	ldr	r3, [r3, #20]
 8008964:	4413      	add	r3, r2
 8008966:	4a34      	ldr	r2, [pc, #208]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8008968:	7f92      	ldrb	r2, [r2, #30]
 800896a:	b2d2      	uxtb	r2, r2
 800896c:	4610      	mov	r0, r2
 800896e:	4a32      	ldr	r2, [pc, #200]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8008970:	8852      	ldrh	r2, [r2, #2]
 8008972:	b292      	uxth	r2, r2
 8008974:	4611      	mov	r1, r2
 8008976:	88ba      	ldrh	r2, [r7, #4]
 8008978:	1a8a      	subs	r2, r1, r2
 800897a:	3a01      	subs	r2, #1
 800897c:	492e      	ldr	r1, [pc, #184]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800897e:	8809      	ldrh	r1, [r1, #0]
 8008980:	b289      	uxth	r1, r1
 8008982:	fb01 f102 	mul.w	r1, r1, r2
 8008986:	4a2c      	ldr	r2, [pc, #176]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8008988:	8812      	ldrh	r2, [r2, #0]
 800898a:	b292      	uxth	r2, r2
 800898c:	4614      	mov	r4, r2
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	1aa2      	subs	r2, r4, r2
 8008992:	3a01      	subs	r2, #1
 8008994:	440a      	add	r2, r1
 8008996:	fb02 f200 	mul.w	r2, r2, r0
 800899a:	4413      	add	r3, r2
 800899c:	461a      	mov	r2, r3
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	6013      	str	r3, [r2, #0]
}
 80089a2:	e043      	b.n	8008a2c <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
 80089a4:	4b24      	ldr	r3, [pc, #144]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80089a6:	7f5b      	ldrb	r3, [r3, #29]
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b03      	cmp	r3, #3
 80089ac:	d11c      	bne.n	80089e8 <TM_DMA2DGRAPHIC_DrawPixel+0xe0>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1)) = color;
 80089ae:	4b22      	ldr	r3, [pc, #136]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	4b21      	ldr	r3, [pc, #132]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	4413      	add	r3, r2
 80089b8:	4a1f      	ldr	r2, [pc, #124]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80089ba:	7f92      	ldrb	r2, [r2, #30]
 80089bc:	b2d2      	uxtb	r2, r2
 80089be:	4610      	mov	r0, r2
 80089c0:	88fa      	ldrh	r2, [r7, #6]
 80089c2:	491d      	ldr	r1, [pc, #116]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80089c4:	8809      	ldrh	r1, [r1, #0]
 80089c6:	b289      	uxth	r1, r1
 80089c8:	fb01 f202 	mul.w	r2, r1, r2
 80089cc:	491a      	ldr	r1, [pc, #104]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80089ce:	8809      	ldrh	r1, [r1, #0]
 80089d0:	b289      	uxth	r1, r1
 80089d2:	4411      	add	r1, r2
 80089d4:	88ba      	ldrh	r2, [r7, #4]
 80089d6:	1a8a      	subs	r2, r1, r2
 80089d8:	3a01      	subs	r2, #1
 80089da:	fb02 f200 	mul.w	r2, r2, r0
 80089de:	4413      	add	r3, r2
 80089e0:	461a      	mov	r2, r3
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	6013      	str	r3, [r2, #0]
}
 80089e6:	e021      	b.n	8008a2c <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 2) { /* 270 */
 80089e8:	4b13      	ldr	r3, [pc, #76]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80089ea:	7f5b      	ldrb	r3, [r3, #29]
 80089ec:	b2db      	uxtb	r3, r3
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d11c      	bne.n	8008a2c <TM_DMA2DGRAPHIC_DrawPixel+0x124>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y)) = color;
 80089f2:	4b11      	ldr	r3, [pc, #68]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80089f4:	689a      	ldr	r2, [r3, #8]
 80089f6:	4b10      	ldr	r3, [pc, #64]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	4413      	add	r3, r2
 80089fc:	4a0e      	ldr	r2, [pc, #56]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80089fe:	7f92      	ldrb	r2, [r2, #30]
 8008a00:	b2d2      	uxtb	r2, r2
 8008a02:	4610      	mov	r0, r2
 8008a04:	4a0c      	ldr	r2, [pc, #48]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8008a06:	8852      	ldrh	r2, [r2, #2]
 8008a08:	b292      	uxth	r2, r2
 8008a0a:	4611      	mov	r1, r2
 8008a0c:	88fa      	ldrh	r2, [r7, #6]
 8008a0e:	1a8a      	subs	r2, r1, r2
 8008a10:	3a01      	subs	r2, #1
 8008a12:	4909      	ldr	r1, [pc, #36]	; (8008a38 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8008a14:	8809      	ldrh	r1, [r1, #0]
 8008a16:	b289      	uxth	r1, r1
 8008a18:	fb01 f102 	mul.w	r1, r1, r2
 8008a1c:	88ba      	ldrh	r2, [r7, #4]
 8008a1e:	440a      	add	r2, r1
 8008a20:	fb02 f200 	mul.w	r2, r2, r0
 8008a24:	4413      	add	r3, r2
 8008a26:	461a      	mov	r2, r3
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	6013      	str	r3, [r2, #0]
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bc90      	pop	{r4, r7}
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	2000201c 	.word	0x2000201c

08008a3c <TM_DMA2DGRAPHIC_GetPixel>:

uint32_t TM_DMA2DGRAPHIC_GetPixel(uint16_t x, uint16_t y) {
 8008a3c:	b490      	push	{r4, r7}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	460a      	mov	r2, r1
 8008a46:	80fb      	strh	r3, [r7, #6]
 8008a48:	4613      	mov	r3, r2
 8008a4a:	80bb      	strh	r3, [r7, #4]
	if (DIS.Orientation == 1) { /* Normal */
 8008a4c:	4b44      	ldr	r3, [pc, #272]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008a4e:	7f5b      	ldrb	r3, [r3, #29]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d115      	bne.n	8008a82 <TM_DMA2DGRAPHIC_GetPixel+0x46>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * (y * DIS.Width + x));
 8008a56:	4b42      	ldr	r3, [pc, #264]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008a58:	689a      	ldr	r2, [r3, #8]
 8008a5a:	4b41      	ldr	r3, [pc, #260]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	4413      	add	r3, r2
 8008a60:	4a3f      	ldr	r2, [pc, #252]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008a62:	7f92      	ldrb	r2, [r2, #30]
 8008a64:	b2d2      	uxtb	r2, r2
 8008a66:	4610      	mov	r0, r2
 8008a68:	88ba      	ldrh	r2, [r7, #4]
 8008a6a:	493d      	ldr	r1, [pc, #244]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008a6c:	8809      	ldrh	r1, [r1, #0]
 8008a6e:	b289      	uxth	r1, r1
 8008a70:	fb01 f102 	mul.w	r1, r1, r2
 8008a74:	88fa      	ldrh	r2, [r7, #6]
 8008a76:	440a      	add	r2, r1
 8008a78:	fb02 f200 	mul.w	r2, r2, r0
 8008a7c:	4413      	add	r3, r2
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	e068      	b.n	8008b54 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 0) { /* 180 */
 8008a82:	4b37      	ldr	r3, [pc, #220]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008a84:	7f5b      	ldrb	r3, [r3, #29]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d121      	bne.n	8008ad0 <TM_DMA2DGRAPHIC_GetPixel+0x94>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - y - 1) * DIS.Width + (DIS.Width - x - 1)));
 8008a8c:	4b34      	ldr	r3, [pc, #208]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008a8e:	689a      	ldr	r2, [r3, #8]
 8008a90:	4b33      	ldr	r3, [pc, #204]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	4413      	add	r3, r2
 8008a96:	4a32      	ldr	r2, [pc, #200]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008a98:	7f92      	ldrb	r2, [r2, #30]
 8008a9a:	b2d2      	uxtb	r2, r2
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	4a30      	ldr	r2, [pc, #192]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008aa0:	8852      	ldrh	r2, [r2, #2]
 8008aa2:	b292      	uxth	r2, r2
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	88ba      	ldrh	r2, [r7, #4]
 8008aa8:	1a8a      	subs	r2, r1, r2
 8008aaa:	3a01      	subs	r2, #1
 8008aac:	492c      	ldr	r1, [pc, #176]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008aae:	8809      	ldrh	r1, [r1, #0]
 8008ab0:	b289      	uxth	r1, r1
 8008ab2:	fb01 f102 	mul.w	r1, r1, r2
 8008ab6:	4a2a      	ldr	r2, [pc, #168]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008ab8:	8812      	ldrh	r2, [r2, #0]
 8008aba:	b292      	uxth	r2, r2
 8008abc:	4614      	mov	r4, r2
 8008abe:	88fa      	ldrh	r2, [r7, #6]
 8008ac0:	1aa2      	subs	r2, r4, r2
 8008ac2:	3a01      	subs	r2, #1
 8008ac4:	440a      	add	r2, r1
 8008ac6:	fb02 f200 	mul.w	r2, r2, r0
 8008aca:	4413      	add	r3, r2
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	e041      	b.n	8008b54 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
 8008ad0:	4b23      	ldr	r3, [pc, #140]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008ad2:	7f5b      	ldrb	r3, [r3, #29]
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d11a      	bne.n	8008b10 <TM_DMA2DGRAPHIC_GetPixel+0xd4>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1));
 8008ada:	4b21      	ldr	r3, [pc, #132]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008adc:	689a      	ldr	r2, [r3, #8]
 8008ade:	4b20      	ldr	r3, [pc, #128]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	4a1e      	ldr	r2, [pc, #120]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008ae6:	7f92      	ldrb	r2, [r2, #30]
 8008ae8:	b2d2      	uxtb	r2, r2
 8008aea:	4610      	mov	r0, r2
 8008aec:	88fa      	ldrh	r2, [r7, #6]
 8008aee:	491c      	ldr	r1, [pc, #112]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008af0:	8809      	ldrh	r1, [r1, #0]
 8008af2:	b289      	uxth	r1, r1
 8008af4:	fb01 f202 	mul.w	r2, r1, r2
 8008af8:	4919      	ldr	r1, [pc, #100]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008afa:	8809      	ldrh	r1, [r1, #0]
 8008afc:	b289      	uxth	r1, r1
 8008afe:	4411      	add	r1, r2
 8008b00:	88ba      	ldrh	r2, [r7, #4]
 8008b02:	1a8a      	subs	r2, r1, r2
 8008b04:	3a01      	subs	r2, #1
 8008b06:	fb02 f200 	mul.w	r2, r2, r0
 8008b0a:	4413      	add	r3, r2
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	e021      	b.n	8008b54 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 2) { /* 270 */
 8008b10:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008b12:	7f5b      	ldrb	r3, [r3, #29]
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d11b      	bne.n	8008b52 <TM_DMA2DGRAPHIC_GetPixel+0x116>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y));
 8008b1a:	4b11      	ldr	r3, [pc, #68]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	4b10      	ldr	r3, [pc, #64]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	4413      	add	r3, r2
 8008b24:	4a0e      	ldr	r2, [pc, #56]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008b26:	7f92      	ldrb	r2, [r2, #30]
 8008b28:	b2d2      	uxtb	r2, r2
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	4a0c      	ldr	r2, [pc, #48]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008b2e:	8852      	ldrh	r2, [r2, #2]
 8008b30:	b292      	uxth	r2, r2
 8008b32:	4611      	mov	r1, r2
 8008b34:	88fa      	ldrh	r2, [r7, #6]
 8008b36:	1a8a      	subs	r2, r1, r2
 8008b38:	3a01      	subs	r2, #1
 8008b3a:	4909      	ldr	r1, [pc, #36]	; (8008b60 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8008b3c:	8809      	ldrh	r1, [r1, #0]
 8008b3e:	b289      	uxth	r1, r1
 8008b40:	fb01 f102 	mul.w	r1, r1, r2
 8008b44:	88ba      	ldrh	r2, [r7, #4]
 8008b46:	440a      	add	r2, r1
 8008b48:	fb02 f200 	mul.w	r2, r2, r0
 8008b4c:	4413      	add	r3, r2
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	e000      	b.n	8008b54 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	}
	return 0;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3708      	adds	r7, #8
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bc90      	pop	{r4, r7}
 8008b5c:	4770      	bx	lr
 8008b5e:	bf00      	nop
 8008b60:	2000201c 	.word	0x2000201c

08008b64 <TM_DMA2DGRAPHIC_SetOrientation>:

void TM_DMA2DGRAPHIC_SetOrientation(uint8_t orientation) {
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	71fb      	strb	r3, [r7, #7]
	/* Filter */
	if (orientation > 3) {
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	2b03      	cmp	r3, #3
 8008b72:	d81e      	bhi.n	8008bb2 <TM_DMA2DGRAPHIC_SetOrientation+0x4e>
		return;
	}
	
	/* Save new orientation */
	DIS.Orientation = orientation;
 8008b74:	4a12      	ldr	r2, [pc, #72]	; (8008bc0 <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8008b76:	79fb      	ldrb	r3, [r7, #7]
 8008b78:	7753      	strb	r3, [r2, #29]
	
	if (
 8008b7a:	79fb      	ldrb	r3, [r7, #7]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <TM_DMA2DGRAPHIC_SetOrientation+0x22>
		orientation == 0 ||
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d10a      	bne.n	8008b9c <TM_DMA2DGRAPHIC_SetOrientation+0x38>
		orientation == 1
	) {
		DIS.CurrentHeight = DIS.Height;
 8008b86:	4b0e      	ldr	r3, [pc, #56]	; (8008bc0 <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8008b88:	885b      	ldrh	r3, [r3, #2]
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8008b8e:	80da      	strh	r2, [r3, #6]
		DIS.CurrentWidth = DIS.Width;
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	4b0a      	ldr	r3, [pc, #40]	; (8008bc0 <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8008b98:	809a      	strh	r2, [r3, #4]
 8008b9a:	e00b      	b.n	8008bb4 <TM_DMA2DGRAPHIC_SetOrientation+0x50>
	} else {
		DIS.CurrentHeight = DIS.Width;
 8008b9c:	4b08      	ldr	r3, [pc, #32]	; (8008bc0 <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8008ba4:	80da      	strh	r2, [r3, #6]
		DIS.CurrentWidth = DIS.Height;
 8008ba6:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8008ba8:	885b      	ldrh	r3, [r3, #2]
 8008baa:	b29a      	uxth	r2, r3
 8008bac:	4b04      	ldr	r3, [pc, #16]	; (8008bc0 <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8008bae:	809a      	strh	r2, [r3, #4]
 8008bb0:	e000      	b.n	8008bb4 <TM_DMA2DGRAPHIC_SetOrientation+0x50>
		return;
 8008bb2:	bf00      	nop
	}
}
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	2000201c 	.word	0x2000201c

08008bc4 <TM_DMA2DGRAPHIC_Fill>:

void TM_DMA2DGRAPHIC_Fill(uint32_t color) {
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af02      	add	r7, sp, #8
 8008bca:	6078      	str	r0, [r7, #4]
	/* Set parameters */
	DMA2DHandle.Init.Mode = DMA2D_R2M;
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8008bce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008bd2:	605a      	str	r2, [r3, #4]
	DMA2DHandle.Init.ColorMode = DMA2D_ARGB8888;
 8008bd4:	4b1b      	ldr	r3, [pc, #108]	; (8008c44 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	609a      	str	r2, [r3, #8]
	DMA2DHandle.Init.OutputOffset = 0;
 8008bda:	4b1a      	ldr	r3, [pc, #104]	; (8008c44 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	60da      	str	r2, [r3, #12]

	/* Convert color */
	DMA2D_Convert565ToARGB8888(color);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f7ff fe17 	bl	8008814 <DMA2D_Convert565ToARGB8888>

	/* Init DMA2D and start transfer */
	if (HAL_DMA2D_Init(&DMA2DHandle) == HAL_OK) {
 8008be6:	4817      	ldr	r0, [pc, #92]	; (8008c44 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8008be8:	f7fc fb1c 	bl	8005224 <HAL_DMA2D_Init>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d123      	bne.n	8008c3a <TM_DMA2DGRAPHIC_Fill+0x76>
		if (HAL_DMA2D_ConfigLayer(&DMA2DHandle, DIS.LayerNumber) == HAL_OK) {
 8008bf2:	4b15      	ldr	r3, [pc, #84]	; (8008c48 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8008bf4:	7c1b      	ldrb	r3, [r3, #16]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4812      	ldr	r0, [pc, #72]	; (8008c44 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8008bfc:	f7fc fc70 	bl	80054e0 <HAL_DMA2D_ConfigLayer>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d119      	bne.n	8008c3a <TM_DMA2DGRAPHIC_Fill+0x76>
			if (HAL_DMA2D_Start(&DMA2DHandle, DMA2D_Color, (uint32_t)(DIS.StartAddress + DIS.Offset), DIS.Width, DIS.Height) == HAL_OK) {        
 8008c06:	4b11      	ldr	r3, [pc, #68]	; (8008c4c <TM_DMA2DGRAPHIC_Fill+0x88>)
 8008c08:	6819      	ldr	r1, [r3, #0]
 8008c0a:	4b0f      	ldr	r3, [pc, #60]	; (8008c48 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	4b0e      	ldr	r3, [pc, #56]	; (8008c48 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	441a      	add	r2, r3
 8008c14:	4b0c      	ldr	r3, [pc, #48]	; (8008c48 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8008c1e:	885b      	ldrh	r3, [r3, #2]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	9300      	str	r3, [sp, #0]
 8008c24:	4603      	mov	r3, r0
 8008c26:	4807      	ldr	r0, [pc, #28]	; (8008c44 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8008c28:	f7fc fb45 	bl	80052b6 <HAL_DMA2D_Start>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d103      	bne.n	8008c3a <TM_DMA2DGRAPHIC_Fill+0x76>
				HAL_DMA2D_PollForTransfer(&DMA2DHandle, 20);
 8008c32:	2114      	movs	r1, #20
 8008c34:	4803      	ldr	r0, [pc, #12]	; (8008c44 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8008c36:	f7fc fb69 	bl	800530c <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8008c3a:	bf00      	nop
 8008c3c:	3708      	adds	r7, #8
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	2000147c 	.word	0x2000147c
 8008c48:	2000201c 	.word	0x2000201c
 8008c4c:	2000124c 	.word	0x2000124c

08008c50 <TM_INT_DMA2DGRAPHIC_SetConf>:
	/* Start DMA2D */
	DMA2D->CR |= DMA2D_CR_START; 
}

/* Private functions */
void TM_INT_DMA2DGRAPHIC_SetConf(TM_DMA2DGRAPHIC_INT_Conf_t* Conf) {
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
	/* Fill settings for DMA2D */
	DIS.Width = Conf->Width;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	881a      	ldrh	r2, [r3, #0]
 8008c5c:	4b1a      	ldr	r3, [pc, #104]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008c5e:	801a      	strh	r2, [r3, #0]
	DIS.Height = Conf->Height;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	885a      	ldrh	r2, [r3, #2]
 8008c64:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008c66:	805a      	strh	r2, [r3, #2]
	DIS.StartAddress = Conf->BufferStart;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	4a16      	ldr	r2, [pc, #88]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008c6e:	6093      	str	r3, [r2, #8]
	DIS.LayerOffset = Conf->BufferOffset;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	4a14      	ldr	r2, [pc, #80]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008c76:	60d3      	str	r3, [r2, #12]
	DIS.PixelSize = Conf->BytesPerPixel;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	791a      	ldrb	r2, [r3, #4]
 8008c7c:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008c7e:	779a      	strb	r2, [r3, #30]
	DIS.Pixels = DIS.Width * DIS.Height;
 8008c80:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	461a      	mov	r2, r3
 8008c88:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008c8a:	885b      	ldrh	r3, [r3, #2]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	fb03 f302 	mul.w	r3, r3, r2
 8008c92:	461a      	mov	r2, r3
 8008c94:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008c96:	619a      	str	r2, [r3, #24]
	DIS.Orientation = Conf->Orientation;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	7c1a      	ldrb	r2, [r3, #16]
 8008c9c:	4b0a      	ldr	r3, [pc, #40]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008c9e:	775a      	strb	r2, [r3, #29]
	DIS.CurrentWidth = DIS.Width;
 8008ca0:	4b09      	ldr	r3, [pc, #36]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008ca2:	881b      	ldrh	r3, [r3, #0]
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008ca8:	809a      	strh	r2, [r3, #4]
	DIS.CurrentHeight = DIS.Height;
 8008caa:	4b07      	ldr	r3, [pc, #28]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008cac:	885b      	ldrh	r3, [r3, #2]
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	4b05      	ldr	r3, [pc, #20]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008cb2:	80da      	strh	r2, [r3, #6]
	
	/* Set DMA2D orientation */
	TM_DMA2DGRAPHIC_SetOrientation(DIS.Orientation);
 8008cb4:	4b04      	ldr	r3, [pc, #16]	; (8008cc8 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8008cb6:	7f5b      	ldrb	r3, [r3, #29]
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff ff52 	bl	8008b64 <TM_DMA2DGRAPHIC_SetOrientation>
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	2000201c 	.word	0x2000201c

08008ccc <TM_EXTI_Handler>:
	EXTI->FTSR &= 0xFFFF0000;
	EXTI->RTSR &= 0xFFFF0000;
	EXTI->PR &= 0xFFFF0000;
}

__weak void TM_EXTI_Handler(uint16_t GPIO_Pin) {
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the TM_EXTI_Handler could be implemented in the user file
   */ 
}
 8008cd6:	bf00      	nop
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
	...

08008ce4 <EXTI0_IRQHandler>:
/******************************************************************/

#if defined(STM32F4xx) || defined(STM32F7xx)

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_0
void EXTI0_IRQHandler(void) {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR0)) {
 8008ce8:	4b06      	ldr	r3, [pc, #24]	; (8008d04 <EXTI0_IRQHandler+0x20>)
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d005      	beq.n	8008d00 <EXTI0_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR0;
 8008cf4:	4b03      	ldr	r3, [pc, #12]	; (8008d04 <EXTI0_IRQHandler+0x20>)
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_0);
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	f7ff ffe6 	bl	8008ccc <TM_EXTI_Handler>
	}
}
 8008d00:	bf00      	nop
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	40013c00 	.word	0x40013c00

08008d08 <EXTI1_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_1
void EXTI1_IRQHandler(void) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR1)) {
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <EXTI1_IRQHandler+0x20>)
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	f003 0302 	and.w	r3, r3, #2
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d005      	beq.n	8008d24 <EXTI1_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR1;
 8008d18:	4b03      	ldr	r3, [pc, #12]	; (8008d28 <EXTI1_IRQHandler+0x20>)
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_1);
 8008d1e:	2002      	movs	r0, #2
 8008d20:	f7ff ffd4 	bl	8008ccc <TM_EXTI_Handler>
	}
}
 8008d24:	bf00      	nop
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	40013c00 	.word	0x40013c00

08008d2c <EXTI2_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_2
void EXTI2_IRQHandler(void) {
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR2)) {
 8008d30:	4b06      	ldr	r3, [pc, #24]	; (8008d4c <EXTI2_IRQHandler+0x20>)
 8008d32:	695b      	ldr	r3, [r3, #20]
 8008d34:	f003 0304 	and.w	r3, r3, #4
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <EXTI2_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR2;
 8008d3c:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <EXTI2_IRQHandler+0x20>)
 8008d3e:	2204      	movs	r2, #4
 8008d40:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_2);
 8008d42:	2004      	movs	r0, #4
 8008d44:	f7ff ffc2 	bl	8008ccc <TM_EXTI_Handler>
	}
}
 8008d48:	bf00      	nop
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	40013c00 	.word	0x40013c00

08008d50 <EXTI3_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_3
void EXTI3_IRQHandler(void) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR3)) {
 8008d54:	4b06      	ldr	r3, [pc, #24]	; (8008d70 <EXTI3_IRQHandler+0x20>)
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	f003 0308 	and.w	r3, r3, #8
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d005      	beq.n	8008d6c <EXTI3_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR3;
 8008d60:	4b03      	ldr	r3, [pc, #12]	; (8008d70 <EXTI3_IRQHandler+0x20>)
 8008d62:	2208      	movs	r2, #8
 8008d64:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_3);
 8008d66:	2008      	movs	r0, #8
 8008d68:	f7ff ffb0 	bl	8008ccc <TM_EXTI_Handler>
	}
}
 8008d6c:	bf00      	nop
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	40013c00 	.word	0x40013c00

08008d74 <EXTI4_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_4
void EXTI4_IRQHandler(void) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR4)) {
 8008d78:	4b06      	ldr	r3, [pc, #24]	; (8008d94 <EXTI4_IRQHandler+0x20>)
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	f003 0310 	and.w	r3, r3, #16
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <EXTI4_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR4;
 8008d84:	4b03      	ldr	r3, [pc, #12]	; (8008d94 <EXTI4_IRQHandler+0x20>)
 8008d86:	2210      	movs	r2, #16
 8008d88:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_4);
 8008d8a:	2010      	movs	r0, #16
 8008d8c:	f7ff ff9e 	bl	8008ccc <TM_EXTI_Handler>
	}
}
 8008d90:	bf00      	nop
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	40013c00 	.word	0x40013c00

08008d98 <EXTI9_5_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_9_5
void EXTI9_5_IRQHandler(void) {
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR5)) {
 8008d9c:	4b20      	ldr	r3, [pc, #128]	; (8008e20 <EXTI9_5_IRQHandler+0x88>)
 8008d9e:	695b      	ldr	r3, [r3, #20]
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <EXTI9_5_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR5;
 8008da8:	4b1d      	ldr	r3, [pc, #116]	; (8008e20 <EXTI9_5_IRQHandler+0x88>)
 8008daa:	2220      	movs	r2, #32
 8008dac:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_5);
 8008dae:	2020      	movs	r0, #32
 8008db0:	f7ff ff8c 	bl	8008ccc <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR6)) {
 8008db4:	4b1a      	ldr	r3, [pc, #104]	; (8008e20 <EXTI9_5_IRQHandler+0x88>)
 8008db6:	695b      	ldr	r3, [r3, #20]
 8008db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d005      	beq.n	8008dcc <EXTI9_5_IRQHandler+0x34>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR6;
 8008dc0:	4b17      	ldr	r3, [pc, #92]	; (8008e20 <EXTI9_5_IRQHandler+0x88>)
 8008dc2:	2240      	movs	r2, #64	; 0x40
 8008dc4:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_6);
 8008dc6:	2040      	movs	r0, #64	; 0x40
 8008dc8:	f7ff ff80 	bl	8008ccc <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR7)) {
 8008dcc:	4b14      	ldr	r3, [pc, #80]	; (8008e20 <EXTI9_5_IRQHandler+0x88>)
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d005      	beq.n	8008de4 <EXTI9_5_IRQHandler+0x4c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR7;
 8008dd8:	4b11      	ldr	r3, [pc, #68]	; (8008e20 <EXTI9_5_IRQHandler+0x88>)
 8008dda:	2280      	movs	r2, #128	; 0x80
 8008ddc:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_7);
 8008dde:	2080      	movs	r0, #128	; 0x80
 8008de0:	f7ff ff74 	bl	8008ccc <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR8)) {
 8008de4:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <EXTI9_5_IRQHandler+0x88>)
 8008de6:	695b      	ldr	r3, [r3, #20]
 8008de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d007      	beq.n	8008e00 <EXTI9_5_IRQHandler+0x68>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR8;
 8008df0:	4b0b      	ldr	r3, [pc, #44]	; (8008e20 <EXTI9_5_IRQHandler+0x88>)
 8008df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008df6:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_8);
 8008df8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008dfc:	f7ff ff66 	bl	8008ccc <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR9)) {
 8008e00:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <EXTI9_5_IRQHandler+0x88>)
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d007      	beq.n	8008e1c <EXTI9_5_IRQHandler+0x84>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR9;
 8008e0c:	4b04      	ldr	r3, [pc, #16]	; (8008e20 <EXTI9_5_IRQHandler+0x88>)
 8008e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e12:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_9);
 8008e14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008e18:	f7ff ff58 	bl	8008ccc <TM_EXTI_Handler>
	}
}
 8008e1c:	bf00      	nop
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	40013c00 	.word	0x40013c00

08008e24 <EXTI15_10_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_15_10
void EXTI15_10_IRQHandler(void) {
 8008e24:	b580      	push	{r7, lr}
 8008e26:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR10)) {
 8008e28:	4b2a      	ldr	r3, [pc, #168]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d007      	beq.n	8008e44 <EXTI15_10_IRQHandler+0x20>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR10;
 8008e34:	4b27      	ldr	r3, [pc, #156]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008e36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e3a:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_10);
 8008e3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008e40:	f7ff ff44 	bl	8008ccc <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR11)) {
 8008e44:	4b23      	ldr	r3, [pc, #140]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008e46:	695b      	ldr	r3, [r3, #20]
 8008e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d007      	beq.n	8008e60 <EXTI15_10_IRQHandler+0x3c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR11;
 8008e50:	4b20      	ldr	r3, [pc, #128]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e56:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_11);
 8008e58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008e5c:	f7ff ff36 	bl	8008ccc <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR12)) {
 8008e60:	4b1c      	ldr	r3, [pc, #112]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008e62:	695b      	ldr	r3, [r3, #20]
 8008e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d007      	beq.n	8008e7c <EXTI15_10_IRQHandler+0x58>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR12;
 8008e6c:	4b19      	ldr	r3, [pc, #100]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008e6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008e72:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_12);
 8008e74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008e78:	f7ff ff28 	bl	8008ccc <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR13)) {
 8008e7c:	4b15      	ldr	r3, [pc, #84]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d007      	beq.n	8008e98 <EXTI15_10_IRQHandler+0x74>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR13;
 8008e88:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e8e:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_13);
 8008e90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008e94:	f7ff ff1a 	bl	8008ccc <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR14)) {
 8008e98:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d007      	beq.n	8008eb4 <EXTI15_10_IRQHandler+0x90>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR14;
 8008ea4:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008ea6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008eaa:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_14);
 8008eac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008eb0:	f7ff ff0c 	bl	8008ccc <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR15)) {
 8008eb4:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d007      	beq.n	8008ed0 <EXTI15_10_IRQHandler+0xac>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR15;
 8008ec0:	4b04      	ldr	r3, [pc, #16]	; (8008ed4 <EXTI15_10_IRQHandler+0xb0>)
 8008ec2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008ec6:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_15);
 8008ec8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008ecc:	f7ff fefe 	bl	8008ccc <TM_EXTI_Handler>
	}
}
 8008ed0:	bf00      	nop
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	40013c00 	.word	0x40013c00

08008ed8 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af02      	add	r7, sp, #8
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	807b      	strh	r3, [r7, #2]
 8008eea:	460b      	mov	r3, r1
 8008eec:	707b      	strb	r3, [r7, #1]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8008ef2:	887b      	ldrh	r3, [r7, #2]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00e      	beq.n	8008f16 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f875 	bl	8008fe8 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8008efe:	7838      	ldrb	r0, [r7, #0]
 8008f00:	787a      	ldrb	r2, [r7, #1]
 8008f02:	8879      	ldrh	r1, [r7, #2]
 8008f04:	7d3b      	ldrb	r3, [r7, #20]
 8008f06:	9301      	str	r3, [sp, #4]
 8008f08:	7c3b      	ldrb	r3, [r7, #16]
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f882 	bl	8009018 <TM_GPIO_INT_Init>
 8008f14:	e000      	b.n	8008f18 <TM_GPIO_Init+0x40>
		return;
 8008f16:	bf00      	nop
}
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b086      	sub	sp, #24
 8008f22:	af02      	add	r7, sp, #8
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	4608      	mov	r0, r1
 8008f28:	4611      	mov	r1, r2
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	807b      	strh	r3, [r7, #2]
 8008f30:	460b      	mov	r3, r1
 8008f32:	707b      	strb	r3, [r7, #1]
 8008f34:	4613      	mov	r3, r2
 8008f36:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8008f38:	887b      	ldrh	r3, [r7, #2]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d03f      	beq.n	8008fbe <TM_GPIO_InitAlternate+0xa0>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f852 	bl	8008fe8 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8008f44:	2300      	movs	r3, #0
 8008f46:	60fb      	str	r3, [r7, #12]
 8008f48:	e02a      	b.n	8008fa0 <TM_GPIO_InitAlternate+0x82>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8008f4a:	887a      	ldrh	r2, [r7, #2]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	fa42 f303 	asr.w	r3, r2, r3
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d01e      	beq.n	8008f98 <TM_GPIO_InitAlternate+0x7a>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	08da      	lsrs	r2, r3, #3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3208      	adds	r2, #8
 8008f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	f002 0207 	and.w	r2, r2, #7
 8008f6c:	0092      	lsls	r2, r2, #2
 8008f6e:	210f      	movs	r1, #15
 8008f70:	fa01 f202 	lsl.w	r2, r1, r2
 8008f74:	43d2      	mvns	r2, r2
 8008f76:	4013      	ands	r3, r2
 8008f78:	7f39      	ldrb	r1, [r7, #28]
 8008f7a:	68fa      	ldr	r2, [r7, #12]
 8008f7c:	f002 0207 	and.w	r2, r2, #7
 8008f80:	0092      	lsls	r2, r2, #2
 8008f82:	fa01 f202 	lsl.w	r2, r1, r2
 8008f86:	4611      	mov	r1, r2
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	08d2      	lsrs	r2, r2, #3
 8008f8c:	4319      	orrs	r1, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	3208      	adds	r2, #8
 8008f92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008f96:	e000      	b.n	8008f9a <TM_GPIO_InitAlternate+0x7c>
			continue;
 8008f98:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	60fb      	str	r3, [r7, #12]
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2b0f      	cmp	r3, #15
 8008fa4:	d9d1      	bls.n	8008f4a <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8008fa6:	787a      	ldrb	r2, [r7, #1]
 8008fa8:	8879      	ldrh	r1, [r7, #2]
 8008faa:	7e3b      	ldrb	r3, [r7, #24]
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	783b      	ldrb	r3, [r7, #0]
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	2202      	movs	r2, #2
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 f82e 	bl	8009018 <TM_GPIO_INT_Init>
 8008fbc:	e000      	b.n	8008fc0 <TM_GPIO_InitAlternate+0xa2>
		return;
 8008fbe:	bf00      	nop
}
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8008fc6:	b480      	push	{r7}
 8008fc8:	b083      	sub	sp, #12
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8008fd4:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8008fd8:	0a9b      	lsrs	r3, r3, #10
 8008fda:	b29b      	uxth	r3, r3
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr

08008fe8 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7ff ffe8 	bl	8008fc6 <TM_GPIO_GetPortSource>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	fa03 f202 	lsl.w	r2, r3, r2
 8009000:	4b04      	ldr	r3, [pc, #16]	; (8009014 <TM_GPIO_INT_EnableClock+0x2c>)
 8009002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009004:	4611      	mov	r1, r2
 8009006:	4a03      	ldr	r2, [pc, #12]	; (8009014 <TM_GPIO_INT_EnableClock+0x2c>)
 8009008:	430b      	orrs	r3, r1
 800900a:	6313      	str	r3, [r2, #48]	; 0x30
#endif
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}
 8009014:	40023800 	.word	0x40023800

08009018 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	4608      	mov	r0, r1
 8009022:	4611      	mov	r1, r2
 8009024:	461a      	mov	r2, r3
 8009026:	4603      	mov	r3, r0
 8009028:	807b      	strh	r3, [r7, #2]
 800902a:	460b      	mov	r3, r1
 800902c:	707b      	strb	r3, [r7, #1]
 800902e:	4613      	mov	r3, r2
 8009030:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff ffc7 	bl	8008fc6 <TM_GPIO_GetPortSource>
 8009038:	4603      	mov	r3, r0
 800903a:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
 8009040:	e067      	b.n	8009112 <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8009042:	887a      	ldrh	r2, [r7, #2]
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	fa42 f303 	asr.w	r3, r2, r3
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d05b      	beq.n	800910a <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8009052:	7bbb      	ldrb	r3, [r7, #14]
 8009054:	4a32      	ldr	r2, [pc, #200]	; (8009120 <TM_GPIO_INT_Init+0x108>)
 8009056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800905a:	b21a      	sxth	r2, r3
 800905c:	7bfb      	ldrb	r3, [r7, #15]
 800905e:	2101      	movs	r1, #1
 8009060:	fa01 f303 	lsl.w	r3, r1, r3
 8009064:	b21b      	sxth	r3, r3
 8009066:	4313      	orrs	r3, r2
 8009068:	b21a      	sxth	r2, r3
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	b291      	uxth	r1, r2
 800906e:	4a2c      	ldr	r2, [pc, #176]	; (8009120 <TM_GPIO_INT_Init+0x108>)
 8009070:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	7bfa      	ldrb	r2, [r7, #15]
 800907a:	0052      	lsls	r2, r2, #1
 800907c:	2103      	movs	r1, #3
 800907e:	fa01 f202 	lsl.w	r2, r1, r2
 8009082:	43d2      	mvns	r2, r2
 8009084:	4013      	ands	r3, r2
 8009086:	7e39      	ldrb	r1, [r7, #24]
 8009088:	7bfa      	ldrb	r2, [r7, #15]
 800908a:	0052      	lsls	r2, r2, #1
 800908c:	fa01 f202 	lsl.w	r2, r1, r2
 8009090:	431a      	orrs	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	7bfb      	ldrb	r3, [r7, #15]
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	2103      	movs	r1, #3
 80090a0:	fa01 f303 	lsl.w	r3, r1, r3
 80090a4:	43db      	mvns	r3, r3
 80090a6:	4013      	ands	r3, r2
 80090a8:	7879      	ldrb	r1, [r7, #1]
 80090aa:	7bfa      	ldrb	r2, [r7, #15]
 80090ac:	0052      	lsls	r2, r2, #1
 80090ae:	fa01 f202 	lsl.w	r2, r1, r2
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80090b8:	787b      	ldrb	r3, [r7, #1]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d002      	beq.n	80090c4 <TM_GPIO_INT_Init+0xac>
 80090be:	787b      	ldrb	r3, [r7, #1]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	d123      	bne.n	800910c <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	7bfa      	ldrb	r2, [r7, #15]
 80090ca:	2101      	movs	r1, #1
 80090cc:	fa01 f202 	lsl.w	r2, r1, r2
 80090d0:	b292      	uxth	r2, r2
 80090d2:	43d2      	mvns	r2, r2
 80090d4:	4013      	ands	r3, r2
 80090d6:	7839      	ldrb	r1, [r7, #0]
 80090d8:	7bfa      	ldrb	r2, [r7, #15]
 80090da:	fa01 f202 	lsl.w	r2, r1, r2
 80090de:	b292      	uxth	r2, r2
 80090e0:	431a      	orrs	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	689a      	ldr	r2, [r3, #8]
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	005b      	lsls	r3, r3, #1
 80090ee:	2103      	movs	r1, #3
 80090f0:	fa01 f303 	lsl.w	r3, r1, r3
 80090f4:	43db      	mvns	r3, r3
 80090f6:	4013      	ands	r3, r2
 80090f8:	7f39      	ldrb	r1, [r7, #28]
 80090fa:	7bfa      	ldrb	r2, [r7, #15]
 80090fc:	0052      	lsls	r2, r2, #1
 80090fe:	fa01 f202 	lsl.w	r2, r1, r2
 8009102:	431a      	orrs	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	609a      	str	r2, [r3, #8]
 8009108:	e000      	b.n	800910c <TM_GPIO_INT_Init+0xf4>
			continue;
 800910a:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	3301      	adds	r3, #1
 8009110:	73fb      	strb	r3, [r7, #15]
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	2b0f      	cmp	r3, #15
 8009116:	d994      	bls.n	8009042 <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8009118:	bf00      	nop
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	200014bc 	.word	0x200014bc

08009124 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	460b      	mov	r3, r1
 800912e:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <TM_SPI_Send+0x1c>
 800913c:	2300      	movs	r3, #0
 800913e:	e01f      	b.n	8009180 <TM_SPI_Send+0x5c>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT_TX(SPIx);
 8009140:	bf00      	nop
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	689b      	ldr	r3, [r3, #8]
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d0f9      	beq.n	8009142 <TM_SPI_Send+0x1e>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1f3      	bne.n	8009142 <TM_SPI_Send+0x1e>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 800915a:	78fa      	ldrb	r2, [r7, #3]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	60da      	str	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT_RX(SPIx);
 8009160:	bf00      	nop
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	f003 0301 	and.w	r3, r3, #1
 800916a:	2b00      	cmp	r3, #0
 800916c:	d0f9      	beq.n	8009162 <TM_SPI_Send+0x3e>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009176:	2b00      	cmp	r3, #0
 8009178:	d1f3      	bne.n	8009162 <TM_SPI_Send+0x3e>
	
	/* Return data from buffer */
	return SPIx->DR;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	b2db      	uxtb	r3, r3
}
 8009180:	4618      	mov	r0, r3
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <TM_LCD_Init>:
	uint16_t StartX;
	uint16_t CurrentY;
} TM_LCD_INT_t;
static TM_LCD_INT_t LCD;

TM_LCD_Result_t TM_LCD_Init(void) {
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
	TM_DMA2DGRAPHIC_INT_Conf_t DMA2DConf;
	
	/* Init SDRAM */
	if (!TM_SDRAM_Init()) {
 8009192:	f000 fd6f 	bl	8009c74 <TM_SDRAM_Init>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <TM_LCD_Init+0x14>
		/* Return error */
		return TM_LCD_Result_SDRAM_Error;
 800919c:	2302      	movs	r3, #2
 800919e:	e058      	b.n	8009252 <TM_LCD_Init+0xc6>
	}
	
	/* Fill default structure */
	LCD.Width = LCD_PIXEL_WIDTH;
 80091a0:	4b2e      	ldr	r3, [pc, #184]	; (800925c <TM_LCD_Init+0xd0>)
 80091a2:	22f0      	movs	r2, #240	; 0xf0
 80091a4:	801a      	strh	r2, [r3, #0]
	LCD.Height = LCD_PIXEL_HEIGHT;
 80091a6:	4b2d      	ldr	r3, [pc, #180]	; (800925c <TM_LCD_Init+0xd0>)
 80091a8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80091ac:	805a      	strh	r2, [r3, #2]
	LCD.CurrentFrameBuffer = LCD_FRAME_BUFFER;
 80091ae:	4b2b      	ldr	r3, [pc, #172]	; (800925c <TM_LCD_Init+0xd0>)
 80091b0:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 80091b4:	60da      	str	r2, [r3, #12]
	LCD.FrameStart = LCD_FRAME_BUFFER;
 80091b6:	4b29      	ldr	r3, [pc, #164]	; (800925c <TM_LCD_Init+0xd0>)
 80091b8:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 80091bc:	611a      	str	r2, [r3, #16]
	LCD.FrameOffset = LCD_BUFFER_OFFSET;
 80091be:	4b27      	ldr	r3, [pc, #156]	; (800925c <TM_LCD_Init+0xd0>)
 80091c0:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 80091c4:	615a      	str	r2, [r3, #20]
	LCD.CurrentFont = &TM_Font_11x18;
 80091c6:	4b25      	ldr	r3, [pc, #148]	; (800925c <TM_LCD_Init+0xd0>)
 80091c8:	4a25      	ldr	r2, [pc, #148]	; (8009260 <TM_LCD_Init+0xd4>)
 80091ca:	625a      	str	r2, [r3, #36]	; 0x24
	LCD.ForegroundColor = LCD_COLOR_BLACK;
 80091cc:	4b23      	ldr	r3, [pc, #140]	; (800925c <TM_LCD_Init+0xd0>)
 80091ce:	2200      	movs	r2, #0
 80091d0:	61da      	str	r2, [r3, #28]
	LCD.BackgroundColor = LCD_COLOR_WHITE;
 80091d2:	4b22      	ldr	r3, [pc, #136]	; (800925c <TM_LCD_Init+0xd0>)
 80091d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091d8:	621a      	str	r2, [r3, #32]
	LCD.Orientation = 1;
 80091da:	4b20      	ldr	r3, [pc, #128]	; (800925c <TM_LCD_Init+0xd0>)
 80091dc:	2201      	movs	r2, #1
 80091de:	721a      	strb	r2, [r3, #8]
	
	/* Set orientation */
	TM_LCD_SetOrientation(LCD.Orientation);
 80091e0:	4b1e      	ldr	r3, [pc, #120]	; (800925c <TM_LCD_Init+0xd0>)
 80091e2:	7a1b      	ldrb	r3, [r3, #8]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f000 f849 	bl	800927c <TM_LCD_SetOrientation>
	
	/* Set configrations for DMA2D */
	DMA2DConf.BufferStart = LCD_FRAME_BUFFER;
 80091ea:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80091ee:	60fb      	str	r3, [r7, #12]
	DMA2DConf.BufferOffset = LCD_BUFFER_OFFSET;
 80091f0:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 80091f4:	613b      	str	r3, [r7, #16]
	DMA2DConf.BytesPerPixel = LCD_PIXEL_SIZE;
 80091f6:	2302      	movs	r3, #2
 80091f8:	723b      	strb	r3, [r7, #8]
	DMA2DConf.Width = LCD_PIXEL_WIDTH;
 80091fa:	23f0      	movs	r3, #240	; 0xf0
 80091fc:	80bb      	strh	r3, [r7, #4]
	DMA2DConf.Height = LCD_PIXEL_HEIGHT;
 80091fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009202:	80fb      	strh	r3, [r7, #6]
	DMA2DConf.Orientation = 1;
 8009204:	2301      	movs	r3, #1
 8009206:	753b      	strb	r3, [r7, #20]
	
	/* Init LCD pins */
	TM_LCD_INT_InitPins();
 8009208:	f000 fc82 	bl	8009b10 <TM_LCD_INT_InitPins>
	
	/* Init LCD dependant settings */
	TM_LCD_INT_InitLCD();
 800920c:	f000 fb2a 	bl	8009864 <TM_LCD_INT_InitLCD>
	
	/* Init LTDC peripheral */
	TM_LCD_INT_InitLTDC();
 8009210:	f000 f9e8 	bl	80095e4 <TM_LCD_INT_InitLTDC>
	
	/* Init LTDC layers */
	TM_LCD_INT_InitLayers();
 8009214:	f000 fa64 	bl	80096e0 <TM_LCD_INT_InitLayers>
	
	/* Init DMA2D GRAPHICS */
	TM_DMA2DGRAPHIC_Init();
 8009218:	f7ff fb0c 	bl	8008834 <TM_DMA2DGRAPHIC_Init>
	
	/* Set settings */
	TM_INT_DMA2DGRAPHIC_SetConf(&DMA2DConf);
 800921c:	1d3b      	adds	r3, r7, #4
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff fd16 	bl	8008c50 <TM_INT_DMA2DGRAPHIC_SetConf>
	
	/* Enable LCD */
	TM_LCD_DisplayOn();
 8009224:	f000 f85a 	bl	80092dc <TM_LCD_DisplayOn>
	
	/* Set layer 1 as active layer */
	TM_LCD_SetLayer1();
 8009228:	f000 f982 	bl	8009530 <TM_LCD_SetLayer1>
	TM_LCD_Fill(LCD_COLOR_WHITE);
 800922c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009230:	f000 f818 	bl	8009264 <TM_LCD_Fill>
	TM_LCD_SetLayer2();
 8009234:	f000 f990 	bl	8009558 <TM_LCD_SetLayer2>
	TM_LCD_Fill(LCD_COLOR_WHITE);
 8009238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800923c:	f000 f812 	bl	8009264 <TM_LCD_Fill>
	TM_LCD_SetLayer1();
 8009240:	f000 f976 	bl	8009530 <TM_LCD_SetLayer1>
	
	/* Set layer 1 as active layer */
	TM_LCD_SetLayer1Opacity(255);
 8009244:	20ff      	movs	r0, #255	; 0xff
 8009246:	f000 f99d 	bl	8009584 <TM_LCD_SetLayer1Opacity>
	TM_LCD_SetLayer2Opacity(0);
 800924a:	2000      	movs	r0, #0
 800924c:	f000 f9ac 	bl	80095a8 <TM_LCD_SetLayer2Opacity>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8009250:	2300      	movs	r3, #0
}
 8009252:	4618      	mov	r0, r3
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	20001580 	.word	0x20001580
 8009260:	20001258 	.word	0x20001258

08009264 <TM_LCD_Fill>:

TM_LCD_Result_t TM_LCD_Fill(uint32_t color) {
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
	/* Erase memory */
	TM_DMA2DGRAPHIC_Fill(color);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f7ff fca9 	bl	8008bc4 <TM_DMA2DGRAPHIC_Fill>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <TM_LCD_SetOrientation>:

TM_LCD_Result_t TM_LCD_SetOrientation(uint8_t orientation) {
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	71fb      	strb	r3, [r7, #7]
	/* Check input */
	if (orientation > 3) {
 8009286:	79fb      	ldrb	r3, [r7, #7]
 8009288:	2b03      	cmp	r3, #3
 800928a:	d901      	bls.n	8009290 <TM_LCD_SetOrientation+0x14>
		return TM_LCD_Result_Error;
 800928c:	2301      	movs	r3, #1
 800928e:	e01e      	b.n	80092ce <TM_LCD_SetOrientation+0x52>
	}
	
	/* Save rotation */
	LCD.Orientation = orientation;
 8009290:	4a11      	ldr	r2, [pc, #68]	; (80092d8 <TM_LCD_SetOrientation+0x5c>)
 8009292:	79fb      	ldrb	r3, [r7, #7]
 8009294:	7213      	strb	r3, [r2, #8]
	
	/* Check X and Y values */
	if (
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d002      	beq.n	80092a2 <TM_LCD_SetOrientation+0x26>
		orientation == 0 ||
 800929c:	79fb      	ldrb	r3, [r7, #7]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d108      	bne.n	80092b4 <TM_LCD_SetOrientation+0x38>
		orientation == 1
	) {
		LCD.CurrentHeight = LCD.Height;
 80092a2:	4b0d      	ldr	r3, [pc, #52]	; (80092d8 <TM_LCD_SetOrientation+0x5c>)
 80092a4:	885a      	ldrh	r2, [r3, #2]
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <TM_LCD_SetOrientation+0x5c>)
 80092a8:	80da      	strh	r2, [r3, #6]
		LCD.CurrentWidth = LCD.Width;
 80092aa:	4b0b      	ldr	r3, [pc, #44]	; (80092d8 <TM_LCD_SetOrientation+0x5c>)
 80092ac:	881a      	ldrh	r2, [r3, #0]
 80092ae:	4b0a      	ldr	r3, [pc, #40]	; (80092d8 <TM_LCD_SetOrientation+0x5c>)
 80092b0:	809a      	strh	r2, [r3, #4]
 80092b2:	e007      	b.n	80092c4 <TM_LCD_SetOrientation+0x48>
	} else {
		LCD.CurrentHeight = LCD.Width;
 80092b4:	4b08      	ldr	r3, [pc, #32]	; (80092d8 <TM_LCD_SetOrientation+0x5c>)
 80092b6:	881a      	ldrh	r2, [r3, #0]
 80092b8:	4b07      	ldr	r3, [pc, #28]	; (80092d8 <TM_LCD_SetOrientation+0x5c>)
 80092ba:	80da      	strh	r2, [r3, #6]
		LCD.CurrentWidth = LCD.Height;
 80092bc:	4b06      	ldr	r3, [pc, #24]	; (80092d8 <TM_LCD_SetOrientation+0x5c>)
 80092be:	885a      	ldrh	r2, [r3, #2]
 80092c0:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <TM_LCD_SetOrientation+0x5c>)
 80092c2:	809a      	strh	r2, [r3, #4]
	}
	
	/* Rotate DMA2D graphic library */
	TM_DMA2DGRAPHIC_SetOrientation(orientation);
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7ff fc4c 	bl	8008b64 <TM_DMA2DGRAPHIC_SetOrientation>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20001580 	.word	0x20001580

080092dc <TM_LCD_DisplayOn>:

TM_LCD_Result_t TM_LCD_DisplayOn(void) {
 80092dc:	b580      	push	{r7, lr}
 80092de:	af00      	add	r7, sp, #0
	/* Enable LTDC */
	LTDC->GCR |= LTDC_GCR_LTDCEN;
 80092e0:	4b05      	ldr	r3, [pc, #20]	; (80092f8 <TM_LCD_DisplayOn+0x1c>)
 80092e2:	699b      	ldr	r3, [r3, #24]
 80092e4:	4a04      	ldr	r2, [pc, #16]	; (80092f8 <TM_LCD_DisplayOn+0x1c>)
 80092e6:	f043 0301 	orr.w	r3, r3, #1
 80092ea:	6193      	str	r3, [r2, #24]
	TM_GPIO_SetPinHigh(GPIOI, GPIO_PIN_12);	
    TM_GPIO_SetPinHigh(GPIOK, GPIO_PIN_3);
#endif
#if defined(LCD_USE_STM32F429_DISCOVERY)
	/* Send command to display on */
	TM_ILI9341_SendCommand(0x29);
 80092ec:	2029      	movs	r0, #41	; 0x29
 80092ee:	f000 fa67 	bl	80097c0 <TM_ILI9341_SendCommand>
#endif
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	40016800 	.word	0x40016800

080092fc <TM_LCD_SetXY>:
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_SetXY(uint16_t X, uint16_t Y) {
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	460a      	mov	r2, r1
 8009306:	80fb      	strh	r3, [r7, #6]
 8009308:	4613      	mov	r3, r2
 800930a:	80bb      	strh	r3, [r7, #4]
	/* Check if we are inside LCD */
	if (X >= LCD.CurrentWidth || Y >= LCD.CurrentHeight) {
 800930c:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <TM_LCD_SetXY+0x48>)
 800930e:	889b      	ldrh	r3, [r3, #4]
 8009310:	88fa      	ldrh	r2, [r7, #6]
 8009312:	429a      	cmp	r2, r3
 8009314:	d204      	bcs.n	8009320 <TM_LCD_SetXY+0x24>
 8009316:	4b0b      	ldr	r3, [pc, #44]	; (8009344 <TM_LCD_SetXY+0x48>)
 8009318:	88db      	ldrh	r3, [r3, #6]
 800931a:	88ba      	ldrh	r2, [r7, #4]
 800931c:	429a      	cmp	r2, r3
 800931e:	d301      	bcc.n	8009324 <TM_LCD_SetXY+0x28>
		return TM_LCD_Result_Error;
 8009320:	2301      	movs	r3, #1
 8009322:	e009      	b.n	8009338 <TM_LCD_SetXY+0x3c>
	}
	
	/* Set new values */
	LCD.CurrentX = X;
 8009324:	4a07      	ldr	r2, [pc, #28]	; (8009344 <TM_LCD_SetXY+0x48>)
 8009326:	88fb      	ldrh	r3, [r7, #6]
 8009328:	8513      	strh	r3, [r2, #40]	; 0x28
	LCD.CurrentY = Y;
 800932a:	4a06      	ldr	r2, [pc, #24]	; (8009344 <TM_LCD_SetXY+0x48>)
 800932c:	88bb      	ldrh	r3, [r7, #4]
 800932e:	8593      	strh	r3, [r2, #44]	; 0x2c
	LCD.StartX = X;
 8009330:	4a04      	ldr	r2, [pc, #16]	; (8009344 <TM_LCD_SetXY+0x48>)
 8009332:	88fb      	ldrh	r3, [r7, #6]
 8009334:	8553      	strh	r3, [r2, #42]	; 0x2a
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	20001580 	.word	0x20001580

08009348 <TM_LCD_SetFont>:
uint16_t TM_LCD_GetCurrentY(void) {
	/* Return current Y location for strings */
	return LCD.CurrentY;
}

TM_LCD_Result_t TM_LCD_SetFont(TM_FONT_t* Font) {
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
	/* Set new font used for drawing */
	LCD.CurrentFont = Font;
 8009350:	4a04      	ldr	r2, [pc, #16]	; (8009364 <TM_LCD_SetFont+0x1c>)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6253      	str	r3, [r2, #36]	; 0x24
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr
 8009364:	20001580 	.word	0x20001580

08009368 <TM_LCD_Putc>:
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_Putc(char c) {
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	4603      	mov	r3, r0
 8009370:	71fb      	strb	r3, [r7, #7]
	uint32_t i, b, j;
	
	/* Check current coordinates */
	if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth || c == '\n') {
 8009372:	4b4d      	ldr	r3, [pc, #308]	; (80094a8 <TM_LCD_Putc+0x140>)
 8009374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009376:	461a      	mov	r2, r3
 8009378:	4b4b      	ldr	r3, [pc, #300]	; (80094a8 <TM_LCD_Putc+0x140>)
 800937a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	4413      	add	r3, r2
 8009380:	4a49      	ldr	r2, [pc, #292]	; (80094a8 <TM_LCD_Putc+0x140>)
 8009382:	8892      	ldrh	r2, [r2, #4]
 8009384:	4293      	cmp	r3, r2
 8009386:	da02      	bge.n	800938e <TM_LCD_Putc+0x26>
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	2b0a      	cmp	r3, #10
 800938c:	d123      	bne.n	80093d6 <TM_LCD_Putc+0x6e>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		LCD.CurrentY += LCD.CurrentFont->FontHeight;
 800938e:	4b46      	ldr	r3, [pc, #280]	; (80094a8 <TM_LCD_Putc+0x140>)
 8009390:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009392:	4b45      	ldr	r3, [pc, #276]	; (80094a8 <TM_LCD_Putc+0x140>)
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	785b      	ldrb	r3, [r3, #1]
 8009398:	b29b      	uxth	r3, r3
 800939a:	4413      	add	r3, r2
 800939c:	b29a      	uxth	r2, r3
 800939e:	4b42      	ldr	r3, [pc, #264]	; (80094a8 <TM_LCD_Putc+0x140>)
 80093a0:	859a      	strh	r2, [r3, #44]	; 0x2c
		LCD.CurrentX = LCD.StartX;
 80093a2:	4b41      	ldr	r3, [pc, #260]	; (80094a8 <TM_LCD_Putc+0x140>)
 80093a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80093a6:	4b40      	ldr	r3, [pc, #256]	; (80094a8 <TM_LCD_Putc+0x140>)
 80093a8:	851a      	strh	r2, [r3, #40]	; 0x28
		
		/* Check X */
		if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth) {
 80093aa:	4b3f      	ldr	r3, [pc, #252]	; (80094a8 <TM_LCD_Putc+0x140>)
 80093ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ae:	461a      	mov	r2, r3
 80093b0:	4b3d      	ldr	r3, [pc, #244]	; (80094a8 <TM_LCD_Putc+0x140>)
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	4413      	add	r3, r2
 80093b8:	4a3b      	ldr	r2, [pc, #236]	; (80094a8 <TM_LCD_Putc+0x140>)
 80093ba:	8892      	ldrh	r2, [r2, #4]
 80093bc:	4293      	cmp	r3, r2
 80093be:	db02      	blt.n	80093c6 <TM_LCD_Putc+0x5e>
			LCD.CurrentX = 0;
 80093c0:	4b39      	ldr	r3, [pc, #228]	; (80094a8 <TM_LCD_Putc+0x140>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		
		/* Check for Y position */
		if (LCD.CurrentY >= LCD.CurrentHeight) {
 80093c6:	4b38      	ldr	r3, [pc, #224]	; (80094a8 <TM_LCD_Putc+0x140>)
 80093c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093ca:	4b37      	ldr	r3, [pc, #220]	; (80094a8 <TM_LCD_Putc+0x140>)
 80093cc:	88db      	ldrh	r3, [r3, #6]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d301      	bcc.n	80093d6 <TM_LCD_Putc+0x6e>
			/* Return error */
			return TM_LCD_Result_Error;
 80093d2:	2301      	movs	r3, #1
 80093d4:	e063      	b.n	800949e <TM_LCD_Putc+0x136>
		}
	}
	
	/* Draw character */
	if (c != '\n') {
 80093d6:	79fb      	ldrb	r3, [r7, #7]
 80093d8:	2b0a      	cmp	r3, #10
 80093da:	d05f      	beq.n	800949c <TM_LCD_Putc+0x134>
		/* Draw all pixels */
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
 80093dc:	2300      	movs	r3, #0
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	e04b      	b.n	800947a <TM_LCD_Putc+0x112>
			b = LCD.CurrentFont->data[(c - 32) * LCD.CurrentFont->FontHeight + i];
 80093e2:	4b31      	ldr	r3, [pc, #196]	; (80094a8 <TM_LCD_Putc+0x140>)
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	79fb      	ldrb	r3, [r7, #7]
 80093ea:	3b20      	subs	r3, #32
 80093ec:	492e      	ldr	r1, [pc, #184]	; (80094a8 <TM_LCD_Putc+0x140>)
 80093ee:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80093f0:	7849      	ldrb	r1, [r1, #1]
 80093f2:	fb01 f303 	mul.w	r3, r1, r3
 80093f6:	4619      	mov	r1, r3
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	440b      	add	r3, r1
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	4413      	add	r3, r2
 8009400:	881b      	ldrh	r3, [r3, #0]
 8009402:	60fb      	str	r3, [r7, #12]
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 8009404:	2300      	movs	r3, #0
 8009406:	613b      	str	r3, [r7, #16]
 8009408:	e02d      	b.n	8009466 <TM_LCD_Putc+0xfe>
				if ((b << j) & 0x8000) {
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	fa02 f303 	lsl.w	r3, r2, r3
 8009412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009416:	2b00      	cmp	r3, #0
 8009418:	d011      	beq.n	800943e <TM_LCD_Putc+0xd6>
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.ForegroundColor);
 800941a:	4b23      	ldr	r3, [pc, #140]	; (80094a8 <TM_LCD_Putc+0x140>)
 800941c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	b29b      	uxth	r3, r3
 8009422:	4413      	add	r3, r2
 8009424:	b298      	uxth	r0, r3
 8009426:	4b20      	ldr	r3, [pc, #128]	; (80094a8 <TM_LCD_Putc+0x140>)
 8009428:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	b29b      	uxth	r3, r3
 800942e:	4413      	add	r3, r2
 8009430:	b299      	uxth	r1, r3
 8009432:	4b1d      	ldr	r3, [pc, #116]	; (80094a8 <TM_LCD_Putc+0x140>)
 8009434:	69db      	ldr	r3, [r3, #28]
 8009436:	461a      	mov	r2, r3
 8009438:	f7ff fa66 	bl	8008908 <TM_DMA2DGRAPHIC_DrawPixel>
 800943c:	e010      	b.n	8009460 <TM_LCD_Putc+0xf8>
				} else {
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.BackgroundColor);
 800943e:	4b1a      	ldr	r3, [pc, #104]	; (80094a8 <TM_LCD_Putc+0x140>)
 8009440:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	b29b      	uxth	r3, r3
 8009446:	4413      	add	r3, r2
 8009448:	b298      	uxth	r0, r3
 800944a:	4b17      	ldr	r3, [pc, #92]	; (80094a8 <TM_LCD_Putc+0x140>)
 800944c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	b29b      	uxth	r3, r3
 8009452:	4413      	add	r3, r2
 8009454:	b299      	uxth	r1, r3
 8009456:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <TM_LCD_Putc+0x140>)
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	461a      	mov	r2, r3
 800945c:	f7ff fa54 	bl	8008908 <TM_DMA2DGRAPHIC_DrawPixel>
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	3301      	adds	r3, #1
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	4b10      	ldr	r3, [pc, #64]	; (80094a8 <TM_LCD_Putc+0x140>)
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	461a      	mov	r2, r3
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	4293      	cmp	r3, r2
 8009472:	d3ca      	bcc.n	800940a <TM_LCD_Putc+0xa2>
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	3301      	adds	r3, #1
 8009478:	617b      	str	r3, [r7, #20]
 800947a:	4b0b      	ldr	r3, [pc, #44]	; (80094a8 <TM_LCD_Putc+0x140>)
 800947c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947e:	785b      	ldrb	r3, [r3, #1]
 8009480:	461a      	mov	r2, r3
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	4293      	cmp	r3, r2
 8009486:	d3ac      	bcc.n	80093e2 <TM_LCD_Putc+0x7a>
				}
			}
		}
	
		/* Set new current X location */
		LCD.CurrentX += LCD.CurrentFont->FontWidth;
 8009488:	4b07      	ldr	r3, [pc, #28]	; (80094a8 <TM_LCD_Putc+0x140>)
 800948a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800948c:	4b06      	ldr	r3, [pc, #24]	; (80094a8 <TM_LCD_Putc+0x140>)
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	b29b      	uxth	r3, r3
 8009494:	4413      	add	r3, r2
 8009496:	b29a      	uxth	r2, r3
 8009498:	4b03      	ldr	r3, [pc, #12]	; (80094a8 <TM_LCD_Putc+0x140>)
 800949a:	851a      	strh	r2, [r3, #40]	; 0x28
	}
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3718      	adds	r7, #24
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20001580 	.word	0x20001580

080094ac <TM_LCD_DrawPixel>:

TM_LCD_Result_t TM_LCD_DrawPixel(uint16_t X, uint16_t Y, uint32_t color) {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	4603      	mov	r3, r0
 80094b4:	603a      	str	r2, [r7, #0]
 80094b6:	80fb      	strh	r3, [r7, #6]
 80094b8:	460b      	mov	r3, r1
 80094ba:	80bb      	strh	r3, [r7, #4]
	/* Draw pixel at desired location */
	TM_DMA2DGRAPHIC_DrawPixel(X, Y, color);
 80094bc:	88b9      	ldrh	r1, [r7, #4]
 80094be:	88fb      	ldrh	r3, [r7, #6]
 80094c0:	683a      	ldr	r2, [r7, #0]
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7ff fa20 	bl	8008908 <TM_DMA2DGRAPHIC_DrawPixel>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3708      	adds	r7, #8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <TM_LCD_GetPixel>:

uint32_t TM_LCD_GetPixel(uint16_t X, uint16_t Y) {
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b082      	sub	sp, #8
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	4603      	mov	r3, r0
 80094da:	460a      	mov	r2, r1
 80094dc:	80fb      	strh	r3, [r7, #6]
 80094de:	4613      	mov	r3, r2
 80094e0:	80bb      	strh	r3, [r7, #4]
	/* Get pixel at desired location */
	return TM_DMA2DGRAPHIC_GetPixel(X, Y);
 80094e2:	88ba      	ldrh	r2, [r7, #4]
 80094e4:	88fb      	ldrh	r3, [r7, #6]
 80094e6:	4611      	mov	r1, r2
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7ff faa7 	bl	8008a3c <TM_DMA2DGRAPHIC_GetPixel>
 80094ee:	4603      	mov	r3, r0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <TM_LCD_Puts>:

TM_LCD_Result_t TM_LCD_Puts(char* str) {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	/* Send till string ends or error returned */
	while (*str) {
 8009500:	e00c      	b.n	800951c <TM_LCD_Puts+0x24>
		/* Check if string OK */
		if (TM_LCD_Putc(*str) != TM_LCD_Result_Ok) {
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff ff2e 	bl	8009368 <TM_LCD_Putc>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <TM_LCD_Puts+0x1e>
			/* Return error */
			return TM_LCD_Result_Error;
 8009512:	2301      	movs	r3, #1
 8009514:	e007      	b.n	8009526 <TM_LCD_Puts+0x2e>
		}
		
		/* Increase pointer */
		str++;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3301      	adds	r3, #1
 800951a:	607b      	str	r3, [r7, #4]
	while (*str) {
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1ee      	bne.n	8009502 <TM_LCD_Puts+0xa>
	}
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3708      	adds	r7, #8
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
	...

08009530 <TM_LCD_SetLayer1>:

TM_LCD_Result_t TM_LCD_SetLayer1(void) {
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart;
 8009534:	4b07      	ldr	r3, [pc, #28]	; (8009554 <TM_LCD_SetLayer1+0x24>)
 8009536:	691b      	ldr	r3, [r3, #16]
 8009538:	4a06      	ldr	r2, [pc, #24]	; (8009554 <TM_LCD_SetLayer1+0x24>)
 800953a:	60d3      	str	r3, [r2, #12]
	LCD.CurrentLayer = 0;
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <TM_LCD_SetLayer1+0x24>)
 800953e:	2200      	movs	r2, #0
 8009540:	761a      	strb	r2, [r3, #24]
	
	/* Set layer for DMA2D */
	TM_DMA2DGRAPHIC_SetLayer(LCD.CurrentLayer);
 8009542:	4b04      	ldr	r3, [pc, #16]	; (8009554 <TM_LCD_SetLayer1+0x24>)
 8009544:	7e1b      	ldrb	r3, [r3, #24]
 8009546:	4618      	mov	r0, r3
 8009548:	f7ff f9c6 	bl	80088d8 <TM_DMA2DGRAPHIC_SetLayer>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800954c:	2300      	movs	r3, #0

}
 800954e:	4618      	mov	r0, r3
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20001580 	.word	0x20001580

08009558 <TM_LCD_SetLayer2>:

TM_LCD_Result_t TM_LCD_SetLayer2(void) {
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart + LCD.FrameOffset;
 800955c:	4b08      	ldr	r3, [pc, #32]	; (8009580 <TM_LCD_SetLayer2+0x28>)
 800955e:	691a      	ldr	r2, [r3, #16]
 8009560:	4b07      	ldr	r3, [pc, #28]	; (8009580 <TM_LCD_SetLayer2+0x28>)
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	4413      	add	r3, r2
 8009566:	4a06      	ldr	r2, [pc, #24]	; (8009580 <TM_LCD_SetLayer2+0x28>)
 8009568:	60d3      	str	r3, [r2, #12]
	LCD.CurrentLayer = 1;
 800956a:	4b05      	ldr	r3, [pc, #20]	; (8009580 <TM_LCD_SetLayer2+0x28>)
 800956c:	2201      	movs	r2, #1
 800956e:	761a      	strb	r2, [r3, #24]
	
	/* Set layer for DMA2D also */
	TM_DMA2DGRAPHIC_SetLayer(LCD.CurrentLayer);
 8009570:	4b03      	ldr	r3, [pc, #12]	; (8009580 <TM_LCD_SetLayer2+0x28>)
 8009572:	7e1b      	ldrb	r3, [r3, #24]
 8009574:	4618      	mov	r0, r3
 8009576:	f7ff f9af 	bl	80088d8 <TM_DMA2DGRAPHIC_SetLayer>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800957a:	2300      	movs	r3, #0
}
 800957c:	4618      	mov	r0, r3
 800957e:	bd80      	pop	{r7, pc}
 8009580:	20001580 	.word	0x20001580

08009584 <TM_LCD_SetLayer1Opacity>:

TM_LCD_Result_t TM_LCD_SetLayer1Opacity(uint8_t opacity) {
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	4603      	mov	r3, r0
 800958c:	71fb      	strb	r3, [r7, #7]
	/* Set opacity */
	HAL_LTDC_SetAlpha(&LTDCHandle, opacity, 0);
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	2200      	movs	r2, #0
 8009592:	4619      	mov	r1, r3
 8009594:	4803      	ldr	r0, [pc, #12]	; (80095a4 <TM_LCD_SetLayer1Opacity+0x20>)
 8009596:	f7fc fc65 	bl	8005e64 <HAL_LTDC_SetAlpha>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	200014d8 	.word	0x200014d8

080095a8 <TM_LCD_SetLayer2Opacity>:

TM_LCD_Result_t TM_LCD_SetLayer2Opacity(uint8_t opacity) {
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	71fb      	strb	r3, [r7, #7]
	/* Set opacity */
	HAL_LTDC_SetAlpha(&LTDCHandle, opacity, 1);
 80095b2:	79fb      	ldrb	r3, [r7, #7]
 80095b4:	2201      	movs	r2, #1
 80095b6:	4619      	mov	r1, r3
 80095b8:	4803      	ldr	r0, [pc, #12]	; (80095c8 <TM_LCD_SetLayer2Opacity+0x20>)
 80095ba:	f7fc fc53 	bl	8005e64 <HAL_LTDC_SetAlpha>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	200014d8 	.word	0x200014d8

080095cc <TM_LCD_GetHeight>:

uint16_t TM_LCD_GetWidth(void) {
	return LCD.CurrentWidth;
}

uint16_t TM_LCD_GetHeight(void) {
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
	return LCD.CurrentHeight;
 80095d0:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <TM_LCD_GetHeight+0x14>)
 80095d2:	88db      	ldrh	r3, [r3, #6]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	20001580 	.word	0x20001580

080095e4 <TM_LCD_INT_InitLTDC>:
uint8_t TM_LCD_GetOrientation(void) {
	return LCD.Orientation;
}

/* Private functions */
static void TM_LCD_INT_InitLTDC(void) {
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b08e      	sub	sp, #56	; 0x38
 80095e8:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef  periph_clk_init_struct;
	
	/* Enable LTDC and DMA2D clocks */
	__HAL_RCC_DMA2D_CLK_ENABLE();
 80095ea:	2300      	movs	r3, #0
 80095ec:	607b      	str	r3, [r7, #4]
 80095ee:	4b39      	ldr	r3, [pc, #228]	; (80096d4 <TM_LCD_INT_InitLTDC+0xf0>)
 80095f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f2:	4a38      	ldr	r2, [pc, #224]	; (80096d4 <TM_LCD_INT_InitLTDC+0xf0>)
 80095f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80095f8:	6313      	str	r3, [r2, #48]	; 0x30
 80095fa:	4b36      	ldr	r3, [pc, #216]	; (80096d4 <TM_LCD_INT_InitLTDC+0xf0>)
 80095fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009602:	607b      	str	r3, [r7, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_LTDC_CLK_ENABLE();
 8009606:	2300      	movs	r3, #0
 8009608:	603b      	str	r3, [r7, #0]
 800960a:	4b32      	ldr	r3, [pc, #200]	; (80096d4 <TM_LCD_INT_InitLTDC+0xf0>)
 800960c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800960e:	4a31      	ldr	r2, [pc, #196]	; (80096d4 <TM_LCD_INT_InitLTDC+0xf0>)
 8009610:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009614:	6453      	str	r3, [r2, #68]	; 0x44
 8009616:	4b2f      	ldr	r3, [pc, #188]	; (80096d4 <TM_LCD_INT_InitLTDC+0xf0>)
 8009618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800961e:	603b      	str	r3, [r7, #0]
 8009620:	683b      	ldr	r3, [r7, #0]
	
	/* Disable LTDC */
	LTDC->GCR &= ~LTDC_GCR_LTDCEN;
 8009622:	4b2d      	ldr	r3, [pc, #180]	; (80096d8 <TM_LCD_INT_InitLTDC+0xf4>)
 8009624:	699b      	ldr	r3, [r3, #24]
 8009626:	4a2c      	ldr	r2, [pc, #176]	; (80096d8 <TM_LCD_INT_InitLTDC+0xf4>)
 8009628:	f023 0301 	bic.w	r3, r3, #1
 800962c:	6193      	str	r3, [r2, #24]

    /* Timing configuration */     
    LTDCHandle.Init.HorizontalSync = LCD_HSYNC - 1;
 800962e:	4b2b      	ldr	r3, [pc, #172]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 8009630:	2208      	movs	r2, #8
 8009632:	615a      	str	r2, [r3, #20]
    LTDCHandle.Init.VerticalSync = LCD_VSYNC - 1;
 8009634:	4b29      	ldr	r3, [pc, #164]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 8009636:	2200      	movs	r2, #0
 8009638:	619a      	str	r2, [r3, #24]
    LTDCHandle.Init.AccumulatedHBP = LCD_HSYNC + LCD_HBP - 1;
 800963a:	4b28      	ldr	r3, [pc, #160]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 800963c:	2225      	movs	r2, #37	; 0x25
 800963e:	61da      	str	r2, [r3, #28]
    LTDCHandle.Init.AccumulatedVBP = LCD_VSYNC + LCD_VBP - 1;  
 8009640:	4b26      	ldr	r3, [pc, #152]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 8009642:	2203      	movs	r2, #3
 8009644:	621a      	str	r2, [r3, #32]
    LTDCHandle.Init.AccumulatedActiveH = LCD_PIXEL_HEIGHT + LCD_VSYNC + LCD_VBP - 1;
 8009646:	4b25      	ldr	r3, [pc, #148]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 8009648:	f240 1243 	movw	r2, #323	; 0x143
 800964c:	629a      	str	r2, [r3, #40]	; 0x28
    LTDCHandle.Init.AccumulatedActiveW = LCD_PIXEL_WIDTH + LCD_HSYNC + LCD_HBP - 1;
 800964e:	4b23      	ldr	r3, [pc, #140]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 8009650:	f240 1215 	movw	r2, #277	; 0x115
 8009654:	625a      	str	r2, [r3, #36]	; 0x24
    LTDCHandle.Init.TotalWidth = LCD_PIXEL_WIDTH + LCD_HSYNC + LCD_HBP + LCD_HFP - 1; 
 8009656:	4b21      	ldr	r3, [pc, #132]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 8009658:	f240 1217 	movw	r2, #279	; 0x117
 800965c:	62da      	str	r2, [r3, #44]	; 0x2c
    LTDCHandle.Init.TotalHeigh = LCD_PIXEL_HEIGHT + LCD_VSYNC + LCD_VBP + LCD_VFP - 1;
 800965e:	4b1f      	ldr	r3, [pc, #124]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 8009660:	f240 1245 	movw	r2, #325	; 0x145
 8009664:	631a      	str	r2, [r3, #48]	; 0x30
    /* Enable Pixel Clock */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/2 = 96 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 96/4 = 24 Mhz */
	periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8009666:	2308      	movs	r3, #8
 8009668:	60bb      	str	r3, [r7, #8]
	periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800966a:	23c0      	movs	r3, #192	; 0xc0
 800966c:	61bb      	str	r3, [r7, #24]
	periph_clk_init_struct.PLLSAI.PLLSAIR = LCD_FREQUENCY_DIV;
 800966e:	2305      	movs	r3, #5
 8009670:	623b      	str	r3, [r7, #32]
	periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8009672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009676:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8009678:	f107 0308 	add.w	r3, r7, #8
 800967c:	4618      	mov	r0, r3
 800967e:	f7fd faa9 	bl	8006bd4 <HAL_RCCEx_PeriphCLKConfig>

	/* Initialize the LCD pixel width and pixel height */
	LTDCHandle.LayerCfg->ImageWidth  = LCD_PIXEL_WIDTH;
 8009682:	4b16      	ldr	r3, [pc, #88]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 8009684:	22f0      	movs	r2, #240	; 0xf0
 8009686:	661a      	str	r2, [r3, #96]	; 0x60
	LTDCHandle.LayerCfg->ImageHeight = LCD_PIXEL_HEIGHT;
 8009688:	4b14      	ldr	r3, [pc, #80]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 800968a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800968e:	665a      	str	r2, [r3, #100]	; 0x64

	/* Background value */
	LTDCHandle.Init.Backcolor.Blue = 0;
 8009690:	4b12      	ldr	r3, [pc, #72]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LTDCHandle.Init.Backcolor.Green = 0;
 8009698:	4b10      	ldr	r3, [pc, #64]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 800969a:	2200      	movs	r2, #0
 800969c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	LTDCHandle.Init.Backcolor.Red = 0;
 80096a0:	4b0e      	ldr	r3, [pc, #56]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	/* Polarity */
	LTDCHandle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80096a8:	4b0c      	ldr	r3, [pc, #48]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	605a      	str	r2, [r3, #4]
	LTDCHandle.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80096ae:	4b0b      	ldr	r3, [pc, #44]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	609a      	str	r2, [r3, #8]
	LTDCHandle.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80096b4:	4b09      	ldr	r3, [pc, #36]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	60da      	str	r2, [r3, #12]
	LTDCHandle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80096ba:	4b08      	ldr	r3, [pc, #32]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 80096bc:	2200      	movs	r2, #0
 80096be:	611a      	str	r2, [r3, #16]
	LTDCHandle.Instance = LTDC;
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 80096c2:	4a05      	ldr	r2, [pc, #20]	; (80096d8 <TM_LCD_INT_InitLTDC+0xf4>)
 80096c4:	601a      	str	r2, [r3, #0]

	/* Init LTDC */
	HAL_LTDC_Init(&LTDCHandle);
 80096c6:	4805      	ldr	r0, [pc, #20]	; (80096dc <TM_LCD_INT_InitLTDC+0xf8>)
 80096c8:	f7fc f9fc 	bl	8005ac4 <HAL_LTDC_Init>
}
 80096cc:	bf00      	nop
 80096ce:	3738      	adds	r7, #56	; 0x38
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	40023800 	.word	0x40023800
 80096d8:	40016800 	.word	0x40016800
 80096dc:	200014d8 	.word	0x200014d8

080096e0 <TM_LCD_INT_InitLayers>:

static void TM_LCD_INT_InitLayers(void) {
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b09a      	sub	sp, #104	; 0x68
 80096e4:	af00      	add	r7, sp, #0
	LTDC_LayerCfgTypeDef layer_cfg;
	LTDC_LayerCfgTypeDef layer_cfg2;
	
	/* Layer Init */
	layer_cfg.WindowX0 = 0;
 80096e6:	2300      	movs	r3, #0
 80096e8:	637b      	str	r3, [r7, #52]	; 0x34
	layer_cfg.WindowX1 = LCD_PIXEL_WIDTH;
 80096ea:	23f0      	movs	r3, #240	; 0xf0
 80096ec:	63bb      	str	r3, [r7, #56]	; 0x38
	layer_cfg.WindowY0 = 0;
 80096ee:	2300      	movs	r3, #0
 80096f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	layer_cfg.WindowY1 = LCD_PIXEL_HEIGHT; 
 80096f2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80096f6:	643b      	str	r3, [r7, #64]	; 0x40
#if LCD_PIXEL_SIZE == 2
	layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80096f8:	2302      	movs	r3, #2
 80096fa:	647b      	str	r3, [r7, #68]	; 0x44
#else
	layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
#endif
	layer_cfg.FBStartAdress = SDRAM_START_ADR;
 80096fc:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8009700:	65bb      	str	r3, [r7, #88]	; 0x58
	layer_cfg.Alpha = 255;
 8009702:	23ff      	movs	r3, #255	; 0xff
 8009704:	64bb      	str	r3, [r7, #72]	; 0x48
	layer_cfg.Alpha0 = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	64fb      	str	r3, [r7, #76]	; 0x4c
	layer_cfg.Backcolor.Blue = 0;
 800970a:	2300      	movs	r3, #0
 800970c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	layer_cfg.Backcolor.Green = 0;
 8009710:	2300      	movs	r3, #0
 8009712:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	layer_cfg.Backcolor.Red = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800971c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009720:	653b      	str	r3, [r7, #80]	; 0x50
	layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009722:	2307      	movs	r3, #7
 8009724:	657b      	str	r3, [r7, #84]	; 0x54
	layer_cfg.ImageWidth = LCD_PIXEL_WIDTH;
 8009726:	23f0      	movs	r3, #240	; 0xf0
 8009728:	65fb      	str	r3, [r7, #92]	; 0x5c
	layer_cfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800972a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800972e:	663b      	str	r3, [r7, #96]	; 0x60

	layer_cfg2.WindowX0 = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	603b      	str	r3, [r7, #0]
		layer_cfg2.WindowX1 = 182;
 8009734:	23b6      	movs	r3, #182	; 0xb6
 8009736:	607b      	str	r3, [r7, #4]
		layer_cfg2.WindowY0 = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	60bb      	str	r3, [r7, #8]
		layer_cfg2.WindowY1 = 320;
 800973c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009740:	60fb      	str	r3, [r7, #12]
	#if LCD_PIXEL_SIZE == 2
		layer_cfg2.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8009742:	2302      	movs	r3, #2
 8009744:	613b      	str	r3, [r7, #16]
	#else
		layer_cfg2.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
	#endif

		layer_cfg2.Alpha = 255;
 8009746:	23ff      	movs	r3, #255	; 0xff
 8009748:	617b      	str	r3, [r7, #20]
		layer_cfg2.Alpha0 = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	61bb      	str	r3, [r7, #24]
		layer_cfg2.Backcolor.Blue = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		layer_cfg2.Backcolor.Green = 0;
 8009754:	2300      	movs	r3, #0
 8009756:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		layer_cfg2.Backcolor.Red = 0;
 800975a:	2300      	movs	r3, #0
 800975c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		layer_cfg2.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009760:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009764:	61fb      	str	r3, [r7, #28]
		layer_cfg2.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009766:	2307      	movs	r3, #7
 8009768:	623b      	str	r3, [r7, #32]
		layer_cfg2.ImageWidth = LCD_PIXEL_WIDTH;
 800976a:	23f0      	movs	r3, #240	; 0xf0
 800976c:	62bb      	str	r3, [r7, #40]	; 0x28
		layer_cfg2.ImageHeight = LCD_PIXEL_HEIGHT;
 800976e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8009772:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Init layer 1 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg, 0);
 8009774:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009778:	2200      	movs	r2, #0
 800977a:	4619      	mov	r1, r3
 800977c:	480e      	ldr	r0, [pc, #56]	; (80097b8 <TM_LCD_INT_InitLayers+0xd8>)
 800977e:	f7fc fb33 	bl	8005de8 <HAL_LTDC_ConfigLayer>
	
	/* Config layer 2 */
	layer_cfg.Alpha = 255;
 8009782:	23ff      	movs	r3, #255	; 0xff
 8009784:	64bb      	str	r3, [r7, #72]	; 0x48
	layer_cfg2.FBStartAdress = SDRAM_START_ADR + LCD_PIXEL_SIZE * LCD_PIXEL_HEIGHT * LCD_PIXEL_WIDTH;
 8009786:	4b0d      	ldr	r3, [pc, #52]	; (80097bc <TM_LCD_INT_InitLayers+0xdc>)
 8009788:	627b      	str	r3, [r7, #36]	; 0x24

	/* Init layer 2 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg2, 1);
 800978a:	463b      	mov	r3, r7
 800978c:	2201      	movs	r2, #1
 800978e:	4619      	mov	r1, r3
 8009790:	4809      	ldr	r0, [pc, #36]	; (80097b8 <TM_LCD_INT_InitLayers+0xd8>)
 8009792:	f7fc fb29 	bl	8005de8 <HAL_LTDC_ConfigLayer>
    
    /* Init line event interrupt */
    HAL_LTDC_ProgramLineEvent(&LTDCHandle, 0); 
 8009796:	2100      	movs	r1, #0
 8009798:	4807      	ldr	r0, [pc, #28]	; (80097b8 <TM_LCD_INT_InitLayers+0xd8>)
 800979a:	f7fc fb99 	bl	8005ed0 <HAL_LTDC_ProgramLineEvent>
  
    /* Set LTDC Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0xE, 0);   
 800979e:	2200      	movs	r2, #0
 80097a0:	210e      	movs	r1, #14
 80097a2:	2058      	movs	r0, #88	; 0x58
 80097a4:	f7fa fe95 	bl	80044d2 <HAL_NVIC_SetPriority>

    /* Enable LTDC Interrupt */
    HAL_NVIC_EnableIRQ(LTDC_IRQn);  
 80097a8:	2058      	movs	r0, #88	; 0x58
 80097aa:	f7fa feae 	bl	800450a <HAL_NVIC_EnableIRQ>
}
 80097ae:	bf00      	nop
 80097b0:	3768      	adds	r7, #104	; 0x68
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	200014d8 	.word	0x200014d8
 80097bc:	d0025800 	.word	0xd0025800

080097c0 <TM_ILI9341_SendCommand>:

/* ILI9341 related functions */
#if defined(LCD_USE_STM32F429_DISCOVERY)
static void TM_ILI9341_SendCommand(uint8_t data) {
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	4603      	mov	r3, r0
 80097c8:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 80097ca:	4b0a      	ldr	r3, [pc, #40]	; (80097f4 <TM_ILI9341_SendCommand+0x34>)
 80097cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80097d0:	619a      	str	r2, [r3, #24]
	ILI9341_CS_RESET;
 80097d2:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <TM_ILI9341_SendCommand+0x38>)
 80097d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80097d8:	619a      	str	r2, [r3, #24]
	TM_SPI_Send(ILI9341_SPI, data);
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	4619      	mov	r1, r3
 80097de:	4807      	ldr	r0, [pc, #28]	; (80097fc <TM_ILI9341_SendCommand+0x3c>)
 80097e0:	f7ff fca0 	bl	8009124 <TM_SPI_Send>
	ILI9341_CS_SET;
 80097e4:	4b04      	ldr	r3, [pc, #16]	; (80097f8 <TM_ILI9341_SendCommand+0x38>)
 80097e6:	2204      	movs	r2, #4
 80097e8:	619a      	str	r2, [r3, #24]
}
 80097ea:	bf00      	nop
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	40020c00 	.word	0x40020c00
 80097f8:	40020800 	.word	0x40020800
 80097fc:	40015000 	.word	0x40015000

08009800 <TM_ILI9341_SendData>:

static void TM_ILI9341_SendData(uint8_t data) {
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	4603      	mov	r3, r0
 8009808:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 800980a:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <TM_ILI9341_SendData+0x34>)
 800980c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009810:	619a      	str	r2, [r3, #24]
	ILI9341_CS_RESET;
 8009812:	4b09      	ldr	r3, [pc, #36]	; (8009838 <TM_ILI9341_SendData+0x38>)
 8009814:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009818:	619a      	str	r2, [r3, #24]
	TM_SPI_Send(ILI9341_SPI, data);
 800981a:	79fb      	ldrb	r3, [r7, #7]
 800981c:	4619      	mov	r1, r3
 800981e:	4807      	ldr	r0, [pc, #28]	; (800983c <TM_ILI9341_SendData+0x3c>)
 8009820:	f7ff fc80 	bl	8009124 <TM_SPI_Send>
	ILI9341_CS_SET;
 8009824:	4b04      	ldr	r3, [pc, #16]	; (8009838 <TM_ILI9341_SendData+0x38>)
 8009826:	2204      	movs	r2, #4
 8009828:	619a      	str	r2, [r3, #24]
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	40020c00 	.word	0x40020c00
 8009838:	40020800 	.word	0x40020800
 800983c:	40015000 	.word	0x40015000

08009840 <TM_ILI9341_Delay>:

static void TM_ILI9341_Delay(__IO uint32_t delay) {
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 8009848:	e002      	b.n	8009850 <TM_ILI9341_Delay+0x10>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	3b01      	subs	r3, #1
 800984e:	607b      	str	r3, [r7, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d1f9      	bne.n	800984a <TM_ILI9341_Delay+0xa>
}
 8009856:	bf00      	nop
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
	...

08009864 <TM_LCD_INT_InitLCD>:
#endif

static void TM_LCD_INT_InitLCD(void) {
 8009864:	b580      	push	{r7, lr}
 8009866:	af00      	add	r7, sp, #0
#if defined(LCD_USE_STM32F429_DISCOVERY)
	/* CS high */
	ILI9341_CS_SET;
 8009868:	4ba6      	ldr	r3, [pc, #664]	; (8009b04 <TM_LCD_INT_InitLCD+0x2a0>)
 800986a:	2204      	movs	r2, #4
 800986c:	619a      	str	r2, [r3, #24]
	
	/* Init SPI */
	TM_SPI_Init(ILI9341_SPI, ILI9341_SPI_PINS);
 800986e:	2100      	movs	r1, #0
 8009870:	48a5      	ldr	r0, [pc, #660]	; (8009b08 <TM_LCD_INT_InitLCD+0x2a4>)
 8009872:	f000 fb2b 	bl	8009ecc <TM_SPI_Init>
	
	/* Initialization sequence */
	TM_ILI9341_SendCommand(0xCA);
 8009876:	20ca      	movs	r0, #202	; 0xca
 8009878:	f7ff ffa2 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC3);
 800987c:	20c3      	movs	r0, #195	; 0xc3
 800987e:	f7ff ffbf 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 8009882:	2008      	movs	r0, #8
 8009884:	f7ff ffbc 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x50);
 8009888:	2050      	movs	r0, #80	; 0x50
 800988a:	f7ff ffb9 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 800988e:	20cf      	movs	r0, #207	; 0xcf
 8009890:	f7ff ff96 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8009894:	2000      	movs	r0, #0
 8009896:	f7ff ffb3 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 800989a:	20c1      	movs	r0, #193	; 0xc1
 800989c:	f7ff ffb0 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 80098a0:	2030      	movs	r0, #48	; 0x30
 80098a2:	f7ff ffad 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 80098a6:	20ed      	movs	r0, #237	; 0xed
 80098a8:	f7ff ff8a 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 80098ac:	2064      	movs	r0, #100	; 0x64
 80098ae:	f7ff ffa7 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 80098b2:	2003      	movs	r0, #3
 80098b4:	f7ff ffa4 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 80098b8:	2012      	movs	r0, #18
 80098ba:	f7ff ffa1 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 80098be:	2081      	movs	r0, #129	; 0x81
 80098c0:	f7ff ff9e 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 80098c4:	20e8      	movs	r0, #232	; 0xe8
 80098c6:	f7ff ff7b 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 80098ca:	2085      	movs	r0, #133	; 0x85
 80098cc:	f7ff ff98 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80098d0:	2000      	movs	r0, #0
 80098d2:	f7ff ff95 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 80098d6:	2078      	movs	r0, #120	; 0x78
 80098d8:	f7ff ff92 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 80098dc:	20cb      	movs	r0, #203	; 0xcb
 80098de:	f7ff ff6f 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 80098e2:	2039      	movs	r0, #57	; 0x39
 80098e4:	f7ff ff8c 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 80098e8:	202c      	movs	r0, #44	; 0x2c
 80098ea:	f7ff ff89 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80098ee:	2000      	movs	r0, #0
 80098f0:	f7ff ff86 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 80098f4:	2034      	movs	r0, #52	; 0x34
 80098f6:	f7ff ff83 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 80098fa:	2002      	movs	r0, #2
 80098fc:	f7ff ff80 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 8009900:	20f7      	movs	r0, #247	; 0xf7
 8009902:	f7ff ff5d 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 8009906:	2020      	movs	r0, #32
 8009908:	f7ff ff7a 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 800990c:	20ea      	movs	r0, #234	; 0xea
 800990e:	f7ff ff57 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8009912:	2000      	movs	r0, #0
 8009914:	f7ff ff74 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8009918:	2000      	movs	r0, #0
 800991a:	f7ff ff71 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 800991e:	20b1      	movs	r0, #177	; 0xb1
 8009920:	f7ff ff4e 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8009924:	2000      	movs	r0, #0
 8009926:	f7ff ff6b 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x1B);
 800992a:	201b      	movs	r0, #27
 800992c:	f7ff ff68 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 8009930:	20b6      	movs	r0, #182	; 0xb6
 8009932:	f7ff ff45 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0A);
 8009936:	200a      	movs	r0, #10
 8009938:	f7ff ff62 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xA2);
 800993c:	20a2      	movs	r0, #162	; 0xa2
 800993e:	f7ff ff5f 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 8009942:	20c0      	movs	r0, #192	; 0xc0
 8009944:	f7ff ff3c 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 8009948:	2010      	movs	r0, #16
 800994a:	f7ff ff59 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 800994e:	20c1      	movs	r0, #193	; 0xc1
 8009950:	f7ff ff36 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 8009954:	2010      	movs	r0, #16
 8009956:	f7ff ff53 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 800995a:	20c5      	movs	r0, #197	; 0xc5
 800995c:	f7ff ff30 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x45);
 8009960:	2045      	movs	r0, #69	; 0x45
 8009962:	f7ff ff4d 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x15);
 8009966:	2015      	movs	r0, #21
 8009968:	f7ff ff4a 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 800996c:	20c7      	movs	r0, #199	; 0xc7
 800996e:	f7ff ff27 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x90);
 8009972:	2090      	movs	r0, #144	; 0x90
 8009974:	f7ff ff44 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 8009978:	2036      	movs	r0, #54	; 0x36
 800997a:	f7ff ff21 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC8);
 800997e:	20c8      	movs	r0, #200	; 0xc8
 8009980:	f7ff ff3e 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 8009984:	20f2      	movs	r0, #242	; 0xf2
 8009986:	f7ff ff1b 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800998a:	2000      	movs	r0, #0
 800998c:	f7ff ff38 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_RGB_INTERFACE);
 8009990:	20b0      	movs	r0, #176	; 0xb0
 8009992:	f7ff ff15 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC2);
 8009996:	20c2      	movs	r0, #194	; 0xc2
 8009998:	f7ff ff32 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 800999c:	20b6      	movs	r0, #182	; 0xb6
 800999e:	f7ff ff0f 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0A);
 80099a2:	200a      	movs	r0, #10
 80099a4:	f7ff ff2c 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xA7);
 80099a8:	20a7      	movs	r0, #167	; 0xa7
 80099aa:	f7ff ff29 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 80099ae:	2027      	movs	r0, #39	; 0x27
 80099b0:	f7ff ff26 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x04);
 80099b4:	2004      	movs	r0, #4
 80099b6:	f7ff ff23 	bl	8009800 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 80099ba:	202a      	movs	r0, #42	; 0x2a
 80099bc:	f7ff ff00 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80099c0:	2000      	movs	r0, #0
 80099c2:	f7ff ff1d 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80099c6:	2000      	movs	r0, #0
 80099c8:	f7ff ff1a 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80099cc:	2000      	movs	r0, #0
 80099ce:	f7ff ff17 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 80099d2:	20ef      	movs	r0, #239	; 0xef
 80099d4:	f7ff ff14 	bl	8009800 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 80099d8:	202b      	movs	r0, #43	; 0x2b
 80099da:	f7ff fef1 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80099de:	2000      	movs	r0, #0
 80099e0:	f7ff ff0e 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80099e4:	2000      	movs	r0, #0
 80099e6:	f7ff ff0b 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 80099ea:	2001      	movs	r0, #1
 80099ec:	f7ff ff08 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 80099f0:	203f      	movs	r0, #63	; 0x3f
 80099f2:	f7ff ff05 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_INTERFACE);
 80099f6:	20f6      	movs	r0, #246	; 0xf6
 80099f8:	f7ff fee2 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 80099fc:	2001      	movs	r0, #1
 80099fe:	f7ff feff 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8009a02:	2000      	movs	r0, #0
 8009a04:	f7ff fefc 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x06);
 8009a08:	2006      	movs	r0, #6
 8009a0a:	f7ff fef9 	bl	8009800 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8009a0e:	202c      	movs	r0, #44	; 0x2c
 8009a10:	f7ff fed6 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(1000000);
 8009a14:	483d      	ldr	r0, [pc, #244]	; (8009b0c <TM_LCD_INT_InitLCD+0x2a8>)
 8009a16:	f7ff ff13 	bl	8009840 <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 8009a1a:	2026      	movs	r0, #38	; 0x26
 8009a1c:	f7ff fed0 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 8009a20:	2001      	movs	r0, #1
 8009a22:	f7ff feed 	bl	8009800 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 8009a26:	20e0      	movs	r0, #224	; 0xe0
 8009a28:	f7ff feca 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 8009a2c:	200f      	movs	r0, #15
 8009a2e:	f7ff fee7 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x29);
 8009a32:	2029      	movs	r0, #41	; 0x29
 8009a34:	f7ff fee4 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x24);
 8009a38:	2024      	movs	r0, #36	; 0x24
 8009a3a:	f7ff fee1 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8009a3e:	200c      	movs	r0, #12
 8009a40:	f7ff fede 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8009a44:	200e      	movs	r0, #14
 8009a46:	f7ff fedb 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 8009a4a:	2009      	movs	r0, #9
 8009a4c:	f7ff fed8 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 8009a50:	204e      	movs	r0, #78	; 0x4e
 8009a52:	f7ff fed5 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 8009a56:	2078      	movs	r0, #120	; 0x78
 8009a58:	f7ff fed2 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3C);
 8009a5c:	203c      	movs	r0, #60	; 0x3c
 8009a5e:	f7ff fecf 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 8009a62:	2009      	movs	r0, #9
 8009a64:	f7ff fecc 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x13);
 8009a68:	2013      	movs	r0, #19
 8009a6a:	f7ff fec9 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x05);
 8009a6e:	2005      	movs	r0, #5
 8009a70:	f7ff fec6 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x17);
 8009a74:	2017      	movs	r0, #23
 8009a76:	f7ff fec3 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 8009a7a:	2011      	movs	r0, #17
 8009a7c:	f7ff fec0 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8009a80:	2000      	movs	r0, #0
 8009a82:	f7ff febd 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 8009a86:	20e1      	movs	r0, #225	; 0xe1
 8009a88:	f7ff fe9a 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8009a8c:	2000      	movs	r0, #0
 8009a8e:	f7ff feb7 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x16);
 8009a92:	2016      	movs	r0, #22
 8009a94:	f7ff feb4 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x1B);
 8009a98:	201b      	movs	r0, #27
 8009a9a:	f7ff feb1 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x04);
 8009a9e:	2004      	movs	r0, #4
 8009aa0:	f7ff feae 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 8009aa4:	2011      	movs	r0, #17
 8009aa6:	f7ff feab 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 8009aaa:	2007      	movs	r0, #7
 8009aac:	f7ff fea8 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 8009ab0:	2031      	movs	r0, #49	; 0x31
 8009ab2:	f7ff fea5 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x33);
 8009ab6:	2033      	movs	r0, #51	; 0x33
 8009ab8:	f7ff fea2 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x42);
 8009abc:	2042      	movs	r0, #66	; 0x42
 8009abe:	f7ff fe9f 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x05);
 8009ac2:	2005      	movs	r0, #5
 8009ac4:	f7ff fe9c 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 8009ac8:	200c      	movs	r0, #12
 8009aca:	f7ff fe99 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0A);
 8009ace:	200a      	movs	r0, #10
 8009ad0:	f7ff fe96 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 8009ad4:	2028      	movs	r0, #40	; 0x28
 8009ad6:	f7ff fe93 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2F);
 8009ada:	202f      	movs	r0, #47	; 0x2f
 8009adc:	f7ff fe90 	bl	8009800 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 8009ae0:	200f      	movs	r0, #15
 8009ae2:	f7ff fe8d 	bl	8009800 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 8009ae6:	2011      	movs	r0, #17
 8009ae8:	f7ff fe6a 	bl	80097c0 <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(1000000);
 8009aec:	4807      	ldr	r0, [pc, #28]	; (8009b0c <TM_LCD_INT_InitLCD+0x2a8>)
 8009aee:	f7ff fea7 	bl	8009840 <TM_ILI9341_Delay>
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 8009af2:	2029      	movs	r0, #41	; 0x29
 8009af4:	f7ff fe64 	bl	80097c0 <TM_ILI9341_SendCommand>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8009af8:	202c      	movs	r0, #44	; 0x2c
 8009afa:	f7ff fe61 	bl	80097c0 <TM_ILI9341_SendCommand>
#endif
}
 8009afe:	bf00      	nop
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	40020800 	.word	0x40020800
 8009b08:	40015000 	.word	0x40015000
 8009b0c:	000f4240 	.word	0x000f4240

08009b10 <TM_LCD_INT_InitPins>:

static void TM_LCD_INT_InitPins(void) {
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af02      	add	r7, sp, #8
	/* LCD pins */
	TM_GPIO_InitAlternate(GPIOI, 0xF000, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, 0x0E);
	TM_GPIO_InitAlternate(GPIOJ, 0xFFFF, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, 0x0E);
	TM_GPIO_InitAlternate(GPIOK, 0x00FF, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, 0x0E);	
#elif defined(LCD_USE_STM32F429_DISCOVERY)
	TM_GPIO_Init(ILI9341_WRX_PORT, ILI9341_WRX_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
 8009b16:	2301      	movs	r3, #1
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	2201      	movs	r2, #1
 8009b22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009b26:	4833      	ldr	r0, [pc, #204]	; (8009bf4 <TM_LCD_INT_InitPins+0xe4>)
 8009b28:	f7ff f9d6 	bl	8008ed8 <TM_GPIO_Init>
	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	2300      	movs	r3, #0
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	2201      	movs	r2, #1
 8009b38:	2104      	movs	r1, #4
 8009b3a:	482f      	ldr	r0, [pc, #188]	; (8009bf8 <TM_LCD_INT_InitPins+0xe8>)
 8009b3c:	f7ff f9cc 	bl	8008ed8 <TM_GPIO_Init>
	TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 8009b40:	230e      	movs	r3, #14
 8009b42:	9301      	str	r3, [sp, #4]
 8009b44:	2303      	movs	r3, #3
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	2300      	movs	r3, #0
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f641 0158 	movw	r1, #6232	; 0x1858
 8009b50:	482a      	ldr	r0, [pc, #168]	; (8009bfc <TM_LCD_INT_InitPins+0xec>)
 8009b52:	f7ff f9e4 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 8009b56:	230e      	movs	r3, #14
 8009b58:	9301      	str	r3, [sp, #4]
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	2200      	movs	r2, #0
 8009b62:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8009b66:	4826      	ldr	r0, [pc, #152]	; (8009c00 <TM_LCD_INT_InitPins+0xf0>)
 8009b68:	f7ff f9d9 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF9_LTDC);
 8009b6c:	2309      	movs	r3, #9
 8009b6e:	9301      	str	r3, [sp, #4]
 8009b70:	2303      	movs	r3, #3
 8009b72:	9300      	str	r3, [sp, #0]
 8009b74:	2300      	movs	r3, #0
 8009b76:	2200      	movs	r2, #0
 8009b78:	2103      	movs	r1, #3
 8009b7a:	4821      	ldr	r0, [pc, #132]	; (8009c00 <TM_LCD_INT_InitPins+0xf0>)
 8009b7c:	f7ff f9cf 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 8009b80:	230e      	movs	r3, #14
 8009b82:	9301      	str	r3, [sp, #4]
 8009b84:	2303      	movs	r3, #3
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 8009b90:	4819      	ldr	r0, [pc, #100]	; (8009bf8 <TM_LCD_INT_InitPins+0xe8>)
 8009b92:	f7ff f9c4 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_3 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 8009b96:	230e      	movs	r3, #14
 8009b98:	9301      	str	r3, [sp, #4]
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2148      	movs	r1, #72	; 0x48
 8009ba4:	4813      	ldr	r0, [pc, #76]	; (8009bf4 <TM_LCD_INT_InitPins+0xe4>)
 8009ba6:	f7ff f9ba 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 8009baa:	230e      	movs	r3, #14
 8009bac:	9301      	str	r3, [sp, #4]
 8009bae:	2303      	movs	r3, #3
 8009bb0:	9300      	str	r3, [sp, #0]
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009bba:	4812      	ldr	r0, [pc, #72]	; (8009c04 <TM_LCD_INT_InitPins+0xf4>)
 8009bbc:	f7ff f9af 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 8009bc0:	230e      	movs	r3, #14
 8009bc2:	9301      	str	r3, [sp, #4]
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
 8009bd0:	480d      	ldr	r0, [pc, #52]	; (8009c08 <TM_LCD_INT_InitPins+0xf8>)
 8009bd2:	f7ff f9a4 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_10 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF9_LTDC);
 8009bd6:	2309      	movs	r3, #9
 8009bd8:	9301      	str	r3, [sp, #4]
 8009bda:	2303      	movs	r3, #3
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	2300      	movs	r3, #0
 8009be0:	2200      	movs	r2, #0
 8009be2:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8009be6:	4808      	ldr	r0, [pc, #32]	; (8009c08 <TM_LCD_INT_InitPins+0xf8>)
 8009be8:	f7ff f999 	bl	8008f1e <TM_GPIO_InitAlternate>
#endif
}
 8009bec:	bf00      	nop
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	40020c00 	.word	0x40020c00
 8009bf8:	40020800 	.word	0x40020800
 8009bfc:	40020000 	.word	0x40020000
 8009c00:	40020400 	.word	0x40020400
 8009c04:	40021400 	.word	0x40021400
 8009c08:	40021800 	.word	0x40021800

08009c0c <LTDC_IRQHandler>:

/* Interrupt handler */
void LTDC_IRQHandler(void) {
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
    HAL_LTDC_IRQHandler(&LTDCHandle);
 8009c10:	4802      	ldr	r0, [pc, #8]	; (8009c1c <LTDC_IRQHandler+0x10>)
 8009c12:	f7fc f827 	bl	8005c64 <HAL_LTDC_IRQHandler>
}
 8009c16:	bf00      	nop
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	200014d8 	.word	0x200014d8

08009c20 <TM_PVD_Handler>:
}

/*****************************************************************/
/*                 PVD INTERRUPT USER CALLBACK                   */
/*****************************************************************/
__weak void TM_PVD_Handler(uint8_t status) {
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	71fb      	strb	r3, [r7, #7]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_PVD_Handler could be implemented in the user file
	*/
}
 8009c2a:	bf00      	nop
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
	...

08009c38 <PVD_IRQHandler>:

/*****************************************************************/
/*                    PVD INTERRUPT HANDLER                      */
/*****************************************************************/
void PVD_IRQHandler(void) {
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	af00      	add	r7, sp, #0
	/* Call user function if needed */
	if (__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET) {
 8009c3c:	4b0b      	ldr	r3, [pc, #44]	; (8009c6c <PVD_IRQHandler+0x34>)
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00f      	beq.n	8009c68 <PVD_IRQHandler+0x30>
#if defined(PWR_CSR_PVDO)	
		/* Call user function with status */
		TM_PVD_Handler((PWR->CSR & PWR_CSR_PVDO) ? 1 : 0);
 8009c48:	4b09      	ldr	r3, [pc, #36]	; (8009c70 <PVD_IRQHandler+0x38>)
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f003 0304 	and.w	r3, r3, #4
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	bf14      	ite	ne
 8009c54:	2301      	movne	r3, #1
 8009c56:	2300      	moveq	r3, #0
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7ff ffe0 	bl	8009c20 <TM_PVD_Handler>
#if defined(PWR_CSR1_PVDO)
		/* Call user function with status */
		TM_PVD_Handler((PWR->CSR1 & PWR_CSR1_PVDO) ? 1 : 0);
#endif
		/* Clear PWR EXTI pending bit */
		__HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8009c60:	4b02      	ldr	r3, [pc, #8]	; (8009c6c <PVD_IRQHandler+0x34>)
 8009c62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009c66:	615a      	str	r2, [r3, #20]
	}
}
 8009c68:	bf00      	nop
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	40013c00 	.word	0x40013c00
 8009c70:	40007000 	.word	0x40007000

08009c74 <TM_SDRAM_Init>:
#include "tm_stm32_sdram.h"

/* Internal functions */
static void TM_SDRAM_InitPins(void);

uint8_t TM_SDRAM_Init(void) {
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b09a      	sub	sp, #104	; 0x68
 8009c78:	af00      	add	r7, sp, #0
	SDRAM_HandleTypeDef SDRAMHandle;
	FMC_SDRAM_TimingTypeDef Timing;
	FMC_SDRAM_CommandTypeDef Command;

	volatile uint32_t timeout = SDRAM_TIMEOUT;
 8009c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c7e:	607b      	str	r3, [r7, #4]
	static uint8_t initialized = 0;
	
	/* Already initialized */
	if (initialized) {
 8009c80:	4b5a      	ldr	r3, [pc, #360]	; (8009dec <TM_SDRAM_Init+0x178>)
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d001      	beq.n	8009c8c <TM_SDRAM_Init+0x18>
		return 1;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e0aa      	b.n	8009de2 <TM_SDRAM_Init+0x16e>
	}
	
	/* Set instance */
	SDRAMHandle.Instance = FMC_SDRAM_DEVICE;
 8009c8c:	4b58      	ldr	r3, [pc, #352]	; (8009df0 <TM_SDRAM_Init+0x17c>)
 8009c8e:	637b      	str	r3, [r7, #52]	; 0x34
	
	/* Initialize FMC pins */
	TM_SDRAM_InitPins();
 8009c90:	f000 f8c2 	bl	8009e18 <TM_SDRAM_InitPins>
	
	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 8009c94:	2300      	movs	r3, #0
 8009c96:	603b      	str	r3, [r7, #0]
 8009c98:	4b56      	ldr	r3, [pc, #344]	; (8009df4 <TM_SDRAM_Init+0x180>)
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9c:	4a55      	ldr	r2, [pc, #340]	; (8009df4 <TM_SDRAM_Init+0x180>)
 8009c9e:	f043 0301 	orr.w	r3, r3, #1
 8009ca2:	6393      	str	r3, [r2, #56]	; 0x38
 8009ca4:	4b53      	ldr	r3, [pc, #332]	; (8009df4 <TM_SDRAM_Init+0x180>)
 8009ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ca8:	f003 0301 	and.w	r3, r3, #1
 8009cac:	603b      	str	r3, [r7, #0]
 8009cae:	683b      	ldr	r3, [r7, #0]
	/* FMC SDRAM device initialization sequence --------------------------------*/ 
	/* Step 1 ----------------------------------------------------*/ 
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	Timing.LoadToActiveDelay    = 2;
 8009cb0:	2302      	movs	r3, #2
 8009cb2:	61bb      	str	r3, [r7, #24]
	Timing.ExitSelfRefreshDelay = 7;
 8009cb4:	2307      	movs	r3, #7
 8009cb6:	61fb      	str	r3, [r7, #28]
	Timing.SelfRefreshTime      = 4;
 8009cb8:	2304      	movs	r3, #4
 8009cba:	623b      	str	r3, [r7, #32]
	Timing.RowCycleDelay        = 7;
 8009cbc:	2307      	movs	r3, #7
 8009cbe:	627b      	str	r3, [r7, #36]	; 0x24
	Timing.WriteRecoveryTime    = 2;
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	62bb      	str	r3, [r7, #40]	; 0x28
	Timing.RPDelay              = 2;
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
	Timing.RCDDelay             = 2;
 8009cc8:	2302      	movs	r3, #2
 8009cca:	633b      	str	r3, [r7, #48]	; 0x30
	
	
	/* FMC SDRAM control configuration */
	SDRAMHandle.Init.SDBank             = SDRAM_BANK;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	63bb      	str	r3, [r7, #56]	; 0x38
	SDRAMHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	SDRAMHandle.Init.RowBitsNumber      = SDRAM_ROWBITS_NUMBER;
 8009cd4:	2304      	movs	r3, #4
 8009cd6:	643b      	str	r3, [r7, #64]	; 0x40
	SDRAMHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8009cd8:	2310      	movs	r3, #16
 8009cda:	647b      	str	r3, [r7, #68]	; 0x44
	SDRAMHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009cdc:	2340      	movs	r3, #64	; 0x40
 8009cde:	64bb      	str	r3, [r7, #72]	; 0x48
	SDRAMHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8009ce0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
	SDRAMHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	653b      	str	r3, [r7, #80]	; 0x50
	SDRAMHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8009cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cee:	657b      	str	r3, [r7, #84]	; 0x54
	SDRAMHandle.Init.ReadBurst          = SDRAM_READ_BURST_STATE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	65bb      	str	r3, [r7, #88]	; 0x58
	SDRAMHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
	
	/* FMC SDRAM bank initialization */
	HAL_SDRAM_Init(&SDRAMHandle, &Timing);
 8009cf8:	f107 0218 	add.w	r2, r7, #24
 8009cfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fd f924 	bl	8006f50 <HAL_SDRAM_Init>
	
	/* SDRAM Init sequence */
	
	/* Configure a clock configuration enable command */
	Command.CommandMode				= FMC_SDRAM_CMD_CLK_ENABLE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget 			= SDRAM_COMMAND_TARGET_BANK;
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber 		= 1;
 8009d10:	2301      	movs	r3, #1
 8009d12:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	617b      	str	r3, [r7, #20]
	
	/* Send command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8009d18:	f107 0108 	add.w	r1, r7, #8
 8009d1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7fd f947 	bl	8006fb8 <HAL_SDRAM_SendCommand>
	
	/* Little delay */
	timeout = SDRAM_TIMEOUT * 0xF;
 8009d2a:	4b33      	ldr	r3, [pc, #204]	; (8009df8 <TM_SDRAM_Init+0x184>)
 8009d2c:	607b      	str	r3, [r7, #4]
	while (timeout--);
 8009d2e:	bf00      	nop
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	1e5a      	subs	r2, r3, #1
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d1fa      	bne.n	8009d30 <TM_SDRAM_Init+0xbc>
	
	/* Configure a PALL (precharge all) command */ 
	Command.CommandMode          	= FMC_SDRAM_CMD_PALL;
 8009d3a:	2302      	movs	r3, #2
 8009d3c:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8009d3e:	2308      	movs	r3, #8
 8009d40:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber      	= 1;
 8009d42:	2301      	movs	r3, #1
 8009d44:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= 0;
 8009d46:	2300      	movs	r3, #0
 8009d48:	617b      	str	r3, [r7, #20]
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8009d4a:	f107 0108 	add.w	r1, r7, #8
 8009d4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fd f92e 	bl	8006fb8 <HAL_SDRAM_SendCommand>

	/* Configure a Auto-Refresh command */ 
	Command.CommandMode            	= FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8009d60:	2308      	movs	r3, #8
 8009d62:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber      	= 8;
 8009d64:	2308      	movs	r3, #8
 8009d66:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= 0;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	617b      	str	r3, [r7, #20]
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8009d6c:	f107 0108 	add.w	r1, r7, #8
 8009d70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fd f91d 	bl	8006fb8 <HAL_SDRAM_SendCommand>
	
	/* Configure a load Mode register command */
	Command.CommandMode            	= FMC_SDRAM_CMD_LOAD_MODE;
 8009d7e:	2304      	movs	r3, #4
 8009d80:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8009d82:	2308      	movs	r3, #8
 8009d84:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber      	= 1;
 8009d86:	2301      	movs	r3, #1
 8009d88:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= (uint32_t)SDRAM_REG_VALUE;
 8009d8a:	f240 2331 	movw	r3, #561	; 0x231
 8009d8e:	617b      	str	r3, [r7, #20]
	
	/* Wait until the SDRAM controller is ready */
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8009d90:	f107 0108 	add.w	r1, r7, #8
 8009d94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fd f90b 	bl	8006fb8 <HAL_SDRAM_SendCommand>
  
	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(&SDRAMHandle, SDRAM_REFRESH_COUNT); 
 8009da2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009da6:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fd f92f 	bl	800700e <HAL_SDRAM_ProgramRefreshRate>
	
	/* Little delay */
	timeout = SDRAM_TIMEOUT * 0xF;
 8009db0:	4b11      	ldr	r3, [pc, #68]	; (8009df8 <TM_SDRAM_Init+0x184>)
 8009db2:	607b      	str	r3, [r7, #4]
	while (timeout--);
 8009db4:	bf00      	nop
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	1e5a      	subs	r2, r3, #1
 8009dba:	607a      	str	r2, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1fa      	bne.n	8009db6 <TM_SDRAM_Init+0x142>
	
	/* Check if everything goes right */
	/* Write 0x45 at location 0x50 and check if result is the same on read operation */
	TM_SDRAM_Write8(0x50, 0x45);
 8009dc0:	4b0e      	ldr	r3, [pc, #56]	; (8009dfc <TM_SDRAM_Init+0x188>)
 8009dc2:	2245      	movs	r2, #69	; 0x45
 8009dc4:	701a      	strb	r2, [r3, #0]
	
	/* Read and check */
	if (TM_SDRAM_Read8(0x50) == 0x45) {
 8009dc6:	4b0d      	ldr	r3, [pc, #52]	; (8009dfc <TM_SDRAM_Init+0x188>)
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	b2db      	uxtb	r3, r3
 8009dcc:	2b45      	cmp	r3, #69	; 0x45
 8009dce:	d104      	bne.n	8009dda <TM_SDRAM_Init+0x166>
		/* Initialized OK */
		initialized = 1;
 8009dd0:	4b06      	ldr	r3, [pc, #24]	; (8009dec <TM_SDRAM_Init+0x178>)
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	701a      	strb	r2, [r3, #0]
		/* Initialized OK */
		return 1;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e003      	b.n	8009de2 <TM_SDRAM_Init+0x16e>
	}
	
	/* Not initialized OK */
	initialized = 0;
 8009dda:	4b04      	ldr	r3, [pc, #16]	; (8009dec <TM_SDRAM_Init+0x178>)
 8009ddc:	2200      	movs	r2, #0
 8009dde:	701a      	strb	r2, [r3, #0]
	
	/* Not ok */
	return 0;
 8009de0:	2300      	movs	r3, #0
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3768      	adds	r7, #104	; 0x68
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	200015b0 	.word	0x200015b0
 8009df0:	a0000140 	.word	0xa0000140
 8009df4:	40023800 	.word	0x40023800
 8009df8:	000efff1 	.word	0x000efff1
 8009dfc:	d0000050 	.word	0xd0000050

08009e00 <TM_SDRAM_InitCustomPinsCallback>:

__weak uint8_t TM_SDRAM_InitCustomPinsCallback(uint16_t AlternateFunction) {
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	80fb      	strh	r3, [r7, #6]
	/* NOTE: This function Should not be modified, when the callback is needed,
             the TM_SDRAM_InitCustomPinsCallback could be implemented in the user file
	*/
	
	/* Return 0, use pins already supported from library */
	return 0;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <TM_SDRAM_InitPins>:

/* Private functions */
static void TM_SDRAM_InitPins(void) {
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af02      	add	r7, sp, #8
	/* Try to initialize from user */
	if (TM_SDRAM_InitCustomPinsCallback(GPIO_AF12_FMC)) {
 8009e1e:	200c      	movs	r0, #12
 8009e20:	f7ff ffee 	bl	8009e00 <TM_SDRAM_InitCustomPinsCallback>
 8009e24:	4603      	mov	r3, r0
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d140      	bne.n	8009eac <TM_SDRAM_InitPins+0x94>
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
#elif defined(SDRAM_USE_STM32F429_DISCOVERY)
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8009e2a:	230c      	movs	r3, #12
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	2303      	movs	r3, #3
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	2300      	movs	r3, #0
 8009e34:	2200      	movs	r2, #0
 8009e36:	2160      	movs	r1, #96	; 0x60
 8009e38:	481e      	ldr	r0, [pc, #120]	; (8009eb4 <TM_SDRAM_InitPins+0x9c>)
 8009e3a:	f7ff f870 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_0, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8009e3e:	230c      	movs	r3, #12
 8009e40:	9301      	str	r3, [sp, #4]
 8009e42:	2303      	movs	r3, #3
 8009e44:	9300      	str	r3, [sp, #0]
 8009e46:	2300      	movs	r3, #0
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	481a      	ldr	r0, [pc, #104]	; (8009eb8 <TM_SDRAM_InitPins+0xa0>)
 8009e4e:	f7ff f866 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8009e52:	230c      	movs	r3, #12
 8009e54:	9301      	str	r3, [sp, #4]
 8009e56:	2303      	movs	r3, #3
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f24c 7103 	movw	r1, #50947	; 0xc703
 8009e62:	4816      	ldr	r0, [pc, #88]	; (8009ebc <TM_SDRAM_InitPins+0xa4>)
 8009e64:	f7ff f85b 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8009e68:	230c      	movs	r3, #12
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	2300      	movs	r3, #0
 8009e72:	2200      	movs	r2, #0
 8009e74:	f64f 7183 	movw	r1, #65411	; 0xff83
 8009e78:	4811      	ldr	r0, [pc, #68]	; (8009ec0 <TM_SDRAM_InitPins+0xa8>)
 8009e7a:	f7ff f850 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8009e7e:	230c      	movs	r3, #12
 8009e80:	9301      	str	r3, [sp, #4]
 8009e82:	2303      	movs	r3, #3
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	2300      	movs	r3, #0
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8009e8e:	480d      	ldr	r0, [pc, #52]	; (8009ec4 <TM_SDRAM_InitPins+0xac>)
 8009e90:	f7ff f845 	bl	8008f1e <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8009e94:	230c      	movs	r3, #12
 8009e96:	9301      	str	r3, [sp, #4]
 8009e98:	2303      	movs	r3, #3
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f248 1133 	movw	r1, #33075	; 0x8133
 8009ea4:	4808      	ldr	r0, [pc, #32]	; (8009ec8 <TM_SDRAM_InitPins+0xb0>)
 8009ea6:	f7ff f83a 	bl	8008f1e <TM_GPIO_InitAlternate>
 8009eaa:	e000      	b.n	8009eae <TM_SDRAM_InitPins+0x96>
		return;
 8009eac:	bf00      	nop
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
#endif
}
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	40020400 	.word	0x40020400
 8009eb8:	40020800 	.word	0x40020800
 8009ebc:	40020c00 	.word	0x40020c00
 8009ec0:	40021000 	.word	0x40021000
 8009ec4:	40021400 	.word	0x40021400
 8009ec8:	40021800 	.word	0x40021800

08009ecc <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af02      	add	r7, sp, #8
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	460b      	mov	r3, r1
 8009ed6:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef SPI1
	if (SPIx == SPI1) {
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a2e      	ldr	r2, [pc, #184]	; (8009f94 <TM_SPI_Init+0xc8>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d10a      	bne.n	8009ef6 <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8009ee0:	78f9      	ldrb	r1, [r7, #3]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9301      	str	r3, [sp, #4]
 8009ee6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	2320      	movs	r3, #32
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4828      	ldr	r0, [pc, #160]	; (8009f94 <TM_SPI_Init+0xc8>)
 8009ef2:	f000 f867 	bl	8009fc4 <TM_SPIx_Init>
	}
#endif
#ifdef SPI2
	if (SPIx == SPI2) {
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a27      	ldr	r2, [pc, #156]	; (8009f98 <TM_SPI_Init+0xcc>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d10a      	bne.n	8009f14 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 8009efe:	78f9      	ldrb	r1, [r7, #3]
 8009f00:	2300      	movs	r3, #0
 8009f02:	9301      	str	r3, [sp, #4]
 8009f04:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	2320      	movs	r3, #32
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	4822      	ldr	r0, [pc, #136]	; (8009f98 <TM_SPI_Init+0xcc>)
 8009f10:	f000 f858 	bl	8009fc4 <TM_SPIx_Init>
	}
#endif
#ifdef SPI3
	if (SPIx == SPI3) {
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a21      	ldr	r2, [pc, #132]	; (8009f9c <TM_SPI_Init+0xd0>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d10a      	bne.n	8009f32 <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 8009f1c:	78f9      	ldrb	r1, [r7, #3]
 8009f1e:	2300      	movs	r3, #0
 8009f20:	9301      	str	r3, [sp, #4]
 8009f22:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	2320      	movs	r3, #32
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	481b      	ldr	r0, [pc, #108]	; (8009f9c <TM_SPI_Init+0xd0>)
 8009f2e:	f000 f849 	bl	8009fc4 <TM_SPIx_Init>
	}
#endif
#ifdef SPI4
	if (SPIx == SPI4) {
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a1a      	ldr	r2, [pc, #104]	; (8009fa0 <TM_SPI_Init+0xd4>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d10a      	bne.n	8009f50 <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 8009f3a:	78f9      	ldrb	r1, [r7, #3]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	9301      	str	r3, [sp, #4]
 8009f40:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	2320      	movs	r3, #32
 8009f48:	2200      	movs	r2, #0
 8009f4a:	4815      	ldr	r0, [pc, #84]	; (8009fa0 <TM_SPI_Init+0xd4>)
 8009f4c:	f000 f83a 	bl	8009fc4 <TM_SPIx_Init>
	}
#endif
#ifdef SPI5
	if (SPIx == SPI5) {
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a14      	ldr	r2, [pc, #80]	; (8009fa4 <TM_SPI_Init+0xd8>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d10a      	bne.n	8009f6e <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 8009f58:	78f9      	ldrb	r1, [r7, #3]
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	9301      	str	r3, [sp, #4]
 8009f5e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	2320      	movs	r3, #32
 8009f66:	2200      	movs	r2, #0
 8009f68:	480e      	ldr	r0, [pc, #56]	; (8009fa4 <TM_SPI_Init+0xd8>)
 8009f6a:	f000 f82b 	bl	8009fc4 <TM_SPIx_Init>
	}
#endif
#ifdef SPI6
	if (SPIx == SPI6) {
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a0d      	ldr	r2, [pc, #52]	; (8009fa8 <TM_SPI_Init+0xdc>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d10a      	bne.n	8009f8c <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 8009f76:	78f9      	ldrb	r1, [r7, #3]
 8009f78:	2300      	movs	r3, #0
 8009f7a:	9301      	str	r3, [sp, #4]
 8009f7c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	2320      	movs	r3, #32
 8009f84:	2200      	movs	r2, #0
 8009f86:	4808      	ldr	r0, [pc, #32]	; (8009fa8 <TM_SPI_Init+0xdc>)
 8009f88:	f000 f81c 	bl	8009fc4 <TM_SPIx_Init>
	}
#endif
}
 8009f8c:	bf00      	nop
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	40013000 	.word	0x40013000
 8009f98:	40003800 	.word	0x40003800
 8009f9c:	40003c00 	.word	0x40003c00
 8009fa0:	40013400 	.word	0x40013400
 8009fa4:	40015000 	.word	0x40015000
 8009fa8:	40015400 	.word	0x40015400

08009fac <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		*dataIn++ = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) { 
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	807b      	strh	r3, [r7, #2]
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_SPI_InitCustomPinsCallback could be implemented in the user file
   */
}
 8009fb8:	bf00      	nop
 8009fba:	370c      	adds	r7, #12
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b09e      	sub	sp, #120	; 0x78
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	70fb      	strb	r3, [r7, #3]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70bb      	strb	r3, [r7, #2]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	803b      	strh	r3, [r7, #0]
	SPI_HandleTypeDef SPIHandle;
	
	/* Save instance */
	SPIHandle.Instance = SPIx;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	623b      	str	r3, [r7, #32]
	
#ifdef SPI1	
	if (SPIx == SPI1) {
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a6a      	ldr	r2, [pc, #424]	; (800a190 <TM_SPIx_Init+0x1cc>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d113      	bne.n	800a012 <TM_SPIx_Init+0x4e>
		/* Enable SPI clock */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8009fea:	2300      	movs	r3, #0
 8009fec:	61fb      	str	r3, [r7, #28]
 8009fee:	4b69      	ldr	r3, [pc, #420]	; (800a194 <TM_SPIx_Init+0x1d0>)
 8009ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff2:	4a68      	ldr	r2, [pc, #416]	; (800a194 <TM_SPIx_Init+0x1d0>)
 8009ff4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8009ffa:	4b66      	ldr	r3, [pc, #408]	; (800a194 <TM_SPIx_Init+0x1d0>)
 8009ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ffe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a002:	61fb      	str	r3, [r7, #28]
 800a004:	69fb      	ldr	r3, [r7, #28]
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 800a006:	78fb      	ldrb	r3, [r7, #3]
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 f8cf 	bl	800a1ac <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI1_DATASIZE;
 800a00e:	2300      	movs	r3, #0
 800a010:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI2
	if (SPIx == SPI2) {
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	4a60      	ldr	r2, [pc, #384]	; (800a198 <TM_SPIx_Init+0x1d4>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d113      	bne.n	800a042 <TM_SPIx_Init+0x7e>
		/* Enable SPI clock */
		__HAL_RCC_SPI2_CLK_ENABLE();
 800a01a:	2300      	movs	r3, #0
 800a01c:	61bb      	str	r3, [r7, #24]
 800a01e:	4b5d      	ldr	r3, [pc, #372]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	4a5c      	ldr	r2, [pc, #368]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a028:	6413      	str	r3, [r2, #64]	; 0x40
 800a02a:	4b5a      	ldr	r3, [pc, #360]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a032:	61bb      	str	r3, [r7, #24]
 800a034:	69bb      	ldr	r3, [r7, #24]
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 800a036:	78fb      	ldrb	r3, [r7, #3]
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 f8e7 	bl	800a20c <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI2_DATASIZE;
 800a03e:	2300      	movs	r3, #0
 800a040:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI3
	if (SPIx == SPI3) {
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	4a55      	ldr	r2, [pc, #340]	; (800a19c <TM_SPIx_Init+0x1d8>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d113      	bne.n	800a072 <TM_SPIx_Init+0xae>
		/* Enable SPI clock */
		__HAL_RCC_SPI3_CLK_ENABLE();
 800a04a:	2300      	movs	r3, #0
 800a04c:	617b      	str	r3, [r7, #20]
 800a04e:	4b51      	ldr	r3, [pc, #324]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	4a50      	ldr	r2, [pc, #320]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a054:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a058:	6413      	str	r3, [r2, #64]	; 0x40
 800a05a:	4b4e      	ldr	r3, [pc, #312]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a062:	617b      	str	r3, [r7, #20]
 800a064:	697b      	ldr	r3, [r7, #20]
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 800a066:	78fb      	ldrb	r3, [r7, #3]
 800a068:	4618      	mov	r0, r3
 800a06a:	f000 f933 	bl	800a2d4 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI3_DATASIZE;
 800a06e:	2300      	movs	r3, #0
 800a070:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	}
#endif
#ifdef SPI4
	if (SPIx == SPI4) {
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a4a      	ldr	r2, [pc, #296]	; (800a1a0 <TM_SPIx_Init+0x1dc>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d113      	bne.n	800a0a2 <TM_SPIx_Init+0xde>
		/* Enable SPI clock */
		__HAL_RCC_SPI4_CLK_ENABLE();
 800a07a:	2300      	movs	r3, #0
 800a07c:	613b      	str	r3, [r7, #16]
 800a07e:	4b45      	ldr	r3, [pc, #276]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a082:	4a44      	ldr	r2, [pc, #272]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a084:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a088:	6453      	str	r3, [r2, #68]	; 0x44
 800a08a:	4b42      	ldr	r3, [pc, #264]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a08e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a092:	613b      	str	r3, [r7, #16]
 800a094:	693b      	ldr	r3, [r7, #16]
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 f94d 	bl	800a338 <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI4_DATASIZE;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI5
	if (SPIx == SPI5) {
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a3f      	ldr	r2, [pc, #252]	; (800a1a4 <TM_SPIx_Init+0x1e0>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d113      	bne.n	800a0d2 <TM_SPIx_Init+0x10e>
		/* Enable SPI clock */
		__HAL_RCC_SPI5_CLK_ENABLE();
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	60fb      	str	r3, [r7, #12]
 800a0ae:	4b39      	ldr	r3, [pc, #228]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a0b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0b2:	4a38      	ldr	r2, [pc, #224]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a0b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0b8:	6453      	str	r3, [r2, #68]	; 0x44
 800a0ba:	4b36      	ldr	r3, [pc, #216]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	68fb      	ldr	r3, [r7, #12]
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 800a0c6:	78fb      	ldrb	r3, [r7, #3]
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 f965 	bl	800a398 <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI5_DATASIZE;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI6
	if (SPIx == SPI6) {
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	4a34      	ldr	r2, [pc, #208]	; (800a1a8 <TM_SPIx_Init+0x1e4>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d113      	bne.n	800a102 <TM_SPIx_Init+0x13e>
		/* Enable SPI clock */
		__HAL_RCC_SPI6_CLK_ENABLE();
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60bb      	str	r3, [r7, #8]
 800a0de:	4b2d      	ldr	r3, [pc, #180]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0e2:	4a2c      	ldr	r2, [pc, #176]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a0e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0e8:	6453      	str	r3, [r2, #68]	; 0x44
 800a0ea:	4b2a      	ldr	r3, [pc, #168]	; (800a194 <TM_SPIx_Init+0x1d0>)
 800a0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a0f2:	60bb      	str	r3, [r7, #8]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 f989 	bl	800a410 <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI6_DATASIZE;
 800a0fe:	2300      	movs	r3, #0
 800a100:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif

	/* Fill SPI settings */
	SPIHandle.Init.BaudRatePrescaler = SPI_BaudRatePrescaler;
 800a102:	883b      	ldrh	r3, [r7, #0]
 800a104:	63fb      	str	r3, [r7, #60]	; 0x3c
	SPIHandle.Init.FirstBit = SPI_FirstBit;
 800a106:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800a10a:	643b      	str	r3, [r7, #64]	; 0x40
	SPIHandle.Init.Mode = SPI_MasterSlave;
 800a10c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800a110:	627b      	str	r3, [r7, #36]	; 0x24
	
	SPIHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a112:	2300      	movs	r3, #0
 800a114:	64bb      	str	r3, [r7, #72]	; 0x48
	SPIHandle.Init.CRCPolynomial = 7;
 800a116:	2307      	movs	r3, #7
 800a118:	64fb      	str	r3, [r7, #76]	; 0x4c
	SPIHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 800a11a:	2300      	movs	r3, #0
 800a11c:	647b      	str	r3, [r7, #68]	; 0x44
	SPIHandle.Init.NSS = SPI_NSS_SOFT;
 800a11e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a122:	63bb      	str	r3, [r7, #56]	; 0x38
	SPIHandle.Init.Direction = SPI_DIRECTION_2LINES;
 800a124:	2300      	movs	r3, #0
 800a126:	62bb      	str	r3, [r7, #40]	; 0x28
    SPIHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SPIHandle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
#endif
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 800a128:	78bb      	ldrb	r3, [r7, #2]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d104      	bne.n	800a138 <TM_SPIx_Init+0x174>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a12e:	2300      	movs	r3, #0
 800a130:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a132:	2300      	movs	r3, #0
 800a134:	637b      	str	r3, [r7, #52]	; 0x34
 800a136:	e016      	b.n	800a166 <TM_SPIx_Init+0x1a2>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 800a138:	78bb      	ldrb	r3, [r7, #2]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d104      	bne.n	800a148 <TM_SPIx_Init+0x184>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a13e:	2300      	movs	r3, #0
 800a140:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a142:	2301      	movs	r3, #1
 800a144:	637b      	str	r3, [r7, #52]	; 0x34
 800a146:	e00e      	b.n	800a166 <TM_SPIx_Init+0x1a2>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 800a148:	78bb      	ldrb	r3, [r7, #2]
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d104      	bne.n	800a158 <TM_SPIx_Init+0x194>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800a14e:	2302      	movs	r3, #2
 800a150:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a152:	2300      	movs	r3, #0
 800a154:	637b      	str	r3, [r7, #52]	; 0x34
 800a156:	e006      	b.n	800a166 <TM_SPIx_Init+0x1a2>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 800a158:	78bb      	ldrb	r3, [r7, #2]
 800a15a:	2b03      	cmp	r3, #3
 800a15c:	d103      	bne.n	800a166 <TM_SPIx_Init+0x1a2>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800a15e:	2302      	movs	r3, #2
 800a160:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a162:	2301      	movs	r3, #1
 800a164:	637b      	str	r3, [r7, #52]	; 0x34
	}
	
	/* Disable first */
	__HAL_SPI_DISABLE(&SPIHandle);
 800a166:	6a3b      	ldr	r3, [r7, #32]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	6a3b      	ldr	r3, [r7, #32]
 800a16c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a170:	601a      	str	r2, [r3, #0]
	
	/* Init SPI */
	HAL_SPI_Init(&SPIHandle);
 800a172:	f107 0320 	add.w	r3, r7, #32
 800a176:	4618      	mov	r0, r3
 800a178:	f7fc ff69 	bl	800704e <HAL_SPI_Init>
	
	/* Enable SPI */
	__HAL_SPI_ENABLE(&SPIHandle);
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a186:	601a      	str	r2, [r3, #0]
}
 800a188:	bf00      	nop
 800a18a:	3778      	adds	r7, #120	; 0x78
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	40013000 	.word	0x40013000
 800a194:	40023800 	.word	0x40023800
 800a198:	40003800 	.word	0x40003800
 800a19c:	40003c00 	.word	0x40003c00
 800a1a0:	40013400 	.word	0x40013400
 800a1a4:	40015000 	.word	0x40015000
 800a1a8:	40015400 	.word	0x40015400

0800a1ac <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 800a1b6:	79fb      	ldrb	r3, [r7, #7]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d109      	bne.n	800a1d0 <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI1);
 800a1bc:	2305      	movs	r3, #5
 800a1be:	9301      	str	r3, [sp, #4]
 800a1c0:	2303      	movs	r3, #3
 800a1c2:	9300      	str	r3, [sp, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	21e0      	movs	r1, #224	; 0xe0
 800a1ca:	480d      	ldr	r0, [pc, #52]	; (800a200 <TM_SPI1_INT_InitPins+0x54>)
 800a1cc:	f7fe fea7 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 800a1d0:	79fb      	ldrb	r3, [r7, #7]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d109      	bne.n	800a1ea <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI1);
 800a1d6:	2305      	movs	r3, #5
 800a1d8:	9301      	str	r3, [sp, #4]
 800a1da:	2303      	movs	r3, #3
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	2300      	movs	r3, #0
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2138      	movs	r1, #56	; 0x38
 800a1e4:	4807      	ldr	r0, [pc, #28]	; (800a204 <TM_SPI1_INT_InitPins+0x58>)
 800a1e6:	f7fe fe9a 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800a1ea:	79fb      	ldrb	r3, [r7, #7]
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	d103      	bne.n	800a1f8 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AFx_SPI1);
 800a1f0:	2105      	movs	r1, #5
 800a1f2:	4805      	ldr	r0, [pc, #20]	; (800a208 <TM_SPI1_INT_InitPins+0x5c>)
 800a1f4:	f7ff feda 	bl	8009fac <TM_SPI_InitCustomPinsCallback>
	}
}
 800a1f8:	bf00      	nop
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	40020000 	.word	0x40020000
 800a204:	40020400 	.word	0x40020400
 800a208:	40013000 	.word	0x40013000

0800a20c <TM_SPI2_INT_InitPins>:
#endif

#ifdef SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af02      	add	r7, sp, #8
 800a212:	4603      	mov	r3, r0
 800a214:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 800a216:	79fb      	ldrb	r3, [r7, #7]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d114      	bne.n	800a246 <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800a21c:	2305      	movs	r3, #5
 800a21e:	9301      	str	r3, [sp, #4]
 800a220:	2303      	movs	r3, #3
 800a222:	9300      	str	r3, [sp, #0]
 800a224:	2300      	movs	r3, #0
 800a226:	2200      	movs	r2, #0
 800a228:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a22c:	4825      	ldr	r0, [pc, #148]	; (800a2c4 <TM_SPI2_INT_InitPins+0xb8>)
 800a22e:	f7fe fe76 	bl	8008f1e <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800a232:	2305      	movs	r3, #5
 800a234:	9301      	str	r3, [sp, #4]
 800a236:	2303      	movs	r3, #3
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	2300      	movs	r3, #0
 800a23c:	2200      	movs	r2, #0
 800a23e:	210c      	movs	r1, #12
 800a240:	4821      	ldr	r0, [pc, #132]	; (800a2c8 <TM_SPI2_INT_InitPins+0xbc>)
 800a242:	f7fe fe6c 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 800a246:	79fb      	ldrb	r3, [r7, #7]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d10a      	bne.n	800a262 <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800a24c:	2305      	movs	r3, #5
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	2303      	movs	r3, #3
 800a252:	9300      	str	r3, [sp, #0]
 800a254:	2300      	movs	r3, #0
 800a256:	2200      	movs	r2, #0
 800a258:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800a25c:	4819      	ldr	r0, [pc, #100]	; (800a2c4 <TM_SPI2_INT_InitPins+0xb8>)
 800a25e:	f7fe fe5e 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 800a262:	79fb      	ldrb	r3, [r7, #7]
 800a264:	2b02      	cmp	r3, #2
 800a266:	d109      	bne.n	800a27c <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800a268:	2305      	movs	r3, #5
 800a26a:	9301      	str	r3, [sp, #4]
 800a26c:	2303      	movs	r3, #3
 800a26e:	9300      	str	r3, [sp, #0]
 800a270:	2300      	movs	r3, #0
 800a272:	2200      	movs	r2, #0
 800a274:	210d      	movs	r1, #13
 800a276:	4815      	ldr	r0, [pc, #84]	; (800a2cc <TM_SPI2_INT_InitPins+0xc0>)
 800a278:	f7fe fe51 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB) && defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_4) {
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	2b03      	cmp	r3, #3
 800a280:	d114      	bne.n	800a2ac <TM_SPI2_INT_InitPins+0xa0>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800a282:	2305      	movs	r3, #5
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	2303      	movs	r3, #3
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	2300      	movs	r3, #0
 800a28c:	2200      	movs	r2, #0
 800a28e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800a292:	480c      	ldr	r0, [pc, #48]	; (800a2c4 <TM_SPI2_INT_InitPins+0xb8>)
 800a294:	f7fe fe43 	bl	8008f1e <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800a298:	2305      	movs	r3, #5
 800a29a:	9301      	str	r3, [sp, #4]
 800a29c:	2303      	movs	r3, #3
 800a29e:	9300      	str	r3, [sp, #0]
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2102      	movs	r1, #2
 800a2a6:	4809      	ldr	r0, [pc, #36]	; (800a2cc <TM_SPI2_INT_InitPins+0xc0>)
 800a2a8:	f7fe fe39 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800a2ac:	79fb      	ldrb	r3, [r7, #7]
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	d103      	bne.n	800a2ba <TM_SPI2_INT_InitPins+0xae>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AFx_SPI2);
 800a2b2:	2105      	movs	r1, #5
 800a2b4:	4806      	ldr	r0, [pc, #24]	; (800a2d0 <TM_SPI2_INT_InitPins+0xc4>)
 800a2b6:	f7ff fe79 	bl	8009fac <TM_SPI_InitCustomPinsCallback>
	}
}
 800a2ba:	bf00      	nop
 800a2bc:	3708      	adds	r7, #8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	40020400 	.word	0x40020400
 800a2c8:	40020800 	.word	0x40020800
 800a2cc:	40022000 	.word	0x40022000
 800a2d0:	40003800 	.word	0x40003800

0800a2d4 <TM_SPI3_INT_InitPins>:
#endif

#ifdef SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b084      	sub	sp, #16
 800a2d8:	af02      	add	r7, sp, #8
 800a2da:	4603      	mov	r3, r0
 800a2dc:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 800a2de:	79fb      	ldrb	r3, [r7, #7]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d109      	bne.n	800a2f8 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI3);
 800a2e4:	2306      	movs	r3, #6
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	9300      	str	r3, [sp, #0]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2138      	movs	r1, #56	; 0x38
 800a2f2:	480e      	ldr	r0, [pc, #56]	; (800a32c <TM_SPI3_INT_InitPins+0x58>)
 800a2f4:	f7fe fe13 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 800a2f8:	79fb      	ldrb	r3, [r7, #7]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d10a      	bne.n	800a314 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI3);
 800a2fe:	2306      	movs	r3, #6
 800a300:	9301      	str	r3, [sp, #4]
 800a302:	2303      	movs	r3, #3
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	2300      	movs	r3, #0
 800a308:	2200      	movs	r2, #0
 800a30a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800a30e:	4808      	ldr	r0, [pc, #32]	; (800a330 <TM_SPI3_INT_InitPins+0x5c>)
 800a310:	f7fe fe05 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800a314:	79fb      	ldrb	r3, [r7, #7]
 800a316:	2b04      	cmp	r3, #4
 800a318:	d103      	bne.n	800a322 <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AFx_SPI3);
 800a31a:	2106      	movs	r1, #6
 800a31c:	4805      	ldr	r0, [pc, #20]	; (800a334 <TM_SPI3_INT_InitPins+0x60>)
 800a31e:	f7ff fe45 	bl	8009fac <TM_SPI_InitCustomPinsCallback>
	}
}
 800a322:	bf00      	nop
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	40020400 	.word	0x40020400
 800a330:	40020800 	.word	0x40020800
 800a334:	40003c00 	.word	0x40003c00

0800a338 <TM_SPI4_INT_InitPins>:
#endif

#ifdef SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af02      	add	r7, sp, #8
 800a33e:	4603      	mov	r3, r0
 800a340:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 800a342:	79fb      	ldrb	r3, [r7, #7]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d109      	bne.n	800a35c <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI4);
 800a348:	2305      	movs	r3, #5
 800a34a:	9301      	str	r3, [sp, #4]
 800a34c:	2303      	movs	r3, #3
 800a34e:	9300      	str	r3, [sp, #0]
 800a350:	2300      	movs	r3, #0
 800a352:	2200      	movs	r2, #0
 800a354:	2164      	movs	r1, #100	; 0x64
 800a356:	480e      	ldr	r0, [pc, #56]	; (800a390 <TM_SPI4_INT_InitPins+0x58>)
 800a358:	f7fe fde1 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 800a35c:	79fb      	ldrb	r3, [r7, #7]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d10a      	bne.n	800a378 <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI4);
 800a362:	2305      	movs	r3, #5
 800a364:	9301      	str	r3, [sp, #4]
 800a366:	2303      	movs	r3, #3
 800a368:	9300      	str	r3, [sp, #0]
 800a36a:	2300      	movs	r3, #0
 800a36c:	2200      	movs	r2, #0
 800a36e:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800a372:	4807      	ldr	r0, [pc, #28]	; (800a390 <TM_SPI4_INT_InitPins+0x58>)
 800a374:	f7fe fdd3 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b04      	cmp	r3, #4
 800a37c:	d103      	bne.n	800a386 <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AFx_SPI4);
 800a37e:	2105      	movs	r1, #5
 800a380:	4804      	ldr	r0, [pc, #16]	; (800a394 <TM_SPI4_INT_InitPins+0x5c>)
 800a382:	f7ff fe13 	bl	8009fac <TM_SPI_InitCustomPinsCallback>
	}
}
 800a386:	bf00      	nop
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	40021000 	.word	0x40021000
 800a394:	40013400 	.word	0x40013400

0800a398 <TM_SPI5_INT_InitPins>:
#endif

#ifdef SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af02      	add	r7, sp, #8
 800a39e:	4603      	mov	r3, r0
 800a3a0:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 800a3a2:	79fb      	ldrb	r3, [r7, #7]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d10a      	bne.n	800a3be <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI5);
 800a3a8:	2305      	movs	r3, #5
 800a3aa:	9301      	str	r3, [sp, #4]
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f44f 7160 	mov.w	r1, #896	; 0x380
 800a3b8:	4812      	ldr	r0, [pc, #72]	; (800a404 <TM_SPI5_INT_InitPins+0x6c>)
 800a3ba:	f7fe fdb0 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d114      	bne.n	800a3ee <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI5);
 800a3c4:	2305      	movs	r3, #5
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	9300      	str	r3, [sp, #0]
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a3d4:	480b      	ldr	r0, [pc, #44]	; (800a404 <TM_SPI5_INT_InitPins+0x6c>)
 800a3d6:	f7fe fda2 	bl	8008f1e <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI5);
 800a3da:	2305      	movs	r3, #5
 800a3dc:	9301      	str	r3, [sp, #4]
 800a3de:	2303      	movs	r3, #3
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	21c0      	movs	r1, #192	; 0xc0
 800a3e8:	4807      	ldr	r0, [pc, #28]	; (800a408 <TM_SPI5_INT_InitPins+0x70>)
 800a3ea:	f7fe fd98 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800a3ee:	79fb      	ldrb	r3, [r7, #7]
 800a3f0:	2b04      	cmp	r3, #4
 800a3f2:	d103      	bne.n	800a3fc <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AFx_SPI5);
 800a3f4:	2105      	movs	r1, #5
 800a3f6:	4805      	ldr	r0, [pc, #20]	; (800a40c <TM_SPI5_INT_InitPins+0x74>)
 800a3f8:	f7ff fdd8 	bl	8009fac <TM_SPI_InitCustomPinsCallback>
	}
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	40021400 	.word	0x40021400
 800a408:	40021c00 	.word	0x40021c00
 800a40c:	40015000 	.word	0x40015000

0800a410 <TM_SPI6_INT_InitPins>:
#endif

#ifdef SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af02      	add	r7, sp, #8
 800a416:	4603      	mov	r3, r0
 800a418:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 800a41a:	79fb      	ldrb	r3, [r7, #7]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10a      	bne.n	800a436 <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI6);
 800a420:	2305      	movs	r3, #5
 800a422:	9301      	str	r3, [sp, #4]
 800a424:	2303      	movs	r3, #3
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	2300      	movs	r3, #0
 800a42a:	2200      	movs	r2, #0
 800a42c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800a430:	4806      	ldr	r0, [pc, #24]	; (800a44c <TM_SPI6_INT_InitPins+0x3c>)
 800a432:	f7fe fd74 	bl	8008f1e <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800a436:	79fb      	ldrb	r3, [r7, #7]
 800a438:	2b04      	cmp	r3, #4
 800a43a:	d103      	bne.n	800a444 <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AFx_SPI6);
 800a43c:	2105      	movs	r1, #5
 800a43e:	4804      	ldr	r0, [pc, #16]	; (800a450 <TM_SPI6_INT_InitPins+0x40>)
 800a440:	f7ff fdb4 	bl	8009fac <TM_SPI_InitCustomPinsCallback>
	}
}
 800a444:	bf00      	nop
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	40021800 	.word	0x40021800
 800a450:	40015400 	.word	0x40015400

0800a454 <__errno>:
 800a454:	4b01      	ldr	r3, [pc, #4]	; (800a45c <__errno+0x8>)
 800a456:	6818      	ldr	r0, [r3, #0]
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	20001260 	.word	0x20001260

0800a460 <__libc_init_array>:
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	4e0d      	ldr	r6, [pc, #52]	; (800a498 <__libc_init_array+0x38>)
 800a464:	4c0d      	ldr	r4, [pc, #52]	; (800a49c <__libc_init_array+0x3c>)
 800a466:	1ba4      	subs	r4, r4, r6
 800a468:	10a4      	asrs	r4, r4, #2
 800a46a:	2500      	movs	r5, #0
 800a46c:	42a5      	cmp	r5, r4
 800a46e:	d109      	bne.n	800a484 <__libc_init_array+0x24>
 800a470:	4e0b      	ldr	r6, [pc, #44]	; (800a4a0 <__libc_init_array+0x40>)
 800a472:	4c0c      	ldr	r4, [pc, #48]	; (800a4a4 <__libc_init_array+0x44>)
 800a474:	f004 fda2 	bl	800efbc <_init>
 800a478:	1ba4      	subs	r4, r4, r6
 800a47a:	10a4      	asrs	r4, r4, #2
 800a47c:	2500      	movs	r5, #0
 800a47e:	42a5      	cmp	r5, r4
 800a480:	d105      	bne.n	800a48e <__libc_init_array+0x2e>
 800a482:	bd70      	pop	{r4, r5, r6, pc}
 800a484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a488:	4798      	blx	r3
 800a48a:	3501      	adds	r5, #1
 800a48c:	e7ee      	b.n	800a46c <__libc_init_array+0xc>
 800a48e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a492:	4798      	blx	r3
 800a494:	3501      	adds	r5, #1
 800a496:	e7f2      	b.n	800a47e <__libc_init_array+0x1e>
 800a498:	08010a88 	.word	0x08010a88
 800a49c:	08010a88 	.word	0x08010a88
 800a4a0:	08010a88 	.word	0x08010a88
 800a4a4:	08010a8c 	.word	0x08010a8c

0800a4a8 <malloc>:
 800a4a8:	4b02      	ldr	r3, [pc, #8]	; (800a4b4 <malloc+0xc>)
 800a4aa:	4601      	mov	r1, r0
 800a4ac:	6818      	ldr	r0, [r3, #0]
 800a4ae:	f000 b87d 	b.w	800a5ac <_malloc_r>
 800a4b2:	bf00      	nop
 800a4b4:	20001260 	.word	0x20001260

0800a4b8 <memcpy>:
 800a4b8:	b510      	push	{r4, lr}
 800a4ba:	1e43      	subs	r3, r0, #1
 800a4bc:	440a      	add	r2, r1
 800a4be:	4291      	cmp	r1, r2
 800a4c0:	d100      	bne.n	800a4c4 <memcpy+0xc>
 800a4c2:	bd10      	pop	{r4, pc}
 800a4c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4cc:	e7f7      	b.n	800a4be <memcpy+0x6>

0800a4ce <memmove>:
 800a4ce:	4288      	cmp	r0, r1
 800a4d0:	b510      	push	{r4, lr}
 800a4d2:	eb01 0302 	add.w	r3, r1, r2
 800a4d6:	d807      	bhi.n	800a4e8 <memmove+0x1a>
 800a4d8:	1e42      	subs	r2, r0, #1
 800a4da:	4299      	cmp	r1, r3
 800a4dc:	d00a      	beq.n	800a4f4 <memmove+0x26>
 800a4de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4e2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a4e6:	e7f8      	b.n	800a4da <memmove+0xc>
 800a4e8:	4283      	cmp	r3, r0
 800a4ea:	d9f5      	bls.n	800a4d8 <memmove+0xa>
 800a4ec:	1881      	adds	r1, r0, r2
 800a4ee:	1ad2      	subs	r2, r2, r3
 800a4f0:	42d3      	cmn	r3, r2
 800a4f2:	d100      	bne.n	800a4f6 <memmove+0x28>
 800a4f4:	bd10      	pop	{r4, pc}
 800a4f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4fa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a4fe:	e7f7      	b.n	800a4f0 <memmove+0x22>

0800a500 <memset>:
 800a500:	4402      	add	r2, r0
 800a502:	4603      	mov	r3, r0
 800a504:	4293      	cmp	r3, r2
 800a506:	d100      	bne.n	800a50a <memset+0xa>
 800a508:	4770      	bx	lr
 800a50a:	f803 1b01 	strb.w	r1, [r3], #1
 800a50e:	e7f9      	b.n	800a504 <memset+0x4>

0800a510 <_free_r>:
 800a510:	b538      	push	{r3, r4, r5, lr}
 800a512:	4605      	mov	r5, r0
 800a514:	2900      	cmp	r1, #0
 800a516:	d045      	beq.n	800a5a4 <_free_r+0x94>
 800a518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a51c:	1f0c      	subs	r4, r1, #4
 800a51e:	2b00      	cmp	r3, #0
 800a520:	bfb8      	it	lt
 800a522:	18e4      	addlt	r4, r4, r3
 800a524:	f002 ff98 	bl	800d458 <__malloc_lock>
 800a528:	4a1f      	ldr	r2, [pc, #124]	; (800a5a8 <_free_r+0x98>)
 800a52a:	6813      	ldr	r3, [r2, #0]
 800a52c:	4610      	mov	r0, r2
 800a52e:	b933      	cbnz	r3, 800a53e <_free_r+0x2e>
 800a530:	6063      	str	r3, [r4, #4]
 800a532:	6014      	str	r4, [r2, #0]
 800a534:	4628      	mov	r0, r5
 800a536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a53a:	f002 bf8e 	b.w	800d45a <__malloc_unlock>
 800a53e:	42a3      	cmp	r3, r4
 800a540:	d90c      	bls.n	800a55c <_free_r+0x4c>
 800a542:	6821      	ldr	r1, [r4, #0]
 800a544:	1862      	adds	r2, r4, r1
 800a546:	4293      	cmp	r3, r2
 800a548:	bf04      	itt	eq
 800a54a:	681a      	ldreq	r2, [r3, #0]
 800a54c:	685b      	ldreq	r3, [r3, #4]
 800a54e:	6063      	str	r3, [r4, #4]
 800a550:	bf04      	itt	eq
 800a552:	1852      	addeq	r2, r2, r1
 800a554:	6022      	streq	r2, [r4, #0]
 800a556:	6004      	str	r4, [r0, #0]
 800a558:	e7ec      	b.n	800a534 <_free_r+0x24>
 800a55a:	4613      	mov	r3, r2
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	b10a      	cbz	r2, 800a564 <_free_r+0x54>
 800a560:	42a2      	cmp	r2, r4
 800a562:	d9fa      	bls.n	800a55a <_free_r+0x4a>
 800a564:	6819      	ldr	r1, [r3, #0]
 800a566:	1858      	adds	r0, r3, r1
 800a568:	42a0      	cmp	r0, r4
 800a56a:	d10b      	bne.n	800a584 <_free_r+0x74>
 800a56c:	6820      	ldr	r0, [r4, #0]
 800a56e:	4401      	add	r1, r0
 800a570:	1858      	adds	r0, r3, r1
 800a572:	4282      	cmp	r2, r0
 800a574:	6019      	str	r1, [r3, #0]
 800a576:	d1dd      	bne.n	800a534 <_free_r+0x24>
 800a578:	6810      	ldr	r0, [r2, #0]
 800a57a:	6852      	ldr	r2, [r2, #4]
 800a57c:	605a      	str	r2, [r3, #4]
 800a57e:	4401      	add	r1, r0
 800a580:	6019      	str	r1, [r3, #0]
 800a582:	e7d7      	b.n	800a534 <_free_r+0x24>
 800a584:	d902      	bls.n	800a58c <_free_r+0x7c>
 800a586:	230c      	movs	r3, #12
 800a588:	602b      	str	r3, [r5, #0]
 800a58a:	e7d3      	b.n	800a534 <_free_r+0x24>
 800a58c:	6820      	ldr	r0, [r4, #0]
 800a58e:	1821      	adds	r1, r4, r0
 800a590:	428a      	cmp	r2, r1
 800a592:	bf04      	itt	eq
 800a594:	6811      	ldreq	r1, [r2, #0]
 800a596:	6852      	ldreq	r2, [r2, #4]
 800a598:	6062      	str	r2, [r4, #4]
 800a59a:	bf04      	itt	eq
 800a59c:	1809      	addeq	r1, r1, r0
 800a59e:	6021      	streq	r1, [r4, #0]
 800a5a0:	605c      	str	r4, [r3, #4]
 800a5a2:	e7c7      	b.n	800a534 <_free_r+0x24>
 800a5a4:	bd38      	pop	{r3, r4, r5, pc}
 800a5a6:	bf00      	nop
 800a5a8:	200015b4 	.word	0x200015b4

0800a5ac <_malloc_r>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	1ccd      	adds	r5, r1, #3
 800a5b0:	f025 0503 	bic.w	r5, r5, #3
 800a5b4:	3508      	adds	r5, #8
 800a5b6:	2d0c      	cmp	r5, #12
 800a5b8:	bf38      	it	cc
 800a5ba:	250c      	movcc	r5, #12
 800a5bc:	2d00      	cmp	r5, #0
 800a5be:	4606      	mov	r6, r0
 800a5c0:	db01      	blt.n	800a5c6 <_malloc_r+0x1a>
 800a5c2:	42a9      	cmp	r1, r5
 800a5c4:	d903      	bls.n	800a5ce <_malloc_r+0x22>
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	6033      	str	r3, [r6, #0]
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	bd70      	pop	{r4, r5, r6, pc}
 800a5ce:	f002 ff43 	bl	800d458 <__malloc_lock>
 800a5d2:	4a21      	ldr	r2, [pc, #132]	; (800a658 <_malloc_r+0xac>)
 800a5d4:	6814      	ldr	r4, [r2, #0]
 800a5d6:	4621      	mov	r1, r4
 800a5d8:	b991      	cbnz	r1, 800a600 <_malloc_r+0x54>
 800a5da:	4c20      	ldr	r4, [pc, #128]	; (800a65c <_malloc_r+0xb0>)
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	b91b      	cbnz	r3, 800a5e8 <_malloc_r+0x3c>
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	f000 fe7b 	bl	800b2dc <_sbrk_r>
 800a5e6:	6020      	str	r0, [r4, #0]
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	4630      	mov	r0, r6
 800a5ec:	f000 fe76 	bl	800b2dc <_sbrk_r>
 800a5f0:	1c43      	adds	r3, r0, #1
 800a5f2:	d124      	bne.n	800a63e <_malloc_r+0x92>
 800a5f4:	230c      	movs	r3, #12
 800a5f6:	6033      	str	r3, [r6, #0]
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f002 ff2e 	bl	800d45a <__malloc_unlock>
 800a5fe:	e7e4      	b.n	800a5ca <_malloc_r+0x1e>
 800a600:	680b      	ldr	r3, [r1, #0]
 800a602:	1b5b      	subs	r3, r3, r5
 800a604:	d418      	bmi.n	800a638 <_malloc_r+0x8c>
 800a606:	2b0b      	cmp	r3, #11
 800a608:	d90f      	bls.n	800a62a <_malloc_r+0x7e>
 800a60a:	600b      	str	r3, [r1, #0]
 800a60c:	50cd      	str	r5, [r1, r3]
 800a60e:	18cc      	adds	r4, r1, r3
 800a610:	4630      	mov	r0, r6
 800a612:	f002 ff22 	bl	800d45a <__malloc_unlock>
 800a616:	f104 000b 	add.w	r0, r4, #11
 800a61a:	1d23      	adds	r3, r4, #4
 800a61c:	f020 0007 	bic.w	r0, r0, #7
 800a620:	1ac3      	subs	r3, r0, r3
 800a622:	d0d3      	beq.n	800a5cc <_malloc_r+0x20>
 800a624:	425a      	negs	r2, r3
 800a626:	50e2      	str	r2, [r4, r3]
 800a628:	e7d0      	b.n	800a5cc <_malloc_r+0x20>
 800a62a:	428c      	cmp	r4, r1
 800a62c:	684b      	ldr	r3, [r1, #4]
 800a62e:	bf16      	itet	ne
 800a630:	6063      	strne	r3, [r4, #4]
 800a632:	6013      	streq	r3, [r2, #0]
 800a634:	460c      	movne	r4, r1
 800a636:	e7eb      	b.n	800a610 <_malloc_r+0x64>
 800a638:	460c      	mov	r4, r1
 800a63a:	6849      	ldr	r1, [r1, #4]
 800a63c:	e7cc      	b.n	800a5d8 <_malloc_r+0x2c>
 800a63e:	1cc4      	adds	r4, r0, #3
 800a640:	f024 0403 	bic.w	r4, r4, #3
 800a644:	42a0      	cmp	r0, r4
 800a646:	d005      	beq.n	800a654 <_malloc_r+0xa8>
 800a648:	1a21      	subs	r1, r4, r0
 800a64a:	4630      	mov	r0, r6
 800a64c:	f000 fe46 	bl	800b2dc <_sbrk_r>
 800a650:	3001      	adds	r0, #1
 800a652:	d0cf      	beq.n	800a5f4 <_malloc_r+0x48>
 800a654:	6025      	str	r5, [r4, #0]
 800a656:	e7db      	b.n	800a610 <_malloc_r+0x64>
 800a658:	200015b4 	.word	0x200015b4
 800a65c:	200015b8 	.word	0x200015b8

0800a660 <__cvt>:
 800a660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a664:	ec55 4b10 	vmov	r4, r5, d0
 800a668:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a66a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a66e:	2d00      	cmp	r5, #0
 800a670:	460e      	mov	r6, r1
 800a672:	4691      	mov	r9, r2
 800a674:	4619      	mov	r1, r3
 800a676:	bfb8      	it	lt
 800a678:	4622      	movlt	r2, r4
 800a67a:	462b      	mov	r3, r5
 800a67c:	f027 0720 	bic.w	r7, r7, #32
 800a680:	bfbb      	ittet	lt
 800a682:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a686:	461d      	movlt	r5, r3
 800a688:	2300      	movge	r3, #0
 800a68a:	232d      	movlt	r3, #45	; 0x2d
 800a68c:	bfb8      	it	lt
 800a68e:	4614      	movlt	r4, r2
 800a690:	2f46      	cmp	r7, #70	; 0x46
 800a692:	700b      	strb	r3, [r1, #0]
 800a694:	d004      	beq.n	800a6a0 <__cvt+0x40>
 800a696:	2f45      	cmp	r7, #69	; 0x45
 800a698:	d100      	bne.n	800a69c <__cvt+0x3c>
 800a69a:	3601      	adds	r6, #1
 800a69c:	2102      	movs	r1, #2
 800a69e:	e000      	b.n	800a6a2 <__cvt+0x42>
 800a6a0:	2103      	movs	r1, #3
 800a6a2:	ab03      	add	r3, sp, #12
 800a6a4:	9301      	str	r3, [sp, #4]
 800a6a6:	ab02      	add	r3, sp, #8
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	4632      	mov	r2, r6
 800a6ac:	4653      	mov	r3, sl
 800a6ae:	ec45 4b10 	vmov	d0, r4, r5
 800a6b2:	f001 fdcd 	bl	800c250 <_dtoa_r>
 800a6b6:	2f47      	cmp	r7, #71	; 0x47
 800a6b8:	4680      	mov	r8, r0
 800a6ba:	d102      	bne.n	800a6c2 <__cvt+0x62>
 800a6bc:	f019 0f01 	tst.w	r9, #1
 800a6c0:	d026      	beq.n	800a710 <__cvt+0xb0>
 800a6c2:	2f46      	cmp	r7, #70	; 0x46
 800a6c4:	eb08 0906 	add.w	r9, r8, r6
 800a6c8:	d111      	bne.n	800a6ee <__cvt+0x8e>
 800a6ca:	f898 3000 	ldrb.w	r3, [r8]
 800a6ce:	2b30      	cmp	r3, #48	; 0x30
 800a6d0:	d10a      	bne.n	800a6e8 <__cvt+0x88>
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	4629      	mov	r1, r5
 800a6da:	f7f6 fa05 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6de:	b918      	cbnz	r0, 800a6e8 <__cvt+0x88>
 800a6e0:	f1c6 0601 	rsb	r6, r6, #1
 800a6e4:	f8ca 6000 	str.w	r6, [sl]
 800a6e8:	f8da 3000 	ldr.w	r3, [sl]
 800a6ec:	4499      	add	r9, r3
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	4629      	mov	r1, r5
 800a6f6:	f7f6 f9f7 	bl	8000ae8 <__aeabi_dcmpeq>
 800a6fa:	b938      	cbnz	r0, 800a70c <__cvt+0xac>
 800a6fc:	2230      	movs	r2, #48	; 0x30
 800a6fe:	9b03      	ldr	r3, [sp, #12]
 800a700:	454b      	cmp	r3, r9
 800a702:	d205      	bcs.n	800a710 <__cvt+0xb0>
 800a704:	1c59      	adds	r1, r3, #1
 800a706:	9103      	str	r1, [sp, #12]
 800a708:	701a      	strb	r2, [r3, #0]
 800a70a:	e7f8      	b.n	800a6fe <__cvt+0x9e>
 800a70c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a710:	9b03      	ldr	r3, [sp, #12]
 800a712:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a714:	eba3 0308 	sub.w	r3, r3, r8
 800a718:	4640      	mov	r0, r8
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	b004      	add	sp, #16
 800a71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a722 <__exponent>:
 800a722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a724:	2900      	cmp	r1, #0
 800a726:	4604      	mov	r4, r0
 800a728:	bfba      	itte	lt
 800a72a:	4249      	neglt	r1, r1
 800a72c:	232d      	movlt	r3, #45	; 0x2d
 800a72e:	232b      	movge	r3, #43	; 0x2b
 800a730:	2909      	cmp	r1, #9
 800a732:	f804 2b02 	strb.w	r2, [r4], #2
 800a736:	7043      	strb	r3, [r0, #1]
 800a738:	dd20      	ble.n	800a77c <__exponent+0x5a>
 800a73a:	f10d 0307 	add.w	r3, sp, #7
 800a73e:	461f      	mov	r7, r3
 800a740:	260a      	movs	r6, #10
 800a742:	fb91 f5f6 	sdiv	r5, r1, r6
 800a746:	fb06 1115 	mls	r1, r6, r5, r1
 800a74a:	3130      	adds	r1, #48	; 0x30
 800a74c:	2d09      	cmp	r5, #9
 800a74e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a752:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800a756:	4629      	mov	r1, r5
 800a758:	dc09      	bgt.n	800a76e <__exponent+0x4c>
 800a75a:	3130      	adds	r1, #48	; 0x30
 800a75c:	3b02      	subs	r3, #2
 800a75e:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a762:	42bb      	cmp	r3, r7
 800a764:	4622      	mov	r2, r4
 800a766:	d304      	bcc.n	800a772 <__exponent+0x50>
 800a768:	1a10      	subs	r0, r2, r0
 800a76a:	b003      	add	sp, #12
 800a76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a76e:	4613      	mov	r3, r2
 800a770:	e7e7      	b.n	800a742 <__exponent+0x20>
 800a772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a776:	f804 2b01 	strb.w	r2, [r4], #1
 800a77a:	e7f2      	b.n	800a762 <__exponent+0x40>
 800a77c:	2330      	movs	r3, #48	; 0x30
 800a77e:	4419      	add	r1, r3
 800a780:	7083      	strb	r3, [r0, #2]
 800a782:	1d02      	adds	r2, r0, #4
 800a784:	70c1      	strb	r1, [r0, #3]
 800a786:	e7ef      	b.n	800a768 <__exponent+0x46>

0800a788 <_printf_float>:
 800a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	b08d      	sub	sp, #52	; 0x34
 800a78e:	460c      	mov	r4, r1
 800a790:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a794:	4616      	mov	r6, r2
 800a796:	461f      	mov	r7, r3
 800a798:	4605      	mov	r5, r0
 800a79a:	f002 fe3d 	bl	800d418 <_localeconv_r>
 800a79e:	6803      	ldr	r3, [r0, #0]
 800a7a0:	9304      	str	r3, [sp, #16]
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7f5 fd24 	bl	80001f0 <strlen>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	930a      	str	r3, [sp, #40]	; 0x28
 800a7ac:	f8d8 3000 	ldr.w	r3, [r8]
 800a7b0:	9005      	str	r0, [sp, #20]
 800a7b2:	3307      	adds	r3, #7
 800a7b4:	f023 0307 	bic.w	r3, r3, #7
 800a7b8:	f103 0208 	add.w	r2, r3, #8
 800a7bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a7c0:	f8d4 b000 	ldr.w	fp, [r4]
 800a7c4:	f8c8 2000 	str.w	r2, [r8]
 800a7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a7d0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a7d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7d8:	9307      	str	r3, [sp, #28]
 800a7da:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7e2:	4ba7      	ldr	r3, [pc, #668]	; (800aa80 <_printf_float+0x2f8>)
 800a7e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7e8:	f7f6 f9b0 	bl	8000b4c <__aeabi_dcmpun>
 800a7ec:	bb70      	cbnz	r0, 800a84c <_printf_float+0xc4>
 800a7ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7f2:	4ba3      	ldr	r3, [pc, #652]	; (800aa80 <_printf_float+0x2f8>)
 800a7f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7f8:	f7f6 f98a 	bl	8000b10 <__aeabi_dcmple>
 800a7fc:	bb30      	cbnz	r0, 800a84c <_printf_float+0xc4>
 800a7fe:	2200      	movs	r2, #0
 800a800:	2300      	movs	r3, #0
 800a802:	4640      	mov	r0, r8
 800a804:	4649      	mov	r1, r9
 800a806:	f7f6 f979 	bl	8000afc <__aeabi_dcmplt>
 800a80a:	b110      	cbz	r0, 800a812 <_printf_float+0x8a>
 800a80c:	232d      	movs	r3, #45	; 0x2d
 800a80e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a812:	4a9c      	ldr	r2, [pc, #624]	; (800aa84 <_printf_float+0x2fc>)
 800a814:	4b9c      	ldr	r3, [pc, #624]	; (800aa88 <_printf_float+0x300>)
 800a816:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a81a:	bf8c      	ite	hi
 800a81c:	4690      	movhi	r8, r2
 800a81e:	4698      	movls	r8, r3
 800a820:	2303      	movs	r3, #3
 800a822:	f02b 0204 	bic.w	r2, fp, #4
 800a826:	6123      	str	r3, [r4, #16]
 800a828:	6022      	str	r2, [r4, #0]
 800a82a:	f04f 0900 	mov.w	r9, #0
 800a82e:	9700      	str	r7, [sp, #0]
 800a830:	4633      	mov	r3, r6
 800a832:	aa0b      	add	r2, sp, #44	; 0x2c
 800a834:	4621      	mov	r1, r4
 800a836:	4628      	mov	r0, r5
 800a838:	f000 f9e6 	bl	800ac08 <_printf_common>
 800a83c:	3001      	adds	r0, #1
 800a83e:	f040 808d 	bne.w	800a95c <_printf_float+0x1d4>
 800a842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a846:	b00d      	add	sp, #52	; 0x34
 800a848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84c:	4642      	mov	r2, r8
 800a84e:	464b      	mov	r3, r9
 800a850:	4640      	mov	r0, r8
 800a852:	4649      	mov	r1, r9
 800a854:	f7f6 f97a 	bl	8000b4c <__aeabi_dcmpun>
 800a858:	b110      	cbz	r0, 800a860 <_printf_float+0xd8>
 800a85a:	4a8c      	ldr	r2, [pc, #560]	; (800aa8c <_printf_float+0x304>)
 800a85c:	4b8c      	ldr	r3, [pc, #560]	; (800aa90 <_printf_float+0x308>)
 800a85e:	e7da      	b.n	800a816 <_printf_float+0x8e>
 800a860:	6861      	ldr	r1, [r4, #4]
 800a862:	1c4b      	adds	r3, r1, #1
 800a864:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a868:	a80a      	add	r0, sp, #40	; 0x28
 800a86a:	d13e      	bne.n	800a8ea <_printf_float+0x162>
 800a86c:	2306      	movs	r3, #6
 800a86e:	6063      	str	r3, [r4, #4]
 800a870:	2300      	movs	r3, #0
 800a872:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a876:	ab09      	add	r3, sp, #36	; 0x24
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	ec49 8b10 	vmov	d0, r8, r9
 800a87e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a882:	6022      	str	r2, [r4, #0]
 800a884:	f8cd a004 	str.w	sl, [sp, #4]
 800a888:	6861      	ldr	r1, [r4, #4]
 800a88a:	4628      	mov	r0, r5
 800a88c:	f7ff fee8 	bl	800a660 <__cvt>
 800a890:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a894:	2b47      	cmp	r3, #71	; 0x47
 800a896:	4680      	mov	r8, r0
 800a898:	d109      	bne.n	800a8ae <_printf_float+0x126>
 800a89a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a89c:	1cd8      	adds	r0, r3, #3
 800a89e:	db02      	blt.n	800a8a6 <_printf_float+0x11e>
 800a8a0:	6862      	ldr	r2, [r4, #4]
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	dd47      	ble.n	800a936 <_printf_float+0x1ae>
 800a8a6:	f1aa 0a02 	sub.w	sl, sl, #2
 800a8aa:	fa5f fa8a 	uxtb.w	sl, sl
 800a8ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a8b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8b4:	d824      	bhi.n	800a900 <_printf_float+0x178>
 800a8b6:	3901      	subs	r1, #1
 800a8b8:	4652      	mov	r2, sl
 800a8ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8be:	9109      	str	r1, [sp, #36]	; 0x24
 800a8c0:	f7ff ff2f 	bl	800a722 <__exponent>
 800a8c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8c6:	1813      	adds	r3, r2, r0
 800a8c8:	2a01      	cmp	r2, #1
 800a8ca:	4681      	mov	r9, r0
 800a8cc:	6123      	str	r3, [r4, #16]
 800a8ce:	dc02      	bgt.n	800a8d6 <_printf_float+0x14e>
 800a8d0:	6822      	ldr	r2, [r4, #0]
 800a8d2:	07d1      	lsls	r1, r2, #31
 800a8d4:	d501      	bpl.n	800a8da <_printf_float+0x152>
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	6123      	str	r3, [r4, #16]
 800a8da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d0a5      	beq.n	800a82e <_printf_float+0xa6>
 800a8e2:	232d      	movs	r3, #45	; 0x2d
 800a8e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8e8:	e7a1      	b.n	800a82e <_printf_float+0xa6>
 800a8ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a8ee:	f000 8177 	beq.w	800abe0 <_printf_float+0x458>
 800a8f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a8f6:	d1bb      	bne.n	800a870 <_printf_float+0xe8>
 800a8f8:	2900      	cmp	r1, #0
 800a8fa:	d1b9      	bne.n	800a870 <_printf_float+0xe8>
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e7b6      	b.n	800a86e <_printf_float+0xe6>
 800a900:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a904:	d119      	bne.n	800a93a <_printf_float+0x1b2>
 800a906:	2900      	cmp	r1, #0
 800a908:	6863      	ldr	r3, [r4, #4]
 800a90a:	dd0c      	ble.n	800a926 <_printf_float+0x19e>
 800a90c:	6121      	str	r1, [r4, #16]
 800a90e:	b913      	cbnz	r3, 800a916 <_printf_float+0x18e>
 800a910:	6822      	ldr	r2, [r4, #0]
 800a912:	07d2      	lsls	r2, r2, #31
 800a914:	d502      	bpl.n	800a91c <_printf_float+0x194>
 800a916:	3301      	adds	r3, #1
 800a918:	440b      	add	r3, r1
 800a91a:	6123      	str	r3, [r4, #16]
 800a91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a91e:	65a3      	str	r3, [r4, #88]	; 0x58
 800a920:	f04f 0900 	mov.w	r9, #0
 800a924:	e7d9      	b.n	800a8da <_printf_float+0x152>
 800a926:	b913      	cbnz	r3, 800a92e <_printf_float+0x1a6>
 800a928:	6822      	ldr	r2, [r4, #0]
 800a92a:	07d0      	lsls	r0, r2, #31
 800a92c:	d501      	bpl.n	800a932 <_printf_float+0x1aa>
 800a92e:	3302      	adds	r3, #2
 800a930:	e7f3      	b.n	800a91a <_printf_float+0x192>
 800a932:	2301      	movs	r3, #1
 800a934:	e7f1      	b.n	800a91a <_printf_float+0x192>
 800a936:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a93a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a93e:	4293      	cmp	r3, r2
 800a940:	db05      	blt.n	800a94e <_printf_float+0x1c6>
 800a942:	6822      	ldr	r2, [r4, #0]
 800a944:	6123      	str	r3, [r4, #16]
 800a946:	07d1      	lsls	r1, r2, #31
 800a948:	d5e8      	bpl.n	800a91c <_printf_float+0x194>
 800a94a:	3301      	adds	r3, #1
 800a94c:	e7e5      	b.n	800a91a <_printf_float+0x192>
 800a94e:	2b00      	cmp	r3, #0
 800a950:	bfd4      	ite	le
 800a952:	f1c3 0302 	rsble	r3, r3, #2
 800a956:	2301      	movgt	r3, #1
 800a958:	4413      	add	r3, r2
 800a95a:	e7de      	b.n	800a91a <_printf_float+0x192>
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	055a      	lsls	r2, r3, #21
 800a960:	d407      	bmi.n	800a972 <_printf_float+0x1ea>
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	4642      	mov	r2, r8
 800a966:	4631      	mov	r1, r6
 800a968:	4628      	mov	r0, r5
 800a96a:	47b8      	blx	r7
 800a96c:	3001      	adds	r0, #1
 800a96e:	d12b      	bne.n	800a9c8 <_printf_float+0x240>
 800a970:	e767      	b.n	800a842 <_printf_float+0xba>
 800a972:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a976:	f240 80dc 	bls.w	800ab32 <_printf_float+0x3aa>
 800a97a:	2200      	movs	r2, #0
 800a97c:	2300      	movs	r3, #0
 800a97e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a982:	f7f6 f8b1 	bl	8000ae8 <__aeabi_dcmpeq>
 800a986:	2800      	cmp	r0, #0
 800a988:	d033      	beq.n	800a9f2 <_printf_float+0x26a>
 800a98a:	2301      	movs	r3, #1
 800a98c:	4a41      	ldr	r2, [pc, #260]	; (800aa94 <_printf_float+0x30c>)
 800a98e:	4631      	mov	r1, r6
 800a990:	4628      	mov	r0, r5
 800a992:	47b8      	blx	r7
 800a994:	3001      	adds	r0, #1
 800a996:	f43f af54 	beq.w	800a842 <_printf_float+0xba>
 800a99a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a99e:	429a      	cmp	r2, r3
 800a9a0:	db02      	blt.n	800a9a8 <_printf_float+0x220>
 800a9a2:	6823      	ldr	r3, [r4, #0]
 800a9a4:	07d8      	lsls	r0, r3, #31
 800a9a6:	d50f      	bpl.n	800a9c8 <_printf_float+0x240>
 800a9a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ac:	4631      	mov	r1, r6
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	47b8      	blx	r7
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	f43f af45 	beq.w	800a842 <_printf_float+0xba>
 800a9b8:	f04f 0800 	mov.w	r8, #0
 800a9bc:	f104 091a 	add.w	r9, r4, #26
 800a9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	4543      	cmp	r3, r8
 800a9c6:	dc09      	bgt.n	800a9dc <_printf_float+0x254>
 800a9c8:	6823      	ldr	r3, [r4, #0]
 800a9ca:	079b      	lsls	r3, r3, #30
 800a9cc:	f100 8103 	bmi.w	800abd6 <_printf_float+0x44e>
 800a9d0:	68e0      	ldr	r0, [r4, #12]
 800a9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d4:	4298      	cmp	r0, r3
 800a9d6:	bfb8      	it	lt
 800a9d8:	4618      	movlt	r0, r3
 800a9da:	e734      	b.n	800a846 <_printf_float+0xbe>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	464a      	mov	r2, r9
 800a9e0:	4631      	mov	r1, r6
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	47b8      	blx	r7
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	f43f af2b 	beq.w	800a842 <_printf_float+0xba>
 800a9ec:	f108 0801 	add.w	r8, r8, #1
 800a9f0:	e7e6      	b.n	800a9c0 <_printf_float+0x238>
 800a9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	dc2b      	bgt.n	800aa50 <_printf_float+0x2c8>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4a26      	ldr	r2, [pc, #152]	; (800aa94 <_printf_float+0x30c>)
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4628      	mov	r0, r5
 800aa00:	47b8      	blx	r7
 800aa02:	3001      	adds	r0, #1
 800aa04:	f43f af1d 	beq.w	800a842 <_printf_float+0xba>
 800aa08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0a:	b923      	cbnz	r3, 800aa16 <_printf_float+0x28e>
 800aa0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0e:	b913      	cbnz	r3, 800aa16 <_printf_float+0x28e>
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	07d9      	lsls	r1, r3, #31
 800aa14:	d5d8      	bpl.n	800a9c8 <_printf_float+0x240>
 800aa16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa1a:	4631      	mov	r1, r6
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	47b8      	blx	r7
 800aa20:	3001      	adds	r0, #1
 800aa22:	f43f af0e 	beq.w	800a842 <_printf_float+0xba>
 800aa26:	f04f 0900 	mov.w	r9, #0
 800aa2a:	f104 0a1a 	add.w	sl, r4, #26
 800aa2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa30:	425b      	negs	r3, r3
 800aa32:	454b      	cmp	r3, r9
 800aa34:	dc01      	bgt.n	800aa3a <_printf_float+0x2b2>
 800aa36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa38:	e794      	b.n	800a964 <_printf_float+0x1dc>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	4652      	mov	r2, sl
 800aa3e:	4631      	mov	r1, r6
 800aa40:	4628      	mov	r0, r5
 800aa42:	47b8      	blx	r7
 800aa44:	3001      	adds	r0, #1
 800aa46:	f43f aefc 	beq.w	800a842 <_printf_float+0xba>
 800aa4a:	f109 0901 	add.w	r9, r9, #1
 800aa4e:	e7ee      	b.n	800aa2e <_printf_float+0x2a6>
 800aa50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa54:	429a      	cmp	r2, r3
 800aa56:	bfa8      	it	ge
 800aa58:	461a      	movge	r2, r3
 800aa5a:	2a00      	cmp	r2, #0
 800aa5c:	4691      	mov	r9, r2
 800aa5e:	dd07      	ble.n	800aa70 <_printf_float+0x2e8>
 800aa60:	4613      	mov	r3, r2
 800aa62:	4631      	mov	r1, r6
 800aa64:	4642      	mov	r2, r8
 800aa66:	4628      	mov	r0, r5
 800aa68:	47b8      	blx	r7
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	f43f aee9 	beq.w	800a842 <_printf_float+0xba>
 800aa70:	f104 031a 	add.w	r3, r4, #26
 800aa74:	f04f 0b00 	mov.w	fp, #0
 800aa78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa7c:	9306      	str	r3, [sp, #24]
 800aa7e:	e015      	b.n	800aaac <_printf_float+0x324>
 800aa80:	7fefffff 	.word	0x7fefffff
 800aa84:	080105f4 	.word	0x080105f4
 800aa88:	080105f0 	.word	0x080105f0
 800aa8c:	080105fc 	.word	0x080105fc
 800aa90:	080105f8 	.word	0x080105f8
 800aa94:	08010600 	.word	0x08010600
 800aa98:	2301      	movs	r3, #1
 800aa9a:	9a06      	ldr	r2, [sp, #24]
 800aa9c:	4631      	mov	r1, r6
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	47b8      	blx	r7
 800aaa2:	3001      	adds	r0, #1
 800aaa4:	f43f aecd 	beq.w	800a842 <_printf_float+0xba>
 800aaa8:	f10b 0b01 	add.w	fp, fp, #1
 800aaac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800aab0:	ebaa 0309 	sub.w	r3, sl, r9
 800aab4:	455b      	cmp	r3, fp
 800aab6:	dcef      	bgt.n	800aa98 <_printf_float+0x310>
 800aab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aabc:	429a      	cmp	r2, r3
 800aabe:	44d0      	add	r8, sl
 800aac0:	db15      	blt.n	800aaee <_printf_float+0x366>
 800aac2:	6823      	ldr	r3, [r4, #0]
 800aac4:	07da      	lsls	r2, r3, #31
 800aac6:	d412      	bmi.n	800aaee <_printf_float+0x366>
 800aac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aacc:	eba3 020a 	sub.w	r2, r3, sl
 800aad0:	eba3 0a01 	sub.w	sl, r3, r1
 800aad4:	4592      	cmp	sl, r2
 800aad6:	bfa8      	it	ge
 800aad8:	4692      	movge	sl, r2
 800aada:	f1ba 0f00 	cmp.w	sl, #0
 800aade:	dc0e      	bgt.n	800aafe <_printf_float+0x376>
 800aae0:	f04f 0800 	mov.w	r8, #0
 800aae4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aae8:	f104 091a 	add.w	r9, r4, #26
 800aaec:	e019      	b.n	800ab22 <_printf_float+0x39a>
 800aaee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaf2:	4631      	mov	r1, r6
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	47b8      	blx	r7
 800aaf8:	3001      	adds	r0, #1
 800aafa:	d1e5      	bne.n	800aac8 <_printf_float+0x340>
 800aafc:	e6a1      	b.n	800a842 <_printf_float+0xba>
 800aafe:	4653      	mov	r3, sl
 800ab00:	4642      	mov	r2, r8
 800ab02:	4631      	mov	r1, r6
 800ab04:	4628      	mov	r0, r5
 800ab06:	47b8      	blx	r7
 800ab08:	3001      	adds	r0, #1
 800ab0a:	d1e9      	bne.n	800aae0 <_printf_float+0x358>
 800ab0c:	e699      	b.n	800a842 <_printf_float+0xba>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	464a      	mov	r2, r9
 800ab12:	4631      	mov	r1, r6
 800ab14:	4628      	mov	r0, r5
 800ab16:	47b8      	blx	r7
 800ab18:	3001      	adds	r0, #1
 800ab1a:	f43f ae92 	beq.w	800a842 <_printf_float+0xba>
 800ab1e:	f108 0801 	add.w	r8, r8, #1
 800ab22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ab26:	1a9b      	subs	r3, r3, r2
 800ab28:	eba3 030a 	sub.w	r3, r3, sl
 800ab2c:	4543      	cmp	r3, r8
 800ab2e:	dcee      	bgt.n	800ab0e <_printf_float+0x386>
 800ab30:	e74a      	b.n	800a9c8 <_printf_float+0x240>
 800ab32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab34:	2a01      	cmp	r2, #1
 800ab36:	dc01      	bgt.n	800ab3c <_printf_float+0x3b4>
 800ab38:	07db      	lsls	r3, r3, #31
 800ab3a:	d53a      	bpl.n	800abb2 <_printf_float+0x42a>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	4642      	mov	r2, r8
 800ab40:	4631      	mov	r1, r6
 800ab42:	4628      	mov	r0, r5
 800ab44:	47b8      	blx	r7
 800ab46:	3001      	adds	r0, #1
 800ab48:	f43f ae7b 	beq.w	800a842 <_printf_float+0xba>
 800ab4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab50:	4631      	mov	r1, r6
 800ab52:	4628      	mov	r0, r5
 800ab54:	47b8      	blx	r7
 800ab56:	3001      	adds	r0, #1
 800ab58:	f108 0801 	add.w	r8, r8, #1
 800ab5c:	f43f ae71 	beq.w	800a842 <_printf_float+0xba>
 800ab60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab62:	2200      	movs	r2, #0
 800ab64:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800ab68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f7f5 ffbb 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab72:	b9c8      	cbnz	r0, 800aba8 <_printf_float+0x420>
 800ab74:	4653      	mov	r3, sl
 800ab76:	4642      	mov	r2, r8
 800ab78:	4631      	mov	r1, r6
 800ab7a:	4628      	mov	r0, r5
 800ab7c:	47b8      	blx	r7
 800ab7e:	3001      	adds	r0, #1
 800ab80:	d10e      	bne.n	800aba0 <_printf_float+0x418>
 800ab82:	e65e      	b.n	800a842 <_printf_float+0xba>
 800ab84:	2301      	movs	r3, #1
 800ab86:	4652      	mov	r2, sl
 800ab88:	4631      	mov	r1, r6
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	47b8      	blx	r7
 800ab8e:	3001      	adds	r0, #1
 800ab90:	f43f ae57 	beq.w	800a842 <_printf_float+0xba>
 800ab94:	f108 0801 	add.w	r8, r8, #1
 800ab98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab9a:	3b01      	subs	r3, #1
 800ab9c:	4543      	cmp	r3, r8
 800ab9e:	dcf1      	bgt.n	800ab84 <_printf_float+0x3fc>
 800aba0:	464b      	mov	r3, r9
 800aba2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aba6:	e6de      	b.n	800a966 <_printf_float+0x1de>
 800aba8:	f04f 0800 	mov.w	r8, #0
 800abac:	f104 0a1a 	add.w	sl, r4, #26
 800abb0:	e7f2      	b.n	800ab98 <_printf_float+0x410>
 800abb2:	2301      	movs	r3, #1
 800abb4:	e7df      	b.n	800ab76 <_printf_float+0x3ee>
 800abb6:	2301      	movs	r3, #1
 800abb8:	464a      	mov	r2, r9
 800abba:	4631      	mov	r1, r6
 800abbc:	4628      	mov	r0, r5
 800abbe:	47b8      	blx	r7
 800abc0:	3001      	adds	r0, #1
 800abc2:	f43f ae3e 	beq.w	800a842 <_printf_float+0xba>
 800abc6:	f108 0801 	add.w	r8, r8, #1
 800abca:	68e3      	ldr	r3, [r4, #12]
 800abcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abce:	1a9b      	subs	r3, r3, r2
 800abd0:	4543      	cmp	r3, r8
 800abd2:	dcf0      	bgt.n	800abb6 <_printf_float+0x42e>
 800abd4:	e6fc      	b.n	800a9d0 <_printf_float+0x248>
 800abd6:	f04f 0800 	mov.w	r8, #0
 800abda:	f104 0919 	add.w	r9, r4, #25
 800abde:	e7f4      	b.n	800abca <_printf_float+0x442>
 800abe0:	2900      	cmp	r1, #0
 800abe2:	f43f ae8b 	beq.w	800a8fc <_printf_float+0x174>
 800abe6:	2300      	movs	r3, #0
 800abe8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800abec:	ab09      	add	r3, sp, #36	; 0x24
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	ec49 8b10 	vmov	d0, r8, r9
 800abf4:	6022      	str	r2, [r4, #0]
 800abf6:	f8cd a004 	str.w	sl, [sp, #4]
 800abfa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800abfe:	4628      	mov	r0, r5
 800ac00:	f7ff fd2e 	bl	800a660 <__cvt>
 800ac04:	4680      	mov	r8, r0
 800ac06:	e648      	b.n	800a89a <_printf_float+0x112>

0800ac08 <_printf_common>:
 800ac08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac0c:	4691      	mov	r9, r2
 800ac0e:	461f      	mov	r7, r3
 800ac10:	688a      	ldr	r2, [r1, #8]
 800ac12:	690b      	ldr	r3, [r1, #16]
 800ac14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	bfb8      	it	lt
 800ac1c:	4613      	movlt	r3, r2
 800ac1e:	f8c9 3000 	str.w	r3, [r9]
 800ac22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac26:	4606      	mov	r6, r0
 800ac28:	460c      	mov	r4, r1
 800ac2a:	b112      	cbz	r2, 800ac32 <_printf_common+0x2a>
 800ac2c:	3301      	adds	r3, #1
 800ac2e:	f8c9 3000 	str.w	r3, [r9]
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	0699      	lsls	r1, r3, #26
 800ac36:	bf42      	ittt	mi
 800ac38:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ac3c:	3302      	addmi	r3, #2
 800ac3e:	f8c9 3000 	strmi.w	r3, [r9]
 800ac42:	6825      	ldr	r5, [r4, #0]
 800ac44:	f015 0506 	ands.w	r5, r5, #6
 800ac48:	d107      	bne.n	800ac5a <_printf_common+0x52>
 800ac4a:	f104 0a19 	add.w	sl, r4, #25
 800ac4e:	68e3      	ldr	r3, [r4, #12]
 800ac50:	f8d9 2000 	ldr.w	r2, [r9]
 800ac54:	1a9b      	subs	r3, r3, r2
 800ac56:	42ab      	cmp	r3, r5
 800ac58:	dc28      	bgt.n	800acac <_printf_common+0xa4>
 800ac5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ac5e:	6822      	ldr	r2, [r4, #0]
 800ac60:	3300      	adds	r3, #0
 800ac62:	bf18      	it	ne
 800ac64:	2301      	movne	r3, #1
 800ac66:	0692      	lsls	r2, r2, #26
 800ac68:	d42d      	bmi.n	800acc6 <_printf_common+0xbe>
 800ac6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac6e:	4639      	mov	r1, r7
 800ac70:	4630      	mov	r0, r6
 800ac72:	47c0      	blx	r8
 800ac74:	3001      	adds	r0, #1
 800ac76:	d020      	beq.n	800acba <_printf_common+0xb2>
 800ac78:	6823      	ldr	r3, [r4, #0]
 800ac7a:	68e5      	ldr	r5, [r4, #12]
 800ac7c:	f8d9 2000 	ldr.w	r2, [r9]
 800ac80:	f003 0306 	and.w	r3, r3, #6
 800ac84:	2b04      	cmp	r3, #4
 800ac86:	bf08      	it	eq
 800ac88:	1aad      	subeq	r5, r5, r2
 800ac8a:	68a3      	ldr	r3, [r4, #8]
 800ac8c:	6922      	ldr	r2, [r4, #16]
 800ac8e:	bf0c      	ite	eq
 800ac90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac94:	2500      	movne	r5, #0
 800ac96:	4293      	cmp	r3, r2
 800ac98:	bfc4      	itt	gt
 800ac9a:	1a9b      	subgt	r3, r3, r2
 800ac9c:	18ed      	addgt	r5, r5, r3
 800ac9e:	f04f 0900 	mov.w	r9, #0
 800aca2:	341a      	adds	r4, #26
 800aca4:	454d      	cmp	r5, r9
 800aca6:	d11a      	bne.n	800acde <_printf_common+0xd6>
 800aca8:	2000      	movs	r0, #0
 800acaa:	e008      	b.n	800acbe <_printf_common+0xb6>
 800acac:	2301      	movs	r3, #1
 800acae:	4652      	mov	r2, sl
 800acb0:	4639      	mov	r1, r7
 800acb2:	4630      	mov	r0, r6
 800acb4:	47c0      	blx	r8
 800acb6:	3001      	adds	r0, #1
 800acb8:	d103      	bne.n	800acc2 <_printf_common+0xba>
 800acba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc2:	3501      	adds	r5, #1
 800acc4:	e7c3      	b.n	800ac4e <_printf_common+0x46>
 800acc6:	18e1      	adds	r1, r4, r3
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	2030      	movs	r0, #48	; 0x30
 800accc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acd0:	4422      	add	r2, r4
 800acd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acda:	3302      	adds	r3, #2
 800acdc:	e7c5      	b.n	800ac6a <_printf_common+0x62>
 800acde:	2301      	movs	r3, #1
 800ace0:	4622      	mov	r2, r4
 800ace2:	4639      	mov	r1, r7
 800ace4:	4630      	mov	r0, r6
 800ace6:	47c0      	blx	r8
 800ace8:	3001      	adds	r0, #1
 800acea:	d0e6      	beq.n	800acba <_printf_common+0xb2>
 800acec:	f109 0901 	add.w	r9, r9, #1
 800acf0:	e7d8      	b.n	800aca4 <_printf_common+0x9c>
	...

0800acf4 <_printf_i>:
 800acf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acf8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800acfc:	460c      	mov	r4, r1
 800acfe:	7e09      	ldrb	r1, [r1, #24]
 800ad00:	b085      	sub	sp, #20
 800ad02:	296e      	cmp	r1, #110	; 0x6e
 800ad04:	4617      	mov	r7, r2
 800ad06:	4606      	mov	r6, r0
 800ad08:	4698      	mov	r8, r3
 800ad0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad0c:	f000 80b3 	beq.w	800ae76 <_printf_i+0x182>
 800ad10:	d822      	bhi.n	800ad58 <_printf_i+0x64>
 800ad12:	2963      	cmp	r1, #99	; 0x63
 800ad14:	d036      	beq.n	800ad84 <_printf_i+0x90>
 800ad16:	d80a      	bhi.n	800ad2e <_printf_i+0x3a>
 800ad18:	2900      	cmp	r1, #0
 800ad1a:	f000 80b9 	beq.w	800ae90 <_printf_i+0x19c>
 800ad1e:	2958      	cmp	r1, #88	; 0x58
 800ad20:	f000 8083 	beq.w	800ae2a <_printf_i+0x136>
 800ad24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ad2c:	e032      	b.n	800ad94 <_printf_i+0xa0>
 800ad2e:	2964      	cmp	r1, #100	; 0x64
 800ad30:	d001      	beq.n	800ad36 <_printf_i+0x42>
 800ad32:	2969      	cmp	r1, #105	; 0x69
 800ad34:	d1f6      	bne.n	800ad24 <_printf_i+0x30>
 800ad36:	6820      	ldr	r0, [r4, #0]
 800ad38:	6813      	ldr	r3, [r2, #0]
 800ad3a:	0605      	lsls	r5, r0, #24
 800ad3c:	f103 0104 	add.w	r1, r3, #4
 800ad40:	d52a      	bpl.n	800ad98 <_printf_i+0xa4>
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6011      	str	r1, [r2, #0]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	da03      	bge.n	800ad52 <_printf_i+0x5e>
 800ad4a:	222d      	movs	r2, #45	; 0x2d
 800ad4c:	425b      	negs	r3, r3
 800ad4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ad52:	486f      	ldr	r0, [pc, #444]	; (800af10 <_printf_i+0x21c>)
 800ad54:	220a      	movs	r2, #10
 800ad56:	e039      	b.n	800adcc <_printf_i+0xd8>
 800ad58:	2973      	cmp	r1, #115	; 0x73
 800ad5a:	f000 809d 	beq.w	800ae98 <_printf_i+0x1a4>
 800ad5e:	d808      	bhi.n	800ad72 <_printf_i+0x7e>
 800ad60:	296f      	cmp	r1, #111	; 0x6f
 800ad62:	d020      	beq.n	800ada6 <_printf_i+0xb2>
 800ad64:	2970      	cmp	r1, #112	; 0x70
 800ad66:	d1dd      	bne.n	800ad24 <_printf_i+0x30>
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	f043 0320 	orr.w	r3, r3, #32
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	e003      	b.n	800ad7a <_printf_i+0x86>
 800ad72:	2975      	cmp	r1, #117	; 0x75
 800ad74:	d017      	beq.n	800ada6 <_printf_i+0xb2>
 800ad76:	2978      	cmp	r1, #120	; 0x78
 800ad78:	d1d4      	bne.n	800ad24 <_printf_i+0x30>
 800ad7a:	2378      	movs	r3, #120	; 0x78
 800ad7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad80:	4864      	ldr	r0, [pc, #400]	; (800af14 <_printf_i+0x220>)
 800ad82:	e055      	b.n	800ae30 <_printf_i+0x13c>
 800ad84:	6813      	ldr	r3, [r2, #0]
 800ad86:	1d19      	adds	r1, r3, #4
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	6011      	str	r1, [r2, #0]
 800ad8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad94:	2301      	movs	r3, #1
 800ad96:	e08c      	b.n	800aeb2 <_printf_i+0x1be>
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	6011      	str	r1, [r2, #0]
 800ad9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ada0:	bf18      	it	ne
 800ada2:	b21b      	sxthne	r3, r3
 800ada4:	e7cf      	b.n	800ad46 <_printf_i+0x52>
 800ada6:	6813      	ldr	r3, [r2, #0]
 800ada8:	6825      	ldr	r5, [r4, #0]
 800adaa:	1d18      	adds	r0, r3, #4
 800adac:	6010      	str	r0, [r2, #0]
 800adae:	0628      	lsls	r0, r5, #24
 800adb0:	d501      	bpl.n	800adb6 <_printf_i+0xc2>
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	e002      	b.n	800adbc <_printf_i+0xc8>
 800adb6:	0668      	lsls	r0, r5, #25
 800adb8:	d5fb      	bpl.n	800adb2 <_printf_i+0xbe>
 800adba:	881b      	ldrh	r3, [r3, #0]
 800adbc:	4854      	ldr	r0, [pc, #336]	; (800af10 <_printf_i+0x21c>)
 800adbe:	296f      	cmp	r1, #111	; 0x6f
 800adc0:	bf14      	ite	ne
 800adc2:	220a      	movne	r2, #10
 800adc4:	2208      	moveq	r2, #8
 800adc6:	2100      	movs	r1, #0
 800adc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adcc:	6865      	ldr	r5, [r4, #4]
 800adce:	60a5      	str	r5, [r4, #8]
 800add0:	2d00      	cmp	r5, #0
 800add2:	f2c0 8095 	blt.w	800af00 <_printf_i+0x20c>
 800add6:	6821      	ldr	r1, [r4, #0]
 800add8:	f021 0104 	bic.w	r1, r1, #4
 800addc:	6021      	str	r1, [r4, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d13d      	bne.n	800ae5e <_printf_i+0x16a>
 800ade2:	2d00      	cmp	r5, #0
 800ade4:	f040 808e 	bne.w	800af04 <_printf_i+0x210>
 800ade8:	4665      	mov	r5, ip
 800adea:	2a08      	cmp	r2, #8
 800adec:	d10b      	bne.n	800ae06 <_printf_i+0x112>
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	07db      	lsls	r3, r3, #31
 800adf2:	d508      	bpl.n	800ae06 <_printf_i+0x112>
 800adf4:	6923      	ldr	r3, [r4, #16]
 800adf6:	6862      	ldr	r2, [r4, #4]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	bfde      	ittt	le
 800adfc:	2330      	movle	r3, #48	; 0x30
 800adfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae02:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ae06:	ebac 0305 	sub.w	r3, ip, r5
 800ae0a:	6123      	str	r3, [r4, #16]
 800ae0c:	f8cd 8000 	str.w	r8, [sp]
 800ae10:	463b      	mov	r3, r7
 800ae12:	aa03      	add	r2, sp, #12
 800ae14:	4621      	mov	r1, r4
 800ae16:	4630      	mov	r0, r6
 800ae18:	f7ff fef6 	bl	800ac08 <_printf_common>
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	d14d      	bne.n	800aebc <_printf_i+0x1c8>
 800ae20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae24:	b005      	add	sp, #20
 800ae26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	4839      	ldr	r0, [pc, #228]	; (800af10 <_printf_i+0x21c>)
 800ae2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ae30:	6813      	ldr	r3, [r2, #0]
 800ae32:	6821      	ldr	r1, [r4, #0]
 800ae34:	1d1d      	adds	r5, r3, #4
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6015      	str	r5, [r2, #0]
 800ae3a:	060a      	lsls	r2, r1, #24
 800ae3c:	d50b      	bpl.n	800ae56 <_printf_i+0x162>
 800ae3e:	07ca      	lsls	r2, r1, #31
 800ae40:	bf44      	itt	mi
 800ae42:	f041 0120 	orrmi.w	r1, r1, #32
 800ae46:	6021      	strmi	r1, [r4, #0]
 800ae48:	b91b      	cbnz	r3, 800ae52 <_printf_i+0x15e>
 800ae4a:	6822      	ldr	r2, [r4, #0]
 800ae4c:	f022 0220 	bic.w	r2, r2, #32
 800ae50:	6022      	str	r2, [r4, #0]
 800ae52:	2210      	movs	r2, #16
 800ae54:	e7b7      	b.n	800adc6 <_printf_i+0xd2>
 800ae56:	064d      	lsls	r5, r1, #25
 800ae58:	bf48      	it	mi
 800ae5a:	b29b      	uxthmi	r3, r3
 800ae5c:	e7ef      	b.n	800ae3e <_printf_i+0x14a>
 800ae5e:	4665      	mov	r5, ip
 800ae60:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae64:	fb02 3311 	mls	r3, r2, r1, r3
 800ae68:	5cc3      	ldrb	r3, [r0, r3]
 800ae6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ae6e:	460b      	mov	r3, r1
 800ae70:	2900      	cmp	r1, #0
 800ae72:	d1f5      	bne.n	800ae60 <_printf_i+0x16c>
 800ae74:	e7b9      	b.n	800adea <_printf_i+0xf6>
 800ae76:	6813      	ldr	r3, [r2, #0]
 800ae78:	6825      	ldr	r5, [r4, #0]
 800ae7a:	6961      	ldr	r1, [r4, #20]
 800ae7c:	1d18      	adds	r0, r3, #4
 800ae7e:	6010      	str	r0, [r2, #0]
 800ae80:	0628      	lsls	r0, r5, #24
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	d501      	bpl.n	800ae8a <_printf_i+0x196>
 800ae86:	6019      	str	r1, [r3, #0]
 800ae88:	e002      	b.n	800ae90 <_printf_i+0x19c>
 800ae8a:	066a      	lsls	r2, r5, #25
 800ae8c:	d5fb      	bpl.n	800ae86 <_printf_i+0x192>
 800ae8e:	8019      	strh	r1, [r3, #0]
 800ae90:	2300      	movs	r3, #0
 800ae92:	6123      	str	r3, [r4, #16]
 800ae94:	4665      	mov	r5, ip
 800ae96:	e7b9      	b.n	800ae0c <_printf_i+0x118>
 800ae98:	6813      	ldr	r3, [r2, #0]
 800ae9a:	1d19      	adds	r1, r3, #4
 800ae9c:	6011      	str	r1, [r2, #0]
 800ae9e:	681d      	ldr	r5, [r3, #0]
 800aea0:	6862      	ldr	r2, [r4, #4]
 800aea2:	2100      	movs	r1, #0
 800aea4:	4628      	mov	r0, r5
 800aea6:	f7f5 f9ab 	bl	8000200 <memchr>
 800aeaa:	b108      	cbz	r0, 800aeb0 <_printf_i+0x1bc>
 800aeac:	1b40      	subs	r0, r0, r5
 800aeae:	6060      	str	r0, [r4, #4]
 800aeb0:	6863      	ldr	r3, [r4, #4]
 800aeb2:	6123      	str	r3, [r4, #16]
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeba:	e7a7      	b.n	800ae0c <_printf_i+0x118>
 800aebc:	6923      	ldr	r3, [r4, #16]
 800aebe:	462a      	mov	r2, r5
 800aec0:	4639      	mov	r1, r7
 800aec2:	4630      	mov	r0, r6
 800aec4:	47c0      	blx	r8
 800aec6:	3001      	adds	r0, #1
 800aec8:	d0aa      	beq.n	800ae20 <_printf_i+0x12c>
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	079b      	lsls	r3, r3, #30
 800aece:	d413      	bmi.n	800aef8 <_printf_i+0x204>
 800aed0:	68e0      	ldr	r0, [r4, #12]
 800aed2:	9b03      	ldr	r3, [sp, #12]
 800aed4:	4298      	cmp	r0, r3
 800aed6:	bfb8      	it	lt
 800aed8:	4618      	movlt	r0, r3
 800aeda:	e7a3      	b.n	800ae24 <_printf_i+0x130>
 800aedc:	2301      	movs	r3, #1
 800aede:	464a      	mov	r2, r9
 800aee0:	4639      	mov	r1, r7
 800aee2:	4630      	mov	r0, r6
 800aee4:	47c0      	blx	r8
 800aee6:	3001      	adds	r0, #1
 800aee8:	d09a      	beq.n	800ae20 <_printf_i+0x12c>
 800aeea:	3501      	adds	r5, #1
 800aeec:	68e3      	ldr	r3, [r4, #12]
 800aeee:	9a03      	ldr	r2, [sp, #12]
 800aef0:	1a9b      	subs	r3, r3, r2
 800aef2:	42ab      	cmp	r3, r5
 800aef4:	dcf2      	bgt.n	800aedc <_printf_i+0x1e8>
 800aef6:	e7eb      	b.n	800aed0 <_printf_i+0x1dc>
 800aef8:	2500      	movs	r5, #0
 800aefa:	f104 0919 	add.w	r9, r4, #25
 800aefe:	e7f5      	b.n	800aeec <_printf_i+0x1f8>
 800af00:	2b00      	cmp	r3, #0
 800af02:	d1ac      	bne.n	800ae5e <_printf_i+0x16a>
 800af04:	7803      	ldrb	r3, [r0, #0]
 800af06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af0e:	e76c      	b.n	800adea <_printf_i+0xf6>
 800af10:	08010602 	.word	0x08010602
 800af14:	08010613 	.word	0x08010613

0800af18 <_scanf_float>:
 800af18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	469a      	mov	sl, r3
 800af1e:	688b      	ldr	r3, [r1, #8]
 800af20:	4616      	mov	r6, r2
 800af22:	1e5a      	subs	r2, r3, #1
 800af24:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800af28:	b087      	sub	sp, #28
 800af2a:	bf83      	ittte	hi
 800af2c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800af30:	189b      	addhi	r3, r3, r2
 800af32:	9301      	strhi	r3, [sp, #4]
 800af34:	2300      	movls	r3, #0
 800af36:	bf86      	itte	hi
 800af38:	f240 135d 	movwhi	r3, #349	; 0x15d
 800af3c:	608b      	strhi	r3, [r1, #8]
 800af3e:	9301      	strls	r3, [sp, #4]
 800af40:	680b      	ldr	r3, [r1, #0]
 800af42:	4688      	mov	r8, r1
 800af44:	f04f 0b00 	mov.w	fp, #0
 800af48:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800af4c:	f848 3b1c 	str.w	r3, [r8], #28
 800af50:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800af54:	4607      	mov	r7, r0
 800af56:	460c      	mov	r4, r1
 800af58:	4645      	mov	r5, r8
 800af5a:	465a      	mov	r2, fp
 800af5c:	46d9      	mov	r9, fp
 800af5e:	f8cd b008 	str.w	fp, [sp, #8]
 800af62:	68a1      	ldr	r1, [r4, #8]
 800af64:	b181      	cbz	r1, 800af88 <_scanf_float+0x70>
 800af66:	6833      	ldr	r3, [r6, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	2b49      	cmp	r3, #73	; 0x49
 800af6c:	d071      	beq.n	800b052 <_scanf_float+0x13a>
 800af6e:	d84d      	bhi.n	800b00c <_scanf_float+0xf4>
 800af70:	2b39      	cmp	r3, #57	; 0x39
 800af72:	d840      	bhi.n	800aff6 <_scanf_float+0xde>
 800af74:	2b31      	cmp	r3, #49	; 0x31
 800af76:	f080 8088 	bcs.w	800b08a <_scanf_float+0x172>
 800af7a:	2b2d      	cmp	r3, #45	; 0x2d
 800af7c:	f000 8090 	beq.w	800b0a0 <_scanf_float+0x188>
 800af80:	d815      	bhi.n	800afae <_scanf_float+0x96>
 800af82:	2b2b      	cmp	r3, #43	; 0x2b
 800af84:	f000 808c 	beq.w	800b0a0 <_scanf_float+0x188>
 800af88:	f1b9 0f00 	cmp.w	r9, #0
 800af8c:	d003      	beq.n	800af96 <_scanf_float+0x7e>
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af94:	6023      	str	r3, [r4, #0]
 800af96:	3a01      	subs	r2, #1
 800af98:	2a01      	cmp	r2, #1
 800af9a:	f200 80ea 	bhi.w	800b172 <_scanf_float+0x25a>
 800af9e:	4545      	cmp	r5, r8
 800afa0:	f200 80dc 	bhi.w	800b15c <_scanf_float+0x244>
 800afa4:	2601      	movs	r6, #1
 800afa6:	4630      	mov	r0, r6
 800afa8:	b007      	add	sp, #28
 800afaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afae:	2b2e      	cmp	r3, #46	; 0x2e
 800afb0:	f000 809f 	beq.w	800b0f2 <_scanf_float+0x1da>
 800afb4:	2b30      	cmp	r3, #48	; 0x30
 800afb6:	d1e7      	bne.n	800af88 <_scanf_float+0x70>
 800afb8:	6820      	ldr	r0, [r4, #0]
 800afba:	f410 7f80 	tst.w	r0, #256	; 0x100
 800afbe:	d064      	beq.n	800b08a <_scanf_float+0x172>
 800afc0:	9b01      	ldr	r3, [sp, #4]
 800afc2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800afc6:	6020      	str	r0, [r4, #0]
 800afc8:	f109 0901 	add.w	r9, r9, #1
 800afcc:	b11b      	cbz	r3, 800afd6 <_scanf_float+0xbe>
 800afce:	3b01      	subs	r3, #1
 800afd0:	3101      	adds	r1, #1
 800afd2:	9301      	str	r3, [sp, #4]
 800afd4:	60a1      	str	r1, [r4, #8]
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	3b01      	subs	r3, #1
 800afda:	60a3      	str	r3, [r4, #8]
 800afdc:	6923      	ldr	r3, [r4, #16]
 800afde:	3301      	adds	r3, #1
 800afe0:	6123      	str	r3, [r4, #16]
 800afe2:	6873      	ldr	r3, [r6, #4]
 800afe4:	3b01      	subs	r3, #1
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	6073      	str	r3, [r6, #4]
 800afea:	f340 80ac 	ble.w	800b146 <_scanf_float+0x22e>
 800afee:	6833      	ldr	r3, [r6, #0]
 800aff0:	3301      	adds	r3, #1
 800aff2:	6033      	str	r3, [r6, #0]
 800aff4:	e7b5      	b.n	800af62 <_scanf_float+0x4a>
 800aff6:	2b45      	cmp	r3, #69	; 0x45
 800aff8:	f000 8085 	beq.w	800b106 <_scanf_float+0x1ee>
 800affc:	2b46      	cmp	r3, #70	; 0x46
 800affe:	d06a      	beq.n	800b0d6 <_scanf_float+0x1be>
 800b000:	2b41      	cmp	r3, #65	; 0x41
 800b002:	d1c1      	bne.n	800af88 <_scanf_float+0x70>
 800b004:	2a01      	cmp	r2, #1
 800b006:	d1bf      	bne.n	800af88 <_scanf_float+0x70>
 800b008:	2202      	movs	r2, #2
 800b00a:	e046      	b.n	800b09a <_scanf_float+0x182>
 800b00c:	2b65      	cmp	r3, #101	; 0x65
 800b00e:	d07a      	beq.n	800b106 <_scanf_float+0x1ee>
 800b010:	d818      	bhi.n	800b044 <_scanf_float+0x12c>
 800b012:	2b54      	cmp	r3, #84	; 0x54
 800b014:	d066      	beq.n	800b0e4 <_scanf_float+0x1cc>
 800b016:	d811      	bhi.n	800b03c <_scanf_float+0x124>
 800b018:	2b4e      	cmp	r3, #78	; 0x4e
 800b01a:	d1b5      	bne.n	800af88 <_scanf_float+0x70>
 800b01c:	2a00      	cmp	r2, #0
 800b01e:	d146      	bne.n	800b0ae <_scanf_float+0x196>
 800b020:	f1b9 0f00 	cmp.w	r9, #0
 800b024:	d145      	bne.n	800b0b2 <_scanf_float+0x19a>
 800b026:	6821      	ldr	r1, [r4, #0]
 800b028:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b02c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b030:	d13f      	bne.n	800b0b2 <_scanf_float+0x19a>
 800b032:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b036:	6021      	str	r1, [r4, #0]
 800b038:	2201      	movs	r2, #1
 800b03a:	e02e      	b.n	800b09a <_scanf_float+0x182>
 800b03c:	2b59      	cmp	r3, #89	; 0x59
 800b03e:	d01e      	beq.n	800b07e <_scanf_float+0x166>
 800b040:	2b61      	cmp	r3, #97	; 0x61
 800b042:	e7de      	b.n	800b002 <_scanf_float+0xea>
 800b044:	2b6e      	cmp	r3, #110	; 0x6e
 800b046:	d0e9      	beq.n	800b01c <_scanf_float+0x104>
 800b048:	d815      	bhi.n	800b076 <_scanf_float+0x15e>
 800b04a:	2b66      	cmp	r3, #102	; 0x66
 800b04c:	d043      	beq.n	800b0d6 <_scanf_float+0x1be>
 800b04e:	2b69      	cmp	r3, #105	; 0x69
 800b050:	d19a      	bne.n	800af88 <_scanf_float+0x70>
 800b052:	f1bb 0f00 	cmp.w	fp, #0
 800b056:	d138      	bne.n	800b0ca <_scanf_float+0x1b2>
 800b058:	f1b9 0f00 	cmp.w	r9, #0
 800b05c:	d197      	bne.n	800af8e <_scanf_float+0x76>
 800b05e:	6821      	ldr	r1, [r4, #0]
 800b060:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b064:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b068:	d195      	bne.n	800af96 <_scanf_float+0x7e>
 800b06a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b06e:	6021      	str	r1, [r4, #0]
 800b070:	f04f 0b01 	mov.w	fp, #1
 800b074:	e011      	b.n	800b09a <_scanf_float+0x182>
 800b076:	2b74      	cmp	r3, #116	; 0x74
 800b078:	d034      	beq.n	800b0e4 <_scanf_float+0x1cc>
 800b07a:	2b79      	cmp	r3, #121	; 0x79
 800b07c:	d184      	bne.n	800af88 <_scanf_float+0x70>
 800b07e:	f1bb 0f07 	cmp.w	fp, #7
 800b082:	d181      	bne.n	800af88 <_scanf_float+0x70>
 800b084:	f04f 0b08 	mov.w	fp, #8
 800b088:	e007      	b.n	800b09a <_scanf_float+0x182>
 800b08a:	eb12 0f0b 	cmn.w	r2, fp
 800b08e:	f47f af7b 	bne.w	800af88 <_scanf_float+0x70>
 800b092:	6821      	ldr	r1, [r4, #0]
 800b094:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b098:	6021      	str	r1, [r4, #0]
 800b09a:	702b      	strb	r3, [r5, #0]
 800b09c:	3501      	adds	r5, #1
 800b09e:	e79a      	b.n	800afd6 <_scanf_float+0xbe>
 800b0a0:	6821      	ldr	r1, [r4, #0]
 800b0a2:	0608      	lsls	r0, r1, #24
 800b0a4:	f57f af70 	bpl.w	800af88 <_scanf_float+0x70>
 800b0a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b0ac:	e7f4      	b.n	800b098 <_scanf_float+0x180>
 800b0ae:	2a02      	cmp	r2, #2
 800b0b0:	d047      	beq.n	800b142 <_scanf_float+0x22a>
 800b0b2:	f1bb 0f01 	cmp.w	fp, #1
 800b0b6:	d003      	beq.n	800b0c0 <_scanf_float+0x1a8>
 800b0b8:	f1bb 0f04 	cmp.w	fp, #4
 800b0bc:	f47f af64 	bne.w	800af88 <_scanf_float+0x70>
 800b0c0:	f10b 0b01 	add.w	fp, fp, #1
 800b0c4:	fa5f fb8b 	uxtb.w	fp, fp
 800b0c8:	e7e7      	b.n	800b09a <_scanf_float+0x182>
 800b0ca:	f1bb 0f03 	cmp.w	fp, #3
 800b0ce:	d0f7      	beq.n	800b0c0 <_scanf_float+0x1a8>
 800b0d0:	f1bb 0f05 	cmp.w	fp, #5
 800b0d4:	e7f2      	b.n	800b0bc <_scanf_float+0x1a4>
 800b0d6:	f1bb 0f02 	cmp.w	fp, #2
 800b0da:	f47f af55 	bne.w	800af88 <_scanf_float+0x70>
 800b0de:	f04f 0b03 	mov.w	fp, #3
 800b0e2:	e7da      	b.n	800b09a <_scanf_float+0x182>
 800b0e4:	f1bb 0f06 	cmp.w	fp, #6
 800b0e8:	f47f af4e 	bne.w	800af88 <_scanf_float+0x70>
 800b0ec:	f04f 0b07 	mov.w	fp, #7
 800b0f0:	e7d3      	b.n	800b09a <_scanf_float+0x182>
 800b0f2:	6821      	ldr	r1, [r4, #0]
 800b0f4:	0588      	lsls	r0, r1, #22
 800b0f6:	f57f af47 	bpl.w	800af88 <_scanf_float+0x70>
 800b0fa:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800b0fe:	6021      	str	r1, [r4, #0]
 800b100:	f8cd 9008 	str.w	r9, [sp, #8]
 800b104:	e7c9      	b.n	800b09a <_scanf_float+0x182>
 800b106:	6821      	ldr	r1, [r4, #0]
 800b108:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800b10c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b110:	d006      	beq.n	800b120 <_scanf_float+0x208>
 800b112:	0548      	lsls	r0, r1, #21
 800b114:	f57f af38 	bpl.w	800af88 <_scanf_float+0x70>
 800b118:	f1b9 0f00 	cmp.w	r9, #0
 800b11c:	f43f af3b 	beq.w	800af96 <_scanf_float+0x7e>
 800b120:	0588      	lsls	r0, r1, #22
 800b122:	bf58      	it	pl
 800b124:	9802      	ldrpl	r0, [sp, #8]
 800b126:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b12a:	bf58      	it	pl
 800b12c:	eba9 0000 	subpl.w	r0, r9, r0
 800b130:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800b134:	bf58      	it	pl
 800b136:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800b13a:	6021      	str	r1, [r4, #0]
 800b13c:	f04f 0900 	mov.w	r9, #0
 800b140:	e7ab      	b.n	800b09a <_scanf_float+0x182>
 800b142:	2203      	movs	r2, #3
 800b144:	e7a9      	b.n	800b09a <_scanf_float+0x182>
 800b146:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b14a:	9205      	str	r2, [sp, #20]
 800b14c:	4631      	mov	r1, r6
 800b14e:	4638      	mov	r0, r7
 800b150:	4798      	blx	r3
 800b152:	9a05      	ldr	r2, [sp, #20]
 800b154:	2800      	cmp	r0, #0
 800b156:	f43f af04 	beq.w	800af62 <_scanf_float+0x4a>
 800b15a:	e715      	b.n	800af88 <_scanf_float+0x70>
 800b15c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b160:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b164:	4632      	mov	r2, r6
 800b166:	4638      	mov	r0, r7
 800b168:	4798      	blx	r3
 800b16a:	6923      	ldr	r3, [r4, #16]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	6123      	str	r3, [r4, #16]
 800b170:	e715      	b.n	800af9e <_scanf_float+0x86>
 800b172:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800b176:	2b06      	cmp	r3, #6
 800b178:	d80a      	bhi.n	800b190 <_scanf_float+0x278>
 800b17a:	f1bb 0f02 	cmp.w	fp, #2
 800b17e:	d968      	bls.n	800b252 <_scanf_float+0x33a>
 800b180:	f1ab 0b03 	sub.w	fp, fp, #3
 800b184:	fa5f fb8b 	uxtb.w	fp, fp
 800b188:	eba5 0b0b 	sub.w	fp, r5, fp
 800b18c:	455d      	cmp	r5, fp
 800b18e:	d14b      	bne.n	800b228 <_scanf_float+0x310>
 800b190:	6823      	ldr	r3, [r4, #0]
 800b192:	05da      	lsls	r2, r3, #23
 800b194:	d51f      	bpl.n	800b1d6 <_scanf_float+0x2be>
 800b196:	055b      	lsls	r3, r3, #21
 800b198:	d468      	bmi.n	800b26c <_scanf_float+0x354>
 800b19a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b19e:	6923      	ldr	r3, [r4, #16]
 800b1a0:	2965      	cmp	r1, #101	; 0x65
 800b1a2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b1a6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800b1aa:	6123      	str	r3, [r4, #16]
 800b1ac:	d00d      	beq.n	800b1ca <_scanf_float+0x2b2>
 800b1ae:	2945      	cmp	r1, #69	; 0x45
 800b1b0:	d00b      	beq.n	800b1ca <_scanf_float+0x2b2>
 800b1b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1b6:	4632      	mov	r2, r6
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	4798      	blx	r3
 800b1bc:	6923      	ldr	r3, [r4, #16]
 800b1be:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	f1a5 0b02 	sub.w	fp, r5, #2
 800b1c8:	6123      	str	r3, [r4, #16]
 800b1ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b1ce:	4632      	mov	r2, r6
 800b1d0:	4638      	mov	r0, r7
 800b1d2:	4798      	blx	r3
 800b1d4:	465d      	mov	r5, fp
 800b1d6:	6826      	ldr	r6, [r4, #0]
 800b1d8:	f016 0610 	ands.w	r6, r6, #16
 800b1dc:	d17a      	bne.n	800b2d4 <_scanf_float+0x3bc>
 800b1de:	702e      	strb	r6, [r5, #0]
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b1e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1ea:	d142      	bne.n	800b272 <_scanf_float+0x35a>
 800b1ec:	9b02      	ldr	r3, [sp, #8]
 800b1ee:	eba9 0303 	sub.w	r3, r9, r3
 800b1f2:	425a      	negs	r2, r3
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d149      	bne.n	800b28c <_scanf_float+0x374>
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	4641      	mov	r1, r8
 800b1fc:	4638      	mov	r0, r7
 800b1fe:	f000 fee7 	bl	800bfd0 <_strtod_r>
 800b202:	6825      	ldr	r5, [r4, #0]
 800b204:	f8da 3000 	ldr.w	r3, [sl]
 800b208:	f015 0f02 	tst.w	r5, #2
 800b20c:	f103 0204 	add.w	r2, r3, #4
 800b210:	ec59 8b10 	vmov	r8, r9, d0
 800b214:	f8ca 2000 	str.w	r2, [sl]
 800b218:	d043      	beq.n	800b2a2 <_scanf_float+0x38a>
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	e9c3 8900 	strd	r8, r9, [r3]
 800b220:	68e3      	ldr	r3, [r4, #12]
 800b222:	3301      	adds	r3, #1
 800b224:	60e3      	str	r3, [r4, #12]
 800b226:	e6be      	b.n	800afa6 <_scanf_float+0x8e>
 800b228:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b22c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b230:	4632      	mov	r2, r6
 800b232:	4638      	mov	r0, r7
 800b234:	4798      	blx	r3
 800b236:	6923      	ldr	r3, [r4, #16]
 800b238:	3b01      	subs	r3, #1
 800b23a:	6123      	str	r3, [r4, #16]
 800b23c:	e7a6      	b.n	800b18c <_scanf_float+0x274>
 800b23e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b242:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b246:	4632      	mov	r2, r6
 800b248:	4638      	mov	r0, r7
 800b24a:	4798      	blx	r3
 800b24c:	6923      	ldr	r3, [r4, #16]
 800b24e:	3b01      	subs	r3, #1
 800b250:	6123      	str	r3, [r4, #16]
 800b252:	4545      	cmp	r5, r8
 800b254:	d8f3      	bhi.n	800b23e <_scanf_float+0x326>
 800b256:	e6a5      	b.n	800afa4 <_scanf_float+0x8c>
 800b258:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b25c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800b260:	4632      	mov	r2, r6
 800b262:	4638      	mov	r0, r7
 800b264:	4798      	blx	r3
 800b266:	6923      	ldr	r3, [r4, #16]
 800b268:	3b01      	subs	r3, #1
 800b26a:	6123      	str	r3, [r4, #16]
 800b26c:	4545      	cmp	r5, r8
 800b26e:	d8f3      	bhi.n	800b258 <_scanf_float+0x340>
 800b270:	e698      	b.n	800afa4 <_scanf_float+0x8c>
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0bf      	beq.n	800b1f8 <_scanf_float+0x2e0>
 800b278:	9904      	ldr	r1, [sp, #16]
 800b27a:	230a      	movs	r3, #10
 800b27c:	4632      	mov	r2, r6
 800b27e:	3101      	adds	r1, #1
 800b280:	4638      	mov	r0, r7
 800b282:	f000 ff31 	bl	800c0e8 <_strtol_r>
 800b286:	9b03      	ldr	r3, [sp, #12]
 800b288:	9d04      	ldr	r5, [sp, #16]
 800b28a:	1ac2      	subs	r2, r0, r3
 800b28c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b290:	429d      	cmp	r5, r3
 800b292:	bf28      	it	cs
 800b294:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800b298:	490f      	ldr	r1, [pc, #60]	; (800b2d8 <_scanf_float+0x3c0>)
 800b29a:	4628      	mov	r0, r5
 800b29c:	f000 f834 	bl	800b308 <siprintf>
 800b2a0:	e7aa      	b.n	800b1f8 <_scanf_float+0x2e0>
 800b2a2:	f015 0504 	ands.w	r5, r5, #4
 800b2a6:	d1b8      	bne.n	800b21a <_scanf_float+0x302>
 800b2a8:	681f      	ldr	r7, [r3, #0]
 800b2aa:	ee10 2a10 	vmov	r2, s0
 800b2ae:	464b      	mov	r3, r9
 800b2b0:	ee10 0a10 	vmov	r0, s0
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	f7f5 fc49 	bl	8000b4c <__aeabi_dcmpun>
 800b2ba:	b128      	cbz	r0, 800b2c8 <_scanf_float+0x3b0>
 800b2bc:	4628      	mov	r0, r5
 800b2be:	f000 f81d 	bl	800b2fc <nanf>
 800b2c2:	ed87 0a00 	vstr	s0, [r7]
 800b2c6:	e7ab      	b.n	800b220 <_scanf_float+0x308>
 800b2c8:	4640      	mov	r0, r8
 800b2ca:	4649      	mov	r1, r9
 800b2cc:	f7f5 fc9c 	bl	8000c08 <__aeabi_d2f>
 800b2d0:	6038      	str	r0, [r7, #0]
 800b2d2:	e7a5      	b.n	800b220 <_scanf_float+0x308>
 800b2d4:	2600      	movs	r6, #0
 800b2d6:	e666      	b.n	800afa6 <_scanf_float+0x8e>
 800b2d8:	08010624 	.word	0x08010624

0800b2dc <_sbrk_r>:
 800b2dc:	b538      	push	{r3, r4, r5, lr}
 800b2de:	4c06      	ldr	r4, [pc, #24]	; (800b2f8 <_sbrk_r+0x1c>)
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	4605      	mov	r5, r0
 800b2e4:	4608      	mov	r0, r1
 800b2e6:	6023      	str	r3, [r4, #0]
 800b2e8:	f7f8 f9b2 	bl	8003650 <_sbrk>
 800b2ec:	1c43      	adds	r3, r0, #1
 800b2ee:	d102      	bne.n	800b2f6 <_sbrk_r+0x1a>
 800b2f0:	6823      	ldr	r3, [r4, #0]
 800b2f2:	b103      	cbz	r3, 800b2f6 <_sbrk_r+0x1a>
 800b2f4:	602b      	str	r3, [r5, #0]
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
 800b2f8:	20002044 	.word	0x20002044

0800b2fc <nanf>:
 800b2fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b304 <nanf+0x8>
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop
 800b304:	7fc00000 	.word	0x7fc00000

0800b308 <siprintf>:
 800b308:	b40e      	push	{r1, r2, r3}
 800b30a:	b500      	push	{lr}
 800b30c:	b09c      	sub	sp, #112	; 0x70
 800b30e:	ab1d      	add	r3, sp, #116	; 0x74
 800b310:	9002      	str	r0, [sp, #8]
 800b312:	9006      	str	r0, [sp, #24]
 800b314:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b318:	4809      	ldr	r0, [pc, #36]	; (800b340 <siprintf+0x38>)
 800b31a:	9107      	str	r1, [sp, #28]
 800b31c:	9104      	str	r1, [sp, #16]
 800b31e:	4909      	ldr	r1, [pc, #36]	; (800b344 <siprintf+0x3c>)
 800b320:	f853 2b04 	ldr.w	r2, [r3], #4
 800b324:	9105      	str	r1, [sp, #20]
 800b326:	6800      	ldr	r0, [r0, #0]
 800b328:	9301      	str	r3, [sp, #4]
 800b32a:	a902      	add	r1, sp, #8
 800b32c:	f002 fcfe 	bl	800dd2c <_svfiprintf_r>
 800b330:	9b02      	ldr	r3, [sp, #8]
 800b332:	2200      	movs	r2, #0
 800b334:	701a      	strb	r2, [r3, #0]
 800b336:	b01c      	add	sp, #112	; 0x70
 800b338:	f85d eb04 	ldr.w	lr, [sp], #4
 800b33c:	b003      	add	sp, #12
 800b33e:	4770      	bx	lr
 800b340:	20001260 	.word	0x20001260
 800b344:	ffff0208 	.word	0xffff0208

0800b348 <strchr>:
 800b348:	b2c9      	uxtb	r1, r1
 800b34a:	4603      	mov	r3, r0
 800b34c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b350:	b11a      	cbz	r2, 800b35a <strchr+0x12>
 800b352:	428a      	cmp	r2, r1
 800b354:	d1f9      	bne.n	800b34a <strchr+0x2>
 800b356:	4618      	mov	r0, r3
 800b358:	4770      	bx	lr
 800b35a:	2900      	cmp	r1, #0
 800b35c:	bf18      	it	ne
 800b35e:	2300      	movne	r3, #0
 800b360:	e7f9      	b.n	800b356 <strchr+0xe>

0800b362 <strncat>:
 800b362:	b530      	push	{r4, r5, lr}
 800b364:	4603      	mov	r3, r0
 800b366:	781c      	ldrb	r4, [r3, #0]
 800b368:	1c5d      	adds	r5, r3, #1
 800b36a:	b944      	cbnz	r4, 800b37e <strncat+0x1c>
 800b36c:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800b370:	d304      	bcc.n	800b37c <strncat+0x1a>
 800b372:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b376:	f803 4b01 	strb.w	r4, [r3], #1
 800b37a:	b914      	cbnz	r4, 800b382 <strncat+0x20>
 800b37c:	bd30      	pop	{r4, r5, pc}
 800b37e:	462b      	mov	r3, r5
 800b380:	e7f1      	b.n	800b366 <strncat+0x4>
 800b382:	2a00      	cmp	r2, #0
 800b384:	d1f2      	bne.n	800b36c <strncat+0xa>
 800b386:	701a      	strb	r2, [r3, #0]
 800b388:	e7f0      	b.n	800b36c <strncat+0xa>

0800b38a <strncmp>:
 800b38a:	b510      	push	{r4, lr}
 800b38c:	b16a      	cbz	r2, 800b3aa <strncmp+0x20>
 800b38e:	3901      	subs	r1, #1
 800b390:	1884      	adds	r4, r0, r2
 800b392:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b396:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d103      	bne.n	800b3a6 <strncmp+0x1c>
 800b39e:	42a0      	cmp	r0, r4
 800b3a0:	d001      	beq.n	800b3a6 <strncmp+0x1c>
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d1f5      	bne.n	800b392 <strncmp+0x8>
 800b3a6:	1a98      	subs	r0, r3, r2
 800b3a8:	bd10      	pop	{r4, pc}
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	e7fc      	b.n	800b3a8 <strncmp+0x1e>

0800b3ae <sulp>:
 800b3ae:	b570      	push	{r4, r5, r6, lr}
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	ec45 4b10 	vmov	d0, r4, r5
 800b3b8:	4616      	mov	r6, r2
 800b3ba:	f002 fb1b 	bl	800d9f4 <__ulp>
 800b3be:	ec51 0b10 	vmov	r0, r1, d0
 800b3c2:	b17e      	cbz	r6, 800b3e4 <sulp+0x36>
 800b3c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b3c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	dd09      	ble.n	800b3e4 <sulp+0x36>
 800b3d0:	051b      	lsls	r3, r3, #20
 800b3d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b3d6:	2400      	movs	r4, #0
 800b3d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b3dc:	4622      	mov	r2, r4
 800b3de:	462b      	mov	r3, r5
 800b3e0:	f7f5 f91a 	bl	8000618 <__aeabi_dmul>
 800b3e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3e8 <_strtod_l>:
 800b3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ec:	461f      	mov	r7, r3
 800b3ee:	b0a1      	sub	sp, #132	; 0x84
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	4681      	mov	r9, r0
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	460e      	mov	r6, r1
 800b3f8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b3fa:	931c      	str	r3, [sp, #112]	; 0x70
 800b3fc:	f002 f809 	bl	800d412 <__localeconv_l>
 800b400:	4680      	mov	r8, r0
 800b402:	6800      	ldr	r0, [r0, #0]
 800b404:	f7f4 fef4 	bl	80001f0 <strlen>
 800b408:	f04f 0a00 	mov.w	sl, #0
 800b40c:	4604      	mov	r4, r0
 800b40e:	f04f 0b00 	mov.w	fp, #0
 800b412:	961b      	str	r6, [sp, #108]	; 0x6c
 800b414:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b416:	781a      	ldrb	r2, [r3, #0]
 800b418:	2a0d      	cmp	r2, #13
 800b41a:	d832      	bhi.n	800b482 <_strtod_l+0x9a>
 800b41c:	2a09      	cmp	r2, #9
 800b41e:	d236      	bcs.n	800b48e <_strtod_l+0xa6>
 800b420:	2a00      	cmp	r2, #0
 800b422:	d03e      	beq.n	800b4a2 <_strtod_l+0xba>
 800b424:	2300      	movs	r3, #0
 800b426:	930d      	str	r3, [sp, #52]	; 0x34
 800b428:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b42a:	782b      	ldrb	r3, [r5, #0]
 800b42c:	2b30      	cmp	r3, #48	; 0x30
 800b42e:	f040 80ac 	bne.w	800b58a <_strtod_l+0x1a2>
 800b432:	786b      	ldrb	r3, [r5, #1]
 800b434:	2b58      	cmp	r3, #88	; 0x58
 800b436:	d001      	beq.n	800b43c <_strtod_l+0x54>
 800b438:	2b78      	cmp	r3, #120	; 0x78
 800b43a:	d167      	bne.n	800b50c <_strtod_l+0x124>
 800b43c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b43e:	9301      	str	r3, [sp, #4]
 800b440:	ab1c      	add	r3, sp, #112	; 0x70
 800b442:	9300      	str	r3, [sp, #0]
 800b444:	9702      	str	r7, [sp, #8]
 800b446:	ab1d      	add	r3, sp, #116	; 0x74
 800b448:	4a88      	ldr	r2, [pc, #544]	; (800b66c <_strtod_l+0x284>)
 800b44a:	a91b      	add	r1, sp, #108	; 0x6c
 800b44c:	4648      	mov	r0, r9
 800b44e:	f001 fd06 	bl	800ce5e <__gethex>
 800b452:	f010 0407 	ands.w	r4, r0, #7
 800b456:	4606      	mov	r6, r0
 800b458:	d005      	beq.n	800b466 <_strtod_l+0x7e>
 800b45a:	2c06      	cmp	r4, #6
 800b45c:	d12b      	bne.n	800b4b6 <_strtod_l+0xce>
 800b45e:	3501      	adds	r5, #1
 800b460:	2300      	movs	r3, #0
 800b462:	951b      	str	r5, [sp, #108]	; 0x6c
 800b464:	930d      	str	r3, [sp, #52]	; 0x34
 800b466:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b468:	2b00      	cmp	r3, #0
 800b46a:	f040 859a 	bne.w	800bfa2 <_strtod_l+0xbba>
 800b46e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b470:	b1e3      	cbz	r3, 800b4ac <_strtod_l+0xc4>
 800b472:	4652      	mov	r2, sl
 800b474:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b478:	ec43 2b10 	vmov	d0, r2, r3
 800b47c:	b021      	add	sp, #132	; 0x84
 800b47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b482:	2a2b      	cmp	r2, #43	; 0x2b
 800b484:	d015      	beq.n	800b4b2 <_strtod_l+0xca>
 800b486:	2a2d      	cmp	r2, #45	; 0x2d
 800b488:	d004      	beq.n	800b494 <_strtod_l+0xac>
 800b48a:	2a20      	cmp	r2, #32
 800b48c:	d1ca      	bne.n	800b424 <_strtod_l+0x3c>
 800b48e:	3301      	adds	r3, #1
 800b490:	931b      	str	r3, [sp, #108]	; 0x6c
 800b492:	e7bf      	b.n	800b414 <_strtod_l+0x2c>
 800b494:	2201      	movs	r2, #1
 800b496:	920d      	str	r2, [sp, #52]	; 0x34
 800b498:	1c5a      	adds	r2, r3, #1
 800b49a:	921b      	str	r2, [sp, #108]	; 0x6c
 800b49c:	785b      	ldrb	r3, [r3, #1]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1c2      	bne.n	800b428 <_strtod_l+0x40>
 800b4a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b4a4:	961b      	str	r6, [sp, #108]	; 0x6c
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f040 8579 	bne.w	800bf9e <_strtod_l+0xbb6>
 800b4ac:	4652      	mov	r2, sl
 800b4ae:	465b      	mov	r3, fp
 800b4b0:	e7e2      	b.n	800b478 <_strtod_l+0x90>
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	e7ef      	b.n	800b496 <_strtod_l+0xae>
 800b4b6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b4b8:	b13a      	cbz	r2, 800b4ca <_strtod_l+0xe2>
 800b4ba:	2135      	movs	r1, #53	; 0x35
 800b4bc:	a81e      	add	r0, sp, #120	; 0x78
 800b4be:	f002 fb91 	bl	800dbe4 <__copybits>
 800b4c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b4c4:	4648      	mov	r0, r9
 800b4c6:	f001 fffd 	bl	800d4c4 <_Bfree>
 800b4ca:	3c01      	subs	r4, #1
 800b4cc:	2c04      	cmp	r4, #4
 800b4ce:	d806      	bhi.n	800b4de <_strtod_l+0xf6>
 800b4d0:	e8df f004 	tbb	[pc, r4]
 800b4d4:	1714030a 	.word	0x1714030a
 800b4d8:	0a          	.byte	0x0a
 800b4d9:	00          	.byte	0x00
 800b4da:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800b4de:	0730      	lsls	r0, r6, #28
 800b4e0:	d5c1      	bpl.n	800b466 <_strtod_l+0x7e>
 800b4e2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b4e6:	e7be      	b.n	800b466 <_strtod_l+0x7e>
 800b4e8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800b4ec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b4ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b4f2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b4f6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b4fa:	e7f0      	b.n	800b4de <_strtod_l+0xf6>
 800b4fc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b670 <_strtod_l+0x288>
 800b500:	e7ed      	b.n	800b4de <_strtod_l+0xf6>
 800b502:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b506:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b50a:	e7e8      	b.n	800b4de <_strtod_l+0xf6>
 800b50c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b50e:	1c5a      	adds	r2, r3, #1
 800b510:	921b      	str	r2, [sp, #108]	; 0x6c
 800b512:	785b      	ldrb	r3, [r3, #1]
 800b514:	2b30      	cmp	r3, #48	; 0x30
 800b516:	d0f9      	beq.n	800b50c <_strtod_l+0x124>
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d0a4      	beq.n	800b466 <_strtod_l+0x7e>
 800b51c:	2301      	movs	r3, #1
 800b51e:	2500      	movs	r5, #0
 800b520:	9306      	str	r3, [sp, #24]
 800b522:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b524:	9308      	str	r3, [sp, #32]
 800b526:	9507      	str	r5, [sp, #28]
 800b528:	9505      	str	r5, [sp, #20]
 800b52a:	220a      	movs	r2, #10
 800b52c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b52e:	7807      	ldrb	r7, [r0, #0]
 800b530:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b534:	b2d9      	uxtb	r1, r3
 800b536:	2909      	cmp	r1, #9
 800b538:	d929      	bls.n	800b58e <_strtod_l+0x1a6>
 800b53a:	4622      	mov	r2, r4
 800b53c:	f8d8 1000 	ldr.w	r1, [r8]
 800b540:	f7ff ff23 	bl	800b38a <strncmp>
 800b544:	2800      	cmp	r0, #0
 800b546:	d031      	beq.n	800b5ac <_strtod_l+0x1c4>
 800b548:	2000      	movs	r0, #0
 800b54a:	9c05      	ldr	r4, [sp, #20]
 800b54c:	9004      	str	r0, [sp, #16]
 800b54e:	463b      	mov	r3, r7
 800b550:	4602      	mov	r2, r0
 800b552:	2b65      	cmp	r3, #101	; 0x65
 800b554:	d001      	beq.n	800b55a <_strtod_l+0x172>
 800b556:	2b45      	cmp	r3, #69	; 0x45
 800b558:	d114      	bne.n	800b584 <_strtod_l+0x19c>
 800b55a:	b924      	cbnz	r4, 800b566 <_strtod_l+0x17e>
 800b55c:	b910      	cbnz	r0, 800b564 <_strtod_l+0x17c>
 800b55e:	9b06      	ldr	r3, [sp, #24]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d09e      	beq.n	800b4a2 <_strtod_l+0xba>
 800b564:	2400      	movs	r4, #0
 800b566:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b568:	1c73      	adds	r3, r6, #1
 800b56a:	931b      	str	r3, [sp, #108]	; 0x6c
 800b56c:	7873      	ldrb	r3, [r6, #1]
 800b56e:	2b2b      	cmp	r3, #43	; 0x2b
 800b570:	d078      	beq.n	800b664 <_strtod_l+0x27c>
 800b572:	2b2d      	cmp	r3, #45	; 0x2d
 800b574:	d070      	beq.n	800b658 <_strtod_l+0x270>
 800b576:	f04f 0c00 	mov.w	ip, #0
 800b57a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b57e:	2f09      	cmp	r7, #9
 800b580:	d97c      	bls.n	800b67c <_strtod_l+0x294>
 800b582:	961b      	str	r6, [sp, #108]	; 0x6c
 800b584:	f04f 0e00 	mov.w	lr, #0
 800b588:	e09a      	b.n	800b6c0 <_strtod_l+0x2d8>
 800b58a:	2300      	movs	r3, #0
 800b58c:	e7c7      	b.n	800b51e <_strtod_l+0x136>
 800b58e:	9905      	ldr	r1, [sp, #20]
 800b590:	2908      	cmp	r1, #8
 800b592:	bfdd      	ittte	le
 800b594:	9907      	ldrle	r1, [sp, #28]
 800b596:	fb02 3301 	mlale	r3, r2, r1, r3
 800b59a:	9307      	strle	r3, [sp, #28]
 800b59c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b5a0:	9b05      	ldr	r3, [sp, #20]
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	9305      	str	r3, [sp, #20]
 800b5a8:	901b      	str	r0, [sp, #108]	; 0x6c
 800b5aa:	e7bf      	b.n	800b52c <_strtod_l+0x144>
 800b5ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5ae:	191a      	adds	r2, r3, r4
 800b5b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b5b2:	9a05      	ldr	r2, [sp, #20]
 800b5b4:	5d1b      	ldrb	r3, [r3, r4]
 800b5b6:	2a00      	cmp	r2, #0
 800b5b8:	d037      	beq.n	800b62a <_strtod_l+0x242>
 800b5ba:	9c05      	ldr	r4, [sp, #20]
 800b5bc:	4602      	mov	r2, r0
 800b5be:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b5c2:	2909      	cmp	r1, #9
 800b5c4:	d913      	bls.n	800b5ee <_strtod_l+0x206>
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	9104      	str	r1, [sp, #16]
 800b5ca:	e7c2      	b.n	800b552 <_strtod_l+0x16a>
 800b5cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5ce:	1c5a      	adds	r2, r3, #1
 800b5d0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b5d2:	785b      	ldrb	r3, [r3, #1]
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	2b30      	cmp	r3, #48	; 0x30
 800b5d8:	d0f8      	beq.n	800b5cc <_strtod_l+0x1e4>
 800b5da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b5de:	2a08      	cmp	r2, #8
 800b5e0:	f200 84e4 	bhi.w	800bfac <_strtod_l+0xbc4>
 800b5e4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b5e6:	9208      	str	r2, [sp, #32]
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	2000      	movs	r0, #0
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b5f2:	f100 0101 	add.w	r1, r0, #1
 800b5f6:	d012      	beq.n	800b61e <_strtod_l+0x236>
 800b5f8:	440a      	add	r2, r1
 800b5fa:	eb00 0c04 	add.w	ip, r0, r4
 800b5fe:	4621      	mov	r1, r4
 800b600:	270a      	movs	r7, #10
 800b602:	458c      	cmp	ip, r1
 800b604:	d113      	bne.n	800b62e <_strtod_l+0x246>
 800b606:	1821      	adds	r1, r4, r0
 800b608:	2908      	cmp	r1, #8
 800b60a:	f104 0401 	add.w	r4, r4, #1
 800b60e:	4404      	add	r4, r0
 800b610:	dc19      	bgt.n	800b646 <_strtod_l+0x25e>
 800b612:	9b07      	ldr	r3, [sp, #28]
 800b614:	210a      	movs	r1, #10
 800b616:	fb01 e303 	mla	r3, r1, r3, lr
 800b61a:	9307      	str	r3, [sp, #28]
 800b61c:	2100      	movs	r1, #0
 800b61e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b620:	1c58      	adds	r0, r3, #1
 800b622:	901b      	str	r0, [sp, #108]	; 0x6c
 800b624:	785b      	ldrb	r3, [r3, #1]
 800b626:	4608      	mov	r0, r1
 800b628:	e7c9      	b.n	800b5be <_strtod_l+0x1d6>
 800b62a:	9805      	ldr	r0, [sp, #20]
 800b62c:	e7d3      	b.n	800b5d6 <_strtod_l+0x1ee>
 800b62e:	2908      	cmp	r1, #8
 800b630:	f101 0101 	add.w	r1, r1, #1
 800b634:	dc03      	bgt.n	800b63e <_strtod_l+0x256>
 800b636:	9b07      	ldr	r3, [sp, #28]
 800b638:	437b      	muls	r3, r7
 800b63a:	9307      	str	r3, [sp, #28]
 800b63c:	e7e1      	b.n	800b602 <_strtod_l+0x21a>
 800b63e:	2910      	cmp	r1, #16
 800b640:	bfd8      	it	le
 800b642:	437d      	mulle	r5, r7
 800b644:	e7dd      	b.n	800b602 <_strtod_l+0x21a>
 800b646:	2c10      	cmp	r4, #16
 800b648:	bfdc      	itt	le
 800b64a:	210a      	movle	r1, #10
 800b64c:	fb01 e505 	mlale	r5, r1, r5, lr
 800b650:	e7e4      	b.n	800b61c <_strtod_l+0x234>
 800b652:	2301      	movs	r3, #1
 800b654:	9304      	str	r3, [sp, #16]
 800b656:	e781      	b.n	800b55c <_strtod_l+0x174>
 800b658:	f04f 0c01 	mov.w	ip, #1
 800b65c:	1cb3      	adds	r3, r6, #2
 800b65e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b660:	78b3      	ldrb	r3, [r6, #2]
 800b662:	e78a      	b.n	800b57a <_strtod_l+0x192>
 800b664:	f04f 0c00 	mov.w	ip, #0
 800b668:	e7f8      	b.n	800b65c <_strtod_l+0x274>
 800b66a:	bf00      	nop
 800b66c:	0801062c 	.word	0x0801062c
 800b670:	7ff00000 	.word	0x7ff00000
 800b674:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b676:	1c5f      	adds	r7, r3, #1
 800b678:	971b      	str	r7, [sp, #108]	; 0x6c
 800b67a:	785b      	ldrb	r3, [r3, #1]
 800b67c:	2b30      	cmp	r3, #48	; 0x30
 800b67e:	d0f9      	beq.n	800b674 <_strtod_l+0x28c>
 800b680:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b684:	2f08      	cmp	r7, #8
 800b686:	f63f af7d 	bhi.w	800b584 <_strtod_l+0x19c>
 800b68a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b68e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b690:	930a      	str	r3, [sp, #40]	; 0x28
 800b692:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b694:	1c5f      	adds	r7, r3, #1
 800b696:	971b      	str	r7, [sp, #108]	; 0x6c
 800b698:	785b      	ldrb	r3, [r3, #1]
 800b69a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b69e:	f1b8 0f09 	cmp.w	r8, #9
 800b6a2:	d937      	bls.n	800b714 <_strtod_l+0x32c>
 800b6a4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b6a6:	1a7f      	subs	r7, r7, r1
 800b6a8:	2f08      	cmp	r7, #8
 800b6aa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b6ae:	dc37      	bgt.n	800b720 <_strtod_l+0x338>
 800b6b0:	45be      	cmp	lr, r7
 800b6b2:	bfa8      	it	ge
 800b6b4:	46be      	movge	lr, r7
 800b6b6:	f1bc 0f00 	cmp.w	ip, #0
 800b6ba:	d001      	beq.n	800b6c0 <_strtod_l+0x2d8>
 800b6bc:	f1ce 0e00 	rsb	lr, lr, #0
 800b6c0:	2c00      	cmp	r4, #0
 800b6c2:	d151      	bne.n	800b768 <_strtod_l+0x380>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	f47f aece 	bne.w	800b466 <_strtod_l+0x7e>
 800b6ca:	9a06      	ldr	r2, [sp, #24]
 800b6cc:	2a00      	cmp	r2, #0
 800b6ce:	f47f aeca 	bne.w	800b466 <_strtod_l+0x7e>
 800b6d2:	9a04      	ldr	r2, [sp, #16]
 800b6d4:	2a00      	cmp	r2, #0
 800b6d6:	f47f aee4 	bne.w	800b4a2 <_strtod_l+0xba>
 800b6da:	2b4e      	cmp	r3, #78	; 0x4e
 800b6dc:	d027      	beq.n	800b72e <_strtod_l+0x346>
 800b6de:	dc21      	bgt.n	800b724 <_strtod_l+0x33c>
 800b6e0:	2b49      	cmp	r3, #73	; 0x49
 800b6e2:	f47f aede 	bne.w	800b4a2 <_strtod_l+0xba>
 800b6e6:	49a0      	ldr	r1, [pc, #640]	; (800b968 <_strtod_l+0x580>)
 800b6e8:	a81b      	add	r0, sp, #108	; 0x6c
 800b6ea:	f001 fdeb 	bl	800d2c4 <__match>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	f43f aed7 	beq.w	800b4a2 <_strtod_l+0xba>
 800b6f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b6f6:	499d      	ldr	r1, [pc, #628]	; (800b96c <_strtod_l+0x584>)
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	a81b      	add	r0, sp, #108	; 0x6c
 800b6fc:	931b      	str	r3, [sp, #108]	; 0x6c
 800b6fe:	f001 fde1 	bl	800d2c4 <__match>
 800b702:	b910      	cbnz	r0, 800b70a <_strtod_l+0x322>
 800b704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b706:	3301      	adds	r3, #1
 800b708:	931b      	str	r3, [sp, #108]	; 0x6c
 800b70a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b980 <_strtod_l+0x598>
 800b70e:	f04f 0a00 	mov.w	sl, #0
 800b712:	e6a8      	b.n	800b466 <_strtod_l+0x7e>
 800b714:	210a      	movs	r1, #10
 800b716:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b71a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b71e:	e7b8      	b.n	800b692 <_strtod_l+0x2aa>
 800b720:	46be      	mov	lr, r7
 800b722:	e7c8      	b.n	800b6b6 <_strtod_l+0x2ce>
 800b724:	2b69      	cmp	r3, #105	; 0x69
 800b726:	d0de      	beq.n	800b6e6 <_strtod_l+0x2fe>
 800b728:	2b6e      	cmp	r3, #110	; 0x6e
 800b72a:	f47f aeba 	bne.w	800b4a2 <_strtod_l+0xba>
 800b72e:	4990      	ldr	r1, [pc, #576]	; (800b970 <_strtod_l+0x588>)
 800b730:	a81b      	add	r0, sp, #108	; 0x6c
 800b732:	f001 fdc7 	bl	800d2c4 <__match>
 800b736:	2800      	cmp	r0, #0
 800b738:	f43f aeb3 	beq.w	800b4a2 <_strtod_l+0xba>
 800b73c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b28      	cmp	r3, #40	; 0x28
 800b742:	d10e      	bne.n	800b762 <_strtod_l+0x37a>
 800b744:	aa1e      	add	r2, sp, #120	; 0x78
 800b746:	498b      	ldr	r1, [pc, #556]	; (800b974 <_strtod_l+0x58c>)
 800b748:	a81b      	add	r0, sp, #108	; 0x6c
 800b74a:	f001 fdcf 	bl	800d2ec <__hexnan>
 800b74e:	2805      	cmp	r0, #5
 800b750:	d107      	bne.n	800b762 <_strtod_l+0x37a>
 800b752:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b754:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b758:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b75c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b760:	e681      	b.n	800b466 <_strtod_l+0x7e>
 800b762:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b988 <_strtod_l+0x5a0>
 800b766:	e7d2      	b.n	800b70e <_strtod_l+0x326>
 800b768:	ebae 0302 	sub.w	r3, lr, r2
 800b76c:	9306      	str	r3, [sp, #24]
 800b76e:	9b05      	ldr	r3, [sp, #20]
 800b770:	9807      	ldr	r0, [sp, #28]
 800b772:	2b00      	cmp	r3, #0
 800b774:	bf08      	it	eq
 800b776:	4623      	moveq	r3, r4
 800b778:	2c10      	cmp	r4, #16
 800b77a:	9305      	str	r3, [sp, #20]
 800b77c:	46a0      	mov	r8, r4
 800b77e:	bfa8      	it	ge
 800b780:	f04f 0810 	movge.w	r8, #16
 800b784:	f7f4 fece 	bl	8000524 <__aeabi_ui2d>
 800b788:	2c09      	cmp	r4, #9
 800b78a:	4682      	mov	sl, r0
 800b78c:	468b      	mov	fp, r1
 800b78e:	dc13      	bgt.n	800b7b8 <_strtod_l+0x3d0>
 800b790:	9b06      	ldr	r3, [sp, #24]
 800b792:	2b00      	cmp	r3, #0
 800b794:	f43f ae67 	beq.w	800b466 <_strtod_l+0x7e>
 800b798:	9b06      	ldr	r3, [sp, #24]
 800b79a:	dd7a      	ble.n	800b892 <_strtod_l+0x4aa>
 800b79c:	2b16      	cmp	r3, #22
 800b79e:	dc61      	bgt.n	800b864 <_strtod_l+0x47c>
 800b7a0:	4a75      	ldr	r2, [pc, #468]	; (800b978 <_strtod_l+0x590>)
 800b7a2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b7a6:	e9de 0100 	ldrd	r0, r1, [lr]
 800b7aa:	4652      	mov	r2, sl
 800b7ac:	465b      	mov	r3, fp
 800b7ae:	f7f4 ff33 	bl	8000618 <__aeabi_dmul>
 800b7b2:	4682      	mov	sl, r0
 800b7b4:	468b      	mov	fp, r1
 800b7b6:	e656      	b.n	800b466 <_strtod_l+0x7e>
 800b7b8:	4b6f      	ldr	r3, [pc, #444]	; (800b978 <_strtod_l+0x590>)
 800b7ba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b7be:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b7c2:	f7f4 ff29 	bl	8000618 <__aeabi_dmul>
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	4628      	mov	r0, r5
 800b7ca:	460f      	mov	r7, r1
 800b7cc:	f7f4 feaa 	bl	8000524 <__aeabi_ui2d>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	4630      	mov	r0, r6
 800b7d6:	4639      	mov	r1, r7
 800b7d8:	f7f4 fd68 	bl	80002ac <__adddf3>
 800b7dc:	2c0f      	cmp	r4, #15
 800b7de:	4682      	mov	sl, r0
 800b7e0:	468b      	mov	fp, r1
 800b7e2:	ddd5      	ble.n	800b790 <_strtod_l+0x3a8>
 800b7e4:	9b06      	ldr	r3, [sp, #24]
 800b7e6:	eba4 0808 	sub.w	r8, r4, r8
 800b7ea:	4498      	add	r8, r3
 800b7ec:	f1b8 0f00 	cmp.w	r8, #0
 800b7f0:	f340 8096 	ble.w	800b920 <_strtod_l+0x538>
 800b7f4:	f018 030f 	ands.w	r3, r8, #15
 800b7f8:	d00a      	beq.n	800b810 <_strtod_l+0x428>
 800b7fa:	495f      	ldr	r1, [pc, #380]	; (800b978 <_strtod_l+0x590>)
 800b7fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b800:	4652      	mov	r2, sl
 800b802:	465b      	mov	r3, fp
 800b804:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b808:	f7f4 ff06 	bl	8000618 <__aeabi_dmul>
 800b80c:	4682      	mov	sl, r0
 800b80e:	468b      	mov	fp, r1
 800b810:	f038 080f 	bics.w	r8, r8, #15
 800b814:	d073      	beq.n	800b8fe <_strtod_l+0x516>
 800b816:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b81a:	dd47      	ble.n	800b8ac <_strtod_l+0x4c4>
 800b81c:	2400      	movs	r4, #0
 800b81e:	46a0      	mov	r8, r4
 800b820:	9407      	str	r4, [sp, #28]
 800b822:	9405      	str	r4, [sp, #20]
 800b824:	2322      	movs	r3, #34	; 0x22
 800b826:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b980 <_strtod_l+0x598>
 800b82a:	f8c9 3000 	str.w	r3, [r9]
 800b82e:	f04f 0a00 	mov.w	sl, #0
 800b832:	9b07      	ldr	r3, [sp, #28]
 800b834:	2b00      	cmp	r3, #0
 800b836:	f43f ae16 	beq.w	800b466 <_strtod_l+0x7e>
 800b83a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b83c:	4648      	mov	r0, r9
 800b83e:	f001 fe41 	bl	800d4c4 <_Bfree>
 800b842:	9905      	ldr	r1, [sp, #20]
 800b844:	4648      	mov	r0, r9
 800b846:	f001 fe3d 	bl	800d4c4 <_Bfree>
 800b84a:	4641      	mov	r1, r8
 800b84c:	4648      	mov	r0, r9
 800b84e:	f001 fe39 	bl	800d4c4 <_Bfree>
 800b852:	9907      	ldr	r1, [sp, #28]
 800b854:	4648      	mov	r0, r9
 800b856:	f001 fe35 	bl	800d4c4 <_Bfree>
 800b85a:	4621      	mov	r1, r4
 800b85c:	4648      	mov	r0, r9
 800b85e:	f001 fe31 	bl	800d4c4 <_Bfree>
 800b862:	e600      	b.n	800b466 <_strtod_l+0x7e>
 800b864:	9a06      	ldr	r2, [sp, #24]
 800b866:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b86a:	4293      	cmp	r3, r2
 800b86c:	dbba      	blt.n	800b7e4 <_strtod_l+0x3fc>
 800b86e:	4d42      	ldr	r5, [pc, #264]	; (800b978 <_strtod_l+0x590>)
 800b870:	f1c4 040f 	rsb	r4, r4, #15
 800b874:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b878:	4652      	mov	r2, sl
 800b87a:	465b      	mov	r3, fp
 800b87c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b880:	f7f4 feca 	bl	8000618 <__aeabi_dmul>
 800b884:	9b06      	ldr	r3, [sp, #24]
 800b886:	1b1c      	subs	r4, r3, r4
 800b888:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b88c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b890:	e78d      	b.n	800b7ae <_strtod_l+0x3c6>
 800b892:	f113 0f16 	cmn.w	r3, #22
 800b896:	dba5      	blt.n	800b7e4 <_strtod_l+0x3fc>
 800b898:	4a37      	ldr	r2, [pc, #220]	; (800b978 <_strtod_l+0x590>)
 800b89a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b89e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b8a2:	4650      	mov	r0, sl
 800b8a4:	4659      	mov	r1, fp
 800b8a6:	f7f4 ffe1 	bl	800086c <__aeabi_ddiv>
 800b8aa:	e782      	b.n	800b7b2 <_strtod_l+0x3ca>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4e33      	ldr	r6, [pc, #204]	; (800b97c <_strtod_l+0x594>)
 800b8b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b8b4:	4650      	mov	r0, sl
 800b8b6:	4659      	mov	r1, fp
 800b8b8:	461d      	mov	r5, r3
 800b8ba:	f1b8 0f01 	cmp.w	r8, #1
 800b8be:	dc21      	bgt.n	800b904 <_strtod_l+0x51c>
 800b8c0:	b10b      	cbz	r3, 800b8c6 <_strtod_l+0x4de>
 800b8c2:	4682      	mov	sl, r0
 800b8c4:	468b      	mov	fp, r1
 800b8c6:	4b2d      	ldr	r3, [pc, #180]	; (800b97c <_strtod_l+0x594>)
 800b8c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b8cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b8d0:	4652      	mov	r2, sl
 800b8d2:	465b      	mov	r3, fp
 800b8d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b8d8:	f7f4 fe9e 	bl	8000618 <__aeabi_dmul>
 800b8dc:	4b28      	ldr	r3, [pc, #160]	; (800b980 <_strtod_l+0x598>)
 800b8de:	460a      	mov	r2, r1
 800b8e0:	400b      	ands	r3, r1
 800b8e2:	4928      	ldr	r1, [pc, #160]	; (800b984 <_strtod_l+0x59c>)
 800b8e4:	428b      	cmp	r3, r1
 800b8e6:	4682      	mov	sl, r0
 800b8e8:	d898      	bhi.n	800b81c <_strtod_l+0x434>
 800b8ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b8ee:	428b      	cmp	r3, r1
 800b8f0:	bf86      	itte	hi
 800b8f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b98c <_strtod_l+0x5a4>
 800b8f6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b8fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b8fe:	2300      	movs	r3, #0
 800b900:	9304      	str	r3, [sp, #16]
 800b902:	e077      	b.n	800b9f4 <_strtod_l+0x60c>
 800b904:	f018 0f01 	tst.w	r8, #1
 800b908:	d006      	beq.n	800b918 <_strtod_l+0x530>
 800b90a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b912:	f7f4 fe81 	bl	8000618 <__aeabi_dmul>
 800b916:	2301      	movs	r3, #1
 800b918:	3501      	adds	r5, #1
 800b91a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b91e:	e7cc      	b.n	800b8ba <_strtod_l+0x4d2>
 800b920:	d0ed      	beq.n	800b8fe <_strtod_l+0x516>
 800b922:	f1c8 0800 	rsb	r8, r8, #0
 800b926:	f018 020f 	ands.w	r2, r8, #15
 800b92a:	d00a      	beq.n	800b942 <_strtod_l+0x55a>
 800b92c:	4b12      	ldr	r3, [pc, #72]	; (800b978 <_strtod_l+0x590>)
 800b92e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b932:	4650      	mov	r0, sl
 800b934:	4659      	mov	r1, fp
 800b936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93a:	f7f4 ff97 	bl	800086c <__aeabi_ddiv>
 800b93e:	4682      	mov	sl, r0
 800b940:	468b      	mov	fp, r1
 800b942:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b946:	d0da      	beq.n	800b8fe <_strtod_l+0x516>
 800b948:	f1b8 0f1f 	cmp.w	r8, #31
 800b94c:	dd20      	ble.n	800b990 <_strtod_l+0x5a8>
 800b94e:	2400      	movs	r4, #0
 800b950:	46a0      	mov	r8, r4
 800b952:	9407      	str	r4, [sp, #28]
 800b954:	9405      	str	r4, [sp, #20]
 800b956:	2322      	movs	r3, #34	; 0x22
 800b958:	f04f 0a00 	mov.w	sl, #0
 800b95c:	f04f 0b00 	mov.w	fp, #0
 800b960:	f8c9 3000 	str.w	r3, [r9]
 800b964:	e765      	b.n	800b832 <_strtod_l+0x44a>
 800b966:	bf00      	nop
 800b968:	080105f5 	.word	0x080105f5
 800b96c:	08010683 	.word	0x08010683
 800b970:	080105fd 	.word	0x080105fd
 800b974:	08010640 	.word	0x08010640
 800b978:	080106c0 	.word	0x080106c0
 800b97c:	08010698 	.word	0x08010698
 800b980:	7ff00000 	.word	0x7ff00000
 800b984:	7ca00000 	.word	0x7ca00000
 800b988:	fff80000 	.word	0xfff80000
 800b98c:	7fefffff 	.word	0x7fefffff
 800b990:	f018 0310 	ands.w	r3, r8, #16
 800b994:	bf18      	it	ne
 800b996:	236a      	movne	r3, #106	; 0x6a
 800b998:	4da0      	ldr	r5, [pc, #640]	; (800bc1c <_strtod_l+0x834>)
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	4650      	mov	r0, sl
 800b99e:	4659      	mov	r1, fp
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	f1b8 0f00 	cmp.w	r8, #0
 800b9a6:	f300 810a 	bgt.w	800bbbe <_strtod_l+0x7d6>
 800b9aa:	b10b      	cbz	r3, 800b9b0 <_strtod_l+0x5c8>
 800b9ac:	4682      	mov	sl, r0
 800b9ae:	468b      	mov	fp, r1
 800b9b0:	9b04      	ldr	r3, [sp, #16]
 800b9b2:	b1bb      	cbz	r3, 800b9e4 <_strtod_l+0x5fc>
 800b9b4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b9b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	4659      	mov	r1, fp
 800b9c0:	dd10      	ble.n	800b9e4 <_strtod_l+0x5fc>
 800b9c2:	2b1f      	cmp	r3, #31
 800b9c4:	f340 8107 	ble.w	800bbd6 <_strtod_l+0x7ee>
 800b9c8:	2b34      	cmp	r3, #52	; 0x34
 800b9ca:	bfde      	ittt	le
 800b9cc:	3b20      	suble	r3, #32
 800b9ce:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800b9d2:	fa02 f303 	lslle.w	r3, r2, r3
 800b9d6:	f04f 0a00 	mov.w	sl, #0
 800b9da:	bfcc      	ite	gt
 800b9dc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b9e0:	ea03 0b01 	andle.w	fp, r3, r1
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	4650      	mov	r0, sl
 800b9ea:	4659      	mov	r1, fp
 800b9ec:	f7f5 f87c 	bl	8000ae8 <__aeabi_dcmpeq>
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d1ac      	bne.n	800b94e <_strtod_l+0x566>
 800b9f4:	9b07      	ldr	r3, [sp, #28]
 800b9f6:	9300      	str	r3, [sp, #0]
 800b9f8:	9a05      	ldr	r2, [sp, #20]
 800b9fa:	9908      	ldr	r1, [sp, #32]
 800b9fc:	4623      	mov	r3, r4
 800b9fe:	4648      	mov	r0, r9
 800ba00:	f001 fdb2 	bl	800d568 <__s2b>
 800ba04:	9007      	str	r0, [sp, #28]
 800ba06:	2800      	cmp	r0, #0
 800ba08:	f43f af08 	beq.w	800b81c <_strtod_l+0x434>
 800ba0c:	9a06      	ldr	r2, [sp, #24]
 800ba0e:	9b06      	ldr	r3, [sp, #24]
 800ba10:	2a00      	cmp	r2, #0
 800ba12:	f1c3 0300 	rsb	r3, r3, #0
 800ba16:	bfa8      	it	ge
 800ba18:	2300      	movge	r3, #0
 800ba1a:	930e      	str	r3, [sp, #56]	; 0x38
 800ba1c:	2400      	movs	r4, #0
 800ba1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba22:	9316      	str	r3, [sp, #88]	; 0x58
 800ba24:	46a0      	mov	r8, r4
 800ba26:	9b07      	ldr	r3, [sp, #28]
 800ba28:	4648      	mov	r0, r9
 800ba2a:	6859      	ldr	r1, [r3, #4]
 800ba2c:	f001 fd16 	bl	800d45c <_Balloc>
 800ba30:	9005      	str	r0, [sp, #20]
 800ba32:	2800      	cmp	r0, #0
 800ba34:	f43f aef6 	beq.w	800b824 <_strtod_l+0x43c>
 800ba38:	9b07      	ldr	r3, [sp, #28]
 800ba3a:	691a      	ldr	r2, [r3, #16]
 800ba3c:	3202      	adds	r2, #2
 800ba3e:	f103 010c 	add.w	r1, r3, #12
 800ba42:	0092      	lsls	r2, r2, #2
 800ba44:	300c      	adds	r0, #12
 800ba46:	f7fe fd37 	bl	800a4b8 <memcpy>
 800ba4a:	aa1e      	add	r2, sp, #120	; 0x78
 800ba4c:	a91d      	add	r1, sp, #116	; 0x74
 800ba4e:	ec4b ab10 	vmov	d0, sl, fp
 800ba52:	4648      	mov	r0, r9
 800ba54:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ba58:	f002 f842 	bl	800dae0 <__d2b>
 800ba5c:	901c      	str	r0, [sp, #112]	; 0x70
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	f43f aee0 	beq.w	800b824 <_strtod_l+0x43c>
 800ba64:	2101      	movs	r1, #1
 800ba66:	4648      	mov	r0, r9
 800ba68:	f001 fe0a 	bl	800d680 <__i2b>
 800ba6c:	4680      	mov	r8, r0
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	f43f aed8 	beq.w	800b824 <_strtod_l+0x43c>
 800ba74:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ba76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ba78:	2e00      	cmp	r6, #0
 800ba7a:	bfab      	itete	ge
 800ba7c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ba7e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ba80:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ba82:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ba84:	bfac      	ite	ge
 800ba86:	18f7      	addge	r7, r6, r3
 800ba88:	1b9d      	sublt	r5, r3, r6
 800ba8a:	9b04      	ldr	r3, [sp, #16]
 800ba8c:	1af6      	subs	r6, r6, r3
 800ba8e:	4416      	add	r6, r2
 800ba90:	4b63      	ldr	r3, [pc, #396]	; (800bc20 <_strtod_l+0x838>)
 800ba92:	3e01      	subs	r6, #1
 800ba94:	429e      	cmp	r6, r3
 800ba96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ba9a:	f280 80af 	bge.w	800bbfc <_strtod_l+0x814>
 800ba9e:	1b9b      	subs	r3, r3, r6
 800baa0:	2b1f      	cmp	r3, #31
 800baa2:	eba2 0203 	sub.w	r2, r2, r3
 800baa6:	f04f 0101 	mov.w	r1, #1
 800baaa:	f300 809b 	bgt.w	800bbe4 <_strtod_l+0x7fc>
 800baae:	fa01 f303 	lsl.w	r3, r1, r3
 800bab2:	930f      	str	r3, [sp, #60]	; 0x3c
 800bab4:	2300      	movs	r3, #0
 800bab6:	930a      	str	r3, [sp, #40]	; 0x28
 800bab8:	18be      	adds	r6, r7, r2
 800baba:	9b04      	ldr	r3, [sp, #16]
 800babc:	42b7      	cmp	r7, r6
 800babe:	4415      	add	r5, r2
 800bac0:	441d      	add	r5, r3
 800bac2:	463b      	mov	r3, r7
 800bac4:	bfa8      	it	ge
 800bac6:	4633      	movge	r3, r6
 800bac8:	42ab      	cmp	r3, r5
 800baca:	bfa8      	it	ge
 800bacc:	462b      	movge	r3, r5
 800bace:	2b00      	cmp	r3, #0
 800bad0:	bfc2      	ittt	gt
 800bad2:	1af6      	subgt	r6, r6, r3
 800bad4:	1aed      	subgt	r5, r5, r3
 800bad6:	1aff      	subgt	r7, r7, r3
 800bad8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bada:	b1bb      	cbz	r3, 800bb0c <_strtod_l+0x724>
 800badc:	4641      	mov	r1, r8
 800bade:	461a      	mov	r2, r3
 800bae0:	4648      	mov	r0, r9
 800bae2:	f001 fe6d 	bl	800d7c0 <__pow5mult>
 800bae6:	4680      	mov	r8, r0
 800bae8:	2800      	cmp	r0, #0
 800baea:	f43f ae9b 	beq.w	800b824 <_strtod_l+0x43c>
 800baee:	4601      	mov	r1, r0
 800baf0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800baf2:	4648      	mov	r0, r9
 800baf4:	f001 fdcd 	bl	800d692 <__multiply>
 800baf8:	900c      	str	r0, [sp, #48]	; 0x30
 800bafa:	2800      	cmp	r0, #0
 800bafc:	f43f ae92 	beq.w	800b824 <_strtod_l+0x43c>
 800bb00:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bb02:	4648      	mov	r0, r9
 800bb04:	f001 fcde 	bl	800d4c4 <_Bfree>
 800bb08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb0a:	931c      	str	r3, [sp, #112]	; 0x70
 800bb0c:	2e00      	cmp	r6, #0
 800bb0e:	dc7a      	bgt.n	800bc06 <_strtod_l+0x81e>
 800bb10:	9b06      	ldr	r3, [sp, #24]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	dd08      	ble.n	800bb28 <_strtod_l+0x740>
 800bb16:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bb18:	9905      	ldr	r1, [sp, #20]
 800bb1a:	4648      	mov	r0, r9
 800bb1c:	f001 fe50 	bl	800d7c0 <__pow5mult>
 800bb20:	9005      	str	r0, [sp, #20]
 800bb22:	2800      	cmp	r0, #0
 800bb24:	f43f ae7e 	beq.w	800b824 <_strtod_l+0x43c>
 800bb28:	2d00      	cmp	r5, #0
 800bb2a:	dd08      	ble.n	800bb3e <_strtod_l+0x756>
 800bb2c:	462a      	mov	r2, r5
 800bb2e:	9905      	ldr	r1, [sp, #20]
 800bb30:	4648      	mov	r0, r9
 800bb32:	f001 fe93 	bl	800d85c <__lshift>
 800bb36:	9005      	str	r0, [sp, #20]
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	f43f ae73 	beq.w	800b824 <_strtod_l+0x43c>
 800bb3e:	2f00      	cmp	r7, #0
 800bb40:	dd08      	ble.n	800bb54 <_strtod_l+0x76c>
 800bb42:	4641      	mov	r1, r8
 800bb44:	463a      	mov	r2, r7
 800bb46:	4648      	mov	r0, r9
 800bb48:	f001 fe88 	bl	800d85c <__lshift>
 800bb4c:	4680      	mov	r8, r0
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	f43f ae68 	beq.w	800b824 <_strtod_l+0x43c>
 800bb54:	9a05      	ldr	r2, [sp, #20]
 800bb56:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bb58:	4648      	mov	r0, r9
 800bb5a:	f001 feed 	bl	800d938 <__mdiff>
 800bb5e:	4604      	mov	r4, r0
 800bb60:	2800      	cmp	r0, #0
 800bb62:	f43f ae5f 	beq.w	800b824 <_strtod_l+0x43c>
 800bb66:	68c3      	ldr	r3, [r0, #12]
 800bb68:	930c      	str	r3, [sp, #48]	; 0x30
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	60c3      	str	r3, [r0, #12]
 800bb6e:	4641      	mov	r1, r8
 800bb70:	f001 fec8 	bl	800d904 <__mcmp>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	da55      	bge.n	800bc24 <_strtod_l+0x83c>
 800bb78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb7a:	b9e3      	cbnz	r3, 800bbb6 <_strtod_l+0x7ce>
 800bb7c:	f1ba 0f00 	cmp.w	sl, #0
 800bb80:	d119      	bne.n	800bbb6 <_strtod_l+0x7ce>
 800bb82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb86:	b9b3      	cbnz	r3, 800bbb6 <_strtod_l+0x7ce>
 800bb88:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bb8c:	0d1b      	lsrs	r3, r3, #20
 800bb8e:	051b      	lsls	r3, r3, #20
 800bb90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bb94:	d90f      	bls.n	800bbb6 <_strtod_l+0x7ce>
 800bb96:	6963      	ldr	r3, [r4, #20]
 800bb98:	b913      	cbnz	r3, 800bba0 <_strtod_l+0x7b8>
 800bb9a:	6923      	ldr	r3, [r4, #16]
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	dd0a      	ble.n	800bbb6 <_strtod_l+0x7ce>
 800bba0:	4621      	mov	r1, r4
 800bba2:	2201      	movs	r2, #1
 800bba4:	4648      	mov	r0, r9
 800bba6:	f001 fe59 	bl	800d85c <__lshift>
 800bbaa:	4641      	mov	r1, r8
 800bbac:	4604      	mov	r4, r0
 800bbae:	f001 fea9 	bl	800d904 <__mcmp>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	dc67      	bgt.n	800bc86 <_strtod_l+0x89e>
 800bbb6:	9b04      	ldr	r3, [sp, #16]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d171      	bne.n	800bca0 <_strtod_l+0x8b8>
 800bbbc:	e63d      	b.n	800b83a <_strtod_l+0x452>
 800bbbe:	f018 0f01 	tst.w	r8, #1
 800bbc2:	d004      	beq.n	800bbce <_strtod_l+0x7e6>
 800bbc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbc8:	f7f4 fd26 	bl	8000618 <__aeabi_dmul>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bbd2:	3508      	adds	r5, #8
 800bbd4:	e6e5      	b.n	800b9a2 <_strtod_l+0x5ba>
 800bbd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbda:	fa02 f303 	lsl.w	r3, r2, r3
 800bbde:	ea03 0a0a 	and.w	sl, r3, sl
 800bbe2:	e6ff      	b.n	800b9e4 <_strtod_l+0x5fc>
 800bbe4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800bbe8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800bbec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800bbf0:	36e2      	adds	r6, #226	; 0xe2
 800bbf2:	fa01 f306 	lsl.w	r3, r1, r6
 800bbf6:	930a      	str	r3, [sp, #40]	; 0x28
 800bbf8:	910f      	str	r1, [sp, #60]	; 0x3c
 800bbfa:	e75d      	b.n	800bab8 <_strtod_l+0x6d0>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	930a      	str	r3, [sp, #40]	; 0x28
 800bc00:	2301      	movs	r3, #1
 800bc02:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc04:	e758      	b.n	800bab8 <_strtod_l+0x6d0>
 800bc06:	4632      	mov	r2, r6
 800bc08:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bc0a:	4648      	mov	r0, r9
 800bc0c:	f001 fe26 	bl	800d85c <__lshift>
 800bc10:	901c      	str	r0, [sp, #112]	; 0x70
 800bc12:	2800      	cmp	r0, #0
 800bc14:	f47f af7c 	bne.w	800bb10 <_strtod_l+0x728>
 800bc18:	e604      	b.n	800b824 <_strtod_l+0x43c>
 800bc1a:	bf00      	nop
 800bc1c:	08010658 	.word	0x08010658
 800bc20:	fffffc02 	.word	0xfffffc02
 800bc24:	465d      	mov	r5, fp
 800bc26:	f040 8086 	bne.w	800bd36 <_strtod_l+0x94e>
 800bc2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc30:	b32a      	cbz	r2, 800bc7e <_strtod_l+0x896>
 800bc32:	4aaf      	ldr	r2, [pc, #700]	; (800bef0 <_strtod_l+0xb08>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d153      	bne.n	800bce0 <_strtod_l+0x8f8>
 800bc38:	9b04      	ldr	r3, [sp, #16]
 800bc3a:	4650      	mov	r0, sl
 800bc3c:	b1d3      	cbz	r3, 800bc74 <_strtod_l+0x88c>
 800bc3e:	4aad      	ldr	r2, [pc, #692]	; (800bef4 <_strtod_l+0xb0c>)
 800bc40:	402a      	ands	r2, r5
 800bc42:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800bc46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800bc4a:	d816      	bhi.n	800bc7a <_strtod_l+0x892>
 800bc4c:	0d12      	lsrs	r2, r2, #20
 800bc4e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bc52:	fa01 f303 	lsl.w	r3, r1, r3
 800bc56:	4298      	cmp	r0, r3
 800bc58:	d142      	bne.n	800bce0 <_strtod_l+0x8f8>
 800bc5a:	4ba7      	ldr	r3, [pc, #668]	; (800bef8 <_strtod_l+0xb10>)
 800bc5c:	429d      	cmp	r5, r3
 800bc5e:	d102      	bne.n	800bc66 <_strtod_l+0x87e>
 800bc60:	3001      	adds	r0, #1
 800bc62:	f43f addf 	beq.w	800b824 <_strtod_l+0x43c>
 800bc66:	4ba3      	ldr	r3, [pc, #652]	; (800bef4 <_strtod_l+0xb0c>)
 800bc68:	402b      	ands	r3, r5
 800bc6a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800bc6e:	f04f 0a00 	mov.w	sl, #0
 800bc72:	e7a0      	b.n	800bbb6 <_strtod_l+0x7ce>
 800bc74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc78:	e7ed      	b.n	800bc56 <_strtod_l+0x86e>
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	e7eb      	b.n	800bc56 <_strtod_l+0x86e>
 800bc7e:	bb7b      	cbnz	r3, 800bce0 <_strtod_l+0x8f8>
 800bc80:	f1ba 0f00 	cmp.w	sl, #0
 800bc84:	d12c      	bne.n	800bce0 <_strtod_l+0x8f8>
 800bc86:	9904      	ldr	r1, [sp, #16]
 800bc88:	4a9a      	ldr	r2, [pc, #616]	; (800bef4 <_strtod_l+0xb0c>)
 800bc8a:	465b      	mov	r3, fp
 800bc8c:	b1f1      	cbz	r1, 800bccc <_strtod_l+0x8e4>
 800bc8e:	ea02 010b 	and.w	r1, r2, fp
 800bc92:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bc96:	dc19      	bgt.n	800bccc <_strtod_l+0x8e4>
 800bc98:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bc9c:	f77f ae5b 	ble.w	800b956 <_strtod_l+0x56e>
 800bca0:	4a96      	ldr	r2, [pc, #600]	; (800befc <_strtod_l+0xb14>)
 800bca2:	2300      	movs	r3, #0
 800bca4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800bca8:	4650      	mov	r0, sl
 800bcaa:	4659      	mov	r1, fp
 800bcac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800bcb0:	f7f4 fcb2 	bl	8000618 <__aeabi_dmul>
 800bcb4:	4682      	mov	sl, r0
 800bcb6:	468b      	mov	fp, r1
 800bcb8:	2900      	cmp	r1, #0
 800bcba:	f47f adbe 	bne.w	800b83a <_strtod_l+0x452>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	f47f adbb 	bne.w	800b83a <_strtod_l+0x452>
 800bcc4:	2322      	movs	r3, #34	; 0x22
 800bcc6:	f8c9 3000 	str.w	r3, [r9]
 800bcca:	e5b6      	b.n	800b83a <_strtod_l+0x452>
 800bccc:	4013      	ands	r3, r2
 800bcce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bcd2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bcd6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bcda:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bcde:	e76a      	b.n	800bbb6 <_strtod_l+0x7ce>
 800bce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce2:	b193      	cbz	r3, 800bd0a <_strtod_l+0x922>
 800bce4:	422b      	tst	r3, r5
 800bce6:	f43f af66 	beq.w	800bbb6 <_strtod_l+0x7ce>
 800bcea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bcec:	9a04      	ldr	r2, [sp, #16]
 800bcee:	4650      	mov	r0, sl
 800bcf0:	4659      	mov	r1, fp
 800bcf2:	b173      	cbz	r3, 800bd12 <_strtod_l+0x92a>
 800bcf4:	f7ff fb5b 	bl	800b3ae <sulp>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd00:	f7f4 fad4 	bl	80002ac <__adddf3>
 800bd04:	4682      	mov	sl, r0
 800bd06:	468b      	mov	fp, r1
 800bd08:	e755      	b.n	800bbb6 <_strtod_l+0x7ce>
 800bd0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bd0c:	ea13 0f0a 	tst.w	r3, sl
 800bd10:	e7e9      	b.n	800bce6 <_strtod_l+0x8fe>
 800bd12:	f7ff fb4c 	bl	800b3ae <sulp>
 800bd16:	4602      	mov	r2, r0
 800bd18:	460b      	mov	r3, r1
 800bd1a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd1e:	f7f4 fac3 	bl	80002a8 <__aeabi_dsub>
 800bd22:	2200      	movs	r2, #0
 800bd24:	2300      	movs	r3, #0
 800bd26:	4682      	mov	sl, r0
 800bd28:	468b      	mov	fp, r1
 800bd2a:	f7f4 fedd 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd2e:	2800      	cmp	r0, #0
 800bd30:	f47f ae11 	bne.w	800b956 <_strtod_l+0x56e>
 800bd34:	e73f      	b.n	800bbb6 <_strtod_l+0x7ce>
 800bd36:	4641      	mov	r1, r8
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f001 ff20 	bl	800db7e <__ratio>
 800bd3e:	ec57 6b10 	vmov	r6, r7, d0
 800bd42:	2200      	movs	r2, #0
 800bd44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd48:	ee10 0a10 	vmov	r0, s0
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	f7f4 fedf 	bl	8000b10 <__aeabi_dcmple>
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d077      	beq.n	800be46 <_strtod_l+0xa5e>
 800bd56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d04a      	beq.n	800bdf2 <_strtod_l+0xa0a>
 800bd5c:	4b68      	ldr	r3, [pc, #416]	; (800bf00 <_strtod_l+0xb18>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bd64:	4f66      	ldr	r7, [pc, #408]	; (800bf00 <_strtod_l+0xb18>)
 800bd66:	2600      	movs	r6, #0
 800bd68:	4b62      	ldr	r3, [pc, #392]	; (800bef4 <_strtod_l+0xb0c>)
 800bd6a:	402b      	ands	r3, r5
 800bd6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bd70:	4b64      	ldr	r3, [pc, #400]	; (800bf04 <_strtod_l+0xb1c>)
 800bd72:	429a      	cmp	r2, r3
 800bd74:	f040 80ce 	bne.w	800bf14 <_strtod_l+0xb2c>
 800bd78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bd7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bd80:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800bd84:	ec4b ab10 	vmov	d0, sl, fp
 800bd88:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800bd8c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bd90:	f001 fe30 	bl	800d9f4 <__ulp>
 800bd94:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bd98:	ec53 2b10 	vmov	r2, r3, d0
 800bd9c:	f7f4 fc3c 	bl	8000618 <__aeabi_dmul>
 800bda0:	4652      	mov	r2, sl
 800bda2:	465b      	mov	r3, fp
 800bda4:	f7f4 fa82 	bl	80002ac <__adddf3>
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4952      	ldr	r1, [pc, #328]	; (800bef4 <_strtod_l+0xb0c>)
 800bdac:	4a56      	ldr	r2, [pc, #344]	; (800bf08 <_strtod_l+0xb20>)
 800bdae:	4019      	ands	r1, r3
 800bdb0:	4291      	cmp	r1, r2
 800bdb2:	4682      	mov	sl, r0
 800bdb4:	d95b      	bls.n	800be6e <_strtod_l+0xa86>
 800bdb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdb8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d103      	bne.n	800bdc8 <_strtod_l+0x9e0>
 800bdc0:	9b08      	ldr	r3, [sp, #32]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	f43f ad2e 	beq.w	800b824 <_strtod_l+0x43c>
 800bdc8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800bef8 <_strtod_l+0xb10>
 800bdcc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800bdd0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bdd2:	4648      	mov	r0, r9
 800bdd4:	f001 fb76 	bl	800d4c4 <_Bfree>
 800bdd8:	9905      	ldr	r1, [sp, #20]
 800bdda:	4648      	mov	r0, r9
 800bddc:	f001 fb72 	bl	800d4c4 <_Bfree>
 800bde0:	4641      	mov	r1, r8
 800bde2:	4648      	mov	r0, r9
 800bde4:	f001 fb6e 	bl	800d4c4 <_Bfree>
 800bde8:	4621      	mov	r1, r4
 800bdea:	4648      	mov	r0, r9
 800bdec:	f001 fb6a 	bl	800d4c4 <_Bfree>
 800bdf0:	e619      	b.n	800ba26 <_strtod_l+0x63e>
 800bdf2:	f1ba 0f00 	cmp.w	sl, #0
 800bdf6:	d11a      	bne.n	800be2e <_strtod_l+0xa46>
 800bdf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdfc:	b9eb      	cbnz	r3, 800be3a <_strtod_l+0xa52>
 800bdfe:	2200      	movs	r2, #0
 800be00:	4b3f      	ldr	r3, [pc, #252]	; (800bf00 <_strtod_l+0xb18>)
 800be02:	4630      	mov	r0, r6
 800be04:	4639      	mov	r1, r7
 800be06:	f7f4 fe79 	bl	8000afc <__aeabi_dcmplt>
 800be0a:	b9c8      	cbnz	r0, 800be40 <_strtod_l+0xa58>
 800be0c:	4630      	mov	r0, r6
 800be0e:	4639      	mov	r1, r7
 800be10:	2200      	movs	r2, #0
 800be12:	4b3e      	ldr	r3, [pc, #248]	; (800bf0c <_strtod_l+0xb24>)
 800be14:	f7f4 fc00 	bl	8000618 <__aeabi_dmul>
 800be18:	4606      	mov	r6, r0
 800be1a:	460f      	mov	r7, r1
 800be1c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800be20:	9618      	str	r6, [sp, #96]	; 0x60
 800be22:	9319      	str	r3, [sp, #100]	; 0x64
 800be24:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800be28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800be2c:	e79c      	b.n	800bd68 <_strtod_l+0x980>
 800be2e:	f1ba 0f01 	cmp.w	sl, #1
 800be32:	d102      	bne.n	800be3a <_strtod_l+0xa52>
 800be34:	2d00      	cmp	r5, #0
 800be36:	f43f ad8e 	beq.w	800b956 <_strtod_l+0x56e>
 800be3a:	2200      	movs	r2, #0
 800be3c:	4b34      	ldr	r3, [pc, #208]	; (800bf10 <_strtod_l+0xb28>)
 800be3e:	e78f      	b.n	800bd60 <_strtod_l+0x978>
 800be40:	2600      	movs	r6, #0
 800be42:	4f32      	ldr	r7, [pc, #200]	; (800bf0c <_strtod_l+0xb24>)
 800be44:	e7ea      	b.n	800be1c <_strtod_l+0xa34>
 800be46:	4b31      	ldr	r3, [pc, #196]	; (800bf0c <_strtod_l+0xb24>)
 800be48:	4630      	mov	r0, r6
 800be4a:	4639      	mov	r1, r7
 800be4c:	2200      	movs	r2, #0
 800be4e:	f7f4 fbe3 	bl	8000618 <__aeabi_dmul>
 800be52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be54:	4606      	mov	r6, r0
 800be56:	460f      	mov	r7, r1
 800be58:	b933      	cbnz	r3, 800be68 <_strtod_l+0xa80>
 800be5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800be5e:	9010      	str	r0, [sp, #64]	; 0x40
 800be60:	9311      	str	r3, [sp, #68]	; 0x44
 800be62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be66:	e7df      	b.n	800be28 <_strtod_l+0xa40>
 800be68:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800be6c:	e7f9      	b.n	800be62 <_strtod_l+0xa7a>
 800be6e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800be72:	9b04      	ldr	r3, [sp, #16]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1ab      	bne.n	800bdd0 <_strtod_l+0x9e8>
 800be78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800be7c:	0d1b      	lsrs	r3, r3, #20
 800be7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800be80:	051b      	lsls	r3, r3, #20
 800be82:	429a      	cmp	r2, r3
 800be84:	465d      	mov	r5, fp
 800be86:	d1a3      	bne.n	800bdd0 <_strtod_l+0x9e8>
 800be88:	4639      	mov	r1, r7
 800be8a:	4630      	mov	r0, r6
 800be8c:	f7f4 fe74 	bl	8000b78 <__aeabi_d2iz>
 800be90:	f7f4 fb58 	bl	8000544 <__aeabi_i2d>
 800be94:	460b      	mov	r3, r1
 800be96:	4602      	mov	r2, r0
 800be98:	4639      	mov	r1, r7
 800be9a:	4630      	mov	r0, r6
 800be9c:	f7f4 fa04 	bl	80002a8 <__aeabi_dsub>
 800bea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bea2:	4606      	mov	r6, r0
 800bea4:	460f      	mov	r7, r1
 800bea6:	b933      	cbnz	r3, 800beb6 <_strtod_l+0xace>
 800bea8:	f1ba 0f00 	cmp.w	sl, #0
 800beac:	d103      	bne.n	800beb6 <_strtod_l+0xace>
 800beae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800beb2:	2d00      	cmp	r5, #0
 800beb4:	d06d      	beq.n	800bf92 <_strtod_l+0xbaa>
 800beb6:	a30a      	add	r3, pc, #40	; (adr r3, 800bee0 <_strtod_l+0xaf8>)
 800beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bebc:	4630      	mov	r0, r6
 800bebe:	4639      	mov	r1, r7
 800bec0:	f7f4 fe1c 	bl	8000afc <__aeabi_dcmplt>
 800bec4:	2800      	cmp	r0, #0
 800bec6:	f47f acb8 	bne.w	800b83a <_strtod_l+0x452>
 800beca:	a307      	add	r3, pc, #28	; (adr r3, 800bee8 <_strtod_l+0xb00>)
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	4630      	mov	r0, r6
 800bed2:	4639      	mov	r1, r7
 800bed4:	f7f4 fe30 	bl	8000b38 <__aeabi_dcmpgt>
 800bed8:	2800      	cmp	r0, #0
 800beda:	f43f af79 	beq.w	800bdd0 <_strtod_l+0x9e8>
 800bede:	e4ac      	b.n	800b83a <_strtod_l+0x452>
 800bee0:	94a03595 	.word	0x94a03595
 800bee4:	3fdfffff 	.word	0x3fdfffff
 800bee8:	35afe535 	.word	0x35afe535
 800beec:	3fe00000 	.word	0x3fe00000
 800bef0:	000fffff 	.word	0x000fffff
 800bef4:	7ff00000 	.word	0x7ff00000
 800bef8:	7fefffff 	.word	0x7fefffff
 800befc:	39500000 	.word	0x39500000
 800bf00:	3ff00000 	.word	0x3ff00000
 800bf04:	7fe00000 	.word	0x7fe00000
 800bf08:	7c9fffff 	.word	0x7c9fffff
 800bf0c:	3fe00000 	.word	0x3fe00000
 800bf10:	bff00000 	.word	0xbff00000
 800bf14:	9b04      	ldr	r3, [sp, #16]
 800bf16:	b333      	cbz	r3, 800bf66 <_strtod_l+0xb7e>
 800bf18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf1a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bf1e:	d822      	bhi.n	800bf66 <_strtod_l+0xb7e>
 800bf20:	a327      	add	r3, pc, #156	; (adr r3, 800bfc0 <_strtod_l+0xbd8>)
 800bf22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf26:	4630      	mov	r0, r6
 800bf28:	4639      	mov	r1, r7
 800bf2a:	f7f4 fdf1 	bl	8000b10 <__aeabi_dcmple>
 800bf2e:	b1a0      	cbz	r0, 800bf5a <_strtod_l+0xb72>
 800bf30:	4639      	mov	r1, r7
 800bf32:	4630      	mov	r0, r6
 800bf34:	f7f4 fe48 	bl	8000bc8 <__aeabi_d2uiz>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	bf08      	it	eq
 800bf3c:	2001      	moveq	r0, #1
 800bf3e:	f7f4 faf1 	bl	8000524 <__aeabi_ui2d>
 800bf42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf44:	4606      	mov	r6, r0
 800bf46:	460f      	mov	r7, r1
 800bf48:	bb03      	cbnz	r3, 800bf8c <_strtod_l+0xba4>
 800bf4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf4e:	9012      	str	r0, [sp, #72]	; 0x48
 800bf50:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800bf56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800bf5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf5e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800bf62:	1a9b      	subs	r3, r3, r2
 800bf64:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf66:	ed9d 0b08 	vldr	d0, [sp, #32]
 800bf6a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800bf6e:	f001 fd41 	bl	800d9f4 <__ulp>
 800bf72:	4650      	mov	r0, sl
 800bf74:	ec53 2b10 	vmov	r2, r3, d0
 800bf78:	4659      	mov	r1, fp
 800bf7a:	f7f4 fb4d 	bl	8000618 <__aeabi_dmul>
 800bf7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf82:	f7f4 f993 	bl	80002ac <__adddf3>
 800bf86:	4682      	mov	sl, r0
 800bf88:	468b      	mov	fp, r1
 800bf8a:	e772      	b.n	800be72 <_strtod_l+0xa8a>
 800bf8c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800bf90:	e7df      	b.n	800bf52 <_strtod_l+0xb6a>
 800bf92:	a30d      	add	r3, pc, #52	; (adr r3, 800bfc8 <_strtod_l+0xbe0>)
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	f7f4 fdb0 	bl	8000afc <__aeabi_dcmplt>
 800bf9c:	e79c      	b.n	800bed8 <_strtod_l+0xaf0>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	930d      	str	r3, [sp, #52]	; 0x34
 800bfa2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bfa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfa6:	6013      	str	r3, [r2, #0]
 800bfa8:	f7ff ba61 	b.w	800b46e <_strtod_l+0x86>
 800bfac:	2b65      	cmp	r3, #101	; 0x65
 800bfae:	f04f 0200 	mov.w	r2, #0
 800bfb2:	f43f ab4e 	beq.w	800b652 <_strtod_l+0x26a>
 800bfb6:	2101      	movs	r1, #1
 800bfb8:	4614      	mov	r4, r2
 800bfba:	9104      	str	r1, [sp, #16]
 800bfbc:	f7ff bacb 	b.w	800b556 <_strtod_l+0x16e>
 800bfc0:	ffc00000 	.word	0xffc00000
 800bfc4:	41dfffff 	.word	0x41dfffff
 800bfc8:	94a03595 	.word	0x94a03595
 800bfcc:	3fcfffff 	.word	0x3fcfffff

0800bfd0 <_strtod_r>:
 800bfd0:	4b05      	ldr	r3, [pc, #20]	; (800bfe8 <_strtod_r+0x18>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	b410      	push	{r4}
 800bfd6:	6a1b      	ldr	r3, [r3, #32]
 800bfd8:	4c04      	ldr	r4, [pc, #16]	; (800bfec <_strtod_r+0x1c>)
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	bf08      	it	eq
 800bfde:	4623      	moveq	r3, r4
 800bfe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe4:	f7ff ba00 	b.w	800b3e8 <_strtod_l>
 800bfe8:	20001260 	.word	0x20001260
 800bfec:	200012c4 	.word	0x200012c4

0800bff0 <_strtol_l.isra.0>:
 800bff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bff4:	4680      	mov	r8, r0
 800bff6:	4689      	mov	r9, r1
 800bff8:	4692      	mov	sl, r2
 800bffa:	461e      	mov	r6, r3
 800bffc:	460f      	mov	r7, r1
 800bffe:	463d      	mov	r5, r7
 800c000:	9808      	ldr	r0, [sp, #32]
 800c002:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c006:	f001 fa01 	bl	800d40c <__locale_ctype_ptr_l>
 800c00a:	4420      	add	r0, r4
 800c00c:	7843      	ldrb	r3, [r0, #1]
 800c00e:	f013 0308 	ands.w	r3, r3, #8
 800c012:	d132      	bne.n	800c07a <_strtol_l.isra.0+0x8a>
 800c014:	2c2d      	cmp	r4, #45	; 0x2d
 800c016:	d132      	bne.n	800c07e <_strtol_l.isra.0+0x8e>
 800c018:	787c      	ldrb	r4, [r7, #1]
 800c01a:	1cbd      	adds	r5, r7, #2
 800c01c:	2201      	movs	r2, #1
 800c01e:	2e00      	cmp	r6, #0
 800c020:	d05d      	beq.n	800c0de <_strtol_l.isra.0+0xee>
 800c022:	2e10      	cmp	r6, #16
 800c024:	d109      	bne.n	800c03a <_strtol_l.isra.0+0x4a>
 800c026:	2c30      	cmp	r4, #48	; 0x30
 800c028:	d107      	bne.n	800c03a <_strtol_l.isra.0+0x4a>
 800c02a:	782b      	ldrb	r3, [r5, #0]
 800c02c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c030:	2b58      	cmp	r3, #88	; 0x58
 800c032:	d14f      	bne.n	800c0d4 <_strtol_l.isra.0+0xe4>
 800c034:	786c      	ldrb	r4, [r5, #1]
 800c036:	2610      	movs	r6, #16
 800c038:	3502      	adds	r5, #2
 800c03a:	2a00      	cmp	r2, #0
 800c03c:	bf14      	ite	ne
 800c03e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c042:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c046:	2700      	movs	r7, #0
 800c048:	fbb1 fcf6 	udiv	ip, r1, r6
 800c04c:	4638      	mov	r0, r7
 800c04e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c052:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c056:	2b09      	cmp	r3, #9
 800c058:	d817      	bhi.n	800c08a <_strtol_l.isra.0+0x9a>
 800c05a:	461c      	mov	r4, r3
 800c05c:	42a6      	cmp	r6, r4
 800c05e:	dd23      	ble.n	800c0a8 <_strtol_l.isra.0+0xb8>
 800c060:	1c7b      	adds	r3, r7, #1
 800c062:	d007      	beq.n	800c074 <_strtol_l.isra.0+0x84>
 800c064:	4584      	cmp	ip, r0
 800c066:	d31c      	bcc.n	800c0a2 <_strtol_l.isra.0+0xb2>
 800c068:	d101      	bne.n	800c06e <_strtol_l.isra.0+0x7e>
 800c06a:	45a6      	cmp	lr, r4
 800c06c:	db19      	blt.n	800c0a2 <_strtol_l.isra.0+0xb2>
 800c06e:	fb00 4006 	mla	r0, r0, r6, r4
 800c072:	2701      	movs	r7, #1
 800c074:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c078:	e7eb      	b.n	800c052 <_strtol_l.isra.0+0x62>
 800c07a:	462f      	mov	r7, r5
 800c07c:	e7bf      	b.n	800bffe <_strtol_l.isra.0+0xe>
 800c07e:	2c2b      	cmp	r4, #43	; 0x2b
 800c080:	bf04      	itt	eq
 800c082:	1cbd      	addeq	r5, r7, #2
 800c084:	787c      	ldrbeq	r4, [r7, #1]
 800c086:	461a      	mov	r2, r3
 800c088:	e7c9      	b.n	800c01e <_strtol_l.isra.0+0x2e>
 800c08a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800c08e:	2b19      	cmp	r3, #25
 800c090:	d801      	bhi.n	800c096 <_strtol_l.isra.0+0xa6>
 800c092:	3c37      	subs	r4, #55	; 0x37
 800c094:	e7e2      	b.n	800c05c <_strtol_l.isra.0+0x6c>
 800c096:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800c09a:	2b19      	cmp	r3, #25
 800c09c:	d804      	bhi.n	800c0a8 <_strtol_l.isra.0+0xb8>
 800c09e:	3c57      	subs	r4, #87	; 0x57
 800c0a0:	e7dc      	b.n	800c05c <_strtol_l.isra.0+0x6c>
 800c0a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c0a6:	e7e5      	b.n	800c074 <_strtol_l.isra.0+0x84>
 800c0a8:	1c7b      	adds	r3, r7, #1
 800c0aa:	d108      	bne.n	800c0be <_strtol_l.isra.0+0xce>
 800c0ac:	2322      	movs	r3, #34	; 0x22
 800c0ae:	f8c8 3000 	str.w	r3, [r8]
 800c0b2:	4608      	mov	r0, r1
 800c0b4:	f1ba 0f00 	cmp.w	sl, #0
 800c0b8:	d107      	bne.n	800c0ca <_strtol_l.isra.0+0xda>
 800c0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0be:	b102      	cbz	r2, 800c0c2 <_strtol_l.isra.0+0xd2>
 800c0c0:	4240      	negs	r0, r0
 800c0c2:	f1ba 0f00 	cmp.w	sl, #0
 800c0c6:	d0f8      	beq.n	800c0ba <_strtol_l.isra.0+0xca>
 800c0c8:	b10f      	cbz	r7, 800c0ce <_strtol_l.isra.0+0xde>
 800c0ca:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800c0ce:	f8ca 9000 	str.w	r9, [sl]
 800c0d2:	e7f2      	b.n	800c0ba <_strtol_l.isra.0+0xca>
 800c0d4:	2430      	movs	r4, #48	; 0x30
 800c0d6:	2e00      	cmp	r6, #0
 800c0d8:	d1af      	bne.n	800c03a <_strtol_l.isra.0+0x4a>
 800c0da:	2608      	movs	r6, #8
 800c0dc:	e7ad      	b.n	800c03a <_strtol_l.isra.0+0x4a>
 800c0de:	2c30      	cmp	r4, #48	; 0x30
 800c0e0:	d0a3      	beq.n	800c02a <_strtol_l.isra.0+0x3a>
 800c0e2:	260a      	movs	r6, #10
 800c0e4:	e7a9      	b.n	800c03a <_strtol_l.isra.0+0x4a>
	...

0800c0e8 <_strtol_r>:
 800c0e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0ea:	4c06      	ldr	r4, [pc, #24]	; (800c104 <_strtol_r+0x1c>)
 800c0ec:	4d06      	ldr	r5, [pc, #24]	; (800c108 <_strtol_r+0x20>)
 800c0ee:	6824      	ldr	r4, [r4, #0]
 800c0f0:	6a24      	ldr	r4, [r4, #32]
 800c0f2:	2c00      	cmp	r4, #0
 800c0f4:	bf08      	it	eq
 800c0f6:	462c      	moveq	r4, r5
 800c0f8:	9400      	str	r4, [sp, #0]
 800c0fa:	f7ff ff79 	bl	800bff0 <_strtol_l.isra.0>
 800c0fe:	b003      	add	sp, #12
 800c100:	bd30      	pop	{r4, r5, pc}
 800c102:	bf00      	nop
 800c104:	20001260 	.word	0x20001260
 800c108:	200012c4 	.word	0x200012c4

0800c10c <strtol>:
 800c10c:	4b08      	ldr	r3, [pc, #32]	; (800c130 <strtol+0x24>)
 800c10e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c110:	681c      	ldr	r4, [r3, #0]
 800c112:	4d08      	ldr	r5, [pc, #32]	; (800c134 <strtol+0x28>)
 800c114:	6a23      	ldr	r3, [r4, #32]
 800c116:	2b00      	cmp	r3, #0
 800c118:	bf08      	it	eq
 800c11a:	462b      	moveq	r3, r5
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	4613      	mov	r3, r2
 800c120:	460a      	mov	r2, r1
 800c122:	4601      	mov	r1, r0
 800c124:	4620      	mov	r0, r4
 800c126:	f7ff ff63 	bl	800bff0 <_strtol_l.isra.0>
 800c12a:	b003      	add	sp, #12
 800c12c:	bd30      	pop	{r4, r5, pc}
 800c12e:	bf00      	nop
 800c130:	20001260 	.word	0x20001260
 800c134:	200012c4 	.word	0x200012c4

0800c138 <quorem>:
 800c138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13c:	6903      	ldr	r3, [r0, #16]
 800c13e:	690c      	ldr	r4, [r1, #16]
 800c140:	42a3      	cmp	r3, r4
 800c142:	4680      	mov	r8, r0
 800c144:	f2c0 8082 	blt.w	800c24c <quorem+0x114>
 800c148:	3c01      	subs	r4, #1
 800c14a:	f101 0714 	add.w	r7, r1, #20
 800c14e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c152:	f100 0614 	add.w	r6, r0, #20
 800c156:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c15a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c15e:	eb06 030c 	add.w	r3, r6, ip
 800c162:	3501      	adds	r5, #1
 800c164:	eb07 090c 	add.w	r9, r7, ip
 800c168:	9301      	str	r3, [sp, #4]
 800c16a:	fbb0 f5f5 	udiv	r5, r0, r5
 800c16e:	b395      	cbz	r5, 800c1d6 <quorem+0x9e>
 800c170:	f04f 0a00 	mov.w	sl, #0
 800c174:	4638      	mov	r0, r7
 800c176:	46b6      	mov	lr, r6
 800c178:	46d3      	mov	fp, sl
 800c17a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c17e:	b293      	uxth	r3, r2
 800c180:	fb05 a303 	mla	r3, r5, r3, sl
 800c184:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c188:	b29b      	uxth	r3, r3
 800c18a:	ebab 0303 	sub.w	r3, fp, r3
 800c18e:	0c12      	lsrs	r2, r2, #16
 800c190:	f8de b000 	ldr.w	fp, [lr]
 800c194:	fb05 a202 	mla	r2, r5, r2, sl
 800c198:	fa13 f38b 	uxtah	r3, r3, fp
 800c19c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c1a0:	fa1f fb82 	uxth.w	fp, r2
 800c1a4:	f8de 2000 	ldr.w	r2, [lr]
 800c1a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c1ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c1b0:	b29b      	uxth	r3, r3
 800c1b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c1b6:	4581      	cmp	r9, r0
 800c1b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c1bc:	f84e 3b04 	str.w	r3, [lr], #4
 800c1c0:	d2db      	bcs.n	800c17a <quorem+0x42>
 800c1c2:	f856 300c 	ldr.w	r3, [r6, ip]
 800c1c6:	b933      	cbnz	r3, 800c1d6 <quorem+0x9e>
 800c1c8:	9b01      	ldr	r3, [sp, #4]
 800c1ca:	3b04      	subs	r3, #4
 800c1cc:	429e      	cmp	r6, r3
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	d330      	bcc.n	800c234 <quorem+0xfc>
 800c1d2:	f8c8 4010 	str.w	r4, [r8, #16]
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	f001 fb94 	bl	800d904 <__mcmp>
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	db25      	blt.n	800c22c <quorem+0xf4>
 800c1e0:	3501      	adds	r5, #1
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	f04f 0c00 	mov.w	ip, #0
 800c1e8:	f857 2b04 	ldr.w	r2, [r7], #4
 800c1ec:	f8d0 e000 	ldr.w	lr, [r0]
 800c1f0:	b293      	uxth	r3, r2
 800c1f2:	ebac 0303 	sub.w	r3, ip, r3
 800c1f6:	0c12      	lsrs	r2, r2, #16
 800c1f8:	fa13 f38e 	uxtah	r3, r3, lr
 800c1fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c204:	b29b      	uxth	r3, r3
 800c206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c20a:	45b9      	cmp	r9, r7
 800c20c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c210:	f840 3b04 	str.w	r3, [r0], #4
 800c214:	d2e8      	bcs.n	800c1e8 <quorem+0xb0>
 800c216:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c21a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c21e:	b92a      	cbnz	r2, 800c22c <quorem+0xf4>
 800c220:	3b04      	subs	r3, #4
 800c222:	429e      	cmp	r6, r3
 800c224:	461a      	mov	r2, r3
 800c226:	d30b      	bcc.n	800c240 <quorem+0x108>
 800c228:	f8c8 4010 	str.w	r4, [r8, #16]
 800c22c:	4628      	mov	r0, r5
 800c22e:	b003      	add	sp, #12
 800c230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c234:	6812      	ldr	r2, [r2, #0]
 800c236:	3b04      	subs	r3, #4
 800c238:	2a00      	cmp	r2, #0
 800c23a:	d1ca      	bne.n	800c1d2 <quorem+0x9a>
 800c23c:	3c01      	subs	r4, #1
 800c23e:	e7c5      	b.n	800c1cc <quorem+0x94>
 800c240:	6812      	ldr	r2, [r2, #0]
 800c242:	3b04      	subs	r3, #4
 800c244:	2a00      	cmp	r2, #0
 800c246:	d1ef      	bne.n	800c228 <quorem+0xf0>
 800c248:	3c01      	subs	r4, #1
 800c24a:	e7ea      	b.n	800c222 <quorem+0xea>
 800c24c:	2000      	movs	r0, #0
 800c24e:	e7ee      	b.n	800c22e <quorem+0xf6>

0800c250 <_dtoa_r>:
 800c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c254:	ec57 6b10 	vmov	r6, r7, d0
 800c258:	b097      	sub	sp, #92	; 0x5c
 800c25a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c25c:	9106      	str	r1, [sp, #24]
 800c25e:	4604      	mov	r4, r0
 800c260:	920b      	str	r2, [sp, #44]	; 0x2c
 800c262:	9312      	str	r3, [sp, #72]	; 0x48
 800c264:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c268:	e9cd 6700 	strd	r6, r7, [sp]
 800c26c:	b93d      	cbnz	r5, 800c27e <_dtoa_r+0x2e>
 800c26e:	2010      	movs	r0, #16
 800c270:	f7fe f91a 	bl	800a4a8 <malloc>
 800c274:	6260      	str	r0, [r4, #36]	; 0x24
 800c276:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c27a:	6005      	str	r5, [r0, #0]
 800c27c:	60c5      	str	r5, [r0, #12]
 800c27e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c280:	6819      	ldr	r1, [r3, #0]
 800c282:	b151      	cbz	r1, 800c29a <_dtoa_r+0x4a>
 800c284:	685a      	ldr	r2, [r3, #4]
 800c286:	604a      	str	r2, [r1, #4]
 800c288:	2301      	movs	r3, #1
 800c28a:	4093      	lsls	r3, r2
 800c28c:	608b      	str	r3, [r1, #8]
 800c28e:	4620      	mov	r0, r4
 800c290:	f001 f918 	bl	800d4c4 <_Bfree>
 800c294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c296:	2200      	movs	r2, #0
 800c298:	601a      	str	r2, [r3, #0]
 800c29a:	1e3b      	subs	r3, r7, #0
 800c29c:	bfbb      	ittet	lt
 800c29e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c2a2:	9301      	strlt	r3, [sp, #4]
 800c2a4:	2300      	movge	r3, #0
 800c2a6:	2201      	movlt	r2, #1
 800c2a8:	bfac      	ite	ge
 800c2aa:	f8c8 3000 	strge.w	r3, [r8]
 800c2ae:	f8c8 2000 	strlt.w	r2, [r8]
 800c2b2:	4baf      	ldr	r3, [pc, #700]	; (800c570 <_dtoa_r+0x320>)
 800c2b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c2b8:	ea33 0308 	bics.w	r3, r3, r8
 800c2bc:	d114      	bne.n	800c2e8 <_dtoa_r+0x98>
 800c2be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c2c4:	6013      	str	r3, [r2, #0]
 800c2c6:	9b00      	ldr	r3, [sp, #0]
 800c2c8:	b923      	cbnz	r3, 800c2d4 <_dtoa_r+0x84>
 800c2ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	f000 8542 	beq.w	800cd58 <_dtoa_r+0xb08>
 800c2d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c584 <_dtoa_r+0x334>
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f000 8544 	beq.w	800cd68 <_dtoa_r+0xb18>
 800c2e0:	f10b 0303 	add.w	r3, fp, #3
 800c2e4:	f000 bd3e 	b.w	800cd64 <_dtoa_r+0xb14>
 800c2e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	4639      	mov	r1, r7
 800c2f4:	f7f4 fbf8 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2f8:	4681      	mov	r9, r0
 800c2fa:	b168      	cbz	r0, 800c318 <_dtoa_r+0xc8>
 800c2fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2fe:	2301      	movs	r3, #1
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c304:	2b00      	cmp	r3, #0
 800c306:	f000 8524 	beq.w	800cd52 <_dtoa_r+0xb02>
 800c30a:	4b9a      	ldr	r3, [pc, #616]	; (800c574 <_dtoa_r+0x324>)
 800c30c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c30e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800c312:	6013      	str	r3, [r2, #0]
 800c314:	f000 bd28 	b.w	800cd68 <_dtoa_r+0xb18>
 800c318:	aa14      	add	r2, sp, #80	; 0x50
 800c31a:	a915      	add	r1, sp, #84	; 0x54
 800c31c:	ec47 6b10 	vmov	d0, r6, r7
 800c320:	4620      	mov	r0, r4
 800c322:	f001 fbdd 	bl	800dae0 <__d2b>
 800c326:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c32a:	9004      	str	r0, [sp, #16]
 800c32c:	2d00      	cmp	r5, #0
 800c32e:	d07c      	beq.n	800c42a <_dtoa_r+0x1da>
 800c330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c334:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c338:	46b2      	mov	sl, r6
 800c33a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c33e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c342:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c346:	2200      	movs	r2, #0
 800c348:	4b8b      	ldr	r3, [pc, #556]	; (800c578 <_dtoa_r+0x328>)
 800c34a:	4650      	mov	r0, sl
 800c34c:	4659      	mov	r1, fp
 800c34e:	f7f3 ffab 	bl	80002a8 <__aeabi_dsub>
 800c352:	a381      	add	r3, pc, #516	; (adr r3, 800c558 <_dtoa_r+0x308>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	f7f4 f95e 	bl	8000618 <__aeabi_dmul>
 800c35c:	a380      	add	r3, pc, #512	; (adr r3, 800c560 <_dtoa_r+0x310>)
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	f7f3 ffa3 	bl	80002ac <__adddf3>
 800c366:	4606      	mov	r6, r0
 800c368:	4628      	mov	r0, r5
 800c36a:	460f      	mov	r7, r1
 800c36c:	f7f4 f8ea 	bl	8000544 <__aeabi_i2d>
 800c370:	a37d      	add	r3, pc, #500	; (adr r3, 800c568 <_dtoa_r+0x318>)
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	f7f4 f94f 	bl	8000618 <__aeabi_dmul>
 800c37a:	4602      	mov	r2, r0
 800c37c:	460b      	mov	r3, r1
 800c37e:	4630      	mov	r0, r6
 800c380:	4639      	mov	r1, r7
 800c382:	f7f3 ff93 	bl	80002ac <__adddf3>
 800c386:	4606      	mov	r6, r0
 800c388:	460f      	mov	r7, r1
 800c38a:	f7f4 fbf5 	bl	8000b78 <__aeabi_d2iz>
 800c38e:	2200      	movs	r2, #0
 800c390:	4682      	mov	sl, r0
 800c392:	2300      	movs	r3, #0
 800c394:	4630      	mov	r0, r6
 800c396:	4639      	mov	r1, r7
 800c398:	f7f4 fbb0 	bl	8000afc <__aeabi_dcmplt>
 800c39c:	b148      	cbz	r0, 800c3b2 <_dtoa_r+0x162>
 800c39e:	4650      	mov	r0, sl
 800c3a0:	f7f4 f8d0 	bl	8000544 <__aeabi_i2d>
 800c3a4:	4632      	mov	r2, r6
 800c3a6:	463b      	mov	r3, r7
 800c3a8:	f7f4 fb9e 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3ac:	b908      	cbnz	r0, 800c3b2 <_dtoa_r+0x162>
 800c3ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c3b2:	f1ba 0f16 	cmp.w	sl, #22
 800c3b6:	d859      	bhi.n	800c46c <_dtoa_r+0x21c>
 800c3b8:	4970      	ldr	r1, [pc, #448]	; (800c57c <_dtoa_r+0x32c>)
 800c3ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c3be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3c6:	f7f4 fbb7 	bl	8000b38 <__aeabi_dcmpgt>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d050      	beq.n	800c470 <_dtoa_r+0x220>
 800c3ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3d8:	1b5d      	subs	r5, r3, r5
 800c3da:	f1b5 0801 	subs.w	r8, r5, #1
 800c3de:	bf49      	itett	mi
 800c3e0:	f1c5 0301 	rsbmi	r3, r5, #1
 800c3e4:	2300      	movpl	r3, #0
 800c3e6:	9305      	strmi	r3, [sp, #20]
 800c3e8:	f04f 0800 	movmi.w	r8, #0
 800c3ec:	bf58      	it	pl
 800c3ee:	9305      	strpl	r3, [sp, #20]
 800c3f0:	f1ba 0f00 	cmp.w	sl, #0
 800c3f4:	db3e      	blt.n	800c474 <_dtoa_r+0x224>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	44d0      	add	r8, sl
 800c3fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c3fe:	9307      	str	r3, [sp, #28]
 800c400:	9b06      	ldr	r3, [sp, #24]
 800c402:	2b09      	cmp	r3, #9
 800c404:	f200 8090 	bhi.w	800c528 <_dtoa_r+0x2d8>
 800c408:	2b05      	cmp	r3, #5
 800c40a:	bfc4      	itt	gt
 800c40c:	3b04      	subgt	r3, #4
 800c40e:	9306      	strgt	r3, [sp, #24]
 800c410:	9b06      	ldr	r3, [sp, #24]
 800c412:	f1a3 0302 	sub.w	r3, r3, #2
 800c416:	bfcc      	ite	gt
 800c418:	2500      	movgt	r5, #0
 800c41a:	2501      	movle	r5, #1
 800c41c:	2b03      	cmp	r3, #3
 800c41e:	f200 808f 	bhi.w	800c540 <_dtoa_r+0x2f0>
 800c422:	e8df f003 	tbb	[pc, r3]
 800c426:	7f7d      	.short	0x7f7d
 800c428:	7131      	.short	0x7131
 800c42a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c42e:	441d      	add	r5, r3
 800c430:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c434:	2820      	cmp	r0, #32
 800c436:	dd13      	ble.n	800c460 <_dtoa_r+0x210>
 800c438:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c43c:	9b00      	ldr	r3, [sp, #0]
 800c43e:	fa08 f800 	lsl.w	r8, r8, r0
 800c442:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c446:	fa23 f000 	lsr.w	r0, r3, r0
 800c44a:	ea48 0000 	orr.w	r0, r8, r0
 800c44e:	f7f4 f869 	bl	8000524 <__aeabi_ui2d>
 800c452:	2301      	movs	r3, #1
 800c454:	4682      	mov	sl, r0
 800c456:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c45a:	3d01      	subs	r5, #1
 800c45c:	9313      	str	r3, [sp, #76]	; 0x4c
 800c45e:	e772      	b.n	800c346 <_dtoa_r+0xf6>
 800c460:	9b00      	ldr	r3, [sp, #0]
 800c462:	f1c0 0020 	rsb	r0, r0, #32
 800c466:	fa03 f000 	lsl.w	r0, r3, r0
 800c46a:	e7f0      	b.n	800c44e <_dtoa_r+0x1fe>
 800c46c:	2301      	movs	r3, #1
 800c46e:	e7b1      	b.n	800c3d4 <_dtoa_r+0x184>
 800c470:	900f      	str	r0, [sp, #60]	; 0x3c
 800c472:	e7b0      	b.n	800c3d6 <_dtoa_r+0x186>
 800c474:	9b05      	ldr	r3, [sp, #20]
 800c476:	eba3 030a 	sub.w	r3, r3, sl
 800c47a:	9305      	str	r3, [sp, #20]
 800c47c:	f1ca 0300 	rsb	r3, sl, #0
 800c480:	9307      	str	r3, [sp, #28]
 800c482:	2300      	movs	r3, #0
 800c484:	930e      	str	r3, [sp, #56]	; 0x38
 800c486:	e7bb      	b.n	800c400 <_dtoa_r+0x1b0>
 800c488:	2301      	movs	r3, #1
 800c48a:	930a      	str	r3, [sp, #40]	; 0x28
 800c48c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c48e:	2b00      	cmp	r3, #0
 800c490:	dd59      	ble.n	800c546 <_dtoa_r+0x2f6>
 800c492:	9302      	str	r3, [sp, #8]
 800c494:	4699      	mov	r9, r3
 800c496:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c498:	2200      	movs	r2, #0
 800c49a:	6072      	str	r2, [r6, #4]
 800c49c:	2204      	movs	r2, #4
 800c49e:	f102 0014 	add.w	r0, r2, #20
 800c4a2:	4298      	cmp	r0, r3
 800c4a4:	6871      	ldr	r1, [r6, #4]
 800c4a6:	d953      	bls.n	800c550 <_dtoa_r+0x300>
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f000 ffd7 	bl	800d45c <_Balloc>
 800c4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c4b0:	6030      	str	r0, [r6, #0]
 800c4b2:	f1b9 0f0e 	cmp.w	r9, #14
 800c4b6:	f8d3 b000 	ldr.w	fp, [r3]
 800c4ba:	f200 80e6 	bhi.w	800c68a <_dtoa_r+0x43a>
 800c4be:	2d00      	cmp	r5, #0
 800c4c0:	f000 80e3 	beq.w	800c68a <_dtoa_r+0x43a>
 800c4c4:	ed9d 7b00 	vldr	d7, [sp]
 800c4c8:	f1ba 0f00 	cmp.w	sl, #0
 800c4cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c4d0:	dd74      	ble.n	800c5bc <_dtoa_r+0x36c>
 800c4d2:	4a2a      	ldr	r2, [pc, #168]	; (800c57c <_dtoa_r+0x32c>)
 800c4d4:	f00a 030f 	and.w	r3, sl, #15
 800c4d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c4dc:	ed93 7b00 	vldr	d7, [r3]
 800c4e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c4e4:	06f0      	lsls	r0, r6, #27
 800c4e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c4ea:	d565      	bpl.n	800c5b8 <_dtoa_r+0x368>
 800c4ec:	4b24      	ldr	r3, [pc, #144]	; (800c580 <_dtoa_r+0x330>)
 800c4ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c4f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c4f6:	f7f4 f9b9 	bl	800086c <__aeabi_ddiv>
 800c4fa:	e9cd 0100 	strd	r0, r1, [sp]
 800c4fe:	f006 060f 	and.w	r6, r6, #15
 800c502:	2503      	movs	r5, #3
 800c504:	4f1e      	ldr	r7, [pc, #120]	; (800c580 <_dtoa_r+0x330>)
 800c506:	e04c      	b.n	800c5a2 <_dtoa_r+0x352>
 800c508:	2301      	movs	r3, #1
 800c50a:	930a      	str	r3, [sp, #40]	; 0x28
 800c50c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c50e:	4453      	add	r3, sl
 800c510:	f103 0901 	add.w	r9, r3, #1
 800c514:	9302      	str	r3, [sp, #8]
 800c516:	464b      	mov	r3, r9
 800c518:	2b01      	cmp	r3, #1
 800c51a:	bfb8      	it	lt
 800c51c:	2301      	movlt	r3, #1
 800c51e:	e7ba      	b.n	800c496 <_dtoa_r+0x246>
 800c520:	2300      	movs	r3, #0
 800c522:	e7b2      	b.n	800c48a <_dtoa_r+0x23a>
 800c524:	2300      	movs	r3, #0
 800c526:	e7f0      	b.n	800c50a <_dtoa_r+0x2ba>
 800c528:	2501      	movs	r5, #1
 800c52a:	2300      	movs	r3, #0
 800c52c:	9306      	str	r3, [sp, #24]
 800c52e:	950a      	str	r5, [sp, #40]	; 0x28
 800c530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c534:	9302      	str	r3, [sp, #8]
 800c536:	4699      	mov	r9, r3
 800c538:	2200      	movs	r2, #0
 800c53a:	2312      	movs	r3, #18
 800c53c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c53e:	e7aa      	b.n	800c496 <_dtoa_r+0x246>
 800c540:	2301      	movs	r3, #1
 800c542:	930a      	str	r3, [sp, #40]	; 0x28
 800c544:	e7f4      	b.n	800c530 <_dtoa_r+0x2e0>
 800c546:	2301      	movs	r3, #1
 800c548:	9302      	str	r3, [sp, #8]
 800c54a:	4699      	mov	r9, r3
 800c54c:	461a      	mov	r2, r3
 800c54e:	e7f5      	b.n	800c53c <_dtoa_r+0x2ec>
 800c550:	3101      	adds	r1, #1
 800c552:	6071      	str	r1, [r6, #4]
 800c554:	0052      	lsls	r2, r2, #1
 800c556:	e7a2      	b.n	800c49e <_dtoa_r+0x24e>
 800c558:	636f4361 	.word	0x636f4361
 800c55c:	3fd287a7 	.word	0x3fd287a7
 800c560:	8b60c8b3 	.word	0x8b60c8b3
 800c564:	3fc68a28 	.word	0x3fc68a28
 800c568:	509f79fb 	.word	0x509f79fb
 800c56c:	3fd34413 	.word	0x3fd34413
 800c570:	7ff00000 	.word	0x7ff00000
 800c574:	08010601 	.word	0x08010601
 800c578:	3ff80000 	.word	0x3ff80000
 800c57c:	080106c0 	.word	0x080106c0
 800c580:	08010698 	.word	0x08010698
 800c584:	08010689 	.word	0x08010689
 800c588:	07f1      	lsls	r1, r6, #31
 800c58a:	d508      	bpl.n	800c59e <_dtoa_r+0x34e>
 800c58c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c590:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c594:	f7f4 f840 	bl	8000618 <__aeabi_dmul>
 800c598:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c59c:	3501      	adds	r5, #1
 800c59e:	1076      	asrs	r6, r6, #1
 800c5a0:	3708      	adds	r7, #8
 800c5a2:	2e00      	cmp	r6, #0
 800c5a4:	d1f0      	bne.n	800c588 <_dtoa_r+0x338>
 800c5a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c5aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5ae:	f7f4 f95d 	bl	800086c <__aeabi_ddiv>
 800c5b2:	e9cd 0100 	strd	r0, r1, [sp]
 800c5b6:	e01a      	b.n	800c5ee <_dtoa_r+0x39e>
 800c5b8:	2502      	movs	r5, #2
 800c5ba:	e7a3      	b.n	800c504 <_dtoa_r+0x2b4>
 800c5bc:	f000 80a0 	beq.w	800c700 <_dtoa_r+0x4b0>
 800c5c0:	f1ca 0600 	rsb	r6, sl, #0
 800c5c4:	4b9f      	ldr	r3, [pc, #636]	; (800c844 <_dtoa_r+0x5f4>)
 800c5c6:	4fa0      	ldr	r7, [pc, #640]	; (800c848 <_dtoa_r+0x5f8>)
 800c5c8:	f006 020f 	and.w	r2, r6, #15
 800c5cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c5d8:	f7f4 f81e 	bl	8000618 <__aeabi_dmul>
 800c5dc:	e9cd 0100 	strd	r0, r1, [sp]
 800c5e0:	1136      	asrs	r6, r6, #4
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	2502      	movs	r5, #2
 800c5e6:	2e00      	cmp	r6, #0
 800c5e8:	d17f      	bne.n	800c6ea <_dtoa_r+0x49a>
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1e1      	bne.n	800c5b2 <_dtoa_r+0x362>
 800c5ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f000 8087 	beq.w	800c704 <_dtoa_r+0x4b4>
 800c5f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	4b93      	ldr	r3, [pc, #588]	; (800c84c <_dtoa_r+0x5fc>)
 800c5fe:	4630      	mov	r0, r6
 800c600:	4639      	mov	r1, r7
 800c602:	f7f4 fa7b 	bl	8000afc <__aeabi_dcmplt>
 800c606:	2800      	cmp	r0, #0
 800c608:	d07c      	beq.n	800c704 <_dtoa_r+0x4b4>
 800c60a:	f1b9 0f00 	cmp.w	r9, #0
 800c60e:	d079      	beq.n	800c704 <_dtoa_r+0x4b4>
 800c610:	9b02      	ldr	r3, [sp, #8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	dd35      	ble.n	800c682 <_dtoa_r+0x432>
 800c616:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800c61a:	9308      	str	r3, [sp, #32]
 800c61c:	4639      	mov	r1, r7
 800c61e:	2200      	movs	r2, #0
 800c620:	4b8b      	ldr	r3, [pc, #556]	; (800c850 <_dtoa_r+0x600>)
 800c622:	4630      	mov	r0, r6
 800c624:	f7f3 fff8 	bl	8000618 <__aeabi_dmul>
 800c628:	e9cd 0100 	strd	r0, r1, [sp]
 800c62c:	9f02      	ldr	r7, [sp, #8]
 800c62e:	3501      	adds	r5, #1
 800c630:	4628      	mov	r0, r5
 800c632:	f7f3 ff87 	bl	8000544 <__aeabi_i2d>
 800c636:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c63a:	f7f3 ffed 	bl	8000618 <__aeabi_dmul>
 800c63e:	2200      	movs	r2, #0
 800c640:	4b84      	ldr	r3, [pc, #528]	; (800c854 <_dtoa_r+0x604>)
 800c642:	f7f3 fe33 	bl	80002ac <__adddf3>
 800c646:	4605      	mov	r5, r0
 800c648:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c64c:	2f00      	cmp	r7, #0
 800c64e:	d15d      	bne.n	800c70c <_dtoa_r+0x4bc>
 800c650:	2200      	movs	r2, #0
 800c652:	4b81      	ldr	r3, [pc, #516]	; (800c858 <_dtoa_r+0x608>)
 800c654:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c658:	f7f3 fe26 	bl	80002a8 <__aeabi_dsub>
 800c65c:	462a      	mov	r2, r5
 800c65e:	4633      	mov	r3, r6
 800c660:	e9cd 0100 	strd	r0, r1, [sp]
 800c664:	f7f4 fa68 	bl	8000b38 <__aeabi_dcmpgt>
 800c668:	2800      	cmp	r0, #0
 800c66a:	f040 8288 	bne.w	800cb7e <_dtoa_r+0x92e>
 800c66e:	462a      	mov	r2, r5
 800c670:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c674:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c678:	f7f4 fa40 	bl	8000afc <__aeabi_dcmplt>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	f040 827c 	bne.w	800cb7a <_dtoa_r+0x92a>
 800c682:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c686:	e9cd 2300 	strd	r2, r3, [sp]
 800c68a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f2c0 8150 	blt.w	800c932 <_dtoa_r+0x6e2>
 800c692:	f1ba 0f0e 	cmp.w	sl, #14
 800c696:	f300 814c 	bgt.w	800c932 <_dtoa_r+0x6e2>
 800c69a:	4b6a      	ldr	r3, [pc, #424]	; (800c844 <_dtoa_r+0x5f4>)
 800c69c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c6a0:	ed93 7b00 	vldr	d7, [r3]
 800c6a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c6ac:	f280 80d8 	bge.w	800c860 <_dtoa_r+0x610>
 800c6b0:	f1b9 0f00 	cmp.w	r9, #0
 800c6b4:	f300 80d4 	bgt.w	800c860 <_dtoa_r+0x610>
 800c6b8:	f040 825e 	bne.w	800cb78 <_dtoa_r+0x928>
 800c6bc:	2200      	movs	r2, #0
 800c6be:	4b66      	ldr	r3, [pc, #408]	; (800c858 <_dtoa_r+0x608>)
 800c6c0:	ec51 0b17 	vmov	r0, r1, d7
 800c6c4:	f7f3 ffa8 	bl	8000618 <__aeabi_dmul>
 800c6c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6cc:	f7f4 fa2a 	bl	8000b24 <__aeabi_dcmpge>
 800c6d0:	464f      	mov	r7, r9
 800c6d2:	464e      	mov	r6, r9
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	f040 8234 	bne.w	800cb42 <_dtoa_r+0x8f2>
 800c6da:	2331      	movs	r3, #49	; 0x31
 800c6dc:	f10b 0501 	add.w	r5, fp, #1
 800c6e0:	f88b 3000 	strb.w	r3, [fp]
 800c6e4:	f10a 0a01 	add.w	sl, sl, #1
 800c6e8:	e22f      	b.n	800cb4a <_dtoa_r+0x8fa>
 800c6ea:	07f2      	lsls	r2, r6, #31
 800c6ec:	d505      	bpl.n	800c6fa <_dtoa_r+0x4aa>
 800c6ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6f2:	f7f3 ff91 	bl	8000618 <__aeabi_dmul>
 800c6f6:	3501      	adds	r5, #1
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	1076      	asrs	r6, r6, #1
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	e772      	b.n	800c5e6 <_dtoa_r+0x396>
 800c700:	2502      	movs	r5, #2
 800c702:	e774      	b.n	800c5ee <_dtoa_r+0x39e>
 800c704:	f8cd a020 	str.w	sl, [sp, #32]
 800c708:	464f      	mov	r7, r9
 800c70a:	e791      	b.n	800c630 <_dtoa_r+0x3e0>
 800c70c:	4b4d      	ldr	r3, [pc, #308]	; (800c844 <_dtoa_r+0x5f4>)
 800c70e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c712:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d047      	beq.n	800c7ac <_dtoa_r+0x55c>
 800c71c:	4602      	mov	r2, r0
 800c71e:	460b      	mov	r3, r1
 800c720:	2000      	movs	r0, #0
 800c722:	494e      	ldr	r1, [pc, #312]	; (800c85c <_dtoa_r+0x60c>)
 800c724:	f7f4 f8a2 	bl	800086c <__aeabi_ddiv>
 800c728:	462a      	mov	r2, r5
 800c72a:	4633      	mov	r3, r6
 800c72c:	f7f3 fdbc 	bl	80002a8 <__aeabi_dsub>
 800c730:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c734:	465d      	mov	r5, fp
 800c736:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c73a:	f7f4 fa1d 	bl	8000b78 <__aeabi_d2iz>
 800c73e:	4606      	mov	r6, r0
 800c740:	f7f3 ff00 	bl	8000544 <__aeabi_i2d>
 800c744:	4602      	mov	r2, r0
 800c746:	460b      	mov	r3, r1
 800c748:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c74c:	f7f3 fdac 	bl	80002a8 <__aeabi_dsub>
 800c750:	3630      	adds	r6, #48	; 0x30
 800c752:	f805 6b01 	strb.w	r6, [r5], #1
 800c756:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c75a:	e9cd 0100 	strd	r0, r1, [sp]
 800c75e:	f7f4 f9cd 	bl	8000afc <__aeabi_dcmplt>
 800c762:	2800      	cmp	r0, #0
 800c764:	d163      	bne.n	800c82e <_dtoa_r+0x5de>
 800c766:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c76a:	2000      	movs	r0, #0
 800c76c:	4937      	ldr	r1, [pc, #220]	; (800c84c <_dtoa_r+0x5fc>)
 800c76e:	f7f3 fd9b 	bl	80002a8 <__aeabi_dsub>
 800c772:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c776:	f7f4 f9c1 	bl	8000afc <__aeabi_dcmplt>
 800c77a:	2800      	cmp	r0, #0
 800c77c:	f040 80b7 	bne.w	800c8ee <_dtoa_r+0x69e>
 800c780:	eba5 030b 	sub.w	r3, r5, fp
 800c784:	429f      	cmp	r7, r3
 800c786:	f77f af7c 	ble.w	800c682 <_dtoa_r+0x432>
 800c78a:	2200      	movs	r2, #0
 800c78c:	4b30      	ldr	r3, [pc, #192]	; (800c850 <_dtoa_r+0x600>)
 800c78e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c792:	f7f3 ff41 	bl	8000618 <__aeabi_dmul>
 800c796:	2200      	movs	r2, #0
 800c798:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c79c:	4b2c      	ldr	r3, [pc, #176]	; (800c850 <_dtoa_r+0x600>)
 800c79e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7a2:	f7f3 ff39 	bl	8000618 <__aeabi_dmul>
 800c7a6:	e9cd 0100 	strd	r0, r1, [sp]
 800c7aa:	e7c4      	b.n	800c736 <_dtoa_r+0x4e6>
 800c7ac:	462a      	mov	r2, r5
 800c7ae:	4633      	mov	r3, r6
 800c7b0:	f7f3 ff32 	bl	8000618 <__aeabi_dmul>
 800c7b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c7b8:	eb0b 0507 	add.w	r5, fp, r7
 800c7bc:	465e      	mov	r6, fp
 800c7be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7c2:	f7f4 f9d9 	bl	8000b78 <__aeabi_d2iz>
 800c7c6:	4607      	mov	r7, r0
 800c7c8:	f7f3 febc 	bl	8000544 <__aeabi_i2d>
 800c7cc:	3730      	adds	r7, #48	; 0x30
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	460b      	mov	r3, r1
 800c7d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7d6:	f7f3 fd67 	bl	80002a8 <__aeabi_dsub>
 800c7da:	f806 7b01 	strb.w	r7, [r6], #1
 800c7de:	42ae      	cmp	r6, r5
 800c7e0:	e9cd 0100 	strd	r0, r1, [sp]
 800c7e4:	f04f 0200 	mov.w	r2, #0
 800c7e8:	d126      	bne.n	800c838 <_dtoa_r+0x5e8>
 800c7ea:	4b1c      	ldr	r3, [pc, #112]	; (800c85c <_dtoa_r+0x60c>)
 800c7ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c7f0:	f7f3 fd5c 	bl	80002ac <__adddf3>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7fc:	f7f4 f99c 	bl	8000b38 <__aeabi_dcmpgt>
 800c800:	2800      	cmp	r0, #0
 800c802:	d174      	bne.n	800c8ee <_dtoa_r+0x69e>
 800c804:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c808:	2000      	movs	r0, #0
 800c80a:	4914      	ldr	r1, [pc, #80]	; (800c85c <_dtoa_r+0x60c>)
 800c80c:	f7f3 fd4c 	bl	80002a8 <__aeabi_dsub>
 800c810:	4602      	mov	r2, r0
 800c812:	460b      	mov	r3, r1
 800c814:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c818:	f7f4 f970 	bl	8000afc <__aeabi_dcmplt>
 800c81c:	2800      	cmp	r0, #0
 800c81e:	f43f af30 	beq.w	800c682 <_dtoa_r+0x432>
 800c822:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c826:	2b30      	cmp	r3, #48	; 0x30
 800c828:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c82c:	d002      	beq.n	800c834 <_dtoa_r+0x5e4>
 800c82e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c832:	e04a      	b.n	800c8ca <_dtoa_r+0x67a>
 800c834:	4615      	mov	r5, r2
 800c836:	e7f4      	b.n	800c822 <_dtoa_r+0x5d2>
 800c838:	4b05      	ldr	r3, [pc, #20]	; (800c850 <_dtoa_r+0x600>)
 800c83a:	f7f3 feed 	bl	8000618 <__aeabi_dmul>
 800c83e:	e9cd 0100 	strd	r0, r1, [sp]
 800c842:	e7bc      	b.n	800c7be <_dtoa_r+0x56e>
 800c844:	080106c0 	.word	0x080106c0
 800c848:	08010698 	.word	0x08010698
 800c84c:	3ff00000 	.word	0x3ff00000
 800c850:	40240000 	.word	0x40240000
 800c854:	401c0000 	.word	0x401c0000
 800c858:	40140000 	.word	0x40140000
 800c85c:	3fe00000 	.word	0x3fe00000
 800c860:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c864:	465d      	mov	r5, fp
 800c866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c86a:	4630      	mov	r0, r6
 800c86c:	4639      	mov	r1, r7
 800c86e:	f7f3 fffd 	bl	800086c <__aeabi_ddiv>
 800c872:	f7f4 f981 	bl	8000b78 <__aeabi_d2iz>
 800c876:	4680      	mov	r8, r0
 800c878:	f7f3 fe64 	bl	8000544 <__aeabi_i2d>
 800c87c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c880:	f7f3 feca 	bl	8000618 <__aeabi_dmul>
 800c884:	4602      	mov	r2, r0
 800c886:	460b      	mov	r3, r1
 800c888:	4630      	mov	r0, r6
 800c88a:	4639      	mov	r1, r7
 800c88c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c890:	f7f3 fd0a 	bl	80002a8 <__aeabi_dsub>
 800c894:	f805 6b01 	strb.w	r6, [r5], #1
 800c898:	eba5 060b 	sub.w	r6, r5, fp
 800c89c:	45b1      	cmp	r9, r6
 800c89e:	4602      	mov	r2, r0
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	d139      	bne.n	800c918 <_dtoa_r+0x6c8>
 800c8a4:	f7f3 fd02 	bl	80002ac <__adddf3>
 800c8a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8ac:	4606      	mov	r6, r0
 800c8ae:	460f      	mov	r7, r1
 800c8b0:	f7f4 f942 	bl	8000b38 <__aeabi_dcmpgt>
 800c8b4:	b9c8      	cbnz	r0, 800c8ea <_dtoa_r+0x69a>
 800c8b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	4639      	mov	r1, r7
 800c8be:	f7f4 f913 	bl	8000ae8 <__aeabi_dcmpeq>
 800c8c2:	b110      	cbz	r0, 800c8ca <_dtoa_r+0x67a>
 800c8c4:	f018 0f01 	tst.w	r8, #1
 800c8c8:	d10f      	bne.n	800c8ea <_dtoa_r+0x69a>
 800c8ca:	9904      	ldr	r1, [sp, #16]
 800c8cc:	4620      	mov	r0, r4
 800c8ce:	f000 fdf9 	bl	800d4c4 <_Bfree>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c8d6:	702b      	strb	r3, [r5, #0]
 800c8d8:	f10a 0301 	add.w	r3, sl, #1
 800c8dc:	6013      	str	r3, [r2, #0]
 800c8de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f000 8241 	beq.w	800cd68 <_dtoa_r+0xb18>
 800c8e6:	601d      	str	r5, [r3, #0]
 800c8e8:	e23e      	b.n	800cd68 <_dtoa_r+0xb18>
 800c8ea:	f8cd a020 	str.w	sl, [sp, #32]
 800c8ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c8f2:	2a39      	cmp	r2, #57	; 0x39
 800c8f4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800c8f8:	d108      	bne.n	800c90c <_dtoa_r+0x6bc>
 800c8fa:	459b      	cmp	fp, r3
 800c8fc:	d10a      	bne.n	800c914 <_dtoa_r+0x6c4>
 800c8fe:	9b08      	ldr	r3, [sp, #32]
 800c900:	3301      	adds	r3, #1
 800c902:	9308      	str	r3, [sp, #32]
 800c904:	2330      	movs	r3, #48	; 0x30
 800c906:	f88b 3000 	strb.w	r3, [fp]
 800c90a:	465b      	mov	r3, fp
 800c90c:	781a      	ldrb	r2, [r3, #0]
 800c90e:	3201      	adds	r2, #1
 800c910:	701a      	strb	r2, [r3, #0]
 800c912:	e78c      	b.n	800c82e <_dtoa_r+0x5de>
 800c914:	461d      	mov	r5, r3
 800c916:	e7ea      	b.n	800c8ee <_dtoa_r+0x69e>
 800c918:	2200      	movs	r2, #0
 800c91a:	4b9b      	ldr	r3, [pc, #620]	; (800cb88 <_dtoa_r+0x938>)
 800c91c:	f7f3 fe7c 	bl	8000618 <__aeabi_dmul>
 800c920:	2200      	movs	r2, #0
 800c922:	2300      	movs	r3, #0
 800c924:	4606      	mov	r6, r0
 800c926:	460f      	mov	r7, r1
 800c928:	f7f4 f8de 	bl	8000ae8 <__aeabi_dcmpeq>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d09a      	beq.n	800c866 <_dtoa_r+0x616>
 800c930:	e7cb      	b.n	800c8ca <_dtoa_r+0x67a>
 800c932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c934:	2a00      	cmp	r2, #0
 800c936:	f000 808b 	beq.w	800ca50 <_dtoa_r+0x800>
 800c93a:	9a06      	ldr	r2, [sp, #24]
 800c93c:	2a01      	cmp	r2, #1
 800c93e:	dc6e      	bgt.n	800ca1e <_dtoa_r+0x7ce>
 800c940:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c942:	2a00      	cmp	r2, #0
 800c944:	d067      	beq.n	800ca16 <_dtoa_r+0x7c6>
 800c946:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c94a:	9f07      	ldr	r7, [sp, #28]
 800c94c:	9d05      	ldr	r5, [sp, #20]
 800c94e:	9a05      	ldr	r2, [sp, #20]
 800c950:	2101      	movs	r1, #1
 800c952:	441a      	add	r2, r3
 800c954:	4620      	mov	r0, r4
 800c956:	9205      	str	r2, [sp, #20]
 800c958:	4498      	add	r8, r3
 800c95a:	f000 fe91 	bl	800d680 <__i2b>
 800c95e:	4606      	mov	r6, r0
 800c960:	2d00      	cmp	r5, #0
 800c962:	dd0c      	ble.n	800c97e <_dtoa_r+0x72e>
 800c964:	f1b8 0f00 	cmp.w	r8, #0
 800c968:	dd09      	ble.n	800c97e <_dtoa_r+0x72e>
 800c96a:	4545      	cmp	r5, r8
 800c96c:	9a05      	ldr	r2, [sp, #20]
 800c96e:	462b      	mov	r3, r5
 800c970:	bfa8      	it	ge
 800c972:	4643      	movge	r3, r8
 800c974:	1ad2      	subs	r2, r2, r3
 800c976:	9205      	str	r2, [sp, #20]
 800c978:	1aed      	subs	r5, r5, r3
 800c97a:	eba8 0803 	sub.w	r8, r8, r3
 800c97e:	9b07      	ldr	r3, [sp, #28]
 800c980:	b1eb      	cbz	r3, 800c9be <_dtoa_r+0x76e>
 800c982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c984:	2b00      	cmp	r3, #0
 800c986:	d067      	beq.n	800ca58 <_dtoa_r+0x808>
 800c988:	b18f      	cbz	r7, 800c9ae <_dtoa_r+0x75e>
 800c98a:	4631      	mov	r1, r6
 800c98c:	463a      	mov	r2, r7
 800c98e:	4620      	mov	r0, r4
 800c990:	f000 ff16 	bl	800d7c0 <__pow5mult>
 800c994:	9a04      	ldr	r2, [sp, #16]
 800c996:	4601      	mov	r1, r0
 800c998:	4606      	mov	r6, r0
 800c99a:	4620      	mov	r0, r4
 800c99c:	f000 fe79 	bl	800d692 <__multiply>
 800c9a0:	9904      	ldr	r1, [sp, #16]
 800c9a2:	9008      	str	r0, [sp, #32]
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	f000 fd8d 	bl	800d4c4 <_Bfree>
 800c9aa:	9b08      	ldr	r3, [sp, #32]
 800c9ac:	9304      	str	r3, [sp, #16]
 800c9ae:	9b07      	ldr	r3, [sp, #28]
 800c9b0:	1bda      	subs	r2, r3, r7
 800c9b2:	d004      	beq.n	800c9be <_dtoa_r+0x76e>
 800c9b4:	9904      	ldr	r1, [sp, #16]
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f000 ff02 	bl	800d7c0 <__pow5mult>
 800c9bc:	9004      	str	r0, [sp, #16]
 800c9be:	2101      	movs	r1, #1
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	f000 fe5d 	bl	800d680 <__i2b>
 800c9c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9c8:	4607      	mov	r7, r0
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f000 81d0 	beq.w	800cd70 <_dtoa_r+0xb20>
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	4601      	mov	r1, r0
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f000 fef3 	bl	800d7c0 <__pow5mult>
 800c9da:	9b06      	ldr	r3, [sp, #24]
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	4607      	mov	r7, r0
 800c9e0:	dc40      	bgt.n	800ca64 <_dtoa_r+0x814>
 800c9e2:	9b00      	ldr	r3, [sp, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d139      	bne.n	800ca5c <_dtoa_r+0x80c>
 800c9e8:	9b01      	ldr	r3, [sp, #4]
 800c9ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d136      	bne.n	800ca60 <_dtoa_r+0x810>
 800c9f2:	9b01      	ldr	r3, [sp, #4]
 800c9f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9f8:	0d1b      	lsrs	r3, r3, #20
 800c9fa:	051b      	lsls	r3, r3, #20
 800c9fc:	b12b      	cbz	r3, 800ca0a <_dtoa_r+0x7ba>
 800c9fe:	9b05      	ldr	r3, [sp, #20]
 800ca00:	3301      	adds	r3, #1
 800ca02:	9305      	str	r3, [sp, #20]
 800ca04:	f108 0801 	add.w	r8, r8, #1
 800ca08:	2301      	movs	r3, #1
 800ca0a:	9307      	str	r3, [sp, #28]
 800ca0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d12a      	bne.n	800ca68 <_dtoa_r+0x818>
 800ca12:	2001      	movs	r0, #1
 800ca14:	e030      	b.n	800ca78 <_dtoa_r+0x828>
 800ca16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ca1c:	e795      	b.n	800c94a <_dtoa_r+0x6fa>
 800ca1e:	9b07      	ldr	r3, [sp, #28]
 800ca20:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800ca24:	42bb      	cmp	r3, r7
 800ca26:	bfbf      	itttt	lt
 800ca28:	9b07      	ldrlt	r3, [sp, #28]
 800ca2a:	9707      	strlt	r7, [sp, #28]
 800ca2c:	1afa      	sublt	r2, r7, r3
 800ca2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ca30:	bfbb      	ittet	lt
 800ca32:	189b      	addlt	r3, r3, r2
 800ca34:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ca36:	1bdf      	subge	r7, r3, r7
 800ca38:	2700      	movlt	r7, #0
 800ca3a:	f1b9 0f00 	cmp.w	r9, #0
 800ca3e:	bfb5      	itete	lt
 800ca40:	9b05      	ldrlt	r3, [sp, #20]
 800ca42:	9d05      	ldrge	r5, [sp, #20]
 800ca44:	eba3 0509 	sublt.w	r5, r3, r9
 800ca48:	464b      	movge	r3, r9
 800ca4a:	bfb8      	it	lt
 800ca4c:	2300      	movlt	r3, #0
 800ca4e:	e77e      	b.n	800c94e <_dtoa_r+0x6fe>
 800ca50:	9f07      	ldr	r7, [sp, #28]
 800ca52:	9d05      	ldr	r5, [sp, #20]
 800ca54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ca56:	e783      	b.n	800c960 <_dtoa_r+0x710>
 800ca58:	9a07      	ldr	r2, [sp, #28]
 800ca5a:	e7ab      	b.n	800c9b4 <_dtoa_r+0x764>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	e7d4      	b.n	800ca0a <_dtoa_r+0x7ba>
 800ca60:	9b00      	ldr	r3, [sp, #0]
 800ca62:	e7d2      	b.n	800ca0a <_dtoa_r+0x7ba>
 800ca64:	2300      	movs	r3, #0
 800ca66:	9307      	str	r3, [sp, #28]
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800ca6e:	6918      	ldr	r0, [r3, #16]
 800ca70:	f000 fdb8 	bl	800d5e4 <__hi0bits>
 800ca74:	f1c0 0020 	rsb	r0, r0, #32
 800ca78:	4440      	add	r0, r8
 800ca7a:	f010 001f 	ands.w	r0, r0, #31
 800ca7e:	d047      	beq.n	800cb10 <_dtoa_r+0x8c0>
 800ca80:	f1c0 0320 	rsb	r3, r0, #32
 800ca84:	2b04      	cmp	r3, #4
 800ca86:	dd3b      	ble.n	800cb00 <_dtoa_r+0x8b0>
 800ca88:	9b05      	ldr	r3, [sp, #20]
 800ca8a:	f1c0 001c 	rsb	r0, r0, #28
 800ca8e:	4403      	add	r3, r0
 800ca90:	9305      	str	r3, [sp, #20]
 800ca92:	4405      	add	r5, r0
 800ca94:	4480      	add	r8, r0
 800ca96:	9b05      	ldr	r3, [sp, #20]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	dd05      	ble.n	800caa8 <_dtoa_r+0x858>
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	9904      	ldr	r1, [sp, #16]
 800caa0:	4620      	mov	r0, r4
 800caa2:	f000 fedb 	bl	800d85c <__lshift>
 800caa6:	9004      	str	r0, [sp, #16]
 800caa8:	f1b8 0f00 	cmp.w	r8, #0
 800caac:	dd05      	ble.n	800caba <_dtoa_r+0x86a>
 800caae:	4639      	mov	r1, r7
 800cab0:	4642      	mov	r2, r8
 800cab2:	4620      	mov	r0, r4
 800cab4:	f000 fed2 	bl	800d85c <__lshift>
 800cab8:	4607      	mov	r7, r0
 800caba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cabc:	b353      	cbz	r3, 800cb14 <_dtoa_r+0x8c4>
 800cabe:	4639      	mov	r1, r7
 800cac0:	9804      	ldr	r0, [sp, #16]
 800cac2:	f000 ff1f 	bl	800d904 <__mcmp>
 800cac6:	2800      	cmp	r0, #0
 800cac8:	da24      	bge.n	800cb14 <_dtoa_r+0x8c4>
 800caca:	2300      	movs	r3, #0
 800cacc:	220a      	movs	r2, #10
 800cace:	9904      	ldr	r1, [sp, #16]
 800cad0:	4620      	mov	r0, r4
 800cad2:	f000 fd0e 	bl	800d4f2 <__multadd>
 800cad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cad8:	9004      	str	r0, [sp, #16]
 800cada:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800cade:	2b00      	cmp	r3, #0
 800cae0:	f000 814d 	beq.w	800cd7e <_dtoa_r+0xb2e>
 800cae4:	2300      	movs	r3, #0
 800cae6:	4631      	mov	r1, r6
 800cae8:	220a      	movs	r2, #10
 800caea:	4620      	mov	r0, r4
 800caec:	f000 fd01 	bl	800d4f2 <__multadd>
 800caf0:	9b02      	ldr	r3, [sp, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	4606      	mov	r6, r0
 800caf6:	dc4f      	bgt.n	800cb98 <_dtoa_r+0x948>
 800caf8:	9b06      	ldr	r3, [sp, #24]
 800cafa:	2b02      	cmp	r3, #2
 800cafc:	dd4c      	ble.n	800cb98 <_dtoa_r+0x948>
 800cafe:	e011      	b.n	800cb24 <_dtoa_r+0x8d4>
 800cb00:	d0c9      	beq.n	800ca96 <_dtoa_r+0x846>
 800cb02:	9a05      	ldr	r2, [sp, #20]
 800cb04:	331c      	adds	r3, #28
 800cb06:	441a      	add	r2, r3
 800cb08:	9205      	str	r2, [sp, #20]
 800cb0a:	441d      	add	r5, r3
 800cb0c:	4498      	add	r8, r3
 800cb0e:	e7c2      	b.n	800ca96 <_dtoa_r+0x846>
 800cb10:	4603      	mov	r3, r0
 800cb12:	e7f6      	b.n	800cb02 <_dtoa_r+0x8b2>
 800cb14:	f1b9 0f00 	cmp.w	r9, #0
 800cb18:	dc38      	bgt.n	800cb8c <_dtoa_r+0x93c>
 800cb1a:	9b06      	ldr	r3, [sp, #24]
 800cb1c:	2b02      	cmp	r3, #2
 800cb1e:	dd35      	ble.n	800cb8c <_dtoa_r+0x93c>
 800cb20:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb24:	9b02      	ldr	r3, [sp, #8]
 800cb26:	b963      	cbnz	r3, 800cb42 <_dtoa_r+0x8f2>
 800cb28:	4639      	mov	r1, r7
 800cb2a:	2205      	movs	r2, #5
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	f000 fce0 	bl	800d4f2 <__multadd>
 800cb32:	4601      	mov	r1, r0
 800cb34:	4607      	mov	r7, r0
 800cb36:	9804      	ldr	r0, [sp, #16]
 800cb38:	f000 fee4 	bl	800d904 <__mcmp>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	f73f adcc 	bgt.w	800c6da <_dtoa_r+0x48a>
 800cb42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb44:	465d      	mov	r5, fp
 800cb46:	ea6f 0a03 	mvn.w	sl, r3
 800cb4a:	f04f 0900 	mov.w	r9, #0
 800cb4e:	4639      	mov	r1, r7
 800cb50:	4620      	mov	r0, r4
 800cb52:	f000 fcb7 	bl	800d4c4 <_Bfree>
 800cb56:	2e00      	cmp	r6, #0
 800cb58:	f43f aeb7 	beq.w	800c8ca <_dtoa_r+0x67a>
 800cb5c:	f1b9 0f00 	cmp.w	r9, #0
 800cb60:	d005      	beq.n	800cb6e <_dtoa_r+0x91e>
 800cb62:	45b1      	cmp	r9, r6
 800cb64:	d003      	beq.n	800cb6e <_dtoa_r+0x91e>
 800cb66:	4649      	mov	r1, r9
 800cb68:	4620      	mov	r0, r4
 800cb6a:	f000 fcab 	bl	800d4c4 <_Bfree>
 800cb6e:	4631      	mov	r1, r6
 800cb70:	4620      	mov	r0, r4
 800cb72:	f000 fca7 	bl	800d4c4 <_Bfree>
 800cb76:	e6a8      	b.n	800c8ca <_dtoa_r+0x67a>
 800cb78:	2700      	movs	r7, #0
 800cb7a:	463e      	mov	r6, r7
 800cb7c:	e7e1      	b.n	800cb42 <_dtoa_r+0x8f2>
 800cb7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cb82:	463e      	mov	r6, r7
 800cb84:	e5a9      	b.n	800c6da <_dtoa_r+0x48a>
 800cb86:	bf00      	nop
 800cb88:	40240000 	.word	0x40240000
 800cb8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb8e:	f8cd 9008 	str.w	r9, [sp, #8]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	f000 80fa 	beq.w	800cd8c <_dtoa_r+0xb3c>
 800cb98:	2d00      	cmp	r5, #0
 800cb9a:	dd05      	ble.n	800cba8 <_dtoa_r+0x958>
 800cb9c:	4631      	mov	r1, r6
 800cb9e:	462a      	mov	r2, r5
 800cba0:	4620      	mov	r0, r4
 800cba2:	f000 fe5b 	bl	800d85c <__lshift>
 800cba6:	4606      	mov	r6, r0
 800cba8:	9b07      	ldr	r3, [sp, #28]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d04c      	beq.n	800cc48 <_dtoa_r+0x9f8>
 800cbae:	6871      	ldr	r1, [r6, #4]
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f000 fc53 	bl	800d45c <_Balloc>
 800cbb6:	6932      	ldr	r2, [r6, #16]
 800cbb8:	3202      	adds	r2, #2
 800cbba:	4605      	mov	r5, r0
 800cbbc:	0092      	lsls	r2, r2, #2
 800cbbe:	f106 010c 	add.w	r1, r6, #12
 800cbc2:	300c      	adds	r0, #12
 800cbc4:	f7fd fc78 	bl	800a4b8 <memcpy>
 800cbc8:	2201      	movs	r2, #1
 800cbca:	4629      	mov	r1, r5
 800cbcc:	4620      	mov	r0, r4
 800cbce:	f000 fe45 	bl	800d85c <__lshift>
 800cbd2:	9b00      	ldr	r3, [sp, #0]
 800cbd4:	f8cd b014 	str.w	fp, [sp, #20]
 800cbd8:	f003 0301 	and.w	r3, r3, #1
 800cbdc:	46b1      	mov	r9, r6
 800cbde:	9307      	str	r3, [sp, #28]
 800cbe0:	4606      	mov	r6, r0
 800cbe2:	4639      	mov	r1, r7
 800cbe4:	9804      	ldr	r0, [sp, #16]
 800cbe6:	f7ff faa7 	bl	800c138 <quorem>
 800cbea:	4649      	mov	r1, r9
 800cbec:	4605      	mov	r5, r0
 800cbee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cbf2:	9804      	ldr	r0, [sp, #16]
 800cbf4:	f000 fe86 	bl	800d904 <__mcmp>
 800cbf8:	4632      	mov	r2, r6
 800cbfa:	9000      	str	r0, [sp, #0]
 800cbfc:	4639      	mov	r1, r7
 800cbfe:	4620      	mov	r0, r4
 800cc00:	f000 fe9a 	bl	800d938 <__mdiff>
 800cc04:	68c3      	ldr	r3, [r0, #12]
 800cc06:	4602      	mov	r2, r0
 800cc08:	bb03      	cbnz	r3, 800cc4c <_dtoa_r+0x9fc>
 800cc0a:	4601      	mov	r1, r0
 800cc0c:	9008      	str	r0, [sp, #32]
 800cc0e:	9804      	ldr	r0, [sp, #16]
 800cc10:	f000 fe78 	bl	800d904 <__mcmp>
 800cc14:	9a08      	ldr	r2, [sp, #32]
 800cc16:	4603      	mov	r3, r0
 800cc18:	4611      	mov	r1, r2
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	9308      	str	r3, [sp, #32]
 800cc1e:	f000 fc51 	bl	800d4c4 <_Bfree>
 800cc22:	9b08      	ldr	r3, [sp, #32]
 800cc24:	b9a3      	cbnz	r3, 800cc50 <_dtoa_r+0xa00>
 800cc26:	9a06      	ldr	r2, [sp, #24]
 800cc28:	b992      	cbnz	r2, 800cc50 <_dtoa_r+0xa00>
 800cc2a:	9a07      	ldr	r2, [sp, #28]
 800cc2c:	b982      	cbnz	r2, 800cc50 <_dtoa_r+0xa00>
 800cc2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cc32:	d029      	beq.n	800cc88 <_dtoa_r+0xa38>
 800cc34:	9b00      	ldr	r3, [sp, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	dd01      	ble.n	800cc3e <_dtoa_r+0x9ee>
 800cc3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cc3e:	9b05      	ldr	r3, [sp, #20]
 800cc40:	1c5d      	adds	r5, r3, #1
 800cc42:	f883 8000 	strb.w	r8, [r3]
 800cc46:	e782      	b.n	800cb4e <_dtoa_r+0x8fe>
 800cc48:	4630      	mov	r0, r6
 800cc4a:	e7c2      	b.n	800cbd2 <_dtoa_r+0x982>
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	e7e3      	b.n	800cc18 <_dtoa_r+0x9c8>
 800cc50:	9a00      	ldr	r2, [sp, #0]
 800cc52:	2a00      	cmp	r2, #0
 800cc54:	db04      	blt.n	800cc60 <_dtoa_r+0xa10>
 800cc56:	d125      	bne.n	800cca4 <_dtoa_r+0xa54>
 800cc58:	9a06      	ldr	r2, [sp, #24]
 800cc5a:	bb1a      	cbnz	r2, 800cca4 <_dtoa_r+0xa54>
 800cc5c:	9a07      	ldr	r2, [sp, #28]
 800cc5e:	bb0a      	cbnz	r2, 800cca4 <_dtoa_r+0xa54>
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	ddec      	ble.n	800cc3e <_dtoa_r+0x9ee>
 800cc64:	2201      	movs	r2, #1
 800cc66:	9904      	ldr	r1, [sp, #16]
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f000 fdf7 	bl	800d85c <__lshift>
 800cc6e:	4639      	mov	r1, r7
 800cc70:	9004      	str	r0, [sp, #16]
 800cc72:	f000 fe47 	bl	800d904 <__mcmp>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	dc03      	bgt.n	800cc82 <_dtoa_r+0xa32>
 800cc7a:	d1e0      	bne.n	800cc3e <_dtoa_r+0x9ee>
 800cc7c:	f018 0f01 	tst.w	r8, #1
 800cc80:	d0dd      	beq.n	800cc3e <_dtoa_r+0x9ee>
 800cc82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cc86:	d1d8      	bne.n	800cc3a <_dtoa_r+0x9ea>
 800cc88:	9b05      	ldr	r3, [sp, #20]
 800cc8a:	9a05      	ldr	r2, [sp, #20]
 800cc8c:	1c5d      	adds	r5, r3, #1
 800cc8e:	2339      	movs	r3, #57	; 0x39
 800cc90:	7013      	strb	r3, [r2, #0]
 800cc92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc96:	2b39      	cmp	r3, #57	; 0x39
 800cc98:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800cc9c:	d04f      	beq.n	800cd3e <_dtoa_r+0xaee>
 800cc9e:	3301      	adds	r3, #1
 800cca0:	7013      	strb	r3, [r2, #0]
 800cca2:	e754      	b.n	800cb4e <_dtoa_r+0x8fe>
 800cca4:	9a05      	ldr	r2, [sp, #20]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	f102 0501 	add.w	r5, r2, #1
 800ccac:	dd06      	ble.n	800ccbc <_dtoa_r+0xa6c>
 800ccae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ccb2:	d0e9      	beq.n	800cc88 <_dtoa_r+0xa38>
 800ccb4:	f108 0801 	add.w	r8, r8, #1
 800ccb8:	9b05      	ldr	r3, [sp, #20]
 800ccba:	e7c2      	b.n	800cc42 <_dtoa_r+0x9f2>
 800ccbc:	9a02      	ldr	r2, [sp, #8]
 800ccbe:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ccc2:	eba5 030b 	sub.w	r3, r5, fp
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d021      	beq.n	800cd0e <_dtoa_r+0xabe>
 800ccca:	2300      	movs	r3, #0
 800cccc:	220a      	movs	r2, #10
 800ccce:	9904      	ldr	r1, [sp, #16]
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f000 fc0e 	bl	800d4f2 <__multadd>
 800ccd6:	45b1      	cmp	r9, r6
 800ccd8:	9004      	str	r0, [sp, #16]
 800ccda:	f04f 0300 	mov.w	r3, #0
 800ccde:	f04f 020a 	mov.w	r2, #10
 800cce2:	4649      	mov	r1, r9
 800cce4:	4620      	mov	r0, r4
 800cce6:	d105      	bne.n	800ccf4 <_dtoa_r+0xaa4>
 800cce8:	f000 fc03 	bl	800d4f2 <__multadd>
 800ccec:	4681      	mov	r9, r0
 800ccee:	4606      	mov	r6, r0
 800ccf0:	9505      	str	r5, [sp, #20]
 800ccf2:	e776      	b.n	800cbe2 <_dtoa_r+0x992>
 800ccf4:	f000 fbfd 	bl	800d4f2 <__multadd>
 800ccf8:	4631      	mov	r1, r6
 800ccfa:	4681      	mov	r9, r0
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	220a      	movs	r2, #10
 800cd00:	4620      	mov	r0, r4
 800cd02:	f000 fbf6 	bl	800d4f2 <__multadd>
 800cd06:	4606      	mov	r6, r0
 800cd08:	e7f2      	b.n	800ccf0 <_dtoa_r+0xaa0>
 800cd0a:	f04f 0900 	mov.w	r9, #0
 800cd0e:	2201      	movs	r2, #1
 800cd10:	9904      	ldr	r1, [sp, #16]
 800cd12:	4620      	mov	r0, r4
 800cd14:	f000 fda2 	bl	800d85c <__lshift>
 800cd18:	4639      	mov	r1, r7
 800cd1a:	9004      	str	r0, [sp, #16]
 800cd1c:	f000 fdf2 	bl	800d904 <__mcmp>
 800cd20:	2800      	cmp	r0, #0
 800cd22:	dcb6      	bgt.n	800cc92 <_dtoa_r+0xa42>
 800cd24:	d102      	bne.n	800cd2c <_dtoa_r+0xadc>
 800cd26:	f018 0f01 	tst.w	r8, #1
 800cd2a:	d1b2      	bne.n	800cc92 <_dtoa_r+0xa42>
 800cd2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd30:	2b30      	cmp	r3, #48	; 0x30
 800cd32:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800cd36:	f47f af0a 	bne.w	800cb4e <_dtoa_r+0x8fe>
 800cd3a:	4615      	mov	r5, r2
 800cd3c:	e7f6      	b.n	800cd2c <_dtoa_r+0xadc>
 800cd3e:	4593      	cmp	fp, r2
 800cd40:	d105      	bne.n	800cd4e <_dtoa_r+0xafe>
 800cd42:	2331      	movs	r3, #49	; 0x31
 800cd44:	f10a 0a01 	add.w	sl, sl, #1
 800cd48:	f88b 3000 	strb.w	r3, [fp]
 800cd4c:	e6ff      	b.n	800cb4e <_dtoa_r+0x8fe>
 800cd4e:	4615      	mov	r5, r2
 800cd50:	e79f      	b.n	800cc92 <_dtoa_r+0xa42>
 800cd52:	f8df b064 	ldr.w	fp, [pc, #100]	; 800cdb8 <_dtoa_r+0xb68>
 800cd56:	e007      	b.n	800cd68 <_dtoa_r+0xb18>
 800cd58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800cdbc <_dtoa_r+0xb6c>
 800cd5e:	b11b      	cbz	r3, 800cd68 <_dtoa_r+0xb18>
 800cd60:	f10b 0308 	add.w	r3, fp, #8
 800cd64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd66:	6013      	str	r3, [r2, #0]
 800cd68:	4658      	mov	r0, fp
 800cd6a:	b017      	add	sp, #92	; 0x5c
 800cd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd70:	9b06      	ldr	r3, [sp, #24]
 800cd72:	2b01      	cmp	r3, #1
 800cd74:	f77f ae35 	ble.w	800c9e2 <_dtoa_r+0x792>
 800cd78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd7a:	9307      	str	r3, [sp, #28]
 800cd7c:	e649      	b.n	800ca12 <_dtoa_r+0x7c2>
 800cd7e:	9b02      	ldr	r3, [sp, #8]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	dc03      	bgt.n	800cd8c <_dtoa_r+0xb3c>
 800cd84:	9b06      	ldr	r3, [sp, #24]
 800cd86:	2b02      	cmp	r3, #2
 800cd88:	f73f aecc 	bgt.w	800cb24 <_dtoa_r+0x8d4>
 800cd8c:	465d      	mov	r5, fp
 800cd8e:	4639      	mov	r1, r7
 800cd90:	9804      	ldr	r0, [sp, #16]
 800cd92:	f7ff f9d1 	bl	800c138 <quorem>
 800cd96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cd9a:	f805 8b01 	strb.w	r8, [r5], #1
 800cd9e:	9a02      	ldr	r2, [sp, #8]
 800cda0:	eba5 030b 	sub.w	r3, r5, fp
 800cda4:	429a      	cmp	r2, r3
 800cda6:	ddb0      	ble.n	800cd0a <_dtoa_r+0xaba>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	220a      	movs	r2, #10
 800cdac:	9904      	ldr	r1, [sp, #16]
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f000 fb9f 	bl	800d4f2 <__multadd>
 800cdb4:	9004      	str	r0, [sp, #16]
 800cdb6:	e7ea      	b.n	800cd8e <_dtoa_r+0xb3e>
 800cdb8:	08010600 	.word	0x08010600
 800cdbc:	08010680 	.word	0x08010680

0800cdc0 <rshift>:
 800cdc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdc2:	6906      	ldr	r6, [r0, #16]
 800cdc4:	114b      	asrs	r3, r1, #5
 800cdc6:	429e      	cmp	r6, r3
 800cdc8:	f100 0414 	add.w	r4, r0, #20
 800cdcc:	dd30      	ble.n	800ce30 <rshift+0x70>
 800cdce:	f011 011f 	ands.w	r1, r1, #31
 800cdd2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800cdd6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800cdda:	d108      	bne.n	800cdee <rshift+0x2e>
 800cddc:	4621      	mov	r1, r4
 800cdde:	42b2      	cmp	r2, r6
 800cde0:	460b      	mov	r3, r1
 800cde2:	d211      	bcs.n	800ce08 <rshift+0x48>
 800cde4:	f852 3b04 	ldr.w	r3, [r2], #4
 800cde8:	f841 3b04 	str.w	r3, [r1], #4
 800cdec:	e7f7      	b.n	800cdde <rshift+0x1e>
 800cdee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800cdf2:	f1c1 0c20 	rsb	ip, r1, #32
 800cdf6:	40cd      	lsrs	r5, r1
 800cdf8:	3204      	adds	r2, #4
 800cdfa:	4623      	mov	r3, r4
 800cdfc:	42b2      	cmp	r2, r6
 800cdfe:	4617      	mov	r7, r2
 800ce00:	d30c      	bcc.n	800ce1c <rshift+0x5c>
 800ce02:	601d      	str	r5, [r3, #0]
 800ce04:	b105      	cbz	r5, 800ce08 <rshift+0x48>
 800ce06:	3304      	adds	r3, #4
 800ce08:	1b1a      	subs	r2, r3, r4
 800ce0a:	42a3      	cmp	r3, r4
 800ce0c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ce10:	bf08      	it	eq
 800ce12:	2300      	moveq	r3, #0
 800ce14:	6102      	str	r2, [r0, #16]
 800ce16:	bf08      	it	eq
 800ce18:	6143      	streq	r3, [r0, #20]
 800ce1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce1c:	683f      	ldr	r7, [r7, #0]
 800ce1e:	fa07 f70c 	lsl.w	r7, r7, ip
 800ce22:	433d      	orrs	r5, r7
 800ce24:	f843 5b04 	str.w	r5, [r3], #4
 800ce28:	f852 5b04 	ldr.w	r5, [r2], #4
 800ce2c:	40cd      	lsrs	r5, r1
 800ce2e:	e7e5      	b.n	800cdfc <rshift+0x3c>
 800ce30:	4623      	mov	r3, r4
 800ce32:	e7e9      	b.n	800ce08 <rshift+0x48>

0800ce34 <__hexdig_fun>:
 800ce34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ce38:	2b09      	cmp	r3, #9
 800ce3a:	d802      	bhi.n	800ce42 <__hexdig_fun+0xe>
 800ce3c:	3820      	subs	r0, #32
 800ce3e:	b2c0      	uxtb	r0, r0
 800ce40:	4770      	bx	lr
 800ce42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ce46:	2b05      	cmp	r3, #5
 800ce48:	d801      	bhi.n	800ce4e <__hexdig_fun+0x1a>
 800ce4a:	3847      	subs	r0, #71	; 0x47
 800ce4c:	e7f7      	b.n	800ce3e <__hexdig_fun+0xa>
 800ce4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ce52:	2b05      	cmp	r3, #5
 800ce54:	d801      	bhi.n	800ce5a <__hexdig_fun+0x26>
 800ce56:	3827      	subs	r0, #39	; 0x27
 800ce58:	e7f1      	b.n	800ce3e <__hexdig_fun+0xa>
 800ce5a:	2000      	movs	r0, #0
 800ce5c:	4770      	bx	lr

0800ce5e <__gethex>:
 800ce5e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce62:	b08b      	sub	sp, #44	; 0x2c
 800ce64:	468a      	mov	sl, r1
 800ce66:	9002      	str	r0, [sp, #8]
 800ce68:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ce6a:	9306      	str	r3, [sp, #24]
 800ce6c:	4690      	mov	r8, r2
 800ce6e:	f000 fad0 	bl	800d412 <__localeconv_l>
 800ce72:	6803      	ldr	r3, [r0, #0]
 800ce74:	9303      	str	r3, [sp, #12]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7f3 f9ba 	bl	80001f0 <strlen>
 800ce7c:	9b03      	ldr	r3, [sp, #12]
 800ce7e:	9001      	str	r0, [sp, #4]
 800ce80:	4403      	add	r3, r0
 800ce82:	f04f 0b00 	mov.w	fp, #0
 800ce86:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ce8a:	9307      	str	r3, [sp, #28]
 800ce8c:	f8da 3000 	ldr.w	r3, [sl]
 800ce90:	3302      	adds	r3, #2
 800ce92:	461f      	mov	r7, r3
 800ce94:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ce98:	2830      	cmp	r0, #48	; 0x30
 800ce9a:	d06c      	beq.n	800cf76 <__gethex+0x118>
 800ce9c:	f7ff ffca 	bl	800ce34 <__hexdig_fun>
 800cea0:	4604      	mov	r4, r0
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d16a      	bne.n	800cf7c <__gethex+0x11e>
 800cea6:	9a01      	ldr	r2, [sp, #4]
 800cea8:	9903      	ldr	r1, [sp, #12]
 800ceaa:	4638      	mov	r0, r7
 800ceac:	f7fe fa6d 	bl	800b38a <strncmp>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	d166      	bne.n	800cf82 <__gethex+0x124>
 800ceb4:	9b01      	ldr	r3, [sp, #4]
 800ceb6:	5cf8      	ldrb	r0, [r7, r3]
 800ceb8:	18fe      	adds	r6, r7, r3
 800ceba:	f7ff ffbb 	bl	800ce34 <__hexdig_fun>
 800cebe:	2800      	cmp	r0, #0
 800cec0:	d062      	beq.n	800cf88 <__gethex+0x12a>
 800cec2:	4633      	mov	r3, r6
 800cec4:	7818      	ldrb	r0, [r3, #0]
 800cec6:	2830      	cmp	r0, #48	; 0x30
 800cec8:	461f      	mov	r7, r3
 800ceca:	f103 0301 	add.w	r3, r3, #1
 800cece:	d0f9      	beq.n	800cec4 <__gethex+0x66>
 800ced0:	f7ff ffb0 	bl	800ce34 <__hexdig_fun>
 800ced4:	fab0 f580 	clz	r5, r0
 800ced8:	096d      	lsrs	r5, r5, #5
 800ceda:	4634      	mov	r4, r6
 800cedc:	f04f 0b01 	mov.w	fp, #1
 800cee0:	463a      	mov	r2, r7
 800cee2:	4616      	mov	r6, r2
 800cee4:	3201      	adds	r2, #1
 800cee6:	7830      	ldrb	r0, [r6, #0]
 800cee8:	f7ff ffa4 	bl	800ce34 <__hexdig_fun>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d1f8      	bne.n	800cee2 <__gethex+0x84>
 800cef0:	9a01      	ldr	r2, [sp, #4]
 800cef2:	9903      	ldr	r1, [sp, #12]
 800cef4:	4630      	mov	r0, r6
 800cef6:	f7fe fa48 	bl	800b38a <strncmp>
 800cefa:	b950      	cbnz	r0, 800cf12 <__gethex+0xb4>
 800cefc:	b954      	cbnz	r4, 800cf14 <__gethex+0xb6>
 800cefe:	9b01      	ldr	r3, [sp, #4]
 800cf00:	18f4      	adds	r4, r6, r3
 800cf02:	4622      	mov	r2, r4
 800cf04:	4616      	mov	r6, r2
 800cf06:	3201      	adds	r2, #1
 800cf08:	7830      	ldrb	r0, [r6, #0]
 800cf0a:	f7ff ff93 	bl	800ce34 <__hexdig_fun>
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d1f8      	bne.n	800cf04 <__gethex+0xa6>
 800cf12:	b10c      	cbz	r4, 800cf18 <__gethex+0xba>
 800cf14:	1ba4      	subs	r4, r4, r6
 800cf16:	00a4      	lsls	r4, r4, #2
 800cf18:	7833      	ldrb	r3, [r6, #0]
 800cf1a:	2b50      	cmp	r3, #80	; 0x50
 800cf1c:	d001      	beq.n	800cf22 <__gethex+0xc4>
 800cf1e:	2b70      	cmp	r3, #112	; 0x70
 800cf20:	d140      	bne.n	800cfa4 <__gethex+0x146>
 800cf22:	7873      	ldrb	r3, [r6, #1]
 800cf24:	2b2b      	cmp	r3, #43	; 0x2b
 800cf26:	d031      	beq.n	800cf8c <__gethex+0x12e>
 800cf28:	2b2d      	cmp	r3, #45	; 0x2d
 800cf2a:	d033      	beq.n	800cf94 <__gethex+0x136>
 800cf2c:	1c71      	adds	r1, r6, #1
 800cf2e:	f04f 0900 	mov.w	r9, #0
 800cf32:	7808      	ldrb	r0, [r1, #0]
 800cf34:	f7ff ff7e 	bl	800ce34 <__hexdig_fun>
 800cf38:	1e43      	subs	r3, r0, #1
 800cf3a:	b2db      	uxtb	r3, r3
 800cf3c:	2b18      	cmp	r3, #24
 800cf3e:	d831      	bhi.n	800cfa4 <__gethex+0x146>
 800cf40:	f1a0 0210 	sub.w	r2, r0, #16
 800cf44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf48:	f7ff ff74 	bl	800ce34 <__hexdig_fun>
 800cf4c:	1e43      	subs	r3, r0, #1
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b18      	cmp	r3, #24
 800cf52:	d922      	bls.n	800cf9a <__gethex+0x13c>
 800cf54:	f1b9 0f00 	cmp.w	r9, #0
 800cf58:	d000      	beq.n	800cf5c <__gethex+0xfe>
 800cf5a:	4252      	negs	r2, r2
 800cf5c:	4414      	add	r4, r2
 800cf5e:	f8ca 1000 	str.w	r1, [sl]
 800cf62:	b30d      	cbz	r5, 800cfa8 <__gethex+0x14a>
 800cf64:	f1bb 0f00 	cmp.w	fp, #0
 800cf68:	bf0c      	ite	eq
 800cf6a:	2706      	moveq	r7, #6
 800cf6c:	2700      	movne	r7, #0
 800cf6e:	4638      	mov	r0, r7
 800cf70:	b00b      	add	sp, #44	; 0x2c
 800cf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf76:	f10b 0b01 	add.w	fp, fp, #1
 800cf7a:	e78a      	b.n	800ce92 <__gethex+0x34>
 800cf7c:	2500      	movs	r5, #0
 800cf7e:	462c      	mov	r4, r5
 800cf80:	e7ae      	b.n	800cee0 <__gethex+0x82>
 800cf82:	463e      	mov	r6, r7
 800cf84:	2501      	movs	r5, #1
 800cf86:	e7c7      	b.n	800cf18 <__gethex+0xba>
 800cf88:	4604      	mov	r4, r0
 800cf8a:	e7fb      	b.n	800cf84 <__gethex+0x126>
 800cf8c:	f04f 0900 	mov.w	r9, #0
 800cf90:	1cb1      	adds	r1, r6, #2
 800cf92:	e7ce      	b.n	800cf32 <__gethex+0xd4>
 800cf94:	f04f 0901 	mov.w	r9, #1
 800cf98:	e7fa      	b.n	800cf90 <__gethex+0x132>
 800cf9a:	230a      	movs	r3, #10
 800cf9c:	fb03 0202 	mla	r2, r3, r2, r0
 800cfa0:	3a10      	subs	r2, #16
 800cfa2:	e7cf      	b.n	800cf44 <__gethex+0xe6>
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	e7da      	b.n	800cf5e <__gethex+0x100>
 800cfa8:	1bf3      	subs	r3, r6, r7
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	4629      	mov	r1, r5
 800cfae:	2b07      	cmp	r3, #7
 800cfb0:	dc49      	bgt.n	800d046 <__gethex+0x1e8>
 800cfb2:	9802      	ldr	r0, [sp, #8]
 800cfb4:	f000 fa52 	bl	800d45c <_Balloc>
 800cfb8:	9b01      	ldr	r3, [sp, #4]
 800cfba:	f100 0914 	add.w	r9, r0, #20
 800cfbe:	f04f 0b00 	mov.w	fp, #0
 800cfc2:	f1c3 0301 	rsb	r3, r3, #1
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	f8cd 9010 	str.w	r9, [sp, #16]
 800cfcc:	46da      	mov	sl, fp
 800cfce:	9308      	str	r3, [sp, #32]
 800cfd0:	42b7      	cmp	r7, r6
 800cfd2:	d33b      	bcc.n	800d04c <__gethex+0x1ee>
 800cfd4:	9804      	ldr	r0, [sp, #16]
 800cfd6:	f840 ab04 	str.w	sl, [r0], #4
 800cfda:	eba0 0009 	sub.w	r0, r0, r9
 800cfde:	1080      	asrs	r0, r0, #2
 800cfe0:	6128      	str	r0, [r5, #16]
 800cfe2:	0147      	lsls	r7, r0, #5
 800cfe4:	4650      	mov	r0, sl
 800cfe6:	f000 fafd 	bl	800d5e4 <__hi0bits>
 800cfea:	f8d8 6000 	ldr.w	r6, [r8]
 800cfee:	1a3f      	subs	r7, r7, r0
 800cff0:	42b7      	cmp	r7, r6
 800cff2:	dd64      	ble.n	800d0be <__gethex+0x260>
 800cff4:	1bbf      	subs	r7, r7, r6
 800cff6:	4639      	mov	r1, r7
 800cff8:	4628      	mov	r0, r5
 800cffa:	f000 fe0d 	bl	800dc18 <__any_on>
 800cffe:	4682      	mov	sl, r0
 800d000:	b178      	cbz	r0, 800d022 <__gethex+0x1c4>
 800d002:	1e7b      	subs	r3, r7, #1
 800d004:	1159      	asrs	r1, r3, #5
 800d006:	f003 021f 	and.w	r2, r3, #31
 800d00a:	f04f 0a01 	mov.w	sl, #1
 800d00e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d012:	fa0a f202 	lsl.w	r2, sl, r2
 800d016:	420a      	tst	r2, r1
 800d018:	d003      	beq.n	800d022 <__gethex+0x1c4>
 800d01a:	4553      	cmp	r3, sl
 800d01c:	dc46      	bgt.n	800d0ac <__gethex+0x24e>
 800d01e:	f04f 0a02 	mov.w	sl, #2
 800d022:	4639      	mov	r1, r7
 800d024:	4628      	mov	r0, r5
 800d026:	f7ff fecb 	bl	800cdc0 <rshift>
 800d02a:	443c      	add	r4, r7
 800d02c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d030:	42a3      	cmp	r3, r4
 800d032:	da52      	bge.n	800d0da <__gethex+0x27c>
 800d034:	4629      	mov	r1, r5
 800d036:	9802      	ldr	r0, [sp, #8]
 800d038:	f000 fa44 	bl	800d4c4 <_Bfree>
 800d03c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d03e:	2300      	movs	r3, #0
 800d040:	6013      	str	r3, [r2, #0]
 800d042:	27a3      	movs	r7, #163	; 0xa3
 800d044:	e793      	b.n	800cf6e <__gethex+0x110>
 800d046:	3101      	adds	r1, #1
 800d048:	105b      	asrs	r3, r3, #1
 800d04a:	e7b0      	b.n	800cfae <__gethex+0x150>
 800d04c:	1e73      	subs	r3, r6, #1
 800d04e:	9305      	str	r3, [sp, #20]
 800d050:	9a07      	ldr	r2, [sp, #28]
 800d052:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d056:	4293      	cmp	r3, r2
 800d058:	d018      	beq.n	800d08c <__gethex+0x22e>
 800d05a:	f1bb 0f20 	cmp.w	fp, #32
 800d05e:	d107      	bne.n	800d070 <__gethex+0x212>
 800d060:	9b04      	ldr	r3, [sp, #16]
 800d062:	f8c3 a000 	str.w	sl, [r3]
 800d066:	3304      	adds	r3, #4
 800d068:	f04f 0a00 	mov.w	sl, #0
 800d06c:	9304      	str	r3, [sp, #16]
 800d06e:	46d3      	mov	fp, sl
 800d070:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d074:	f7ff fede 	bl	800ce34 <__hexdig_fun>
 800d078:	f000 000f 	and.w	r0, r0, #15
 800d07c:	fa00 f00b 	lsl.w	r0, r0, fp
 800d080:	ea4a 0a00 	orr.w	sl, sl, r0
 800d084:	f10b 0b04 	add.w	fp, fp, #4
 800d088:	9b05      	ldr	r3, [sp, #20]
 800d08a:	e00d      	b.n	800d0a8 <__gethex+0x24a>
 800d08c:	9b05      	ldr	r3, [sp, #20]
 800d08e:	9a08      	ldr	r2, [sp, #32]
 800d090:	4413      	add	r3, r2
 800d092:	42bb      	cmp	r3, r7
 800d094:	d3e1      	bcc.n	800d05a <__gethex+0x1fc>
 800d096:	4618      	mov	r0, r3
 800d098:	9a01      	ldr	r2, [sp, #4]
 800d09a:	9903      	ldr	r1, [sp, #12]
 800d09c:	9309      	str	r3, [sp, #36]	; 0x24
 800d09e:	f7fe f974 	bl	800b38a <strncmp>
 800d0a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a4:	2800      	cmp	r0, #0
 800d0a6:	d1d8      	bne.n	800d05a <__gethex+0x1fc>
 800d0a8:	461e      	mov	r6, r3
 800d0aa:	e791      	b.n	800cfd0 <__gethex+0x172>
 800d0ac:	1eb9      	subs	r1, r7, #2
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	f000 fdb2 	bl	800dc18 <__any_on>
 800d0b4:	2800      	cmp	r0, #0
 800d0b6:	d0b2      	beq.n	800d01e <__gethex+0x1c0>
 800d0b8:	f04f 0a03 	mov.w	sl, #3
 800d0bc:	e7b1      	b.n	800d022 <__gethex+0x1c4>
 800d0be:	da09      	bge.n	800d0d4 <__gethex+0x276>
 800d0c0:	1bf7      	subs	r7, r6, r7
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	463a      	mov	r2, r7
 800d0c6:	9802      	ldr	r0, [sp, #8]
 800d0c8:	f000 fbc8 	bl	800d85c <__lshift>
 800d0cc:	1be4      	subs	r4, r4, r7
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	f100 0914 	add.w	r9, r0, #20
 800d0d4:	f04f 0a00 	mov.w	sl, #0
 800d0d8:	e7a8      	b.n	800d02c <__gethex+0x1ce>
 800d0da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d0de:	42a0      	cmp	r0, r4
 800d0e0:	dd6a      	ble.n	800d1b8 <__gethex+0x35a>
 800d0e2:	1b04      	subs	r4, r0, r4
 800d0e4:	42a6      	cmp	r6, r4
 800d0e6:	dc2e      	bgt.n	800d146 <__gethex+0x2e8>
 800d0e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d022      	beq.n	800d136 <__gethex+0x2d8>
 800d0f0:	2b03      	cmp	r3, #3
 800d0f2:	d024      	beq.n	800d13e <__gethex+0x2e0>
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d115      	bne.n	800d124 <__gethex+0x2c6>
 800d0f8:	42a6      	cmp	r6, r4
 800d0fa:	d113      	bne.n	800d124 <__gethex+0x2c6>
 800d0fc:	2e01      	cmp	r6, #1
 800d0fe:	dc0b      	bgt.n	800d118 <__gethex+0x2ba>
 800d100:	9a06      	ldr	r2, [sp, #24]
 800d102:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d106:	6013      	str	r3, [r2, #0]
 800d108:	2301      	movs	r3, #1
 800d10a:	612b      	str	r3, [r5, #16]
 800d10c:	f8c9 3000 	str.w	r3, [r9]
 800d110:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d112:	2762      	movs	r7, #98	; 0x62
 800d114:	601d      	str	r5, [r3, #0]
 800d116:	e72a      	b.n	800cf6e <__gethex+0x110>
 800d118:	1e71      	subs	r1, r6, #1
 800d11a:	4628      	mov	r0, r5
 800d11c:	f000 fd7c 	bl	800dc18 <__any_on>
 800d120:	2800      	cmp	r0, #0
 800d122:	d1ed      	bne.n	800d100 <__gethex+0x2a2>
 800d124:	4629      	mov	r1, r5
 800d126:	9802      	ldr	r0, [sp, #8]
 800d128:	f000 f9cc 	bl	800d4c4 <_Bfree>
 800d12c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d12e:	2300      	movs	r3, #0
 800d130:	6013      	str	r3, [r2, #0]
 800d132:	2750      	movs	r7, #80	; 0x50
 800d134:	e71b      	b.n	800cf6e <__gethex+0x110>
 800d136:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d0e1      	beq.n	800d100 <__gethex+0x2a2>
 800d13c:	e7f2      	b.n	800d124 <__gethex+0x2c6>
 800d13e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d140:	2b00      	cmp	r3, #0
 800d142:	d1dd      	bne.n	800d100 <__gethex+0x2a2>
 800d144:	e7ee      	b.n	800d124 <__gethex+0x2c6>
 800d146:	1e67      	subs	r7, r4, #1
 800d148:	f1ba 0f00 	cmp.w	sl, #0
 800d14c:	d131      	bne.n	800d1b2 <__gethex+0x354>
 800d14e:	b127      	cbz	r7, 800d15a <__gethex+0x2fc>
 800d150:	4639      	mov	r1, r7
 800d152:	4628      	mov	r0, r5
 800d154:	f000 fd60 	bl	800dc18 <__any_on>
 800d158:	4682      	mov	sl, r0
 800d15a:	117a      	asrs	r2, r7, #5
 800d15c:	2301      	movs	r3, #1
 800d15e:	f007 071f 	and.w	r7, r7, #31
 800d162:	fa03 f707 	lsl.w	r7, r3, r7
 800d166:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800d16a:	4621      	mov	r1, r4
 800d16c:	421f      	tst	r7, r3
 800d16e:	4628      	mov	r0, r5
 800d170:	bf18      	it	ne
 800d172:	f04a 0a02 	orrne.w	sl, sl, #2
 800d176:	1b36      	subs	r6, r6, r4
 800d178:	f7ff fe22 	bl	800cdc0 <rshift>
 800d17c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800d180:	2702      	movs	r7, #2
 800d182:	f1ba 0f00 	cmp.w	sl, #0
 800d186:	d048      	beq.n	800d21a <__gethex+0x3bc>
 800d188:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d18c:	2b02      	cmp	r3, #2
 800d18e:	d015      	beq.n	800d1bc <__gethex+0x35e>
 800d190:	2b03      	cmp	r3, #3
 800d192:	d017      	beq.n	800d1c4 <__gethex+0x366>
 800d194:	2b01      	cmp	r3, #1
 800d196:	d109      	bne.n	800d1ac <__gethex+0x34e>
 800d198:	f01a 0f02 	tst.w	sl, #2
 800d19c:	d006      	beq.n	800d1ac <__gethex+0x34e>
 800d19e:	f8d9 3000 	ldr.w	r3, [r9]
 800d1a2:	ea4a 0a03 	orr.w	sl, sl, r3
 800d1a6:	f01a 0f01 	tst.w	sl, #1
 800d1aa:	d10e      	bne.n	800d1ca <__gethex+0x36c>
 800d1ac:	f047 0710 	orr.w	r7, r7, #16
 800d1b0:	e033      	b.n	800d21a <__gethex+0x3bc>
 800d1b2:	f04f 0a01 	mov.w	sl, #1
 800d1b6:	e7d0      	b.n	800d15a <__gethex+0x2fc>
 800d1b8:	2701      	movs	r7, #1
 800d1ba:	e7e2      	b.n	800d182 <__gethex+0x324>
 800d1bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1be:	f1c3 0301 	rsb	r3, r3, #1
 800d1c2:	9315      	str	r3, [sp, #84]	; 0x54
 800d1c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d0f0      	beq.n	800d1ac <__gethex+0x34e>
 800d1ca:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d1ce:	f105 0314 	add.w	r3, r5, #20
 800d1d2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800d1d6:	eb03 010a 	add.w	r1, r3, sl
 800d1da:	f04f 0c00 	mov.w	ip, #0
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1e4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800d1e8:	d01c      	beq.n	800d224 <__gethex+0x3c6>
 800d1ea:	3201      	adds	r2, #1
 800d1ec:	6002      	str	r2, [r0, #0]
 800d1ee:	2f02      	cmp	r7, #2
 800d1f0:	f105 0314 	add.w	r3, r5, #20
 800d1f4:	d138      	bne.n	800d268 <__gethex+0x40a>
 800d1f6:	f8d8 2000 	ldr.w	r2, [r8]
 800d1fa:	3a01      	subs	r2, #1
 800d1fc:	42b2      	cmp	r2, r6
 800d1fe:	d10a      	bne.n	800d216 <__gethex+0x3b8>
 800d200:	1171      	asrs	r1, r6, #5
 800d202:	2201      	movs	r2, #1
 800d204:	f006 061f 	and.w	r6, r6, #31
 800d208:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d20c:	fa02 f606 	lsl.w	r6, r2, r6
 800d210:	421e      	tst	r6, r3
 800d212:	bf18      	it	ne
 800d214:	4617      	movne	r7, r2
 800d216:	f047 0720 	orr.w	r7, r7, #32
 800d21a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d21c:	601d      	str	r5, [r3, #0]
 800d21e:	9b06      	ldr	r3, [sp, #24]
 800d220:	601c      	str	r4, [r3, #0]
 800d222:	e6a4      	b.n	800cf6e <__gethex+0x110>
 800d224:	4299      	cmp	r1, r3
 800d226:	f843 cc04 	str.w	ip, [r3, #-4]
 800d22a:	d8d8      	bhi.n	800d1de <__gethex+0x380>
 800d22c:	68ab      	ldr	r3, [r5, #8]
 800d22e:	4599      	cmp	r9, r3
 800d230:	db12      	blt.n	800d258 <__gethex+0x3fa>
 800d232:	6869      	ldr	r1, [r5, #4]
 800d234:	9802      	ldr	r0, [sp, #8]
 800d236:	3101      	adds	r1, #1
 800d238:	f000 f910 	bl	800d45c <_Balloc>
 800d23c:	692a      	ldr	r2, [r5, #16]
 800d23e:	3202      	adds	r2, #2
 800d240:	f105 010c 	add.w	r1, r5, #12
 800d244:	4683      	mov	fp, r0
 800d246:	0092      	lsls	r2, r2, #2
 800d248:	300c      	adds	r0, #12
 800d24a:	f7fd f935 	bl	800a4b8 <memcpy>
 800d24e:	4629      	mov	r1, r5
 800d250:	9802      	ldr	r0, [sp, #8]
 800d252:	f000 f937 	bl	800d4c4 <_Bfree>
 800d256:	465d      	mov	r5, fp
 800d258:	692b      	ldr	r3, [r5, #16]
 800d25a:	1c5a      	adds	r2, r3, #1
 800d25c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800d260:	612a      	str	r2, [r5, #16]
 800d262:	2201      	movs	r2, #1
 800d264:	615a      	str	r2, [r3, #20]
 800d266:	e7c2      	b.n	800d1ee <__gethex+0x390>
 800d268:	692a      	ldr	r2, [r5, #16]
 800d26a:	454a      	cmp	r2, r9
 800d26c:	dd0b      	ble.n	800d286 <__gethex+0x428>
 800d26e:	2101      	movs	r1, #1
 800d270:	4628      	mov	r0, r5
 800d272:	f7ff fda5 	bl	800cdc0 <rshift>
 800d276:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d27a:	3401      	adds	r4, #1
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	f6ff aed9 	blt.w	800d034 <__gethex+0x1d6>
 800d282:	2701      	movs	r7, #1
 800d284:	e7c7      	b.n	800d216 <__gethex+0x3b8>
 800d286:	f016 061f 	ands.w	r6, r6, #31
 800d28a:	d0fa      	beq.n	800d282 <__gethex+0x424>
 800d28c:	449a      	add	sl, r3
 800d28e:	f1c6 0620 	rsb	r6, r6, #32
 800d292:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800d296:	f000 f9a5 	bl	800d5e4 <__hi0bits>
 800d29a:	42b0      	cmp	r0, r6
 800d29c:	dbe7      	blt.n	800d26e <__gethex+0x410>
 800d29e:	e7f0      	b.n	800d282 <__gethex+0x424>

0800d2a0 <L_shift>:
 800d2a0:	f1c2 0208 	rsb	r2, r2, #8
 800d2a4:	0092      	lsls	r2, r2, #2
 800d2a6:	b570      	push	{r4, r5, r6, lr}
 800d2a8:	f1c2 0620 	rsb	r6, r2, #32
 800d2ac:	6843      	ldr	r3, [r0, #4]
 800d2ae:	6804      	ldr	r4, [r0, #0]
 800d2b0:	fa03 f506 	lsl.w	r5, r3, r6
 800d2b4:	432c      	orrs	r4, r5
 800d2b6:	40d3      	lsrs	r3, r2
 800d2b8:	6004      	str	r4, [r0, #0]
 800d2ba:	f840 3f04 	str.w	r3, [r0, #4]!
 800d2be:	4288      	cmp	r0, r1
 800d2c0:	d3f4      	bcc.n	800d2ac <L_shift+0xc>
 800d2c2:	bd70      	pop	{r4, r5, r6, pc}

0800d2c4 <__match>:
 800d2c4:	b530      	push	{r4, r5, lr}
 800d2c6:	6803      	ldr	r3, [r0, #0]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2ce:	b914      	cbnz	r4, 800d2d6 <__match+0x12>
 800d2d0:	6003      	str	r3, [r0, #0]
 800d2d2:	2001      	movs	r0, #1
 800d2d4:	bd30      	pop	{r4, r5, pc}
 800d2d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d2de:	2d19      	cmp	r5, #25
 800d2e0:	bf98      	it	ls
 800d2e2:	3220      	addls	r2, #32
 800d2e4:	42a2      	cmp	r2, r4
 800d2e6:	d0f0      	beq.n	800d2ca <__match+0x6>
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	e7f3      	b.n	800d2d4 <__match+0x10>

0800d2ec <__hexnan>:
 800d2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2f0:	680b      	ldr	r3, [r1, #0]
 800d2f2:	6801      	ldr	r1, [r0, #0]
 800d2f4:	115f      	asrs	r7, r3, #5
 800d2f6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800d2fa:	f013 031f 	ands.w	r3, r3, #31
 800d2fe:	b087      	sub	sp, #28
 800d300:	bf18      	it	ne
 800d302:	3704      	addne	r7, #4
 800d304:	2500      	movs	r5, #0
 800d306:	1f3e      	subs	r6, r7, #4
 800d308:	4682      	mov	sl, r0
 800d30a:	4690      	mov	r8, r2
 800d30c:	9301      	str	r3, [sp, #4]
 800d30e:	f847 5c04 	str.w	r5, [r7, #-4]
 800d312:	46b1      	mov	r9, r6
 800d314:	4634      	mov	r4, r6
 800d316:	9502      	str	r5, [sp, #8]
 800d318:	46ab      	mov	fp, r5
 800d31a:	784a      	ldrb	r2, [r1, #1]
 800d31c:	1c4b      	adds	r3, r1, #1
 800d31e:	9303      	str	r3, [sp, #12]
 800d320:	b342      	cbz	r2, 800d374 <__hexnan+0x88>
 800d322:	4610      	mov	r0, r2
 800d324:	9105      	str	r1, [sp, #20]
 800d326:	9204      	str	r2, [sp, #16]
 800d328:	f7ff fd84 	bl	800ce34 <__hexdig_fun>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	d143      	bne.n	800d3b8 <__hexnan+0xcc>
 800d330:	9a04      	ldr	r2, [sp, #16]
 800d332:	9905      	ldr	r1, [sp, #20]
 800d334:	2a20      	cmp	r2, #32
 800d336:	d818      	bhi.n	800d36a <__hexnan+0x7e>
 800d338:	9b02      	ldr	r3, [sp, #8]
 800d33a:	459b      	cmp	fp, r3
 800d33c:	dd13      	ble.n	800d366 <__hexnan+0x7a>
 800d33e:	454c      	cmp	r4, r9
 800d340:	d206      	bcs.n	800d350 <__hexnan+0x64>
 800d342:	2d07      	cmp	r5, #7
 800d344:	dc04      	bgt.n	800d350 <__hexnan+0x64>
 800d346:	462a      	mov	r2, r5
 800d348:	4649      	mov	r1, r9
 800d34a:	4620      	mov	r0, r4
 800d34c:	f7ff ffa8 	bl	800d2a0 <L_shift>
 800d350:	4544      	cmp	r4, r8
 800d352:	d944      	bls.n	800d3de <__hexnan+0xf2>
 800d354:	2300      	movs	r3, #0
 800d356:	f1a4 0904 	sub.w	r9, r4, #4
 800d35a:	f844 3c04 	str.w	r3, [r4, #-4]
 800d35e:	f8cd b008 	str.w	fp, [sp, #8]
 800d362:	464c      	mov	r4, r9
 800d364:	461d      	mov	r5, r3
 800d366:	9903      	ldr	r1, [sp, #12]
 800d368:	e7d7      	b.n	800d31a <__hexnan+0x2e>
 800d36a:	2a29      	cmp	r2, #41	; 0x29
 800d36c:	d14a      	bne.n	800d404 <__hexnan+0x118>
 800d36e:	3102      	adds	r1, #2
 800d370:	f8ca 1000 	str.w	r1, [sl]
 800d374:	f1bb 0f00 	cmp.w	fp, #0
 800d378:	d044      	beq.n	800d404 <__hexnan+0x118>
 800d37a:	454c      	cmp	r4, r9
 800d37c:	d206      	bcs.n	800d38c <__hexnan+0xa0>
 800d37e:	2d07      	cmp	r5, #7
 800d380:	dc04      	bgt.n	800d38c <__hexnan+0xa0>
 800d382:	462a      	mov	r2, r5
 800d384:	4649      	mov	r1, r9
 800d386:	4620      	mov	r0, r4
 800d388:	f7ff ff8a 	bl	800d2a0 <L_shift>
 800d38c:	4544      	cmp	r4, r8
 800d38e:	d928      	bls.n	800d3e2 <__hexnan+0xf6>
 800d390:	4643      	mov	r3, r8
 800d392:	f854 2b04 	ldr.w	r2, [r4], #4
 800d396:	f843 2b04 	str.w	r2, [r3], #4
 800d39a:	42a6      	cmp	r6, r4
 800d39c:	d2f9      	bcs.n	800d392 <__hexnan+0xa6>
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f843 2b04 	str.w	r2, [r3], #4
 800d3a4:	429e      	cmp	r6, r3
 800d3a6:	d2fb      	bcs.n	800d3a0 <__hexnan+0xb4>
 800d3a8:	6833      	ldr	r3, [r6, #0]
 800d3aa:	b91b      	cbnz	r3, 800d3b4 <__hexnan+0xc8>
 800d3ac:	4546      	cmp	r6, r8
 800d3ae:	d127      	bne.n	800d400 <__hexnan+0x114>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	6033      	str	r3, [r6, #0]
 800d3b4:	2005      	movs	r0, #5
 800d3b6:	e026      	b.n	800d406 <__hexnan+0x11a>
 800d3b8:	3501      	adds	r5, #1
 800d3ba:	2d08      	cmp	r5, #8
 800d3bc:	f10b 0b01 	add.w	fp, fp, #1
 800d3c0:	dd06      	ble.n	800d3d0 <__hexnan+0xe4>
 800d3c2:	4544      	cmp	r4, r8
 800d3c4:	d9cf      	bls.n	800d366 <__hexnan+0x7a>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3cc:	2501      	movs	r5, #1
 800d3ce:	3c04      	subs	r4, #4
 800d3d0:	6822      	ldr	r2, [r4, #0]
 800d3d2:	f000 000f 	and.w	r0, r0, #15
 800d3d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d3da:	6020      	str	r0, [r4, #0]
 800d3dc:	e7c3      	b.n	800d366 <__hexnan+0x7a>
 800d3de:	2508      	movs	r5, #8
 800d3e0:	e7c1      	b.n	800d366 <__hexnan+0x7a>
 800d3e2:	9b01      	ldr	r3, [sp, #4]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d0df      	beq.n	800d3a8 <__hexnan+0xbc>
 800d3e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3ec:	f1c3 0320 	rsb	r3, r3, #32
 800d3f0:	fa22 f303 	lsr.w	r3, r2, r3
 800d3f4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800d3f8:	401a      	ands	r2, r3
 800d3fa:	f847 2c04 	str.w	r2, [r7, #-4]
 800d3fe:	e7d3      	b.n	800d3a8 <__hexnan+0xbc>
 800d400:	3e04      	subs	r6, #4
 800d402:	e7d1      	b.n	800d3a8 <__hexnan+0xbc>
 800d404:	2004      	movs	r0, #4
 800d406:	b007      	add	sp, #28
 800d408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d40c <__locale_ctype_ptr_l>:
 800d40c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800d410:	4770      	bx	lr

0800d412 <__localeconv_l>:
 800d412:	30f0      	adds	r0, #240	; 0xf0
 800d414:	4770      	bx	lr
	...

0800d418 <_localeconv_r>:
 800d418:	4b04      	ldr	r3, [pc, #16]	; (800d42c <_localeconv_r+0x14>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	6a18      	ldr	r0, [r3, #32]
 800d41e:	4b04      	ldr	r3, [pc, #16]	; (800d430 <_localeconv_r+0x18>)
 800d420:	2800      	cmp	r0, #0
 800d422:	bf08      	it	eq
 800d424:	4618      	moveq	r0, r3
 800d426:	30f0      	adds	r0, #240	; 0xf0
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	20001260 	.word	0x20001260
 800d430:	200012c4 	.word	0x200012c4

0800d434 <__ascii_mbtowc>:
 800d434:	b082      	sub	sp, #8
 800d436:	b901      	cbnz	r1, 800d43a <__ascii_mbtowc+0x6>
 800d438:	a901      	add	r1, sp, #4
 800d43a:	b142      	cbz	r2, 800d44e <__ascii_mbtowc+0x1a>
 800d43c:	b14b      	cbz	r3, 800d452 <__ascii_mbtowc+0x1e>
 800d43e:	7813      	ldrb	r3, [r2, #0]
 800d440:	600b      	str	r3, [r1, #0]
 800d442:	7812      	ldrb	r2, [r2, #0]
 800d444:	1c10      	adds	r0, r2, #0
 800d446:	bf18      	it	ne
 800d448:	2001      	movne	r0, #1
 800d44a:	b002      	add	sp, #8
 800d44c:	4770      	bx	lr
 800d44e:	4610      	mov	r0, r2
 800d450:	e7fb      	b.n	800d44a <__ascii_mbtowc+0x16>
 800d452:	f06f 0001 	mvn.w	r0, #1
 800d456:	e7f8      	b.n	800d44a <__ascii_mbtowc+0x16>

0800d458 <__malloc_lock>:
 800d458:	4770      	bx	lr

0800d45a <__malloc_unlock>:
 800d45a:	4770      	bx	lr

0800d45c <_Balloc>:
 800d45c:	b570      	push	{r4, r5, r6, lr}
 800d45e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d460:	4604      	mov	r4, r0
 800d462:	460e      	mov	r6, r1
 800d464:	b93d      	cbnz	r5, 800d476 <_Balloc+0x1a>
 800d466:	2010      	movs	r0, #16
 800d468:	f7fd f81e 	bl	800a4a8 <malloc>
 800d46c:	6260      	str	r0, [r4, #36]	; 0x24
 800d46e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d472:	6005      	str	r5, [r0, #0]
 800d474:	60c5      	str	r5, [r0, #12]
 800d476:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800d478:	68eb      	ldr	r3, [r5, #12]
 800d47a:	b183      	cbz	r3, 800d49e <_Balloc+0x42>
 800d47c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d484:	b9b8      	cbnz	r0, 800d4b6 <_Balloc+0x5a>
 800d486:	2101      	movs	r1, #1
 800d488:	fa01 f506 	lsl.w	r5, r1, r6
 800d48c:	1d6a      	adds	r2, r5, #5
 800d48e:	0092      	lsls	r2, r2, #2
 800d490:	4620      	mov	r0, r4
 800d492:	f000 fbe2 	bl	800dc5a <_calloc_r>
 800d496:	b160      	cbz	r0, 800d4b2 <_Balloc+0x56>
 800d498:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800d49c:	e00e      	b.n	800d4bc <_Balloc+0x60>
 800d49e:	2221      	movs	r2, #33	; 0x21
 800d4a0:	2104      	movs	r1, #4
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f000 fbd9 	bl	800dc5a <_calloc_r>
 800d4a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4aa:	60e8      	str	r0, [r5, #12]
 800d4ac:	68db      	ldr	r3, [r3, #12]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d1e4      	bne.n	800d47c <_Balloc+0x20>
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	bd70      	pop	{r4, r5, r6, pc}
 800d4b6:	6802      	ldr	r2, [r0, #0]
 800d4b8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800d4bc:	2300      	movs	r3, #0
 800d4be:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4c2:	e7f7      	b.n	800d4b4 <_Balloc+0x58>

0800d4c4 <_Bfree>:
 800d4c4:	b570      	push	{r4, r5, r6, lr}
 800d4c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800d4c8:	4606      	mov	r6, r0
 800d4ca:	460d      	mov	r5, r1
 800d4cc:	b93c      	cbnz	r4, 800d4de <_Bfree+0x1a>
 800d4ce:	2010      	movs	r0, #16
 800d4d0:	f7fc ffea 	bl	800a4a8 <malloc>
 800d4d4:	6270      	str	r0, [r6, #36]	; 0x24
 800d4d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4da:	6004      	str	r4, [r0, #0]
 800d4dc:	60c4      	str	r4, [r0, #12]
 800d4de:	b13d      	cbz	r5, 800d4f0 <_Bfree+0x2c>
 800d4e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d4e2:	686a      	ldr	r2, [r5, #4]
 800d4e4:	68db      	ldr	r3, [r3, #12]
 800d4e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d4ea:	6029      	str	r1, [r5, #0]
 800d4ec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d4f0:	bd70      	pop	{r4, r5, r6, pc}

0800d4f2 <__multadd>:
 800d4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4f6:	690d      	ldr	r5, [r1, #16]
 800d4f8:	461f      	mov	r7, r3
 800d4fa:	4606      	mov	r6, r0
 800d4fc:	460c      	mov	r4, r1
 800d4fe:	f101 0c14 	add.w	ip, r1, #20
 800d502:	2300      	movs	r3, #0
 800d504:	f8dc 0000 	ldr.w	r0, [ip]
 800d508:	b281      	uxth	r1, r0
 800d50a:	fb02 7101 	mla	r1, r2, r1, r7
 800d50e:	0c0f      	lsrs	r7, r1, #16
 800d510:	0c00      	lsrs	r0, r0, #16
 800d512:	fb02 7000 	mla	r0, r2, r0, r7
 800d516:	b289      	uxth	r1, r1
 800d518:	3301      	adds	r3, #1
 800d51a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d51e:	429d      	cmp	r5, r3
 800d520:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d524:	f84c 1b04 	str.w	r1, [ip], #4
 800d528:	dcec      	bgt.n	800d504 <__multadd+0x12>
 800d52a:	b1d7      	cbz	r7, 800d562 <__multadd+0x70>
 800d52c:	68a3      	ldr	r3, [r4, #8]
 800d52e:	42ab      	cmp	r3, r5
 800d530:	dc12      	bgt.n	800d558 <__multadd+0x66>
 800d532:	6861      	ldr	r1, [r4, #4]
 800d534:	4630      	mov	r0, r6
 800d536:	3101      	adds	r1, #1
 800d538:	f7ff ff90 	bl	800d45c <_Balloc>
 800d53c:	6922      	ldr	r2, [r4, #16]
 800d53e:	3202      	adds	r2, #2
 800d540:	f104 010c 	add.w	r1, r4, #12
 800d544:	4680      	mov	r8, r0
 800d546:	0092      	lsls	r2, r2, #2
 800d548:	300c      	adds	r0, #12
 800d54a:	f7fc ffb5 	bl	800a4b8 <memcpy>
 800d54e:	4621      	mov	r1, r4
 800d550:	4630      	mov	r0, r6
 800d552:	f7ff ffb7 	bl	800d4c4 <_Bfree>
 800d556:	4644      	mov	r4, r8
 800d558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d55c:	3501      	adds	r5, #1
 800d55e:	615f      	str	r7, [r3, #20]
 800d560:	6125      	str	r5, [r4, #16]
 800d562:	4620      	mov	r0, r4
 800d564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d568 <__s2b>:
 800d568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d56c:	460c      	mov	r4, r1
 800d56e:	4615      	mov	r5, r2
 800d570:	461f      	mov	r7, r3
 800d572:	2209      	movs	r2, #9
 800d574:	3308      	adds	r3, #8
 800d576:	4606      	mov	r6, r0
 800d578:	fb93 f3f2 	sdiv	r3, r3, r2
 800d57c:	2100      	movs	r1, #0
 800d57e:	2201      	movs	r2, #1
 800d580:	429a      	cmp	r2, r3
 800d582:	db20      	blt.n	800d5c6 <__s2b+0x5e>
 800d584:	4630      	mov	r0, r6
 800d586:	f7ff ff69 	bl	800d45c <_Balloc>
 800d58a:	9b08      	ldr	r3, [sp, #32]
 800d58c:	6143      	str	r3, [r0, #20]
 800d58e:	2d09      	cmp	r5, #9
 800d590:	f04f 0301 	mov.w	r3, #1
 800d594:	6103      	str	r3, [r0, #16]
 800d596:	dd19      	ble.n	800d5cc <__s2b+0x64>
 800d598:	f104 0809 	add.w	r8, r4, #9
 800d59c:	46c1      	mov	r9, r8
 800d59e:	442c      	add	r4, r5
 800d5a0:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d5a4:	4601      	mov	r1, r0
 800d5a6:	3b30      	subs	r3, #48	; 0x30
 800d5a8:	220a      	movs	r2, #10
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f7ff ffa1 	bl	800d4f2 <__multadd>
 800d5b0:	45a1      	cmp	r9, r4
 800d5b2:	d1f5      	bne.n	800d5a0 <__s2b+0x38>
 800d5b4:	eb08 0405 	add.w	r4, r8, r5
 800d5b8:	3c08      	subs	r4, #8
 800d5ba:	1b2d      	subs	r5, r5, r4
 800d5bc:	1963      	adds	r3, r4, r5
 800d5be:	42bb      	cmp	r3, r7
 800d5c0:	db07      	blt.n	800d5d2 <__s2b+0x6a>
 800d5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5c6:	0052      	lsls	r2, r2, #1
 800d5c8:	3101      	adds	r1, #1
 800d5ca:	e7d9      	b.n	800d580 <__s2b+0x18>
 800d5cc:	340a      	adds	r4, #10
 800d5ce:	2509      	movs	r5, #9
 800d5d0:	e7f3      	b.n	800d5ba <__s2b+0x52>
 800d5d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d5d6:	4601      	mov	r1, r0
 800d5d8:	3b30      	subs	r3, #48	; 0x30
 800d5da:	220a      	movs	r2, #10
 800d5dc:	4630      	mov	r0, r6
 800d5de:	f7ff ff88 	bl	800d4f2 <__multadd>
 800d5e2:	e7eb      	b.n	800d5bc <__s2b+0x54>

0800d5e4 <__hi0bits>:
 800d5e4:	0c02      	lsrs	r2, r0, #16
 800d5e6:	0412      	lsls	r2, r2, #16
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	b9b2      	cbnz	r2, 800d61a <__hi0bits+0x36>
 800d5ec:	0403      	lsls	r3, r0, #16
 800d5ee:	2010      	movs	r0, #16
 800d5f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d5f4:	bf04      	itt	eq
 800d5f6:	021b      	lsleq	r3, r3, #8
 800d5f8:	3008      	addeq	r0, #8
 800d5fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d5fe:	bf04      	itt	eq
 800d600:	011b      	lsleq	r3, r3, #4
 800d602:	3004      	addeq	r0, #4
 800d604:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d608:	bf04      	itt	eq
 800d60a:	009b      	lsleq	r3, r3, #2
 800d60c:	3002      	addeq	r0, #2
 800d60e:	2b00      	cmp	r3, #0
 800d610:	db06      	blt.n	800d620 <__hi0bits+0x3c>
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	d503      	bpl.n	800d61e <__hi0bits+0x3a>
 800d616:	3001      	adds	r0, #1
 800d618:	4770      	bx	lr
 800d61a:	2000      	movs	r0, #0
 800d61c:	e7e8      	b.n	800d5f0 <__hi0bits+0xc>
 800d61e:	2020      	movs	r0, #32
 800d620:	4770      	bx	lr

0800d622 <__lo0bits>:
 800d622:	6803      	ldr	r3, [r0, #0]
 800d624:	f013 0207 	ands.w	r2, r3, #7
 800d628:	4601      	mov	r1, r0
 800d62a:	d00b      	beq.n	800d644 <__lo0bits+0x22>
 800d62c:	07da      	lsls	r2, r3, #31
 800d62e:	d423      	bmi.n	800d678 <__lo0bits+0x56>
 800d630:	0798      	lsls	r0, r3, #30
 800d632:	bf49      	itett	mi
 800d634:	085b      	lsrmi	r3, r3, #1
 800d636:	089b      	lsrpl	r3, r3, #2
 800d638:	2001      	movmi	r0, #1
 800d63a:	600b      	strmi	r3, [r1, #0]
 800d63c:	bf5c      	itt	pl
 800d63e:	600b      	strpl	r3, [r1, #0]
 800d640:	2002      	movpl	r0, #2
 800d642:	4770      	bx	lr
 800d644:	b298      	uxth	r0, r3
 800d646:	b9a8      	cbnz	r0, 800d674 <__lo0bits+0x52>
 800d648:	0c1b      	lsrs	r3, r3, #16
 800d64a:	2010      	movs	r0, #16
 800d64c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d650:	bf04      	itt	eq
 800d652:	0a1b      	lsreq	r3, r3, #8
 800d654:	3008      	addeq	r0, #8
 800d656:	071a      	lsls	r2, r3, #28
 800d658:	bf04      	itt	eq
 800d65a:	091b      	lsreq	r3, r3, #4
 800d65c:	3004      	addeq	r0, #4
 800d65e:	079a      	lsls	r2, r3, #30
 800d660:	bf04      	itt	eq
 800d662:	089b      	lsreq	r3, r3, #2
 800d664:	3002      	addeq	r0, #2
 800d666:	07da      	lsls	r2, r3, #31
 800d668:	d402      	bmi.n	800d670 <__lo0bits+0x4e>
 800d66a:	085b      	lsrs	r3, r3, #1
 800d66c:	d006      	beq.n	800d67c <__lo0bits+0x5a>
 800d66e:	3001      	adds	r0, #1
 800d670:	600b      	str	r3, [r1, #0]
 800d672:	4770      	bx	lr
 800d674:	4610      	mov	r0, r2
 800d676:	e7e9      	b.n	800d64c <__lo0bits+0x2a>
 800d678:	2000      	movs	r0, #0
 800d67a:	4770      	bx	lr
 800d67c:	2020      	movs	r0, #32
 800d67e:	4770      	bx	lr

0800d680 <__i2b>:
 800d680:	b510      	push	{r4, lr}
 800d682:	460c      	mov	r4, r1
 800d684:	2101      	movs	r1, #1
 800d686:	f7ff fee9 	bl	800d45c <_Balloc>
 800d68a:	2201      	movs	r2, #1
 800d68c:	6144      	str	r4, [r0, #20]
 800d68e:	6102      	str	r2, [r0, #16]
 800d690:	bd10      	pop	{r4, pc}

0800d692 <__multiply>:
 800d692:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d696:	4614      	mov	r4, r2
 800d698:	690a      	ldr	r2, [r1, #16]
 800d69a:	6923      	ldr	r3, [r4, #16]
 800d69c:	429a      	cmp	r2, r3
 800d69e:	bfb8      	it	lt
 800d6a0:	460b      	movlt	r3, r1
 800d6a2:	4688      	mov	r8, r1
 800d6a4:	bfbc      	itt	lt
 800d6a6:	46a0      	movlt	r8, r4
 800d6a8:	461c      	movlt	r4, r3
 800d6aa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d6ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d6b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d6b6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d6ba:	eb07 0609 	add.w	r6, r7, r9
 800d6be:	42b3      	cmp	r3, r6
 800d6c0:	bfb8      	it	lt
 800d6c2:	3101      	addlt	r1, #1
 800d6c4:	f7ff feca 	bl	800d45c <_Balloc>
 800d6c8:	f100 0514 	add.w	r5, r0, #20
 800d6cc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d6d0:	462b      	mov	r3, r5
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	4573      	cmp	r3, lr
 800d6d6:	d316      	bcc.n	800d706 <__multiply+0x74>
 800d6d8:	f104 0214 	add.w	r2, r4, #20
 800d6dc:	f108 0114 	add.w	r1, r8, #20
 800d6e0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d6e4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	9b00      	ldr	r3, [sp, #0]
 800d6ec:	9201      	str	r2, [sp, #4]
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d80c      	bhi.n	800d70c <__multiply+0x7a>
 800d6f2:	2e00      	cmp	r6, #0
 800d6f4:	dd03      	ble.n	800d6fe <__multiply+0x6c>
 800d6f6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d05d      	beq.n	800d7ba <__multiply+0x128>
 800d6fe:	6106      	str	r6, [r0, #16]
 800d700:	b003      	add	sp, #12
 800d702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d706:	f843 2b04 	str.w	r2, [r3], #4
 800d70a:	e7e3      	b.n	800d6d4 <__multiply+0x42>
 800d70c:	f8b2 b000 	ldrh.w	fp, [r2]
 800d710:	f1bb 0f00 	cmp.w	fp, #0
 800d714:	d023      	beq.n	800d75e <__multiply+0xcc>
 800d716:	4689      	mov	r9, r1
 800d718:	46ac      	mov	ip, r5
 800d71a:	f04f 0800 	mov.w	r8, #0
 800d71e:	f859 4b04 	ldr.w	r4, [r9], #4
 800d722:	f8dc a000 	ldr.w	sl, [ip]
 800d726:	b2a3      	uxth	r3, r4
 800d728:	fa1f fa8a 	uxth.w	sl, sl
 800d72c:	fb0b a303 	mla	r3, fp, r3, sl
 800d730:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d734:	f8dc 4000 	ldr.w	r4, [ip]
 800d738:	4443      	add	r3, r8
 800d73a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d73e:	fb0b 840a 	mla	r4, fp, sl, r8
 800d742:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d746:	46e2      	mov	sl, ip
 800d748:	b29b      	uxth	r3, r3
 800d74a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d74e:	454f      	cmp	r7, r9
 800d750:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d754:	f84a 3b04 	str.w	r3, [sl], #4
 800d758:	d82b      	bhi.n	800d7b2 <__multiply+0x120>
 800d75a:	f8cc 8004 	str.w	r8, [ip, #4]
 800d75e:	9b01      	ldr	r3, [sp, #4]
 800d760:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d764:	3204      	adds	r2, #4
 800d766:	f1ba 0f00 	cmp.w	sl, #0
 800d76a:	d020      	beq.n	800d7ae <__multiply+0x11c>
 800d76c:	682b      	ldr	r3, [r5, #0]
 800d76e:	4689      	mov	r9, r1
 800d770:	46a8      	mov	r8, r5
 800d772:	f04f 0b00 	mov.w	fp, #0
 800d776:	f8b9 c000 	ldrh.w	ip, [r9]
 800d77a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d77e:	fb0a 440c 	mla	r4, sl, ip, r4
 800d782:	445c      	add	r4, fp
 800d784:	46c4      	mov	ip, r8
 800d786:	b29b      	uxth	r3, r3
 800d788:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d78c:	f84c 3b04 	str.w	r3, [ip], #4
 800d790:	f859 3b04 	ldr.w	r3, [r9], #4
 800d794:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d798:	0c1b      	lsrs	r3, r3, #16
 800d79a:	fb0a b303 	mla	r3, sl, r3, fp
 800d79e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d7a2:	454f      	cmp	r7, r9
 800d7a4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d7a8:	d805      	bhi.n	800d7b6 <__multiply+0x124>
 800d7aa:	f8c8 3004 	str.w	r3, [r8, #4]
 800d7ae:	3504      	adds	r5, #4
 800d7b0:	e79b      	b.n	800d6ea <__multiply+0x58>
 800d7b2:	46d4      	mov	ip, sl
 800d7b4:	e7b3      	b.n	800d71e <__multiply+0x8c>
 800d7b6:	46e0      	mov	r8, ip
 800d7b8:	e7dd      	b.n	800d776 <__multiply+0xe4>
 800d7ba:	3e01      	subs	r6, #1
 800d7bc:	e799      	b.n	800d6f2 <__multiply+0x60>
	...

0800d7c0 <__pow5mult>:
 800d7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7c4:	4615      	mov	r5, r2
 800d7c6:	f012 0203 	ands.w	r2, r2, #3
 800d7ca:	4606      	mov	r6, r0
 800d7cc:	460f      	mov	r7, r1
 800d7ce:	d007      	beq.n	800d7e0 <__pow5mult+0x20>
 800d7d0:	3a01      	subs	r2, #1
 800d7d2:	4c21      	ldr	r4, [pc, #132]	; (800d858 <__pow5mult+0x98>)
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d7da:	f7ff fe8a 	bl	800d4f2 <__multadd>
 800d7de:	4607      	mov	r7, r0
 800d7e0:	10ad      	asrs	r5, r5, #2
 800d7e2:	d035      	beq.n	800d850 <__pow5mult+0x90>
 800d7e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d7e6:	b93c      	cbnz	r4, 800d7f8 <__pow5mult+0x38>
 800d7e8:	2010      	movs	r0, #16
 800d7ea:	f7fc fe5d 	bl	800a4a8 <malloc>
 800d7ee:	6270      	str	r0, [r6, #36]	; 0x24
 800d7f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7f4:	6004      	str	r4, [r0, #0]
 800d7f6:	60c4      	str	r4, [r0, #12]
 800d7f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d7fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d800:	b94c      	cbnz	r4, 800d816 <__pow5mult+0x56>
 800d802:	f240 2171 	movw	r1, #625	; 0x271
 800d806:	4630      	mov	r0, r6
 800d808:	f7ff ff3a 	bl	800d680 <__i2b>
 800d80c:	2300      	movs	r3, #0
 800d80e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d812:	4604      	mov	r4, r0
 800d814:	6003      	str	r3, [r0, #0]
 800d816:	f04f 0800 	mov.w	r8, #0
 800d81a:	07eb      	lsls	r3, r5, #31
 800d81c:	d50a      	bpl.n	800d834 <__pow5mult+0x74>
 800d81e:	4639      	mov	r1, r7
 800d820:	4622      	mov	r2, r4
 800d822:	4630      	mov	r0, r6
 800d824:	f7ff ff35 	bl	800d692 <__multiply>
 800d828:	4639      	mov	r1, r7
 800d82a:	4681      	mov	r9, r0
 800d82c:	4630      	mov	r0, r6
 800d82e:	f7ff fe49 	bl	800d4c4 <_Bfree>
 800d832:	464f      	mov	r7, r9
 800d834:	106d      	asrs	r5, r5, #1
 800d836:	d00b      	beq.n	800d850 <__pow5mult+0x90>
 800d838:	6820      	ldr	r0, [r4, #0]
 800d83a:	b938      	cbnz	r0, 800d84c <__pow5mult+0x8c>
 800d83c:	4622      	mov	r2, r4
 800d83e:	4621      	mov	r1, r4
 800d840:	4630      	mov	r0, r6
 800d842:	f7ff ff26 	bl	800d692 <__multiply>
 800d846:	6020      	str	r0, [r4, #0]
 800d848:	f8c0 8000 	str.w	r8, [r0]
 800d84c:	4604      	mov	r4, r0
 800d84e:	e7e4      	b.n	800d81a <__pow5mult+0x5a>
 800d850:	4638      	mov	r0, r7
 800d852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d856:	bf00      	nop
 800d858:	08010788 	.word	0x08010788

0800d85c <__lshift>:
 800d85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d860:	460c      	mov	r4, r1
 800d862:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d866:	6923      	ldr	r3, [r4, #16]
 800d868:	6849      	ldr	r1, [r1, #4]
 800d86a:	eb0a 0903 	add.w	r9, sl, r3
 800d86e:	68a3      	ldr	r3, [r4, #8]
 800d870:	4607      	mov	r7, r0
 800d872:	4616      	mov	r6, r2
 800d874:	f109 0501 	add.w	r5, r9, #1
 800d878:	42ab      	cmp	r3, r5
 800d87a:	db32      	blt.n	800d8e2 <__lshift+0x86>
 800d87c:	4638      	mov	r0, r7
 800d87e:	f7ff fded 	bl	800d45c <_Balloc>
 800d882:	2300      	movs	r3, #0
 800d884:	4680      	mov	r8, r0
 800d886:	f100 0114 	add.w	r1, r0, #20
 800d88a:	461a      	mov	r2, r3
 800d88c:	4553      	cmp	r3, sl
 800d88e:	db2b      	blt.n	800d8e8 <__lshift+0x8c>
 800d890:	6920      	ldr	r0, [r4, #16]
 800d892:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d896:	f104 0314 	add.w	r3, r4, #20
 800d89a:	f016 021f 	ands.w	r2, r6, #31
 800d89e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d8a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d8a6:	d025      	beq.n	800d8f4 <__lshift+0x98>
 800d8a8:	f1c2 0e20 	rsb	lr, r2, #32
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	681e      	ldr	r6, [r3, #0]
 800d8b0:	468a      	mov	sl, r1
 800d8b2:	4096      	lsls	r6, r2
 800d8b4:	4330      	orrs	r0, r6
 800d8b6:	f84a 0b04 	str.w	r0, [sl], #4
 800d8ba:	f853 0b04 	ldr.w	r0, [r3], #4
 800d8be:	459c      	cmp	ip, r3
 800d8c0:	fa20 f00e 	lsr.w	r0, r0, lr
 800d8c4:	d814      	bhi.n	800d8f0 <__lshift+0x94>
 800d8c6:	6048      	str	r0, [r1, #4]
 800d8c8:	b108      	cbz	r0, 800d8ce <__lshift+0x72>
 800d8ca:	f109 0502 	add.w	r5, r9, #2
 800d8ce:	3d01      	subs	r5, #1
 800d8d0:	4638      	mov	r0, r7
 800d8d2:	f8c8 5010 	str.w	r5, [r8, #16]
 800d8d6:	4621      	mov	r1, r4
 800d8d8:	f7ff fdf4 	bl	800d4c4 <_Bfree>
 800d8dc:	4640      	mov	r0, r8
 800d8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e2:	3101      	adds	r1, #1
 800d8e4:	005b      	lsls	r3, r3, #1
 800d8e6:	e7c7      	b.n	800d878 <__lshift+0x1c>
 800d8e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	e7cd      	b.n	800d88c <__lshift+0x30>
 800d8f0:	4651      	mov	r1, sl
 800d8f2:	e7dc      	b.n	800d8ae <__lshift+0x52>
 800d8f4:	3904      	subs	r1, #4
 800d8f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8fa:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8fe:	459c      	cmp	ip, r3
 800d900:	d8f9      	bhi.n	800d8f6 <__lshift+0x9a>
 800d902:	e7e4      	b.n	800d8ce <__lshift+0x72>

0800d904 <__mcmp>:
 800d904:	6903      	ldr	r3, [r0, #16]
 800d906:	690a      	ldr	r2, [r1, #16]
 800d908:	1a9b      	subs	r3, r3, r2
 800d90a:	b530      	push	{r4, r5, lr}
 800d90c:	d10c      	bne.n	800d928 <__mcmp+0x24>
 800d90e:	0092      	lsls	r2, r2, #2
 800d910:	3014      	adds	r0, #20
 800d912:	3114      	adds	r1, #20
 800d914:	1884      	adds	r4, r0, r2
 800d916:	4411      	add	r1, r2
 800d918:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d91c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d920:	4295      	cmp	r5, r2
 800d922:	d003      	beq.n	800d92c <__mcmp+0x28>
 800d924:	d305      	bcc.n	800d932 <__mcmp+0x2e>
 800d926:	2301      	movs	r3, #1
 800d928:	4618      	mov	r0, r3
 800d92a:	bd30      	pop	{r4, r5, pc}
 800d92c:	42a0      	cmp	r0, r4
 800d92e:	d3f3      	bcc.n	800d918 <__mcmp+0x14>
 800d930:	e7fa      	b.n	800d928 <__mcmp+0x24>
 800d932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d936:	e7f7      	b.n	800d928 <__mcmp+0x24>

0800d938 <__mdiff>:
 800d938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d93c:	460d      	mov	r5, r1
 800d93e:	4607      	mov	r7, r0
 800d940:	4611      	mov	r1, r2
 800d942:	4628      	mov	r0, r5
 800d944:	4614      	mov	r4, r2
 800d946:	f7ff ffdd 	bl	800d904 <__mcmp>
 800d94a:	1e06      	subs	r6, r0, #0
 800d94c:	d108      	bne.n	800d960 <__mdiff+0x28>
 800d94e:	4631      	mov	r1, r6
 800d950:	4638      	mov	r0, r7
 800d952:	f7ff fd83 	bl	800d45c <_Balloc>
 800d956:	2301      	movs	r3, #1
 800d958:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d95c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d960:	bfa4      	itt	ge
 800d962:	4623      	movge	r3, r4
 800d964:	462c      	movge	r4, r5
 800d966:	4638      	mov	r0, r7
 800d968:	6861      	ldr	r1, [r4, #4]
 800d96a:	bfa6      	itte	ge
 800d96c:	461d      	movge	r5, r3
 800d96e:	2600      	movge	r6, #0
 800d970:	2601      	movlt	r6, #1
 800d972:	f7ff fd73 	bl	800d45c <_Balloc>
 800d976:	692b      	ldr	r3, [r5, #16]
 800d978:	60c6      	str	r6, [r0, #12]
 800d97a:	6926      	ldr	r6, [r4, #16]
 800d97c:	f105 0914 	add.w	r9, r5, #20
 800d980:	f104 0214 	add.w	r2, r4, #20
 800d984:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d988:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d98c:	f100 0514 	add.w	r5, r0, #20
 800d990:	f04f 0e00 	mov.w	lr, #0
 800d994:	f852 ab04 	ldr.w	sl, [r2], #4
 800d998:	f859 4b04 	ldr.w	r4, [r9], #4
 800d99c:	fa1e f18a 	uxtah	r1, lr, sl
 800d9a0:	b2a3      	uxth	r3, r4
 800d9a2:	1ac9      	subs	r1, r1, r3
 800d9a4:	0c23      	lsrs	r3, r4, #16
 800d9a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d9aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d9ae:	b289      	uxth	r1, r1
 800d9b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d9b4:	45c8      	cmp	r8, r9
 800d9b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d9ba:	4694      	mov	ip, r2
 800d9bc:	f845 3b04 	str.w	r3, [r5], #4
 800d9c0:	d8e8      	bhi.n	800d994 <__mdiff+0x5c>
 800d9c2:	45bc      	cmp	ip, r7
 800d9c4:	d304      	bcc.n	800d9d0 <__mdiff+0x98>
 800d9c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d9ca:	b183      	cbz	r3, 800d9ee <__mdiff+0xb6>
 800d9cc:	6106      	str	r6, [r0, #16]
 800d9ce:	e7c5      	b.n	800d95c <__mdiff+0x24>
 800d9d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d9d4:	fa1e f381 	uxtah	r3, lr, r1
 800d9d8:	141a      	asrs	r2, r3, #16
 800d9da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d9e8:	f845 3b04 	str.w	r3, [r5], #4
 800d9ec:	e7e9      	b.n	800d9c2 <__mdiff+0x8a>
 800d9ee:	3e01      	subs	r6, #1
 800d9f0:	e7e9      	b.n	800d9c6 <__mdiff+0x8e>
	...

0800d9f4 <__ulp>:
 800d9f4:	4b12      	ldr	r3, [pc, #72]	; (800da40 <__ulp+0x4c>)
 800d9f6:	ee10 2a90 	vmov	r2, s1
 800d9fa:	401a      	ands	r2, r3
 800d9fc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800da00:	2b00      	cmp	r3, #0
 800da02:	dd04      	ble.n	800da0e <__ulp+0x1a>
 800da04:	2000      	movs	r0, #0
 800da06:	4619      	mov	r1, r3
 800da08:	ec41 0b10 	vmov	d0, r0, r1
 800da0c:	4770      	bx	lr
 800da0e:	425b      	negs	r3, r3
 800da10:	151b      	asrs	r3, r3, #20
 800da12:	2b13      	cmp	r3, #19
 800da14:	f04f 0000 	mov.w	r0, #0
 800da18:	f04f 0100 	mov.w	r1, #0
 800da1c:	dc04      	bgt.n	800da28 <__ulp+0x34>
 800da1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800da22:	fa42 f103 	asr.w	r1, r2, r3
 800da26:	e7ef      	b.n	800da08 <__ulp+0x14>
 800da28:	3b14      	subs	r3, #20
 800da2a:	2b1e      	cmp	r3, #30
 800da2c:	f04f 0201 	mov.w	r2, #1
 800da30:	bfda      	itte	le
 800da32:	f1c3 031f 	rsble	r3, r3, #31
 800da36:	fa02 f303 	lslle.w	r3, r2, r3
 800da3a:	4613      	movgt	r3, r2
 800da3c:	4618      	mov	r0, r3
 800da3e:	e7e3      	b.n	800da08 <__ulp+0x14>
 800da40:	7ff00000 	.word	0x7ff00000

0800da44 <__b2d>:
 800da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da46:	6905      	ldr	r5, [r0, #16]
 800da48:	f100 0714 	add.w	r7, r0, #20
 800da4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800da50:	1f2e      	subs	r6, r5, #4
 800da52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800da56:	4620      	mov	r0, r4
 800da58:	f7ff fdc4 	bl	800d5e4 <__hi0bits>
 800da5c:	f1c0 0320 	rsb	r3, r0, #32
 800da60:	280a      	cmp	r0, #10
 800da62:	600b      	str	r3, [r1, #0]
 800da64:	f8df c074 	ldr.w	ip, [pc, #116]	; 800dadc <__b2d+0x98>
 800da68:	dc14      	bgt.n	800da94 <__b2d+0x50>
 800da6a:	f1c0 0e0b 	rsb	lr, r0, #11
 800da6e:	fa24 f10e 	lsr.w	r1, r4, lr
 800da72:	42b7      	cmp	r7, r6
 800da74:	ea41 030c 	orr.w	r3, r1, ip
 800da78:	bf34      	ite	cc
 800da7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800da7e:	2100      	movcs	r1, #0
 800da80:	3015      	adds	r0, #21
 800da82:	fa04 f000 	lsl.w	r0, r4, r0
 800da86:	fa21 f10e 	lsr.w	r1, r1, lr
 800da8a:	ea40 0201 	orr.w	r2, r0, r1
 800da8e:	ec43 2b10 	vmov	d0, r2, r3
 800da92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da94:	42b7      	cmp	r7, r6
 800da96:	bf3a      	itte	cc
 800da98:	f1a5 0608 	subcc.w	r6, r5, #8
 800da9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800daa0:	2100      	movcs	r1, #0
 800daa2:	380b      	subs	r0, #11
 800daa4:	d015      	beq.n	800dad2 <__b2d+0x8e>
 800daa6:	4084      	lsls	r4, r0
 800daa8:	f1c0 0520 	rsb	r5, r0, #32
 800daac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800dab0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800dab4:	42be      	cmp	r6, r7
 800dab6:	fa21 fc05 	lsr.w	ip, r1, r5
 800daba:	ea44 030c 	orr.w	r3, r4, ip
 800dabe:	bf8c      	ite	hi
 800dac0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800dac4:	2400      	movls	r4, #0
 800dac6:	fa01 f000 	lsl.w	r0, r1, r0
 800daca:	40ec      	lsrs	r4, r5
 800dacc:	ea40 0204 	orr.w	r2, r0, r4
 800dad0:	e7dd      	b.n	800da8e <__b2d+0x4a>
 800dad2:	ea44 030c 	orr.w	r3, r4, ip
 800dad6:	460a      	mov	r2, r1
 800dad8:	e7d9      	b.n	800da8e <__b2d+0x4a>
 800dada:	bf00      	nop
 800dadc:	3ff00000 	.word	0x3ff00000

0800dae0 <__d2b>:
 800dae0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dae4:	460e      	mov	r6, r1
 800dae6:	2101      	movs	r1, #1
 800dae8:	ec59 8b10 	vmov	r8, r9, d0
 800daec:	4615      	mov	r5, r2
 800daee:	f7ff fcb5 	bl	800d45c <_Balloc>
 800daf2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800daf6:	4607      	mov	r7, r0
 800daf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dafc:	bb34      	cbnz	r4, 800db4c <__d2b+0x6c>
 800dafe:	9301      	str	r3, [sp, #4]
 800db00:	f1b8 0300 	subs.w	r3, r8, #0
 800db04:	d027      	beq.n	800db56 <__d2b+0x76>
 800db06:	a802      	add	r0, sp, #8
 800db08:	f840 3d08 	str.w	r3, [r0, #-8]!
 800db0c:	f7ff fd89 	bl	800d622 <__lo0bits>
 800db10:	9900      	ldr	r1, [sp, #0]
 800db12:	b1f0      	cbz	r0, 800db52 <__d2b+0x72>
 800db14:	9a01      	ldr	r2, [sp, #4]
 800db16:	f1c0 0320 	rsb	r3, r0, #32
 800db1a:	fa02 f303 	lsl.w	r3, r2, r3
 800db1e:	430b      	orrs	r3, r1
 800db20:	40c2      	lsrs	r2, r0
 800db22:	617b      	str	r3, [r7, #20]
 800db24:	9201      	str	r2, [sp, #4]
 800db26:	9b01      	ldr	r3, [sp, #4]
 800db28:	61bb      	str	r3, [r7, #24]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	bf14      	ite	ne
 800db2e:	2102      	movne	r1, #2
 800db30:	2101      	moveq	r1, #1
 800db32:	6139      	str	r1, [r7, #16]
 800db34:	b1c4      	cbz	r4, 800db68 <__d2b+0x88>
 800db36:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800db3a:	4404      	add	r4, r0
 800db3c:	6034      	str	r4, [r6, #0]
 800db3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db42:	6028      	str	r0, [r5, #0]
 800db44:	4638      	mov	r0, r7
 800db46:	b003      	add	sp, #12
 800db48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db50:	e7d5      	b.n	800dafe <__d2b+0x1e>
 800db52:	6179      	str	r1, [r7, #20]
 800db54:	e7e7      	b.n	800db26 <__d2b+0x46>
 800db56:	a801      	add	r0, sp, #4
 800db58:	f7ff fd63 	bl	800d622 <__lo0bits>
 800db5c:	9b01      	ldr	r3, [sp, #4]
 800db5e:	617b      	str	r3, [r7, #20]
 800db60:	2101      	movs	r1, #1
 800db62:	6139      	str	r1, [r7, #16]
 800db64:	3020      	adds	r0, #32
 800db66:	e7e5      	b.n	800db34 <__d2b+0x54>
 800db68:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800db6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db70:	6030      	str	r0, [r6, #0]
 800db72:	6918      	ldr	r0, [r3, #16]
 800db74:	f7ff fd36 	bl	800d5e4 <__hi0bits>
 800db78:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800db7c:	e7e1      	b.n	800db42 <__d2b+0x62>

0800db7e <__ratio>:
 800db7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db82:	4688      	mov	r8, r1
 800db84:	4669      	mov	r1, sp
 800db86:	4681      	mov	r9, r0
 800db88:	f7ff ff5c 	bl	800da44 <__b2d>
 800db8c:	a901      	add	r1, sp, #4
 800db8e:	4640      	mov	r0, r8
 800db90:	ec57 6b10 	vmov	r6, r7, d0
 800db94:	f7ff ff56 	bl	800da44 <__b2d>
 800db98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db9c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dba0:	eba3 0c02 	sub.w	ip, r3, r2
 800dba4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dba8:	1a9b      	subs	r3, r3, r2
 800dbaa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dbae:	ec5b ab10 	vmov	sl, fp, d0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	bfce      	itee	gt
 800dbb6:	463a      	movgt	r2, r7
 800dbb8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dbbc:	465a      	movle	r2, fp
 800dbbe:	4659      	mov	r1, fp
 800dbc0:	463d      	mov	r5, r7
 800dbc2:	bfd4      	ite	le
 800dbc4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800dbc8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800dbcc:	4630      	mov	r0, r6
 800dbce:	ee10 2a10 	vmov	r2, s0
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	4629      	mov	r1, r5
 800dbd6:	f7f2 fe49 	bl	800086c <__aeabi_ddiv>
 800dbda:	ec41 0b10 	vmov	d0, r0, r1
 800dbde:	b003      	add	sp, #12
 800dbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dbe4 <__copybits>:
 800dbe4:	3901      	subs	r1, #1
 800dbe6:	b510      	push	{r4, lr}
 800dbe8:	1149      	asrs	r1, r1, #5
 800dbea:	6914      	ldr	r4, [r2, #16]
 800dbec:	3101      	adds	r1, #1
 800dbee:	f102 0314 	add.w	r3, r2, #20
 800dbf2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dbf6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dbfa:	42a3      	cmp	r3, r4
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	d303      	bcc.n	800dc08 <__copybits+0x24>
 800dc00:	2300      	movs	r3, #0
 800dc02:	428a      	cmp	r2, r1
 800dc04:	d305      	bcc.n	800dc12 <__copybits+0x2e>
 800dc06:	bd10      	pop	{r4, pc}
 800dc08:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc0c:	f840 2b04 	str.w	r2, [r0], #4
 800dc10:	e7f3      	b.n	800dbfa <__copybits+0x16>
 800dc12:	f842 3b04 	str.w	r3, [r2], #4
 800dc16:	e7f4      	b.n	800dc02 <__copybits+0x1e>

0800dc18 <__any_on>:
 800dc18:	f100 0214 	add.w	r2, r0, #20
 800dc1c:	6900      	ldr	r0, [r0, #16]
 800dc1e:	114b      	asrs	r3, r1, #5
 800dc20:	4298      	cmp	r0, r3
 800dc22:	b510      	push	{r4, lr}
 800dc24:	db11      	blt.n	800dc4a <__any_on+0x32>
 800dc26:	dd0a      	ble.n	800dc3e <__any_on+0x26>
 800dc28:	f011 011f 	ands.w	r1, r1, #31
 800dc2c:	d007      	beq.n	800dc3e <__any_on+0x26>
 800dc2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dc32:	fa24 f001 	lsr.w	r0, r4, r1
 800dc36:	fa00 f101 	lsl.w	r1, r0, r1
 800dc3a:	428c      	cmp	r4, r1
 800dc3c:	d10b      	bne.n	800dc56 <__any_on+0x3e>
 800dc3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dc42:	4293      	cmp	r3, r2
 800dc44:	d803      	bhi.n	800dc4e <__any_on+0x36>
 800dc46:	2000      	movs	r0, #0
 800dc48:	bd10      	pop	{r4, pc}
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	e7f7      	b.n	800dc3e <__any_on+0x26>
 800dc4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dc52:	2900      	cmp	r1, #0
 800dc54:	d0f5      	beq.n	800dc42 <__any_on+0x2a>
 800dc56:	2001      	movs	r0, #1
 800dc58:	e7f6      	b.n	800dc48 <__any_on+0x30>

0800dc5a <_calloc_r>:
 800dc5a:	b538      	push	{r3, r4, r5, lr}
 800dc5c:	fb02 f401 	mul.w	r4, r2, r1
 800dc60:	4621      	mov	r1, r4
 800dc62:	f7fc fca3 	bl	800a5ac <_malloc_r>
 800dc66:	4605      	mov	r5, r0
 800dc68:	b118      	cbz	r0, 800dc72 <_calloc_r+0x18>
 800dc6a:	4622      	mov	r2, r4
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	f7fc fc47 	bl	800a500 <memset>
 800dc72:	4628      	mov	r0, r5
 800dc74:	bd38      	pop	{r3, r4, r5, pc}

0800dc76 <__ssputs_r>:
 800dc76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc7a:	688e      	ldr	r6, [r1, #8]
 800dc7c:	429e      	cmp	r6, r3
 800dc7e:	4682      	mov	sl, r0
 800dc80:	460c      	mov	r4, r1
 800dc82:	4690      	mov	r8, r2
 800dc84:	4699      	mov	r9, r3
 800dc86:	d837      	bhi.n	800dcf8 <__ssputs_r+0x82>
 800dc88:	898a      	ldrh	r2, [r1, #12]
 800dc8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dc8e:	d031      	beq.n	800dcf4 <__ssputs_r+0x7e>
 800dc90:	6825      	ldr	r5, [r4, #0]
 800dc92:	6909      	ldr	r1, [r1, #16]
 800dc94:	1a6f      	subs	r7, r5, r1
 800dc96:	6965      	ldr	r5, [r4, #20]
 800dc98:	2302      	movs	r3, #2
 800dc9a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc9e:	fb95 f5f3 	sdiv	r5, r5, r3
 800dca2:	f109 0301 	add.w	r3, r9, #1
 800dca6:	443b      	add	r3, r7
 800dca8:	429d      	cmp	r5, r3
 800dcaa:	bf38      	it	cc
 800dcac:	461d      	movcc	r5, r3
 800dcae:	0553      	lsls	r3, r2, #21
 800dcb0:	d530      	bpl.n	800dd14 <__ssputs_r+0x9e>
 800dcb2:	4629      	mov	r1, r5
 800dcb4:	f7fc fc7a 	bl	800a5ac <_malloc_r>
 800dcb8:	4606      	mov	r6, r0
 800dcba:	b950      	cbnz	r0, 800dcd2 <__ssputs_r+0x5c>
 800dcbc:	230c      	movs	r3, #12
 800dcbe:	f8ca 3000 	str.w	r3, [sl]
 800dcc2:	89a3      	ldrh	r3, [r4, #12]
 800dcc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcc8:	81a3      	strh	r3, [r4, #12]
 800dcca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcd2:	463a      	mov	r2, r7
 800dcd4:	6921      	ldr	r1, [r4, #16]
 800dcd6:	f7fc fbef 	bl	800a4b8 <memcpy>
 800dcda:	89a3      	ldrh	r3, [r4, #12]
 800dcdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dce4:	81a3      	strh	r3, [r4, #12]
 800dce6:	6126      	str	r6, [r4, #16]
 800dce8:	6165      	str	r5, [r4, #20]
 800dcea:	443e      	add	r6, r7
 800dcec:	1bed      	subs	r5, r5, r7
 800dcee:	6026      	str	r6, [r4, #0]
 800dcf0:	60a5      	str	r5, [r4, #8]
 800dcf2:	464e      	mov	r6, r9
 800dcf4:	454e      	cmp	r6, r9
 800dcf6:	d900      	bls.n	800dcfa <__ssputs_r+0x84>
 800dcf8:	464e      	mov	r6, r9
 800dcfa:	4632      	mov	r2, r6
 800dcfc:	4641      	mov	r1, r8
 800dcfe:	6820      	ldr	r0, [r4, #0]
 800dd00:	f7fc fbe5 	bl	800a4ce <memmove>
 800dd04:	68a3      	ldr	r3, [r4, #8]
 800dd06:	1b9b      	subs	r3, r3, r6
 800dd08:	60a3      	str	r3, [r4, #8]
 800dd0a:	6823      	ldr	r3, [r4, #0]
 800dd0c:	441e      	add	r6, r3
 800dd0e:	6026      	str	r6, [r4, #0]
 800dd10:	2000      	movs	r0, #0
 800dd12:	e7dc      	b.n	800dcce <__ssputs_r+0x58>
 800dd14:	462a      	mov	r2, r5
 800dd16:	f000 f90e 	bl	800df36 <_realloc_r>
 800dd1a:	4606      	mov	r6, r0
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	d1e2      	bne.n	800dce6 <__ssputs_r+0x70>
 800dd20:	6921      	ldr	r1, [r4, #16]
 800dd22:	4650      	mov	r0, sl
 800dd24:	f7fc fbf4 	bl	800a510 <_free_r>
 800dd28:	e7c8      	b.n	800dcbc <__ssputs_r+0x46>
	...

0800dd2c <_svfiprintf_r>:
 800dd2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd30:	461d      	mov	r5, r3
 800dd32:	898b      	ldrh	r3, [r1, #12]
 800dd34:	061f      	lsls	r7, r3, #24
 800dd36:	b09d      	sub	sp, #116	; 0x74
 800dd38:	4680      	mov	r8, r0
 800dd3a:	460c      	mov	r4, r1
 800dd3c:	4616      	mov	r6, r2
 800dd3e:	d50f      	bpl.n	800dd60 <_svfiprintf_r+0x34>
 800dd40:	690b      	ldr	r3, [r1, #16]
 800dd42:	b96b      	cbnz	r3, 800dd60 <_svfiprintf_r+0x34>
 800dd44:	2140      	movs	r1, #64	; 0x40
 800dd46:	f7fc fc31 	bl	800a5ac <_malloc_r>
 800dd4a:	6020      	str	r0, [r4, #0]
 800dd4c:	6120      	str	r0, [r4, #16]
 800dd4e:	b928      	cbnz	r0, 800dd5c <_svfiprintf_r+0x30>
 800dd50:	230c      	movs	r3, #12
 800dd52:	f8c8 3000 	str.w	r3, [r8]
 800dd56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd5a:	e0c8      	b.n	800deee <_svfiprintf_r+0x1c2>
 800dd5c:	2340      	movs	r3, #64	; 0x40
 800dd5e:	6163      	str	r3, [r4, #20]
 800dd60:	2300      	movs	r3, #0
 800dd62:	9309      	str	r3, [sp, #36]	; 0x24
 800dd64:	2320      	movs	r3, #32
 800dd66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd6a:	2330      	movs	r3, #48	; 0x30
 800dd6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd70:	9503      	str	r5, [sp, #12]
 800dd72:	f04f 0b01 	mov.w	fp, #1
 800dd76:	4637      	mov	r7, r6
 800dd78:	463d      	mov	r5, r7
 800dd7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dd7e:	b10b      	cbz	r3, 800dd84 <_svfiprintf_r+0x58>
 800dd80:	2b25      	cmp	r3, #37	; 0x25
 800dd82:	d13e      	bne.n	800de02 <_svfiprintf_r+0xd6>
 800dd84:	ebb7 0a06 	subs.w	sl, r7, r6
 800dd88:	d00b      	beq.n	800dda2 <_svfiprintf_r+0x76>
 800dd8a:	4653      	mov	r3, sl
 800dd8c:	4632      	mov	r2, r6
 800dd8e:	4621      	mov	r1, r4
 800dd90:	4640      	mov	r0, r8
 800dd92:	f7ff ff70 	bl	800dc76 <__ssputs_r>
 800dd96:	3001      	adds	r0, #1
 800dd98:	f000 80a4 	beq.w	800dee4 <_svfiprintf_r+0x1b8>
 800dd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd9e:	4453      	add	r3, sl
 800dda0:	9309      	str	r3, [sp, #36]	; 0x24
 800dda2:	783b      	ldrb	r3, [r7, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f000 809d 	beq.w	800dee4 <_svfiprintf_r+0x1b8>
 800ddaa:	2300      	movs	r3, #0
 800ddac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ddb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddb4:	9304      	str	r3, [sp, #16]
 800ddb6:	9307      	str	r3, [sp, #28]
 800ddb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddbc:	931a      	str	r3, [sp, #104]	; 0x68
 800ddbe:	462f      	mov	r7, r5
 800ddc0:	2205      	movs	r2, #5
 800ddc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ddc6:	4850      	ldr	r0, [pc, #320]	; (800df08 <_svfiprintf_r+0x1dc>)
 800ddc8:	f7f2 fa1a 	bl	8000200 <memchr>
 800ddcc:	9b04      	ldr	r3, [sp, #16]
 800ddce:	b9d0      	cbnz	r0, 800de06 <_svfiprintf_r+0xda>
 800ddd0:	06d9      	lsls	r1, r3, #27
 800ddd2:	bf44      	itt	mi
 800ddd4:	2220      	movmi	r2, #32
 800ddd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ddda:	071a      	lsls	r2, r3, #28
 800dddc:	bf44      	itt	mi
 800ddde:	222b      	movmi	r2, #43	; 0x2b
 800dde0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dde4:	782a      	ldrb	r2, [r5, #0]
 800dde6:	2a2a      	cmp	r2, #42	; 0x2a
 800dde8:	d015      	beq.n	800de16 <_svfiprintf_r+0xea>
 800ddea:	9a07      	ldr	r2, [sp, #28]
 800ddec:	462f      	mov	r7, r5
 800ddee:	2000      	movs	r0, #0
 800ddf0:	250a      	movs	r5, #10
 800ddf2:	4639      	mov	r1, r7
 800ddf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddf8:	3b30      	subs	r3, #48	; 0x30
 800ddfa:	2b09      	cmp	r3, #9
 800ddfc:	d94d      	bls.n	800de9a <_svfiprintf_r+0x16e>
 800ddfe:	b1b8      	cbz	r0, 800de30 <_svfiprintf_r+0x104>
 800de00:	e00f      	b.n	800de22 <_svfiprintf_r+0xf6>
 800de02:	462f      	mov	r7, r5
 800de04:	e7b8      	b.n	800dd78 <_svfiprintf_r+0x4c>
 800de06:	4a40      	ldr	r2, [pc, #256]	; (800df08 <_svfiprintf_r+0x1dc>)
 800de08:	1a80      	subs	r0, r0, r2
 800de0a:	fa0b f000 	lsl.w	r0, fp, r0
 800de0e:	4318      	orrs	r0, r3
 800de10:	9004      	str	r0, [sp, #16]
 800de12:	463d      	mov	r5, r7
 800de14:	e7d3      	b.n	800ddbe <_svfiprintf_r+0x92>
 800de16:	9a03      	ldr	r2, [sp, #12]
 800de18:	1d11      	adds	r1, r2, #4
 800de1a:	6812      	ldr	r2, [r2, #0]
 800de1c:	9103      	str	r1, [sp, #12]
 800de1e:	2a00      	cmp	r2, #0
 800de20:	db01      	blt.n	800de26 <_svfiprintf_r+0xfa>
 800de22:	9207      	str	r2, [sp, #28]
 800de24:	e004      	b.n	800de30 <_svfiprintf_r+0x104>
 800de26:	4252      	negs	r2, r2
 800de28:	f043 0302 	orr.w	r3, r3, #2
 800de2c:	9207      	str	r2, [sp, #28]
 800de2e:	9304      	str	r3, [sp, #16]
 800de30:	783b      	ldrb	r3, [r7, #0]
 800de32:	2b2e      	cmp	r3, #46	; 0x2e
 800de34:	d10c      	bne.n	800de50 <_svfiprintf_r+0x124>
 800de36:	787b      	ldrb	r3, [r7, #1]
 800de38:	2b2a      	cmp	r3, #42	; 0x2a
 800de3a:	d133      	bne.n	800dea4 <_svfiprintf_r+0x178>
 800de3c:	9b03      	ldr	r3, [sp, #12]
 800de3e:	1d1a      	adds	r2, r3, #4
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	9203      	str	r2, [sp, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	bfb8      	it	lt
 800de48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800de4c:	3702      	adds	r7, #2
 800de4e:	9305      	str	r3, [sp, #20]
 800de50:	4d2e      	ldr	r5, [pc, #184]	; (800df0c <_svfiprintf_r+0x1e0>)
 800de52:	7839      	ldrb	r1, [r7, #0]
 800de54:	2203      	movs	r2, #3
 800de56:	4628      	mov	r0, r5
 800de58:	f7f2 f9d2 	bl	8000200 <memchr>
 800de5c:	b138      	cbz	r0, 800de6e <_svfiprintf_r+0x142>
 800de5e:	2340      	movs	r3, #64	; 0x40
 800de60:	1b40      	subs	r0, r0, r5
 800de62:	fa03 f000 	lsl.w	r0, r3, r0
 800de66:	9b04      	ldr	r3, [sp, #16]
 800de68:	4303      	orrs	r3, r0
 800de6a:	3701      	adds	r7, #1
 800de6c:	9304      	str	r3, [sp, #16]
 800de6e:	7839      	ldrb	r1, [r7, #0]
 800de70:	4827      	ldr	r0, [pc, #156]	; (800df10 <_svfiprintf_r+0x1e4>)
 800de72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de76:	2206      	movs	r2, #6
 800de78:	1c7e      	adds	r6, r7, #1
 800de7a:	f7f2 f9c1 	bl	8000200 <memchr>
 800de7e:	2800      	cmp	r0, #0
 800de80:	d038      	beq.n	800def4 <_svfiprintf_r+0x1c8>
 800de82:	4b24      	ldr	r3, [pc, #144]	; (800df14 <_svfiprintf_r+0x1e8>)
 800de84:	bb13      	cbnz	r3, 800decc <_svfiprintf_r+0x1a0>
 800de86:	9b03      	ldr	r3, [sp, #12]
 800de88:	3307      	adds	r3, #7
 800de8a:	f023 0307 	bic.w	r3, r3, #7
 800de8e:	3308      	adds	r3, #8
 800de90:	9303      	str	r3, [sp, #12]
 800de92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de94:	444b      	add	r3, r9
 800de96:	9309      	str	r3, [sp, #36]	; 0x24
 800de98:	e76d      	b.n	800dd76 <_svfiprintf_r+0x4a>
 800de9a:	fb05 3202 	mla	r2, r5, r2, r3
 800de9e:	2001      	movs	r0, #1
 800dea0:	460f      	mov	r7, r1
 800dea2:	e7a6      	b.n	800ddf2 <_svfiprintf_r+0xc6>
 800dea4:	2300      	movs	r3, #0
 800dea6:	3701      	adds	r7, #1
 800dea8:	9305      	str	r3, [sp, #20]
 800deaa:	4619      	mov	r1, r3
 800deac:	250a      	movs	r5, #10
 800deae:	4638      	mov	r0, r7
 800deb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800deb4:	3a30      	subs	r2, #48	; 0x30
 800deb6:	2a09      	cmp	r2, #9
 800deb8:	d903      	bls.n	800dec2 <_svfiprintf_r+0x196>
 800deba:	2b00      	cmp	r3, #0
 800debc:	d0c8      	beq.n	800de50 <_svfiprintf_r+0x124>
 800debe:	9105      	str	r1, [sp, #20]
 800dec0:	e7c6      	b.n	800de50 <_svfiprintf_r+0x124>
 800dec2:	fb05 2101 	mla	r1, r5, r1, r2
 800dec6:	2301      	movs	r3, #1
 800dec8:	4607      	mov	r7, r0
 800deca:	e7f0      	b.n	800deae <_svfiprintf_r+0x182>
 800decc:	ab03      	add	r3, sp, #12
 800dece:	9300      	str	r3, [sp, #0]
 800ded0:	4622      	mov	r2, r4
 800ded2:	4b11      	ldr	r3, [pc, #68]	; (800df18 <_svfiprintf_r+0x1ec>)
 800ded4:	a904      	add	r1, sp, #16
 800ded6:	4640      	mov	r0, r8
 800ded8:	f7fc fc56 	bl	800a788 <_printf_float>
 800dedc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800dee0:	4681      	mov	r9, r0
 800dee2:	d1d6      	bne.n	800de92 <_svfiprintf_r+0x166>
 800dee4:	89a3      	ldrh	r3, [r4, #12]
 800dee6:	065b      	lsls	r3, r3, #25
 800dee8:	f53f af35 	bmi.w	800dd56 <_svfiprintf_r+0x2a>
 800deec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800deee:	b01d      	add	sp, #116	; 0x74
 800def0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def4:	ab03      	add	r3, sp, #12
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	4622      	mov	r2, r4
 800defa:	4b07      	ldr	r3, [pc, #28]	; (800df18 <_svfiprintf_r+0x1ec>)
 800defc:	a904      	add	r1, sp, #16
 800defe:	4640      	mov	r0, r8
 800df00:	f7fc fef8 	bl	800acf4 <_printf_i>
 800df04:	e7ea      	b.n	800dedc <_svfiprintf_r+0x1b0>
 800df06:	bf00      	nop
 800df08:	08010794 	.word	0x08010794
 800df0c:	0801079a 	.word	0x0801079a
 800df10:	0801079e 	.word	0x0801079e
 800df14:	0800a789 	.word	0x0800a789
 800df18:	0800dc77 	.word	0x0800dc77

0800df1c <__ascii_wctomb>:
 800df1c:	b149      	cbz	r1, 800df32 <__ascii_wctomb+0x16>
 800df1e:	2aff      	cmp	r2, #255	; 0xff
 800df20:	bf85      	ittet	hi
 800df22:	238a      	movhi	r3, #138	; 0x8a
 800df24:	6003      	strhi	r3, [r0, #0]
 800df26:	700a      	strbls	r2, [r1, #0]
 800df28:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800df2c:	bf98      	it	ls
 800df2e:	2001      	movls	r0, #1
 800df30:	4770      	bx	lr
 800df32:	4608      	mov	r0, r1
 800df34:	4770      	bx	lr

0800df36 <_realloc_r>:
 800df36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df38:	4607      	mov	r7, r0
 800df3a:	4614      	mov	r4, r2
 800df3c:	460e      	mov	r6, r1
 800df3e:	b921      	cbnz	r1, 800df4a <_realloc_r+0x14>
 800df40:	4611      	mov	r1, r2
 800df42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800df46:	f7fc bb31 	b.w	800a5ac <_malloc_r>
 800df4a:	b922      	cbnz	r2, 800df56 <_realloc_r+0x20>
 800df4c:	f7fc fae0 	bl	800a510 <_free_r>
 800df50:	4625      	mov	r5, r4
 800df52:	4628      	mov	r0, r5
 800df54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df56:	f000 f814 	bl	800df82 <_malloc_usable_size_r>
 800df5a:	42a0      	cmp	r0, r4
 800df5c:	d20f      	bcs.n	800df7e <_realloc_r+0x48>
 800df5e:	4621      	mov	r1, r4
 800df60:	4638      	mov	r0, r7
 800df62:	f7fc fb23 	bl	800a5ac <_malloc_r>
 800df66:	4605      	mov	r5, r0
 800df68:	2800      	cmp	r0, #0
 800df6a:	d0f2      	beq.n	800df52 <_realloc_r+0x1c>
 800df6c:	4631      	mov	r1, r6
 800df6e:	4622      	mov	r2, r4
 800df70:	f7fc faa2 	bl	800a4b8 <memcpy>
 800df74:	4631      	mov	r1, r6
 800df76:	4638      	mov	r0, r7
 800df78:	f7fc faca 	bl	800a510 <_free_r>
 800df7c:	e7e9      	b.n	800df52 <_realloc_r+0x1c>
 800df7e:	4635      	mov	r5, r6
 800df80:	e7e7      	b.n	800df52 <_realloc_r+0x1c>

0800df82 <_malloc_usable_size_r>:
 800df82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df86:	1f18      	subs	r0, r3, #4
 800df88:	2b00      	cmp	r3, #0
 800df8a:	bfbc      	itt	lt
 800df8c:	580b      	ldrlt	r3, [r1, r0]
 800df8e:	18c0      	addlt	r0, r0, r3
 800df90:	4770      	bx	lr
 800df92:	0000      	movs	r0, r0
 800df94:	0000      	movs	r0, r0
	...

0800df98 <sin>:
 800df98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df9a:	ec51 0b10 	vmov	r0, r1, d0
 800df9e:	4a20      	ldr	r2, [pc, #128]	; (800e020 <sin+0x88>)
 800dfa0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	dc07      	bgt.n	800dfb8 <sin+0x20>
 800dfa8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800e018 <sin+0x80>
 800dfac:	2000      	movs	r0, #0
 800dfae:	f000 fe37 	bl	800ec20 <__kernel_sin>
 800dfb2:	ec51 0b10 	vmov	r0, r1, d0
 800dfb6:	e007      	b.n	800dfc8 <sin+0x30>
 800dfb8:	4a1a      	ldr	r2, [pc, #104]	; (800e024 <sin+0x8c>)
 800dfba:	4293      	cmp	r3, r2
 800dfbc:	dd09      	ble.n	800dfd2 <sin+0x3a>
 800dfbe:	ee10 2a10 	vmov	r2, s0
 800dfc2:	460b      	mov	r3, r1
 800dfc4:	f7f2 f970 	bl	80002a8 <__aeabi_dsub>
 800dfc8:	ec41 0b10 	vmov	d0, r0, r1
 800dfcc:	b005      	add	sp, #20
 800dfce:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfd2:	4668      	mov	r0, sp
 800dfd4:	f000 f828 	bl	800e028 <__ieee754_rem_pio2>
 800dfd8:	f000 0003 	and.w	r0, r0, #3
 800dfdc:	2801      	cmp	r0, #1
 800dfde:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dfe2:	ed9d 0b00 	vldr	d0, [sp]
 800dfe6:	d004      	beq.n	800dff2 <sin+0x5a>
 800dfe8:	2802      	cmp	r0, #2
 800dfea:	d005      	beq.n	800dff8 <sin+0x60>
 800dfec:	b970      	cbnz	r0, 800e00c <sin+0x74>
 800dfee:	2001      	movs	r0, #1
 800dff0:	e7dd      	b.n	800dfae <sin+0x16>
 800dff2:	f000 fa0d 	bl	800e410 <__kernel_cos>
 800dff6:	e7dc      	b.n	800dfb2 <sin+0x1a>
 800dff8:	2001      	movs	r0, #1
 800dffa:	f000 fe11 	bl	800ec20 <__kernel_sin>
 800dffe:	ec53 2b10 	vmov	r2, r3, d0
 800e002:	ee10 0a10 	vmov	r0, s0
 800e006:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e00a:	e7dd      	b.n	800dfc8 <sin+0x30>
 800e00c:	f000 fa00 	bl	800e410 <__kernel_cos>
 800e010:	e7f5      	b.n	800dffe <sin+0x66>
 800e012:	bf00      	nop
 800e014:	f3af 8000 	nop.w
	...
 800e020:	3fe921fb 	.word	0x3fe921fb
 800e024:	7fefffff 	.word	0x7fefffff

0800e028 <__ieee754_rem_pio2>:
 800e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	ec57 6b10 	vmov	r6, r7, d0
 800e030:	4bc3      	ldr	r3, [pc, #780]	; (800e340 <__ieee754_rem_pio2+0x318>)
 800e032:	b08d      	sub	sp, #52	; 0x34
 800e034:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e038:	4598      	cmp	r8, r3
 800e03a:	4604      	mov	r4, r0
 800e03c:	9704      	str	r7, [sp, #16]
 800e03e:	dc07      	bgt.n	800e050 <__ieee754_rem_pio2+0x28>
 800e040:	2200      	movs	r2, #0
 800e042:	2300      	movs	r3, #0
 800e044:	ed84 0b00 	vstr	d0, [r4]
 800e048:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e04c:	2500      	movs	r5, #0
 800e04e:	e027      	b.n	800e0a0 <__ieee754_rem_pio2+0x78>
 800e050:	4bbc      	ldr	r3, [pc, #752]	; (800e344 <__ieee754_rem_pio2+0x31c>)
 800e052:	4598      	cmp	r8, r3
 800e054:	dc75      	bgt.n	800e142 <__ieee754_rem_pio2+0x11a>
 800e056:	9b04      	ldr	r3, [sp, #16]
 800e058:	4dbb      	ldr	r5, [pc, #748]	; (800e348 <__ieee754_rem_pio2+0x320>)
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	ee10 0a10 	vmov	r0, s0
 800e060:	a3a9      	add	r3, pc, #676	; (adr r3, 800e308 <__ieee754_rem_pio2+0x2e0>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	4639      	mov	r1, r7
 800e068:	dd36      	ble.n	800e0d8 <__ieee754_rem_pio2+0xb0>
 800e06a:	f7f2 f91d 	bl	80002a8 <__aeabi_dsub>
 800e06e:	45a8      	cmp	r8, r5
 800e070:	4606      	mov	r6, r0
 800e072:	460f      	mov	r7, r1
 800e074:	d018      	beq.n	800e0a8 <__ieee754_rem_pio2+0x80>
 800e076:	a3a6      	add	r3, pc, #664	; (adr r3, 800e310 <__ieee754_rem_pio2+0x2e8>)
 800e078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07c:	f7f2 f914 	bl	80002a8 <__aeabi_dsub>
 800e080:	4602      	mov	r2, r0
 800e082:	460b      	mov	r3, r1
 800e084:	e9c4 2300 	strd	r2, r3, [r4]
 800e088:	4630      	mov	r0, r6
 800e08a:	4639      	mov	r1, r7
 800e08c:	f7f2 f90c 	bl	80002a8 <__aeabi_dsub>
 800e090:	a39f      	add	r3, pc, #636	; (adr r3, 800e310 <__ieee754_rem_pio2+0x2e8>)
 800e092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e096:	f7f2 f907 	bl	80002a8 <__aeabi_dsub>
 800e09a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e09e:	2501      	movs	r5, #1
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	b00d      	add	sp, #52	; 0x34
 800e0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a8:	a39b      	add	r3, pc, #620	; (adr r3, 800e318 <__ieee754_rem_pio2+0x2f0>)
 800e0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ae:	f7f2 f8fb 	bl	80002a8 <__aeabi_dsub>
 800e0b2:	a39b      	add	r3, pc, #620	; (adr r3, 800e320 <__ieee754_rem_pio2+0x2f8>)
 800e0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b8:	4606      	mov	r6, r0
 800e0ba:	460f      	mov	r7, r1
 800e0bc:	f7f2 f8f4 	bl	80002a8 <__aeabi_dsub>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	e9c4 2300 	strd	r2, r3, [r4]
 800e0c8:	4630      	mov	r0, r6
 800e0ca:	4639      	mov	r1, r7
 800e0cc:	f7f2 f8ec 	bl	80002a8 <__aeabi_dsub>
 800e0d0:	a393      	add	r3, pc, #588	; (adr r3, 800e320 <__ieee754_rem_pio2+0x2f8>)
 800e0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d6:	e7de      	b.n	800e096 <__ieee754_rem_pio2+0x6e>
 800e0d8:	f7f2 f8e8 	bl	80002ac <__adddf3>
 800e0dc:	45a8      	cmp	r8, r5
 800e0de:	4606      	mov	r6, r0
 800e0e0:	460f      	mov	r7, r1
 800e0e2:	d016      	beq.n	800e112 <__ieee754_rem_pio2+0xea>
 800e0e4:	a38a      	add	r3, pc, #552	; (adr r3, 800e310 <__ieee754_rem_pio2+0x2e8>)
 800e0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ea:	f7f2 f8df 	bl	80002ac <__adddf3>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	e9c4 2300 	strd	r2, r3, [r4]
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	4639      	mov	r1, r7
 800e0fa:	f7f2 f8d5 	bl	80002a8 <__aeabi_dsub>
 800e0fe:	a384      	add	r3, pc, #528	; (adr r3, 800e310 <__ieee754_rem_pio2+0x2e8>)
 800e100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e104:	f7f2 f8d2 	bl	80002ac <__adddf3>
 800e108:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e10c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e110:	e7c6      	b.n	800e0a0 <__ieee754_rem_pio2+0x78>
 800e112:	a381      	add	r3, pc, #516	; (adr r3, 800e318 <__ieee754_rem_pio2+0x2f0>)
 800e114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e118:	f7f2 f8c8 	bl	80002ac <__adddf3>
 800e11c:	a380      	add	r3, pc, #512	; (adr r3, 800e320 <__ieee754_rem_pio2+0x2f8>)
 800e11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e122:	4606      	mov	r6, r0
 800e124:	460f      	mov	r7, r1
 800e126:	f7f2 f8c1 	bl	80002ac <__adddf3>
 800e12a:	4602      	mov	r2, r0
 800e12c:	460b      	mov	r3, r1
 800e12e:	e9c4 2300 	strd	r2, r3, [r4]
 800e132:	4630      	mov	r0, r6
 800e134:	4639      	mov	r1, r7
 800e136:	f7f2 f8b7 	bl	80002a8 <__aeabi_dsub>
 800e13a:	a379      	add	r3, pc, #484	; (adr r3, 800e320 <__ieee754_rem_pio2+0x2f8>)
 800e13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e140:	e7e0      	b.n	800e104 <__ieee754_rem_pio2+0xdc>
 800e142:	4b82      	ldr	r3, [pc, #520]	; (800e34c <__ieee754_rem_pio2+0x324>)
 800e144:	4598      	cmp	r8, r3
 800e146:	f300 80d0 	bgt.w	800e2ea <__ieee754_rem_pio2+0x2c2>
 800e14a:	f000 fe23 	bl	800ed94 <fabs>
 800e14e:	ec57 6b10 	vmov	r6, r7, d0
 800e152:	ee10 0a10 	vmov	r0, s0
 800e156:	a374      	add	r3, pc, #464	; (adr r3, 800e328 <__ieee754_rem_pio2+0x300>)
 800e158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e15c:	4639      	mov	r1, r7
 800e15e:	f7f2 fa5b 	bl	8000618 <__aeabi_dmul>
 800e162:	2200      	movs	r2, #0
 800e164:	4b7a      	ldr	r3, [pc, #488]	; (800e350 <__ieee754_rem_pio2+0x328>)
 800e166:	f7f2 f8a1 	bl	80002ac <__adddf3>
 800e16a:	f7f2 fd05 	bl	8000b78 <__aeabi_d2iz>
 800e16e:	4605      	mov	r5, r0
 800e170:	f7f2 f9e8 	bl	8000544 <__aeabi_i2d>
 800e174:	a364      	add	r3, pc, #400	; (adr r3, 800e308 <__ieee754_rem_pio2+0x2e0>)
 800e176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e17e:	f7f2 fa4b 	bl	8000618 <__aeabi_dmul>
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	4630      	mov	r0, r6
 800e188:	4639      	mov	r1, r7
 800e18a:	f7f2 f88d 	bl	80002a8 <__aeabi_dsub>
 800e18e:	a360      	add	r3, pc, #384	; (adr r3, 800e310 <__ieee754_rem_pio2+0x2e8>)
 800e190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e194:	4682      	mov	sl, r0
 800e196:	468b      	mov	fp, r1
 800e198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e19c:	f7f2 fa3c 	bl	8000618 <__aeabi_dmul>
 800e1a0:	2d1f      	cmp	r5, #31
 800e1a2:	4606      	mov	r6, r0
 800e1a4:	460f      	mov	r7, r1
 800e1a6:	dc0c      	bgt.n	800e1c2 <__ieee754_rem_pio2+0x19a>
 800e1a8:	1e6a      	subs	r2, r5, #1
 800e1aa:	4b6a      	ldr	r3, [pc, #424]	; (800e354 <__ieee754_rem_pio2+0x32c>)
 800e1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1b0:	4543      	cmp	r3, r8
 800e1b2:	d006      	beq.n	800e1c2 <__ieee754_rem_pio2+0x19a>
 800e1b4:	4632      	mov	r2, r6
 800e1b6:	463b      	mov	r3, r7
 800e1b8:	4650      	mov	r0, sl
 800e1ba:	4659      	mov	r1, fp
 800e1bc:	f7f2 f874 	bl	80002a8 <__aeabi_dsub>
 800e1c0:	e00e      	b.n	800e1e0 <__ieee754_rem_pio2+0x1b8>
 800e1c2:	4632      	mov	r2, r6
 800e1c4:	463b      	mov	r3, r7
 800e1c6:	4650      	mov	r0, sl
 800e1c8:	4659      	mov	r1, fp
 800e1ca:	f7f2 f86d 	bl	80002a8 <__aeabi_dsub>
 800e1ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e1d2:	9305      	str	r3, [sp, #20]
 800e1d4:	9a05      	ldr	r2, [sp, #20]
 800e1d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e1da:	1ad3      	subs	r3, r2, r3
 800e1dc:	2b10      	cmp	r3, #16
 800e1de:	dc02      	bgt.n	800e1e6 <__ieee754_rem_pio2+0x1be>
 800e1e0:	e9c4 0100 	strd	r0, r1, [r4]
 800e1e4:	e039      	b.n	800e25a <__ieee754_rem_pio2+0x232>
 800e1e6:	a34c      	add	r3, pc, #304	; (adr r3, 800e318 <__ieee754_rem_pio2+0x2f0>)
 800e1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1f0:	f7f2 fa12 	bl	8000618 <__aeabi_dmul>
 800e1f4:	4606      	mov	r6, r0
 800e1f6:	460f      	mov	r7, r1
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	4650      	mov	r0, sl
 800e1fe:	4659      	mov	r1, fp
 800e200:	f7f2 f852 	bl	80002a8 <__aeabi_dsub>
 800e204:	4602      	mov	r2, r0
 800e206:	460b      	mov	r3, r1
 800e208:	4680      	mov	r8, r0
 800e20a:	4689      	mov	r9, r1
 800e20c:	4650      	mov	r0, sl
 800e20e:	4659      	mov	r1, fp
 800e210:	f7f2 f84a 	bl	80002a8 <__aeabi_dsub>
 800e214:	4632      	mov	r2, r6
 800e216:	463b      	mov	r3, r7
 800e218:	f7f2 f846 	bl	80002a8 <__aeabi_dsub>
 800e21c:	a340      	add	r3, pc, #256	; (adr r3, 800e320 <__ieee754_rem_pio2+0x2f8>)
 800e21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e222:	4606      	mov	r6, r0
 800e224:	460f      	mov	r7, r1
 800e226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e22a:	f7f2 f9f5 	bl	8000618 <__aeabi_dmul>
 800e22e:	4632      	mov	r2, r6
 800e230:	463b      	mov	r3, r7
 800e232:	f7f2 f839 	bl	80002a8 <__aeabi_dsub>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	4606      	mov	r6, r0
 800e23c:	460f      	mov	r7, r1
 800e23e:	4640      	mov	r0, r8
 800e240:	4649      	mov	r1, r9
 800e242:	f7f2 f831 	bl	80002a8 <__aeabi_dsub>
 800e246:	9a05      	ldr	r2, [sp, #20]
 800e248:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	2b31      	cmp	r3, #49	; 0x31
 800e250:	dc20      	bgt.n	800e294 <__ieee754_rem_pio2+0x26c>
 800e252:	e9c4 0100 	strd	r0, r1, [r4]
 800e256:	46c2      	mov	sl, r8
 800e258:	46cb      	mov	fp, r9
 800e25a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800e25e:	4650      	mov	r0, sl
 800e260:	4642      	mov	r2, r8
 800e262:	464b      	mov	r3, r9
 800e264:	4659      	mov	r1, fp
 800e266:	f7f2 f81f 	bl	80002a8 <__aeabi_dsub>
 800e26a:	463b      	mov	r3, r7
 800e26c:	4632      	mov	r2, r6
 800e26e:	f7f2 f81b 	bl	80002a8 <__aeabi_dsub>
 800e272:	9b04      	ldr	r3, [sp, #16]
 800e274:	2b00      	cmp	r3, #0
 800e276:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e27a:	f6bf af11 	bge.w	800e0a0 <__ieee754_rem_pio2+0x78>
 800e27e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e282:	6063      	str	r3, [r4, #4]
 800e284:	f8c4 8000 	str.w	r8, [r4]
 800e288:	60a0      	str	r0, [r4, #8]
 800e28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e28e:	60e3      	str	r3, [r4, #12]
 800e290:	426d      	negs	r5, r5
 800e292:	e705      	b.n	800e0a0 <__ieee754_rem_pio2+0x78>
 800e294:	a326      	add	r3, pc, #152	; (adr r3, 800e330 <__ieee754_rem_pio2+0x308>)
 800e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e29e:	f7f2 f9bb 	bl	8000618 <__aeabi_dmul>
 800e2a2:	4606      	mov	r6, r0
 800e2a4:	460f      	mov	r7, r1
 800e2a6:	4602      	mov	r2, r0
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	4640      	mov	r0, r8
 800e2ac:	4649      	mov	r1, r9
 800e2ae:	f7f1 fffb 	bl	80002a8 <__aeabi_dsub>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4682      	mov	sl, r0
 800e2b8:	468b      	mov	fp, r1
 800e2ba:	4640      	mov	r0, r8
 800e2bc:	4649      	mov	r1, r9
 800e2be:	f7f1 fff3 	bl	80002a8 <__aeabi_dsub>
 800e2c2:	4632      	mov	r2, r6
 800e2c4:	463b      	mov	r3, r7
 800e2c6:	f7f1 ffef 	bl	80002a8 <__aeabi_dsub>
 800e2ca:	a31b      	add	r3, pc, #108	; (adr r3, 800e338 <__ieee754_rem_pio2+0x310>)
 800e2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d0:	4606      	mov	r6, r0
 800e2d2:	460f      	mov	r7, r1
 800e2d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2d8:	f7f2 f99e 	bl	8000618 <__aeabi_dmul>
 800e2dc:	4632      	mov	r2, r6
 800e2de:	463b      	mov	r3, r7
 800e2e0:	f7f1 ffe2 	bl	80002a8 <__aeabi_dsub>
 800e2e4:	4606      	mov	r6, r0
 800e2e6:	460f      	mov	r7, r1
 800e2e8:	e764      	b.n	800e1b4 <__ieee754_rem_pio2+0x18c>
 800e2ea:	4b1b      	ldr	r3, [pc, #108]	; (800e358 <__ieee754_rem_pio2+0x330>)
 800e2ec:	4598      	cmp	r8, r3
 800e2ee:	dd35      	ble.n	800e35c <__ieee754_rem_pio2+0x334>
 800e2f0:	ee10 2a10 	vmov	r2, s0
 800e2f4:	463b      	mov	r3, r7
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	4639      	mov	r1, r7
 800e2fa:	f7f1 ffd5 	bl	80002a8 <__aeabi_dsub>
 800e2fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e302:	e9c4 0100 	strd	r0, r1, [r4]
 800e306:	e6a1      	b.n	800e04c <__ieee754_rem_pio2+0x24>
 800e308:	54400000 	.word	0x54400000
 800e30c:	3ff921fb 	.word	0x3ff921fb
 800e310:	1a626331 	.word	0x1a626331
 800e314:	3dd0b461 	.word	0x3dd0b461
 800e318:	1a600000 	.word	0x1a600000
 800e31c:	3dd0b461 	.word	0x3dd0b461
 800e320:	2e037073 	.word	0x2e037073
 800e324:	3ba3198a 	.word	0x3ba3198a
 800e328:	6dc9c883 	.word	0x6dc9c883
 800e32c:	3fe45f30 	.word	0x3fe45f30
 800e330:	2e000000 	.word	0x2e000000
 800e334:	3ba3198a 	.word	0x3ba3198a
 800e338:	252049c1 	.word	0x252049c1
 800e33c:	397b839a 	.word	0x397b839a
 800e340:	3fe921fb 	.word	0x3fe921fb
 800e344:	4002d97b 	.word	0x4002d97b
 800e348:	3ff921fb 	.word	0x3ff921fb
 800e34c:	413921fb 	.word	0x413921fb
 800e350:	3fe00000 	.word	0x3fe00000
 800e354:	080108a8 	.word	0x080108a8
 800e358:	7fefffff 	.word	0x7fefffff
 800e35c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800e360:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800e364:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800e368:	4630      	mov	r0, r6
 800e36a:	460f      	mov	r7, r1
 800e36c:	f7f2 fc04 	bl	8000b78 <__aeabi_d2iz>
 800e370:	f7f2 f8e8 	bl	8000544 <__aeabi_i2d>
 800e374:	4602      	mov	r2, r0
 800e376:	460b      	mov	r3, r1
 800e378:	4630      	mov	r0, r6
 800e37a:	4639      	mov	r1, r7
 800e37c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e380:	f7f1 ff92 	bl	80002a8 <__aeabi_dsub>
 800e384:	2200      	movs	r2, #0
 800e386:	4b1f      	ldr	r3, [pc, #124]	; (800e404 <__ieee754_rem_pio2+0x3dc>)
 800e388:	f7f2 f946 	bl	8000618 <__aeabi_dmul>
 800e38c:	460f      	mov	r7, r1
 800e38e:	4606      	mov	r6, r0
 800e390:	f7f2 fbf2 	bl	8000b78 <__aeabi_d2iz>
 800e394:	f7f2 f8d6 	bl	8000544 <__aeabi_i2d>
 800e398:	4602      	mov	r2, r0
 800e39a:	460b      	mov	r3, r1
 800e39c:	4630      	mov	r0, r6
 800e39e:	4639      	mov	r1, r7
 800e3a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e3a4:	f7f1 ff80 	bl	80002a8 <__aeabi_dsub>
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	4b16      	ldr	r3, [pc, #88]	; (800e404 <__ieee754_rem_pio2+0x3dc>)
 800e3ac:	f7f2 f934 	bl	8000618 <__aeabi_dmul>
 800e3b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e3b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800e3b8:	f04f 0803 	mov.w	r8, #3
 800e3bc:	2600      	movs	r6, #0
 800e3be:	2700      	movs	r7, #0
 800e3c0:	4632      	mov	r2, r6
 800e3c2:	463b      	mov	r3, r7
 800e3c4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800e3c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800e3cc:	f7f2 fb8c 	bl	8000ae8 <__aeabi_dcmpeq>
 800e3d0:	b9b0      	cbnz	r0, 800e400 <__ieee754_rem_pio2+0x3d8>
 800e3d2:	4b0d      	ldr	r3, [pc, #52]	; (800e408 <__ieee754_rem_pio2+0x3e0>)
 800e3d4:	9301      	str	r3, [sp, #4]
 800e3d6:	2302      	movs	r3, #2
 800e3d8:	9300      	str	r3, [sp, #0]
 800e3da:	462a      	mov	r2, r5
 800e3dc:	4643      	mov	r3, r8
 800e3de:	4621      	mov	r1, r4
 800e3e0:	a806      	add	r0, sp, #24
 800e3e2:	f000 f8dd 	bl	800e5a0 <__kernel_rem_pio2>
 800e3e6:	9b04      	ldr	r3, [sp, #16]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	4605      	mov	r5, r0
 800e3ec:	f6bf ae58 	bge.w	800e0a0 <__ieee754_rem_pio2+0x78>
 800e3f0:	6863      	ldr	r3, [r4, #4]
 800e3f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e3f6:	6063      	str	r3, [r4, #4]
 800e3f8:	68e3      	ldr	r3, [r4, #12]
 800e3fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e3fe:	e746      	b.n	800e28e <__ieee754_rem_pio2+0x266>
 800e400:	46d0      	mov	r8, sl
 800e402:	e7dd      	b.n	800e3c0 <__ieee754_rem_pio2+0x398>
 800e404:	41700000 	.word	0x41700000
 800e408:	08010928 	.word	0x08010928
 800e40c:	00000000 	.word	0x00000000

0800e410 <__kernel_cos>:
 800e410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e414:	ec59 8b10 	vmov	r8, r9, d0
 800e418:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800e41c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e420:	ed2d 8b02 	vpush	{d8}
 800e424:	eeb0 8a41 	vmov.f32	s16, s2
 800e428:	eef0 8a61 	vmov.f32	s17, s3
 800e42c:	da07      	bge.n	800e43e <__kernel_cos+0x2e>
 800e42e:	ee10 0a10 	vmov	r0, s0
 800e432:	4649      	mov	r1, r9
 800e434:	f7f2 fba0 	bl	8000b78 <__aeabi_d2iz>
 800e438:	2800      	cmp	r0, #0
 800e43a:	f000 8089 	beq.w	800e550 <__kernel_cos+0x140>
 800e43e:	4642      	mov	r2, r8
 800e440:	464b      	mov	r3, r9
 800e442:	4640      	mov	r0, r8
 800e444:	4649      	mov	r1, r9
 800e446:	f7f2 f8e7 	bl	8000618 <__aeabi_dmul>
 800e44a:	2200      	movs	r2, #0
 800e44c:	4b4e      	ldr	r3, [pc, #312]	; (800e588 <__kernel_cos+0x178>)
 800e44e:	4604      	mov	r4, r0
 800e450:	460d      	mov	r5, r1
 800e452:	f7f2 f8e1 	bl	8000618 <__aeabi_dmul>
 800e456:	a340      	add	r3, pc, #256	; (adr r3, 800e558 <__kernel_cos+0x148>)
 800e458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e45c:	4682      	mov	sl, r0
 800e45e:	468b      	mov	fp, r1
 800e460:	4620      	mov	r0, r4
 800e462:	4629      	mov	r1, r5
 800e464:	f7f2 f8d8 	bl	8000618 <__aeabi_dmul>
 800e468:	a33d      	add	r3, pc, #244	; (adr r3, 800e560 <__kernel_cos+0x150>)
 800e46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46e:	f7f1 ff1d 	bl	80002ac <__adddf3>
 800e472:	4622      	mov	r2, r4
 800e474:	462b      	mov	r3, r5
 800e476:	f7f2 f8cf 	bl	8000618 <__aeabi_dmul>
 800e47a:	a33b      	add	r3, pc, #236	; (adr r3, 800e568 <__kernel_cos+0x158>)
 800e47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e480:	f7f1 ff12 	bl	80002a8 <__aeabi_dsub>
 800e484:	4622      	mov	r2, r4
 800e486:	462b      	mov	r3, r5
 800e488:	f7f2 f8c6 	bl	8000618 <__aeabi_dmul>
 800e48c:	a338      	add	r3, pc, #224	; (adr r3, 800e570 <__kernel_cos+0x160>)
 800e48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e492:	f7f1 ff0b 	bl	80002ac <__adddf3>
 800e496:	4622      	mov	r2, r4
 800e498:	462b      	mov	r3, r5
 800e49a:	f7f2 f8bd 	bl	8000618 <__aeabi_dmul>
 800e49e:	a336      	add	r3, pc, #216	; (adr r3, 800e578 <__kernel_cos+0x168>)
 800e4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a4:	f7f1 ff00 	bl	80002a8 <__aeabi_dsub>
 800e4a8:	4622      	mov	r2, r4
 800e4aa:	462b      	mov	r3, r5
 800e4ac:	f7f2 f8b4 	bl	8000618 <__aeabi_dmul>
 800e4b0:	a333      	add	r3, pc, #204	; (adr r3, 800e580 <__kernel_cos+0x170>)
 800e4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4b6:	f7f1 fef9 	bl	80002ac <__adddf3>
 800e4ba:	4622      	mov	r2, r4
 800e4bc:	462b      	mov	r3, r5
 800e4be:	f7f2 f8ab 	bl	8000618 <__aeabi_dmul>
 800e4c2:	4622      	mov	r2, r4
 800e4c4:	462b      	mov	r3, r5
 800e4c6:	f7f2 f8a7 	bl	8000618 <__aeabi_dmul>
 800e4ca:	ec53 2b18 	vmov	r2, r3, d8
 800e4ce:	4604      	mov	r4, r0
 800e4d0:	460d      	mov	r5, r1
 800e4d2:	4640      	mov	r0, r8
 800e4d4:	4649      	mov	r1, r9
 800e4d6:	f7f2 f89f 	bl	8000618 <__aeabi_dmul>
 800e4da:	460b      	mov	r3, r1
 800e4dc:	4602      	mov	r2, r0
 800e4de:	4629      	mov	r1, r5
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	f7f1 fee1 	bl	80002a8 <__aeabi_dsub>
 800e4e6:	4b29      	ldr	r3, [pc, #164]	; (800e58c <__kernel_cos+0x17c>)
 800e4e8:	429e      	cmp	r6, r3
 800e4ea:	4680      	mov	r8, r0
 800e4ec:	4689      	mov	r9, r1
 800e4ee:	dc11      	bgt.n	800e514 <__kernel_cos+0x104>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	4650      	mov	r0, sl
 800e4f6:	4659      	mov	r1, fp
 800e4f8:	f7f1 fed6 	bl	80002a8 <__aeabi_dsub>
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	4924      	ldr	r1, [pc, #144]	; (800e590 <__kernel_cos+0x180>)
 800e500:	4602      	mov	r2, r0
 800e502:	2000      	movs	r0, #0
 800e504:	f7f1 fed0 	bl	80002a8 <__aeabi_dsub>
 800e508:	ecbd 8b02 	vpop	{d8}
 800e50c:	ec41 0b10 	vmov	d0, r0, r1
 800e510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e514:	4b1f      	ldr	r3, [pc, #124]	; (800e594 <__kernel_cos+0x184>)
 800e516:	491e      	ldr	r1, [pc, #120]	; (800e590 <__kernel_cos+0x180>)
 800e518:	429e      	cmp	r6, r3
 800e51a:	bfcc      	ite	gt
 800e51c:	4d1e      	ldrgt	r5, [pc, #120]	; (800e598 <__kernel_cos+0x188>)
 800e51e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e522:	2400      	movs	r4, #0
 800e524:	4622      	mov	r2, r4
 800e526:	462b      	mov	r3, r5
 800e528:	2000      	movs	r0, #0
 800e52a:	f7f1 febd 	bl	80002a8 <__aeabi_dsub>
 800e52e:	4622      	mov	r2, r4
 800e530:	4606      	mov	r6, r0
 800e532:	460f      	mov	r7, r1
 800e534:	462b      	mov	r3, r5
 800e536:	4650      	mov	r0, sl
 800e538:	4659      	mov	r1, fp
 800e53a:	f7f1 feb5 	bl	80002a8 <__aeabi_dsub>
 800e53e:	4642      	mov	r2, r8
 800e540:	464b      	mov	r3, r9
 800e542:	f7f1 feb1 	bl	80002a8 <__aeabi_dsub>
 800e546:	4602      	mov	r2, r0
 800e548:	460b      	mov	r3, r1
 800e54a:	4630      	mov	r0, r6
 800e54c:	4639      	mov	r1, r7
 800e54e:	e7d9      	b.n	800e504 <__kernel_cos+0xf4>
 800e550:	2000      	movs	r0, #0
 800e552:	490f      	ldr	r1, [pc, #60]	; (800e590 <__kernel_cos+0x180>)
 800e554:	e7d8      	b.n	800e508 <__kernel_cos+0xf8>
 800e556:	bf00      	nop
 800e558:	be8838d4 	.word	0xbe8838d4
 800e55c:	bda8fae9 	.word	0xbda8fae9
 800e560:	bdb4b1c4 	.word	0xbdb4b1c4
 800e564:	3e21ee9e 	.word	0x3e21ee9e
 800e568:	809c52ad 	.word	0x809c52ad
 800e56c:	3e927e4f 	.word	0x3e927e4f
 800e570:	19cb1590 	.word	0x19cb1590
 800e574:	3efa01a0 	.word	0x3efa01a0
 800e578:	16c15177 	.word	0x16c15177
 800e57c:	3f56c16c 	.word	0x3f56c16c
 800e580:	5555554c 	.word	0x5555554c
 800e584:	3fa55555 	.word	0x3fa55555
 800e588:	3fe00000 	.word	0x3fe00000
 800e58c:	3fd33332 	.word	0x3fd33332
 800e590:	3ff00000 	.word	0x3ff00000
 800e594:	3fe90000 	.word	0x3fe90000
 800e598:	3fd20000 	.word	0x3fd20000
 800e59c:	00000000 	.word	0x00000000

0800e5a0 <__kernel_rem_pio2>:
 800e5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a4:	ed2d 8b02 	vpush	{d8}
 800e5a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e5ac:	1ed4      	subs	r4, r2, #3
 800e5ae:	9308      	str	r3, [sp, #32]
 800e5b0:	9101      	str	r1, [sp, #4]
 800e5b2:	4bc5      	ldr	r3, [pc, #788]	; (800e8c8 <__kernel_rem_pio2+0x328>)
 800e5b4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e5b6:	9009      	str	r0, [sp, #36]	; 0x24
 800e5b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e5bc:	9304      	str	r3, [sp, #16]
 800e5be:	9b08      	ldr	r3, [sp, #32]
 800e5c0:	3b01      	subs	r3, #1
 800e5c2:	9307      	str	r3, [sp, #28]
 800e5c4:	2318      	movs	r3, #24
 800e5c6:	fb94 f4f3 	sdiv	r4, r4, r3
 800e5ca:	f06f 0317 	mvn.w	r3, #23
 800e5ce:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800e5d2:	fb04 3303 	mla	r3, r4, r3, r3
 800e5d6:	eb03 0a02 	add.w	sl, r3, r2
 800e5da:	9b04      	ldr	r3, [sp, #16]
 800e5dc:	9a07      	ldr	r2, [sp, #28]
 800e5de:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e8b8 <__kernel_rem_pio2+0x318>
 800e5e2:	eb03 0802 	add.w	r8, r3, r2
 800e5e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e5e8:	1aa7      	subs	r7, r4, r2
 800e5ea:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e5ee:	ae22      	add	r6, sp, #136	; 0x88
 800e5f0:	2500      	movs	r5, #0
 800e5f2:	4545      	cmp	r5, r8
 800e5f4:	dd13      	ble.n	800e61e <__kernel_rem_pio2+0x7e>
 800e5f6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800e8b8 <__kernel_rem_pio2+0x318>
 800e5fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e5fe:	2600      	movs	r6, #0
 800e600:	9b04      	ldr	r3, [sp, #16]
 800e602:	429e      	cmp	r6, r3
 800e604:	dc32      	bgt.n	800e66c <__kernel_rem_pio2+0xcc>
 800e606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e608:	9302      	str	r3, [sp, #8]
 800e60a:	9b08      	ldr	r3, [sp, #32]
 800e60c:	199d      	adds	r5, r3, r6
 800e60e:	ab22      	add	r3, sp, #136	; 0x88
 800e610:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e614:	9306      	str	r3, [sp, #24]
 800e616:	ec59 8b18 	vmov	r8, r9, d8
 800e61a:	2700      	movs	r7, #0
 800e61c:	e01f      	b.n	800e65e <__kernel_rem_pio2+0xbe>
 800e61e:	42ef      	cmn	r7, r5
 800e620:	d407      	bmi.n	800e632 <__kernel_rem_pio2+0x92>
 800e622:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e626:	f7f1 ff8d 	bl	8000544 <__aeabi_i2d>
 800e62a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e62e:	3501      	adds	r5, #1
 800e630:	e7df      	b.n	800e5f2 <__kernel_rem_pio2+0x52>
 800e632:	ec51 0b18 	vmov	r0, r1, d8
 800e636:	e7f8      	b.n	800e62a <__kernel_rem_pio2+0x8a>
 800e638:	9906      	ldr	r1, [sp, #24]
 800e63a:	9d02      	ldr	r5, [sp, #8]
 800e63c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800e640:	9106      	str	r1, [sp, #24]
 800e642:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800e646:	9502      	str	r5, [sp, #8]
 800e648:	f7f1 ffe6 	bl	8000618 <__aeabi_dmul>
 800e64c:	4602      	mov	r2, r0
 800e64e:	460b      	mov	r3, r1
 800e650:	4640      	mov	r0, r8
 800e652:	4649      	mov	r1, r9
 800e654:	f7f1 fe2a 	bl	80002ac <__adddf3>
 800e658:	3701      	adds	r7, #1
 800e65a:	4680      	mov	r8, r0
 800e65c:	4689      	mov	r9, r1
 800e65e:	9b07      	ldr	r3, [sp, #28]
 800e660:	429f      	cmp	r7, r3
 800e662:	dde9      	ble.n	800e638 <__kernel_rem_pio2+0x98>
 800e664:	e8eb 8902 	strd	r8, r9, [fp], #8
 800e668:	3601      	adds	r6, #1
 800e66a:	e7c9      	b.n	800e600 <__kernel_rem_pio2+0x60>
 800e66c:	9b04      	ldr	r3, [sp, #16]
 800e66e:	aa0e      	add	r2, sp, #56	; 0x38
 800e670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e674:	930c      	str	r3, [sp, #48]	; 0x30
 800e676:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e678:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e67c:	9c04      	ldr	r4, [sp, #16]
 800e67e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e680:	ab9a      	add	r3, sp, #616	; 0x268
 800e682:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800e686:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e68a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e68e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800e692:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800e696:	ab9a      	add	r3, sp, #616	; 0x268
 800e698:	445b      	add	r3, fp
 800e69a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800e69e:	2500      	movs	r5, #0
 800e6a0:	1b63      	subs	r3, r4, r5
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	dc78      	bgt.n	800e798 <__kernel_rem_pio2+0x1f8>
 800e6a6:	4650      	mov	r0, sl
 800e6a8:	ec49 8b10 	vmov	d0, r8, r9
 800e6ac:	f000 fc00 	bl	800eeb0 <scalbn>
 800e6b0:	ec57 6b10 	vmov	r6, r7, d0
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e6ba:	ee10 0a10 	vmov	r0, s0
 800e6be:	4639      	mov	r1, r7
 800e6c0:	f7f1 ffaa 	bl	8000618 <__aeabi_dmul>
 800e6c4:	ec41 0b10 	vmov	d0, r0, r1
 800e6c8:	f000 fb6e 	bl	800eda8 <floor>
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	ec51 0b10 	vmov	r0, r1, d0
 800e6d2:	4b7e      	ldr	r3, [pc, #504]	; (800e8cc <__kernel_rem_pio2+0x32c>)
 800e6d4:	f7f1 ffa0 	bl	8000618 <__aeabi_dmul>
 800e6d8:	4602      	mov	r2, r0
 800e6da:	460b      	mov	r3, r1
 800e6dc:	4630      	mov	r0, r6
 800e6de:	4639      	mov	r1, r7
 800e6e0:	f7f1 fde2 	bl	80002a8 <__aeabi_dsub>
 800e6e4:	460f      	mov	r7, r1
 800e6e6:	4606      	mov	r6, r0
 800e6e8:	f7f2 fa46 	bl	8000b78 <__aeabi_d2iz>
 800e6ec:	9006      	str	r0, [sp, #24]
 800e6ee:	f7f1 ff29 	bl	8000544 <__aeabi_i2d>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	4639      	mov	r1, r7
 800e6fa:	f7f1 fdd5 	bl	80002a8 <__aeabi_dsub>
 800e6fe:	f1ba 0f00 	cmp.w	sl, #0
 800e702:	4606      	mov	r6, r0
 800e704:	460f      	mov	r7, r1
 800e706:	dd6c      	ble.n	800e7e2 <__kernel_rem_pio2+0x242>
 800e708:	1e62      	subs	r2, r4, #1
 800e70a:	ab0e      	add	r3, sp, #56	; 0x38
 800e70c:	f1ca 0118 	rsb	r1, sl, #24
 800e710:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e714:	9d06      	ldr	r5, [sp, #24]
 800e716:	fa40 f301 	asr.w	r3, r0, r1
 800e71a:	441d      	add	r5, r3
 800e71c:	408b      	lsls	r3, r1
 800e71e:	1ac0      	subs	r0, r0, r3
 800e720:	ab0e      	add	r3, sp, #56	; 0x38
 800e722:	9506      	str	r5, [sp, #24]
 800e724:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e728:	f1ca 0317 	rsb	r3, sl, #23
 800e72c:	fa40 f303 	asr.w	r3, r0, r3
 800e730:	9302      	str	r3, [sp, #8]
 800e732:	9b02      	ldr	r3, [sp, #8]
 800e734:	2b00      	cmp	r3, #0
 800e736:	dd62      	ble.n	800e7fe <__kernel_rem_pio2+0x25e>
 800e738:	9b06      	ldr	r3, [sp, #24]
 800e73a:	2200      	movs	r2, #0
 800e73c:	3301      	adds	r3, #1
 800e73e:	9306      	str	r3, [sp, #24]
 800e740:	4615      	mov	r5, r2
 800e742:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e746:	4294      	cmp	r4, r2
 800e748:	f300 8095 	bgt.w	800e876 <__kernel_rem_pio2+0x2d6>
 800e74c:	f1ba 0f00 	cmp.w	sl, #0
 800e750:	dd07      	ble.n	800e762 <__kernel_rem_pio2+0x1c2>
 800e752:	f1ba 0f01 	cmp.w	sl, #1
 800e756:	f000 80a2 	beq.w	800e89e <__kernel_rem_pio2+0x2fe>
 800e75a:	f1ba 0f02 	cmp.w	sl, #2
 800e75e:	f000 80c1 	beq.w	800e8e4 <__kernel_rem_pio2+0x344>
 800e762:	9b02      	ldr	r3, [sp, #8]
 800e764:	2b02      	cmp	r3, #2
 800e766:	d14a      	bne.n	800e7fe <__kernel_rem_pio2+0x25e>
 800e768:	4632      	mov	r2, r6
 800e76a:	463b      	mov	r3, r7
 800e76c:	2000      	movs	r0, #0
 800e76e:	4958      	ldr	r1, [pc, #352]	; (800e8d0 <__kernel_rem_pio2+0x330>)
 800e770:	f7f1 fd9a 	bl	80002a8 <__aeabi_dsub>
 800e774:	4606      	mov	r6, r0
 800e776:	460f      	mov	r7, r1
 800e778:	2d00      	cmp	r5, #0
 800e77a:	d040      	beq.n	800e7fe <__kernel_rem_pio2+0x25e>
 800e77c:	4650      	mov	r0, sl
 800e77e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e8c0 <__kernel_rem_pio2+0x320>
 800e782:	f000 fb95 	bl	800eeb0 <scalbn>
 800e786:	4630      	mov	r0, r6
 800e788:	4639      	mov	r1, r7
 800e78a:	ec53 2b10 	vmov	r2, r3, d0
 800e78e:	f7f1 fd8b 	bl	80002a8 <__aeabi_dsub>
 800e792:	4606      	mov	r6, r0
 800e794:	460f      	mov	r7, r1
 800e796:	e032      	b.n	800e7fe <__kernel_rem_pio2+0x25e>
 800e798:	2200      	movs	r2, #0
 800e79a:	4b4e      	ldr	r3, [pc, #312]	; (800e8d4 <__kernel_rem_pio2+0x334>)
 800e79c:	4640      	mov	r0, r8
 800e79e:	4649      	mov	r1, r9
 800e7a0:	f7f1 ff3a 	bl	8000618 <__aeabi_dmul>
 800e7a4:	f7f2 f9e8 	bl	8000b78 <__aeabi_d2iz>
 800e7a8:	f7f1 fecc 	bl	8000544 <__aeabi_i2d>
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4b4a      	ldr	r3, [pc, #296]	; (800e8d8 <__kernel_rem_pio2+0x338>)
 800e7b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7b4:	f7f1 ff30 	bl	8000618 <__aeabi_dmul>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	460b      	mov	r3, r1
 800e7bc:	4640      	mov	r0, r8
 800e7be:	4649      	mov	r1, r9
 800e7c0:	f7f1 fd72 	bl	80002a8 <__aeabi_dsub>
 800e7c4:	f7f2 f9d8 	bl	8000b78 <__aeabi_d2iz>
 800e7c8:	ab0e      	add	r3, sp, #56	; 0x38
 800e7ca:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e7ce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e7d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7d6:	f7f1 fd69 	bl	80002ac <__adddf3>
 800e7da:	3501      	adds	r5, #1
 800e7dc:	4680      	mov	r8, r0
 800e7de:	4689      	mov	r9, r1
 800e7e0:	e75e      	b.n	800e6a0 <__kernel_rem_pio2+0x100>
 800e7e2:	d105      	bne.n	800e7f0 <__kernel_rem_pio2+0x250>
 800e7e4:	1e63      	subs	r3, r4, #1
 800e7e6:	aa0e      	add	r2, sp, #56	; 0x38
 800e7e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e7ec:	15c3      	asrs	r3, r0, #23
 800e7ee:	e79f      	b.n	800e730 <__kernel_rem_pio2+0x190>
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	4b3a      	ldr	r3, [pc, #232]	; (800e8dc <__kernel_rem_pio2+0x33c>)
 800e7f4:	f7f2 f996 	bl	8000b24 <__aeabi_dcmpge>
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d139      	bne.n	800e870 <__kernel_rem_pio2+0x2d0>
 800e7fc:	9002      	str	r0, [sp, #8]
 800e7fe:	2200      	movs	r2, #0
 800e800:	2300      	movs	r3, #0
 800e802:	4630      	mov	r0, r6
 800e804:	4639      	mov	r1, r7
 800e806:	f7f2 f96f 	bl	8000ae8 <__aeabi_dcmpeq>
 800e80a:	2800      	cmp	r0, #0
 800e80c:	f000 80c7 	beq.w	800e99e <__kernel_rem_pio2+0x3fe>
 800e810:	1e65      	subs	r5, r4, #1
 800e812:	462b      	mov	r3, r5
 800e814:	2200      	movs	r2, #0
 800e816:	9904      	ldr	r1, [sp, #16]
 800e818:	428b      	cmp	r3, r1
 800e81a:	da6a      	bge.n	800e8f2 <__kernel_rem_pio2+0x352>
 800e81c:	2a00      	cmp	r2, #0
 800e81e:	f000 8088 	beq.w	800e932 <__kernel_rem_pio2+0x392>
 800e822:	ab0e      	add	r3, sp, #56	; 0x38
 800e824:	f1aa 0a18 	sub.w	sl, sl, #24
 800e828:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f000 80b4 	beq.w	800e99a <__kernel_rem_pio2+0x3fa>
 800e832:	4650      	mov	r0, sl
 800e834:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800e8c0 <__kernel_rem_pio2+0x320>
 800e838:	f000 fb3a 	bl	800eeb0 <scalbn>
 800e83c:	00ec      	lsls	r4, r5, #3
 800e83e:	ab72      	add	r3, sp, #456	; 0x1c8
 800e840:	191e      	adds	r6, r3, r4
 800e842:	ec59 8b10 	vmov	r8, r9, d0
 800e846:	f106 0a08 	add.w	sl, r6, #8
 800e84a:	462f      	mov	r7, r5
 800e84c:	2f00      	cmp	r7, #0
 800e84e:	f280 80df 	bge.w	800ea10 <__kernel_rem_pio2+0x470>
 800e852:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800e8b8 <__kernel_rem_pio2+0x318>
 800e856:	f04f 0a00 	mov.w	sl, #0
 800e85a:	eba5 030a 	sub.w	r3, r5, sl
 800e85e:	2b00      	cmp	r3, #0
 800e860:	f2c0 810a 	blt.w	800ea78 <__kernel_rem_pio2+0x4d8>
 800e864:	f8df b078 	ldr.w	fp, [pc, #120]	; 800e8e0 <__kernel_rem_pio2+0x340>
 800e868:	ec59 8b18 	vmov	r8, r9, d8
 800e86c:	2700      	movs	r7, #0
 800e86e:	e0f5      	b.n	800ea5c <__kernel_rem_pio2+0x4bc>
 800e870:	2302      	movs	r3, #2
 800e872:	9302      	str	r3, [sp, #8]
 800e874:	e760      	b.n	800e738 <__kernel_rem_pio2+0x198>
 800e876:	ab0e      	add	r3, sp, #56	; 0x38
 800e878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e87c:	b94d      	cbnz	r5, 800e892 <__kernel_rem_pio2+0x2f2>
 800e87e:	b12b      	cbz	r3, 800e88c <__kernel_rem_pio2+0x2ec>
 800e880:	a80e      	add	r0, sp, #56	; 0x38
 800e882:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e886:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e88a:	2301      	movs	r3, #1
 800e88c:	3201      	adds	r2, #1
 800e88e:	461d      	mov	r5, r3
 800e890:	e759      	b.n	800e746 <__kernel_rem_pio2+0x1a6>
 800e892:	a80e      	add	r0, sp, #56	; 0x38
 800e894:	1acb      	subs	r3, r1, r3
 800e896:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e89a:	462b      	mov	r3, r5
 800e89c:	e7f6      	b.n	800e88c <__kernel_rem_pio2+0x2ec>
 800e89e:	1e62      	subs	r2, r4, #1
 800e8a0:	ab0e      	add	r3, sp, #56	; 0x38
 800e8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e8aa:	a90e      	add	r1, sp, #56	; 0x38
 800e8ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e8b0:	e757      	b.n	800e762 <__kernel_rem_pio2+0x1c2>
 800e8b2:	bf00      	nop
 800e8b4:	f3af 8000 	nop.w
	...
 800e8c4:	3ff00000 	.word	0x3ff00000
 800e8c8:	08010a70 	.word	0x08010a70
 800e8cc:	40200000 	.word	0x40200000
 800e8d0:	3ff00000 	.word	0x3ff00000
 800e8d4:	3e700000 	.word	0x3e700000
 800e8d8:	41700000 	.word	0x41700000
 800e8dc:	3fe00000 	.word	0x3fe00000
 800e8e0:	08010a30 	.word	0x08010a30
 800e8e4:	1e62      	subs	r2, r4, #1
 800e8e6:	ab0e      	add	r3, sp, #56	; 0x38
 800e8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8ec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e8f0:	e7db      	b.n	800e8aa <__kernel_rem_pio2+0x30a>
 800e8f2:	a90e      	add	r1, sp, #56	; 0x38
 800e8f4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e8f8:	3b01      	subs	r3, #1
 800e8fa:	430a      	orrs	r2, r1
 800e8fc:	e78b      	b.n	800e816 <__kernel_rem_pio2+0x276>
 800e8fe:	3301      	adds	r3, #1
 800e900:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e904:	2900      	cmp	r1, #0
 800e906:	d0fa      	beq.n	800e8fe <__kernel_rem_pio2+0x35e>
 800e908:	9a08      	ldr	r2, [sp, #32]
 800e90a:	4422      	add	r2, r4
 800e90c:	00d2      	lsls	r2, r2, #3
 800e90e:	a922      	add	r1, sp, #136	; 0x88
 800e910:	18e3      	adds	r3, r4, r3
 800e912:	9206      	str	r2, [sp, #24]
 800e914:	440a      	add	r2, r1
 800e916:	9302      	str	r3, [sp, #8]
 800e918:	f10b 0108 	add.w	r1, fp, #8
 800e91c:	f102 0308 	add.w	r3, r2, #8
 800e920:	1c66      	adds	r6, r4, #1
 800e922:	910a      	str	r1, [sp, #40]	; 0x28
 800e924:	2500      	movs	r5, #0
 800e926:	930d      	str	r3, [sp, #52]	; 0x34
 800e928:	9b02      	ldr	r3, [sp, #8]
 800e92a:	42b3      	cmp	r3, r6
 800e92c:	da04      	bge.n	800e938 <__kernel_rem_pio2+0x398>
 800e92e:	461c      	mov	r4, r3
 800e930:	e6a6      	b.n	800e680 <__kernel_rem_pio2+0xe0>
 800e932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e934:	2301      	movs	r3, #1
 800e936:	e7e3      	b.n	800e900 <__kernel_rem_pio2+0x360>
 800e938:	9b06      	ldr	r3, [sp, #24]
 800e93a:	18ef      	adds	r7, r5, r3
 800e93c:	ab22      	add	r3, sp, #136	; 0x88
 800e93e:	441f      	add	r7, r3
 800e940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e942:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e946:	f7f1 fdfd 	bl	8000544 <__aeabi_i2d>
 800e94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e94c:	461c      	mov	r4, r3
 800e94e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e950:	e9c7 0100 	strd	r0, r1, [r7]
 800e954:	eb03 0b05 	add.w	fp, r3, r5
 800e958:	2700      	movs	r7, #0
 800e95a:	f04f 0800 	mov.w	r8, #0
 800e95e:	f04f 0900 	mov.w	r9, #0
 800e962:	9b07      	ldr	r3, [sp, #28]
 800e964:	429f      	cmp	r7, r3
 800e966:	dd08      	ble.n	800e97a <__kernel_rem_pio2+0x3da>
 800e968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e96a:	aa72      	add	r2, sp, #456	; 0x1c8
 800e96c:	18eb      	adds	r3, r5, r3
 800e96e:	4413      	add	r3, r2
 800e970:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800e974:	3601      	adds	r6, #1
 800e976:	3508      	adds	r5, #8
 800e978:	e7d6      	b.n	800e928 <__kernel_rem_pio2+0x388>
 800e97a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e97e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e982:	f7f1 fe49 	bl	8000618 <__aeabi_dmul>
 800e986:	4602      	mov	r2, r0
 800e988:	460b      	mov	r3, r1
 800e98a:	4640      	mov	r0, r8
 800e98c:	4649      	mov	r1, r9
 800e98e:	f7f1 fc8d 	bl	80002ac <__adddf3>
 800e992:	3701      	adds	r7, #1
 800e994:	4680      	mov	r8, r0
 800e996:	4689      	mov	r9, r1
 800e998:	e7e3      	b.n	800e962 <__kernel_rem_pio2+0x3c2>
 800e99a:	3d01      	subs	r5, #1
 800e99c:	e741      	b.n	800e822 <__kernel_rem_pio2+0x282>
 800e99e:	f1ca 0000 	rsb	r0, sl, #0
 800e9a2:	ec47 6b10 	vmov	d0, r6, r7
 800e9a6:	f000 fa83 	bl	800eeb0 <scalbn>
 800e9aa:	ec57 6b10 	vmov	r6, r7, d0
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	4b99      	ldr	r3, [pc, #612]	; (800ec18 <__kernel_rem_pio2+0x678>)
 800e9b2:	ee10 0a10 	vmov	r0, s0
 800e9b6:	4639      	mov	r1, r7
 800e9b8:	f7f2 f8b4 	bl	8000b24 <__aeabi_dcmpge>
 800e9bc:	b1f8      	cbz	r0, 800e9fe <__kernel_rem_pio2+0x45e>
 800e9be:	2200      	movs	r2, #0
 800e9c0:	4b96      	ldr	r3, [pc, #600]	; (800ec1c <__kernel_rem_pio2+0x67c>)
 800e9c2:	4630      	mov	r0, r6
 800e9c4:	4639      	mov	r1, r7
 800e9c6:	f7f1 fe27 	bl	8000618 <__aeabi_dmul>
 800e9ca:	f7f2 f8d5 	bl	8000b78 <__aeabi_d2iz>
 800e9ce:	4680      	mov	r8, r0
 800e9d0:	f7f1 fdb8 	bl	8000544 <__aeabi_i2d>
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	4b90      	ldr	r3, [pc, #576]	; (800ec18 <__kernel_rem_pio2+0x678>)
 800e9d8:	f7f1 fe1e 	bl	8000618 <__aeabi_dmul>
 800e9dc:	460b      	mov	r3, r1
 800e9de:	4602      	mov	r2, r0
 800e9e0:	4639      	mov	r1, r7
 800e9e2:	4630      	mov	r0, r6
 800e9e4:	f7f1 fc60 	bl	80002a8 <__aeabi_dsub>
 800e9e8:	f7f2 f8c6 	bl	8000b78 <__aeabi_d2iz>
 800e9ec:	1c65      	adds	r5, r4, #1
 800e9ee:	ab0e      	add	r3, sp, #56	; 0x38
 800e9f0:	f10a 0a18 	add.w	sl, sl, #24
 800e9f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e9f8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e9fc:	e719      	b.n	800e832 <__kernel_rem_pio2+0x292>
 800e9fe:	4630      	mov	r0, r6
 800ea00:	4639      	mov	r1, r7
 800ea02:	f7f2 f8b9 	bl	8000b78 <__aeabi_d2iz>
 800ea06:	ab0e      	add	r3, sp, #56	; 0x38
 800ea08:	4625      	mov	r5, r4
 800ea0a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ea0e:	e710      	b.n	800e832 <__kernel_rem_pio2+0x292>
 800ea10:	ab0e      	add	r3, sp, #56	; 0x38
 800ea12:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ea16:	f7f1 fd95 	bl	8000544 <__aeabi_i2d>
 800ea1a:	4642      	mov	r2, r8
 800ea1c:	464b      	mov	r3, r9
 800ea1e:	f7f1 fdfb 	bl	8000618 <__aeabi_dmul>
 800ea22:	2200      	movs	r2, #0
 800ea24:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ea28:	4b7c      	ldr	r3, [pc, #496]	; (800ec1c <__kernel_rem_pio2+0x67c>)
 800ea2a:	4640      	mov	r0, r8
 800ea2c:	4649      	mov	r1, r9
 800ea2e:	f7f1 fdf3 	bl	8000618 <__aeabi_dmul>
 800ea32:	3f01      	subs	r7, #1
 800ea34:	4680      	mov	r8, r0
 800ea36:	4689      	mov	r9, r1
 800ea38:	e708      	b.n	800e84c <__kernel_rem_pio2+0x2ac>
 800ea3a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ea3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea42:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ea46:	f7f1 fde7 	bl	8000618 <__aeabi_dmul>
 800ea4a:	4602      	mov	r2, r0
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	4640      	mov	r0, r8
 800ea50:	4649      	mov	r1, r9
 800ea52:	f7f1 fc2b 	bl	80002ac <__adddf3>
 800ea56:	3701      	adds	r7, #1
 800ea58:	4680      	mov	r8, r0
 800ea5a:	4689      	mov	r9, r1
 800ea5c:	9b04      	ldr	r3, [sp, #16]
 800ea5e:	429f      	cmp	r7, r3
 800ea60:	dc01      	bgt.n	800ea66 <__kernel_rem_pio2+0x4c6>
 800ea62:	45ba      	cmp	sl, r7
 800ea64:	dae9      	bge.n	800ea3a <__kernel_rem_pio2+0x49a>
 800ea66:	ab4a      	add	r3, sp, #296	; 0x128
 800ea68:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ea6c:	e9c3 8900 	strd	r8, r9, [r3]
 800ea70:	f10a 0a01 	add.w	sl, sl, #1
 800ea74:	3e08      	subs	r6, #8
 800ea76:	e6f0      	b.n	800e85a <__kernel_rem_pio2+0x2ba>
 800ea78:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ea7a:	2b03      	cmp	r3, #3
 800ea7c:	d85b      	bhi.n	800eb36 <__kernel_rem_pio2+0x596>
 800ea7e:	e8df f003 	tbb	[pc, r3]
 800ea82:	264a      	.short	0x264a
 800ea84:	0226      	.short	0x0226
 800ea86:	ab9a      	add	r3, sp, #616	; 0x268
 800ea88:	441c      	add	r4, r3
 800ea8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ea8e:	46a2      	mov	sl, r4
 800ea90:	46ab      	mov	fp, r5
 800ea92:	f1bb 0f00 	cmp.w	fp, #0
 800ea96:	dc6c      	bgt.n	800eb72 <__kernel_rem_pio2+0x5d2>
 800ea98:	46a2      	mov	sl, r4
 800ea9a:	46ab      	mov	fp, r5
 800ea9c:	f1bb 0f01 	cmp.w	fp, #1
 800eaa0:	f300 8086 	bgt.w	800ebb0 <__kernel_rem_pio2+0x610>
 800eaa4:	2000      	movs	r0, #0
 800eaa6:	2100      	movs	r1, #0
 800eaa8:	2d01      	cmp	r5, #1
 800eaaa:	f300 80a0 	bgt.w	800ebee <__kernel_rem_pio2+0x64e>
 800eaae:	9b02      	ldr	r3, [sp, #8]
 800eab0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800eab4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	f040 809e 	bne.w	800ebfa <__kernel_rem_pio2+0x65a>
 800eabe:	9b01      	ldr	r3, [sp, #4]
 800eac0:	e9c3 7800 	strd	r7, r8, [r3]
 800eac4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800eac8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800eacc:	e033      	b.n	800eb36 <__kernel_rem_pio2+0x596>
 800eace:	3408      	adds	r4, #8
 800ead0:	ab4a      	add	r3, sp, #296	; 0x128
 800ead2:	441c      	add	r4, r3
 800ead4:	462e      	mov	r6, r5
 800ead6:	2000      	movs	r0, #0
 800ead8:	2100      	movs	r1, #0
 800eada:	2e00      	cmp	r6, #0
 800eadc:	da3a      	bge.n	800eb54 <__kernel_rem_pio2+0x5b4>
 800eade:	9b02      	ldr	r3, [sp, #8]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d03d      	beq.n	800eb60 <__kernel_rem_pio2+0x5c0>
 800eae4:	4602      	mov	r2, r0
 800eae6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eaea:	9c01      	ldr	r4, [sp, #4]
 800eaec:	e9c4 2300 	strd	r2, r3, [r4]
 800eaf0:	4602      	mov	r2, r0
 800eaf2:	460b      	mov	r3, r1
 800eaf4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800eaf8:	f7f1 fbd6 	bl	80002a8 <__aeabi_dsub>
 800eafc:	ae4c      	add	r6, sp, #304	; 0x130
 800eafe:	2401      	movs	r4, #1
 800eb00:	42a5      	cmp	r5, r4
 800eb02:	da30      	bge.n	800eb66 <__kernel_rem_pio2+0x5c6>
 800eb04:	9b02      	ldr	r3, [sp, #8]
 800eb06:	b113      	cbz	r3, 800eb0e <__kernel_rem_pio2+0x56e>
 800eb08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	9b01      	ldr	r3, [sp, #4]
 800eb10:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800eb14:	e00f      	b.n	800eb36 <__kernel_rem_pio2+0x596>
 800eb16:	ab9a      	add	r3, sp, #616	; 0x268
 800eb18:	441c      	add	r4, r3
 800eb1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800eb1e:	2000      	movs	r0, #0
 800eb20:	2100      	movs	r1, #0
 800eb22:	2d00      	cmp	r5, #0
 800eb24:	da10      	bge.n	800eb48 <__kernel_rem_pio2+0x5a8>
 800eb26:	9b02      	ldr	r3, [sp, #8]
 800eb28:	b113      	cbz	r3, 800eb30 <__kernel_rem_pio2+0x590>
 800eb2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb2e:	4619      	mov	r1, r3
 800eb30:	9b01      	ldr	r3, [sp, #4]
 800eb32:	e9c3 0100 	strd	r0, r1, [r3]
 800eb36:	9b06      	ldr	r3, [sp, #24]
 800eb38:	f003 0007 	and.w	r0, r3, #7
 800eb3c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800eb40:	ecbd 8b02 	vpop	{d8}
 800eb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb48:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eb4c:	f7f1 fbae 	bl	80002ac <__adddf3>
 800eb50:	3d01      	subs	r5, #1
 800eb52:	e7e6      	b.n	800eb22 <__kernel_rem_pio2+0x582>
 800eb54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800eb58:	f7f1 fba8 	bl	80002ac <__adddf3>
 800eb5c:	3e01      	subs	r6, #1
 800eb5e:	e7bc      	b.n	800eada <__kernel_rem_pio2+0x53a>
 800eb60:	4602      	mov	r2, r0
 800eb62:	460b      	mov	r3, r1
 800eb64:	e7c1      	b.n	800eaea <__kernel_rem_pio2+0x54a>
 800eb66:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800eb6a:	f7f1 fb9f 	bl	80002ac <__adddf3>
 800eb6e:	3401      	adds	r4, #1
 800eb70:	e7c6      	b.n	800eb00 <__kernel_rem_pio2+0x560>
 800eb72:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800eb76:	ed3a 7b02 	vldmdb	sl!, {d7}
 800eb7a:	4640      	mov	r0, r8
 800eb7c:	ec53 2b17 	vmov	r2, r3, d7
 800eb80:	4649      	mov	r1, r9
 800eb82:	ed8d 7b04 	vstr	d7, [sp, #16]
 800eb86:	f7f1 fb91 	bl	80002ac <__adddf3>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	460b      	mov	r3, r1
 800eb8e:	4606      	mov	r6, r0
 800eb90:	460f      	mov	r7, r1
 800eb92:	4640      	mov	r0, r8
 800eb94:	4649      	mov	r1, r9
 800eb96:	f7f1 fb87 	bl	80002a8 <__aeabi_dsub>
 800eb9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb9e:	f7f1 fb85 	bl	80002ac <__adddf3>
 800eba2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800eba6:	e9ca 0100 	strd	r0, r1, [sl]
 800ebaa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800ebae:	e770      	b.n	800ea92 <__kernel_rem_pio2+0x4f2>
 800ebb0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800ebb4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ebb8:	4630      	mov	r0, r6
 800ebba:	ec53 2b17 	vmov	r2, r3, d7
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ebc4:	f7f1 fb72 	bl	80002ac <__adddf3>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	460b      	mov	r3, r1
 800ebcc:	4680      	mov	r8, r0
 800ebce:	4689      	mov	r9, r1
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	4639      	mov	r1, r7
 800ebd4:	f7f1 fb68 	bl	80002a8 <__aeabi_dsub>
 800ebd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebdc:	f7f1 fb66 	bl	80002ac <__adddf3>
 800ebe0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ebe4:	e9ca 0100 	strd	r0, r1, [sl]
 800ebe8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800ebec:	e756      	b.n	800ea9c <__kernel_rem_pio2+0x4fc>
 800ebee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ebf2:	f7f1 fb5b 	bl	80002ac <__adddf3>
 800ebf6:	3d01      	subs	r5, #1
 800ebf8:	e756      	b.n	800eaa8 <__kernel_rem_pio2+0x508>
 800ebfa:	9b01      	ldr	r3, [sp, #4]
 800ebfc:	9a01      	ldr	r2, [sp, #4]
 800ebfe:	601f      	str	r7, [r3, #0]
 800ec00:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800ec04:	605c      	str	r4, [r3, #4]
 800ec06:	609d      	str	r5, [r3, #8]
 800ec08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ec0c:	60d3      	str	r3, [r2, #12]
 800ec0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec12:	6110      	str	r0, [r2, #16]
 800ec14:	6153      	str	r3, [r2, #20]
 800ec16:	e78e      	b.n	800eb36 <__kernel_rem_pio2+0x596>
 800ec18:	41700000 	.word	0x41700000
 800ec1c:	3e700000 	.word	0x3e700000

0800ec20 <__kernel_sin>:
 800ec20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec24:	ec55 4b10 	vmov	r4, r5, d0
 800ec28:	b085      	sub	sp, #20
 800ec2a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ec2e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ec32:	ed8d 1b00 	vstr	d1, [sp]
 800ec36:	9002      	str	r0, [sp, #8]
 800ec38:	da06      	bge.n	800ec48 <__kernel_sin+0x28>
 800ec3a:	ee10 0a10 	vmov	r0, s0
 800ec3e:	4629      	mov	r1, r5
 800ec40:	f7f1 ff9a 	bl	8000b78 <__aeabi_d2iz>
 800ec44:	2800      	cmp	r0, #0
 800ec46:	d051      	beq.n	800ecec <__kernel_sin+0xcc>
 800ec48:	4622      	mov	r2, r4
 800ec4a:	462b      	mov	r3, r5
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	4629      	mov	r1, r5
 800ec50:	f7f1 fce2 	bl	8000618 <__aeabi_dmul>
 800ec54:	4682      	mov	sl, r0
 800ec56:	468b      	mov	fp, r1
 800ec58:	4602      	mov	r2, r0
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	4629      	mov	r1, r5
 800ec60:	f7f1 fcda 	bl	8000618 <__aeabi_dmul>
 800ec64:	a341      	add	r3, pc, #260	; (adr r3, 800ed6c <__kernel_sin+0x14c>)
 800ec66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec6a:	4680      	mov	r8, r0
 800ec6c:	4689      	mov	r9, r1
 800ec6e:	4650      	mov	r0, sl
 800ec70:	4659      	mov	r1, fp
 800ec72:	f7f1 fcd1 	bl	8000618 <__aeabi_dmul>
 800ec76:	a33f      	add	r3, pc, #252	; (adr r3, 800ed74 <__kernel_sin+0x154>)
 800ec78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7c:	f7f1 fb14 	bl	80002a8 <__aeabi_dsub>
 800ec80:	4652      	mov	r2, sl
 800ec82:	465b      	mov	r3, fp
 800ec84:	f7f1 fcc8 	bl	8000618 <__aeabi_dmul>
 800ec88:	a33c      	add	r3, pc, #240	; (adr r3, 800ed7c <__kernel_sin+0x15c>)
 800ec8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec8e:	f7f1 fb0d 	bl	80002ac <__adddf3>
 800ec92:	4652      	mov	r2, sl
 800ec94:	465b      	mov	r3, fp
 800ec96:	f7f1 fcbf 	bl	8000618 <__aeabi_dmul>
 800ec9a:	a33a      	add	r3, pc, #232	; (adr r3, 800ed84 <__kernel_sin+0x164>)
 800ec9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eca0:	f7f1 fb02 	bl	80002a8 <__aeabi_dsub>
 800eca4:	4652      	mov	r2, sl
 800eca6:	465b      	mov	r3, fp
 800eca8:	f7f1 fcb6 	bl	8000618 <__aeabi_dmul>
 800ecac:	a337      	add	r3, pc, #220	; (adr r3, 800ed8c <__kernel_sin+0x16c>)
 800ecae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb2:	f7f1 fafb 	bl	80002ac <__adddf3>
 800ecb6:	9b02      	ldr	r3, [sp, #8]
 800ecb8:	4606      	mov	r6, r0
 800ecba:	460f      	mov	r7, r1
 800ecbc:	b9db      	cbnz	r3, 800ecf6 <__kernel_sin+0xd6>
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	4650      	mov	r0, sl
 800ecc4:	4659      	mov	r1, fp
 800ecc6:	f7f1 fca7 	bl	8000618 <__aeabi_dmul>
 800ecca:	a325      	add	r3, pc, #148	; (adr r3, 800ed60 <__kernel_sin+0x140>)
 800eccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd0:	f7f1 faea 	bl	80002a8 <__aeabi_dsub>
 800ecd4:	4642      	mov	r2, r8
 800ecd6:	464b      	mov	r3, r9
 800ecd8:	f7f1 fc9e 	bl	8000618 <__aeabi_dmul>
 800ecdc:	4602      	mov	r2, r0
 800ecde:	460b      	mov	r3, r1
 800ece0:	4620      	mov	r0, r4
 800ece2:	4629      	mov	r1, r5
 800ece4:	f7f1 fae2 	bl	80002ac <__adddf3>
 800ece8:	4604      	mov	r4, r0
 800ecea:	460d      	mov	r5, r1
 800ecec:	ec45 4b10 	vmov	d0, r4, r5
 800ecf0:	b005      	add	sp, #20
 800ecf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	4b1b      	ldr	r3, [pc, #108]	; (800ed68 <__kernel_sin+0x148>)
 800ecfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecfe:	f7f1 fc8b 	bl	8000618 <__aeabi_dmul>
 800ed02:	4632      	mov	r2, r6
 800ed04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed08:	463b      	mov	r3, r7
 800ed0a:	4640      	mov	r0, r8
 800ed0c:	4649      	mov	r1, r9
 800ed0e:	f7f1 fc83 	bl	8000618 <__aeabi_dmul>
 800ed12:	4602      	mov	r2, r0
 800ed14:	460b      	mov	r3, r1
 800ed16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed1a:	f7f1 fac5 	bl	80002a8 <__aeabi_dsub>
 800ed1e:	4652      	mov	r2, sl
 800ed20:	465b      	mov	r3, fp
 800ed22:	f7f1 fc79 	bl	8000618 <__aeabi_dmul>
 800ed26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed2a:	f7f1 fabd 	bl	80002a8 <__aeabi_dsub>
 800ed2e:	a30c      	add	r3, pc, #48	; (adr r3, 800ed60 <__kernel_sin+0x140>)
 800ed30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed34:	4606      	mov	r6, r0
 800ed36:	460f      	mov	r7, r1
 800ed38:	4640      	mov	r0, r8
 800ed3a:	4649      	mov	r1, r9
 800ed3c:	f7f1 fc6c 	bl	8000618 <__aeabi_dmul>
 800ed40:	4602      	mov	r2, r0
 800ed42:	460b      	mov	r3, r1
 800ed44:	4630      	mov	r0, r6
 800ed46:	4639      	mov	r1, r7
 800ed48:	f7f1 fab0 	bl	80002ac <__adddf3>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	460b      	mov	r3, r1
 800ed50:	4620      	mov	r0, r4
 800ed52:	4629      	mov	r1, r5
 800ed54:	f7f1 faa8 	bl	80002a8 <__aeabi_dsub>
 800ed58:	e7c6      	b.n	800ece8 <__kernel_sin+0xc8>
 800ed5a:	bf00      	nop
 800ed5c:	f3af 8000 	nop.w
 800ed60:	55555549 	.word	0x55555549
 800ed64:	3fc55555 	.word	0x3fc55555
 800ed68:	3fe00000 	.word	0x3fe00000
 800ed6c:	5acfd57c 	.word	0x5acfd57c
 800ed70:	3de5d93a 	.word	0x3de5d93a
 800ed74:	8a2b9ceb 	.word	0x8a2b9ceb
 800ed78:	3e5ae5e6 	.word	0x3e5ae5e6
 800ed7c:	57b1fe7d 	.word	0x57b1fe7d
 800ed80:	3ec71de3 	.word	0x3ec71de3
 800ed84:	19c161d5 	.word	0x19c161d5
 800ed88:	3f2a01a0 	.word	0x3f2a01a0
 800ed8c:	1110f8a6 	.word	0x1110f8a6
 800ed90:	3f811111 	.word	0x3f811111

0800ed94 <fabs>:
 800ed94:	ec51 0b10 	vmov	r0, r1, d0
 800ed98:	ee10 2a10 	vmov	r2, s0
 800ed9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eda0:	ec43 2b10 	vmov	d0, r2, r3
 800eda4:	4770      	bx	lr
	...

0800eda8 <floor>:
 800eda8:	ec51 0b10 	vmov	r0, r1, d0
 800edac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800edb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800edb8:	2e13      	cmp	r6, #19
 800edba:	460c      	mov	r4, r1
 800edbc:	ee10 5a10 	vmov	r5, s0
 800edc0:	4680      	mov	r8, r0
 800edc2:	dc34      	bgt.n	800ee2e <floor+0x86>
 800edc4:	2e00      	cmp	r6, #0
 800edc6:	da16      	bge.n	800edf6 <floor+0x4e>
 800edc8:	a335      	add	r3, pc, #212	; (adr r3, 800eea0 <floor+0xf8>)
 800edca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edce:	f7f1 fa6d 	bl	80002ac <__adddf3>
 800edd2:	2200      	movs	r2, #0
 800edd4:	2300      	movs	r3, #0
 800edd6:	f7f1 feaf 	bl	8000b38 <__aeabi_dcmpgt>
 800edda:	b148      	cbz	r0, 800edf0 <floor+0x48>
 800eddc:	2c00      	cmp	r4, #0
 800edde:	da59      	bge.n	800ee94 <floor+0xec>
 800ede0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ede4:	4a30      	ldr	r2, [pc, #192]	; (800eea8 <floor+0x100>)
 800ede6:	432b      	orrs	r3, r5
 800ede8:	2500      	movs	r5, #0
 800edea:	42ab      	cmp	r3, r5
 800edec:	bf18      	it	ne
 800edee:	4614      	movne	r4, r2
 800edf0:	4621      	mov	r1, r4
 800edf2:	4628      	mov	r0, r5
 800edf4:	e025      	b.n	800ee42 <floor+0x9a>
 800edf6:	4f2d      	ldr	r7, [pc, #180]	; (800eeac <floor+0x104>)
 800edf8:	4137      	asrs	r7, r6
 800edfa:	ea01 0307 	and.w	r3, r1, r7
 800edfe:	4303      	orrs	r3, r0
 800ee00:	d01f      	beq.n	800ee42 <floor+0x9a>
 800ee02:	a327      	add	r3, pc, #156	; (adr r3, 800eea0 <floor+0xf8>)
 800ee04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee08:	f7f1 fa50 	bl	80002ac <__adddf3>
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	2300      	movs	r3, #0
 800ee10:	f7f1 fe92 	bl	8000b38 <__aeabi_dcmpgt>
 800ee14:	2800      	cmp	r0, #0
 800ee16:	d0eb      	beq.n	800edf0 <floor+0x48>
 800ee18:	2c00      	cmp	r4, #0
 800ee1a:	bfbe      	ittt	lt
 800ee1c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ee20:	fa43 f606 	asrlt.w	r6, r3, r6
 800ee24:	19a4      	addlt	r4, r4, r6
 800ee26:	ea24 0407 	bic.w	r4, r4, r7
 800ee2a:	2500      	movs	r5, #0
 800ee2c:	e7e0      	b.n	800edf0 <floor+0x48>
 800ee2e:	2e33      	cmp	r6, #51	; 0x33
 800ee30:	dd0b      	ble.n	800ee4a <floor+0xa2>
 800ee32:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ee36:	d104      	bne.n	800ee42 <floor+0x9a>
 800ee38:	ee10 2a10 	vmov	r2, s0
 800ee3c:	460b      	mov	r3, r1
 800ee3e:	f7f1 fa35 	bl	80002ac <__adddf3>
 800ee42:	ec41 0b10 	vmov	d0, r0, r1
 800ee46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee4a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ee4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee52:	fa23 f707 	lsr.w	r7, r3, r7
 800ee56:	4207      	tst	r7, r0
 800ee58:	d0f3      	beq.n	800ee42 <floor+0x9a>
 800ee5a:	a311      	add	r3, pc, #68	; (adr r3, 800eea0 <floor+0xf8>)
 800ee5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee60:	f7f1 fa24 	bl	80002ac <__adddf3>
 800ee64:	2200      	movs	r2, #0
 800ee66:	2300      	movs	r3, #0
 800ee68:	f7f1 fe66 	bl	8000b38 <__aeabi_dcmpgt>
 800ee6c:	2800      	cmp	r0, #0
 800ee6e:	d0bf      	beq.n	800edf0 <floor+0x48>
 800ee70:	2c00      	cmp	r4, #0
 800ee72:	da02      	bge.n	800ee7a <floor+0xd2>
 800ee74:	2e14      	cmp	r6, #20
 800ee76:	d103      	bne.n	800ee80 <floor+0xd8>
 800ee78:	3401      	adds	r4, #1
 800ee7a:	ea25 0507 	bic.w	r5, r5, r7
 800ee7e:	e7b7      	b.n	800edf0 <floor+0x48>
 800ee80:	2301      	movs	r3, #1
 800ee82:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ee86:	fa03 f606 	lsl.w	r6, r3, r6
 800ee8a:	4435      	add	r5, r6
 800ee8c:	4545      	cmp	r5, r8
 800ee8e:	bf38      	it	cc
 800ee90:	18e4      	addcc	r4, r4, r3
 800ee92:	e7f2      	b.n	800ee7a <floor+0xd2>
 800ee94:	2500      	movs	r5, #0
 800ee96:	462c      	mov	r4, r5
 800ee98:	e7aa      	b.n	800edf0 <floor+0x48>
 800ee9a:	bf00      	nop
 800ee9c:	f3af 8000 	nop.w
 800eea0:	8800759c 	.word	0x8800759c
 800eea4:	7e37e43c 	.word	0x7e37e43c
 800eea8:	bff00000 	.word	0xbff00000
 800eeac:	000fffff 	.word	0x000fffff

0800eeb0 <scalbn>:
 800eeb0:	b570      	push	{r4, r5, r6, lr}
 800eeb2:	ec55 4b10 	vmov	r4, r5, d0
 800eeb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800eeba:	4606      	mov	r6, r0
 800eebc:	462b      	mov	r3, r5
 800eebe:	b9aa      	cbnz	r2, 800eeec <scalbn+0x3c>
 800eec0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eec4:	4323      	orrs	r3, r4
 800eec6:	d03b      	beq.n	800ef40 <scalbn+0x90>
 800eec8:	4b31      	ldr	r3, [pc, #196]	; (800ef90 <scalbn+0xe0>)
 800eeca:	4629      	mov	r1, r5
 800eecc:	2200      	movs	r2, #0
 800eece:	ee10 0a10 	vmov	r0, s0
 800eed2:	f7f1 fba1 	bl	8000618 <__aeabi_dmul>
 800eed6:	4b2f      	ldr	r3, [pc, #188]	; (800ef94 <scalbn+0xe4>)
 800eed8:	429e      	cmp	r6, r3
 800eeda:	4604      	mov	r4, r0
 800eedc:	460d      	mov	r5, r1
 800eede:	da12      	bge.n	800ef06 <scalbn+0x56>
 800eee0:	a327      	add	r3, pc, #156	; (adr r3, 800ef80 <scalbn+0xd0>)
 800eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee6:	f7f1 fb97 	bl	8000618 <__aeabi_dmul>
 800eeea:	e009      	b.n	800ef00 <scalbn+0x50>
 800eeec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800eef0:	428a      	cmp	r2, r1
 800eef2:	d10c      	bne.n	800ef0e <scalbn+0x5e>
 800eef4:	ee10 2a10 	vmov	r2, s0
 800eef8:	4620      	mov	r0, r4
 800eefa:	4629      	mov	r1, r5
 800eefc:	f7f1 f9d6 	bl	80002ac <__adddf3>
 800ef00:	4604      	mov	r4, r0
 800ef02:	460d      	mov	r5, r1
 800ef04:	e01c      	b.n	800ef40 <scalbn+0x90>
 800ef06:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	3a36      	subs	r2, #54	; 0x36
 800ef0e:	4432      	add	r2, r6
 800ef10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ef14:	428a      	cmp	r2, r1
 800ef16:	dd0b      	ble.n	800ef30 <scalbn+0x80>
 800ef18:	ec45 4b11 	vmov	d1, r4, r5
 800ef1c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ef88 <scalbn+0xd8>
 800ef20:	f000 f83c 	bl	800ef9c <copysign>
 800ef24:	a318      	add	r3, pc, #96	; (adr r3, 800ef88 <scalbn+0xd8>)
 800ef26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2a:	ec51 0b10 	vmov	r0, r1, d0
 800ef2e:	e7da      	b.n	800eee6 <scalbn+0x36>
 800ef30:	2a00      	cmp	r2, #0
 800ef32:	dd08      	ble.n	800ef46 <scalbn+0x96>
 800ef34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef40:	ec45 4b10 	vmov	d0, r4, r5
 800ef44:	bd70      	pop	{r4, r5, r6, pc}
 800ef46:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ef4a:	da0d      	bge.n	800ef68 <scalbn+0xb8>
 800ef4c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ef50:	429e      	cmp	r6, r3
 800ef52:	ec45 4b11 	vmov	d1, r4, r5
 800ef56:	dce1      	bgt.n	800ef1c <scalbn+0x6c>
 800ef58:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ef80 <scalbn+0xd0>
 800ef5c:	f000 f81e 	bl	800ef9c <copysign>
 800ef60:	a307      	add	r3, pc, #28	; (adr r3, 800ef80 <scalbn+0xd0>)
 800ef62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef66:	e7e0      	b.n	800ef2a <scalbn+0x7a>
 800ef68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef6c:	3236      	adds	r2, #54	; 0x36
 800ef6e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef72:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef76:	4620      	mov	r0, r4
 800ef78:	4629      	mov	r1, r5
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	4b06      	ldr	r3, [pc, #24]	; (800ef98 <scalbn+0xe8>)
 800ef7e:	e7b2      	b.n	800eee6 <scalbn+0x36>
 800ef80:	c2f8f359 	.word	0xc2f8f359
 800ef84:	01a56e1f 	.word	0x01a56e1f
 800ef88:	8800759c 	.word	0x8800759c
 800ef8c:	7e37e43c 	.word	0x7e37e43c
 800ef90:	43500000 	.word	0x43500000
 800ef94:	ffff3cb0 	.word	0xffff3cb0
 800ef98:	3c900000 	.word	0x3c900000

0800ef9c <copysign>:
 800ef9c:	ec51 0b10 	vmov	r0, r1, d0
 800efa0:	ee11 0a90 	vmov	r0, s3
 800efa4:	ee10 2a10 	vmov	r2, s0
 800efa8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800efac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800efb0:	ea41 0300 	orr.w	r3, r1, r0
 800efb4:	ec43 2b10 	vmov	d0, r2, r3
 800efb8:	4770      	bx	lr
	...

0800efbc <_init>:
 800efbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efbe:	bf00      	nop
 800efc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efc2:	bc08      	pop	{r3}
 800efc4:	469e      	mov	lr, r3
 800efc6:	4770      	bx	lr

0800efc8 <_fini>:
 800efc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efca:	bf00      	nop
 800efcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800efce:	bc08      	pop	{r3}
 800efd0:	469e      	mov	lr, r3
 800efd2:	4770      	bx	lr
