
Digital_Oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a68  0800d000  0800d000  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea68  0800ea68  00021428  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea68  0800ea68  0001ea68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea70  0800ea70  00021428  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea70  0800ea70  0001ea70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea74  0800ea74  0001ea74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001428  20000000  0800ea78  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad4  20001428  0800fea0  00021428  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001efc  0800fea0  00021efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021428  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d11c  00000000  00000000  00021458  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004401  00000000  00000000  0003e574  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015b0  00000000  00000000  00042978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001388  00000000  00000000  00043f28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029873  00000000  00000000  000452b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016579  00000000  00000000  0006eb23  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000eade2  00000000  00000000  0008509c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016fe7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a18  00000000  00000000  0016fefc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20001428 	.word	0x20001428
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cfe8 	.word	0x0800cfe8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000142c 	.word	0x2000142c
 80001ec:	0800cfe8 	.word	0x0800cfe8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 bdd2 	b.w	8001864 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 fc66 	bl	8001598 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__mulsc3>:
 8000cd8:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000cdc:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8000ce0:	ee60 5a21 	vmul.f32	s11, s0, s3
 8000ce4:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8000ce8:	ee21 5a20 	vmul.f32	s10, s2, s1
 8000cec:	eef4 7a67 	vcmp.f32	s15, s15
 8000cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf4:	ee35 7a85 	vadd.f32	s14, s11, s10
 8000cf8:	d104      	bne.n	8000d04 <__mulsc3+0x2c>
 8000cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfe:	eef0 0a47 	vmov.f32	s1, s14
 8000d02:	4770      	bx	lr
 8000d04:	eeb4 7a47 	vcmp.f32	s14, s14
 8000d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0c:	d0f5      	beq.n	8000cfa <__mulsc3+0x22>
 8000d0e:	ee70 4ae0 	vsub.f32	s9, s1, s1
 8000d12:	eef4 0a60 	vcmp.f32	s1, s1
 8000d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1a:	eef4 4a64 	vcmp.f32	s9, s9
 8000d1e:	bf0c      	ite	eq
 8000d20:	2301      	moveq	r3, #1
 8000d22:	2300      	movne	r3, #0
 8000d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d28:	eeb4 0a40 	vcmp.f32	s0, s0
 8000d2c:	bf08      	it	eq
 8000d2e:	2300      	moveq	r3, #0
 8000d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d34:	ee70 4a40 	vsub.f32	s9, s0, s0
 8000d38:	d104      	bne.n	8000d44 <__mulsc3+0x6c>
 8000d3a:	eef4 4a64 	vcmp.f32	s9, s9
 8000d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d42:	d17a      	bne.n	8000e3a <__mulsc3+0x162>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f040 80de 	bne.w	8000f06 <__mulsc3+0x22e>
 8000d4a:	ee71 4ae1 	vsub.f32	s9, s3, s3
 8000d4e:	eef4 1a61 	vcmp.f32	s3, s3
 8000d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d56:	eef4 4a64 	vcmp.f32	s9, s9
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2201      	moveq	r2, #1
 8000d5e:	2200      	movne	r2, #0
 8000d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d64:	eeb4 1a41 	vcmp.f32	s2, s2
 8000d68:	bf08      	it	eq
 8000d6a:	2200      	moveq	r2, #0
 8000d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d70:	ee71 4a41 	vsub.f32	s9, s2, s2
 8000d74:	d105      	bne.n	8000d82 <__mulsc3+0xaa>
 8000d76:	eef4 4a64 	vcmp.f32	s9, s9
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7e:	f040 8091 	bne.w	8000ea4 <__mulsc3+0x1cc>
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	f040 80ce 	bne.w	8000f24 <__mulsc3+0x24c>
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d147      	bne.n	8000e1c <__mulsc3+0x144>
 8000d8c:	eef4 6a66 	vcmp.f32	s13, s13
 8000d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d94:	ee76 4ae6 	vsub.f32	s9, s13, s13
 8000d98:	d104      	bne.n	8000da4 <__mulsc3+0xcc>
 8000d9a:	eef4 4a64 	vcmp.f32	s9, s9
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d123      	bne.n	8000dec <__mulsc3+0x114>
 8000da4:	eeb4 6a46 	vcmp.f32	s12, s12
 8000da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dac:	ee76 6a46 	vsub.f32	s13, s12, s12
 8000db0:	d104      	bne.n	8000dbc <__mulsc3+0xe4>
 8000db2:	eef4 6a66 	vcmp.f32	s13, s13
 8000db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dba:	d117      	bne.n	8000dec <__mulsc3+0x114>
 8000dbc:	eef4 5a65 	vcmp.f32	s11, s11
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	ee75 6ae5 	vsub.f32	s13, s11, s11
 8000dc8:	d104      	bne.n	8000dd4 <__mulsc3+0xfc>
 8000dca:	eef4 6a66 	vcmp.f32	s13, s13
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	d10b      	bne.n	8000dec <__mulsc3+0x114>
 8000dd4:	eeb4 5a45 	vcmp.f32	s10, s10
 8000dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ddc:	ee75 6a45 	vsub.f32	s13, s10, s10
 8000de0:	d18b      	bne.n	8000cfa <__mulsc3+0x22>
 8000de2:	eef4 6a66 	vcmp.f32	s13, s13
 8000de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dea:	d086      	beq.n	8000cfa <__mulsc3+0x22>
 8000dec:	eeb4 0a40 	vcmp.f32	s0, s0
 8000df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df4:	f040 80e6 	bne.w	8000fc4 <__mulsc3+0x2ec>
 8000df8:	eef4 0a60 	vcmp.f32	s1, s1
 8000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e00:	f040 80d3 	bne.w	8000faa <__mulsc3+0x2d2>
 8000e04:	eeb4 1a41 	vcmp.f32	s2, s2
 8000e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0c:	f040 80c0 	bne.w	8000f90 <__mulsc3+0x2b8>
 8000e10:	eef4 1a61 	vcmp.f32	s3, s3
 8000e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e18:	f040 80ad 	bne.w	8000f76 <__mulsc3+0x29e>
 8000e1c:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000e20:	ee20 7a81 	vmul.f32	s14, s1, s2
 8000e24:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000e28:	eea0 7a21 	vfma.f32	s14, s0, s3
 8000e2c:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8000fe0 <__mulsc3+0x308>
 8000e30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e34:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000e38:	e75f      	b.n	8000cfa <__mulsc3+0x22>
 8000e3a:	ee10 2a10 	vmov	r2, s0
 8000e3e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8000e48:	eddf 4a66 	vldr	s9, [pc, #408]	; 8000fe4 <__mulsc3+0x30c>
 8000e4c:	bfa8      	it	ge
 8000e4e:	eeb0 0a44 	vmovge.f32	s0, s8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bf18      	it	ne
 8000e56:	eef0 4a44 	vmovne.f32	s9, s8
 8000e5a:	ee10 3a90 	vmov	r3, s1
 8000e5e:	eef0 4ae4 	vabs.f32	s9, s9
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	eeb4 1a41 	vcmp.f32	s2, s2
 8000e68:	bfb8      	it	lt
 8000e6a:	eef1 4a64 	vneglt.f32	s9, s9
 8000e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e72:	eef0 0a64 	vmov.f32	s1, s9
 8000e76:	d164      	bne.n	8000f42 <__mulsc3+0x26a>
 8000e78:	eef4 1a61 	vcmp.f32	s3, s3
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	bf08      	it	eq
 8000e82:	2301      	moveq	r3, #1
 8000e84:	f43f af61 	beq.w	8000d4a <__mulsc3+0x72>
 8000e88:	ee11 3a90 	vmov	r3, s3
 8000e8c:	ed9f 4a55 	vldr	s8, [pc, #340]	; 8000fe4 <__mulsc3+0x30c>
 8000e90:	eddf 4a55 	vldr	s9, [pc, #340]	; 8000fe8 <__mulsc3+0x310>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bfb4      	ite	lt
 8000e98:	eef0 1a64 	vmovlt.f32	s3, s9
 8000e9c:	eef0 1a44 	vmovge.f32	s3, s8
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e752      	b.n	8000d4a <__mulsc3+0x72>
 8000ea4:	ee11 3a10 	vmov	r3, s2
 8000ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000eb2:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8000fe4 <__mulsc3+0x30c>
 8000eb6:	bfa8      	it	ge
 8000eb8:	eeb0 1a47 	vmovge.f32	s2, s14
 8000ebc:	2a00      	cmp	r2, #0
 8000ebe:	bf18      	it	ne
 8000ec0:	eef0 7a47 	vmovne.f32	s15, s14
 8000ec4:	ee11 3a90 	vmov	r3, s3
 8000ec8:	eef0 7ae7 	vabs.f32	s15, s15
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	eeb4 0a40 	vcmp.f32	s0, s0
 8000ed2:	bfb8      	it	lt
 8000ed4:	eef1 7a67 	vneglt.f32	s15, s15
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	eef0 1a67 	vmov.f32	s3, s15
 8000ee0:	d13c      	bne.n	8000f5c <__mulsc3+0x284>
 8000ee2:	eef4 0a60 	vcmp.f32	s1, s1
 8000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eea:	d097      	beq.n	8000e1c <__mulsc3+0x144>
 8000eec:	ee10 3a90 	vmov	r3, s1
 8000ef0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000fe4 <__mulsc3+0x30c>
 8000ef4:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8000fe8 <__mulsc3+0x310>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	bfb4      	ite	lt
 8000efc:	eef0 0a67 	vmovlt.f32	s1, s15
 8000f00:	eef0 0a47 	vmovge.f32	s1, s14
 8000f04:	e78a      	b.n	8000e1c <__mulsc3+0x144>
 8000f06:	ee10 3a10 	vmov	r3, s0
 8000f0a:	eddf 4a37 	vldr	s9, [pc, #220]	; 8000fe8 <__mulsc3+0x310>
 8000f0e:	ed9f 4a35 	vldr	s8, [pc, #212]	; 8000fe4 <__mulsc3+0x30c>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	bfb4      	ite	lt
 8000f16:	eeb0 0a64 	vmovlt.f32	s0, s9
 8000f1a:	eeb0 0a44 	vmovge.f32	s0, s8
 8000f1e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8000f22:	e79a      	b.n	8000e5a <__mulsc3+0x182>
 8000f24:	ee11 3a10 	vmov	r3, s2
 8000f28:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8000fe8 <__mulsc3+0x310>
 8000f2c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000fe4 <__mulsc3+0x30c>
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bfb4      	ite	lt
 8000f34:	eeb0 1a67 	vmovlt.f32	s2, s15
 8000f38:	eeb0 1a47 	vmovge.f32	s2, s14
 8000f3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000f40:	e7c0      	b.n	8000ec4 <__mulsc3+0x1ec>
 8000f42:	ee11 3a10 	vmov	r3, s2
 8000f46:	ed9f 4a27 	vldr	s8, [pc, #156]	; 8000fe4 <__mulsc3+0x30c>
 8000f4a:	eddf 4a27 	vldr	s9, [pc, #156]	; 8000fe8 <__mulsc3+0x310>
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bfb4      	ite	lt
 8000f52:	eeb0 1a64 	vmovlt.f32	s2, s9
 8000f56:	eeb0 1a44 	vmovge.f32	s2, s8
 8000f5a:	e78d      	b.n	8000e78 <__mulsc3+0x1a0>
 8000f5c:	ee10 3a10 	vmov	r3, s0
 8000f60:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000fe4 <__mulsc3+0x30c>
 8000f64:	eddf 7a20 	vldr	s15, [pc, #128]	; 8000fe8 <__mulsc3+0x310>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bfb4      	ite	lt
 8000f6c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000f70:	eeb0 0a47 	vmovge.f32	s0, s14
 8000f74:	e7b5      	b.n	8000ee2 <__mulsc3+0x20a>
 8000f76:	ee11 3a90 	vmov	r3, s3
 8000f7a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fe4 <__mulsc3+0x30c>
 8000f7e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8000fe8 <__mulsc3+0x310>
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bfb4      	ite	lt
 8000f86:	eef0 1a67 	vmovlt.f32	s3, s15
 8000f8a:	eef0 1a47 	vmovge.f32	s3, s14
 8000f8e:	e745      	b.n	8000e1c <__mulsc3+0x144>
 8000f90:	ee11 3a10 	vmov	r3, s2
 8000f94:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000fe4 <__mulsc3+0x30c>
 8000f98:	eddf 7a13 	vldr	s15, [pc, #76]	; 8000fe8 <__mulsc3+0x310>
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bfb4      	ite	lt
 8000fa0:	eeb0 1a67 	vmovlt.f32	s2, s15
 8000fa4:	eeb0 1a47 	vmovge.f32	s2, s14
 8000fa8:	e732      	b.n	8000e10 <__mulsc3+0x138>
 8000faa:	ee10 3a90 	vmov	r3, s1
 8000fae:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000fe4 <__mulsc3+0x30c>
 8000fb2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000fe8 <__mulsc3+0x310>
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bfb4      	ite	lt
 8000fba:	eef0 0a67 	vmovlt.f32	s1, s15
 8000fbe:	eef0 0a47 	vmovge.f32	s1, s14
 8000fc2:	e71f      	b.n	8000e04 <__mulsc3+0x12c>
 8000fc4:	ee10 3a10 	vmov	r3, s0
 8000fc8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000fe4 <__mulsc3+0x30c>
 8000fcc:	eddf 7a06 	vldr	s15, [pc, #24]	; 8000fe8 <__mulsc3+0x310>
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bfb4      	ite	lt
 8000fd4:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000fd8:	eeb0 0a47 	vmovge.f32	s0, s14
 8000fdc:	e70c      	b.n	8000df8 <__mulsc3+0x120>
 8000fde:	bf00      	nop
 8000fe0:	7f800000 	.word	0x7f800000
 8000fe4:	00000000 	.word	0x00000000
 8000fe8:	80000000 	.word	0x80000000

08000fec <__muldc3>:
 8000fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ff0:	ec57 6b10 	vmov	r6, r7, d0
 8000ff4:	ec59 8b12 	vmov	r8, r9, d2
 8000ff8:	b095      	sub	sp, #84	; 0x54
 8000ffa:	ee12 2a10 	vmov	r2, s4
 8000ffe:	ee10 0a10 	vmov	r0, s0
 8001002:	4639      	mov	r1, r7
 8001004:	464b      	mov	r3, r9
 8001006:	ec55 4b13 	vmov	r4, r5, d3
 800100a:	ec5b ab11 	vmov	sl, fp, d1
 800100e:	ed8d 0b08 	vstr	d0, [sp, #32]
 8001012:	ed8d 3b0a 	vstr	d3, [sp, #40]	; 0x28
 8001016:	f7ff faff 	bl	8000618 <__aeabi_dmul>
 800101a:	4622      	mov	r2, r4
 800101c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001020:	462b      	mov	r3, r5
 8001022:	4650      	mov	r0, sl
 8001024:	4659      	mov	r1, fp
 8001026:	f7ff faf7 	bl	8000618 <__aeabi_dmul>
 800102a:	4622      	mov	r2, r4
 800102c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001030:	462b      	mov	r3, r5
 8001032:	4630      	mov	r0, r6
 8001034:	4639      	mov	r1, r7
 8001036:	f7ff faef 	bl	8000618 <__aeabi_dmul>
 800103a:	4652      	mov	r2, sl
 800103c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001040:	465b      	mov	r3, fp
 8001042:	4640      	mov	r0, r8
 8001044:	4649      	mov	r1, r9
 8001046:	f7ff fae7 	bl	8000618 <__aeabi_dmul>
 800104a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800104e:	4606      	mov	r6, r0
 8001050:	460f      	mov	r7, r1
 8001052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001056:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 800105a:	f7ff f925 	bl	80002a8 <__aeabi_dsub>
 800105e:	4632      	mov	r2, r6
 8001060:	4604      	mov	r4, r0
 8001062:	460d      	mov	r5, r1
 8001064:	463b      	mov	r3, r7
 8001066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800106a:	f7ff f91f 	bl	80002ac <__adddf3>
 800106e:	4622      	mov	r2, r4
 8001070:	e9cd 0100 	strd	r0, r1, [sp]
 8001074:	462b      	mov	r3, r5
 8001076:	4620      	mov	r0, r4
 8001078:	4629      	mov	r1, r5
 800107a:	f7ff fd35 	bl	8000ae8 <__aeabi_dcmpeq>
 800107e:	b130      	cbz	r0, 800108e <__muldc3+0xa2>
 8001080:	ed9d 1b00 	vldr	d1, [sp]
 8001084:	ec45 4b10 	vmov	d0, r4, r5
 8001088:	b015      	add	sp, #84	; 0x54
 800108a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800108e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	f7ff fd27 	bl	8000ae8 <__aeabi_dcmpeq>
 800109a:	2800      	cmp	r0, #0
 800109c:	d1f0      	bne.n	8001080 <__muldc3+0x94>
 800109e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	f7ff f8ff 	bl	80002a8 <__aeabi_dsub>
 80010aa:	4652      	mov	r2, sl
 80010ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80010b0:	465b      	mov	r3, fp
 80010b2:	4650      	mov	r0, sl
 80010b4:	4659      	mov	r1, fp
 80010b6:	f7ff f8f7 	bl	80002a8 <__aeabi_dsub>
 80010ba:	f04f 0601 	mov.w	r6, #1
 80010be:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80010c2:	4652      	mov	r2, sl
 80010c4:	465b      	mov	r3, fp
 80010c6:	4650      	mov	r0, sl
 80010c8:	4659      	mov	r1, fp
 80010ca:	4637      	mov	r7, r6
 80010cc:	f7ff fd0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80010d0:	b910      	cbnz	r0, 80010d8 <__muldc3+0xec>
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	461f      	mov	r7, r3
 80010d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 0601 	mov.w	r6, #1
 80010e4:	f7ff fd00 	bl	8000ae8 <__aeabi_dcmpeq>
 80010e8:	b110      	cbz	r0, 80010f0 <__muldc3+0x104>
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	461e      	mov	r6, r3
 80010f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80010f4:	ea07 0c06 	and.w	ip, r7, r6
 80010f8:	fa5f f68c 	uxtb.w	r6, ip
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	960e      	str	r6, [sp, #56]	; 0x38
 8001102:	f04f 0601 	mov.w	r6, #1
 8001106:	f7ff fcef 	bl	8000ae8 <__aeabi_dcmpeq>
 800110a:	b910      	cbnz	r0, 8001112 <__muldc3+0x126>
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	461e      	mov	r6, r3
 8001112:	f016 0fff 	tst.w	r6, #255	; 0xff
 8001116:	d00f      	beq.n	8001138 <__muldc3+0x14c>
 8001118:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 0601 	mov.w	r6, #1
 8001124:	f7ff fce0 	bl	8000ae8 <__aeabi_dcmpeq>
 8001128:	b110      	cbz	r0, 8001130 <__muldc3+0x144>
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	461e      	mov	r6, r3
 8001130:	f016 0fff 	tst.w	r6, #255	; 0xff
 8001134:	f040 8183 	bne.w	800143e <__muldc3+0x452>
 8001138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800113a:	2b00      	cmp	r3, #0
 800113c:	f040 81b9 	bne.w	80014b2 <__muldc3+0x4c6>
 8001140:	4642      	mov	r2, r8
 8001142:	464b      	mov	r3, r9
 8001144:	4640      	mov	r0, r8
 8001146:	4649      	mov	r1, r9
 8001148:	f7ff f8ae 	bl	80002a8 <__aeabi_dsub>
 800114c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8001150:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001154:	4632      	mov	r2, r6
 8001156:	463b      	mov	r3, r7
 8001158:	4630      	mov	r0, r6
 800115a:	4639      	mov	r1, r7
 800115c:	f7ff f8a4 	bl	80002a8 <__aeabi_dsub>
 8001160:	4632      	mov	r2, r6
 8001162:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001166:	463b      	mov	r3, r7
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f04f 0601 	mov.w	r6, #1
 8001170:	4637      	mov	r7, r6
 8001172:	f7ff fcb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8001176:	b910      	cbnz	r0, 800117e <__muldc3+0x192>
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	461f      	mov	r7, r3
 800117e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 0601 	mov.w	r6, #1
 800118a:	f7ff fcad 	bl	8000ae8 <__aeabi_dcmpeq>
 800118e:	b110      	cbz	r0, 8001196 <__muldc3+0x1aa>
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	461e      	mov	r6, r3
 8001196:	ea07 0c06 	and.w	ip, r7, r6
 800119a:	fa5f f68c 	uxtb.w	r6, ip
 800119e:	4642      	mov	r2, r8
 80011a0:	464b      	mov	r3, r9
 80011a2:	4640      	mov	r0, r8
 80011a4:	4649      	mov	r1, r9
 80011a6:	4637      	mov	r7, r6
 80011a8:	f04f 0601 	mov.w	r6, #1
 80011ac:	f7ff fc9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80011b0:	b910      	cbnz	r0, 80011b8 <__muldc3+0x1cc>
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	461e      	mov	r6, r3
 80011b8:	f016 0fff 	tst.w	r6, #255	; 0xff
 80011bc:	d00f      	beq.n	80011de <__muldc3+0x1f2>
 80011be:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 0601 	mov.w	r6, #1
 80011ca:	f7ff fc8d 	bl	8000ae8 <__aeabi_dcmpeq>
 80011ce:	b110      	cbz	r0, 80011d6 <__muldc3+0x1ea>
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	461e      	mov	r6, r3
 80011d6:	f016 0fff 	tst.w	r6, #255	; 0xff
 80011da:	f040 80fa 	bne.w	80013d2 <__muldc3+0x3e6>
 80011de:	2f00      	cmp	r7, #0
 80011e0:	f040 8158 	bne.w	8001494 <__muldc3+0x4a8>
 80011e4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80011e6:	2e00      	cmp	r6, #0
 80011e8:	f040 80bc 	bne.w	8001364 <__muldc3+0x378>
 80011ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	f7ff f858 	bl	80002a8 <__aeabi_dsub>
 80011f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 0701 	mov.w	r7, #1
 8001208:	f7ff fc6e 	bl	8000ae8 <__aeabi_dcmpeq>
 800120c:	b900      	cbnz	r0, 8001210 <__muldc3+0x224>
 800120e:	4637      	mov	r7, r6
 8001210:	f017 0fff 	tst.w	r7, #255	; 0xff
 8001214:	d00e      	beq.n	8001234 <__muldc3+0x248>
 8001216:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 0601 	mov.w	r6, #1
 8001222:	f7ff fc61 	bl	8000ae8 <__aeabi_dcmpeq>
 8001226:	b110      	cbz	r0, 800122e <__muldc3+0x242>
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	461e      	mov	r6, r3
 800122e:	f016 0fff 	tst.w	r6, #255	; 0xff
 8001232:	d173      	bne.n	800131c <__muldc3+0x330>
 8001234:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8001238:	4632      	mov	r2, r6
 800123a:	463b      	mov	r3, r7
 800123c:	4630      	mov	r0, r6
 800123e:	4639      	mov	r1, r7
 8001240:	f7ff f832 	bl	80002a8 <__aeabi_dsub>
 8001244:	463b      	mov	r3, r7
 8001246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800124a:	4632      	mov	r2, r6
 800124c:	4630      	mov	r0, r6
 800124e:	4639      	mov	r1, r7
 8001250:	f7ff fc4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8001254:	f04f 0301 	mov.w	r3, #1
 8001258:	b900      	cbnz	r0, 800125c <__muldc3+0x270>
 800125a:	4603      	mov	r3, r0
 800125c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001260:	d00e      	beq.n	8001280 <__muldc3+0x294>
 8001262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 0601 	mov.w	r6, #1
 800126e:	f7ff fc3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8001272:	b110      	cbz	r0, 800127a <__muldc3+0x28e>
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	461e      	mov	r6, r3
 800127a:	f016 0fff 	tst.w	r6, #255	; 0xff
 800127e:	d14d      	bne.n	800131c <__muldc3+0x330>
 8001280:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8001284:	4632      	mov	r2, r6
 8001286:	463b      	mov	r3, r7
 8001288:	4630      	mov	r0, r6
 800128a:	4639      	mov	r1, r7
 800128c:	f7ff f80c 	bl	80002a8 <__aeabi_dsub>
 8001290:	463b      	mov	r3, r7
 8001292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001296:	4632      	mov	r2, r6
 8001298:	4630      	mov	r0, r6
 800129a:	4639      	mov	r1, r7
 800129c:	f7ff fc24 	bl	8000ae8 <__aeabi_dcmpeq>
 80012a0:	f04f 0301 	mov.w	r3, #1
 80012a4:	b900      	cbnz	r0, 80012a8 <__muldc3+0x2bc>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80012ac:	d00e      	beq.n	80012cc <__muldc3+0x2e0>
 80012ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 0601 	mov.w	r6, #1
 80012ba:	f7ff fc15 	bl	8000ae8 <__aeabi_dcmpeq>
 80012be:	b110      	cbz	r0, 80012c6 <__muldc3+0x2da>
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	461e      	mov	r6, r3
 80012c6:	f016 0fff 	tst.w	r6, #255	; 0xff
 80012ca:	d127      	bne.n	800131c <__muldc3+0x330>
 80012cc:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80012d0:	4632      	mov	r2, r6
 80012d2:	463b      	mov	r3, r7
 80012d4:	4630      	mov	r0, r6
 80012d6:	4639      	mov	r1, r7
 80012d8:	f7fe ffe6 	bl	80002a8 <__aeabi_dsub>
 80012dc:	463b      	mov	r3, r7
 80012de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012e2:	4632      	mov	r2, r6
 80012e4:	4630      	mov	r0, r6
 80012e6:	4639      	mov	r1, r7
 80012e8:	f7ff fbfe 	bl	8000ae8 <__aeabi_dcmpeq>
 80012ec:	f04f 0301 	mov.w	r3, #1
 80012f0:	b900      	cbnz	r0, 80012f4 <__muldc3+0x308>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80012f8:	f43f aec2 	beq.w	8001080 <__muldc3+0x94>
 80012fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 0601 	mov.w	r6, #1
 8001308:	f7ff fbee 	bl	8000ae8 <__aeabi_dcmpeq>
 800130c:	b110      	cbz	r0, 8001314 <__muldc3+0x328>
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	461e      	mov	r6, r3
 8001314:	f016 0fff 	tst.w	r6, #255	; 0xff
 8001318:	f43f aeb2 	beq.w	8001080 <__muldc3+0x94>
 800131c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	f7ff fbe0 	bl	8000ae8 <__aeabi_dcmpeq>
 8001328:	2800      	cmp	r0, #0
 800132a:	f000 8121 	beq.w	8001570 <__muldc3+0x584>
 800132e:	4652      	mov	r2, sl
 8001330:	465b      	mov	r3, fp
 8001332:	4650      	mov	r0, sl
 8001334:	4659      	mov	r1, fp
 8001336:	f7ff fbd7 	bl	8000ae8 <__aeabi_dcmpeq>
 800133a:	2800      	cmp	r0, #0
 800133c:	f000 810b 	beq.w	8001556 <__muldc3+0x56a>
 8001340:	4642      	mov	r2, r8
 8001342:	464b      	mov	r3, r9
 8001344:	4640      	mov	r0, r8
 8001346:	4649      	mov	r1, r9
 8001348:	f7ff fbce 	bl	8000ae8 <__aeabi_dcmpeq>
 800134c:	2800      	cmp	r0, #0
 800134e:	f000 80f5 	beq.w	800153c <__muldc3+0x550>
 8001352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	f7ff fbc5 	bl	8000ae8 <__aeabi_dcmpeq>
 800135e:	2800      	cmp	r0, #0
 8001360:	f000 80df 	beq.w	8001522 <__muldc3+0x536>
 8001364:	4642      	mov	r2, r8
 8001366:	464b      	mov	r3, r9
 8001368:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800136c:	f7ff f954 	bl	8000618 <__aeabi_dmul>
 8001370:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8001374:	4604      	mov	r4, r0
 8001376:	460d      	mov	r5, r1
 8001378:	4632      	mov	r2, r6
 800137a:	463b      	mov	r3, r7
 800137c:	4650      	mov	r0, sl
 800137e:	4659      	mov	r1, fp
 8001380:	f7ff f94a 	bl	8000618 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4620      	mov	r0, r4
 800138a:	4629      	mov	r1, r5
 800138c:	f7fe ff8c 	bl	80002a8 <__aeabi_dsub>
 8001390:	2200      	movs	r2, #0
 8001392:	4b7e      	ldr	r3, [pc, #504]	; (800158c <__muldc3+0x5a0>)
 8001394:	f7ff f940 	bl	8000618 <__aeabi_dmul>
 8001398:	4632      	mov	r2, r6
 800139a:	463b      	mov	r3, r7
 800139c:	4604      	mov	r4, r0
 800139e:	460d      	mov	r5, r1
 80013a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80013a4:	f7ff f938 	bl	8000618 <__aeabi_dmul>
 80013a8:	4642      	mov	r2, r8
 80013aa:	4606      	mov	r6, r0
 80013ac:	460f      	mov	r7, r1
 80013ae:	464b      	mov	r3, r9
 80013b0:	4650      	mov	r0, sl
 80013b2:	4659      	mov	r1, fp
 80013b4:	f7ff f930 	bl	8000618 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4630      	mov	r0, r6
 80013be:	4639      	mov	r1, r7
 80013c0:	f7fe ff74 	bl	80002ac <__adddf3>
 80013c4:	2200      	movs	r2, #0
 80013c6:	4b71      	ldr	r3, [pc, #452]	; (800158c <__muldc3+0x5a0>)
 80013c8:	f7ff f926 	bl	8000618 <__aeabi_dmul>
 80013cc:	e9cd 0100 	strd	r0, r1, [sp]
 80013d0:	e656      	b.n	8001080 <__muldc3+0x94>
 80013d2:	f1b9 0f00 	cmp.w	r9, #0
 80013d6:	4b6e      	ldr	r3, [pc, #440]	; (8001590 <__muldc3+0x5a4>)
 80013d8:	bfb8      	it	lt
 80013da:	4b6e      	ldrlt	r3, [pc, #440]	; (8001594 <__muldc3+0x5a8>)
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	bfb8      	it	lt
 80013e2:	2200      	movlt	r2, #0
 80013e4:	4690      	mov	r8, r2
 80013e6:	4699      	mov	r9, r3
 80013e8:	2200      	movs	r2, #0
 80013ea:	2f00      	cmp	r7, #0
 80013ec:	d15f      	bne.n	80014ae <__muldc3+0x4c2>
 80013ee:	2300      	movs	r3, #0
 80013f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80013f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013f6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80013fa:	ea43 0501 	orr.w	r5, r3, r1
 80013fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001402:	4614      	mov	r4, r2
 8001404:	460b      	mov	r3, r1
 8001406:	4602      	mov	r2, r0
 8001408:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800140c:	f7ff fb6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8001410:	2800      	cmp	r0, #0
 8001412:	d06a      	beq.n	80014ea <__muldc3+0x4fe>
 8001414:	4652      	mov	r2, sl
 8001416:	465b      	mov	r3, fp
 8001418:	4650      	mov	r0, sl
 800141a:	4659      	mov	r1, fp
 800141c:	f7ff fb64 	bl	8000ae8 <__aeabi_dcmpeq>
 8001420:	2800      	cmp	r0, #0
 8001422:	d19f      	bne.n	8001364 <__muldc3+0x378>
 8001424:	f1bb 0f00 	cmp.w	fp, #0
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	bfbc      	itt	lt
 8001432:	2200      	movlt	r2, #0
 8001434:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001438:	4692      	mov	sl, r2
 800143a:	469b      	mov	fp, r3
 800143c:	e792      	b.n	8001364 <__muldc3+0x378>
 800143e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <__muldc3+0x5a4>)
 8001442:	2900      	cmp	r1, #0
 8001444:	bfb8      	it	lt
 8001446:	4b53      	ldrlt	r3, [pc, #332]	; (8001594 <__muldc3+0x5a8>)
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	bfb8      	it	lt
 800144e:	2200      	movlt	r2, #0
 8001450:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001456:	2200      	movs	r2, #0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d137      	bne.n	80014cc <__muldc3+0x4e0>
 800145c:	2300      	movs	r3, #0
 800145e:	f00b 4100 	and.w	r1, fp, #2147483648	; 0x80000000
 8001462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001466:	430b      	orrs	r3, r1
 8001468:	4616      	mov	r6, r2
 800146a:	461f      	mov	r7, r3
 800146c:	4642      	mov	r2, r8
 800146e:	464b      	mov	r3, r9
 8001470:	4640      	mov	r0, r8
 8001472:	4649      	mov	r1, r9
 8001474:	46b2      	mov	sl, r6
 8001476:	46bb      	mov	fp, r7
 8001478:	f7ff fb36 	bl	8000ae8 <__aeabi_dcmpeq>
 800147c:	b340      	cbz	r0, 80014d0 <__muldc3+0x4e4>
 800147e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	f7ff fb2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800148a:	2800      	cmp	r0, #0
 800148c:	d03a      	beq.n	8001504 <__muldc3+0x518>
 800148e:	2301      	movs	r3, #1
 8001490:	930e      	str	r3, [sp, #56]	; 0x38
 8001492:	e655      	b.n	8001140 <__muldc3+0x154>
 8001494:	f1b9 0f00 	cmp.w	r9, #0
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	bfbc      	itt	lt
 80014a2:	2200      	movlt	r2, #0
 80014a4:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80014a8:	4690      	mov	r8, r2
 80014aa:	4699      	mov	r9, r3
 80014ac:	2200      	movs	r2, #0
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <__muldc3+0x5a4>)
 80014b0:	e79e      	b.n	80013f0 <__muldc3+0x404>
 80014b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80014b4:	2900      	cmp	r1, #0
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	bfbc      	itt	lt
 80014c0:	2200      	movlt	r2, #0
 80014c2:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80014c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80014ca:	2200      	movs	r2, #0
 80014cc:	4b30      	ldr	r3, [pc, #192]	; (8001590 <__muldc3+0x5a4>)
 80014ce:	e7c6      	b.n	800145e <__muldc3+0x472>
 80014d0:	f1b9 0f00 	cmp.w	r9, #0
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	bfbc      	itt	lt
 80014de:	2200      	movlt	r2, #0
 80014e0:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80014e4:	4690      	mov	r8, r2
 80014e6:	4699      	mov	r9, r3
 80014e8:	e7c9      	b.n	800147e <__muldc3+0x492>
 80014ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80014ec:	2900      	cmp	r1, #0
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	bfbc      	itt	lt
 80014f8:	2200      	movlt	r2, #0
 80014fa:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80014fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001502:	e787      	b.n	8001414 <__muldc3+0x428>
 8001504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001506:	2900      	cmp	r1, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	bfbc      	itt	lt
 8001512:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001516:	2200      	movlt	r2, #0
 8001518:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800151c:	2301      	movs	r3, #1
 800151e:	930e      	str	r3, [sp, #56]	; 0x38
 8001520:	e60e      	b.n	8001140 <__muldc3+0x154>
 8001522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001524:	2900      	cmp	r1, #0
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	bfbc      	itt	lt
 8001530:	2200      	movlt	r2, #0
 8001532:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001536:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800153a:	e713      	b.n	8001364 <__muldc3+0x378>
 800153c:	f1b9 0f00 	cmp.w	r9, #0
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	bfbc      	itt	lt
 800154a:	2200      	movlt	r2, #0
 800154c:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001550:	4690      	mov	r8, r2
 8001552:	4699      	mov	r9, r3
 8001554:	e6fd      	b.n	8001352 <__muldc3+0x366>
 8001556:	f1bb 0f00 	cmp.w	fp, #0
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	bfbc      	itt	lt
 8001564:	2200      	movlt	r2, #0
 8001566:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 800156a:	4692      	mov	sl, r2
 800156c:	469b      	mov	fp, r3
 800156e:	e6e7      	b.n	8001340 <__muldc3+0x354>
 8001570:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001572:	2900      	cmp	r1, #0
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	bfbc      	itt	lt
 800157e:	2200      	movlt	r2, #0
 8001580:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001584:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001588:	e6d1      	b.n	800132e <__muldc3+0x342>
 800158a:	bf00      	nop
 800158c:	7ff00000 	.word	0x7ff00000
 8001590:	3ff00000 	.word	0x3ff00000
 8001594:	bff00000 	.word	0xbff00000

08001598 <__udivmoddi4>:
 8001598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800159c:	9e08      	ldr	r6, [sp, #32]
 800159e:	4604      	mov	r4, r0
 80015a0:	4688      	mov	r8, r1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d14b      	bne.n	800163e <__udivmoddi4+0xa6>
 80015a6:	428a      	cmp	r2, r1
 80015a8:	4615      	mov	r5, r2
 80015aa:	d967      	bls.n	800167c <__udivmoddi4+0xe4>
 80015ac:	fab2 f282 	clz	r2, r2
 80015b0:	b14a      	cbz	r2, 80015c6 <__udivmoddi4+0x2e>
 80015b2:	f1c2 0720 	rsb	r7, r2, #32
 80015b6:	fa01 f302 	lsl.w	r3, r1, r2
 80015ba:	fa20 f707 	lsr.w	r7, r0, r7
 80015be:	4095      	lsls	r5, r2
 80015c0:	ea47 0803 	orr.w	r8, r7, r3
 80015c4:	4094      	lsls	r4, r2
 80015c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80015ca:	0c23      	lsrs	r3, r4, #16
 80015cc:	fbb8 f7fe 	udiv	r7, r8, lr
 80015d0:	fa1f fc85 	uxth.w	ip, r5
 80015d4:	fb0e 8817 	mls	r8, lr, r7, r8
 80015d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80015dc:	fb07 f10c 	mul.w	r1, r7, ip
 80015e0:	4299      	cmp	r1, r3
 80015e2:	d909      	bls.n	80015f8 <__udivmoddi4+0x60>
 80015e4:	18eb      	adds	r3, r5, r3
 80015e6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80015ea:	f080 811b 	bcs.w	8001824 <__udivmoddi4+0x28c>
 80015ee:	4299      	cmp	r1, r3
 80015f0:	f240 8118 	bls.w	8001824 <__udivmoddi4+0x28c>
 80015f4:	3f02      	subs	r7, #2
 80015f6:	442b      	add	r3, r5
 80015f8:	1a5b      	subs	r3, r3, r1
 80015fa:	b2a4      	uxth	r4, r4
 80015fc:	fbb3 f0fe 	udiv	r0, r3, lr
 8001600:	fb0e 3310 	mls	r3, lr, r0, r3
 8001604:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001608:	fb00 fc0c 	mul.w	ip, r0, ip
 800160c:	45a4      	cmp	ip, r4
 800160e:	d909      	bls.n	8001624 <__udivmoddi4+0x8c>
 8001610:	192c      	adds	r4, r5, r4
 8001612:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001616:	f080 8107 	bcs.w	8001828 <__udivmoddi4+0x290>
 800161a:	45a4      	cmp	ip, r4
 800161c:	f240 8104 	bls.w	8001828 <__udivmoddi4+0x290>
 8001620:	3802      	subs	r0, #2
 8001622:	442c      	add	r4, r5
 8001624:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001628:	eba4 040c 	sub.w	r4, r4, ip
 800162c:	2700      	movs	r7, #0
 800162e:	b11e      	cbz	r6, 8001638 <__udivmoddi4+0xa0>
 8001630:	40d4      	lsrs	r4, r2
 8001632:	2300      	movs	r3, #0
 8001634:	e9c6 4300 	strd	r4, r3, [r6]
 8001638:	4639      	mov	r1, r7
 800163a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800163e:	428b      	cmp	r3, r1
 8001640:	d909      	bls.n	8001656 <__udivmoddi4+0xbe>
 8001642:	2e00      	cmp	r6, #0
 8001644:	f000 80eb 	beq.w	800181e <__udivmoddi4+0x286>
 8001648:	2700      	movs	r7, #0
 800164a:	e9c6 0100 	strd	r0, r1, [r6]
 800164e:	4638      	mov	r0, r7
 8001650:	4639      	mov	r1, r7
 8001652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001656:	fab3 f783 	clz	r7, r3
 800165a:	2f00      	cmp	r7, #0
 800165c:	d147      	bne.n	80016ee <__udivmoddi4+0x156>
 800165e:	428b      	cmp	r3, r1
 8001660:	d302      	bcc.n	8001668 <__udivmoddi4+0xd0>
 8001662:	4282      	cmp	r2, r0
 8001664:	f200 80fa 	bhi.w	800185c <__udivmoddi4+0x2c4>
 8001668:	1a84      	subs	r4, r0, r2
 800166a:	eb61 0303 	sbc.w	r3, r1, r3
 800166e:	2001      	movs	r0, #1
 8001670:	4698      	mov	r8, r3
 8001672:	2e00      	cmp	r6, #0
 8001674:	d0e0      	beq.n	8001638 <__udivmoddi4+0xa0>
 8001676:	e9c6 4800 	strd	r4, r8, [r6]
 800167a:	e7dd      	b.n	8001638 <__udivmoddi4+0xa0>
 800167c:	b902      	cbnz	r2, 8001680 <__udivmoddi4+0xe8>
 800167e:	deff      	udf	#255	; 0xff
 8001680:	fab2 f282 	clz	r2, r2
 8001684:	2a00      	cmp	r2, #0
 8001686:	f040 808f 	bne.w	80017a8 <__udivmoddi4+0x210>
 800168a:	1b49      	subs	r1, r1, r5
 800168c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001690:	fa1f f885 	uxth.w	r8, r5
 8001694:	2701      	movs	r7, #1
 8001696:	fbb1 fcfe 	udiv	ip, r1, lr
 800169a:	0c23      	lsrs	r3, r4, #16
 800169c:	fb0e 111c 	mls	r1, lr, ip, r1
 80016a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80016a4:	fb08 f10c 	mul.w	r1, r8, ip
 80016a8:	4299      	cmp	r1, r3
 80016aa:	d907      	bls.n	80016bc <__udivmoddi4+0x124>
 80016ac:	18eb      	adds	r3, r5, r3
 80016ae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80016b2:	d202      	bcs.n	80016ba <__udivmoddi4+0x122>
 80016b4:	4299      	cmp	r1, r3
 80016b6:	f200 80cd 	bhi.w	8001854 <__udivmoddi4+0x2bc>
 80016ba:	4684      	mov	ip, r0
 80016bc:	1a59      	subs	r1, r3, r1
 80016be:	b2a3      	uxth	r3, r4
 80016c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80016c4:	fb0e 1410 	mls	r4, lr, r0, r1
 80016c8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80016cc:	fb08 f800 	mul.w	r8, r8, r0
 80016d0:	45a0      	cmp	r8, r4
 80016d2:	d907      	bls.n	80016e4 <__udivmoddi4+0x14c>
 80016d4:	192c      	adds	r4, r5, r4
 80016d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80016da:	d202      	bcs.n	80016e2 <__udivmoddi4+0x14a>
 80016dc:	45a0      	cmp	r8, r4
 80016de:	f200 80b6 	bhi.w	800184e <__udivmoddi4+0x2b6>
 80016e2:	4618      	mov	r0, r3
 80016e4:	eba4 0408 	sub.w	r4, r4, r8
 80016e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80016ec:	e79f      	b.n	800162e <__udivmoddi4+0x96>
 80016ee:	f1c7 0c20 	rsb	ip, r7, #32
 80016f2:	40bb      	lsls	r3, r7
 80016f4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80016f8:	ea4e 0e03 	orr.w	lr, lr, r3
 80016fc:	fa01 f407 	lsl.w	r4, r1, r7
 8001700:	fa20 f50c 	lsr.w	r5, r0, ip
 8001704:	fa21 f30c 	lsr.w	r3, r1, ip
 8001708:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800170c:	4325      	orrs	r5, r4
 800170e:	fbb3 f9f8 	udiv	r9, r3, r8
 8001712:	0c2c      	lsrs	r4, r5, #16
 8001714:	fb08 3319 	mls	r3, r8, r9, r3
 8001718:	fa1f fa8e 	uxth.w	sl, lr
 800171c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001720:	fb09 f40a 	mul.w	r4, r9, sl
 8001724:	429c      	cmp	r4, r3
 8001726:	fa02 f207 	lsl.w	r2, r2, r7
 800172a:	fa00 f107 	lsl.w	r1, r0, r7
 800172e:	d90b      	bls.n	8001748 <__udivmoddi4+0x1b0>
 8001730:	eb1e 0303 	adds.w	r3, lr, r3
 8001734:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001738:	f080 8087 	bcs.w	800184a <__udivmoddi4+0x2b2>
 800173c:	429c      	cmp	r4, r3
 800173e:	f240 8084 	bls.w	800184a <__udivmoddi4+0x2b2>
 8001742:	f1a9 0902 	sub.w	r9, r9, #2
 8001746:	4473      	add	r3, lr
 8001748:	1b1b      	subs	r3, r3, r4
 800174a:	b2ad      	uxth	r5, r5
 800174c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001750:	fb08 3310 	mls	r3, r8, r0, r3
 8001754:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001758:	fb00 fa0a 	mul.w	sl, r0, sl
 800175c:	45a2      	cmp	sl, r4
 800175e:	d908      	bls.n	8001772 <__udivmoddi4+0x1da>
 8001760:	eb1e 0404 	adds.w	r4, lr, r4
 8001764:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001768:	d26b      	bcs.n	8001842 <__udivmoddi4+0x2aa>
 800176a:	45a2      	cmp	sl, r4
 800176c:	d969      	bls.n	8001842 <__udivmoddi4+0x2aa>
 800176e:	3802      	subs	r0, #2
 8001770:	4474      	add	r4, lr
 8001772:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001776:	fba0 8902 	umull	r8, r9, r0, r2
 800177a:	eba4 040a 	sub.w	r4, r4, sl
 800177e:	454c      	cmp	r4, r9
 8001780:	46c2      	mov	sl, r8
 8001782:	464b      	mov	r3, r9
 8001784:	d354      	bcc.n	8001830 <__udivmoddi4+0x298>
 8001786:	d051      	beq.n	800182c <__udivmoddi4+0x294>
 8001788:	2e00      	cmp	r6, #0
 800178a:	d069      	beq.n	8001860 <__udivmoddi4+0x2c8>
 800178c:	ebb1 050a 	subs.w	r5, r1, sl
 8001790:	eb64 0403 	sbc.w	r4, r4, r3
 8001794:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001798:	40fd      	lsrs	r5, r7
 800179a:	40fc      	lsrs	r4, r7
 800179c:	ea4c 0505 	orr.w	r5, ip, r5
 80017a0:	e9c6 5400 	strd	r5, r4, [r6]
 80017a4:	2700      	movs	r7, #0
 80017a6:	e747      	b.n	8001638 <__udivmoddi4+0xa0>
 80017a8:	f1c2 0320 	rsb	r3, r2, #32
 80017ac:	fa20 f703 	lsr.w	r7, r0, r3
 80017b0:	4095      	lsls	r5, r2
 80017b2:	fa01 f002 	lsl.w	r0, r1, r2
 80017b6:	fa21 f303 	lsr.w	r3, r1, r3
 80017ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80017be:	4338      	orrs	r0, r7
 80017c0:	0c01      	lsrs	r1, r0, #16
 80017c2:	fbb3 f7fe 	udiv	r7, r3, lr
 80017c6:	fa1f f885 	uxth.w	r8, r5
 80017ca:	fb0e 3317 	mls	r3, lr, r7, r3
 80017ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80017d2:	fb07 f308 	mul.w	r3, r7, r8
 80017d6:	428b      	cmp	r3, r1
 80017d8:	fa04 f402 	lsl.w	r4, r4, r2
 80017dc:	d907      	bls.n	80017ee <__udivmoddi4+0x256>
 80017de:	1869      	adds	r1, r5, r1
 80017e0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80017e4:	d22f      	bcs.n	8001846 <__udivmoddi4+0x2ae>
 80017e6:	428b      	cmp	r3, r1
 80017e8:	d92d      	bls.n	8001846 <__udivmoddi4+0x2ae>
 80017ea:	3f02      	subs	r7, #2
 80017ec:	4429      	add	r1, r5
 80017ee:	1acb      	subs	r3, r1, r3
 80017f0:	b281      	uxth	r1, r0
 80017f2:	fbb3 f0fe 	udiv	r0, r3, lr
 80017f6:	fb0e 3310 	mls	r3, lr, r0, r3
 80017fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80017fe:	fb00 f308 	mul.w	r3, r0, r8
 8001802:	428b      	cmp	r3, r1
 8001804:	d907      	bls.n	8001816 <__udivmoddi4+0x27e>
 8001806:	1869      	adds	r1, r5, r1
 8001808:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800180c:	d217      	bcs.n	800183e <__udivmoddi4+0x2a6>
 800180e:	428b      	cmp	r3, r1
 8001810:	d915      	bls.n	800183e <__udivmoddi4+0x2a6>
 8001812:	3802      	subs	r0, #2
 8001814:	4429      	add	r1, r5
 8001816:	1ac9      	subs	r1, r1, r3
 8001818:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800181c:	e73b      	b.n	8001696 <__udivmoddi4+0xfe>
 800181e:	4637      	mov	r7, r6
 8001820:	4630      	mov	r0, r6
 8001822:	e709      	b.n	8001638 <__udivmoddi4+0xa0>
 8001824:	4607      	mov	r7, r0
 8001826:	e6e7      	b.n	80015f8 <__udivmoddi4+0x60>
 8001828:	4618      	mov	r0, r3
 800182a:	e6fb      	b.n	8001624 <__udivmoddi4+0x8c>
 800182c:	4541      	cmp	r1, r8
 800182e:	d2ab      	bcs.n	8001788 <__udivmoddi4+0x1f0>
 8001830:	ebb8 0a02 	subs.w	sl, r8, r2
 8001834:	eb69 020e 	sbc.w	r2, r9, lr
 8001838:	3801      	subs	r0, #1
 800183a:	4613      	mov	r3, r2
 800183c:	e7a4      	b.n	8001788 <__udivmoddi4+0x1f0>
 800183e:	4660      	mov	r0, ip
 8001840:	e7e9      	b.n	8001816 <__udivmoddi4+0x27e>
 8001842:	4618      	mov	r0, r3
 8001844:	e795      	b.n	8001772 <__udivmoddi4+0x1da>
 8001846:	4667      	mov	r7, ip
 8001848:	e7d1      	b.n	80017ee <__udivmoddi4+0x256>
 800184a:	4681      	mov	r9, r0
 800184c:	e77c      	b.n	8001748 <__udivmoddi4+0x1b0>
 800184e:	3802      	subs	r0, #2
 8001850:	442c      	add	r4, r5
 8001852:	e747      	b.n	80016e4 <__udivmoddi4+0x14c>
 8001854:	f1ac 0c02 	sub.w	ip, ip, #2
 8001858:	442b      	add	r3, r5
 800185a:	e72f      	b.n	80016bc <__udivmoddi4+0x124>
 800185c:	4638      	mov	r0, r7
 800185e:	e708      	b.n	8001672 <__udivmoddi4+0xda>
 8001860:	4637      	mov	r7, r6
 8001862:	e6e9      	b.n	8001638 <__udivmoddi4+0xa0>

08001864 <__aeabi_idiv0>:
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <cutOffSetup>:
#include "adc.h"
#include "fft.h"
/* USER CODE BEGIN 0 */
#include "firCoeffs.h"
#include "signal_matlab.h"
void cutOffSetup() {
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
		if(cutOffFreq == 0.1) {
 800186c:	4b62      	ldr	r3, [pc, #392]	; (80019f8 <cutOffSetup+0x190>)
 800186e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001872:	a353      	add	r3, pc, #332	; (adr r3, 80019c0 <cutOffSetup+0x158>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7ff f936 	bl	8000ae8 <__aeabi_dcmpeq>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <cutOffSetup+0x2c>
	    	 copy_LP(firCoef_LP, firCoef_LP_01);
 8001882:	495e      	ldr	r1, [pc, #376]	; (80019fc <cutOffSetup+0x194>)
 8001884:	485e      	ldr	r0, [pc, #376]	; (8001a00 <cutOffSetup+0x198>)
 8001886:	f000 fae1 	bl	8001e4c <copy_LP>
	    	 copy_HP(firCoef_HP, firCoef_HP_01);
 800188a:	495e      	ldr	r1, [pc, #376]	; (8001a04 <cutOffSetup+0x19c>)
 800188c:	485e      	ldr	r0, [pc, #376]	; (8001a08 <cutOffSetup+0x1a0>)
 800188e:	f000 fafb 	bl	8001e88 <copy_HP>
	         copy_HP(firCoef_HP, firCoef_HP_08);
	       } else {
	         copy_LP(firCoef_LP, firCoef_LP_09);
	         copy_HP(firCoef_HP, firCoef_HP_09);
	       }
}
 8001892:	e093      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.2) {
 8001894:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <cutOffSetup+0x190>)
 8001896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189a:	a34b      	add	r3, pc, #300	; (adr r3, 80019c8 <cutOffSetup+0x160>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7ff f922 	bl	8000ae8 <__aeabi_dcmpeq>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <cutOffSetup+0x54>
	         copy_LP(firCoef_LP, firCoef_LP_02);
 80018aa:	4958      	ldr	r1, [pc, #352]	; (8001a0c <cutOffSetup+0x1a4>)
 80018ac:	4854      	ldr	r0, [pc, #336]	; (8001a00 <cutOffSetup+0x198>)
 80018ae:	f000 facd 	bl	8001e4c <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_02);
 80018b2:	4957      	ldr	r1, [pc, #348]	; (8001a10 <cutOffSetup+0x1a8>)
 80018b4:	4854      	ldr	r0, [pc, #336]	; (8001a08 <cutOffSetup+0x1a0>)
 80018b6:	f000 fae7 	bl	8001e88 <copy_HP>
}
 80018ba:	e07f      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.3) {
 80018bc:	4b4e      	ldr	r3, [pc, #312]	; (80019f8 <cutOffSetup+0x190>)
 80018be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c2:	a343      	add	r3, pc, #268	; (adr r3, 80019d0 <cutOffSetup+0x168>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7ff f90e 	bl	8000ae8 <__aeabi_dcmpeq>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d008      	beq.n	80018e4 <cutOffSetup+0x7c>
	         copy_LP(firCoef_LP, firCoef_LP_03);
 80018d2:	4950      	ldr	r1, [pc, #320]	; (8001a14 <cutOffSetup+0x1ac>)
 80018d4:	484a      	ldr	r0, [pc, #296]	; (8001a00 <cutOffSetup+0x198>)
 80018d6:	f000 fab9 	bl	8001e4c <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_03);
 80018da:	494f      	ldr	r1, [pc, #316]	; (8001a18 <cutOffSetup+0x1b0>)
 80018dc:	484a      	ldr	r0, [pc, #296]	; (8001a08 <cutOffSetup+0x1a0>)
 80018de:	f000 fad3 	bl	8001e88 <copy_HP>
}
 80018e2:	e06b      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.4) {
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <cutOffSetup+0x190>)
 80018e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ea:	a33b      	add	r3, pc, #236	; (adr r3, 80019d8 <cutOffSetup+0x170>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7ff f8fa 	bl	8000ae8 <__aeabi_dcmpeq>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <cutOffSetup+0xa4>
	         copy_LP(firCoef_LP, firCoef_LP_04);
 80018fa:	4948      	ldr	r1, [pc, #288]	; (8001a1c <cutOffSetup+0x1b4>)
 80018fc:	4840      	ldr	r0, [pc, #256]	; (8001a00 <cutOffSetup+0x198>)
 80018fe:	f000 faa5 	bl	8001e4c <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_04);
 8001902:	4947      	ldr	r1, [pc, #284]	; (8001a20 <cutOffSetup+0x1b8>)
 8001904:	4840      	ldr	r0, [pc, #256]	; (8001a08 <cutOffSetup+0x1a0>)
 8001906:	f000 fabf 	bl	8001e88 <copy_HP>
}
 800190a:	e057      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.5) {
 800190c:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <cutOffSetup+0x190>)
 800190e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <cutOffSetup+0x1bc>)
 8001918:	f7ff f8e6 	bl	8000ae8 <__aeabi_dcmpeq>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <cutOffSetup+0xcc>
	         copy_LP(firCoef_LP, firCoef_LP_05);
 8001922:	4941      	ldr	r1, [pc, #260]	; (8001a28 <cutOffSetup+0x1c0>)
 8001924:	4836      	ldr	r0, [pc, #216]	; (8001a00 <cutOffSetup+0x198>)
 8001926:	f000 fa91 	bl	8001e4c <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_05);
 800192a:	4940      	ldr	r1, [pc, #256]	; (8001a2c <cutOffSetup+0x1c4>)
 800192c:	4836      	ldr	r0, [pc, #216]	; (8001a08 <cutOffSetup+0x1a0>)
 800192e:	f000 faab 	bl	8001e88 <copy_HP>
}
 8001932:	e043      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.6) {
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <cutOffSetup+0x190>)
 8001936:	e9d3 0100 	ldrd	r0, r1, [r3]
 800193a:	a329      	add	r3, pc, #164	; (adr r3, 80019e0 <cutOffSetup+0x178>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7ff f8d2 	bl	8000ae8 <__aeabi_dcmpeq>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d008      	beq.n	800195c <cutOffSetup+0xf4>
	         copy_LP(firCoef_LP, firCoef_LP_06);
 800194a:	4939      	ldr	r1, [pc, #228]	; (8001a30 <cutOffSetup+0x1c8>)
 800194c:	482c      	ldr	r0, [pc, #176]	; (8001a00 <cutOffSetup+0x198>)
 800194e:	f000 fa7d 	bl	8001e4c <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_06);
 8001952:	4938      	ldr	r1, [pc, #224]	; (8001a34 <cutOffSetup+0x1cc>)
 8001954:	482c      	ldr	r0, [pc, #176]	; (8001a08 <cutOffSetup+0x1a0>)
 8001956:	f000 fa97 	bl	8001e88 <copy_HP>
}
 800195a:	e02f      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.7) {
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <cutOffSetup+0x190>)
 800195e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001962:	a321      	add	r3, pc, #132	; (adr r3, 80019e8 <cutOffSetup+0x180>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7ff f8be 	bl	8000ae8 <__aeabi_dcmpeq>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <cutOffSetup+0x11c>
	         copy_LP(firCoef_LP, firCoef_LP_07);
 8001972:	4931      	ldr	r1, [pc, #196]	; (8001a38 <cutOffSetup+0x1d0>)
 8001974:	4822      	ldr	r0, [pc, #136]	; (8001a00 <cutOffSetup+0x198>)
 8001976:	f000 fa69 	bl	8001e4c <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_07);
 800197a:	4930      	ldr	r1, [pc, #192]	; (8001a3c <cutOffSetup+0x1d4>)
 800197c:	4822      	ldr	r0, [pc, #136]	; (8001a08 <cutOffSetup+0x1a0>)
 800197e:	f000 fa83 	bl	8001e88 <copy_HP>
}
 8001982:	e01b      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.8) {
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <cutOffSetup+0x190>)
 8001986:	e9d3 0100 	ldrd	r0, r1, [r3]
 800198a:	a319      	add	r3, pc, #100	; (adr r3, 80019f0 <cutOffSetup+0x188>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7ff f8aa 	bl	8000ae8 <__aeabi_dcmpeq>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d008      	beq.n	80019ac <cutOffSetup+0x144>
	         copy_LP(firCoef_LP, firCoef_LP_08);
 800199a:	4929      	ldr	r1, [pc, #164]	; (8001a40 <cutOffSetup+0x1d8>)
 800199c:	4818      	ldr	r0, [pc, #96]	; (8001a00 <cutOffSetup+0x198>)
 800199e:	f000 fa55 	bl	8001e4c <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_08);
 80019a2:	4928      	ldr	r1, [pc, #160]	; (8001a44 <cutOffSetup+0x1dc>)
 80019a4:	4818      	ldr	r0, [pc, #96]	; (8001a08 <cutOffSetup+0x1a0>)
 80019a6:	f000 fa6f 	bl	8001e88 <copy_HP>
}
 80019aa:	e007      	b.n	80019bc <cutOffSetup+0x154>
	         copy_LP(firCoef_LP, firCoef_LP_09);
 80019ac:	4926      	ldr	r1, [pc, #152]	; (8001a48 <cutOffSetup+0x1e0>)
 80019ae:	4814      	ldr	r0, [pc, #80]	; (8001a00 <cutOffSetup+0x198>)
 80019b0:	f000 fa4c 	bl	8001e4c <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_09);
 80019b4:	4925      	ldr	r1, [pc, #148]	; (8001a4c <cutOffSetup+0x1e4>)
 80019b6:	4814      	ldr	r0, [pc, #80]	; (8001a08 <cutOffSetup+0x1a0>)
 80019b8:	f000 fa66 	bl	8001e88 <copy_HP>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	9999999a 	.word	0x9999999a
 80019c4:	3fb99999 	.word	0x3fb99999
 80019c8:	9999999a 	.word	0x9999999a
 80019cc:	3fc99999 	.word	0x3fc99999
 80019d0:	33333333 	.word	0x33333333
 80019d4:	3fd33333 	.word	0x3fd33333
 80019d8:	9999999a 	.word	0x9999999a
 80019dc:	3fd99999 	.word	0x3fd99999
 80019e0:	33333333 	.word	0x33333333
 80019e4:	3fe33333 	.word	0x3fe33333
 80019e8:	66666666 	.word	0x66666666
 80019ec:	3fe66666 	.word	0x3fe66666
 80019f0:	9999999a 	.word	0x9999999a
 80019f4:	3fe99999 	.word	0x3fe99999
 80019f8:	20001230 	.word	0x20001230
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20001550 	.word	0x20001550
 8001a04:	20000900 	.word	0x20000900
 8001a08:	20001650 	.word	0x20001650
 8001a0c:	20000100 	.word	0x20000100
 8001a10:	20000a04 	.word	0x20000a04
 8001a14:	20000200 	.word	0x20000200
 8001a18:	20000b08 	.word	0x20000b08
 8001a1c:	20000300 	.word	0x20000300
 8001a20:	20000c0c 	.word	0x20000c0c
 8001a24:	3fe00000 	.word	0x3fe00000
 8001a28:	20000400 	.word	0x20000400
 8001a2c:	20000d10 	.word	0x20000d10
 8001a30:	20000500 	.word	0x20000500
 8001a34:	20000e14 	.word	0x20000e14
 8001a38:	20000600 	.word	0x20000600
 8001a3c:	20000f18 	.word	0x20000f18
 8001a40:	20000700 	.word	0x20000700
 8001a44:	2000101c 	.word	0x2000101c
 8001a48:	20000800 	.word	0x20000800
 8001a4c:	20001120 	.word	0x20001120

08001a50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; ++i) {
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001a62:	e02c      	b.n	8001abe <HAL_ADC_ConvCpltCallback+0x6e>
			array[i] = -amplitude + (float)buffer[i]/FS_INT * 2;
 8001a64:	4ac5      	ldr	r2, [pc, #788]	; (8001d7c <HAL_ADC_ConvCpltCallback+0x32c>)
 8001a66:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a78:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8001d80 <HAL_ADC_ConvCpltCallback+0x330>
 8001a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a80:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a84:	4bbf      	ldr	r3, [pc, #764]	; (8001d84 <HAL_ADC_ConvCpltCallback+0x334>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8e:	4abe      	ldr	r2, [pc, #760]	; (8001d88 <HAL_ADC_ConvCpltCallback+0x338>)
 8001a90:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	edc3 7a00 	vstr	s15, [r3]
			arrayInt[i] = buffer[i];
 8001a9c:	4ab7      	ldr	r2, [pc, #732]	; (8001d7c <HAL_ADC_ConvCpltCallback+0x32c>)
 8001a9e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4ab8      	ldr	r2, [pc, #736]	; (8001d8c <HAL_ADC_ConvCpltCallback+0x33c>)
 8001aac:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001ab0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < BUFFER_SIZE; ++i) {
 8001ab4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001abe:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001ac2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ac4:	ddce      	ble.n	8001a64 <HAL_ADC_ConvCpltCallback+0x14>
		}

		float sum = 0;
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330

		if(!lowpass) {										//!lowpass= 1 -> HP
 8001ace:	4bb0      	ldr	r3, [pc, #704]	; (8001d90 <HAL_ADC_ConvCpltCallback+0x340>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	f083 0301 	eor.w	r3, r3, #1
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d04a      	beq.n	8001b72 <HAL_ADC_ConvCpltCallback+0x122>
			for(int n = 0; n < BUFFER_SIZE; ++n) {			//L = BUFFER_SIZE
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8001ae2:	e041      	b.n	8001b68 <HAL_ADC_ConvCpltCallback+0x118>
				for(int k = 0; k < BUFFER_SIZE + 1; ++k) {	//N = L - 1 = BUFFER_SIZE - 1
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8001aea:	e024      	b.n	8001b36 <HAL_ADC_ConvCpltCallback+0xe6>
					if(n - k >= 0)
 8001aec:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8001af0:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	db18      	blt.n	8001b2c <HAL_ADC_ConvCpltCallback+0xdc>
						sum += firCoef_HP[k] * array[n-k];
 8001afa:	4aa6      	ldr	r2, [pc, #664]	; (8001d94 <HAL_ADC_ConvCpltCallback+0x344>)
 8001afc:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	ed93 7a00 	vldr	s14, [r3]
 8001b08:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8001b0c:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	4a9d      	ldr	r2, [pc, #628]	; (8001d88 <HAL_ADC_ConvCpltCallback+0x338>)
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b20:	ed97 7acc 	vldr	s14, [r7, #816]	; 0x330
 8001b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b28:	edc7 7acc 	vstr	s15, [r7, #816]	; 0x330
				for(int k = 0; k < BUFFER_SIZE + 1; ++k) {	//N = L - 1 = BUFFER_SIZE - 1
 8001b2c:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001b30:	3301      	adds	r3, #1
 8001b32:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8001b36:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001b3a:	2b40      	cmp	r3, #64	; 0x40
 8001b3c:	ddd6      	ble.n	8001aec <HAL_ADC_ConvCpltCallback+0x9c>
				}
				filteredArray[n] = sum;
 8001b3e:	edd7 7acc 	vldr	s15, [r7, #816]	; 0x330
 8001b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b46:	ee17 3a90 	vmov	r3, s15
 8001b4a:	b299      	uxth	r1, r3
 8001b4c:	4a92      	ldr	r2, [pc, #584]	; (8001d98 <HAL_ADC_ConvCpltCallback+0x348>)
 8001b4e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8001b52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sum = 0;
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
			for(int n = 0; n < BUFFER_SIZE; ++n) {			//L = BUFFER_SIZE
 8001b5e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8001b62:	3301      	adds	r3, #1
 8001b64:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8001b68:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8001b6c:	2b3f      	cmp	r3, #63	; 0x3f
 8001b6e:	ddb9      	ble.n	8001ae4 <HAL_ADC_ConvCpltCallback+0x94>
 8001b70:	e049      	b.n	8001c06 <HAL_ADC_ConvCpltCallback+0x1b6>
			}
		} else {											//!lowpass = 0 -> LP
			for(int n = 0; n < BUFFER_SIZE; ++n) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8001b78:	e041      	b.n	8001bfe <HAL_ADC_ConvCpltCallback+0x1ae>
				for(int k = 0; k < BUFFER_SIZE; ++k) {
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8001b80:	e024      	b.n	8001bcc <HAL_ADC_ConvCpltCallback+0x17c>
					if(n - k >= 0)
 8001b82:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8001b86:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db18      	blt.n	8001bc2 <HAL_ADC_ConvCpltCallback+0x172>
						sum += firCoef_LP[k] * array[n-k];
 8001b90:	4a82      	ldr	r2, [pc, #520]	; (8001d9c <HAL_ADC_ConvCpltCallback+0x34c>)
 8001b92:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	4413      	add	r3, r2
 8001b9a:	ed93 7a00 	vldr	s14, [r3]
 8001b9e:	f8d7 2324 	ldr.w	r2, [r7, #804]	; 0x324
 8001ba2:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	4a77      	ldr	r2, [pc, #476]	; (8001d88 <HAL_ADC_ConvCpltCallback+0x338>)
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb6:	ed97 7acc 	vldr	s14, [r7, #816]	; 0x330
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	edc7 7acc 	vstr	s15, [r7, #816]	; 0x330
				for(int k = 0; k < BUFFER_SIZE; ++k) {
 8001bc2:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 8001bcc:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001bd0:	2b3f      	cmp	r3, #63	; 0x3f
 8001bd2:	ddd6      	ble.n	8001b82 <HAL_ADC_ConvCpltCallback+0x132>
				}
				filteredArray[n] = sum;
 8001bd4:	edd7 7acc 	vldr	s15, [r7, #816]	; 0x330
 8001bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bdc:	ee17 3a90 	vmov	r3, s15
 8001be0:	b299      	uxth	r1, r3
 8001be2:	4a6d      	ldr	r2, [pc, #436]	; (8001d98 <HAL_ADC_ConvCpltCallback+0x348>)
 8001be4:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001be8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				sum = 0;
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
			for(int n = 0; n < BUFFER_SIZE; ++n) {
 8001bf4:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8001bfe:	f8d7 3324 	ldr.w	r3, [r7, #804]	; 0x324
 8001c02:	2b3f      	cmp	r3, #63	; 0x3f
 8001c04:	ddb9      	ble.n	8001b7a <HAL_ADC_ConvCpltCallback+0x12a>
			}
		}
		for(int i=0; i<BUFFER_SIZE; i++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8001c0c:	e015      	b.n	8001c3a <HAL_ADC_ConvCpltCallback+0x1ea>
			filteredArray_int[i] = filteredArray[i] * FS_INT_HALF + FS_INT_HALF;
 8001c0e:	4a62      	ldr	r2, [pc, #392]	; (8001d98 <HAL_ADC_ConvCpltCallback+0x348>)
 8001c10:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8001c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	02d2      	lsls	r2, r2, #11
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	b299      	uxth	r1, r3
 8001c26:	4a5e      	ldr	r2, [pc, #376]	; (8001da0 <HAL_ADC_ConvCpltCallback+0x350>)
 8001c28:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8001c2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i=0; i<BUFFER_SIZE; i++) {
 8001c30:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8001c34:	3301      	adds	r3, #1
 8001c36:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8001c3a:	f8d7 331c 	ldr.w	r3, [r7, #796]	; 0x31c
 8001c3e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c40:	dde5      	ble.n	8001c0e <HAL_ADC_ConvCpltCallback+0x1be>
		}

		if(!signal_q) {
 8001c42:	4b58      	ldr	r3, [pc, #352]	; (8001da4 <HAL_ADC_ConvCpltCallback+0x354>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80e0 	beq.w	8001e12 <HAL_ADC_ConvCpltCallback+0x3c2>

			if(filtered){
 8001c52:	4b55      	ldr	r3, [pc, #340]	; (8001da8 <HAL_ADC_ConvCpltCallback+0x358>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d060      	beq.n	8001d1c <HAL_ADC_ConvCpltCallback+0x2cc>
				int spectrum_int[BUFFER_SIZE];
				float complex vector[BUFFER_SIZE];
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 8001c60:	e01d      	b.n	8001c9e <HAL_ADC_ConvCpltCallback+0x24e>
					vector[k] = (float) filteredArray_int[k];
 8001c62:	4a4f      	ldr	r2, [pc, #316]	; (8001da0 <HAL_ADC_ConvCpltCallback+0x350>)
 8001c64:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8001c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c76:	ee17 4a90 	vmov	r4, s15
 8001c7a:	f04f 0000 	mov.w	r0, #0
 8001c7e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001c82:	f8d7 2318 	ldr.w	r2, [r7, #792]	; 0x318
 8001c86:	00d1      	lsls	r1, r2, #3
 8001c88:	4419      	add	r1, r3
 8001c8a:	600c      	str	r4, [r1, #0]
 8001c8c:	00d2      	lsls	r2, r2, #3
 8001c8e:	4413      	add	r3, r2
 8001c90:	3304      	adds	r3, #4
 8001c92:	6018      	str	r0, [r3, #0]
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001c94:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8001c98:	3301      	adds	r3, #1
 8001c9a:	f8c7 3318 	str.w	r3, [r7, #792]	; 0x318
 8001c9e:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8001ca2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ca4:	dddd      	ble.n	8001c62 <HAL_ADC_ConvCpltCallback+0x212>
				}
				fft(vector, BUFFER_SIZE);
 8001ca6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001caa:	2140      	movs	r1, #64	; 0x40
 8001cac:	4618      	mov	r0, r3
 8001cae:	f000 fe80 	bl	80029b2 <fft>
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8001cb8:	e025      	b.n	8001d06 <HAL_ADC_ConvCpltCallback+0x2b6>
					spectrum_int[k] = (int) cabsf(vector[k]);
 8001cba:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001cbe:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8001cc2:	00d1      	lsls	r1, r2, #3
 8001cc4:	4419      	add	r1, r3
 8001cc6:	6809      	ldr	r1, [r1, #0]
 8001cc8:	00d2      	lsls	r2, r2, #3
 8001cca:	4413      	add	r3, r2
 8001ccc:	3304      	adds	r3, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	ee07 1a10 	vmov	s14, r1
 8001cd4:	ee07 3a90 	vmov	s15, r3
 8001cd8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cdc:	eef0 0a67 	vmov.f32	s1, s15
 8001ce0:	f009 fdb3 	bl	800b84a <cabsf>
 8001ce4:	eef0 7a40 	vmov.f32	s15, s0
 8001ce8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cec:	ee17 1a90 	vmov	r1, s15
 8001cf0:	f107 030c 	add.w	r3, r7, #12
 8001cf4:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8001cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001cfc:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001d00:	3301      	adds	r3, #1
 8001d02:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8001d06:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8001d0a:	2b3f      	cmp	r3, #63	; 0x3f
 8001d0c:	ddd5      	ble.n	8001cba <HAL_ADC_ConvCpltCallback+0x26a>
				}
				ShowSignal(spectrum_int, "SPECTRUM");
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	4926      	ldr	r1, [pc, #152]	; (8001dac <HAL_ADC_ConvCpltCallback+0x35c>)
 8001d14:	4618      	mov	r0, r3
 8001d16:	f001 fac1 	bl	800329c <ShowSignal>
				ShowSignal(filteredArray_int, "SIGNAL");
			} else {
				ShowSignal(arrayInt, "SIGNAL");
			}
		}
}
 8001d1a:	e087      	b.n	8001e2c <HAL_ADC_ConvCpltCallback+0x3dc>
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8001d22:	e01c      	b.n	8001d5e <HAL_ADC_ConvCpltCallback+0x30e>
					vector[k] = (float) arrayInt[k];
 8001d24:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <HAL_ADC_ConvCpltCallback+0x33c>)
 8001d26:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8001d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d36:	ee17 4a90 	vmov	r4, s15
 8001d3a:	f04f 0000 	mov.w	r0, #0
 8001d3e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001d42:	f8d7 2310 	ldr.w	r2, [r7, #784]	; 0x310
 8001d46:	00d1      	lsls	r1, r2, #3
 8001d48:	4419      	add	r1, r3
 8001d4a:	600c      	str	r4, [r1, #0]
 8001d4c:	00d2      	lsls	r2, r2, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	3304      	adds	r3, #4
 8001d52:	6018      	str	r0, [r3, #0]
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001d54:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8001d5e:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 8001d62:	2b3f      	cmp	r3, #63	; 0x3f
 8001d64:	ddde      	ble.n	8001d24 <HAL_ADC_ConvCpltCallback+0x2d4>
				fft(vector, BUFFER_SIZE);
 8001d66:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001d6a:	2140      	movs	r1, #64	; 0x40
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 fe20 	bl	80029b2 <fft>
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8001d78:	e040      	b.n	8001dfc <HAL_ADC_ConvCpltCallback+0x3ac>
 8001d7a:	bf00      	nop
 8001d7c:	200018fc 	.word	0x200018fc
 8001d80:	457ff000 	.word	0x457ff000
 8001d84:	20001228 	.word	0x20001228
 8001d88:	20001a7c 	.word	0x20001a7c
 8001d8c:	200017fc 	.word	0x200017fc
 8001d90:	20001227 	.word	0x20001227
 8001d94:	20001650 	.word	0x20001650
 8001d98:	2000197c 	.word	0x2000197c
 8001d9c:	20001550 	.word	0x20001550
 8001da0:	200019fc 	.word	0x200019fc
 8001da4:	20001226 	.word	0x20001226
 8001da8:	20001444 	.word	0x20001444
 8001dac:	0800d000 	.word	0x0800d000
					spectrum_int[k] = (int) cabsf(vector[k]);
 8001db0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001db4:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8001db8:	00d1      	lsls	r1, r2, #3
 8001dba:	4419      	add	r1, r3
 8001dbc:	6809      	ldr	r1, [r1, #0]
 8001dbe:	00d2      	lsls	r2, r2, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3304      	adds	r3, #4
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	ee07 1a10 	vmov	s14, r1
 8001dca:	ee07 3a90 	vmov	s15, r3
 8001dce:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd2:	eef0 0a67 	vmov.f32	s1, s15
 8001dd6:	f009 fd38 	bl	800b84a <cabsf>
 8001dda:	eef0 7a40 	vmov.f32	s15, s0
 8001dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001de2:	ee17 1a90 	vmov	r1, s15
 8001de6:	f107 030c 	add.w	r3, r7, #12
 8001dea:	f8d7 230c 	ldr.w	r2, [r7, #780]	; 0x30c
 8001dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001df2:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8001df6:	3301      	adds	r3, #1
 8001df8:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8001dfc:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8001e00:	2b3f      	cmp	r3, #63	; 0x3f
 8001e02:	ddd5      	ble.n	8001db0 <HAL_ADC_ConvCpltCallback+0x360>
				ShowSignal(spectrum_int, "SPECTRUM");
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	490b      	ldr	r1, [pc, #44]	; (8001e38 <HAL_ADC_ConvCpltCallback+0x3e8>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 fa46 	bl	800329c <ShowSignal>
}
 8001e10:	e00c      	b.n	8001e2c <HAL_ADC_ConvCpltCallback+0x3dc>
			if(filtered){
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_ADC_ConvCpltCallback+0x3ec>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d004      	beq.n	8001e24 <HAL_ADC_ConvCpltCallback+0x3d4>
				ShowSignal(filteredArray_int, "SIGNAL");
 8001e1a:	4909      	ldr	r1, [pc, #36]	; (8001e40 <HAL_ADC_ConvCpltCallback+0x3f0>)
 8001e1c:	4809      	ldr	r0, [pc, #36]	; (8001e44 <HAL_ADC_ConvCpltCallback+0x3f4>)
 8001e1e:	f001 fa3d 	bl	800329c <ShowSignal>
}
 8001e22:	e003      	b.n	8001e2c <HAL_ADC_ConvCpltCallback+0x3dc>
				ShowSignal(arrayInt, "SIGNAL");
 8001e24:	4906      	ldr	r1, [pc, #24]	; (8001e40 <HAL_ADC_ConvCpltCallback+0x3f0>)
 8001e26:	4808      	ldr	r0, [pc, #32]	; (8001e48 <HAL_ADC_ConvCpltCallback+0x3f8>)
 8001e28:	f001 fa38 	bl	800329c <ShowSignal>
}
 8001e2c:	bf00      	nop
 8001e2e:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd90      	pop	{r4, r7, pc}
 8001e36:	bf00      	nop
 8001e38:	0800d000 	.word	0x0800d000
 8001e3c:	20001444 	.word	0x20001444
 8001e40:	0800d00c 	.word	0x0800d00c
 8001e44:	200019fc 	.word	0x200019fc
 8001e48:	200017fc 	.word	0x200017fc

08001e4c <copy_LP>:

void copy_LP(volatile float* array1, float *array2) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < BUFFER_SIZE; i++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	e00c      	b.n	8001e76 <copy_LP+0x2a>
		*(array1 + i) = *(array2 + i);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	441a      	add	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	440b      	add	r3, r1
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	3301      	adds	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b3f      	cmp	r3, #63	; 0x3f
 8001e7a:	ddef      	ble.n	8001e5c <copy_LP+0x10>
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <copy_HP>:

void copy_HP(volatile float* array1, float *array2) {
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < BUFFER_SIZE + 1; i++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e00c      	b.n	8001eb2 <copy_HP+0x2a>
		*(array1 + i) = *(array2 + i);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	441a      	add	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	440b      	add	r3, r1
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE + 1; i++)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b40      	cmp	r3, #64	; 0x40
 8001eb6:	ddef      	ble.n	8001e98 <copy_HP+0x10>
}
 8001eb8:	bf00      	nop
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001eca:	463b      	mov	r3, r7
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001ed6:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001ed8:	4a21      	ldr	r2, [pc, #132]	; (8001f60 <MX_ADC3_Init+0x9c>)
 8001eda:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001edc:	4b1f      	ldr	r3, [pc, #124]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001ede:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ee2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ef6:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <MX_ADC3_Init+0xa0>)
 8001f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f0a:	4b14      	ldr	r3, [pc, #80]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f1e:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001f26:	f001 fde5 	bl	8003af4 <HAL_ADC_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001f30:	f001 fb6a 	bl	8003608 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001f34:	2304      	movs	r3, #4
 8001f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001f3c:	2307      	movs	r3, #7
 8001f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	4619      	mov	r1, r3
 8001f44:	4805      	ldr	r0, [pc, #20]	; (8001f5c <MX_ADC3_Init+0x98>)
 8001f46:	f001 ff1f 	bl	8003d88 <HAL_ADC_ConfigChannel>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001f50:	f001 fb5a 	bl	8003608 <Error_Handler>
  }

}
 8001f54:	bf00      	nop
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	200017b4 	.word	0x200017b4
 8001f60:	40012200 	.word	0x40012200
 8001f64:	0f000001 	.word	0x0f000001

08001f68 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a2f      	ldr	r2, [pc, #188]	; (8002044 <HAL_ADC_MspInit+0xdc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d158      	bne.n	800203c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <HAL_ADC_MspInit+0xe0>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	4a2d      	ldr	r2, [pc, #180]	; (8002048 <HAL_ADC_MspInit+0xe0>)
 8001f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f98:	6453      	str	r3, [r2, #68]	; 0x44
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_ADC_MspInit+0xe0>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4b27      	ldr	r3, [pc, #156]	; (8002048 <HAL_ADC_MspInit+0xe0>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	4a26      	ldr	r2, [pc, #152]	; (8002048 <HAL_ADC_MspInit+0xe0>)
 8001fb0:	f043 0320 	orr.w	r3, r3, #32
 8001fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <HAL_ADC_MspInit+0xe0>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fc2:	2340      	movs	r3, #64	; 0x40
 8001fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fce:	f107 0314 	add.w	r3, r7, #20
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481d      	ldr	r0, [pc, #116]	; (800204c <HAL_ADC_MspInit+0xe4>)
 8001fd6:	f003 f8fd 	bl	80051d4 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8001fdc:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <HAL_ADC_MspInit+0xec>)
 8001fde:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8001fe2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fe6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001ff4:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8001ff6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ffa:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ffc:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8001ffe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002002:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8002006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800200a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 800200e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002012:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8002016:	2200      	movs	r2, #0
 8002018:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 800201c:	2200      	movs	r2, #0
 800201e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002020:	480b      	ldr	r0, [pc, #44]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8002022:	f002 fcd7 	bl	80049d4 <HAL_DMA_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800202c:	f001 faec 	bl	8003608 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a07      	ldr	r2, [pc, #28]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8002034:	639a      	str	r2, [r3, #56]	; 0x38
 8002036:	4a06      	ldr	r2, [pc, #24]	; (8002050 <HAL_ADC_MspInit+0xe8>)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800203c:	bf00      	nop
 800203e:	3728      	adds	r7, #40	; 0x28
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40012200 	.word	0x40012200
 8002048:	40023800 	.word	0x40023800
 800204c:	40021400 	.word	0x40021400
 8002050:	20001754 	.word	0x20001754
 8002054:	40026410 	.word	0x40026410

08002058 <generate>:
/* USER CODE BEGIN 0 */
#include "tim.h"
#include "signal_matlab.h"
uint32_t signal[SAMPLES];

void generate () {
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af02      	add	r7, sp, #8
  if (gen) {
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <generate+0x74>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d029      	beq.n	80020ba <generate+0x62>
	  if (sinewave) {
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <generate+0x78>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <generate+0x30>
		  racunaj_sinus();
 800206e:	f000 f933 	bl	80022d8 <racunaj_sinus>
		  MX_TIM6_Freq_Init();
 8002072:	f000 f8df 	bl	8002234 <MX_TIM6_Freq_Init>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, signal, SAMPLES,DAC_ALIGN_12B_R);
 8002076:	2300      	movs	r3, #0
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2364      	movs	r3, #100	; 0x64
 800207c:	4a15      	ldr	r2, [pc, #84]	; (80020d4 <generate+0x7c>)
 800207e:	2110      	movs	r1, #16
 8002080:	4815      	ldr	r0, [pc, #84]	; (80020d8 <generate+0x80>)
 8002082:	f002 fa65 	bl	8004550 <HAL_DAC_Start_DMA>
	  }
  } else {
	  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
	  LCDFunctionGeneratorOFF();
  }
}
 8002086:	e01e      	b.n	80020c6 <generate+0x6e>
	  } else if (!sinewave) {
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <generate+0x78>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	f083 0301 	eor.w	r3, r3, #1
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d017      	beq.n	80020c6 <generate+0x6e>
		  racunaj_pravokutni();
 8002096:	f000 f983 	bl	80023a0 <racunaj_pravokutni>
		  MX_TIM6_Freq_Init();
 800209a:	f000 f8cb 	bl	8002234 <MX_TIM6_Freq_Init>
		  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, signal, SAMPLES,DAC_ALIGN_12B_R);
 800209e:	2300      	movs	r3, #0
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2364      	movs	r3, #100	; 0x64
 80020a4:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <generate+0x7c>)
 80020a6:	2110      	movs	r1, #16
 80020a8:	480b      	ldr	r0, [pc, #44]	; (80020d8 <generate+0x80>)
 80020aa:	f002 fa51 	bl	8004550 <HAL_DAC_Start_DMA>
		  SetSquareOutput(frequency);
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <generate+0x84>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 fe9c 	bl	8002df0 <SetSquareOutput>
}
 80020b8:	e005      	b.n	80020c6 <generate+0x6e>
	  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 80020ba:	2110      	movs	r1, #16
 80020bc:	4806      	ldr	r0, [pc, #24]	; (80020d8 <generate+0x80>)
 80020be:	f002 faf5 	bl	80046ac <HAL_DAC_Stop_DMA>
	  LCDFunctionGeneratorOFF();
 80020c2:	f000 fda9 	bl	8002c18 <LCDFunctionGeneratorOFF>
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20001224 	.word	0x20001224
 80020d0:	20001225 	.word	0x20001225
 80020d4:	20001b7c 	.word	0x20001b7c
 80020d8:	20001d0c 	.word	0x20001d0c
 80020dc:	2000122c 	.word	0x2000122c

080020e0 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80020e6:	463b      	mov	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <MX_DAC_Init+0x4c>)
 80020f0:	4a0f      	ldr	r2, [pc, #60]	; (8002130 <MX_DAC_Init+0x50>)
 80020f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80020f4:	480d      	ldr	r0, [pc, #52]	; (800212c <MX_DAC_Init+0x4c>)
 80020f6:	f002 fa08 	bl	800450a <HAL_DAC_Init>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002100:	f001 fa82 	bl	8003608 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002104:	2304      	movs	r3, #4
 8002106:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800210c:	463b      	mov	r3, r7
 800210e:	2210      	movs	r2, #16
 8002110:	4619      	mov	r1, r3
 8002112:	4806      	ldr	r0, [pc, #24]	; (800212c <MX_DAC_Init+0x4c>)
 8002114:	f002 fb7d 	bl	8004812 <HAL_DAC_ConfigChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800211e:	f001 fa73 	bl	8003608 <Error_Handler>
  }

}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20001d0c 	.word	0x20001d0c
 8002130:	40007400 	.word	0x40007400

08002134 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b08a      	sub	sp, #40	; 0x28
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800213c:	f107 0314 	add.w	r3, r7, #20
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a33      	ldr	r2, [pc, #204]	; (8002220 <HAL_DAC_MspInit+0xec>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d160      	bne.n	8002218 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	4b32      	ldr	r3, [pc, #200]	; (8002224 <HAL_DAC_MspInit+0xf0>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a31      	ldr	r2, [pc, #196]	; (8002224 <HAL_DAC_MspInit+0xf0>)
 8002160:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <HAL_DAC_MspInit+0xf0>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800216e:	613b      	str	r3, [r7, #16]
 8002170:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <HAL_DAC_MspInit+0xf0>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <HAL_DAC_MspInit+0xf0>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	6313      	str	r3, [r2, #48]	; 0x30
 8002182:	4b28      	ldr	r3, [pc, #160]	; (8002224 <HAL_DAC_MspInit+0xf0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800218e:	2320      	movs	r3, #32
 8002190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002192:	2303      	movs	r3, #3
 8002194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4821      	ldr	r0, [pc, #132]	; (8002228 <HAL_DAC_MspInit+0xf4>)
 80021a2:	f003 f817 	bl	80051d4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80021a6:	4b21      	ldr	r3, [pc, #132]	; (800222c <HAL_DAC_MspInit+0xf8>)
 80021a8:	4a21      	ldr	r2, [pc, #132]	; (8002230 <HAL_DAC_MspInit+0xfc>)
 80021aa:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80021ac:	4b1f      	ldr	r3, [pc, #124]	; (800222c <HAL_DAC_MspInit+0xf8>)
 80021ae:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80021b2:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021b4:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_DAC_MspInit+0xf8>)
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ba:	4b1c      	ldr	r3, [pc, #112]	; (800222c <HAL_DAC_MspInit+0xf8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_DAC_MspInit+0xf8>)
 80021c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c6:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <HAL_DAC_MspInit+0xf8>)
 80021ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ce:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021d0:	4b16      	ldr	r3, [pc, #88]	; (800222c <HAL_DAC_MspInit+0xf8>)
 80021d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021d6:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80021d8:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_DAC_MspInit+0xf8>)
 80021da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021de:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_DAC_MspInit+0xf8>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_DAC_MspInit+0xf8>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80021ec:	480f      	ldr	r0, [pc, #60]	; (800222c <HAL_DAC_MspInit+0xf8>)
 80021ee:	f002 fbf1 	bl	80049d4 <HAL_DMA_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80021f8:	f001 fa06 	bl	8003608 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0b      	ldr	r2, [pc, #44]	; (800222c <HAL_DAC_MspInit+0xf8>)
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <HAL_DAC_MspInit+0xf8>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	2036      	movs	r0, #54	; 0x36
 800220e:	f002 f946 	bl	800449e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002212:	2036      	movs	r0, #54	; 0x36
 8002214:	f002 f95f 	bl	80044d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8002218:	bf00      	nop
 800221a:	3728      	adds	r7, #40	; 0x28
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40007400 	.word	0x40007400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020000 	.word	0x40020000
 800222c:	20001d20 	.word	0x20001d20
 8002230:	400260a0 	.word	0x400260a0

08002234 <MX_TIM6_Freq_Init>:
  }
}

/* USER CODE BEGIN 1 */
void MX_TIM6_Freq_Init()
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223a:	463b      	mov	r3, r7
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <MX_TIM6_Freq_Init+0x90>)
 8002244:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <MX_TIM6_Freq_Init+0x94>)
 8002246:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8002248:	4b1e      	ldr	r3, [pc, #120]	; (80022c4 <MX_TIM6_Freq_Init+0x90>)
 800224a:	2259      	movs	r2, #89	; 0x59
 800224c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <MX_TIM6_Freq_Init+0x90>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (10000/frequency) - 1;
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <MX_TIM6_Freq_Init+0x98>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f242 7210 	movw	r2, #10000	; 0x2710
 800225c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002260:	3b01      	subs	r3, #1
 8002262:	461a      	mov	r2, r3
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <MX_TIM6_Freq_Init+0x90>)
 8002266:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002268:	4b16      	ldr	r3, [pc, #88]	; (80022c4 <MX_TIM6_Freq_Init+0x90>)
 800226a:	2200      	movs	r2, #0
 800226c:	619a      	str	r2, [r3, #24]

  if (frequency > 1000) {
 800226e:	4b17      	ldr	r3, [pc, #92]	; (80022cc <MX_TIM6_Freq_Init+0x98>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002276:	dd0b      	ble.n	8002290 <MX_TIM6_Freq_Init+0x5c>
	  htim6.Init.Prescaler = (90000/frequency) - 1;
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <MX_TIM6_Freq_Init+0x98>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <MX_TIM6_Freq_Init+0x9c>)
 800227e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002282:	3b01      	subs	r3, #1
 8002284:	461a      	mov	r2, r3
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <MX_TIM6_Freq_Init+0x90>)
 8002288:	605a      	str	r2, [r3, #4]
	  htim6.Init.Period = 10-1;
 800228a:	4b0e      	ldr	r3, [pc, #56]	; (80022c4 <MX_TIM6_Freq_Init+0x90>)
 800228c:	2209      	movs	r2, #9
 800228e:	60da      	str	r2, [r3, #12]
  }
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <MX_TIM6_Freq_Init+0x90>)
 8002292:	f004 f87b 	bl	800638c <HAL_TIM_Base_Init>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM6_Freq_Init+0x6c>
  {
    Error_Handler();
 800229c:	f001 f9b4 	bl	8003608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022a0:	2320      	movs	r3, #32
 80022a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a4:	2300      	movs	r3, #0
 80022a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022a8:	463b      	mov	r3, r7
 80022aa:	4619      	mov	r1, r3
 80022ac:	4805      	ldr	r0, [pc, #20]	; (80022c4 <MX_TIM6_Freq_Init+0x90>)
 80022ae:	f004 fa97 	bl	80067e0 <HAL_TIMEx_MasterConfigSynchronization>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM6_Freq_Init+0x88>
  {
    Error_Handler();
 80022b8:	f001 f9a6 	bl	8003608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	20001e34 	.word	0x20001e34
 80022c8:	40001000 	.word	0x40001000
 80022cc:	2000122c 	.word	0x2000122c
 80022d0:	00015f90 	.word	0x00015f90
 80022d4:	00000000 	.word	0x00000000

080022d8 <racunaj_sinus>:

void racunaj_sinus()
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	e044      	b.n	800236e <racunaj_sinus+0x96>
	{
		signal[i] = (sin(i*2*PI/SAMPLES) + 1) * (0xFFF)/2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe f92b 	bl	8000544 <__aeabi_i2d>
 80022ee:	a329      	add	r3, pc, #164	; (adr r3, 8002394 <racunaj_sinus+0xbc>)
 80022f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f4:	f7fe f990 	bl	8000618 <__aeabi_dmul>
 80022f8:	4603      	mov	r3, r0
 80022fa:	460c      	mov	r4, r1
 80022fc:	4618      	mov	r0, r3
 80022fe:	4621      	mov	r1, r4
 8002300:	f04f 0200 	mov.w	r2, #0
 8002304:	4b20      	ldr	r3, [pc, #128]	; (8002388 <racunaj_sinus+0xb0>)
 8002306:	f7fe fab1 	bl	800086c <__aeabi_ddiv>
 800230a:	4603      	mov	r3, r0
 800230c:	460c      	mov	r4, r1
 800230e:	ec44 3b17 	vmov	d7, r3, r4
 8002312:	eeb0 0a47 	vmov.f32	s0, s14
 8002316:	eef0 0a67 	vmov.f32	s1, s15
 800231a:	f009 fb59 	bl	800b9d0 <sin>
 800231e:	ec51 0b10 	vmov	r0, r1, d0
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	4b19      	ldr	r3, [pc, #100]	; (800238c <racunaj_sinus+0xb4>)
 8002328:	f7fd ffc0 	bl	80002ac <__adddf3>
 800232c:	4603      	mov	r3, r0
 800232e:	460c      	mov	r4, r1
 8002330:	4618      	mov	r0, r3
 8002332:	4621      	mov	r1, r4
 8002334:	a312      	add	r3, pc, #72	; (adr r3, 8002380 <racunaj_sinus+0xa8>)
 8002336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233a:	f7fe f96d 	bl	8000618 <__aeabi_dmul>
 800233e:	4603      	mov	r3, r0
 8002340:	460c      	mov	r4, r1
 8002342:	4618      	mov	r0, r3
 8002344:	4621      	mov	r1, r4
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800234e:	f7fe fa8d 	bl	800086c <__aeabi_ddiv>
 8002352:	4603      	mov	r3, r0
 8002354:	460c      	mov	r4, r1
 8002356:	4618      	mov	r0, r3
 8002358:	4621      	mov	r1, r4
 800235a:	f7fe fc35 	bl	8000bc8 <__aeabi_d2uiz>
 800235e:	4601      	mov	r1, r0
 8002360:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <racunaj_sinus+0xb8>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SAMPLES; i++)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3301      	adds	r3, #1
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b63      	cmp	r3, #99	; 0x63
 8002372:	ddb7      	ble.n	80022e4 <racunaj_sinus+0xc>
	}
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bd90      	pop	{r4, r7, pc}
 800237c:	f3af 8000 	nop.w
 8002380:	00000000 	.word	0x00000000
 8002384:	40affe00 	.word	0x40affe00
 8002388:	40590000 	.word	0x40590000
 800238c:	3ff00000 	.word	0x3ff00000
 8002390:	20001b7c 	.word	0x20001b7c
 8002394:	54442eea 	.word	0x54442eea
 8002398:	400921fb 	.word	0x400921fb
 800239c:	00000000 	.word	0x00000000

080023a0 <racunaj_pravokutni>:

void racunaj_pravokutni()
{
 80023a0:	b590      	push	{r4, r7, lr}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	e026      	b.n	80023fa <racunaj_pravokutni+0x5a>
	{
		if (i < SAMPLES/2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b31      	cmp	r3, #49	; 0x31
 80023b0:	dc1b      	bgt.n	80023ea <racunaj_pravokutni+0x4a>
		{
			signal[i] = amplitude*0xFFF/U_REF;
 80023b2:	4b17      	ldr	r3, [pc, #92]	; (8002410 <racunaj_pravokutni+0x70>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002414 <racunaj_pravokutni+0x74>
 80023bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023c0:	ee17 0a90 	vmov	r0, s15
 80023c4:	f7fe f8d0 	bl	8000568 <__aeabi_f2d>
 80023c8:	a30f      	add	r3, pc, #60	; (adr r3, 8002408 <racunaj_pravokutni+0x68>)
 80023ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ce:	f7fe fa4d 	bl	800086c <__aeabi_ddiv>
 80023d2:	4603      	mov	r3, r0
 80023d4:	460c      	mov	r4, r1
 80023d6:	4618      	mov	r0, r3
 80023d8:	4621      	mov	r1, r4
 80023da:	f7fe fbf5 	bl	8000bc8 <__aeabi_d2uiz>
 80023de:	4601      	mov	r1, r0
 80023e0:	4a0d      	ldr	r2, [pc, #52]	; (8002418 <racunaj_pravokutni+0x78>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80023e8:	e004      	b.n	80023f4 <racunaj_pravokutni+0x54>
		} else
		{
			signal[i] = 0;
 80023ea:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <racunaj_pravokutni+0x78>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2100      	movs	r1, #0
 80023f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SAMPLES; i++)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3301      	adds	r3, #1
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b63      	cmp	r3, #99	; 0x63
 80023fe:	ddd5      	ble.n	80023ac <racunaj_pravokutni+0xc>
		}
	}
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	bd90      	pop	{r4, r7, pc}
 8002408:	851eb852 	.word	0x851eb852
 800240c:	400851eb 	.word	0x400851eb
 8002410:	20001228 	.word	0x20001228
 8002414:	457ff000 	.word	0x457ff000
 8002418:	20001b7c 	.word	0x20001b7c

0800241c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <MX_DMA_Init+0x68>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <MX_DMA_Init+0x68>)
 800242c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <MX_DMA_Init+0x68>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <MX_DMA_Init+0x68>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a0f      	ldr	r2, [pc, #60]	; (8002484 <MX_DMA_Init+0x68>)
 8002448:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <MX_DMA_Init+0x68>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800245a:	2200      	movs	r2, #0
 800245c:	2100      	movs	r1, #0
 800245e:	2011      	movs	r0, #17
 8002460:	f002 f81d 	bl	800449e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002464:	2011      	movs	r0, #17
 8002466:	f002 f836 	bl	80044d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2100      	movs	r1, #0
 800246e:	2038      	movs	r0, #56	; 0x38
 8002470:	f002 f815 	bl	800449e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002474:	2038      	movs	r0, #56	; 0x38
 8002476:	f002 f82e 	bl	80044d6 <HAL_NVIC_EnableIRQ>

}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023800 	.word	0x40023800

08002488 <ctz>:
#include <math.h>
#include <stdlib.h>
#include <string.h>

static int ctz(size_t N)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	int ctz1 = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	60fb      	str	r3, [r7, #12]

	while( N ) {
 8002494:	e005      	b.n	80024a2 <ctz+0x1a>
		ctz1++;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
		N >>= 1;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	085b      	lsrs	r3, r3, #1
 80024a0:	607b      	str	r3, [r7, #4]
	while( N ) {
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f6      	bne.n	8002496 <ctz+0xe>
	}

	return ctz1-1;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3b01      	subs	r3, #1
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <nop_split>:

static void nop_split(const float complex *x, float complex *X, size_t N)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
	for(size_t n = 0; n < N/2; n++) {
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e01e      	b.n	8002508 <nop_split+0x50>
		X[0/2+n] = x[2*n+0];
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	441a      	add	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	68b9      	ldr	r1, [r7, #8]
 80024d8:	440b      	add	r3, r1
 80024da:	6811      	ldr	r1, [r2, #0]
 80024dc:	6852      	ldr	r2, [r2, #4]
 80024de:	6019      	str	r1, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
		X[N/2+n] = x[2*n+1];
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	3308      	adds	r3, #8
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	441a      	add	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	0859      	lsrs	r1, r3, #1
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	440b      	add	r3, r1
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	440b      	add	r3, r1
 80024fa:	6811      	ldr	r1, [r2, #0]
 80024fc:	6852      	ldr	r2, [r2, #4]
 80024fe:	6019      	str	r1, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
	for(size_t n = 0; n < N/2; n++) {
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	085b      	lsrs	r3, r3, #1
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	429a      	cmp	r2, r3
 8002510:	d3db      	bcc.n	80024ca <nop_split+0x12>
	}
}
 8002512:	bf00      	nop
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <fft_split>:

static void fft_split(const float complex *x, float complex *X, size_t N, float complex phi)
{
 8002520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002524:	ed2d 8b04 	vpush	{d8-d9}
 8002528:	b08b      	sub	sp, #44	; 0x2c
 800252a:	af00      	add	r7, sp, #0
 800252c:	6178      	str	r0, [r7, #20]
 800252e:	6139      	str	r1, [r7, #16]
 8002530:	60fa      	str	r2, [r7, #12]
 8002532:	eeb0 7a40 	vmov.f32	s14, s0
 8002536:	eef0 7a60 	vmov.f32	s15, s1
 800253a:	ee17 2a10 	vmov	r2, s14
 800253e:	ee17 3a90 	vmov	r3, s15
 8002542:	607a      	str	r2, [r7, #4]
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	623b      	str	r3, [r7, #32]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	61fb      	str	r3, [r7, #28]
	for(size_t n = 0; n < N/2; n++) {
 800254e:	2300      	movs	r3, #0
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
 8002552:	e141      	b.n	80027d8 <fft_split+0x2b8>
		X[0/2+n] = x[2*n+0] + x[2*n+1] * cexp(-2*(float)M_PI*I*phi);
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4413      	add	r3, r2
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe f802 	bl	8000568 <__aeabi_f2d>
 8002564:	4680      	mov	r8, r0
 8002566:	4689      	mov	r9, r1
 8002568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	4413      	add	r3, r2
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd fff8 	bl	8000568 <__aeabi_f2d>
 8002578:	4604      	mov	r4, r0
 800257a:	460d      	mov	r5, r1
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	3308      	adds	r3, #8
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4413      	add	r3, r2
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fd ffed 	bl	8000568 <__aeabi_f2d>
 800258e:	ec41 0b18 	vmov	d8, r0, r1
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	3308      	adds	r3, #8
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4413      	add	r3, r2
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ffe2 	bl	8000568 <__aeabi_f2d>
 80025a4:	ec41 0b19 	vmov	d9, r0, r1
 80025a8:	eddf 1a92 	vldr	s3, [pc, #584]	; 80027f4 <fft_split+0x2d4>
 80025ac:	ed9f 1a92 	vldr	s2, [pc, #584]	; 80027f8 <fft_split+0x2d8>
 80025b0:	edd7 0a07 	vldr	s1, [r7, #28]
 80025b4:	ed97 0a08 	vldr	s0, [r7, #32]
 80025b8:	f7fe fb8e 	bl	8000cd8 <__mulsc3>
 80025bc:	eeb0 7a40 	vmov.f32	s14, s0
 80025c0:	eef0 7a60 	vmov.f32	s15, s1
 80025c4:	ee17 3a10 	vmov	r3, s14
 80025c8:	ee17 6a90 	vmov	r6, s15
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fd ffcb 	bl	8000568 <__aeabi_f2d>
 80025d2:	4682      	mov	sl, r0
 80025d4:	468b      	mov	fp, r1
 80025d6:	4630      	mov	r0, r6
 80025d8:	f7fd ffc6 	bl	8000568 <__aeabi_f2d>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4650      	mov	r0, sl
 80025e2:	4659      	mov	r1, fp
 80025e4:	ec41 0b16 	vmov	d6, r0, r1
 80025e8:	ec43 2b17 	vmov	d7, r2, r3
 80025ec:	eeb0 0a46 	vmov.f32	s0, s12
 80025f0:	eef0 0a66 	vmov.f32	s1, s13
 80025f4:	eeb0 1a47 	vmov.f32	s2, s14
 80025f8:	eef0 1a67 	vmov.f32	s3, s15
 80025fc:	f009 f940 	bl	800b880 <cexp>
 8002600:	eeb0 7a40 	vmov.f32	s14, s0
 8002604:	eef0 7a60 	vmov.f32	s15, s1
 8002608:	eeb0 6a41 	vmov.f32	s12, s2
 800260c:	eef0 6a61 	vmov.f32	s13, s3
 8002610:	eeb0 3a46 	vmov.f32	s6, s12
 8002614:	eef0 3a66 	vmov.f32	s7, s13
 8002618:	eeb0 2a47 	vmov.f32	s4, s14
 800261c:	eef0 2a67 	vmov.f32	s5, s15
 8002620:	eeb0 1a49 	vmov.f32	s2, s18
 8002624:	eef0 1a69 	vmov.f32	s3, s19
 8002628:	eeb0 0a48 	vmov.f32	s0, s16
 800262c:	eef0 0a68 	vmov.f32	s1, s17
 8002630:	f7fe fcdc 	bl	8000fec <__muldc3>
 8002634:	eeb0 6a40 	vmov.f32	s12, s0
 8002638:	eef0 6a60 	vmov.f32	s13, s1
 800263c:	eeb0 7a41 	vmov.f32	s14, s2
 8002640:	eef0 7a61 	vmov.f32	s15, s3
 8002644:	ec53 2b16 	vmov	r2, r3, d6
 8002648:	ec5b ab17 	vmov	sl, fp, d7
 800264c:	4640      	mov	r0, r8
 800264e:	4649      	mov	r1, r9
 8002650:	f7fd fe2c 	bl	80002ac <__adddf3>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4690      	mov	r8, r2
 800265a:	4699      	mov	r9, r3
 800265c:	4652      	mov	r2, sl
 800265e:	465b      	mov	r3, fp
 8002660:	4620      	mov	r0, r4
 8002662:	4629      	mov	r1, r5
 8002664:	f7fd fe22 	bl	80002ac <__adddf3>
 8002668:	4603      	mov	r3, r0
 800266a:	460c      	mov	r4, r1
 800266c:	461d      	mov	r5, r3
 800266e:	4626      	mov	r6, r4
 8002670:	4640      	mov	r0, r8
 8002672:	4649      	mov	r1, r9
 8002674:	f7fe fac8 	bl	8000c08 <__aeabi_d2f>
 8002678:	4604      	mov	r4, r0
 800267a:	4628      	mov	r0, r5
 800267c:	4631      	mov	r1, r6
 800267e:	f7fe fac3 	bl	8000c08 <__aeabi_d2f>
 8002682:	4601      	mov	r1, r0
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	601c      	str	r4, [r3, #0]
 800268e:	6059      	str	r1, [r3, #4]
		X[N/2+n] = x[2*n+0] - x[2*n+1] * cexp(-2*(float)M_PI*I*phi);
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4413      	add	r3, r2
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd ff64 	bl	8000568 <__aeabi_f2d>
 80026a0:	4680      	mov	r8, r0
 80026a2:	4689      	mov	r9, r1
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	4413      	add	r3, r2
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fd ff5a 	bl	8000568 <__aeabi_f2d>
 80026b4:	4604      	mov	r4, r0
 80026b6:	460d      	mov	r5, r1
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	3308      	adds	r3, #8
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4413      	add	r3, r2
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd ff4f 	bl	8000568 <__aeabi_f2d>
 80026ca:	ec41 0b18 	vmov	d8, r0, r1
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	3308      	adds	r3, #8
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4413      	add	r3, r2
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff44 	bl	8000568 <__aeabi_f2d>
 80026e0:	ec41 0b19 	vmov	d9, r0, r1
 80026e4:	eddf 1a43 	vldr	s3, [pc, #268]	; 80027f4 <fft_split+0x2d4>
 80026e8:	ed9f 1a43 	vldr	s2, [pc, #268]	; 80027f8 <fft_split+0x2d8>
 80026ec:	edd7 0a07 	vldr	s1, [r7, #28]
 80026f0:	ed97 0a08 	vldr	s0, [r7, #32]
 80026f4:	f7fe faf0 	bl	8000cd8 <__mulsc3>
 80026f8:	eeb0 7a40 	vmov.f32	s14, s0
 80026fc:	eef0 7a60 	vmov.f32	s15, s1
 8002700:	ee17 3a10 	vmov	r3, s14
 8002704:	ee17 6a90 	vmov	r6, s15
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd ff2d 	bl	8000568 <__aeabi_f2d>
 800270e:	4682      	mov	sl, r0
 8002710:	468b      	mov	fp, r1
 8002712:	4630      	mov	r0, r6
 8002714:	f7fd ff28 	bl	8000568 <__aeabi_f2d>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4650      	mov	r0, sl
 800271e:	4659      	mov	r1, fp
 8002720:	ec41 0b16 	vmov	d6, r0, r1
 8002724:	ec43 2b17 	vmov	d7, r2, r3
 8002728:	eeb0 0a46 	vmov.f32	s0, s12
 800272c:	eef0 0a66 	vmov.f32	s1, s13
 8002730:	eeb0 1a47 	vmov.f32	s2, s14
 8002734:	eef0 1a67 	vmov.f32	s3, s15
 8002738:	f009 f8a2 	bl	800b880 <cexp>
 800273c:	eeb0 7a40 	vmov.f32	s14, s0
 8002740:	eef0 7a60 	vmov.f32	s15, s1
 8002744:	eeb0 6a41 	vmov.f32	s12, s2
 8002748:	eef0 6a61 	vmov.f32	s13, s3
 800274c:	eeb0 3a46 	vmov.f32	s6, s12
 8002750:	eef0 3a66 	vmov.f32	s7, s13
 8002754:	eeb0 2a47 	vmov.f32	s4, s14
 8002758:	eef0 2a67 	vmov.f32	s5, s15
 800275c:	eeb0 1a49 	vmov.f32	s2, s18
 8002760:	eef0 1a69 	vmov.f32	s3, s19
 8002764:	eeb0 0a48 	vmov.f32	s0, s16
 8002768:	eef0 0a68 	vmov.f32	s1, s17
 800276c:	f7fe fc3e 	bl	8000fec <__muldc3>
 8002770:	eeb0 6a40 	vmov.f32	s12, s0
 8002774:	eef0 6a60 	vmov.f32	s13, s1
 8002778:	eeb0 7a41 	vmov.f32	s14, s2
 800277c:	eef0 7a61 	vmov.f32	s15, s3
 8002780:	ec53 2b16 	vmov	r2, r3, d6
 8002784:	ec5b ab17 	vmov	sl, fp, d7
 8002788:	4640      	mov	r0, r8
 800278a:	4649      	mov	r1, r9
 800278c:	f7fd fd8c 	bl	80002a8 <__aeabi_dsub>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4690      	mov	r8, r2
 8002796:	4699      	mov	r9, r3
 8002798:	4652      	mov	r2, sl
 800279a:	465b      	mov	r3, fp
 800279c:	4620      	mov	r0, r4
 800279e:	4629      	mov	r1, r5
 80027a0:	f7fd fd82 	bl	80002a8 <__aeabi_dsub>
 80027a4:	4603      	mov	r3, r0
 80027a6:	460c      	mov	r4, r1
 80027a8:	461d      	mov	r5, r3
 80027aa:	4626      	mov	r6, r4
 80027ac:	4640      	mov	r0, r8
 80027ae:	4649      	mov	r1, r9
 80027b0:	f7fe fa2a 	bl	8000c08 <__aeabi_d2f>
 80027b4:	4604      	mov	r4, r0
 80027b6:	4628      	mov	r0, r5
 80027b8:	4631      	mov	r1, r6
 80027ba:	f7fe fa25 	bl	8000c08 <__aeabi_d2f>
 80027be:	4601      	mov	r1, r0
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	085a      	lsrs	r2, r3, #1
 80027c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c6:	4413      	add	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	601c      	str	r4, [r3, #0]
 80027d0:	6059      	str	r1, [r3, #4]
	for(size_t n = 0; n < N/2; n++) {
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	3301      	adds	r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	085b      	lsrs	r3, r3, #1
 80027dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027de:	429a      	cmp	r2, r3
 80027e0:	f4ff aeb8 	bcc.w	8002554 <fft_split+0x34>
	}
}
 80027e4:	bf00      	nop
 80027e6:	372c      	adds	r7, #44	; 0x2c
 80027e8:	46bd      	mov	sp, r7
 80027ea:	ecbd 8b04 	vpop	{d8-d9}
 80027ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027f2:	bf00      	nop
 80027f4:	c0c90fdb 	.word	0xc0c90fdb
 80027f8:	80000000 	.word	0x80000000

080027fc <revbits>:

static size_t revbits(size_t v, int J)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
	size_t r = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]

	for(int j = 0; j < J; j++) {
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	e011      	b.n	8002834 <revbits+0x38>
		r |= ( (v>>j)&1 ) << (J-1-j);
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
 8002818:	f003 0201 	and.w	r2, r3, #1
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	1e59      	subs	r1, r3, #1
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	1acb      	subs	r3, r1, r3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]
	for(int j = 0; j < J; j++) {
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	3301      	adds	r3, #1
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	dbe9      	blt.n	8002810 <revbits+0x14>
	}

	return r;
 800283c:	68fb      	ldr	r3, [r7, #12]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <nop_reverse>:

static int nop_reverse(int b, float complex *buffers[2], size_t N)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b088      	sub	sp, #32
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
	int J = ctz(N);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fe16 	bl	8002488 <ctz>
 800285c:	6178      	str	r0, [r7, #20]

	for(int j = 0; j < J-1; j++, b++) {
 800285e:	2300      	movs	r3, #0
 8002860:	61fb      	str	r3, [r7, #28]
 8002862:	e031      	b.n	80028c8 <nop_reverse+0x7e>
		size_t delta = N>>j;
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	fa22 f303 	lsr.w	r3, r2, r3
 800286c:	613b      	str	r3, [r7, #16]

		for(size_t n = 0; n < N; n += delta) {
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	e01f      	b.n	80028b4 <nop_reverse+0x6a>
			nop_split(buffers[b&1]+n, buffers[~b&1]+n, delta);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	4413      	add	r3, r2
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	18d0      	adds	r0, r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <nop_reverse+0x4c>
 8002892:	2304      	movs	r3, #4
 8002894:	e000      	b.n	8002898 <nop_reverse+0x4e>
 8002896:	2300      	movs	r3, #0
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	4413      	add	r3, r2
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4619      	mov	r1, r3
 80028a8:	f7ff fe06 	bl	80024b8 <nop_split>
		for(size_t n = 0; n < N; n += delta) {
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3db      	bcc.n	8002874 <nop_reverse+0x2a>
	for(int j = 0; j < J-1; j++, b++) {
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	3301      	adds	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	dbc8      	blt.n	8002864 <nop_reverse+0x1a>
		}
	}

	return b;
 80028d2:	68fb      	ldr	r3, [r7, #12]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <fft_reverse>:

static int fft_reverse(int b, float complex *buffers[2], size_t N)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	; 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
	int J = ctz(N);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff fdcd 	bl	8002488 <ctz>
 80028ee:	61f8      	str	r0, [r7, #28]

	for(int j = 0; j < J; j++, b++) {
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
 80028f4:	e054      	b.n	80029a0 <fft_reverse+0xc4>
		size_t delta = N>>j;
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	fa22 f303 	lsr.w	r3, r2, r3
 80028fe:	61bb      	str	r3, [r7, #24]

		for(size_t n = 0; n < N; n += delta) {
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
 8002904:	e042      	b.n	800298c <fft_reverse+0xb0>
			float complex phi = (float)revbits( n/delta, j) / (float)(2<<j);
 8002906:	6a3a      	ldr	r2, [r7, #32]
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	fbb2 f3f3 	udiv	r3, r2, r3
 800290e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff73 	bl	80027fc <revbits>
 8002916:	ee07 0a90 	vmov	s15, r0
 800291a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800291e:	2202      	movs	r2, #2
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800292e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002932:	edc7 7a04 	vstr	s15, [r7, #16]
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
			fft_split(buffers[b&1]+n, buffers[~b&1]+n, delta, phi);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	4413      	add	r3, r2
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	18d0      	adds	r0, r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <fft_reverse+0x82>
 800295a:	2304      	movs	r3, #4
 800295c:	e000      	b.n	8002960 <fft_reverse+0x84>
 800295e:	2300      	movs	r3, #0
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	4413      	add	r3, r2
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4413      	add	r3, r2
 800296c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002970:	edd7 7a05 	vldr	s15, [r7, #20]
 8002974:	eeb0 0a47 	vmov.f32	s0, s14
 8002978:	eef0 0a67 	vmov.f32	s1, s15
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4619      	mov	r1, r3
 8002980:	f7ff fdce 	bl	8002520 <fft_split>
		for(size_t n = 0; n < N; n += delta) {
 8002984:	6a3a      	ldr	r2, [r7, #32]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4413      	add	r3, r2
 800298a:	623b      	str	r3, [r7, #32]
 800298c:	6a3a      	ldr	r2, [r7, #32]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	d3b8      	bcc.n	8002906 <fft_reverse+0x2a>
	for(int j = 0; j < J; j++, b++) {
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	3301      	adds	r3, #1
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3301      	adds	r3, #1
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	dba6      	blt.n	80028f6 <fft_reverse+0x1a>
		}
	}

	return b;
 80029a8:	68fb      	ldr	r3, [r7, #12]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3728      	adds	r7, #40	; 0x28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <fft>:

int fft(float complex *vector, size_t N)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b086      	sub	sp, #24
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
	if( !N ) return 0;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <fft+0x14>
 80029c2:	2300      	movs	r3, #0
 80029c4:	e044      	b.n	8002a50 <fft+0x9e>

	if( N & (N-1) ) return 1;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	1e5a      	subs	r2, r3, #1
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <fft+0x24>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e03c      	b.n	8002a50 <fft+0x9e>

	float complex *buffers[2] = { vector, malloc(N*sizeof(float complex)) };
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4618      	mov	r0, r3
 80029e0:	f005 f9ea 	bl	8007db8 <malloc>
 80029e4:	4603      	mov	r3, r0
 80029e6:	613b      	str	r3, [r7, #16]

	if( !buffers[1] ) return -1;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d102      	bne.n	80029f4 <fft+0x42>
 80029ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029f2:	e02d      	b.n	8002a50 <fft+0x9e>

	int b = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]

	b = nop_reverse(b, buffers, N);
 80029f8:	f107 030c 	add.w	r3, r7, #12
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	4619      	mov	r1, r3
 8002a00:	6978      	ldr	r0, [r7, #20]
 8002a02:	f7ff ff22 	bl	800284a <nop_reverse>
 8002a06:	6178      	str	r0, [r7, #20]
	b = fft_reverse(b, buffers, N);
 8002a08:	f107 030c 	add.w	r3, r7, #12
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6978      	ldr	r0, [r7, #20]
 8002a12:	f7ff ff63 	bl	80028dc <fft_reverse>
 8002a16:	6178      	str	r0, [r7, #20]
	b = nop_reverse(b, buffers, N);
 8002a18:	f107 030c 	add.w	r3, r7, #12
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	6978      	ldr	r0, [r7, #20]
 8002a22:	f7ff ff12 	bl	800284a <nop_reverse>
 8002a26:	6178      	str	r0, [r7, #20]


	memmove(vector, buffers[b&1], N*sizeof(float complex));
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	f107 0218 	add.w	r2, r7, #24
 8002a34:	4413      	add	r3, r2
 8002a36:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	461a      	mov	r2, r3
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f005 f9d4 	bl	8007dee <memmove>

	free( buffers[1] );
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f005 f9bd 	bl	8007dc8 <free>

	return 0;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
 8002a62:	4b3a      	ldr	r3, [pc, #232]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a39      	ldr	r2, [pc, #228]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002a68:	f043 0320 	orr.w	r3, r3, #32
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0320 	and.w	r3, r3, #32
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	4b33      	ldr	r3, [pc, #204]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a32      	ldr	r2, [pc, #200]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b30      	ldr	r3, [pc, #192]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a92:	61bb      	str	r3, [r7, #24]
 8002a94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	4b2c      	ldr	r3, [pc, #176]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	4a2b      	ldr	r2, [pc, #172]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa6:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f003 0304 	and.w	r3, r3, #4
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a24      	ldr	r2, [pc, #144]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002ad8:	f043 0302 	orr.w	r3, r3, #2
 8002adc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	4b17      	ldr	r3, [pc, #92]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	4a16      	ldr	r2, [pc, #88]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002af8:	6313      	str	r3, [r2, #48]	; 0x30
 8002afa:	4b14      	ldr	r3, [pc, #80]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	60bb      	str	r3, [r7, #8]
 8002b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002b10:	f043 0310 	orr.w	r3, r3, #16
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	4b09      	ldr	r3, [pc, #36]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	4a08      	ldr	r2, [pc, #32]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002b2c:	f043 0308 	orr.w	r3, r3, #8
 8002b30:	6313      	str	r3, [r2, #48]	; 0x30
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <MX_GPIO_Init+0xf4>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]

}
 8002b3e:	bf00      	nop
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40023800 	.word	0x40023800

08002b50 <LCDFunctionGeneratorON>:
		}
	}

}

void LCDFunctionGeneratorON(void){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
	for(int i=7;i<23;i++){
 8002b56:	2307      	movs	r3, #7
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	e027      	b.n	8002bac <LCDFunctionGeneratorON+0x5c>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002b5c:	f005 f8c2 	bl	8007ce4 <TM_LCD_GetHeight>
 8002b60:	4603      	mov	r3, r0
 8002b62:	3b0d      	subs	r3, #13
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	e017      	b.n	8002b98 <LCDFunctionGeneratorON+0x48>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_WHITE){
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	b292      	uxth	r2, r2
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f005 f887 	bl	8007c86 <TM_LCD_GetPixel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b7e:	d108      	bne.n	8002b92 <LCDFunctionGeneratorON+0x42>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_GREEN2);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	68ba      	ldr	r2, [r7, #8]
 8002b86:	b291      	uxth	r1, r2
 8002b88:	f244 3221 	movw	r2, #17185	; 0x4321
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f005 f867 	bl	8007c60 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	3301      	adds	r3, #1
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	f005 f8a4 	bl	8007ce4 <TM_LCD_GetHeight>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	3b02      	subs	r3, #2
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	dbe0      	blt.n	8002b68 <LCDFunctionGeneratorON+0x18>
	for(int i=7;i<23;i++){
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b16      	cmp	r3, #22
 8002bb0:	ddd4      	ble.n	8002b5c <LCDFunctionGeneratorON+0xc>
			}
		}
	}
	for(int i=27;i<49;i++){
 8002bb2:	231b      	movs	r3, #27
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	e027      	b.n	8002c08 <LCDFunctionGeneratorON+0xb8>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002bb8:	f005 f894 	bl	8007ce4 <TM_LCD_GetHeight>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	3b0d      	subs	r3, #13
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	e017      	b.n	8002bf4 <LCDFunctionGeneratorON+0xa4>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_RED2){
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f005 f859 	bl	8007c86 <TM_LCD_GetPixel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8002bda:	d108      	bne.n	8002bee <LCDFunctionGeneratorON+0x9e>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	b291      	uxth	r1, r2
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002be8:	4618      	mov	r0, r3
 8002bea:	f005 f839 	bl	8007c60 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	603b      	str	r3, [r7, #0]
 8002bf4:	f005 f876 	bl	8007ce4 <TM_LCD_GetHeight>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	3b02      	subs	r3, #2
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	dbe0      	blt.n	8002bc4 <LCDFunctionGeneratorON+0x74>
	for(int i=27;i<49;i++){
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3301      	adds	r3, #1
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b30      	cmp	r3, #48	; 0x30
 8002c0c:	ddd4      	ble.n	8002bb8 <LCDFunctionGeneratorON+0x68>
			}
		}
	}
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <LCDFunctionGeneratorOFF>:

void LCDFunctionGeneratorOFF(void){
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b08b      	sub	sp, #44	; 0x2c
 8002c1c:	af00      	add	r7, sp, #0
	for(int i=27;i<49;i++){
 8002c1e:	231b      	movs	r3, #27
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	e027      	b.n	8002c74 <LCDFunctionGeneratorOFF+0x5c>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002c24:	f005 f85e 	bl	8007ce4 <TM_LCD_GetHeight>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	3b0d      	subs	r3, #13
 8002c2c:	623b      	str	r3, [r7, #32]
 8002c2e:	e017      	b.n	8002c60 <LCDFunctionGeneratorOFF+0x48>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_WHITE){
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	b292      	uxth	r2, r2
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f005 f823 	bl	8007c86 <TM_LCD_GetPixel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c46:	d108      	bne.n	8002c5a <LCDFunctionGeneratorOFF+0x42>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_RED2);
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	6a3a      	ldr	r2, [r7, #32]
 8002c4e:	b291      	uxth	r1, r2
 8002c50:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c54:	4618      	mov	r0, r3
 8002c56:	f005 f803 	bl	8007c60 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	f005 f840 	bl	8007ce4 <TM_LCD_GetHeight>
 8002c64:	4603      	mov	r3, r0
 8002c66:	3b02      	subs	r3, #2
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	dbe0      	blt.n	8002c30 <LCDFunctionGeneratorOFF+0x18>
	for(int i=27;i<49;i++){
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	3301      	adds	r3, #1
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	2b30      	cmp	r3, #48	; 0x30
 8002c78:	ddd4      	ble.n	8002c24 <LCDFunctionGeneratorOFF+0xc>
			}
		}
	}
	for(int i=7;i<23;i++){
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	e028      	b.n	8002cd2 <LCDFunctionGeneratorOFF+0xba>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002c80:	f005 f830 	bl	8007ce4 <TM_LCD_GetHeight>
 8002c84:	4603      	mov	r3, r0
 8002c86:	3b0d      	subs	r3, #13
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	e018      	b.n	8002cbe <LCDFunctionGeneratorOFF+0xa6>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_GREEN2){
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	b292      	uxth	r2, r2
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f004 fff5 	bl	8007c86 <TM_LCD_GetPixel>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f244 3321 	movw	r3, #17185	; 0x4321
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d108      	bne.n	8002cb8 <LCDFunctionGeneratorOFF+0xa0>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	b291      	uxth	r1, r2
 8002cae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f004 ffd4 	bl	8007c60 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	f005 f811 	bl	8007ce4 <TM_LCD_GetHeight>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	3b02      	subs	r3, #2
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	dbdf      	blt.n	8002c8c <LCDFunctionGeneratorOFF+0x74>
	for(int i=7;i<23;i++){
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2b16      	cmp	r3, #22
 8002cd6:	ddd3      	ble.n	8002c80 <LCDFunctionGeneratorOFF+0x68>
			}
		}
	}
	for(int i=137;i<159;i++){
 8002cd8:	2389      	movs	r3, #137	; 0x89
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e01b      	b.n	8002d16 <LCDFunctionGeneratorOFF+0xfe>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight()-7;j++){
 8002cde:	f005 f801 	bl	8007ce4 <TM_LCD_GetHeight>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	3b12      	subs	r3, #18
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	e00b      	b.n	8002d02 <LCDFunctionGeneratorOFF+0xea>
			TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	b291      	uxth	r1, r2
 8002cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f004 ffb2 	bl	8007c60 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight()-7;j++){
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	3301      	adds	r3, #1
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	f004 ffef 	bl	8007ce4 <TM_LCD_GetHeight>
 8002d06:	4603      	mov	r3, r0
 8002d08:	3b07      	subs	r3, #7
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	dbec      	blt.n	8002cea <LCDFunctionGeneratorOFF+0xd2>
	for(int i=137;i<159;i++){
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	3301      	adds	r3, #1
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b9e      	cmp	r3, #158	; 0x9e
 8002d1a:	dde0      	ble.n	8002cde <LCDFunctionGeneratorOFF+0xc6>
		}
	}
	char gasi[] = "               ";
 8002d1c:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <LCDFunctionGeneratorOFF+0x130>)
 8002d1e:	463c      	mov	r4, r7
 8002d20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 8002d26:	f004 ffdd 	bl	8007ce4 <TM_LCD_GetHeight>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	3b12      	subs	r3, #18
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4619      	mov	r1, r3
 8002d32:	20a5      	movs	r0, #165	; 0xa5
 8002d34:	f004 febc 	bl	8007ab0 <TM_LCD_SetXY>
	TM_LCD_Puts(&gasi[0]);
 8002d38:	463b      	mov	r3, r7
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 ffb6 	bl	8007cac <TM_LCD_Puts>
}
 8002d40:	bf00      	nop
 8002d42:	372c      	adds	r7, #44	; 0x2c
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd90      	pop	{r4, r7, pc}
 8002d48:	0800d0a0 	.word	0x0800d0a0
 8002d4c:	00000000 	.word	0x00000000

08002d50 <SendToScreen>:

void SendToScreen(int* signal){
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
	for(int i=0;i<BUFFER_SIZE;i++){
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60fb      	str	r3, [r7, #12]
 8002d5c:	e039      	b.n	8002dd2 <SendToScreen+0x82>
		int amplitude = -0.04297924298 * signal[i] + 180;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fbeb 	bl	8000544 <__aeabi_i2d>
 8002d6e:	a31e      	add	r3, pc, #120	; (adr r3, 8002de8 <SendToScreen+0x98>)
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f7fd fc50 	bl	8000618 <__aeabi_dmul>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	4621      	mov	r1, r4
 8002d80:	f04f 0200 	mov.w	r2, #0
 8002d84:	4b16      	ldr	r3, [pc, #88]	; (8002de0 <SendToScreen+0x90>)
 8002d86:	f7fd fa91 	bl	80002ac <__adddf3>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	4621      	mov	r1, r4
 8002d92:	f7fd fef1 	bl	8000b78 <__aeabi_d2iz>
 8002d96:	4603      	mov	r3, r0
 8002d98:	60bb      	str	r3, [r7, #8]
		TM_LCD_DrawPixel(width, amplitude, LCD_COLOR_YELLOW );
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <SendToScreen+0x94>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	68ba      	ldr	r2, [r7, #8]
 8002da2:	b291      	uxth	r1, r2
 8002da4:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f004 ff59 	bl	8007c60 <TM_LCD_DrawPixel>
		width++;
 8002dae:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <SendToScreen+0x94>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	4a0b      	ldr	r2, [pc, #44]	; (8002de4 <SendToScreen+0x94>)
 8002db6:	6013      	str	r3, [r2, #0]
		if(width == 318){
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <SendToScreen+0x94>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002dc0:	d104      	bne.n	8002dcc <SendToScreen+0x7c>
			width = 1;
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <SendToScreen+0x94>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
			Window();
 8002dc8:	f000 fae2 	bl	8003390 <Window>
	for(int i=0;i<BUFFER_SIZE;i++){
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2b3f      	cmp	r3, #63	; 0x3f
 8002dd6:	ddc2      	ble.n	8002d5e <SendToScreen+0xe>
		}
	}
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd90      	pop	{r4, r7, pc}
 8002de0:	40668000 	.word	0x40668000
 8002de4:	20001e28 	.word	0x20001e28
 8002de8:	16030a40 	.word	0x16030a40
 8002dec:	bfa60160 	.word	0xbfa60160

08002df0 <SetSquareOutput>:

void SetSquareOutput(long int freq){
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b0b9      	sub	sp, #228	; 0xe4
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
	LCDFunctionGeneratorON();
 8002df8:	f7ff feaa 	bl	8002b50 <LCDFunctionGeneratorON>
	double sinus[20];
	for(int i=0; i<20; i++){
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002e02:	e02a      	b.n	8002e5a <SetSquareOutput+0x6a>
		double a = (double) i;
 8002e04:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8002e08:	f7fd fb9c 	bl	8000544 <__aeabi_i2d>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	460c      	mov	r4, r1
 8002e10:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		sinus[i] = sin(0.33*a);
 8002e14:	a389      	add	r3, pc, #548	; (adr r3, 800303c <SetSquareOutput+0x24c>)
 8002e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8002e1e:	f7fd fbfb 	bl	8000618 <__aeabi_dmul>
 8002e22:	4603      	mov	r3, r0
 8002e24:	460c      	mov	r4, r1
 8002e26:	ec44 3b17 	vmov	d7, r3, r4
 8002e2a:	eeb0 0a47 	vmov.f32	s0, s14
 8002e2e:	eef0 0a67 	vmov.f32	s1, s15
 8002e32:	f008 fdcd 	bl	800b9d0 <sin>
 8002e36:	eeb0 7a40 	vmov.f32	s14, s0
 8002e3a:	eef0 7a60 	vmov.f32	s15, s1
 8002e3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002e48:	4413      	add	r3, r2
 8002e4a:	3bc8      	subs	r3, #200	; 0xc8
 8002e4c:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<20; i++){
 8002e50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e54:	3301      	adds	r3, #1
 8002e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e5e:	2b13      	cmp	r3, #19
 8002e60:	ddd0      	ble.n	8002e04 <SetSquareOutput+0x14>
	}

	for(int i=0;i<20;i++){
 8002e62:	2300      	movs	r3, #0
 8002e64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e68:	e031      	b.n	8002ece <SetSquareOutput+0xde>
		int amplitude = (int)(-6* sinus[i] + 227);
 8002e6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002e74:	4413      	add	r3, r2
 8002e76:	3bc8      	subs	r3, #200	; 0xc8
 8002e78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	4b6b      	ldr	r3, [pc, #428]	; (8003030 <SetSquareOutput+0x240>)
 8002e82:	f7fd fbc9 	bl	8000618 <__aeabi_dmul>
 8002e86:	4603      	mov	r3, r0
 8002e88:	460c      	mov	r4, r1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	a366      	add	r3, pc, #408	; (adr r3, 8003028 <SetSquareOutput+0x238>)
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	f7fd fa0a 	bl	80002ac <__adddf3>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	460c      	mov	r4, r1
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	4621      	mov	r1, r4
 8002ea0:	f7fd fe6a 	bl	8000b78 <__aeabi_d2iz>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		TM_LCD_DrawPixel(i+138, amplitude, LCD_COLOR_WHITE );
 8002eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	338a      	adds	r3, #138	; 0x8a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002eb8:	b291      	uxth	r1, r2
 8002eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f004 fece 	bl	8007c60 <TM_LCD_DrawPixel>
	for(int i=0;i<20;i++){
 8002ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ed2:	2b13      	cmp	r3, #19
 8002ed4:	ddc9      	ble.n	8002e6a <SetSquareOutput+0x7a>
	}
	for(int i=147; i<159;i++){
 8002ed6:	2393      	movs	r3, #147	; 0x93
 8002ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002edc:	e012      	b.n	8002f04 <SetSquareOutput+0x114>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-18, LCD_COLOR_RED2);
 8002ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ee2:	b29c      	uxth	r4, r3
 8002ee4:	f004 fefe 	bl	8007ce4 <TM_LCD_GetHeight>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	3b12      	subs	r3, #18
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f004 feb3 	bl	8007c60 <TM_LCD_DrawPixel>
	for(int i=147; i<159;i++){
 8002efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002efe:	3301      	adds	r3, #1
 8002f00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002f04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f08:	2b9e      	cmp	r3, #158	; 0x9e
 8002f0a:	dde8      	ble.n	8002ede <SetSquareOutput+0xee>
	}
	for(int i=137; i<147;i++){
 8002f0c:	2389      	movs	r3, #137	; 0x89
 8002f0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f12:	e012      	b.n	8002f3a <SetSquareOutput+0x14a>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-8, LCD_COLOR_RED2);
 8002f14:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f18:	b29c      	uxth	r4, r3
 8002f1a:	f004 fee3 	bl	8007ce4 <TM_LCD_GetHeight>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	3b08      	subs	r3, #8
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	f004 fe98 	bl	8007c60 <TM_LCD_DrawPixel>
	for(int i=137; i<147;i++){
 8002f30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f34:	3301      	adds	r3, #1
 8002f36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f3e:	2b92      	cmp	r3, #146	; 0x92
 8002f40:	dde8      	ble.n	8002f14 <SetSquareOutput+0x124>
	}
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 8002f42:	f004 fecf 	bl	8007ce4 <TM_LCD_GetHeight>
 8002f46:	4603      	mov	r3, r0
 8002f48:	3b12      	subs	r3, #18
 8002f4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f4e:	e00d      	b.n	8002f6c <SetSquareOutput+0x17c>
		TM_LCD_DrawPixel(147, i, LCD_COLOR_RED2);
 8002f50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	2093      	movs	r0, #147	; 0x93
 8002f5e:	f004 fe7f 	bl	8007c60 <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 8002f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f66:	3301      	adds	r3, #1
 8002f68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f6c:	f004 feba 	bl	8007ce4 <TM_LCD_GetHeight>
 8002f70:	4603      	mov	r3, r0
 8002f72:	3b08      	subs	r3, #8
 8002f74:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	dbe9      	blt.n	8002f50 <SetSquareOutput+0x160>
	}
	char f[10] = {0};
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	811a      	strh	r2, [r3, #8]
	sprintf(f,"%ld",freq);
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	4929      	ldr	r1, [pc, #164]	; (8003034 <SetSquareOutput+0x244>)
 8002f90:	4618      	mov	r0, r3
 8002f92:	f005 fe49 	bl	8008c28 <siprintf>
	for(int i=165;i<320;i++){
 8002f96:	23a5      	movs	r3, #165	; 0xa5
 8002f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f9c:	e023      	b.n	8002fe6 <SetSquareOutput+0x1f6>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 8002f9e:	f004 fea1 	bl	8007ce4 <TM_LCD_GetHeight>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	3b12      	subs	r3, #18
 8002fa6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002faa:	e00f      	b.n	8002fcc <SetSquareOutput+0x1dc>
			TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8002fac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002fb6:	b291      	uxth	r1, r2
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f004 fe4f 	bl	8007c60 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 8002fc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002fcc:	f004 fe8a 	bl	8007ce4 <TM_LCD_GetHeight>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	dbe7      	blt.n	8002fac <SetSquareOutput+0x1bc>
	for(int i=165;i<320;i++){
 8002fdc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002fea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002fee:	dbd6      	blt.n	8002f9e <SetSquareOutput+0x1ae>
		}
	}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 8002ff0:	f004 fe78 	bl	8007ce4 <TM_LCD_GetHeight>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	3b12      	subs	r3, #18
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	20a5      	movs	r0, #165	; 0xa5
 8002ffe:	f004 fd57 	bl	8007ab0 <TM_LCD_SetXY>
	TM_LCD_Puts(&f[0]);
 8003002:	f107 030c 	add.w	r3, r7, #12
 8003006:	4618      	mov	r0, r3
 8003008:	f004 fe50 	bl	8007cac <TM_LCD_Puts>
	char f1[] = " Hz";
 800300c:	4b0a      	ldr	r3, [pc, #40]	; (8003038 <SetSquareOutput+0x248>)
 800300e:	60bb      	str	r3, [r7, #8]
	TM_LCD_Puts(&f1[0]);
 8003010:	f107 0308 	add.w	r3, r7, #8
 8003014:	4618      	mov	r0, r3
 8003016:	f004 fe49 	bl	8007cac <TM_LCD_Puts>

}
 800301a:	bf00      	nop
 800301c:	37e4      	adds	r7, #228	; 0xe4
 800301e:	46bd      	mov	sp, r7
 8003020:	bd90      	pop	{r4, r7, pc}
 8003022:	bf00      	nop
 8003024:	f3af 8000 	nop.w
 8003028:	00000000 	.word	0x00000000
 800302c:	406c6000 	.word	0x406c6000
 8003030:	c0180000 	.word	0xc0180000
 8003034:	0800d0b0 	.word	0x0800d0b0
 8003038:	007a4820 	.word	0x007a4820
 800303c:	51eb851f 	.word	0x51eb851f
 8003040:	3fd51eb8 	.word	0x3fd51eb8
 8003044:	00000000 	.word	0x00000000

08003048 <SetSineOutput>:

void SetSineOutput(long int freq){
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b0b9      	sub	sp, #228	; 0xe4
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

	LCDFunctionGeneratorON();
 8003050:	f7ff fd7e 	bl	8002b50 <LCDFunctionGeneratorON>
	double sinus[20];
	for(int i=147; i<159;i++){
 8003054:	2393      	movs	r3, #147	; 0x93
 8003056:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800305a:	e012      	b.n	8003082 <SetSineOutput+0x3a>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-18, LCD_COLOR_WHITE);
 800305c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003060:	b29c      	uxth	r4, r3
 8003062:	f004 fe3f 	bl	8007ce4 <TM_LCD_GetHeight>
 8003066:	4603      	mov	r3, r0
 8003068:	3b12      	subs	r3, #18
 800306a:	b29b      	uxth	r3, r3
 800306c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003070:	4619      	mov	r1, r3
 8003072:	4620      	mov	r0, r4
 8003074:	f004 fdf4 	bl	8007c60 <TM_LCD_DrawPixel>
	for(int i=147; i<159;i++){
 8003078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800307c:	3301      	adds	r3, #1
 800307e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003086:	2b9e      	cmp	r3, #158	; 0x9e
 8003088:	dde8      	ble.n	800305c <SetSineOutput+0x14>
	}
	for(int i=137; i<147;i++){
 800308a:	2389      	movs	r3, #137	; 0x89
 800308c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003090:	e012      	b.n	80030b8 <SetSineOutput+0x70>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-8, LCD_COLOR_WHITE);
 8003092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003096:	b29c      	uxth	r4, r3
 8003098:	f004 fe24 	bl	8007ce4 <TM_LCD_GetHeight>
 800309c:	4603      	mov	r3, r0
 800309e:	3b08      	subs	r3, #8
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030a6:	4619      	mov	r1, r3
 80030a8:	4620      	mov	r0, r4
 80030aa:	f004 fdd9 	bl	8007c60 <TM_LCD_DrawPixel>
	for(int i=137; i<147;i++){
 80030ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030b2:	3301      	adds	r3, #1
 80030b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030bc:	2b92      	cmp	r3, #146	; 0x92
 80030be:	dde8      	ble.n	8003092 <SetSineOutput+0x4a>
	}
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 80030c0:	f004 fe10 	bl	8007ce4 <TM_LCD_GetHeight>
 80030c4:	4603      	mov	r3, r0
 80030c6:	3b12      	subs	r3, #18
 80030c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80030cc:	e00d      	b.n	80030ea <SetSineOutput+0xa2>
		TM_LCD_DrawPixel(147, i, LCD_COLOR_WHITE);
 80030ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030d8:	4619      	mov	r1, r3
 80030da:	2093      	movs	r0, #147	; 0x93
 80030dc:	f004 fdc0 	bl	8007c60 <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 80030e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030e4:	3301      	adds	r3, #1
 80030e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80030ea:	f004 fdfb 	bl	8007ce4 <TM_LCD_GetHeight>
 80030ee:	4603      	mov	r3, r0
 80030f0:	3b08      	subs	r3, #8
 80030f2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80030f6:	429a      	cmp	r2, r3
 80030f8:	dbe9      	blt.n	80030ce <SetSineOutput+0x86>
	}

	for(int i=0; i<20; i++){
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003100:	e02a      	b.n	8003158 <SetSineOutput+0x110>
		double a = (double) i;
 8003102:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8003106:	f7fd fa1d 	bl	8000544 <__aeabi_i2d>
 800310a:	4603      	mov	r3, r0
 800310c:	460c      	mov	r4, r1
 800310e:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		sinus[i] = sin(0.33*a);
 8003112:	a360      	add	r3, pc, #384	; (adr r3, 8003294 <SetSineOutput+0x24c>)
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800311c:	f7fd fa7c 	bl	8000618 <__aeabi_dmul>
 8003120:	4603      	mov	r3, r0
 8003122:	460c      	mov	r4, r1
 8003124:	ec44 3b17 	vmov	d7, r3, r4
 8003128:	eeb0 0a47 	vmov.f32	s0, s14
 800312c:	eef0 0a67 	vmov.f32	s1, s15
 8003130:	f008 fc4e 	bl	800b9d0 <sin>
 8003134:	eeb0 7a40 	vmov.f32	s14, s0
 8003138:	eef0 7a60 	vmov.f32	s15, s1
 800313c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003146:	4413      	add	r3, r2
 8003148:	3bc8      	subs	r3, #200	; 0xc8
 800314a:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<20; i++){
 800314e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003152:	3301      	adds	r3, #1
 8003154:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003158:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800315c:	2b13      	cmp	r3, #19
 800315e:	ddd0      	ble.n	8003102 <SetSineOutput+0xba>
	}

	for(int i=0;i<20;i++){
 8003160:	2300      	movs	r3, #0
 8003162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003166:	e031      	b.n	80031cc <SetSineOutput+0x184>
		int amplitude = (int)(-6* sinus[i] + 227);
 8003168:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003172:	4413      	add	r3, r2
 8003174:	3bc8      	subs	r3, #200	; 0xc8
 8003176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	4b42      	ldr	r3, [pc, #264]	; (8003288 <SetSineOutput+0x240>)
 8003180:	f7fd fa4a 	bl	8000618 <__aeabi_dmul>
 8003184:	4603      	mov	r3, r0
 8003186:	460c      	mov	r4, r1
 8003188:	4618      	mov	r0, r3
 800318a:	4621      	mov	r1, r4
 800318c:	a33c      	add	r3, pc, #240	; (adr r3, 8003280 <SetSineOutput+0x238>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fd f88b 	bl	80002ac <__adddf3>
 8003196:	4603      	mov	r3, r0
 8003198:	460c      	mov	r4, r1
 800319a:	4618      	mov	r0, r3
 800319c:	4621      	mov	r1, r4
 800319e:	f7fd fceb 	bl	8000b78 <__aeabi_d2iz>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		TM_LCD_DrawPixel(i+138, amplitude, LCD_COLOR_RED2);
 80031a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	338a      	adds	r3, #138	; 0x8a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80031b6:	b291      	uxth	r1, r2
 80031b8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80031bc:	4618      	mov	r0, r3
 80031be:	f004 fd4f 	bl	8007c60 <TM_LCD_DrawPixel>
	for(int i=0;i<20;i++){
 80031c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031c6:	3301      	adds	r3, #1
 80031c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031d0:	2b13      	cmp	r3, #19
 80031d2:	ddc9      	ble.n	8003168 <SetSineOutput+0x120>
	}
	char f[10] = {0};
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	811a      	strh	r2, [r3, #8]
	sprintf(f,"%ld",freq);
 80031e0:	f107 030c 	add.w	r3, r7, #12
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4929      	ldr	r1, [pc, #164]	; (800328c <SetSineOutput+0x244>)
 80031e8:	4618      	mov	r0, r3
 80031ea:	f005 fd1d 	bl	8008c28 <siprintf>
	for(int i=165;i<320;i++){
 80031ee:	23a5      	movs	r3, #165	; 0xa5
 80031f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031f4:	e023      	b.n	800323e <SetSineOutput+0x1f6>
			for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 80031f6:	f004 fd75 	bl	8007ce4 <TM_LCD_GetHeight>
 80031fa:	4603      	mov	r3, r0
 80031fc:	3b12      	subs	r3, #18
 80031fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003202:	e00f      	b.n	8003224 <SetSineOutput+0x1dc>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8003204:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003208:	b29b      	uxth	r3, r3
 800320a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800320e:	b291      	uxth	r1, r2
 8003210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003214:	4618      	mov	r0, r3
 8003216:	f004 fd23 	bl	8007c60 <TM_LCD_DrawPixel>
			for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 800321a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800321e:	3301      	adds	r3, #1
 8003220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003224:	f004 fd5e 	bl	8007ce4 <TM_LCD_GetHeight>
 8003228:	4603      	mov	r3, r0
 800322a:	461a      	mov	r2, r3
 800322c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003230:	4293      	cmp	r3, r2
 8003232:	dbe7      	blt.n	8003204 <SetSineOutput+0x1bc>
	for(int i=165;i<320;i++){
 8003234:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003238:	3301      	adds	r3, #1
 800323a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800323e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003242:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003246:	dbd6      	blt.n	80031f6 <SetSineOutput+0x1ae>
			}
		}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 8003248:	f004 fd4c 	bl	8007ce4 <TM_LCD_GetHeight>
 800324c:	4603      	mov	r3, r0
 800324e:	3b12      	subs	r3, #18
 8003250:	b29b      	uxth	r3, r3
 8003252:	4619      	mov	r1, r3
 8003254:	20a5      	movs	r0, #165	; 0xa5
 8003256:	f004 fc2b 	bl	8007ab0 <TM_LCD_SetXY>
	TM_LCD_Puts(&f[0]);
 800325a:	f107 030c 	add.w	r3, r7, #12
 800325e:	4618      	mov	r0, r3
 8003260:	f004 fd24 	bl	8007cac <TM_LCD_Puts>
	char f1[] = " Hz";
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <SetSineOutput+0x248>)
 8003266:	60bb      	str	r3, [r7, #8]
	TM_LCD_Puts(&f1[0]);
 8003268:	f107 0308 	add.w	r3, r7, #8
 800326c:	4618      	mov	r0, r3
 800326e:	f004 fd1d 	bl	8007cac <TM_LCD_Puts>
}
 8003272:	bf00      	nop
 8003274:	37e4      	adds	r7, #228	; 0xe4
 8003276:	46bd      	mov	sp, r7
 8003278:	bd90      	pop	{r4, r7, pc}
 800327a:	bf00      	nop
 800327c:	f3af 8000 	nop.w
 8003280:	00000000 	.word	0x00000000
 8003284:	406c6000 	.word	0x406c6000
 8003288:	c0180000 	.word	0xc0180000
 800328c:	0800d0b0 	.word	0x0800d0b0
 8003290:	007a4820 	.word	0x007a4820
 8003294:	51eb851f 	.word	0x51eb851f
 8003298:	3fd51eb8 	.word	0x3fd51eb8

0800329c <ShowSignal>:

void ShowSignal(int* signal, char title[]){
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
	for(int i=1; i<319;i++){
 80032a6:	2301      	movs	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e02c      	b.n	8003306 <ShowSignal+0x6a>
		for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 80032ac:	2301      	movs	r3, #1
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	e017      	b.n	80032e2 <ShowSignal+0x46>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_YELLOW){
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	b292      	uxth	r2, r2
 80032ba:	4611      	mov	r1, r2
 80032bc:	4618      	mov	r0, r3
 80032be:	f004 fce2 	bl	8007c86 <TM_LCD_GetPixel>
 80032c2:	4602      	mov	r2, r0
 80032c4:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d107      	bne.n	80032dc <ShowSignal+0x40>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_BLACK);
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	b291      	uxth	r1, r2
 80032d4:	2200      	movs	r2, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f004 fcc2 	bl	8007c60 <TM_LCD_DrawPixel>
		for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	3301      	adds	r3, #1
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	f004 fcff 	bl	8007ce4 <TM_LCD_GetHeight>
 80032e6:	4603      	mov	r3, r0
 80032e8:	461a      	mov	r2, r3
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	da00      	bge.n	80032f6 <ShowSignal+0x5a>
 80032f4:	3303      	adds	r3, #3
 80032f6:	109b      	asrs	r3, r3, #2
 80032f8:	461a      	mov	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4293      	cmp	r3, r2
 80032fe:	dbd8      	blt.n	80032b2 <ShowSignal+0x16>
	for(int i=1; i<319;i++){
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3301      	adds	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800330c:	ddce      	ble.n	80032ac <ShowSignal+0x10>
			}
		}
	}
	for(int i=1;i<110;i++){
 800330e:	2301      	movs	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	e014      	b.n	800333e <ShowSignal+0xa2>
		for(int j=185;j<205;j++){
 8003314:	23b9      	movs	r3, #185	; 0xb9
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	e00b      	b.n	8003332 <ShowSignal+0x96>
			TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	b29b      	uxth	r3, r3
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	b291      	uxth	r1, r2
 8003322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003326:	4618      	mov	r0, r3
 8003328:	f004 fc9a 	bl	8007c60 <TM_LCD_DrawPixel>
		for(int j=185;j<205;j++){
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	3301      	adds	r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2bcc      	cmp	r3, #204	; 0xcc
 8003336:	ddf0      	ble.n	800331a <ShowSignal+0x7e>
	for(int i=1;i<110;i++){
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	3301      	adds	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b6d      	cmp	r3, #109	; 0x6d
 8003342:	dde7      	ble.n	8003314 <ShowSignal+0x78>
		}
	}
	TM_LCD_SetFont(&TM_Font_11x18);
 8003344:	4810      	ldr	r0, [pc, #64]	; (8003388 <ShowSignal+0xec>)
 8003346:	f004 fbd9 	bl	8007afc <TM_LCD_SetFont>
	TM_LCD_SetXY(1,TM_LCD_GetHeight()*3/4+5);
 800334a:	f004 fccb 	bl	8007ce4 <TM_LCD_GetHeight>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	4613      	mov	r3, r2
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	4413      	add	r3, r2
 8003358:	2b00      	cmp	r3, #0
 800335a:	da00      	bge.n	800335e <ShowSignal+0xc2>
 800335c:	3303      	adds	r3, #3
 800335e:	109b      	asrs	r3, r3, #2
 8003360:	b29b      	uxth	r3, r3
 8003362:	3305      	adds	r3, #5
 8003364:	b29b      	uxth	r3, r3
 8003366:	4619      	mov	r1, r3
 8003368:	2001      	movs	r0, #1
 800336a:	f004 fba1 	bl	8007ab0 <TM_LCD_SetXY>
	TM_LCD_Puts(&title[0]);
 800336e:	6838      	ldr	r0, [r7, #0]
 8003370:	f004 fc9c 	bl	8007cac <TM_LCD_Puts>
	TM_LCD_SetFont(&TM_Font_7x10);
 8003374:	4805      	ldr	r0, [pc, #20]	; (800338c <ShowSignal+0xf0>)
 8003376:	f004 fbc1 	bl	8007afc <TM_LCD_SetFont>
	SendToScreen(signal);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff fce8 	bl	8002d50 <SendToScreen>
}
 8003380:	bf00      	nop
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	2000124c 	.word	0x2000124c
 800338c:	20001244 	.word	0x20001244

08003390 <Window>:

void Window(void){
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
	for(int i=1; i<319;i++){
 8003396:	2301      	movs	r3, #1
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	e01f      	b.n	80033dc <Window+0x4c>
			for(int j=1;j<TM_LCD_GetHeight()*3/4+2;j++){
 800339c:	2301      	movs	r3, #1
 800339e:	60bb      	str	r3, [r7, #8]
 80033a0:	e00a      	b.n	80033b8 <Window+0x28>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_BLACK);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	b291      	uxth	r1, r2
 80033aa:	2200      	movs	r2, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 fc57 	bl	8007c60 <TM_LCD_DrawPixel>
			for(int j=1;j<TM_LCD_GetHeight()*3/4+2;j++){
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	3301      	adds	r3, #1
 80033b6:	60bb      	str	r3, [r7, #8]
 80033b8:	f004 fc94 	bl	8007ce4 <TM_LCD_GetHeight>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da00      	bge.n	80033cc <Window+0x3c>
 80033ca:	3303      	adds	r3, #3
 80033cc:	109b      	asrs	r3, r3, #2
 80033ce:	3302      	adds	r3, #2
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	dbe5      	blt.n	80033a2 <Window+0x12>
	for(int i=1; i<319;i++){
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3301      	adds	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 80033e2:	dddb      	ble.n	800339c <Window+0xc>
			}
		}
		for(int i=1; i<319;i++){
 80033e4:	2301      	movs	r3, #1
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	e04a      	b.n	8003480 <Window+0xf0>
			for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 80033ea:	2301      	movs	r3, #1
 80033ec:	603b      	str	r3, [r7, #0]
 80033ee:	e035      	b.n	800345c <Window+0xcc>
				if(j==91){
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b5b      	cmp	r3, #91	; 0x5b
 80033f4:	d114      	bne.n	8003420 <Window+0x90>
					if(i%3==0){
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4b25      	ldr	r3, [pc, #148]	; (8003490 <Window+0x100>)
 80033fa:	fb83 3201 	smull	r3, r2, r3, r1
 80033fe:	17cb      	asrs	r3, r1, #31
 8003400:	1ad2      	subs	r2, r2, r3
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	1aca      	subs	r2, r1, r3
 800340a:	2a00      	cmp	r2, #0
 800340c:	d108      	bne.n	8003420 <Window+0x90>
						TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	b29b      	uxth	r3, r3
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	b291      	uxth	r1, r2
 8003416:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800341a:	4618      	mov	r0, r3
 800341c:	f004 fc20 	bl	8007c60 <TM_LCD_DrawPixel>
					}
				}
				if((i%16==0)&&(j%9==0))	TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	2b00      	cmp	r3, #0
 8003428:	d115      	bne.n	8003456 <Window+0xc6>
 800342a:	6839      	ldr	r1, [r7, #0]
 800342c:	4b19      	ldr	r3, [pc, #100]	; (8003494 <Window+0x104>)
 800342e:	fb83 2301 	smull	r2, r3, r3, r1
 8003432:	105a      	asrs	r2, r3, #1
 8003434:	17cb      	asrs	r3, r1, #31
 8003436:	1ad2      	subs	r2, r2, r3
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	1aca      	subs	r2, r1, r3
 8003440:	2a00      	cmp	r2, #0
 8003442:	d108      	bne.n	8003456 <Window+0xc6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	b29b      	uxth	r3, r3
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	b291      	uxth	r1, r2
 800344c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003450:	4618      	mov	r0, r3
 8003452:	f004 fc05 	bl	8007c60 <TM_LCD_DrawPixel>
			for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	f004 fc42 	bl	8007ce4 <TM_LCD_GetHeight>
 8003460:	4603      	mov	r3, r0
 8003462:	461a      	mov	r2, r3
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	da00      	bge.n	8003470 <Window+0xe0>
 800346e:	3303      	adds	r3, #3
 8003470:	109b      	asrs	r3, r3, #2
 8003472:	461a      	mov	r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4293      	cmp	r3, r2
 8003478:	dbba      	blt.n	80033f0 <Window+0x60>
		for(int i=1; i<319;i++){
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3301      	adds	r3, #1
 800347e:	607b      	str	r3, [r7, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8003486:	ddb0      	ble.n	80033ea <Window+0x5a>
			}
		}
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	55555556 	.word	0x55555556
 8003494:	38e38e39 	.word	0x38e38e39

08003498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800349c:	f000 fad8 	bl	8003a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80034a0:	f000 f826 	bl	80034f0 <SystemClock_Config>
//  MX_SPI1_Init();
//  StartScreen();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80034a4:	f7ff fad8 	bl	8002a58 <MX_GPIO_Init>
  MX_DMA_Init();
 80034a8:	f7fe ffb8 	bl	800241c <MX_DMA_Init>


  MX_ADC3_Init();
 80034ac:	f7fe fd0a 	bl	8001ec4 <MX_ADC3_Init>
  MX_DAC_Init();
 80034b0:	f7fe fe16 	bl	80020e0 <MX_DAC_Init>
  MX_USART1_UART_Init();
 80034b4:	f000 f9de 	bl	8003874 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80034b8:	f000 f976 	bl	80037a8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  start_timer();
 80034bc:	f000 f9d0 	bl	8003860 <start_timer>
  if(HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&buffer, BUFFER_SIZE) != HAL_OK)
 80034c0:	2240      	movs	r2, #64	; 0x40
 80034c2:	4909      	ldr	r1, [pc, #36]	; (80034e8 <main+0x50>)
 80034c4:	4809      	ldr	r0, [pc, #36]	; (80034ec <main+0x54>)
 80034c6:	f000 fb59 	bl	8003b7c <HAL_ADC_Start_DMA>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <main+0x3c>
    {
      /* Start Conversation Error */
      Error_Handler();
 80034d0:	f000 f89a 	bl	8003608 <Error_Handler>
    }
  generate();
 80034d4:	f7fe fdc0 	bl	8002058 <generate>
  SetSineOutput(500);
 80034d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034dc:	f7ff fdb4 	bl	8003048 <SetSineOutput>
  while (1)
  {


	  //matlab();
	  cutOffSetup();
 80034e0:	f7fe f9c2 	bl	8001868 <cutOffSetup>
 80034e4:	e7fc      	b.n	80034e0 <main+0x48>
 80034e6:	bf00      	nop
 80034e8:	200018fc 	.word	0x200018fc
 80034ec:	200017b4 	.word	0x200017b4

080034f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b0a0      	sub	sp, #128	; 0x80
 80034f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80034fa:	2230      	movs	r2, #48	; 0x30
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f004 fc8e 	bl	8007e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003504:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003514:	f107 030c 	add.w	r3, r7, #12
 8003518:	2230      	movs	r2, #48	; 0x30
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f004 fc7f 	bl	8007e20 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	4b36      	ldr	r3, [pc, #216]	; (8003600 <SystemClock_Config+0x110>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a35      	ldr	r2, [pc, #212]	; (8003600 <SystemClock_Config+0x110>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b33      	ldr	r3, [pc, #204]	; (8003600 <SystemClock_Config+0x110>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800353e:	2300      	movs	r3, #0
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <SystemClock_Config+0x114>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <SystemClock_Config+0x114>)
 8003548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	4b2d      	ldr	r3, [pc, #180]	; (8003604 <SystemClock_Config+0x114>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003556:	607b      	str	r3, [r7, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800355a:	2301      	movs	r3, #1
 800355c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800355e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003562:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003564:	2302      	movs	r3, #2
 8003566:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003568:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800356c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800356e:	2308      	movs	r3, #8
 8003570:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 8003572:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003576:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003578:	2302      	movs	r3, #2
 800357a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800357c:	2304      	movs	r3, #4
 800357e:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003580:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003584:	4618      	mov	r0, r3
 8003586:	f002 f8e1 	bl	800574c <HAL_RCC_OscConfig>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003590:	f000 f83a 	bl	8003608 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003594:	f002 f88a 	bl	80056ac <HAL_PWREx_EnableOverDrive>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800359e:	f000 f833 	bl	8003608 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035a2:	230f      	movs	r3, #15
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035a6:	2302      	movs	r3, #2
 80035a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035aa:	2300      	movs	r3, #0
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80035b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80035b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80035ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035be:	2105      	movs	r1, #5
 80035c0:	4618      	mov	r0, r3
 80035c2:	f002 fb33 	bl	8005c2c <HAL_RCC_ClockConfig>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80035cc:	f000 f81c 	bl	8003608 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80035d0:	2308      	movs	r3, #8
 80035d2:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80035d4:	23c0      	movs	r3, #192	; 0xc0
 80035d6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80035d8:	2304      	movs	r3, #4
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80035dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035e2:	f107 030c 	add.w	r3, r7, #12
 80035e6:	4618      	mov	r0, r3
 80035e8:	f002 fd12 	bl	8006010 <HAL_RCCEx_PeriphCLKConfig>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <SystemClock_Config+0x106>
  {
    Error_Handler();
 80035f2:	f000 f809 	bl	8003608 <Error_Handler>
  }
}
 80035f6:	bf00      	nop
 80035f8:	3780      	adds	r7, #128	; 0x80
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40023800 	.word	0x40023800
 8003604:	40007000 	.word	0x40007000

08003608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800360c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800360e:	e7fe      	b.n	800360e <Error_Handler+0x6>

08003610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	607b      	str	r3, [r7, #4]
 800361a:	4b10      	ldr	r3, [pc, #64]	; (800365c <HAL_MspInit+0x4c>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	4a0f      	ldr	r2, [pc, #60]	; (800365c <HAL_MspInit+0x4c>)
 8003620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003624:	6453      	str	r3, [r2, #68]	; 0x44
 8003626:	4b0d      	ldr	r3, [pc, #52]	; (800365c <HAL_MspInit+0x4c>)
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
 8003636:	4b09      	ldr	r3, [pc, #36]	; (800365c <HAL_MspInit+0x4c>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	4a08      	ldr	r2, [pc, #32]	; (800365c <HAL_MspInit+0x4c>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	; 0x40
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_MspInit+0x4c>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003664:	e7fe      	b.n	8003664 <NMI_Handler+0x4>

08003666 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800366a:	e7fe      	b.n	800366a <HardFault_Handler+0x4>

0800366c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003670:	e7fe      	b.n	8003670 <MemManage_Handler+0x4>

08003672 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003672:	b480      	push	{r7}
 8003674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003676:	e7fe      	b.n	8003676 <BusFault_Handler+0x4>

08003678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800367c:	e7fe      	b.n	800367c <UsageFault_Handler+0x4>

0800367e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800367e:	b480      	push	{r7}
 8003680:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800369a:	b480      	push	{r7}
 800369c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036ac:	f003 ff3a 	bl	8007524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036b0:	bf00      	nop
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <DMA1_Stream6_IRQHandler+0x10>)
 80036ba:	f001 fb23 	bl	8004d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20001d20 	.word	0x20001d20

080036c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80036cc:	4803      	ldr	r0, [pc, #12]	; (80036dc <USART1_IRQHandler+0x14>)
 80036ce:	f003 f965 	bl	800699c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 80036d2:	4802      	ldr	r0, [pc, #8]	; (80036dc <USART1_IRQHandler+0x14>)
 80036d4:	f000 f950 	bl	8003978 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80036d8:	bf00      	nop
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20001e84 	.word	0x20001e84

080036e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80036e4:	4803      	ldr	r0, [pc, #12]	; (80036f4 <TIM6_DAC_IRQHandler+0x14>)
 80036e6:	f001 f822 	bl	800472e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80036ea:	4803      	ldr	r0, [pc, #12]	; (80036f8 <TIM6_DAC_IRQHandler+0x18>)
 80036ec:	f002 fe9d 	bl	800642a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036f0:	bf00      	nop
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20001d0c 	.word	0x20001d0c
 80036f8:	20001e34 	.word	0x20001e34

080036fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <DMA2_Stream0_IRQHandler+0x10>)
 8003702:	f001 faff 	bl	8004d04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20001754 	.word	0x20001754

08003710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003718:	4a14      	ldr	r2, [pc, #80]	; (800376c <_sbrk+0x5c>)
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <_sbrk+0x60>)
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <_sbrk+0x64>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <_sbrk+0x64>)
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <_sbrk+0x68>)
 8003730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <_sbrk+0x64>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	429a      	cmp	r2, r3
 800373e:	d207      	bcs.n	8003750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003740:	f004 fb10 	bl	8007d64 <__errno>
 8003744:	4602      	mov	r2, r0
 8003746:	230c      	movs	r3, #12
 8003748:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800374a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800374e:	e009      	b.n	8003764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <_sbrk+0x64>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <_sbrk+0x64>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	4a05      	ldr	r2, [pc, #20]	; (8003774 <_sbrk+0x64>)
 8003760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20030000 	.word	0x20030000
 8003770:	00000400 	.word	0x00000400
 8003774:	20001448 	.word	0x20001448
 8003778:	20001f00 	.word	0x20001f00

0800377c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003780:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <SystemInit+0x28>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	4a07      	ldr	r2, [pc, #28]	; (80037a4 <SystemInit+0x28>)
 8003788:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800378c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003790:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <SystemInit+0x28>)
 8003792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003796:	609a      	str	r2, [r3, #8]
#endif
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ae:	463b      	mov	r3, r7
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 80037b6:	4b14      	ldr	r3, [pc, #80]	; (8003808 <MX_TIM6_Init+0x60>)
 80037b8:	4a14      	ldr	r2, [pc, #80]	; (800380c <MX_TIM6_Init+0x64>)
 80037ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <MX_TIM6_Init+0x60>)
 80037be:	2259      	movs	r2, #89	; 0x59
 80037c0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c2:	4b11      	ldr	r3, [pc, #68]	; (8003808 <MX_TIM6_Init+0x60>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 80037c8:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <MX_TIM6_Init+0x60>)
 80037ca:	2263      	movs	r2, #99	; 0x63
 80037cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ce:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <MX_TIM6_Init+0x60>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037d4:	480c      	ldr	r0, [pc, #48]	; (8003808 <MX_TIM6_Init+0x60>)
 80037d6:	f002 fdd9 	bl	800638c <HAL_TIM_Base_Init>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 80037e0:	f7ff ff12 	bl	8003608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80037e4:	2320      	movs	r3, #32
 80037e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037ec:	463b      	mov	r3, r7
 80037ee:	4619      	mov	r1, r3
 80037f0:	4805      	ldr	r0, [pc, #20]	; (8003808 <MX_TIM6_Init+0x60>)
 80037f2:	f002 fff5 	bl	80067e0 <HAL_TIMEx_MasterConfigSynchronization>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 80037fc:	f7ff ff04 	bl	8003608 <Error_Handler>
  }

}
 8003800:	bf00      	nop
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20001e34 	.word	0x20001e34
 800380c:	40001000 	.word	0x40001000

08003810 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a0e      	ldr	r2, [pc, #56]	; (8003858 <HAL_TIM_Base_MspInit+0x48>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d115      	bne.n	800384e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	4b0d      	ldr	r3, [pc, #52]	; (800385c <HAL_TIM_Base_MspInit+0x4c>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	4a0c      	ldr	r2, [pc, #48]	; (800385c <HAL_TIM_Base_MspInit+0x4c>)
 800382c:	f043 0310 	orr.w	r3, r3, #16
 8003830:	6413      	str	r3, [r2, #64]	; 0x40
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <HAL_TIM_Base_MspInit+0x4c>)
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2100      	movs	r1, #0
 8003842:	2036      	movs	r0, #54	; 0x36
 8003844:	f000 fe2b 	bl	800449e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003848:	2036      	movs	r0, #54	; 0x36
 800384a:	f000 fe44 	bl	80044d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800384e:	bf00      	nop
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40001000 	.word	0x40001000
 800385c:	40023800 	.word	0x40023800

08003860 <start_timer>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void start_timer() {
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8003864:	4802      	ldr	r0, [pc, #8]	; (8003870 <start_timer+0x10>)
 8003866:	f002 fdbc 	bl	80063e2 <HAL_TIM_Base_Start_IT>
}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20001e34 	.word	0x20001e34

08003874 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <MX_USART1_UART_Init+0x5c>)
 800387a:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <MX_USART1_UART_Init+0x60>)
 800387c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <MX_USART1_UART_Init+0x5c>)
 8003880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003884:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <MX_USART1_UART_Init+0x5c>)
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800388c:	4b10      	ldr	r3, [pc, #64]	; (80038d0 <MX_USART1_UART_Init+0x5c>)
 800388e:	2200      	movs	r2, #0
 8003890:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003892:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <MX_USART1_UART_Init+0x5c>)
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003898:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <MX_USART1_UART_Init+0x5c>)
 800389a:	220c      	movs	r2, #12
 800389c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800389e:	4b0c      	ldr	r3, [pc, #48]	; (80038d0 <MX_USART1_UART_Init+0x5c>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <MX_USART1_UART_Init+0x5c>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038aa:	4809      	ldr	r0, [pc, #36]	; (80038d0 <MX_USART1_UART_Init+0x5c>)
 80038ac:	f003 f828 	bl	8006900 <HAL_UART_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80038b6:	f7ff fea7 	bl	8003608 <Error_Handler>
  }
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <MX_USART1_UART_Init+0x5c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <MX_USART1_UART_Init+0x5c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f042 0220 	orr.w	r2, r2, #32
 80038c8:	60da      	str	r2, [r3, #12]
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20001e84 	.word	0x20001e84
 80038d4:	40011000 	.word	0x40011000

080038d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	; 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e0:	f107 0314 	add.w	r3, r7, #20
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	609a      	str	r2, [r3, #8]
 80038ec:	60da      	str	r2, [r3, #12]
 80038ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a1d      	ldr	r2, [pc, #116]	; (800396c <HAL_UART_MspInit+0x94>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d134      	bne.n	8003964 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <HAL_UART_MspInit+0x98>)
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	4a1b      	ldr	r2, [pc, #108]	; (8003970 <HAL_UART_MspInit+0x98>)
 8003904:	f043 0310 	orr.w	r3, r3, #16
 8003908:	6453      	str	r3, [r2, #68]	; 0x44
 800390a:	4b19      	ldr	r3, [pc, #100]	; (8003970 <HAL_UART_MspInit+0x98>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	f003 0310 	and.w	r3, r3, #16
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	4b15      	ldr	r3, [pc, #84]	; (8003970 <HAL_UART_MspInit+0x98>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	4a14      	ldr	r2, [pc, #80]	; (8003970 <HAL_UART_MspInit+0x98>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6313      	str	r3, [r2, #48]	; 0x30
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_UART_MspInit+0x98>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003932:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003936:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003938:	2302      	movs	r3, #2
 800393a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	2300      	movs	r3, #0
 800393e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003940:	2303      	movs	r3, #3
 8003942:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003944:	2307      	movs	r3, #7
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003948:	f107 0314 	add.w	r3, r7, #20
 800394c:	4619      	mov	r1, r3
 800394e:	4809      	ldr	r0, [pc, #36]	; (8003974 <HAL_UART_MspInit+0x9c>)
 8003950:	f001 fc40 	bl	80051d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003954:	2200      	movs	r2, #0
 8003956:	2100      	movs	r1, #0
 8003958:	2025      	movs	r0, #37	; 0x25
 800395a:	f000 fda0 	bl	800449e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800395e:	2025      	movs	r0, #37	; 0x25
 8003960:	f000 fdb9 	bl	80044d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003964:	bf00      	nop
 8003966:	3728      	adds	r7, #40	; 0x28
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40011000 	.word	0x40011000
 8003970:	40023800 	.word	0x40023800
 8003974:	40020000 	.word	0x40020000

08003978 <USER_UART_IRQHandler>:

/* USER CODE BEGIN 1 */
char RX_BUFFER[BUFSIZE];
int RX_BUFFER_HEAD, RX_BUFFER_TAIL;

void  USER_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	if( huart ->Instance  ==  USART1 ) {
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a17      	ldr	r2, [pc, #92]	; (80039e4 <USER_UART_IRQHandler+0x6c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d125      	bne.n	80039d6 <USER_UART_IRQHandler+0x5e>
		rx_data = __HAL_UART_FLUSH_DRREGISTER( huart );
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b15      	ldr	r3, [pc, #84]	; (80039e8 <USER_UART_IRQHandler+0x70>)
 8003994:	701a      	strb	r2, [r3, #0]

		static  char  rx_head;
		rx_head = RX_BUFFER_HEAD + 1;
 8003996:	4b15      	ldr	r3, [pc, #84]	; (80039ec <USER_UART_IRQHandler+0x74>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	3301      	adds	r3, #1
 800399e:	b2da      	uxtb	r2, r3
 80039a0:	4b13      	ldr	r3, [pc, #76]	; (80039f0 <USER_UART_IRQHandler+0x78>)
 80039a2:	701a      	strb	r2, [r3, #0]
		if( rx_head  ==  BUFSIZE ) {
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <USER_UART_IRQHandler+0x78>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b10      	cmp	r3, #16
 80039aa:	d102      	bne.n	80039b2 <USER_UART_IRQHandler+0x3a>
			rx_head = 0;
 80039ac:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <USER_UART_IRQHandler+0x78>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
		}
		if( rx_head  !=  RX_BUFFER_TAIL ) {
 80039b2:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <USER_UART_IRQHandler+0x78>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <USER_UART_IRQHandler+0x7c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d00a      	beq.n	80039d6 <USER_UART_IRQHandler+0x5e>
			RX_BUFFER[RX_BUFFER_HEAD] = rx_data;
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <USER_UART_IRQHandler+0x74>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a08      	ldr	r2, [pc, #32]	; (80039e8 <USER_UART_IRQHandler+0x70>)
 80039c6:	7811      	ldrb	r1, [r2, #0]
 80039c8:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <USER_UART_IRQHandler+0x80>)
 80039ca:	54d1      	strb	r1, [r2, r3]
			RX_BUFFER_HEAD = rx_head;
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <USER_UART_IRQHandler+0x78>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <USER_UART_IRQHandler+0x74>)
 80039d4:	601a      	str	r2, [r3, #0]
		}
	}
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40011000 	.word	0x40011000
 80039e8:	20001e2c 	.word	0x20001e2c
 80039ec:	20001ec4 	.word	0x20001ec4
 80039f0:	2000144c 	.word	0x2000144c
 80039f4:	20001ec8 	.word	0x20001ec8
 80039f8:	20001e74 	.word	0x20001e74

080039fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80039fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a34 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a02:	e003      	b.n	8003a0c <LoopCopyDataInit>

08003a04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a0a:	3104      	adds	r1, #4

08003a0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a0c:	480b      	ldr	r0, [pc, #44]	; (8003a3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a14:	d3f6      	bcc.n	8003a04 <CopyDataInit>
  ldr  r2, =_sbss
 8003a16:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a18:	e002      	b.n	8003a20 <LoopFillZerobss>

08003a1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a1c:	f842 3b04 	str.w	r3, [r2], #4

08003a20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a20:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a24:	d3f9      	bcc.n	8003a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a26:	f7ff fea9 	bl	800377c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a2a:	f004 f9a1 	bl	8007d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a2e:	f7ff fd33 	bl	8003498 <main>
  bx  lr    
 8003a32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003a34:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003a38:	0800ea78 	.word	0x0800ea78
  ldr  r0, =_sdata
 8003a3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a40:	20001428 	.word	0x20001428
  ldr  r2, =_sbss
 8003a44:	20001428 	.word	0x20001428
  ldr  r3, = _ebss
 8003a48:	20001efc 	.word	0x20001efc

08003a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a4c:	e7fe      	b.n	8003a4c <ADC_IRQHandler>
	...

08003a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_Init+0x40>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <HAL_Init+0x40>)
 8003a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_Init+0x40>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0a      	ldr	r2, [pc, #40]	; (8003a90 <HAL_Init+0x40>)
 8003a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_Init+0x40>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <HAL_Init+0x40>)
 8003a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a78:	2003      	movs	r0, #3
 8003a7a:	f000 fd05 	bl	8004488 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a7e:	2000      	movs	r0, #0
 8003a80:	f000 f808 	bl	8003a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a84:	f7ff fdc4 	bl	8003610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00

08003a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a9c:	4b12      	ldr	r3, [pc, #72]	; (8003ae8 <HAL_InitTick+0x54>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_InitTick+0x58>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 fd1d 	bl	80044f2 <HAL_SYSTICK_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e00e      	b.n	8003ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b0f      	cmp	r3, #15
 8003ac6:	d80a      	bhi.n	8003ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ad0:	f000 fce5 	bl	800449e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ad4:	4a06      	ldr	r2, [pc, #24]	; (8003af0 <HAL_InitTick+0x5c>)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
 8003adc:	e000      	b.n	8003ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20001238 	.word	0x20001238
 8003aec:	20001240 	.word	0x20001240
 8003af0:	2000123c 	.word	0x2000123c

08003af4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e033      	b.n	8003b72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d109      	bne.n	8003b26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7fe fa28 	bl	8001f68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 0310 	and.w	r3, r3, #16
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d118      	bne.n	8003b64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b3a:	f023 0302 	bic.w	r3, r3, #2
 8003b3e:	f043 0202 	orr.w	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa50 	bl	8003fec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	f023 0303 	bic.w	r3, r3, #3
 8003b5a:	f043 0201 	orr.w	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	641a      	str	r2, [r3, #64]	; 0x40
 8003b62:	e001      	b.n	8003b68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d101      	bne.n	8003b9a <HAL_ADC_Start_DMA+0x1e>
 8003b96:	2302      	movs	r3, #2
 8003b98:	e0cc      	b.n	8003d34 <HAL_ADC_Start_DMA+0x1b8>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d018      	beq.n	8003be2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689a      	ldr	r2, [r3, #8]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003bc0:	4b5e      	ldr	r3, [pc, #376]	; (8003d3c <HAL_ADC_Start_DMA+0x1c0>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a5e      	ldr	r2, [pc, #376]	; (8003d40 <HAL_ADC_Start_DMA+0x1c4>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0c9a      	lsrs	r2, r3, #18
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003bd4:	e002      	b.n	8003bdc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f9      	bne.n	8003bd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	f040 80a0 	bne.w	8003d32 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003bfa:	f023 0301 	bic.w	r3, r3, #1
 8003bfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c30:	d106      	bne.n	8003c40 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	f023 0206 	bic.w	r2, r3, #6
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	645a      	str	r2, [r3, #68]	; 0x44
 8003c3e:	e002      	b.n	8003c46 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c4e:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <HAL_ADC_Start_DMA+0x1c8>)
 8003c50:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c56:	4a3c      	ldr	r2, [pc, #240]	; (8003d48 <HAL_ADC_Start_DMA+0x1cc>)
 8003c58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5e:	4a3b      	ldr	r2, [pc, #236]	; (8003d4c <HAL_ADC_Start_DMA+0x1d0>)
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c66:	4a3a      	ldr	r2, [pc, #232]	; (8003d50 <HAL_ADC_Start_DMA+0x1d4>)
 8003c68:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003c72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003c82:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c92:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	334c      	adds	r3, #76	; 0x4c
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f000 ff44 	bl	8004b30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 031f 	and.w	r3, r3, #31
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d12a      	bne.n	8003d0a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <HAL_ADC_Start_DMA+0x1d8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d015      	beq.n	8003cea <HAL_ADC_Start_DMA+0x16e>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a25      	ldr	r2, [pc, #148]	; (8003d58 <HAL_ADC_Start_DMA+0x1dc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d105      	bne.n	8003cd4 <HAL_ADC_Start_DMA+0x158>
 8003cc8:	4b1e      	ldr	r3, [pc, #120]	; (8003d44 <HAL_ADC_Start_DMA+0x1c8>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <HAL_ADC_Start_DMA+0x1e0>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d129      	bne.n	8003d32 <HAL_ADC_Start_DMA+0x1b6>
 8003cde:	4b19      	ldr	r3, [pc, #100]	; (8003d44 <HAL_ADC_Start_DMA+0x1c8>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f003 031f 	and.w	r3, r3, #31
 8003ce6:	2b0f      	cmp	r3, #15
 8003ce8:	d823      	bhi.n	8003d32 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d11c      	bne.n	8003d32 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	e013      	b.n	8003d32 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a11      	ldr	r2, [pc, #68]	; (8003d54 <HAL_ADC_Start_DMA+0x1d8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d10e      	bne.n	8003d32 <HAL_ADC_Start_DMA+0x1b6>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d107      	bne.n	8003d32 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003d30:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20001238 	.word	0x20001238
 8003d40:	431bde83 	.word	0x431bde83
 8003d44:	40012300 	.word	0x40012300
 8003d48:	080041e5 	.word	0x080041e5
 8003d4c:	0800429f 	.word	0x0800429f
 8003d50:	080042bb 	.word	0x080042bb
 8003d54:	40012000 	.word	0x40012000
 8003d58:	40012100 	.word	0x40012100
 8003d5c:	40012200 	.word	0x40012200

08003d60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d7c:	bf00      	nop
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x1c>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e113      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x244>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b09      	cmp	r3, #9
 8003db2:	d925      	bls.n	8003e00 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68d9      	ldr	r1, [r3, #12]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3b1e      	subs	r3, #30
 8003dca:	2207      	movs	r2, #7
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43da      	mvns	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	400a      	ands	r2, r1
 8003dd8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68d9      	ldr	r1, [r3, #12]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	4618      	mov	r0, r3
 8003dec:	4603      	mov	r3, r0
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	4403      	add	r3, r0
 8003df2:	3b1e      	subs	r3, #30
 8003df4:	409a      	lsls	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	60da      	str	r2, [r3, #12]
 8003dfe:	e022      	b.n	8003e46 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6919      	ldr	r1, [r3, #16]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4613      	mov	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	2207      	movs	r2, #7
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43da      	mvns	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	400a      	ands	r2, r1
 8003e22:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6919      	ldr	r1, [r3, #16]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	4618      	mov	r0, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4403      	add	r3, r0
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	2b06      	cmp	r3, #6
 8003e4c:	d824      	bhi.n	8003e98 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3b05      	subs	r3, #5
 8003e60:	221f      	movs	r2, #31
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43da      	mvns	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4413      	add	r3, r2
 8003e88:	3b05      	subs	r3, #5
 8003e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	635a      	str	r2, [r3, #52]	; 0x34
 8003e96:	e04c      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	d824      	bhi.n	8003eea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	3b23      	subs	r3, #35	; 0x23
 8003eb2:	221f      	movs	r2, #31
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43da      	mvns	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	400a      	ands	r2, r1
 8003ec0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	4618      	mov	r0, r3
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	3b23      	subs	r3, #35	; 0x23
 8003edc:	fa00 f203 	lsl.w	r2, r0, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ee8:	e023      	b.n	8003f32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	3b41      	subs	r3, #65	; 0x41
 8003efc:	221f      	movs	r2, #31
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43da      	mvns	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	400a      	ands	r2, r1
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	4618      	mov	r0, r3
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	3b41      	subs	r3, #65	; 0x41
 8003f26:	fa00 f203 	lsl.w	r2, r0, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f32:	4b29      	ldr	r3, [pc, #164]	; (8003fd8 <HAL_ADC_ConfigChannel+0x250>)
 8003f34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a28      	ldr	r2, [pc, #160]	; (8003fdc <HAL_ADC_ConfigChannel+0x254>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d10f      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x1d8>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b12      	cmp	r3, #18
 8003f46:	d10b      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a1d      	ldr	r2, [pc, #116]	; (8003fdc <HAL_ADC_ConfigChannel+0x254>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d12b      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x23a>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <HAL_ADC_ConfigChannel+0x258>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <HAL_ADC_ConfigChannel+0x1f4>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b11      	cmp	r3, #17
 8003f7a:	d122      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a11      	ldr	r2, [pc, #68]	; (8003fe0 <HAL_ADC_ConfigChannel+0x258>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d111      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <HAL_ADC_ConfigChannel+0x25c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a11      	ldr	r2, [pc, #68]	; (8003fe8 <HAL_ADC_ConfigChannel+0x260>)
 8003fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa8:	0c9a      	lsrs	r2, r3, #18
 8003faa:	4613      	mov	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fb4:	e002      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f9      	bne.n	8003fb6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	40012300 	.word	0x40012300
 8003fdc:	40012000 	.word	0x40012000
 8003fe0:	10000012 	.word	0x10000012
 8003fe4:	20001238 	.word	0x20001238
 8003fe8:	431bde83 	.word	0x431bde83

08003fec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ff4:	4b79      	ldr	r3, [pc, #484]	; (80041dc <ADC_Init+0x1f0>)
 8003ff6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	431a      	orrs	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	021a      	lsls	r2, r3, #8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6899      	ldr	r1, [r3, #8]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407e:	4a58      	ldr	r2, [pc, #352]	; (80041e0 <ADC_Init+0x1f4>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d022      	beq.n	80040ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6899      	ldr	r1, [r3, #8]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6899      	ldr	r1, [r3, #8]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]
 80040c8:	e00f      	b.n	80040ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f022 0202 	bic.w	r2, r2, #2
 80040f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6899      	ldr	r1, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7e1b      	ldrb	r3, [r3, #24]
 8004104:	005a      	lsls	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01b      	beq.n	8004150 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004126:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6859      	ldr	r1, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	3b01      	subs	r3, #1
 8004144:	035a      	lsls	r2, r3, #13
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
 800414e:	e007      	b.n	8004160 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800415e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800416e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	3b01      	subs	r3, #1
 800417c:	051a      	lsls	r2, r3, #20
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	6899      	ldr	r1, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80041a2:	025a      	lsls	r2, r3, #9
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6899      	ldr	r1, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	029a      	lsls	r2, r3, #10
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	40012300 	.word	0x40012300
 80041e0:	0f000001 	.word	0x0f000001

080041e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b084      	sub	sp, #16
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d13c      	bne.n	8004278 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d12b      	bne.n	8004270 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800421c:	2b00      	cmp	r3, #0
 800421e:	d127      	bne.n	8004270 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800422a:	2b00      	cmp	r3, #0
 800422c:	d006      	beq.n	800423c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004238:	2b00      	cmp	r3, #0
 800423a:	d119      	bne.n	8004270 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0220 	bic.w	r2, r2, #32
 800424a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f7fd fbed 	bl	8001a50 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004276:	e00e      	b.n	8004296 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f003 0310 	and.w	r3, r3, #16
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff fd75 	bl	8003d74 <HAL_ADC_ErrorCallback>
}
 800428a:	e004      	b.n	8004296 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
}
 8004296:	bf00      	nop
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b084      	sub	sp, #16
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7ff fd57 	bl	8003d60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042b2:	bf00      	nop
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b084      	sub	sp, #16
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2240      	movs	r2, #64	; 0x40
 80042cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	f043 0204 	orr.w	r2, r3, #4
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f7ff fd4a 	bl	8003d74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <__NVIC_SetPriorityGrouping+0x44>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004304:	4013      	ands	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004310:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004318:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800431a:	4a04      	ldr	r2, [pc, #16]	; (800432c <__NVIC_SetPriorityGrouping+0x44>)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	60d3      	str	r3, [r2, #12]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004334:	4b04      	ldr	r3, [pc, #16]	; (8004348 <__NVIC_GetPriorityGrouping+0x18>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	f003 0307 	and.w	r3, r3, #7
}
 800433e:	4618      	mov	r0, r3
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	e000ed00 	.word	0xe000ed00

0800434c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	4603      	mov	r3, r0
 8004354:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435a:	2b00      	cmp	r3, #0
 800435c:	db0b      	blt.n	8004376 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	f003 021f 	and.w	r2, r3, #31
 8004364:	4907      	ldr	r1, [pc, #28]	; (8004384 <__NVIC_EnableIRQ+0x38>)
 8004366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436a:	095b      	lsrs	r3, r3, #5
 800436c:	2001      	movs	r0, #1
 800436e:	fa00 f202 	lsl.w	r2, r0, r2
 8004372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	e000e100 	.word	0xe000e100

08004388 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	4603      	mov	r3, r0
 8004390:	6039      	str	r1, [r7, #0]
 8004392:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004398:	2b00      	cmp	r3, #0
 800439a:	db0a      	blt.n	80043b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	490c      	ldr	r1, [pc, #48]	; (80043d4 <__NVIC_SetPriority+0x4c>)
 80043a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a6:	0112      	lsls	r2, r2, #4
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	440b      	add	r3, r1
 80043ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043b0:	e00a      	b.n	80043c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	b2da      	uxtb	r2, r3
 80043b6:	4908      	ldr	r1, [pc, #32]	; (80043d8 <__NVIC_SetPriority+0x50>)
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	3b04      	subs	r3, #4
 80043c0:	0112      	lsls	r2, r2, #4
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	440b      	add	r3, r1
 80043c6:	761a      	strb	r2, [r3, #24]
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	e000e100 	.word	0xe000e100
 80043d8:	e000ed00 	.word	0xe000ed00

080043dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043dc:	b480      	push	{r7}
 80043de:	b089      	sub	sp, #36	; 0x24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f1c3 0307 	rsb	r3, r3, #7
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	bf28      	it	cs
 80043fa:	2304      	movcs	r3, #4
 80043fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	3304      	adds	r3, #4
 8004402:	2b06      	cmp	r3, #6
 8004404:	d902      	bls.n	800440c <NVIC_EncodePriority+0x30>
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	3b03      	subs	r3, #3
 800440a:	e000      	b.n	800440e <NVIC_EncodePriority+0x32>
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43da      	mvns	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	401a      	ands	r2, r3
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	43d9      	mvns	r1, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004434:	4313      	orrs	r3, r2
         );
}
 8004436:	4618      	mov	r0, r3
 8004438:	3724      	adds	r7, #36	; 0x24
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
	...

08004444 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	3b01      	subs	r3, #1
 8004450:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004454:	d301      	bcc.n	800445a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004456:	2301      	movs	r3, #1
 8004458:	e00f      	b.n	800447a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800445a:	4a0a      	ldr	r2, [pc, #40]	; (8004484 <SysTick_Config+0x40>)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3b01      	subs	r3, #1
 8004460:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004462:	210f      	movs	r1, #15
 8004464:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004468:	f7ff ff8e 	bl	8004388 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <SysTick_Config+0x40>)
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004472:	4b04      	ldr	r3, [pc, #16]	; (8004484 <SysTick_Config+0x40>)
 8004474:	2207      	movs	r2, #7
 8004476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	e000e010 	.word	0xe000e010

08004488 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ff29 	bl	80042e8 <__NVIC_SetPriorityGrouping>
}
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}

0800449e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800449e:	b580      	push	{r7, lr}
 80044a0:	b086      	sub	sp, #24
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	4603      	mov	r3, r0
 80044a6:	60b9      	str	r1, [r7, #8]
 80044a8:	607a      	str	r2, [r7, #4]
 80044aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b0:	f7ff ff3e 	bl	8004330 <__NVIC_GetPriorityGrouping>
 80044b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	6978      	ldr	r0, [r7, #20]
 80044bc:	f7ff ff8e 	bl	80043dc <NVIC_EncodePriority>
 80044c0:	4602      	mov	r2, r0
 80044c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c6:	4611      	mov	r1, r2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff5d 	bl	8004388 <__NVIC_SetPriority>
}
 80044ce:	bf00      	nop
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	4603      	mov	r3, r0
 80044de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff ff31 	bl	800434c <__NVIC_EnableIRQ>
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff ffa2 	bl	8004444 <SysTick_Config>
 8004500:	4603      	mov	r3, r0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3708      	adds	r7, #8
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e014      	b.n	8004546 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	791b      	ldrb	r3, [r3, #4]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d105      	bne.n	8004532 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f7fd fe01 	bl	8002134 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	795b      	ldrb	r3, [r3, #5]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_DAC_Start_DMA+0x1e>
 800456a:	2302      	movs	r3, #2
 800456c:	e08e      	b.n	800468c <HAL_DAC_Start_DMA+0x13c>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2201      	movs	r2, #1
 8004572:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2202      	movs	r2, #2
 8004578:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d12a      	bne.n	80045d6 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4a43      	ldr	r2, [pc, #268]	; (8004694 <HAL_DAC_Start_DMA+0x144>)
 8004586:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a42      	ldr	r2, [pc, #264]	; (8004698 <HAL_DAC_Start_DMA+0x148>)
 800458e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a41      	ldr	r2, [pc, #260]	; (800469c <HAL_DAC_Start_DMA+0x14c>)
 8004596:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045a6:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d009      	beq.n	80045c2 <HAL_DAC_Start_DMA+0x72>
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d00c      	beq.n	80045cc <HAL_DAC_Start_DMA+0x7c>
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d000      	beq.n	80045b8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80045b6:	e039      	b.n	800462c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	3308      	adds	r3, #8
 80045be:	617b      	str	r3, [r7, #20]
        break;
 80045c0:	e034      	b.n	800462c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	617b      	str	r3, [r7, #20]
        break;
 80045ca:	e02f      	b.n	800462c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3310      	adds	r3, #16
 80045d2:	617b      	str	r3, [r7, #20]
        break;
 80045d4:	e02a      	b.n	800462c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	4a31      	ldr	r2, [pc, #196]	; (80046a0 <HAL_DAC_Start_DMA+0x150>)
 80045dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	4a30      	ldr	r2, [pc, #192]	; (80046a4 <HAL_DAC_Start_DMA+0x154>)
 80045e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4a2f      	ldr	r2, [pc, #188]	; (80046a8 <HAL_DAC_Start_DMA+0x158>)
 80045ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80045fc:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	2b04      	cmp	r3, #4
 8004602:	d009      	beq.n	8004618 <HAL_DAC_Start_DMA+0xc8>
 8004604:	2b08      	cmp	r3, #8
 8004606:	d00c      	beq.n	8004622 <HAL_DAC_Start_DMA+0xd2>
 8004608:	2b00      	cmp	r3, #0
 800460a:	d000      	beq.n	800460e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800460c:	e00e      	b.n	800462c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	617b      	str	r3, [r7, #20]
        break;
 8004616:	e009      	b.n	800462c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3318      	adds	r3, #24
 800461e:	617b      	str	r3, [r7, #20]
        break;
 8004620:	e004      	b.n	800462c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	331c      	adds	r3, #28
 8004628:	617b      	str	r3, [r7, #20]
        break;
 800462a:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10f      	bne.n	8004652 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004640:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6898      	ldr	r0, [r3, #8]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	f000 fa70 	bl	8004b30 <HAL_DMA_Start_IT>
 8004650:	e00e      	b.n	8004670 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004660:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	68d8      	ldr	r0, [r3, #12]
 8004666:	6879      	ldr	r1, [r7, #4]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	f000 fa60 	bl	8004b30 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6819      	ldr	r1, [r3, #0]
 8004676:	2201      	movs	r2, #1
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	409a      	lsls	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	3718      	adds	r7, #24
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	080048ad 	.word	0x080048ad
 8004698:	080048cf 	.word	0x080048cf
 800469c:	080048eb 	.word	0x080048eb
 80046a0:	08004969 	.word	0x08004969
 80046a4:	0800498b 	.word	0x0800498b
 80046a8:	080049a7 	.word	0x080049a7

080046ac <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	43da      	mvns	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	400a      	ands	r2, r1
 80046d2:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	2201      	movs	r2, #1
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	fa02 f303 	lsl.w	r3, r2, r3
 80046e2:	43da      	mvns	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	400a      	ands	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fa72 	bl	8004be0 <HAL_DMA_Abort>
 80046fc:	4603      	mov	r3, r0
 80046fe:	73fb      	strb	r3, [r7, #15]
 8004700:	e006      	b.n	8004710 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	4618      	mov	r0, r3
 8004708:	f000 fa6a 	bl	8004be0 <HAL_DMA_Abort>
 800470c:	4603      	mov	r3, r0
 800470e:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2204      	movs	r2, #4
 800471a:	711a      	strb	r2, [r3, #4]
 800471c:	e002      	b.n	8004724 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8004724:	7bfb      	ldrb	r3, [r7, #15]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3710      	adds	r7, #16
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b082      	sub	sp, #8
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004744:	d118      	bne.n	8004778 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2204      	movs	r2, #4
 800474a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f043 0201 	orr.w	r2, r3, #1
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004760:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004770:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f843 	bl	80047fe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800477e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004786:	d118      	bne.n	80047ba <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2204      	movs	r2, #4
 800478c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f043 0202 	orr.w	r2, r3, #2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80047b2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f8cd 	bl	8004954 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004812:	b480      	push	{r7}
 8004814:	b087      	sub	sp, #28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	795b      	ldrb	r3, [r3, #5]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <HAL_DAC_ConfigChannel+0x20>
 800482e:	2302      	movs	r3, #2
 8004830:	e036      	b.n	80048a0 <HAL_DAC_ConfigChannel+0x8e>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2202      	movs	r2, #2
 800483c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004846:	f640 72fe 	movw	r2, #4094	; 0xffe
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4013      	ands	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	4313      	orrs	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	22c0      	movs	r2, #192	; 0xc0
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43da      	mvns	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	400a      	ands	r2, r1
 8004890:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2201      	movs	r2, #1
 8004896:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f7ff ff81 	bl	80047c2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2201      	movs	r2, #1
 80048c4:	711a      	strb	r2, [r3, #4]
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f7ff ff7a 	bl	80047d6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80048e2:	bf00      	nop
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b084      	sub	sp, #16
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	f043 0204 	orr.w	r2, r3, #4
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f7ff ff70 	bl	80047ea <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2201      	movs	r2, #1
 800490e:	711a      	strb	r2, [r3, #4]
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f7ff ffce 	bl	8004918 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	711a      	strb	r2, [r3, #4]
}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f7ff ffc7 	bl	800492c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b084      	sub	sp, #16
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b2:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f043 0204 	orr.w	r2, r3, #4
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f7ff ffbd 	bl	8004940 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	711a      	strb	r2, [r3, #4]
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049e0:	f002 fe26 	bl	8007630 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e099      	b.n	8004b24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0201 	bic.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a10:	e00f      	b.n	8004a32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a12:	f002 fe0d 	bl	8007630 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b05      	cmp	r3, #5
 8004a1e:	d908      	bls.n	8004a32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e078      	b.n	8004b24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1e8      	bne.n	8004a12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <HAL_DMA_Init+0x158>)
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d107      	bne.n	8004a9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	4313      	orrs	r3, r2
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f023 0307 	bic.w	r3, r3, #7
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d117      	bne.n	8004af6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00e      	beq.n	8004af6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 fb01 	bl	80050e0 <DMA_CheckFifoParam>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2240      	movs	r2, #64	; 0x40
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004af2:	2301      	movs	r3, #1
 8004af4:	e016      	b.n	8004b24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fab8 	bl	8005074 <DMA_CalcBaseAndBitshift>
 8004b04:	4603      	mov	r3, r0
 8004b06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0c:	223f      	movs	r2, #63	; 0x3f
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3718      	adds	r7, #24
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	f010803f 	.word	0xf010803f

08004b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_DMA_Start_IT+0x26>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e040      	b.n	8004bd8 <HAL_DMA_Start_IT+0xa8>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d12f      	bne.n	8004bca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 fa4a 	bl	8005018 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b88:	223f      	movs	r2, #63	; 0x3f
 8004b8a:	409a      	lsls	r2, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0216 	orr.w	r2, r2, #22
 8004b9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0208 	orr.w	r2, r2, #8
 8004bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	e005      	b.n	8004bd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bee:	f002 fd1f 	bl	8007630 <HAL_GetTick>
 8004bf2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d008      	beq.n	8004c12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2280      	movs	r2, #128	; 0x80
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e052      	b.n	8004cb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f022 0216 	bic.w	r2, r2, #22
 8004c20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695a      	ldr	r2, [r3, #20]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <HAL_DMA_Abort+0x62>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d007      	beq.n	8004c52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 0208 	bic.w	r2, r2, #8
 8004c50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0201 	bic.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c62:	e013      	b.n	8004c8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c64:	f002 fce4 	bl	8007630 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b05      	cmp	r3, #5
 8004c70:	d90c      	bls.n	8004c8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2203      	movs	r2, #3
 8004c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e015      	b.n	8004cb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e4      	bne.n	8004c64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9e:	223f      	movs	r2, #63	; 0x3f
 8004ca0:	409a      	lsls	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d004      	beq.n	8004cde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2280      	movs	r2, #128	; 0x80
 8004cd8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e00c      	b.n	8004cf8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2205      	movs	r2, #5
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0201 	bic.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d10:	4b92      	ldr	r3, [pc, #584]	; (8004f5c <HAL_DMA_IRQHandler+0x258>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a92      	ldr	r2, [pc, #584]	; (8004f60 <HAL_DMA_IRQHandler+0x25c>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	0a9b      	lsrs	r3, r3, #10
 8004d1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2e:	2208      	movs	r2, #8
 8004d30:	409a      	lsls	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01a      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d013      	beq.n	8004d70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0204 	bic.w	r2, r2, #4
 8004d56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	409a      	lsls	r2, r3
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	f043 0201 	orr.w	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d74:	2201      	movs	r2, #1
 8004d76:	409a      	lsls	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d012      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d92:	2201      	movs	r2, #1
 8004d94:	409a      	lsls	r2, r3
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	f043 0202 	orr.w	r2, r3, #2
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004daa:	2204      	movs	r2, #4
 8004dac:	409a      	lsls	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d012      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00b      	beq.n	8004ddc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc8:	2204      	movs	r2, #4
 8004dca:	409a      	lsls	r2, r3
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd4:	f043 0204 	orr.w	r2, r3, #4
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004de0:	2210      	movs	r2, #16
 8004de2:	409a      	lsls	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d043      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d03c      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dfe:	2210      	movs	r2, #16
 8004e00:	409a      	lsls	r2, r3
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d018      	beq.n	8004e46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d108      	bne.n	8004e34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d024      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
 8004e32:	e01f      	b.n	8004e74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01b      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	4798      	blx	r3
 8004e44:	e016      	b.n	8004e74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d107      	bne.n	8004e64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0208 	bic.w	r2, r2, #8
 8004e62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e78:	2220      	movs	r2, #32
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 808e 	beq.w	8004fa2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8086 	beq.w	8004fa2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	409a      	lsls	r2, r3
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b05      	cmp	r3, #5
 8004eac:	d136      	bne.n	8004f1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0216 	bic.w	r2, r2, #22
 8004ebc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695a      	ldr	r2, [r3, #20]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ecc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d103      	bne.n	8004ede <HAL_DMA_IRQHandler+0x1da>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0208 	bic.w	r2, r2, #8
 8004eec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ef2:	223f      	movs	r2, #63	; 0x3f
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d07d      	beq.n	800500e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	4798      	blx	r3
        }
        return;
 8004f1a:	e078      	b.n	800500e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01c      	beq.n	8004f64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d108      	bne.n	8004f4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d030      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	4798      	blx	r3
 8004f48:	e02b      	b.n	8004fa2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d027      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	4798      	blx	r3
 8004f5a:	e022      	b.n	8004fa2 <HAL_DMA_IRQHandler+0x29e>
 8004f5c:	20001238 	.word	0x20001238
 8004f60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10f      	bne.n	8004f92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f022 0210 	bic.w	r2, r2, #16
 8004f80:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d003      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d032      	beq.n	8005010 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d022      	beq.n	8004ffc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2205      	movs	r2, #5
 8004fba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d307      	bcc.n	8004fea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1f2      	bne.n	8004fce <HAL_DMA_IRQHandler+0x2ca>
 8004fe8:	e000      	b.n	8004fec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004fea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d005      	beq.n	8005010 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4798      	blx	r3
 800500c:	e000      	b.n	8005010 <HAL_DMA_IRQHandler+0x30c>
        return;
 800500e:	bf00      	nop
    }
  }
}
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop

08005018 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005034:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d108      	bne.n	8005058 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005056:	e007      	b.n	8005068 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005074:	b480      	push	{r7}
 8005076:	b085      	sub	sp, #20
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	3b10      	subs	r3, #16
 8005084:	4a14      	ldr	r2, [pc, #80]	; (80050d8 <DMA_CalcBaseAndBitshift+0x64>)
 8005086:	fba2 2303 	umull	r2, r3, r2, r3
 800508a:	091b      	lsrs	r3, r3, #4
 800508c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800508e:	4a13      	ldr	r2, [pc, #76]	; (80050dc <DMA_CalcBaseAndBitshift+0x68>)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	461a      	mov	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d909      	bls.n	80050b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	1d1a      	adds	r2, r3, #4
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	659a      	str	r2, [r3, #88]	; 0x58
 80050b4:	e007      	b.n	80050c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050be:	f023 0303 	bic.w	r3, r3, #3
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	aaaaaaab 	.word	0xaaaaaaab
 80050dc:	0800d0cc 	.word	0x0800d0cc

080050e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d11f      	bne.n	800513a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	d855      	bhi.n	80051ac <DMA_CheckFifoParam+0xcc>
 8005100:	a201      	add	r2, pc, #4	; (adr r2, 8005108 <DMA_CheckFifoParam+0x28>)
 8005102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005106:	bf00      	nop
 8005108:	08005119 	.word	0x08005119
 800510c:	0800512b 	.word	0x0800512b
 8005110:	08005119 	.word	0x08005119
 8005114:	080051ad 	.word	0x080051ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d045      	beq.n	80051b0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005128:	e042      	b.n	80051b0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005132:	d13f      	bne.n	80051b4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005138:	e03c      	b.n	80051b4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005142:	d121      	bne.n	8005188 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b03      	cmp	r3, #3
 8005148:	d836      	bhi.n	80051b8 <DMA_CheckFifoParam+0xd8>
 800514a:	a201      	add	r2, pc, #4	; (adr r2, 8005150 <DMA_CheckFifoParam+0x70>)
 800514c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005150:	08005161 	.word	0x08005161
 8005154:	08005167 	.word	0x08005167
 8005158:	08005161 	.word	0x08005161
 800515c:	08005179 	.word	0x08005179
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
      break;
 8005164:	e02f      	b.n	80051c6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d024      	beq.n	80051bc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005176:	e021      	b.n	80051bc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005180:	d11e      	bne.n	80051c0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005186:	e01b      	b.n	80051c0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d902      	bls.n	8005194 <DMA_CheckFifoParam+0xb4>
 800518e:	2b03      	cmp	r3, #3
 8005190:	d003      	beq.n	800519a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005192:	e018      	b.n	80051c6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
      break;
 8005198:	e015      	b.n	80051c6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00e      	beq.n	80051c4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
      break;
 80051aa:	e00b      	b.n	80051c4 <DMA_CheckFifoParam+0xe4>
      break;
 80051ac:	bf00      	nop
 80051ae:	e00a      	b.n	80051c6 <DMA_CheckFifoParam+0xe6>
      break;
 80051b0:	bf00      	nop
 80051b2:	e008      	b.n	80051c6 <DMA_CheckFifoParam+0xe6>
      break;
 80051b4:	bf00      	nop
 80051b6:	e006      	b.n	80051c6 <DMA_CheckFifoParam+0xe6>
      break;
 80051b8:	bf00      	nop
 80051ba:	e004      	b.n	80051c6 <DMA_CheckFifoParam+0xe6>
      break;
 80051bc:	bf00      	nop
 80051be:	e002      	b.n	80051c6 <DMA_CheckFifoParam+0xe6>
      break;   
 80051c0:	bf00      	nop
 80051c2:	e000      	b.n	80051c6 <DMA_CheckFifoParam+0xe6>
      break;
 80051c4:	bf00      	nop
    }
  } 
  
  return status; 
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b089      	sub	sp, #36	; 0x24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051de:	2300      	movs	r3, #0
 80051e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	e177      	b.n	80054e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80051f0:	2201      	movs	r2, #1
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4013      	ands	r3, r2
 8005202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	429a      	cmp	r2, r3
 800520a:	f040 8166 	bne.w	80054da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d00b      	beq.n	800522e <HAL_GPIO_Init+0x5a>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b02      	cmp	r3, #2
 800521c:	d007      	beq.n	800522e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005222:	2b11      	cmp	r3, #17
 8005224:	d003      	beq.n	800522e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b12      	cmp	r3, #18
 800522c:	d130      	bne.n	8005290 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	2203      	movs	r2, #3
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	43db      	mvns	r3, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4313      	orrs	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69ba      	ldr	r2, [r7, #24]
 800525c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005264:	2201      	movs	r2, #1
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	43db      	mvns	r3, r3
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	4013      	ands	r3, r2
 8005272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	f003 0201 	and.w	r2, r3, #1
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	4313      	orrs	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	2203      	movs	r2, #3
 800529c:	fa02 f303 	lsl.w	r3, r2, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	4013      	ands	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	689a      	ldr	r2, [r3, #8]
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d003      	beq.n	80052d0 <HAL_GPIO_Init+0xfc>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	2b12      	cmp	r3, #18
 80052ce:	d123      	bne.n	8005318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	08da      	lsrs	r2, r3, #3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3208      	adds	r2, #8
 80052d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	220f      	movs	r2, #15
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	4013      	ands	r3, r2
 80052f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	4313      	orrs	r3, r2
 8005308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	08da      	lsrs	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3208      	adds	r2, #8
 8005312:	69b9      	ldr	r1, [r7, #24]
 8005314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	2203      	movs	r2, #3
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	43db      	mvns	r3, r3
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	4013      	ands	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 0203 	and.w	r2, r3, #3
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4313      	orrs	r3, r2
 8005344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 80c0 	beq.w	80054da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	4b65      	ldr	r3, [pc, #404]	; (80054f4 <HAL_GPIO_Init+0x320>)
 8005360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005362:	4a64      	ldr	r2, [pc, #400]	; (80054f4 <HAL_GPIO_Init+0x320>)
 8005364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005368:	6453      	str	r3, [r2, #68]	; 0x44
 800536a:	4b62      	ldr	r3, [pc, #392]	; (80054f4 <HAL_GPIO_Init+0x320>)
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005372:	60fb      	str	r3, [r7, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005376:	4a60      	ldr	r2, [pc, #384]	; (80054f8 <HAL_GPIO_Init+0x324>)
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	089b      	lsrs	r3, r3, #2
 800537c:	3302      	adds	r3, #2
 800537e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	220f      	movs	r2, #15
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	43db      	mvns	r3, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4013      	ands	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a57      	ldr	r2, [pc, #348]	; (80054fc <HAL_GPIO_Init+0x328>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d037      	beq.n	8005412 <HAL_GPIO_Init+0x23e>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a56      	ldr	r2, [pc, #344]	; (8005500 <HAL_GPIO_Init+0x32c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d031      	beq.n	800540e <HAL_GPIO_Init+0x23a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a55      	ldr	r2, [pc, #340]	; (8005504 <HAL_GPIO_Init+0x330>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d02b      	beq.n	800540a <HAL_GPIO_Init+0x236>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a54      	ldr	r2, [pc, #336]	; (8005508 <HAL_GPIO_Init+0x334>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d025      	beq.n	8005406 <HAL_GPIO_Init+0x232>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a53      	ldr	r2, [pc, #332]	; (800550c <HAL_GPIO_Init+0x338>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01f      	beq.n	8005402 <HAL_GPIO_Init+0x22e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a52      	ldr	r2, [pc, #328]	; (8005510 <HAL_GPIO_Init+0x33c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d019      	beq.n	80053fe <HAL_GPIO_Init+0x22a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a51      	ldr	r2, [pc, #324]	; (8005514 <HAL_GPIO_Init+0x340>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_GPIO_Init+0x226>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a50      	ldr	r2, [pc, #320]	; (8005518 <HAL_GPIO_Init+0x344>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00d      	beq.n	80053f6 <HAL_GPIO_Init+0x222>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a4f      	ldr	r2, [pc, #316]	; (800551c <HAL_GPIO_Init+0x348>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d007      	beq.n	80053f2 <HAL_GPIO_Init+0x21e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a4e      	ldr	r2, [pc, #312]	; (8005520 <HAL_GPIO_Init+0x34c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d101      	bne.n	80053ee <HAL_GPIO_Init+0x21a>
 80053ea:	2309      	movs	r3, #9
 80053ec:	e012      	b.n	8005414 <HAL_GPIO_Init+0x240>
 80053ee:	230a      	movs	r3, #10
 80053f0:	e010      	b.n	8005414 <HAL_GPIO_Init+0x240>
 80053f2:	2308      	movs	r3, #8
 80053f4:	e00e      	b.n	8005414 <HAL_GPIO_Init+0x240>
 80053f6:	2307      	movs	r3, #7
 80053f8:	e00c      	b.n	8005414 <HAL_GPIO_Init+0x240>
 80053fa:	2306      	movs	r3, #6
 80053fc:	e00a      	b.n	8005414 <HAL_GPIO_Init+0x240>
 80053fe:	2305      	movs	r3, #5
 8005400:	e008      	b.n	8005414 <HAL_GPIO_Init+0x240>
 8005402:	2304      	movs	r3, #4
 8005404:	e006      	b.n	8005414 <HAL_GPIO_Init+0x240>
 8005406:	2303      	movs	r3, #3
 8005408:	e004      	b.n	8005414 <HAL_GPIO_Init+0x240>
 800540a:	2302      	movs	r3, #2
 800540c:	e002      	b.n	8005414 <HAL_GPIO_Init+0x240>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <HAL_GPIO_Init+0x240>
 8005412:	2300      	movs	r3, #0
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	f002 0203 	and.w	r2, r2, #3
 800541a:	0092      	lsls	r2, r2, #2
 800541c:	4093      	lsls	r3, r2
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005424:	4934      	ldr	r1, [pc, #208]	; (80054f8 <HAL_GPIO_Init+0x324>)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	089b      	lsrs	r3, r3, #2
 800542a:	3302      	adds	r3, #2
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005432:	4b3c      	ldr	r3, [pc, #240]	; (8005524 <HAL_GPIO_Init+0x350>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	43db      	mvns	r3, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	4013      	ands	r3, r2
 8005440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005456:	4a33      	ldr	r2, [pc, #204]	; (8005524 <HAL_GPIO_Init+0x350>)
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800545c:	4b31      	ldr	r3, [pc, #196]	; (8005524 <HAL_GPIO_Init+0x350>)
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	43db      	mvns	r3, r3
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4013      	ands	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005480:	4a28      	ldr	r2, [pc, #160]	; (8005524 <HAL_GPIO_Init+0x350>)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005486:	4b27      	ldr	r3, [pc, #156]	; (8005524 <HAL_GPIO_Init+0x350>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	43db      	mvns	r3, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4013      	ands	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054aa:	4a1e      	ldr	r2, [pc, #120]	; (8005524 <HAL_GPIO_Init+0x350>)
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054b0:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <HAL_GPIO_Init+0x350>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	43db      	mvns	r3, r3
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	4013      	ands	r3, r2
 80054be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054d4:	4a13      	ldr	r2, [pc, #76]	; (8005524 <HAL_GPIO_Init+0x350>)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3301      	adds	r3, #1
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2b0f      	cmp	r3, #15
 80054e4:	f67f ae84 	bls.w	80051f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054e8:	bf00      	nop
 80054ea:	3724      	adds	r7, #36	; 0x24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	40023800 	.word	0x40023800
 80054f8:	40013800 	.word	0x40013800
 80054fc:	40020000 	.word	0x40020000
 8005500:	40020400 	.word	0x40020400
 8005504:	40020800 	.word	0x40020800
 8005508:	40020c00 	.word	0x40020c00
 800550c:	40021000 	.word	0x40021000
 8005510:	40021400 	.word	0x40021400
 8005514:	40021800 	.word	0x40021800
 8005518:	40021c00 	.word	0x40021c00
 800551c:	40022000 	.word	0x40022000
 8005520:	40022400 	.word	0x40022400
 8005524:	40013c00 	.word	0x40013c00

08005528 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005536:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	d023      	beq.n	8005592 <HAL_LTDC_IRQHandler+0x6a>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f003 0304 	and.w	r3, r3, #4
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01e      	beq.n	8005592 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0204 	bic.w	r2, r2, #4
 8005562:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2204      	movs	r2, #4
 800556a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005572:	f043 0201 	orr.w	r2, r3, #1
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2204      	movs	r2, #4
 8005580:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f86f 	bl	8005670 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d023      	beq.n	80055e4 <HAL_LTDC_IRQHandler+0xbc>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d01e      	beq.n	80055e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0202 	bic.w	r2, r2, #2
 80055b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2202      	movs	r2, #2
 80055bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055c4:	f043 0202 	orr.w	r2, r3, #2
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2204      	movs	r2, #4
 80055d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f846 	bl	8005670 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d01b      	beq.n	8005626 <HAL_LTDC_IRQHandler+0xfe>
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d016      	beq.n	8005626 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f022 0201 	bic.w	r2, r2, #1
 8005606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2201      	movs	r2, #1
 800560e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f82f 	bl	8005684 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f003 0308 	and.w	r3, r3, #8
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01b      	beq.n	8005668 <HAL_LTDC_IRQHandler+0x140>
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 0308 	and.w	r3, r3, #8
 8005636:	2b00      	cmp	r3, #0
 8005638:	d016      	beq.n	8005668 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 0208 	bic.w	r2, r2, #8
 8005648:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2208      	movs	r2, #8
 8005650:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f818 	bl	8005698 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005668:	bf00      	nop
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80056b6:	2300      	movs	r3, #0
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	4b20      	ldr	r3, [pc, #128]	; (800573c <HAL_PWREx_EnableOverDrive+0x90>)
 80056bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056be:	4a1f      	ldr	r2, [pc, #124]	; (800573c <HAL_PWREx_EnableOverDrive+0x90>)
 80056c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c4:	6413      	str	r3, [r2, #64]	; 0x40
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <HAL_PWREx_EnableOverDrive+0x90>)
 80056c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80056d2:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <HAL_PWREx_EnableOverDrive+0x94>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056d8:	f001 ffaa 	bl	8007630 <HAL_GetTick>
 80056dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056de:	e009      	b.n	80056f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80056e0:	f001 ffa6 	bl	8007630 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ee:	d901      	bls.n	80056f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e01f      	b.n	8005734 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80056f4:	4b13      	ldr	r3, [pc, #76]	; (8005744 <HAL_PWREx_EnableOverDrive+0x98>)
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005700:	d1ee      	bne.n	80056e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005702:	4b11      	ldr	r3, [pc, #68]	; (8005748 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005704:	2201      	movs	r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005708:	f001 ff92 	bl	8007630 <HAL_GetTick>
 800570c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800570e:	e009      	b.n	8005724 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005710:	f001 ff8e 	bl	8007630 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800571e:	d901      	bls.n	8005724 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e007      	b.n	8005734 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005724:	4b07      	ldr	r3, [pc, #28]	; (8005744 <HAL_PWREx_EnableOverDrive+0x98>)
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005730:	d1ee      	bne.n	8005710 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	40023800 	.word	0x40023800
 8005740:	420e0040 	.word	0x420e0040
 8005744:	40007000 	.word	0x40007000
 8005748:	420e0044 	.word	0x420e0044

0800574c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e25b      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d075      	beq.n	8005856 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800576a:	4ba3      	ldr	r3, [pc, #652]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b04      	cmp	r3, #4
 8005774:	d00c      	beq.n	8005790 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005776:	4ba0      	ldr	r3, [pc, #640]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800577e:	2b08      	cmp	r3, #8
 8005780:	d112      	bne.n	80057a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005782:	4b9d      	ldr	r3, [pc, #628]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800578a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800578e:	d10b      	bne.n	80057a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005790:	4b99      	ldr	r3, [pc, #612]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d05b      	beq.n	8005854 <HAL_RCC_OscConfig+0x108>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d157      	bne.n	8005854 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e236      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b0:	d106      	bne.n	80057c0 <HAL_RCC_OscConfig+0x74>
 80057b2:	4b91      	ldr	r3, [pc, #580]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a90      	ldr	r2, [pc, #576]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e01d      	b.n	80057fc <HAL_RCC_OscConfig+0xb0>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057c8:	d10c      	bne.n	80057e4 <HAL_RCC_OscConfig+0x98>
 80057ca:	4b8b      	ldr	r3, [pc, #556]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a8a      	ldr	r2, [pc, #552]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80057d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	4b88      	ldr	r3, [pc, #544]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a87      	ldr	r2, [pc, #540]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80057dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	e00b      	b.n	80057fc <HAL_RCC_OscConfig+0xb0>
 80057e4:	4b84      	ldr	r3, [pc, #528]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a83      	ldr	r2, [pc, #524]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80057ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ee:	6013      	str	r3, [r2, #0]
 80057f0:	4b81      	ldr	r3, [pc, #516]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a80      	ldr	r2, [pc, #512]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80057f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d013      	beq.n	800582c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005804:	f001 ff14 	bl	8007630 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800580c:	f001 ff10 	bl	8007630 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b64      	cmp	r3, #100	; 0x64
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e1fb      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800581e:	4b76      	ldr	r3, [pc, #472]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0f0      	beq.n	800580c <HAL_RCC_OscConfig+0xc0>
 800582a:	e014      	b.n	8005856 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582c:	f001 ff00 	bl	8007630 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005834:	f001 fefc 	bl	8007630 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b64      	cmp	r3, #100	; 0x64
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e1e7      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005846:	4b6c      	ldr	r3, [pc, #432]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <HAL_RCC_OscConfig+0xe8>
 8005852:	e000      	b.n	8005856 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d063      	beq.n	800592a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005862:	4b65      	ldr	r3, [pc, #404]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00b      	beq.n	8005886 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800586e:	4b62      	ldr	r3, [pc, #392]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005876:	2b08      	cmp	r3, #8
 8005878:	d11c      	bne.n	80058b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800587a:	4b5f      	ldr	r3, [pc, #380]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d116      	bne.n	80058b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005886:	4b5c      	ldr	r3, [pc, #368]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	d005      	beq.n	800589e <HAL_RCC_OscConfig+0x152>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d001      	beq.n	800589e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e1bb      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800589e:	4b56      	ldr	r3, [pc, #344]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	4952      	ldr	r1, [pc, #328]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80058ae:	4313      	orrs	r3, r2
 80058b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058b2:	e03a      	b.n	800592a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d020      	beq.n	80058fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058bc:	4b4f      	ldr	r3, [pc, #316]	; (80059fc <HAL_RCC_OscConfig+0x2b0>)
 80058be:	2201      	movs	r2, #1
 80058c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c2:	f001 feb5 	bl	8007630 <HAL_GetTick>
 80058c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c8:	e008      	b.n	80058dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058ca:	f001 feb1 	bl	8007630 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e19c      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058dc:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0f0      	beq.n	80058ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058e8:	4b43      	ldr	r3, [pc, #268]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	4940      	ldr	r1, [pc, #256]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	600b      	str	r3, [r1, #0]
 80058fc:	e015      	b.n	800592a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058fe:	4b3f      	ldr	r3, [pc, #252]	; (80059fc <HAL_RCC_OscConfig+0x2b0>)
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005904:	f001 fe94 	bl	8007630 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800590c:	f001 fe90 	bl	8007630 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e17b      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800591e:	4b36      	ldr	r3, [pc, #216]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1f0      	bne.n	800590c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d030      	beq.n	8005998 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d016      	beq.n	800596c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800593e:	4b30      	ldr	r3, [pc, #192]	; (8005a00 <HAL_RCC_OscConfig+0x2b4>)
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005944:	f001 fe74 	bl	8007630 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800594c:	f001 fe70 	bl	8007630 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e15b      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800595e:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 8005960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0f0      	beq.n	800594c <HAL_RCC_OscConfig+0x200>
 800596a:	e015      	b.n	8005998 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800596c:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <HAL_RCC_OscConfig+0x2b4>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005972:	f001 fe5d 	bl	8007630 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800597a:	f001 fe59 	bl	8007630 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e144      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800598c:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 800598e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f0      	bne.n	800597a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80a0 	beq.w	8005ae6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059a6:	2300      	movs	r3, #0
 80059a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059aa:	4b13      	ldr	r3, [pc, #76]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80059ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
 80059ba:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059be:	4a0e      	ldr	r2, [pc, #56]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80059c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059c4:	6413      	str	r3, [r2, #64]	; 0x40
 80059c6:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <HAL_RCC_OscConfig+0x2ac>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059ce:	60bb      	str	r3, [r7, #8]
 80059d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059d2:	2301      	movs	r3, #1
 80059d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <HAL_RCC_OscConfig+0x2b8>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d121      	bne.n	8005a26 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059e2:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <HAL_RCC_OscConfig+0x2b8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a07      	ldr	r2, [pc, #28]	; (8005a04 <HAL_RCC_OscConfig+0x2b8>)
 80059e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ee:	f001 fe1f 	bl	8007630 <HAL_GetTick>
 80059f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059f4:	e011      	b.n	8005a1a <HAL_RCC_OscConfig+0x2ce>
 80059f6:	bf00      	nop
 80059f8:	40023800 	.word	0x40023800
 80059fc:	42470000 	.word	0x42470000
 8005a00:	42470e80 	.word	0x42470e80
 8005a04:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a08:	f001 fe12 	bl	8007630 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e0fd      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a1a:	4b81      	ldr	r3, [pc, #516]	; (8005c20 <HAL_RCC_OscConfig+0x4d4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0f0      	beq.n	8005a08 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d106      	bne.n	8005a3c <HAL_RCC_OscConfig+0x2f0>
 8005a2e:	4b7d      	ldr	r3, [pc, #500]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a32:	4a7c      	ldr	r2, [pc, #496]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3a:	e01c      	b.n	8005a76 <HAL_RCC_OscConfig+0x32a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	2b05      	cmp	r3, #5
 8005a42:	d10c      	bne.n	8005a5e <HAL_RCC_OscConfig+0x312>
 8005a44:	4b77      	ldr	r3, [pc, #476]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a48:	4a76      	ldr	r2, [pc, #472]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005a4a:	f043 0304 	orr.w	r3, r3, #4
 8005a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a50:	4b74      	ldr	r3, [pc, #464]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a54:	4a73      	ldr	r2, [pc, #460]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005a56:	f043 0301 	orr.w	r3, r3, #1
 8005a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a5c:	e00b      	b.n	8005a76 <HAL_RCC_OscConfig+0x32a>
 8005a5e:	4b71      	ldr	r3, [pc, #452]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a62:	4a70      	ldr	r2, [pc, #448]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	6713      	str	r3, [r2, #112]	; 0x70
 8005a6a:	4b6e      	ldr	r3, [pc, #440]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	4a6d      	ldr	r2, [pc, #436]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005a70:	f023 0304 	bic.w	r3, r3, #4
 8005a74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d015      	beq.n	8005aaa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7e:	f001 fdd7 	bl	8007630 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a84:	e00a      	b.n	8005a9c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a86:	f001 fdd3 	bl	8007630 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e0bc      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a9c:	4b61      	ldr	r3, [pc, #388]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0ee      	beq.n	8005a86 <HAL_RCC_OscConfig+0x33a>
 8005aa8:	e014      	b.n	8005ad4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005aaa:	f001 fdc1 	bl	8007630 <HAL_GetTick>
 8005aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab0:	e00a      	b.n	8005ac8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ab2:	f001 fdbd 	bl	8007630 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e0a6      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac8:	4b56      	ldr	r3, [pc, #344]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005acc:	f003 0302 	and.w	r3, r3, #2
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1ee      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d105      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ada:	4b52      	ldr	r3, [pc, #328]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ade:	4a51      	ldr	r2, [pc, #324]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 8092 	beq.w	8005c14 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005af0:	4b4c      	ldr	r3, [pc, #304]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 030c 	and.w	r3, r3, #12
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d05c      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d141      	bne.n	8005b88 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b04:	4b48      	ldr	r3, [pc, #288]	; (8005c28 <HAL_RCC_OscConfig+0x4dc>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0a:	f001 fd91 	bl	8007630 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b10:	e008      	b.n	8005b24 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b12:	f001 fd8d 	bl	8007630 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d901      	bls.n	8005b24 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e078      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b24:	4b3f      	ldr	r3, [pc, #252]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1f0      	bne.n	8005b12 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	69da      	ldr	r2, [r3, #28]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b3e:	019b      	lsls	r3, r3, #6
 8005b40:	431a      	orrs	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	061b      	lsls	r3, r3, #24
 8005b54:	4933      	ldr	r1, [pc, #204]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b5a:	4b33      	ldr	r3, [pc, #204]	; (8005c28 <HAL_RCC_OscConfig+0x4dc>)
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b60:	f001 fd66 	bl	8007630 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b68:	f001 fd62 	bl	8007630 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e04d      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b7a:	4b2a      	ldr	r3, [pc, #168]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x41c>
 8005b86:	e045      	b.n	8005c14 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b88:	4b27      	ldr	r3, [pc, #156]	; (8005c28 <HAL_RCC_OscConfig+0x4dc>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b8e:	f001 fd4f 	bl	8007630 <HAL_GetTick>
 8005b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b94:	e008      	b.n	8005ba8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b96:	f001 fd4b 	bl	8007630 <HAL_GetTick>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	1ad3      	subs	r3, r2, r3
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e036      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba8:	4b1e      	ldr	r3, [pc, #120]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f0      	bne.n	8005b96 <HAL_RCC_OscConfig+0x44a>
 8005bb4:	e02e      	b.n	8005c14 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e029      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bc2:	4b18      	ldr	r3, [pc, #96]	; (8005c24 <HAL_RCC_OscConfig+0x4d8>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69db      	ldr	r3, [r3, #28]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d11c      	bne.n	8005c10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d115      	bne.n	8005c10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bea:	4013      	ands	r3, r2
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d10d      	bne.n	8005c10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d106      	bne.n	8005c10 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d001      	beq.n	8005c14 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e000      	b.n	8005c16 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	40007000 	.word	0x40007000
 8005c24:	40023800 	.word	0x40023800
 8005c28:	42470060 	.word	0x42470060

08005c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e0cc      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c40:	4b68      	ldr	r3, [pc, #416]	; (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d90c      	bls.n	8005c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c4e:	4b65      	ldr	r3, [pc, #404]	; (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c56:	4b63      	ldr	r3, [pc, #396]	; (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 030f 	and.w	r3, r3, #15
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d001      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e0b8      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d020      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d005      	beq.n	8005c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c80:	4b59      	ldr	r3, [pc, #356]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	4a58      	ldr	r2, [pc, #352]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0308 	and.w	r3, r3, #8
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d005      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c98:	4b53      	ldr	r3, [pc, #332]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	4a52      	ldr	r2, [pc, #328]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ca4:	4b50      	ldr	r3, [pc, #320]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	494d      	ldr	r1, [pc, #308]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d044      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d107      	bne.n	8005cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cca:	4b47      	ldr	r3, [pc, #284]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d119      	bne.n	8005d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e07f      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d003      	beq.n	8005cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d107      	bne.n	8005cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cea:	4b3f      	ldr	r3, [pc, #252]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d109      	bne.n	8005d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e06f      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cfa:	4b3b      	ldr	r3, [pc, #236]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e067      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d0a:	4b37      	ldr	r3, [pc, #220]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f023 0203 	bic.w	r2, r3, #3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	4934      	ldr	r1, [pc, #208]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d1c:	f001 fc88 	bl	8007630 <HAL_GetTick>
 8005d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d22:	e00a      	b.n	8005d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d24:	f001 fc84 	bl	8007630 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e04f      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3a:	4b2b      	ldr	r3, [pc, #172]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 020c 	and.w	r2, r3, #12
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d1eb      	bne.n	8005d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d4c:	4b25      	ldr	r3, [pc, #148]	; (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d20c      	bcs.n	8005d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d5a:	4b22      	ldr	r3, [pc, #136]	; (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d62:	4b20      	ldr	r3, [pc, #128]	; (8005de4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 030f 	and.w	r3, r3, #15
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d001      	beq.n	8005d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e032      	b.n	8005dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d008      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d80:	4b19      	ldr	r3, [pc, #100]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	4916      	ldr	r1, [pc, #88]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0308 	and.w	r3, r3, #8
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d9e:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	490e      	ldr	r1, [pc, #56]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005db2:	f000 f821 	bl	8005df8 <HAL_RCC_GetSysClockFreq>
 8005db6:	4601      	mov	r1, r0
 8005db8:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <HAL_RCC_ClockConfig+0x1bc>)
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	091b      	lsrs	r3, r3, #4
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	4a0a      	ldr	r2, [pc, #40]	; (8005dec <HAL_RCC_ClockConfig+0x1c0>)
 8005dc4:	5cd3      	ldrb	r3, [r2, r3]
 8005dc6:	fa21 f303 	lsr.w	r3, r1, r3
 8005dca:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <HAL_RCC_ClockConfig+0x1c4>)
 8005dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005dce:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fd fe5e 	bl	8003a94 <HAL_InitTick>

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40023c00 	.word	0x40023c00
 8005de8:	40023800 	.word	0x40023800
 8005dec:	0800d0b4 	.word	0x0800d0b4
 8005df0:	20001238 	.word	0x20001238
 8005df4:	2000123c 	.word	0x2000123c

08005df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	2300      	movs	r3, #0
 8005e08:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e0e:	4b63      	ldr	r3, [pc, #396]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f003 030c 	and.w	r3, r3, #12
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d007      	beq.n	8005e2a <HAL_RCC_GetSysClockFreq+0x32>
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d008      	beq.n	8005e30 <HAL_RCC_GetSysClockFreq+0x38>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 80b4 	bne.w	8005f8c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e24:	4b5e      	ldr	r3, [pc, #376]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e26:	60bb      	str	r3, [r7, #8]
       break;
 8005e28:	e0b3      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e2a:	4b5e      	ldr	r3, [pc, #376]	; (8005fa4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005e2c:	60bb      	str	r3, [r7, #8]
      break;
 8005e2e:	e0b0      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e30:	4b5a      	ldr	r3, [pc, #360]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e38:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e3a:	4b58      	ldr	r3, [pc, #352]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d04a      	beq.n	8005edc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e46:	4b55      	ldr	r3, [pc, #340]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	099b      	lsrs	r3, r3, #6
 8005e4c:	f04f 0400 	mov.w	r4, #0
 8005e50:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e54:	f04f 0200 	mov.w	r2, #0
 8005e58:	ea03 0501 	and.w	r5, r3, r1
 8005e5c:	ea04 0602 	and.w	r6, r4, r2
 8005e60:	4629      	mov	r1, r5
 8005e62:	4632      	mov	r2, r6
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	f04f 0400 	mov.w	r4, #0
 8005e6c:	0154      	lsls	r4, r2, #5
 8005e6e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e72:	014b      	lsls	r3, r1, #5
 8005e74:	4619      	mov	r1, r3
 8005e76:	4622      	mov	r2, r4
 8005e78:	1b49      	subs	r1, r1, r5
 8005e7a:	eb62 0206 	sbc.w	r2, r2, r6
 8005e7e:	f04f 0300 	mov.w	r3, #0
 8005e82:	f04f 0400 	mov.w	r4, #0
 8005e86:	0194      	lsls	r4, r2, #6
 8005e88:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005e8c:	018b      	lsls	r3, r1, #6
 8005e8e:	1a5b      	subs	r3, r3, r1
 8005e90:	eb64 0402 	sbc.w	r4, r4, r2
 8005e94:	f04f 0100 	mov.w	r1, #0
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	00e2      	lsls	r2, r4, #3
 8005e9e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ea2:	00d9      	lsls	r1, r3, #3
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4614      	mov	r4, r2
 8005ea8:	195b      	adds	r3, r3, r5
 8005eaa:	eb44 0406 	adc.w	r4, r4, r6
 8005eae:	f04f 0100 	mov.w	r1, #0
 8005eb2:	f04f 0200 	mov.w	r2, #0
 8005eb6:	0262      	lsls	r2, r4, #9
 8005eb8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005ebc:	0259      	lsls	r1, r3, #9
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4614      	mov	r4, r2
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	4621      	mov	r1, r4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f04f 0400 	mov.w	r4, #0
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4623      	mov	r3, r4
 8005ed0:	f7fa feea 	bl	8000ca8 <__aeabi_uldivmod>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	e049      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005edc:	4b2f      	ldr	r3, [pc, #188]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	099b      	lsrs	r3, r3, #6
 8005ee2:	f04f 0400 	mov.w	r4, #0
 8005ee6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005eea:	f04f 0200 	mov.w	r2, #0
 8005eee:	ea03 0501 	and.w	r5, r3, r1
 8005ef2:	ea04 0602 	and.w	r6, r4, r2
 8005ef6:	4629      	mov	r1, r5
 8005ef8:	4632      	mov	r2, r6
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	f04f 0400 	mov.w	r4, #0
 8005f02:	0154      	lsls	r4, r2, #5
 8005f04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f08:	014b      	lsls	r3, r1, #5
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4622      	mov	r2, r4
 8005f0e:	1b49      	subs	r1, r1, r5
 8005f10:	eb62 0206 	sbc.w	r2, r2, r6
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	f04f 0400 	mov.w	r4, #0
 8005f1c:	0194      	lsls	r4, r2, #6
 8005f1e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f22:	018b      	lsls	r3, r1, #6
 8005f24:	1a5b      	subs	r3, r3, r1
 8005f26:	eb64 0402 	sbc.w	r4, r4, r2
 8005f2a:	f04f 0100 	mov.w	r1, #0
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	00e2      	lsls	r2, r4, #3
 8005f34:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f38:	00d9      	lsls	r1, r3, #3
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4614      	mov	r4, r2
 8005f3e:	195b      	adds	r3, r3, r5
 8005f40:	eb44 0406 	adc.w	r4, r4, r6
 8005f44:	f04f 0100 	mov.w	r1, #0
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	02a2      	lsls	r2, r4, #10
 8005f4e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005f52:	0299      	lsls	r1, r3, #10
 8005f54:	460b      	mov	r3, r1
 8005f56:	4614      	mov	r4, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	4621      	mov	r1, r4
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f04f 0400 	mov.w	r4, #0
 8005f62:	461a      	mov	r2, r3
 8005f64:	4623      	mov	r3, r4
 8005f66:	f7fa fe9f 	bl	8000ca8 <__aeabi_uldivmod>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	460c      	mov	r4, r1
 8005f6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f70:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	0c1b      	lsrs	r3, r3, #16
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f88:	60bb      	str	r3, [r7, #8]
      break;
 8005f8a:	e002      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f8c:	4b04      	ldr	r3, [pc, #16]	; (8005fa0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005f8e:	60bb      	str	r3, [r7, #8]
      break;
 8005f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f92:	68bb      	ldr	r3, [r7, #8]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	00f42400 	.word	0x00f42400
 8005fa4:	007a1200 	.word	0x007a1200

08005fa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fac:	4b03      	ldr	r3, [pc, #12]	; (8005fbc <HAL_RCC_GetHCLKFreq+0x14>)
 8005fae:	681b      	ldr	r3, [r3, #0]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20001238 	.word	0x20001238

08005fc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005fc4:	f7ff fff0 	bl	8005fa8 <HAL_RCC_GetHCLKFreq>
 8005fc8:	4601      	mov	r1, r0
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	0a9b      	lsrs	r3, r3, #10
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	4a03      	ldr	r2, [pc, #12]	; (8005fe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fd6:	5cd3      	ldrb	r3, [r2, r3]
 8005fd8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	40023800 	.word	0x40023800
 8005fe4:	0800d0c4 	.word	0x0800d0c4

08005fe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005fec:	f7ff ffdc 	bl	8005fa8 <HAL_RCC_GetHCLKFreq>
 8005ff0:	4601      	mov	r1, r0
 8005ff2:	4b05      	ldr	r3, [pc, #20]	; (8006008 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	0b5b      	lsrs	r3, r3, #13
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	4a03      	ldr	r2, [pc, #12]	; (800600c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ffe:	5cd3      	ldrb	r3, [r2, r3]
 8006000:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006004:	4618      	mov	r0, r3
 8006006:	bd80      	pop	{r7, pc}
 8006008:	40023800 	.word	0x40023800
 800600c:	0800d0c4 	.word	0x0800d0c4

08006010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10b      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006034:	2b00      	cmp	r3, #0
 8006036:	d105      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006040:	2b00      	cmp	r3, #0
 8006042:	d075      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006044:	4bad      	ldr	r3, [pc, #692]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006046:	2200      	movs	r2, #0
 8006048:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800604a:	f001 faf1 	bl	8007630 <HAL_GetTick>
 800604e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006050:	e008      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006052:	f001 faed 	bl	8007630 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d901      	bls.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e18b      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006064:	4ba6      	ldr	r3, [pc, #664]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1f0      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d009      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	019a      	lsls	r2, r3, #6
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	071b      	lsls	r3, r3, #28
 8006088:	499d      	ldr	r1, [pc, #628]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d01f      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800609c:	4b98      	ldr	r3, [pc, #608]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800609e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060a2:	0f1b      	lsrs	r3, r3, #28
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	019a      	lsls	r2, r3, #6
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	061b      	lsls	r3, r3, #24
 80060b6:	431a      	orrs	r2, r3
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	071b      	lsls	r3, r3, #28
 80060bc:	4990      	ldr	r1, [pc, #576]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80060c4:	4b8e      	ldr	r3, [pc, #568]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060ca:	f023 021f 	bic.w	r2, r3, #31
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	498a      	ldr	r1, [pc, #552]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	019a      	lsls	r2, r3, #6
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	061b      	lsls	r3, r3, #24
 80060f4:	431a      	orrs	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	071b      	lsls	r3, r3, #28
 80060fc:	4980      	ldr	r1, [pc, #512]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006104:	4b7d      	ldr	r3, [pc, #500]	; (80062fc <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8006106:	2201      	movs	r2, #1
 8006108:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800610a:	f001 fa91 	bl	8007630 <HAL_GetTick>
 800610e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006110:	e008      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006112:	f001 fa8d 	bl	8007630 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d901      	bls.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e12b      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006124:	4b76      	ldr	r3, [pc, #472]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d0f0      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d105      	bne.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006144:	2b00      	cmp	r3, #0
 8006146:	d079      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006148:	4b6e      	ldr	r3, [pc, #440]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800614e:	f001 fa6f 	bl	8007630 <HAL_GetTick>
 8006152:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006154:	e008      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006156:	f001 fa6b 	bl	8007630 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e109      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006168:	4b65      	ldr	r3, [pc, #404]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006174:	d0ef      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b00      	cmp	r3, #0
 8006180:	d020      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006182:	4b5f      	ldr	r3, [pc, #380]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006188:	0f1b      	lsrs	r3, r3, #28
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	019a      	lsls	r2, r3, #6
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	061b      	lsls	r3, r3, #24
 800619c:	431a      	orrs	r2, r3
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	071b      	lsls	r3, r3, #28
 80061a2:	4957      	ldr	r1, [pc, #348]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061a4:	4313      	orrs	r3, r2
 80061a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80061aa:	4b55      	ldr	r3, [pc, #340]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	4950      	ldr	r1, [pc, #320]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01e      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80061d0:	4b4b      	ldr	r3, [pc, #300]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d6:	0e1b      	lsrs	r3, r3, #24
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	019a      	lsls	r2, r3, #6
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	061b      	lsls	r3, r3, #24
 80061e8:	431a      	orrs	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	071b      	lsls	r3, r3, #28
 80061f0:	4943      	ldr	r1, [pc, #268]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80061f8:	4b41      	ldr	r3, [pc, #260]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80061fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	493e      	ldr	r1, [pc, #248]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800620e:	4b3d      	ldr	r3, [pc, #244]	; (8006304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006210:	2201      	movs	r2, #1
 8006212:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006214:	f001 fa0c 	bl	8007630 <HAL_GetTick>
 8006218:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800621a:	e008      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800621c:	f001 fa08 	bl	8007630 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e0a6      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800622e:	4b34      	ldr	r3, [pc, #208]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800623a:	d1ef      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 808d 	beq.w	8006364 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
 800624e:	4b2c      	ldr	r3, [pc, #176]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006252:	4a2b      	ldr	r2, [pc, #172]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006258:	6413      	str	r3, [r2, #64]	; 0x40
 800625a:	4b29      	ldr	r3, [pc, #164]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006266:	4b28      	ldr	r3, [pc, #160]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a27      	ldr	r2, [pc, #156]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800626c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006270:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006272:	f001 f9dd 	bl	8007630 <HAL_GetTick>
 8006276:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006278:	e008      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800627a:	f001 f9d9 	bl	8007630 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e077      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800628c:	4b1e      	ldr	r3, [pc, #120]	; (8006308 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006294:	2b00      	cmp	r3, #0
 8006296:	d0f0      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006298:	4b19      	ldr	r3, [pc, #100]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800629a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d039      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d032      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062b6:	4b12      	ldr	r3, [pc, #72]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062c0:	4b12      	ldr	r3, [pc, #72]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062c6:	4b11      	ldr	r3, [pc, #68]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062cc:	4a0c      	ldr	r2, [pc, #48]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062d2:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80062d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d11e      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80062de:	f001 f9a7 	bl	8007630 <HAL_GetTick>
 80062e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e4:	e014      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062e6:	f001 f9a3 	bl	8007630 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d90b      	bls.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 80062f8:	2303      	movs	r3, #3
 80062fa:	e03f      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80062fc:	42470068 	.word	0x42470068
 8006300:	40023800 	.word	0x40023800
 8006304:	42470070 	.word	0x42470070
 8006308:	40007000 	.word	0x40007000
 800630c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006310:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0e4      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006320:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006328:	d10d      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800632a:	4b16      	ldr	r3, [pc, #88]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800633a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633e:	4911      	ldr	r1, [pc, #68]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006340:	4313      	orrs	r3, r2
 8006342:	608b      	str	r3, [r1, #8]
 8006344:	e005      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006346:	4b0f      	ldr	r3, [pc, #60]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	4a0e      	ldr	r2, [pc, #56]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800634c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006350:	6093      	str	r3, [r2, #8]
 8006352:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006354:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800635e:	4909      	ldr	r1, [pc, #36]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006360:	4313      	orrs	r3, r2
 8006362:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006376:	4b04      	ldr	r3, [pc, #16]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006378:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40023800 	.word	0x40023800
 8006388:	424711e0 	.word	0x424711e0

0800638c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e01d      	b.n	80063da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fd fa2c 	bl	8003810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4619      	mov	r1, r3
 80063ca:	4610      	mov	r0, r2
 80063cc:	f000 f968 	bl	80066a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b085      	sub	sp, #20
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68da      	ldr	r2, [r3, #12]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f042 0201 	orr.w	r2, r2, #1
 80063f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2b06      	cmp	r3, #6
 800640a:	d007      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f042 0201 	orr.w	r2, r2, #1
 800641a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b02      	cmp	r3, #2
 800643e:	d122      	bne.n	8006486 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b02      	cmp	r3, #2
 800644c:	d11b      	bne.n	8006486 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f06f 0202 	mvn.w	r2, #2
 8006456:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	2b00      	cmp	r3, #0
 800646a:	d003      	beq.n	8006474 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f8f8 	bl	8006662 <HAL_TIM_IC_CaptureCallback>
 8006472:	e005      	b.n	8006480 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8ea 	bl	800664e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f8fb 	bl	8006676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b04      	cmp	r3, #4
 8006492:	d122      	bne.n	80064da <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f003 0304 	and.w	r3, r3, #4
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d11b      	bne.n	80064da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f06f 0204 	mvn.w	r2, #4
 80064aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f8ce 	bl	8006662 <HAL_TIM_IC_CaptureCallback>
 80064c6:	e005      	b.n	80064d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 f8c0 	bl	800664e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f8d1 	bl	8006676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	f003 0308 	and.w	r3, r3, #8
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d122      	bne.n	800652e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b08      	cmp	r3, #8
 80064f4:	d11b      	bne.n	800652e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f06f 0208 	mvn.w	r2, #8
 80064fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2204      	movs	r2, #4
 8006504:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	f003 0303 	and.w	r3, r3, #3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f8a4 	bl	8006662 <HAL_TIM_IC_CaptureCallback>
 800651a:	e005      	b.n	8006528 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f896 	bl	800664e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f8a7 	bl	8006676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b10      	cmp	r3, #16
 800653a:	d122      	bne.n	8006582 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	2b10      	cmp	r3, #16
 8006548:	d11b      	bne.n	8006582 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f06f 0210 	mvn.w	r2, #16
 8006552:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2208      	movs	r2, #8
 8006558:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f87a 	bl	8006662 <HAL_TIM_IC_CaptureCallback>
 800656e:	e005      	b.n	800657c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f86c 	bl	800664e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f87d 	bl	8006676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b01      	cmp	r3, #1
 800658e:	d10e      	bne.n	80065ae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b01      	cmp	r3, #1
 800659c:	d107      	bne.n	80065ae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f06f 0201 	mvn.w	r2, #1
 80065a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 f846 	bl	800663a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b8:	2b80      	cmp	r3, #128	; 0x80
 80065ba:	d10e      	bne.n	80065da <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065c6:	2b80      	cmp	r3, #128	; 0x80
 80065c8:	d107      	bne.n	80065da <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f989 	bl	80068ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	d10e      	bne.n	8006606 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	d107      	bne.n	8006606 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f842 	bl	800668a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f003 0320 	and.w	r3, r3, #32
 8006610:	2b20      	cmp	r3, #32
 8006612:	d10e      	bne.n	8006632 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b20      	cmp	r3, #32
 8006620:	d107      	bne.n	8006632 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f06f 0220 	mvn.w	r2, #32
 800662a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f953 	bl	80068d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006632:	bf00      	nop
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006642:	bf00      	nop
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800668a:	b480      	push	{r7}
 800668c:	b083      	sub	sp, #12
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
	...

080066a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a40      	ldr	r2, [pc, #256]	; (80067b4 <TIM_Base_SetConfig+0x114>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d013      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066be:	d00f      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a3d      	ldr	r2, [pc, #244]	; (80067b8 <TIM_Base_SetConfig+0x118>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d00b      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a3c      	ldr	r2, [pc, #240]	; (80067bc <TIM_Base_SetConfig+0x11c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d007      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a3b      	ldr	r2, [pc, #236]	; (80067c0 <TIM_Base_SetConfig+0x120>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d003      	beq.n	80066e0 <TIM_Base_SetConfig+0x40>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a3a      	ldr	r2, [pc, #232]	; (80067c4 <TIM_Base_SetConfig+0x124>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d108      	bne.n	80066f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a2f      	ldr	r2, [pc, #188]	; (80067b4 <TIM_Base_SetConfig+0x114>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d02b      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006700:	d027      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a2c      	ldr	r2, [pc, #176]	; (80067b8 <TIM_Base_SetConfig+0x118>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d023      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a2b      	ldr	r2, [pc, #172]	; (80067bc <TIM_Base_SetConfig+0x11c>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d01f      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a2a      	ldr	r2, [pc, #168]	; (80067c0 <TIM_Base_SetConfig+0x120>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d01b      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a29      	ldr	r2, [pc, #164]	; (80067c4 <TIM_Base_SetConfig+0x124>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d017      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a28      	ldr	r2, [pc, #160]	; (80067c8 <TIM_Base_SetConfig+0x128>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d013      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a27      	ldr	r2, [pc, #156]	; (80067cc <TIM_Base_SetConfig+0x12c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00f      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a26      	ldr	r2, [pc, #152]	; (80067d0 <TIM_Base_SetConfig+0x130>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00b      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a25      	ldr	r2, [pc, #148]	; (80067d4 <TIM_Base_SetConfig+0x134>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d007      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a24      	ldr	r2, [pc, #144]	; (80067d8 <TIM_Base_SetConfig+0x138>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d003      	beq.n	8006752 <TIM_Base_SetConfig+0xb2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a23      	ldr	r2, [pc, #140]	; (80067dc <TIM_Base_SetConfig+0x13c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d108      	bne.n	8006764 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a0a      	ldr	r2, [pc, #40]	; (80067b4 <TIM_Base_SetConfig+0x114>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_Base_SetConfig+0xf8>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a0c      	ldr	r2, [pc, #48]	; (80067c4 <TIM_Base_SetConfig+0x124>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d103      	bne.n	80067a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	615a      	str	r2, [r3, #20]
}
 80067a6:	bf00      	nop
 80067a8:	3714      	adds	r7, #20
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	40010000 	.word	0x40010000
 80067b8:	40000400 	.word	0x40000400
 80067bc:	40000800 	.word	0x40000800
 80067c0:	40000c00 	.word	0x40000c00
 80067c4:	40010400 	.word	0x40010400
 80067c8:	40014000 	.word	0x40014000
 80067cc:	40014400 	.word	0x40014400
 80067d0:	40014800 	.word	0x40014800
 80067d4:	40001800 	.word	0x40001800
 80067d8:	40001c00 	.word	0x40001c00
 80067dc:	40002000 	.word	0x40002000

080067e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e05a      	b.n	80068ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2202      	movs	r2, #2
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800681e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a21      	ldr	r2, [pc, #132]	; (80068bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d022      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006844:	d01d      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a1d      	ldr	r2, [pc, #116]	; (80068c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d018      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a1b      	ldr	r2, [pc, #108]	; (80068c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d013      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a1a      	ldr	r2, [pc, #104]	; (80068c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00e      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a18      	ldr	r2, [pc, #96]	; (80068cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d009      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a17      	ldr	r2, [pc, #92]	; (80068d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d004      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a15      	ldr	r2, [pc, #84]	; (80068d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d10c      	bne.n	800689c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	4313      	orrs	r3, r2
 8006892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40000400 	.word	0x40000400
 80068c4:	40000800 	.word	0x40000800
 80068c8:	40000c00 	.word	0x40000c00
 80068cc:	40010400 	.word	0x40010400
 80068d0:	40014000 	.word	0x40014000
 80068d4:	40001800 	.word	0x40001800

080068d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e03f      	b.n	8006992 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fc ffd6 	bl	80038d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2224      	movs	r2, #36	; 0x24
 8006930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fa69 	bl	8006e1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695a      	ldr	r2, [r3, #20]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2220      	movs	r2, #32
 8006984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3708      	adds	r7, #8
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80069bc:	2300      	movs	r3, #0
 80069be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10d      	bne.n	80069ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <HAL_UART_IRQHandler+0x52>
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f996 	bl	8006d18 <UART_Receive_IT>
      return;
 80069ec:	e0d1      	b.n	8006b92 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f000 80b0 	beq.w	8006b56 <HAL_UART_IRQHandler+0x1ba>
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d105      	bne.n	8006a0c <HAL_UART_IRQHandler+0x70>
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 80a5 	beq.w	8006b56 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <HAL_UART_IRQHandler+0x90>
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a24:	f043 0201 	orr.w	r2, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <HAL_UART_IRQHandler+0xb0>
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f003 0301 	and.w	r3, r3, #1
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a44:	f043 0202 	orr.w	r2, r3, #2
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <HAL_UART_IRQHandler+0xd0>
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f003 0301 	and.w	r3, r3, #1
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a64:	f043 0204 	orr.w	r2, r3, #4
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f003 0308 	and.w	r3, r3, #8
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00f      	beq.n	8006a96 <HAL_UART_IRQHandler+0xfa>
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f003 0320 	and.w	r3, r3, #32
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <HAL_UART_IRQHandler+0xee>
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d005      	beq.n	8006a96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	f043 0208 	orr.w	r2, r3, #8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d078      	beq.n	8006b90 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	f003 0320 	and.w	r3, r3, #32
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d007      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x11c>
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 f930 	bl	8006d18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d102      	bne.n	8006ae0 <HAL_UART_IRQHandler+0x144>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d031      	beq.n	8006b44 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f879 	bl	8006bd8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af0:	2b40      	cmp	r3, #64	; 0x40
 8006af2:	d123      	bne.n	8006b3c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695a      	ldr	r2, [r3, #20]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b02:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d013      	beq.n	8006b34 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b10:	4a21      	ldr	r2, [pc, #132]	; (8006b98 <HAL_UART_IRQHandler+0x1fc>)
 8006b12:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7fe f8d1 	bl	8004cc0 <HAL_DMA_Abort_IT>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d016      	beq.n	8006b52 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b2e:	4610      	mov	r0, r2
 8006b30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b32:	e00e      	b.n	8006b52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 f845 	bl	8006bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b3a:	e00a      	b.n	8006b52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f841 	bl	8006bc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b42:	e006      	b.n	8006b52 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f83d 	bl	8006bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006b50:	e01e      	b.n	8006b90 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b52:	bf00      	nop
    return;
 8006b54:	e01c      	b.n	8006b90 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d008      	beq.n	8006b72 <HAL_UART_IRQHandler+0x1d6>
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 f866 	bl	8006c3c <UART_Transmit_IT>
    return;
 8006b70:	e00f      	b.n	8006b92 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00a      	beq.n	8006b92 <HAL_UART_IRQHandler+0x1f6>
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f8ae 	bl	8006ce8 <UART_EndTransmit_IT>
    return;
 8006b8c:	bf00      	nop
 8006b8e:	e000      	b.n	8006b92 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006b90:	bf00      	nop
  }
}
 8006b92:	3720      	adds	r7, #32
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	08006c15 	.word	0x08006c15

08006b9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bee:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695a      	ldr	r2, [r3, #20]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 0201 	bic.w	r2, r2, #1
 8006bfe:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f7ff ffc8 	bl	8006bc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b21      	cmp	r3, #33	; 0x21
 8006c4e:	d144      	bne.n	8006cda <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c58:	d11a      	bne.n	8006c90 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	461a      	mov	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c6e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d105      	bne.n	8006c84 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a1b      	ldr	r3, [r3, #32]
 8006c7c:	1c9a      	adds	r2, r3, #2
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	621a      	str	r2, [r3, #32]
 8006c82:	e00e      	b.n	8006ca2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6a1b      	ldr	r3, [r3, #32]
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	621a      	str	r2, [r3, #32]
 8006c8e:	e008      	b.n	8006ca2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a1b      	ldr	r3, [r3, #32]
 8006c94:	1c59      	adds	r1, r3, #1
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6211      	str	r1, [r2, #32]
 8006c9a:	781a      	ldrb	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10f      	bne.n	8006cd6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68da      	ldr	r2, [r3, #12]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	e000      	b.n	8006cdc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006cda:	2302      	movs	r3, #2
  }
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff ff47 	bl	8006b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b22      	cmp	r3, #34	; 0x22
 8006d2a:	d171      	bne.n	8006e10 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d34:	d123      	bne.n	8006d7e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d3a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10e      	bne.n	8006d62 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5a:	1c9a      	adds	r2, r3, #2
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	629a      	str	r2, [r3, #40]	; 0x28
 8006d60:	e029      	b.n	8006db6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d7c:	e01b      	b.n	8006db6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6858      	ldr	r0, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d90:	1c59      	adds	r1, r3, #1
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6291      	str	r1, [r2, #40]	; 0x28
 8006d96:	b2c2      	uxtb	r2, r0
 8006d98:	701a      	strb	r2, [r3, #0]
 8006d9a:	e00c      	b.n	8006db6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	b2da      	uxtb	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	1c58      	adds	r0, r3, #1
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	6288      	str	r0, [r1, #40]	; 0x28
 8006dae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d120      	bne.n	8006e0c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 0220 	bic.w	r2, r2, #32
 8006dd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006de8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	695a      	ldr	r2, [r3, #20]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0201 	bic.w	r2, r2, #1
 8006df8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fed4 	bl	8006bb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	e002      	b.n	8006e12 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	e000      	b.n	8006e12 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006e10:	2302      	movs	r3, #2
  }
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e20:	b085      	sub	sp, #20
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	68da      	ldr	r2, [r3, #12]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006e5e:	f023 030c 	bic.w	r3, r3, #12
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6812      	ldr	r2, [r2, #0]
 8006e66:	68f9      	ldr	r1, [r7, #12]
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e8a:	f040 818b 	bne.w	80071a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4ac1      	ldr	r2, [pc, #772]	; (8007198 <UART_SetConfig+0x37c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d005      	beq.n	8006ea4 <UART_SetConfig+0x88>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4abf      	ldr	r2, [pc, #764]	; (800719c <UART_SetConfig+0x380>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	f040 80bd 	bne.w	800701e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ea4:	f7ff f8a0 	bl	8005fe8 <HAL_RCC_GetPCLK2Freq>
 8006ea8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	461d      	mov	r5, r3
 8006eae:	f04f 0600 	mov.w	r6, #0
 8006eb2:	46a8      	mov	r8, r5
 8006eb4:	46b1      	mov	r9, r6
 8006eb6:	eb18 0308 	adds.w	r3, r8, r8
 8006eba:	eb49 0409 	adc.w	r4, r9, r9
 8006ebe:	4698      	mov	r8, r3
 8006ec0:	46a1      	mov	r9, r4
 8006ec2:	eb18 0805 	adds.w	r8, r8, r5
 8006ec6:	eb49 0906 	adc.w	r9, r9, r6
 8006eca:	f04f 0100 	mov.w	r1, #0
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006ed6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006eda:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ede:	4688      	mov	r8, r1
 8006ee0:	4691      	mov	r9, r2
 8006ee2:	eb18 0005 	adds.w	r0, r8, r5
 8006ee6:	eb49 0106 	adc.w	r1, r9, r6
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	461d      	mov	r5, r3
 8006ef0:	f04f 0600 	mov.w	r6, #0
 8006ef4:	196b      	adds	r3, r5, r5
 8006ef6:	eb46 0406 	adc.w	r4, r6, r6
 8006efa:	461a      	mov	r2, r3
 8006efc:	4623      	mov	r3, r4
 8006efe:	f7f9 fed3 	bl	8000ca8 <__aeabi_uldivmod>
 8006f02:	4603      	mov	r3, r0
 8006f04:	460c      	mov	r4, r1
 8006f06:	461a      	mov	r2, r3
 8006f08:	4ba5      	ldr	r3, [pc, #660]	; (80071a0 <UART_SetConfig+0x384>)
 8006f0a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f0e:	095b      	lsrs	r3, r3, #5
 8006f10:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	461d      	mov	r5, r3
 8006f18:	f04f 0600 	mov.w	r6, #0
 8006f1c:	46a9      	mov	r9, r5
 8006f1e:	46b2      	mov	sl, r6
 8006f20:	eb19 0309 	adds.w	r3, r9, r9
 8006f24:	eb4a 040a 	adc.w	r4, sl, sl
 8006f28:	4699      	mov	r9, r3
 8006f2a:	46a2      	mov	sl, r4
 8006f2c:	eb19 0905 	adds.w	r9, r9, r5
 8006f30:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f34:	f04f 0100 	mov.w	r1, #0
 8006f38:	f04f 0200 	mov.w	r2, #0
 8006f3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f48:	4689      	mov	r9, r1
 8006f4a:	4692      	mov	sl, r2
 8006f4c:	eb19 0005 	adds.w	r0, r9, r5
 8006f50:	eb4a 0106 	adc.w	r1, sl, r6
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	461d      	mov	r5, r3
 8006f5a:	f04f 0600 	mov.w	r6, #0
 8006f5e:	196b      	adds	r3, r5, r5
 8006f60:	eb46 0406 	adc.w	r4, r6, r6
 8006f64:	461a      	mov	r2, r3
 8006f66:	4623      	mov	r3, r4
 8006f68:	f7f9 fe9e 	bl	8000ca8 <__aeabi_uldivmod>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	461a      	mov	r2, r3
 8006f72:	4b8b      	ldr	r3, [pc, #556]	; (80071a0 <UART_SetConfig+0x384>)
 8006f74:	fba3 1302 	umull	r1, r3, r3, r2
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	2164      	movs	r1, #100	; 0x64
 8006f7c:	fb01 f303 	mul.w	r3, r1, r3
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	00db      	lsls	r3, r3, #3
 8006f84:	3332      	adds	r3, #50	; 0x32
 8006f86:	4a86      	ldr	r2, [pc, #536]	; (80071a0 <UART_SetConfig+0x384>)
 8006f88:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8c:	095b      	lsrs	r3, r3, #5
 8006f8e:	005b      	lsls	r3, r3, #1
 8006f90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f94:	4498      	add	r8, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	461d      	mov	r5, r3
 8006f9a:	f04f 0600 	mov.w	r6, #0
 8006f9e:	46a9      	mov	r9, r5
 8006fa0:	46b2      	mov	sl, r6
 8006fa2:	eb19 0309 	adds.w	r3, r9, r9
 8006fa6:	eb4a 040a 	adc.w	r4, sl, sl
 8006faa:	4699      	mov	r9, r3
 8006fac:	46a2      	mov	sl, r4
 8006fae:	eb19 0905 	adds.w	r9, r9, r5
 8006fb2:	eb4a 0a06 	adc.w	sl, sl, r6
 8006fb6:	f04f 0100 	mov.w	r1, #0
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fca:	4689      	mov	r9, r1
 8006fcc:	4692      	mov	sl, r2
 8006fce:	eb19 0005 	adds.w	r0, r9, r5
 8006fd2:	eb4a 0106 	adc.w	r1, sl, r6
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	461d      	mov	r5, r3
 8006fdc:	f04f 0600 	mov.w	r6, #0
 8006fe0:	196b      	adds	r3, r5, r5
 8006fe2:	eb46 0406 	adc.w	r4, r6, r6
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	4623      	mov	r3, r4
 8006fea:	f7f9 fe5d 	bl	8000ca8 <__aeabi_uldivmod>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	4b6a      	ldr	r3, [pc, #424]	; (80071a0 <UART_SetConfig+0x384>)
 8006ff6:	fba3 1302 	umull	r1, r3, r3, r2
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	2164      	movs	r1, #100	; 0x64
 8006ffe:	fb01 f303 	mul.w	r3, r1, r3
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	3332      	adds	r3, #50	; 0x32
 8007008:	4a65      	ldr	r2, [pc, #404]	; (80071a0 <UART_SetConfig+0x384>)
 800700a:	fba2 2303 	umull	r2, r3, r2, r3
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	f003 0207 	and.w	r2, r3, #7
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4442      	add	r2, r8
 800701a:	609a      	str	r2, [r3, #8]
 800701c:	e26f      	b.n	80074fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800701e:	f7fe ffcf 	bl	8005fc0 <HAL_RCC_GetPCLK1Freq>
 8007022:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	461d      	mov	r5, r3
 8007028:	f04f 0600 	mov.w	r6, #0
 800702c:	46a8      	mov	r8, r5
 800702e:	46b1      	mov	r9, r6
 8007030:	eb18 0308 	adds.w	r3, r8, r8
 8007034:	eb49 0409 	adc.w	r4, r9, r9
 8007038:	4698      	mov	r8, r3
 800703a:	46a1      	mov	r9, r4
 800703c:	eb18 0805 	adds.w	r8, r8, r5
 8007040:	eb49 0906 	adc.w	r9, r9, r6
 8007044:	f04f 0100 	mov.w	r1, #0
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007050:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007054:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007058:	4688      	mov	r8, r1
 800705a:	4691      	mov	r9, r2
 800705c:	eb18 0005 	adds.w	r0, r8, r5
 8007060:	eb49 0106 	adc.w	r1, r9, r6
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	461d      	mov	r5, r3
 800706a:	f04f 0600 	mov.w	r6, #0
 800706e:	196b      	adds	r3, r5, r5
 8007070:	eb46 0406 	adc.w	r4, r6, r6
 8007074:	461a      	mov	r2, r3
 8007076:	4623      	mov	r3, r4
 8007078:	f7f9 fe16 	bl	8000ca8 <__aeabi_uldivmod>
 800707c:	4603      	mov	r3, r0
 800707e:	460c      	mov	r4, r1
 8007080:	461a      	mov	r2, r3
 8007082:	4b47      	ldr	r3, [pc, #284]	; (80071a0 <UART_SetConfig+0x384>)
 8007084:	fba3 2302 	umull	r2, r3, r3, r2
 8007088:	095b      	lsrs	r3, r3, #5
 800708a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	461d      	mov	r5, r3
 8007092:	f04f 0600 	mov.w	r6, #0
 8007096:	46a9      	mov	r9, r5
 8007098:	46b2      	mov	sl, r6
 800709a:	eb19 0309 	adds.w	r3, r9, r9
 800709e:	eb4a 040a 	adc.w	r4, sl, sl
 80070a2:	4699      	mov	r9, r3
 80070a4:	46a2      	mov	sl, r4
 80070a6:	eb19 0905 	adds.w	r9, r9, r5
 80070aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80070ae:	f04f 0100 	mov.w	r1, #0
 80070b2:	f04f 0200 	mov.w	r2, #0
 80070b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070c2:	4689      	mov	r9, r1
 80070c4:	4692      	mov	sl, r2
 80070c6:	eb19 0005 	adds.w	r0, r9, r5
 80070ca:	eb4a 0106 	adc.w	r1, sl, r6
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	461d      	mov	r5, r3
 80070d4:	f04f 0600 	mov.w	r6, #0
 80070d8:	196b      	adds	r3, r5, r5
 80070da:	eb46 0406 	adc.w	r4, r6, r6
 80070de:	461a      	mov	r2, r3
 80070e0:	4623      	mov	r3, r4
 80070e2:	f7f9 fde1 	bl	8000ca8 <__aeabi_uldivmod>
 80070e6:	4603      	mov	r3, r0
 80070e8:	460c      	mov	r4, r1
 80070ea:	461a      	mov	r2, r3
 80070ec:	4b2c      	ldr	r3, [pc, #176]	; (80071a0 <UART_SetConfig+0x384>)
 80070ee:	fba3 1302 	umull	r1, r3, r3, r2
 80070f2:	095b      	lsrs	r3, r3, #5
 80070f4:	2164      	movs	r1, #100	; 0x64
 80070f6:	fb01 f303 	mul.w	r3, r1, r3
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	00db      	lsls	r3, r3, #3
 80070fe:	3332      	adds	r3, #50	; 0x32
 8007100:	4a27      	ldr	r2, [pc, #156]	; (80071a0 <UART_SetConfig+0x384>)
 8007102:	fba2 2303 	umull	r2, r3, r2, r3
 8007106:	095b      	lsrs	r3, r3, #5
 8007108:	005b      	lsls	r3, r3, #1
 800710a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800710e:	4498      	add	r8, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	461d      	mov	r5, r3
 8007114:	f04f 0600 	mov.w	r6, #0
 8007118:	46a9      	mov	r9, r5
 800711a:	46b2      	mov	sl, r6
 800711c:	eb19 0309 	adds.w	r3, r9, r9
 8007120:	eb4a 040a 	adc.w	r4, sl, sl
 8007124:	4699      	mov	r9, r3
 8007126:	46a2      	mov	sl, r4
 8007128:	eb19 0905 	adds.w	r9, r9, r5
 800712c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007130:	f04f 0100 	mov.w	r1, #0
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800713c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007140:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007144:	4689      	mov	r9, r1
 8007146:	4692      	mov	sl, r2
 8007148:	eb19 0005 	adds.w	r0, r9, r5
 800714c:	eb4a 0106 	adc.w	r1, sl, r6
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	461d      	mov	r5, r3
 8007156:	f04f 0600 	mov.w	r6, #0
 800715a:	196b      	adds	r3, r5, r5
 800715c:	eb46 0406 	adc.w	r4, r6, r6
 8007160:	461a      	mov	r2, r3
 8007162:	4623      	mov	r3, r4
 8007164:	f7f9 fda0 	bl	8000ca8 <__aeabi_uldivmod>
 8007168:	4603      	mov	r3, r0
 800716a:	460c      	mov	r4, r1
 800716c:	461a      	mov	r2, r3
 800716e:	4b0c      	ldr	r3, [pc, #48]	; (80071a0 <UART_SetConfig+0x384>)
 8007170:	fba3 1302 	umull	r1, r3, r3, r2
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	2164      	movs	r1, #100	; 0x64
 8007178:	fb01 f303 	mul.w	r3, r1, r3
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	3332      	adds	r3, #50	; 0x32
 8007182:	4a07      	ldr	r2, [pc, #28]	; (80071a0 <UART_SetConfig+0x384>)
 8007184:	fba2 2303 	umull	r2, r3, r2, r3
 8007188:	095b      	lsrs	r3, r3, #5
 800718a:	f003 0207 	and.w	r2, r3, #7
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4442      	add	r2, r8
 8007194:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007196:	e1b2      	b.n	80074fe <UART_SetConfig+0x6e2>
 8007198:	40011000 	.word	0x40011000
 800719c:	40011400 	.word	0x40011400
 80071a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4ad7      	ldr	r2, [pc, #860]	; (8007508 <UART_SetConfig+0x6ec>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d005      	beq.n	80071ba <UART_SetConfig+0x39e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4ad6      	ldr	r2, [pc, #856]	; (800750c <UART_SetConfig+0x6f0>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	f040 80d1 	bne.w	800735c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80071ba:	f7fe ff15 	bl	8005fe8 <HAL_RCC_GetPCLK2Freq>
 80071be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	469a      	mov	sl, r3
 80071c4:	f04f 0b00 	mov.w	fp, #0
 80071c8:	46d0      	mov	r8, sl
 80071ca:	46d9      	mov	r9, fp
 80071cc:	eb18 0308 	adds.w	r3, r8, r8
 80071d0:	eb49 0409 	adc.w	r4, r9, r9
 80071d4:	4698      	mov	r8, r3
 80071d6:	46a1      	mov	r9, r4
 80071d8:	eb18 080a 	adds.w	r8, r8, sl
 80071dc:	eb49 090b 	adc.w	r9, r9, fp
 80071e0:	f04f 0100 	mov.w	r1, #0
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071f4:	4688      	mov	r8, r1
 80071f6:	4691      	mov	r9, r2
 80071f8:	eb1a 0508 	adds.w	r5, sl, r8
 80071fc:	eb4b 0609 	adc.w	r6, fp, r9
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	4619      	mov	r1, r3
 8007206:	f04f 0200 	mov.w	r2, #0
 800720a:	f04f 0300 	mov.w	r3, #0
 800720e:	f04f 0400 	mov.w	r4, #0
 8007212:	0094      	lsls	r4, r2, #2
 8007214:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007218:	008b      	lsls	r3, r1, #2
 800721a:	461a      	mov	r2, r3
 800721c:	4623      	mov	r3, r4
 800721e:	4628      	mov	r0, r5
 8007220:	4631      	mov	r1, r6
 8007222:	f7f9 fd41 	bl	8000ca8 <__aeabi_uldivmod>
 8007226:	4603      	mov	r3, r0
 8007228:	460c      	mov	r4, r1
 800722a:	461a      	mov	r2, r3
 800722c:	4bb8      	ldr	r3, [pc, #736]	; (8007510 <UART_SetConfig+0x6f4>)
 800722e:	fba3 2302 	umull	r2, r3, r3, r2
 8007232:	095b      	lsrs	r3, r3, #5
 8007234:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	469b      	mov	fp, r3
 800723c:	f04f 0c00 	mov.w	ip, #0
 8007240:	46d9      	mov	r9, fp
 8007242:	46e2      	mov	sl, ip
 8007244:	eb19 0309 	adds.w	r3, r9, r9
 8007248:	eb4a 040a 	adc.w	r4, sl, sl
 800724c:	4699      	mov	r9, r3
 800724e:	46a2      	mov	sl, r4
 8007250:	eb19 090b 	adds.w	r9, r9, fp
 8007254:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007258:	f04f 0100 	mov.w	r1, #0
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007264:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007268:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800726c:	4689      	mov	r9, r1
 800726e:	4692      	mov	sl, r2
 8007270:	eb1b 0509 	adds.w	r5, fp, r9
 8007274:	eb4c 060a 	adc.w	r6, ip, sl
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	4619      	mov	r1, r3
 800727e:	f04f 0200 	mov.w	r2, #0
 8007282:	f04f 0300 	mov.w	r3, #0
 8007286:	f04f 0400 	mov.w	r4, #0
 800728a:	0094      	lsls	r4, r2, #2
 800728c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007290:	008b      	lsls	r3, r1, #2
 8007292:	461a      	mov	r2, r3
 8007294:	4623      	mov	r3, r4
 8007296:	4628      	mov	r0, r5
 8007298:	4631      	mov	r1, r6
 800729a:	f7f9 fd05 	bl	8000ca8 <__aeabi_uldivmod>
 800729e:	4603      	mov	r3, r0
 80072a0:	460c      	mov	r4, r1
 80072a2:	461a      	mov	r2, r3
 80072a4:	4b9a      	ldr	r3, [pc, #616]	; (8007510 <UART_SetConfig+0x6f4>)
 80072a6:	fba3 1302 	umull	r1, r3, r3, r2
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	2164      	movs	r1, #100	; 0x64
 80072ae:	fb01 f303 	mul.w	r3, r1, r3
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	3332      	adds	r3, #50	; 0x32
 80072b8:	4a95      	ldr	r2, [pc, #596]	; (8007510 <UART_SetConfig+0x6f4>)
 80072ba:	fba2 2303 	umull	r2, r3, r2, r3
 80072be:	095b      	lsrs	r3, r3, #5
 80072c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072c4:	4498      	add	r8, r3
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	469b      	mov	fp, r3
 80072ca:	f04f 0c00 	mov.w	ip, #0
 80072ce:	46d9      	mov	r9, fp
 80072d0:	46e2      	mov	sl, ip
 80072d2:	eb19 0309 	adds.w	r3, r9, r9
 80072d6:	eb4a 040a 	adc.w	r4, sl, sl
 80072da:	4699      	mov	r9, r3
 80072dc:	46a2      	mov	sl, r4
 80072de:	eb19 090b 	adds.w	r9, r9, fp
 80072e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80072e6:	f04f 0100 	mov.w	r1, #0
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072fa:	4689      	mov	r9, r1
 80072fc:	4692      	mov	sl, r2
 80072fe:	eb1b 0509 	adds.w	r5, fp, r9
 8007302:	eb4c 060a 	adc.w	r6, ip, sl
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	4619      	mov	r1, r3
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f04f 0300 	mov.w	r3, #0
 8007314:	f04f 0400 	mov.w	r4, #0
 8007318:	0094      	lsls	r4, r2, #2
 800731a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800731e:	008b      	lsls	r3, r1, #2
 8007320:	461a      	mov	r2, r3
 8007322:	4623      	mov	r3, r4
 8007324:	4628      	mov	r0, r5
 8007326:	4631      	mov	r1, r6
 8007328:	f7f9 fcbe 	bl	8000ca8 <__aeabi_uldivmod>
 800732c:	4603      	mov	r3, r0
 800732e:	460c      	mov	r4, r1
 8007330:	461a      	mov	r2, r3
 8007332:	4b77      	ldr	r3, [pc, #476]	; (8007510 <UART_SetConfig+0x6f4>)
 8007334:	fba3 1302 	umull	r1, r3, r3, r2
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	2164      	movs	r1, #100	; 0x64
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	3332      	adds	r3, #50	; 0x32
 8007346:	4a72      	ldr	r2, [pc, #456]	; (8007510 <UART_SetConfig+0x6f4>)
 8007348:	fba2 2303 	umull	r2, r3, r2, r3
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	f003 020f 	and.w	r2, r3, #15
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4442      	add	r2, r8
 8007358:	609a      	str	r2, [r3, #8]
 800735a:	e0d0      	b.n	80074fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800735c:	f7fe fe30 	bl	8005fc0 <HAL_RCC_GetPCLK1Freq>
 8007360:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	469a      	mov	sl, r3
 8007366:	f04f 0b00 	mov.w	fp, #0
 800736a:	46d0      	mov	r8, sl
 800736c:	46d9      	mov	r9, fp
 800736e:	eb18 0308 	adds.w	r3, r8, r8
 8007372:	eb49 0409 	adc.w	r4, r9, r9
 8007376:	4698      	mov	r8, r3
 8007378:	46a1      	mov	r9, r4
 800737a:	eb18 080a 	adds.w	r8, r8, sl
 800737e:	eb49 090b 	adc.w	r9, r9, fp
 8007382:	f04f 0100 	mov.w	r1, #0
 8007386:	f04f 0200 	mov.w	r2, #0
 800738a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800738e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007392:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007396:	4688      	mov	r8, r1
 8007398:	4691      	mov	r9, r2
 800739a:	eb1a 0508 	adds.w	r5, sl, r8
 800739e:	eb4b 0609 	adc.w	r6, fp, r9
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	4619      	mov	r1, r3
 80073a8:	f04f 0200 	mov.w	r2, #0
 80073ac:	f04f 0300 	mov.w	r3, #0
 80073b0:	f04f 0400 	mov.w	r4, #0
 80073b4:	0094      	lsls	r4, r2, #2
 80073b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80073ba:	008b      	lsls	r3, r1, #2
 80073bc:	461a      	mov	r2, r3
 80073be:	4623      	mov	r3, r4
 80073c0:	4628      	mov	r0, r5
 80073c2:	4631      	mov	r1, r6
 80073c4:	f7f9 fc70 	bl	8000ca8 <__aeabi_uldivmod>
 80073c8:	4603      	mov	r3, r0
 80073ca:	460c      	mov	r4, r1
 80073cc:	461a      	mov	r2, r3
 80073ce:	4b50      	ldr	r3, [pc, #320]	; (8007510 <UART_SetConfig+0x6f4>)
 80073d0:	fba3 2302 	umull	r2, r3, r3, r2
 80073d4:	095b      	lsrs	r3, r3, #5
 80073d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	469b      	mov	fp, r3
 80073de:	f04f 0c00 	mov.w	ip, #0
 80073e2:	46d9      	mov	r9, fp
 80073e4:	46e2      	mov	sl, ip
 80073e6:	eb19 0309 	adds.w	r3, r9, r9
 80073ea:	eb4a 040a 	adc.w	r4, sl, sl
 80073ee:	4699      	mov	r9, r3
 80073f0:	46a2      	mov	sl, r4
 80073f2:	eb19 090b 	adds.w	r9, r9, fp
 80073f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80073fa:	f04f 0100 	mov.w	r1, #0
 80073fe:	f04f 0200 	mov.w	r2, #0
 8007402:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007406:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800740a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800740e:	4689      	mov	r9, r1
 8007410:	4692      	mov	sl, r2
 8007412:	eb1b 0509 	adds.w	r5, fp, r9
 8007416:	eb4c 060a 	adc.w	r6, ip, sl
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	4619      	mov	r1, r3
 8007420:	f04f 0200 	mov.w	r2, #0
 8007424:	f04f 0300 	mov.w	r3, #0
 8007428:	f04f 0400 	mov.w	r4, #0
 800742c:	0094      	lsls	r4, r2, #2
 800742e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007432:	008b      	lsls	r3, r1, #2
 8007434:	461a      	mov	r2, r3
 8007436:	4623      	mov	r3, r4
 8007438:	4628      	mov	r0, r5
 800743a:	4631      	mov	r1, r6
 800743c:	f7f9 fc34 	bl	8000ca8 <__aeabi_uldivmod>
 8007440:	4603      	mov	r3, r0
 8007442:	460c      	mov	r4, r1
 8007444:	461a      	mov	r2, r3
 8007446:	4b32      	ldr	r3, [pc, #200]	; (8007510 <UART_SetConfig+0x6f4>)
 8007448:	fba3 1302 	umull	r1, r3, r3, r2
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	2164      	movs	r1, #100	; 0x64
 8007450:	fb01 f303 	mul.w	r3, r1, r3
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	3332      	adds	r3, #50	; 0x32
 800745a:	4a2d      	ldr	r2, [pc, #180]	; (8007510 <UART_SetConfig+0x6f4>)
 800745c:	fba2 2303 	umull	r2, r3, r2, r3
 8007460:	095b      	lsrs	r3, r3, #5
 8007462:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007466:	4498      	add	r8, r3
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	469b      	mov	fp, r3
 800746c:	f04f 0c00 	mov.w	ip, #0
 8007470:	46d9      	mov	r9, fp
 8007472:	46e2      	mov	sl, ip
 8007474:	eb19 0309 	adds.w	r3, r9, r9
 8007478:	eb4a 040a 	adc.w	r4, sl, sl
 800747c:	4699      	mov	r9, r3
 800747e:	46a2      	mov	sl, r4
 8007480:	eb19 090b 	adds.w	r9, r9, fp
 8007484:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007488:	f04f 0100 	mov.w	r1, #0
 800748c:	f04f 0200 	mov.w	r2, #0
 8007490:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007494:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007498:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800749c:	4689      	mov	r9, r1
 800749e:	4692      	mov	sl, r2
 80074a0:	eb1b 0509 	adds.w	r5, fp, r9
 80074a4:	eb4c 060a 	adc.w	r6, ip, sl
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	4619      	mov	r1, r3
 80074ae:	f04f 0200 	mov.w	r2, #0
 80074b2:	f04f 0300 	mov.w	r3, #0
 80074b6:	f04f 0400 	mov.w	r4, #0
 80074ba:	0094      	lsls	r4, r2, #2
 80074bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074c0:	008b      	lsls	r3, r1, #2
 80074c2:	461a      	mov	r2, r3
 80074c4:	4623      	mov	r3, r4
 80074c6:	4628      	mov	r0, r5
 80074c8:	4631      	mov	r1, r6
 80074ca:	f7f9 fbed 	bl	8000ca8 <__aeabi_uldivmod>
 80074ce:	4603      	mov	r3, r0
 80074d0:	460c      	mov	r4, r1
 80074d2:	461a      	mov	r2, r3
 80074d4:	4b0e      	ldr	r3, [pc, #56]	; (8007510 <UART_SetConfig+0x6f4>)
 80074d6:	fba3 1302 	umull	r1, r3, r3, r2
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	2164      	movs	r1, #100	; 0x64
 80074de:	fb01 f303 	mul.w	r3, r1, r3
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	011b      	lsls	r3, r3, #4
 80074e6:	3332      	adds	r3, #50	; 0x32
 80074e8:	4a09      	ldr	r2, [pc, #36]	; (8007510 <UART_SetConfig+0x6f4>)
 80074ea:	fba2 2303 	umull	r2, r3, r2, r3
 80074ee:	095b      	lsrs	r3, r3, #5
 80074f0:	f003 020f 	and.w	r2, r3, #15
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4442      	add	r2, r8
 80074fa:	609a      	str	r2, [r3, #8]
}
 80074fc:	e7ff      	b.n	80074fe <UART_SetConfig+0x6e2>
 80074fe:	bf00      	nop
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007508:	40011000 	.word	0x40011000
 800750c:	40011400 	.word	0x40011400
 8007510:	51eb851f 	.word	0x51eb851f

08007514 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 8007518:	bf00      	nop
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
	...

08007524 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 800752a:	4b3e      	ldr	r3, [pc, #248]	; (8007624 <HAL_IncTick+0x100>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3301      	adds	r3, #1
 8007530:	4a3c      	ldr	r2, [pc, #240]	; (8007624 <HAL_IncTick+0x100>)
 8007532:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8007534:	4b3c      	ldr	r3, [pc, #240]	; (8007628 <HAL_IncTick+0x104>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d004      	beq.n	8007546 <HAL_IncTick+0x22>
		TM_Time2--;
 800753c:	4b3a      	ldr	r3, [pc, #232]	; (8007628 <HAL_IncTick+0x104>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3b01      	subs	r3, #1
 8007542:	4a39      	ldr	r2, [pc, #228]	; (8007628 <HAL_IncTick+0x104>)
 8007544:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8007546:	2300      	movs	r3, #0
 8007548:	71fb      	strb	r3, [r7, #7]
 800754a:	e05f      	b.n	800760c <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 800754c:	79fb      	ldrb	r3, [r7, #7]
 800754e:	4a37      	ldr	r2, [pc, #220]	; (800762c <HAL_IncTick+0x108>)
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	685b      	ldr	r3, [r3, #4]
		if (
 8007556:	2b00      	cmp	r3, #0
 8007558:	d055      	beq.n	8007606 <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	4a33      	ldr	r2, [pc, #204]	; (800762c <HAL_IncTick+0x108>)
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b00      	cmp	r3, #0
 800756e:	d04a      	beq.n	8007606 <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	4a2e      	ldr	r2, [pc, #184]	; (800762c <HAL_IncTick+0x108>)
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 8007580:	79fb      	ldrb	r3, [r7, #7]
 8007582:	4a2a      	ldr	r2, [pc, #168]	; (800762c <HAL_IncTick+0x108>)
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	3a01      	subs	r2, #1
 800758e:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	4a26      	ldr	r2, [pc, #152]	; (800762c <HAL_IncTick+0x108>)
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d132      	bne.n	8007606 <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	4a22      	ldr	r2, [pc, #136]	; (800762c <HAL_IncTick+0x108>)
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	491f      	ldr	r1, [pc, #124]	; (800762c <HAL_IncTick+0x108>)
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	440b      	add	r3, r1
 80075b4:	6858      	ldr	r0, [r3, #4]
 80075b6:	79fb      	ldrb	r3, [r7, #7]
 80075b8:	491c      	ldr	r1, [pc, #112]	; (800762c <HAL_IncTick+0x108>)
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	440b      	add	r3, r1
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	4619      	mov	r1, r3
 80075c4:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	4a18      	ldr	r2, [pc, #96]	; (800762c <HAL_IncTick+0x108>)
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	685a      	ldr	r2, [r3, #4]
 80075d0:	79fb      	ldrb	r3, [r7, #7]
 80075d2:	4916      	ldr	r1, [pc, #88]	; (800762c <HAL_IncTick+0x108>)
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	440b      	add	r3, r1
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	6852      	ldr	r2, [r2, #4]
 80075dc:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	4a12      	ldr	r2, [pc, #72]	; (800762c <HAL_IncTick+0x108>)
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d108      	bne.n	8007606 <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	4a0d      	ldr	r2, [pc, #52]	; (800762c <HAL_IncTick+0x108>)
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	685a      	ldr	r2, [r3, #4]
 80075fe:	7813      	ldrb	r3, [r2, #0]
 8007600:	f36f 0341 	bfc	r3, #1, #1
 8007604:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 8007606:	79fb      	ldrb	r3, [r7, #7]
 8007608:	3301      	adds	r3, #1
 800760a:	71fb      	strb	r3, [r7, #7]
 800760c:	4b07      	ldr	r3, [pc, #28]	; (800762c <HAL_IncTick+0x108>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	79fa      	ldrb	r2, [r7, #7]
 8007612:	429a      	cmp	r2, r3
 8007614:	d39a      	bcc.n	800754c <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8007616:	f7ff ff7d 	bl	8007514 <TM_DELAY_1msHandler>
}
 800761a:	bf00      	nop
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20001454 	.word	0x20001454
 8007628:	20001450 	.word	0x20001450
 800762c:	20001458 	.word	0x20001458

08007630 <HAL_GetTick>:
			}
		}
	}
}

uint32_t HAL_GetTick(void) {
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 8007634:	4b03      	ldr	r3, [pc, #12]	; (8007644 <HAL_GetTick+0x14>)
 8007636:	681b      	ldr	r3, [r3, #0]
}
 8007638:	4618      	mov	r0, r3
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	20001454 	.word	0x20001454

08007648 <TM_DMA2DGRAPHIC_DrawPixel>:
	/* Set offset */
	DIS.Offset = (layer_number) * DIS.LayerOffset;
	DIS.LayerNumber = layer_number;
}

void TM_DMA2DGRAPHIC_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 8007648:	b490      	push	{r4, r7}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	603a      	str	r2, [r7, #0]
 8007652:	80fb      	strh	r3, [r7, #6]
 8007654:	460b      	mov	r3, r1
 8007656:	80bb      	strh	r3, [r7, #4]
	if (DIS.Orientation == 1) { /* Normal */
 8007658:	4b47      	ldr	r3, [pc, #284]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800765a:	7f5b      	ldrb	r3, [r3, #29]
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b01      	cmp	r3, #1
 8007660:	d117      	bne.n	8007692 <TM_DMA2DGRAPHIC_DrawPixel+0x4a>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * (y * DIS.Width + x)) = color;
 8007662:	4b45      	ldr	r3, [pc, #276]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	4b44      	ldr	r3, [pc, #272]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	4413      	add	r3, r2
 800766c:	4a42      	ldr	r2, [pc, #264]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800766e:	7f92      	ldrb	r2, [r2, #30]
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	4610      	mov	r0, r2
 8007674:	88ba      	ldrh	r2, [r7, #4]
 8007676:	4940      	ldr	r1, [pc, #256]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007678:	8809      	ldrh	r1, [r1, #0]
 800767a:	b289      	uxth	r1, r1
 800767c:	fb01 f102 	mul.w	r1, r1, r2
 8007680:	88fa      	ldrh	r2, [r7, #6]
 8007682:	440a      	add	r2, r1
 8007684:	fb02 f200 	mul.w	r2, r2, r0
 8007688:	4413      	add	r3, r2
 800768a:	461a      	mov	r2, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	6013      	str	r3, [r2, #0]
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1)) = color;
	} else if (DIS.Orientation == 2) { /* 270 */
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y)) = color;
	}
}
 8007690:	e06c      	b.n	800776c <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 0) { /* 180 */
 8007692:	4b39      	ldr	r3, [pc, #228]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007694:	7f5b      	ldrb	r3, [r3, #29]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b00      	cmp	r3, #0
 800769a:	d123      	bne.n	80076e4 <TM_DMA2DGRAPHIC_DrawPixel+0x9c>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - y - 1) * DIS.Width + (DIS.Width - x - 1))) = color;
 800769c:	4b36      	ldr	r3, [pc, #216]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	4b35      	ldr	r3, [pc, #212]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	4413      	add	r3, r2
 80076a6:	4a34      	ldr	r2, [pc, #208]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80076a8:	7f92      	ldrb	r2, [r2, #30]
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	4610      	mov	r0, r2
 80076ae:	4a32      	ldr	r2, [pc, #200]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80076b0:	8852      	ldrh	r2, [r2, #2]
 80076b2:	b292      	uxth	r2, r2
 80076b4:	4611      	mov	r1, r2
 80076b6:	88ba      	ldrh	r2, [r7, #4]
 80076b8:	1a8a      	subs	r2, r1, r2
 80076ba:	3a01      	subs	r2, #1
 80076bc:	492e      	ldr	r1, [pc, #184]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80076be:	8809      	ldrh	r1, [r1, #0]
 80076c0:	b289      	uxth	r1, r1
 80076c2:	fb01 f102 	mul.w	r1, r1, r2
 80076c6:	4a2c      	ldr	r2, [pc, #176]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80076c8:	8812      	ldrh	r2, [r2, #0]
 80076ca:	b292      	uxth	r2, r2
 80076cc:	4614      	mov	r4, r2
 80076ce:	88fa      	ldrh	r2, [r7, #6]
 80076d0:	1aa2      	subs	r2, r4, r2
 80076d2:	3a01      	subs	r2, #1
 80076d4:	440a      	add	r2, r1
 80076d6:	fb02 f200 	mul.w	r2, r2, r0
 80076da:	4413      	add	r3, r2
 80076dc:	461a      	mov	r2, r3
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	6013      	str	r3, [r2, #0]
}
 80076e2:	e043      	b.n	800776c <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
 80076e4:	4b24      	ldr	r3, [pc, #144]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80076e6:	7f5b      	ldrb	r3, [r3, #29]
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d11c      	bne.n	8007728 <TM_DMA2DGRAPHIC_DrawPixel+0xe0>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1)) = color;
 80076ee:	4b22      	ldr	r3, [pc, #136]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80076f0:	689a      	ldr	r2, [r3, #8]
 80076f2:	4b21      	ldr	r3, [pc, #132]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80076f4:	695b      	ldr	r3, [r3, #20]
 80076f6:	4413      	add	r3, r2
 80076f8:	4a1f      	ldr	r2, [pc, #124]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80076fa:	7f92      	ldrb	r2, [r2, #30]
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	4610      	mov	r0, r2
 8007700:	88fa      	ldrh	r2, [r7, #6]
 8007702:	491d      	ldr	r1, [pc, #116]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007704:	8809      	ldrh	r1, [r1, #0]
 8007706:	b289      	uxth	r1, r1
 8007708:	fb01 f202 	mul.w	r2, r1, r2
 800770c:	491a      	ldr	r1, [pc, #104]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800770e:	8809      	ldrh	r1, [r1, #0]
 8007710:	b289      	uxth	r1, r1
 8007712:	4411      	add	r1, r2
 8007714:	88ba      	ldrh	r2, [r7, #4]
 8007716:	1a8a      	subs	r2, r1, r2
 8007718:	3a01      	subs	r2, #1
 800771a:	fb02 f200 	mul.w	r2, r2, r0
 800771e:	4413      	add	r3, r2
 8007720:	461a      	mov	r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	6013      	str	r3, [r2, #0]
}
 8007726:	e021      	b.n	800776c <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 2) { /* 270 */
 8007728:	4b13      	ldr	r3, [pc, #76]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800772a:	7f5b      	ldrb	r3, [r3, #29]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d11c      	bne.n	800776c <TM_DMA2DGRAPHIC_DrawPixel+0x124>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y)) = color;
 8007732:	4b11      	ldr	r3, [pc, #68]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	4413      	add	r3, r2
 800773c:	4a0e      	ldr	r2, [pc, #56]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800773e:	7f92      	ldrb	r2, [r2, #30]
 8007740:	b2d2      	uxtb	r2, r2
 8007742:	4610      	mov	r0, r2
 8007744:	4a0c      	ldr	r2, [pc, #48]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007746:	8852      	ldrh	r2, [r2, #2]
 8007748:	b292      	uxth	r2, r2
 800774a:	4611      	mov	r1, r2
 800774c:	88fa      	ldrh	r2, [r7, #6]
 800774e:	1a8a      	subs	r2, r1, r2
 8007750:	3a01      	subs	r2, #1
 8007752:	4909      	ldr	r1, [pc, #36]	; (8007778 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007754:	8809      	ldrh	r1, [r1, #0]
 8007756:	b289      	uxth	r1, r1
 8007758:	fb01 f102 	mul.w	r1, r1, r2
 800775c:	88ba      	ldrh	r2, [r7, #4]
 800775e:	440a      	add	r2, r1
 8007760:	fb02 f200 	mul.w	r2, r2, r0
 8007764:	4413      	add	r3, r2
 8007766:	461a      	mov	r2, r3
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	6013      	str	r3, [r2, #0]
}
 800776c:	bf00      	nop
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bc90      	pop	{r4, r7}
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	20001ed0 	.word	0x20001ed0

0800777c <TM_DMA2DGRAPHIC_GetPixel>:

uint32_t TM_DMA2DGRAPHIC_GetPixel(uint16_t x, uint16_t y) {
 800777c:	b490      	push	{r4, r7}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	460a      	mov	r2, r1
 8007786:	80fb      	strh	r3, [r7, #6]
 8007788:	4613      	mov	r3, r2
 800778a:	80bb      	strh	r3, [r7, #4]
	if (DIS.Orientation == 1) { /* Normal */
 800778c:	4b44      	ldr	r3, [pc, #272]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800778e:	7f5b      	ldrb	r3, [r3, #29]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b01      	cmp	r3, #1
 8007794:	d115      	bne.n	80077c2 <TM_DMA2DGRAPHIC_GetPixel+0x46>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * (y * DIS.Width + x));
 8007796:	4b42      	ldr	r3, [pc, #264]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007798:	689a      	ldr	r2, [r3, #8]
 800779a:	4b41      	ldr	r3, [pc, #260]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	4413      	add	r3, r2
 80077a0:	4a3f      	ldr	r2, [pc, #252]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80077a2:	7f92      	ldrb	r2, [r2, #30]
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	4610      	mov	r0, r2
 80077a8:	88ba      	ldrh	r2, [r7, #4]
 80077aa:	493d      	ldr	r1, [pc, #244]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80077ac:	8809      	ldrh	r1, [r1, #0]
 80077ae:	b289      	uxth	r1, r1
 80077b0:	fb01 f102 	mul.w	r1, r1, r2
 80077b4:	88fa      	ldrh	r2, [r7, #6]
 80077b6:	440a      	add	r2, r1
 80077b8:	fb02 f200 	mul.w	r2, r2, r0
 80077bc:	4413      	add	r3, r2
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	e068      	b.n	8007894 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 0) { /* 180 */
 80077c2:	4b37      	ldr	r3, [pc, #220]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80077c4:	7f5b      	ldrb	r3, [r3, #29]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d121      	bne.n	8007810 <TM_DMA2DGRAPHIC_GetPixel+0x94>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - y - 1) * DIS.Width + (DIS.Width - x - 1)));
 80077cc:	4b34      	ldr	r3, [pc, #208]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80077ce:	689a      	ldr	r2, [r3, #8]
 80077d0:	4b33      	ldr	r3, [pc, #204]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80077d2:	695b      	ldr	r3, [r3, #20]
 80077d4:	4413      	add	r3, r2
 80077d6:	4a32      	ldr	r2, [pc, #200]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80077d8:	7f92      	ldrb	r2, [r2, #30]
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	4610      	mov	r0, r2
 80077de:	4a30      	ldr	r2, [pc, #192]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80077e0:	8852      	ldrh	r2, [r2, #2]
 80077e2:	b292      	uxth	r2, r2
 80077e4:	4611      	mov	r1, r2
 80077e6:	88ba      	ldrh	r2, [r7, #4]
 80077e8:	1a8a      	subs	r2, r1, r2
 80077ea:	3a01      	subs	r2, #1
 80077ec:	492c      	ldr	r1, [pc, #176]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80077ee:	8809      	ldrh	r1, [r1, #0]
 80077f0:	b289      	uxth	r1, r1
 80077f2:	fb01 f102 	mul.w	r1, r1, r2
 80077f6:	4a2a      	ldr	r2, [pc, #168]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80077f8:	8812      	ldrh	r2, [r2, #0]
 80077fa:	b292      	uxth	r2, r2
 80077fc:	4614      	mov	r4, r2
 80077fe:	88fa      	ldrh	r2, [r7, #6]
 8007800:	1aa2      	subs	r2, r4, r2
 8007802:	3a01      	subs	r2, #1
 8007804:	440a      	add	r2, r1
 8007806:	fb02 f200 	mul.w	r2, r2, r0
 800780a:	4413      	add	r3, r2
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	e041      	b.n	8007894 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
 8007810:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007812:	7f5b      	ldrb	r3, [r3, #29]
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b03      	cmp	r3, #3
 8007818:	d11a      	bne.n	8007850 <TM_DMA2DGRAPHIC_GetPixel+0xd4>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1));
 800781a:	4b21      	ldr	r3, [pc, #132]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800781c:	689a      	ldr	r2, [r3, #8]
 800781e:	4b20      	ldr	r3, [pc, #128]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	4413      	add	r3, r2
 8007824:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007826:	7f92      	ldrb	r2, [r2, #30]
 8007828:	b2d2      	uxtb	r2, r2
 800782a:	4610      	mov	r0, r2
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	491c      	ldr	r1, [pc, #112]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007830:	8809      	ldrh	r1, [r1, #0]
 8007832:	b289      	uxth	r1, r1
 8007834:	fb01 f202 	mul.w	r2, r1, r2
 8007838:	4919      	ldr	r1, [pc, #100]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800783a:	8809      	ldrh	r1, [r1, #0]
 800783c:	b289      	uxth	r1, r1
 800783e:	4411      	add	r1, r2
 8007840:	88ba      	ldrh	r2, [r7, #4]
 8007842:	1a8a      	subs	r2, r1, r2
 8007844:	3a01      	subs	r2, #1
 8007846:	fb02 f200 	mul.w	r2, r2, r0
 800784a:	4413      	add	r3, r2
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	e021      	b.n	8007894 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 2) { /* 270 */
 8007850:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007852:	7f5b      	ldrb	r3, [r3, #29]
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b02      	cmp	r3, #2
 8007858:	d11b      	bne.n	8007892 <TM_DMA2DGRAPHIC_GetPixel+0x116>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y));
 800785a:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	4b10      	ldr	r3, [pc, #64]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	4413      	add	r3, r2
 8007864:	4a0e      	ldr	r2, [pc, #56]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007866:	7f92      	ldrb	r2, [r2, #30]
 8007868:	b2d2      	uxtb	r2, r2
 800786a:	4610      	mov	r0, r2
 800786c:	4a0c      	ldr	r2, [pc, #48]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800786e:	8852      	ldrh	r2, [r2, #2]
 8007870:	b292      	uxth	r2, r2
 8007872:	4611      	mov	r1, r2
 8007874:	88fa      	ldrh	r2, [r7, #6]
 8007876:	1a8a      	subs	r2, r1, r2
 8007878:	3a01      	subs	r2, #1
 800787a:	4909      	ldr	r1, [pc, #36]	; (80078a0 <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800787c:	8809      	ldrh	r1, [r1, #0]
 800787e:	b289      	uxth	r1, r1
 8007880:	fb01 f102 	mul.w	r1, r1, r2
 8007884:	88ba      	ldrh	r2, [r7, #4]
 8007886:	440a      	add	r2, r1
 8007888:	fb02 f200 	mul.w	r2, r2, r0
 800788c:	4413      	add	r3, r2
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	e000      	b.n	8007894 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	}
	return 0;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bc90      	pop	{r4, r7}
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	20001ed0 	.word	0x20001ed0

080078a4 <TM_EXTI_Handler>:
	EXTI->FTSR &= 0xFFFF0000;
	EXTI->RTSR &= 0xFFFF0000;
	EXTI->PR &= 0xFFFF0000;
}

__weak void TM_EXTI_Handler(uint16_t GPIO_Pin) {
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the TM_EXTI_Handler could be implemented in the user file
   */ 
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
	...

080078bc <EXTI0_IRQHandler>:
/******************************************************************/

#if defined(STM32F4xx) || defined(STM32F7xx)

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_0
void EXTI0_IRQHandler(void) {
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR0)) {
 80078c0:	4b06      	ldr	r3, [pc, #24]	; (80078dc <EXTI0_IRQHandler+0x20>)
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <EXTI0_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR0;
 80078cc:	4b03      	ldr	r3, [pc, #12]	; (80078dc <EXTI0_IRQHandler+0x20>)
 80078ce:	2201      	movs	r2, #1
 80078d0:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_0);
 80078d2:	2001      	movs	r0, #1
 80078d4:	f7ff ffe6 	bl	80078a4 <TM_EXTI_Handler>
	}
}
 80078d8:	bf00      	nop
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	40013c00 	.word	0x40013c00

080078e0 <EXTI1_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_1
void EXTI1_IRQHandler(void) {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR1)) {
 80078e4:	4b06      	ldr	r3, [pc, #24]	; (8007900 <EXTI1_IRQHandler+0x20>)
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d005      	beq.n	80078fc <EXTI1_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR1;
 80078f0:	4b03      	ldr	r3, [pc, #12]	; (8007900 <EXTI1_IRQHandler+0x20>)
 80078f2:	2202      	movs	r2, #2
 80078f4:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_1);
 80078f6:	2002      	movs	r0, #2
 80078f8:	f7ff ffd4 	bl	80078a4 <TM_EXTI_Handler>
	}
}
 80078fc:	bf00      	nop
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40013c00 	.word	0x40013c00

08007904 <EXTI2_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_2
void EXTI2_IRQHandler(void) {
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR2)) {
 8007908:	4b06      	ldr	r3, [pc, #24]	; (8007924 <EXTI2_IRQHandler+0x20>)
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	f003 0304 	and.w	r3, r3, #4
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <EXTI2_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR2;
 8007914:	4b03      	ldr	r3, [pc, #12]	; (8007924 <EXTI2_IRQHandler+0x20>)
 8007916:	2204      	movs	r2, #4
 8007918:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_2);
 800791a:	2004      	movs	r0, #4
 800791c:	f7ff ffc2 	bl	80078a4 <TM_EXTI_Handler>
	}
}
 8007920:	bf00      	nop
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40013c00 	.word	0x40013c00

08007928 <EXTI3_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_3
void EXTI3_IRQHandler(void) {
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR3)) {
 800792c:	4b06      	ldr	r3, [pc, #24]	; (8007948 <EXTI3_IRQHandler+0x20>)
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <EXTI3_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR3;
 8007938:	4b03      	ldr	r3, [pc, #12]	; (8007948 <EXTI3_IRQHandler+0x20>)
 800793a:	2208      	movs	r2, #8
 800793c:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_3);
 800793e:	2008      	movs	r0, #8
 8007940:	f7ff ffb0 	bl	80078a4 <TM_EXTI_Handler>
	}
}
 8007944:	bf00      	nop
 8007946:	bd80      	pop	{r7, pc}
 8007948:	40013c00 	.word	0x40013c00

0800794c <EXTI4_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_4
void EXTI4_IRQHandler(void) {
 800794c:	b580      	push	{r7, lr}
 800794e:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR4)) {
 8007950:	4b06      	ldr	r3, [pc, #24]	; (800796c <EXTI4_IRQHandler+0x20>)
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	f003 0310 	and.w	r3, r3, #16
 8007958:	2b00      	cmp	r3, #0
 800795a:	d005      	beq.n	8007968 <EXTI4_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR4;
 800795c:	4b03      	ldr	r3, [pc, #12]	; (800796c <EXTI4_IRQHandler+0x20>)
 800795e:	2210      	movs	r2, #16
 8007960:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_4);
 8007962:	2010      	movs	r0, #16
 8007964:	f7ff ff9e 	bl	80078a4 <TM_EXTI_Handler>
	}
}
 8007968:	bf00      	nop
 800796a:	bd80      	pop	{r7, pc}
 800796c:	40013c00 	.word	0x40013c00

08007970 <EXTI9_5_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_9_5
void EXTI9_5_IRQHandler(void) {
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR5)) {
 8007974:	4b20      	ldr	r3, [pc, #128]	; (80079f8 <EXTI9_5_IRQHandler+0x88>)
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <EXTI9_5_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR5;
 8007980:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <EXTI9_5_IRQHandler+0x88>)
 8007982:	2220      	movs	r2, #32
 8007984:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_5);
 8007986:	2020      	movs	r0, #32
 8007988:	f7ff ff8c 	bl	80078a4 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR6)) {
 800798c:	4b1a      	ldr	r3, [pc, #104]	; (80079f8 <EXTI9_5_IRQHandler+0x88>)
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007994:	2b00      	cmp	r3, #0
 8007996:	d005      	beq.n	80079a4 <EXTI9_5_IRQHandler+0x34>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR6;
 8007998:	4b17      	ldr	r3, [pc, #92]	; (80079f8 <EXTI9_5_IRQHandler+0x88>)
 800799a:	2240      	movs	r2, #64	; 0x40
 800799c:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_6);
 800799e:	2040      	movs	r0, #64	; 0x40
 80079a0:	f7ff ff80 	bl	80078a4 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR7)) {
 80079a4:	4b14      	ldr	r3, [pc, #80]	; (80079f8 <EXTI9_5_IRQHandler+0x88>)
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d005      	beq.n	80079bc <EXTI9_5_IRQHandler+0x4c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR7;
 80079b0:	4b11      	ldr	r3, [pc, #68]	; (80079f8 <EXTI9_5_IRQHandler+0x88>)
 80079b2:	2280      	movs	r2, #128	; 0x80
 80079b4:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_7);
 80079b6:	2080      	movs	r0, #128	; 0x80
 80079b8:	f7ff ff74 	bl	80078a4 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR8)) {
 80079bc:	4b0e      	ldr	r3, [pc, #56]	; (80079f8 <EXTI9_5_IRQHandler+0x88>)
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d007      	beq.n	80079d8 <EXTI9_5_IRQHandler+0x68>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR8;
 80079c8:	4b0b      	ldr	r3, [pc, #44]	; (80079f8 <EXTI9_5_IRQHandler+0x88>)
 80079ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079ce:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_8);
 80079d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079d4:	f7ff ff66 	bl	80078a4 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR9)) {
 80079d8:	4b07      	ldr	r3, [pc, #28]	; (80079f8 <EXTI9_5_IRQHandler+0x88>)
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d007      	beq.n	80079f4 <EXTI9_5_IRQHandler+0x84>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR9;
 80079e4:	4b04      	ldr	r3, [pc, #16]	; (80079f8 <EXTI9_5_IRQHandler+0x88>)
 80079e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079ea:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_9);
 80079ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80079f0:	f7ff ff58 	bl	80078a4 <TM_EXTI_Handler>
	}
}
 80079f4:	bf00      	nop
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	40013c00 	.word	0x40013c00

080079fc <EXTI15_10_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_15_10
void EXTI15_10_IRQHandler(void) {
 80079fc:	b580      	push	{r7, lr}
 80079fe:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR10)) {
 8007a00:	4b2a      	ldr	r3, [pc, #168]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d007      	beq.n	8007a1c <EXTI15_10_IRQHandler+0x20>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR10;
 8007a0c:	4b27      	ldr	r3, [pc, #156]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a12:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_10);
 8007a14:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007a18:	f7ff ff44 	bl	80078a4 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR11)) {
 8007a1c:	4b23      	ldr	r3, [pc, #140]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d007      	beq.n	8007a38 <EXTI15_10_IRQHandler+0x3c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR11;
 8007a28:	4b20      	ldr	r3, [pc, #128]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a2e:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_11);
 8007a30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007a34:	f7ff ff36 	bl	80078a4 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR12)) {
 8007a38:	4b1c      	ldr	r3, [pc, #112]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <EXTI15_10_IRQHandler+0x58>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR12;
 8007a44:	4b19      	ldr	r3, [pc, #100]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a4a:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_12);
 8007a4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007a50:	f7ff ff28 	bl	80078a4 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR13)) {
 8007a54:	4b15      	ldr	r3, [pc, #84]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d007      	beq.n	8007a70 <EXTI15_10_IRQHandler+0x74>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR13;
 8007a60:	4b12      	ldr	r3, [pc, #72]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a66:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_13);
 8007a68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007a6c:	f7ff ff1a 	bl	80078a4 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR14)) {
 8007a70:	4b0e      	ldr	r3, [pc, #56]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d007      	beq.n	8007a8c <EXTI15_10_IRQHandler+0x90>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR14;
 8007a7c:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a82:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_14);
 8007a84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007a88:	f7ff ff0c 	bl	80078a4 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR15)) {
 8007a8c:	4b07      	ldr	r3, [pc, #28]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a8e:	695b      	ldr	r3, [r3, #20]
 8007a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d007      	beq.n	8007aa8 <EXTI15_10_IRQHandler+0xac>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR15;
 8007a98:	4b04      	ldr	r3, [pc, #16]	; (8007aac <EXTI15_10_IRQHandler+0xb0>)
 8007a9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007a9e:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_15);
 8007aa0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007aa4:	f7ff fefe 	bl	80078a4 <TM_EXTI_Handler>
	}
}
 8007aa8:	bf00      	nop
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	40013c00 	.word	0x40013c00

08007ab0 <TM_LCD_SetXY>:
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_SetXY(uint16_t X, uint16_t Y) {
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	460a      	mov	r2, r1
 8007aba:	80fb      	strh	r3, [r7, #6]
 8007abc:	4613      	mov	r3, r2
 8007abe:	80bb      	strh	r3, [r7, #4]
	/* Check if we are inside LCD */
	if (X >= LCD.CurrentWidth || Y >= LCD.CurrentHeight) {
 8007ac0:	4b0d      	ldr	r3, [pc, #52]	; (8007af8 <TM_LCD_SetXY+0x48>)
 8007ac2:	889b      	ldrh	r3, [r3, #4]
 8007ac4:	88fa      	ldrh	r2, [r7, #6]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d204      	bcs.n	8007ad4 <TM_LCD_SetXY+0x24>
 8007aca:	4b0b      	ldr	r3, [pc, #44]	; (8007af8 <TM_LCD_SetXY+0x48>)
 8007acc:	88db      	ldrh	r3, [r3, #6]
 8007ace:	88ba      	ldrh	r2, [r7, #4]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d301      	bcc.n	8007ad8 <TM_LCD_SetXY+0x28>
		return TM_LCD_Result_Error;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e009      	b.n	8007aec <TM_LCD_SetXY+0x3c>
	}
	
	/* Set new values */
	LCD.CurrentX = X;
 8007ad8:	4a07      	ldr	r2, [pc, #28]	; (8007af8 <TM_LCD_SetXY+0x48>)
 8007ada:	88fb      	ldrh	r3, [r7, #6]
 8007adc:	8513      	strh	r3, [r2, #40]	; 0x28
	LCD.CurrentY = Y;
 8007ade:	4a06      	ldr	r2, [pc, #24]	; (8007af8 <TM_LCD_SetXY+0x48>)
 8007ae0:	88bb      	ldrh	r3, [r7, #4]
 8007ae2:	8593      	strh	r3, [r2, #44]	; 0x2c
	LCD.StartX = X;
 8007ae4:	4a04      	ldr	r2, [pc, #16]	; (8007af8 <TM_LCD_SetXY+0x48>)
 8007ae6:	88fb      	ldrh	r3, [r7, #6]
 8007ae8:	8553      	strh	r3, [r2, #42]	; 0x2a
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	20001518 	.word	0x20001518

08007afc <TM_LCD_SetFont>:
uint16_t TM_LCD_GetCurrentY(void) {
	/* Return current Y location for strings */
	return LCD.CurrentY;
}

TM_LCD_Result_t TM_LCD_SetFont(TM_FONT_t* Font) {
 8007afc:	b480      	push	{r7}
 8007afe:	b083      	sub	sp, #12
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
	/* Set new font used for drawing */
	LCD.CurrentFont = Font;
 8007b04:	4a04      	ldr	r2, [pc, #16]	; (8007b18 <TM_LCD_SetFont+0x1c>)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6253      	str	r3, [r2, #36]	; 0x24
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	20001518 	.word	0x20001518

08007b1c <TM_LCD_Putc>:
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_Putc(char c) {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	71fb      	strb	r3, [r7, #7]
	uint32_t i, b, j;
	
	/* Check current coordinates */
	if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth || c == '\n') {
 8007b26:	4b4d      	ldr	r3, [pc, #308]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	4b4b      	ldr	r3, [pc, #300]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	4413      	add	r3, r2
 8007b34:	4a49      	ldr	r2, [pc, #292]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b36:	8892      	ldrh	r2, [r2, #4]
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	da02      	bge.n	8007b42 <TM_LCD_Putc+0x26>
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	2b0a      	cmp	r3, #10
 8007b40:	d123      	bne.n	8007b8a <TM_LCD_Putc+0x6e>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		LCD.CurrentY += LCD.CurrentFont->FontHeight;
 8007b42:	4b46      	ldr	r3, [pc, #280]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b46:	4b45      	ldr	r3, [pc, #276]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	785b      	ldrb	r3, [r3, #1]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4413      	add	r3, r2
 8007b50:	b29a      	uxth	r2, r3
 8007b52:	4b42      	ldr	r3, [pc, #264]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b54:	859a      	strh	r2, [r3, #44]	; 0x2c
		LCD.CurrentX = LCD.StartX;
 8007b56:	4b41      	ldr	r3, [pc, #260]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007b5a:	4b40      	ldr	r3, [pc, #256]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b5c:	851a      	strh	r2, [r3, #40]	; 0x28
		
		/* Check X */
		if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth) {
 8007b5e:	4b3f      	ldr	r3, [pc, #252]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b62:	461a      	mov	r2, r3
 8007b64:	4b3d      	ldr	r3, [pc, #244]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	4a3b      	ldr	r2, [pc, #236]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b6e:	8892      	ldrh	r2, [r2, #4]
 8007b70:	4293      	cmp	r3, r2
 8007b72:	db02      	blt.n	8007b7a <TM_LCD_Putc+0x5e>
			LCD.CurrentX = 0;
 8007b74:	4b39      	ldr	r3, [pc, #228]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		
		/* Check for Y position */
		if (LCD.CurrentY >= LCD.CurrentHeight) {
 8007b7a:	4b38      	ldr	r3, [pc, #224]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b7e:	4b37      	ldr	r3, [pc, #220]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b80:	88db      	ldrh	r3, [r3, #6]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d301      	bcc.n	8007b8a <TM_LCD_Putc+0x6e>
			/* Return error */
			return TM_LCD_Result_Error;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e063      	b.n	8007c52 <TM_LCD_Putc+0x136>
		}
	}
	
	/* Draw character */
	if (c != '\n') {
 8007b8a:	79fb      	ldrb	r3, [r7, #7]
 8007b8c:	2b0a      	cmp	r3, #10
 8007b8e:	d05f      	beq.n	8007c50 <TM_LCD_Putc+0x134>
		/* Draw all pixels */
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
 8007b90:	2300      	movs	r3, #0
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	e04b      	b.n	8007c2e <TM_LCD_Putc+0x112>
			b = LCD.CurrentFont->data[(c - 32) * LCD.CurrentFont->FontHeight + i];
 8007b96:	4b31      	ldr	r3, [pc, #196]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	3b20      	subs	r3, #32
 8007ba0:	492e      	ldr	r1, [pc, #184]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007ba2:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007ba4:	7849      	ldrb	r1, [r1, #1]
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	4619      	mov	r1, r3
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	440b      	add	r3, r1
 8007bb0:	005b      	lsls	r3, r3, #1
 8007bb2:	4413      	add	r3, r2
 8007bb4:	881b      	ldrh	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 8007bb8:	2300      	movs	r3, #0
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	e02d      	b.n	8007c1a <TM_LCD_Putc+0xfe>
				if ((b << j) & 0x8000) {
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d011      	beq.n	8007bf2 <TM_LCD_Putc+0xd6>
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.ForegroundColor);
 8007bce:	4b23      	ldr	r3, [pc, #140]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007bd0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	b298      	uxth	r0, r3
 8007bda:	4b20      	ldr	r3, [pc, #128]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007bdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	4413      	add	r3, r2
 8007be4:	b299      	uxth	r1, r3
 8007be6:	4b1d      	ldr	r3, [pc, #116]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007be8:	69db      	ldr	r3, [r3, #28]
 8007bea:	461a      	mov	r2, r3
 8007bec:	f7ff fd2c 	bl	8007648 <TM_DMA2DGRAPHIC_DrawPixel>
 8007bf0:	e010      	b.n	8007c14 <TM_LCD_Putc+0xf8>
				} else {
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.BackgroundColor);
 8007bf2:	4b1a      	ldr	r3, [pc, #104]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007bf4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	4413      	add	r3, r2
 8007bfc:	b298      	uxth	r0, r3
 8007bfe:	4b17      	ldr	r3, [pc, #92]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007c00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	4413      	add	r3, r2
 8007c08:	b299      	uxth	r1, r3
 8007c0a:	4b14      	ldr	r3, [pc, #80]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	f7ff fd1a 	bl	8007648 <TM_DMA2DGRAPHIC_DrawPixel>
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	3301      	adds	r3, #1
 8007c18:	613b      	str	r3, [r7, #16]
 8007c1a:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	461a      	mov	r2, r3
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d3ca      	bcc.n	8007bbe <TM_LCD_Putc+0xa2>
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	4b0b      	ldr	r3, [pc, #44]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	785b      	ldrb	r3, [r3, #1]
 8007c34:	461a      	mov	r2, r3
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d3ac      	bcc.n	8007b96 <TM_LCD_Putc+0x7a>
				}
			}
		}
	
		/* Set new current X location */
		LCD.CurrentX += LCD.CurrentFont->FontWidth;
 8007c3c:	4b07      	ldr	r3, [pc, #28]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007c3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007c40:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	4413      	add	r3, r2
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	4b03      	ldr	r3, [pc, #12]	; (8007c5c <TM_LCD_Putc+0x140>)
 8007c4e:	851a      	strh	r2, [r3, #40]	; 0x28
	}
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	20001518 	.word	0x20001518

08007c60 <TM_LCD_DrawPixel>:

TM_LCD_Result_t TM_LCD_DrawPixel(uint16_t X, uint16_t Y, uint32_t color) {
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	4603      	mov	r3, r0
 8007c68:	603a      	str	r2, [r7, #0]
 8007c6a:	80fb      	strh	r3, [r7, #6]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	80bb      	strh	r3, [r7, #4]
	/* Draw pixel at desired location */
	TM_DMA2DGRAPHIC_DrawPixel(X, Y, color);
 8007c70:	88b9      	ldrh	r1, [r7, #4]
 8007c72:	88fb      	ldrh	r3, [r7, #6]
 8007c74:	683a      	ldr	r2, [r7, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7ff fce6 	bl	8007648 <TM_DMA2DGRAPHIC_DrawPixel>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <TM_LCD_GetPixel>:

uint32_t TM_LCD_GetPixel(uint16_t X, uint16_t Y) {
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	460a      	mov	r2, r1
 8007c90:	80fb      	strh	r3, [r7, #6]
 8007c92:	4613      	mov	r3, r2
 8007c94:	80bb      	strh	r3, [r7, #4]
	/* Get pixel at desired location */
	return TM_DMA2DGRAPHIC_GetPixel(X, Y);
 8007c96:	88ba      	ldrh	r2, [r7, #4]
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fd6d 	bl	800777c <TM_DMA2DGRAPHIC_GetPixel>
 8007ca2:	4603      	mov	r3, r0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <TM_LCD_Puts>:

TM_LCD_Result_t TM_LCD_Puts(char* str) {
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	/* Send till string ends or error returned */
	while (*str) {
 8007cb4:	e00c      	b.n	8007cd0 <TM_LCD_Puts+0x24>
		/* Check if string OK */
		if (TM_LCD_Putc(*str) != TM_LCD_Result_Ok) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff ff2e 	bl	8007b1c <TM_LCD_Putc>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <TM_LCD_Puts+0x1e>
			/* Return error */
			return TM_LCD_Result_Error;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e007      	b.n	8007cda <TM_LCD_Puts+0x2e>
		}
		
		/* Increase pointer */
		str++;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	607b      	str	r3, [r7, #4]
	while (*str) {
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1ee      	bne.n	8007cb6 <TM_LCD_Puts+0xa>
	}
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <TM_LCD_GetHeight>:

uint16_t TM_LCD_GetWidth(void) {
	return LCD.CurrentWidth;
}

uint16_t TM_LCD_GetHeight(void) {
 8007ce4:	b480      	push	{r7}
 8007ce6:	af00      	add	r7, sp, #0
	return LCD.CurrentHeight;
 8007ce8:	4b03      	ldr	r3, [pc, #12]	; (8007cf8 <TM_LCD_GetHeight+0x14>)
 8007cea:	88db      	ldrh	r3, [r3, #6]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	20001518 	.word	0x20001518

08007cfc <LTDC_IRQHandler>:
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_10 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF9_LTDC);
#endif
}

/* Interrupt handler */
void LTDC_IRQHandler(void) {
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	af00      	add	r7, sp, #0
    HAL_LTDC_IRQHandler(&LTDCHandle);
 8007d00:	4802      	ldr	r0, [pc, #8]	; (8007d0c <LTDC_IRQHandler+0x10>)
 8007d02:	f7fd fc11 	bl	8005528 <HAL_LTDC_IRQHandler>
}
 8007d06:	bf00      	nop
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20001470 	.word	0x20001470

08007d10 <TM_PVD_Handler>:
}

/*****************************************************************/
/*                 PVD INTERRUPT USER CALLBACK                   */
/*****************************************************************/
__weak void TM_PVD_Handler(uint8_t status) {
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	71fb      	strb	r3, [r7, #7]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_PVD_Handler could be implemented in the user file
	*/
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
	...

08007d28 <PVD_IRQHandler>:

/*****************************************************************/
/*                    PVD INTERRUPT HANDLER                      */
/*****************************************************************/
void PVD_IRQHandler(void) {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
	/* Call user function if needed */
	if (__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET) {
 8007d2c:	4b0b      	ldr	r3, [pc, #44]	; (8007d5c <PVD_IRQHandler+0x34>)
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00f      	beq.n	8007d58 <PVD_IRQHandler+0x30>
#if defined(PWR_CSR_PVDO)	
		/* Call user function with status */
		TM_PVD_Handler((PWR->CSR & PWR_CSR_PVDO) ? 1 : 0);
 8007d38:	4b09      	ldr	r3, [pc, #36]	; (8007d60 <PVD_IRQHandler+0x38>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	bf14      	ite	ne
 8007d44:	2301      	movne	r3, #1
 8007d46:	2300      	moveq	r3, #0
 8007d48:	b2db      	uxtb	r3, r3
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff ffe0 	bl	8007d10 <TM_PVD_Handler>
#if defined(PWR_CSR1_PVDO)
		/* Call user function with status */
		TM_PVD_Handler((PWR->CSR1 & PWR_CSR1_PVDO) ? 1 : 0);
#endif
		/* Clear PWR EXTI pending bit */
		__HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8007d50:	4b02      	ldr	r3, [pc, #8]	; (8007d5c <PVD_IRQHandler+0x34>)
 8007d52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007d56:	615a      	str	r2, [r3, #20]
	}
}
 8007d58:	bf00      	nop
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	40013c00 	.word	0x40013c00
 8007d60:	40007000 	.word	0x40007000

08007d64 <__errno>:
 8007d64:	4b01      	ldr	r3, [pc, #4]	; (8007d6c <__errno+0x8>)
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	20001254 	.word	0x20001254

08007d70 <__libc_init_array>:
 8007d70:	b570      	push	{r4, r5, r6, lr}
 8007d72:	4e0d      	ldr	r6, [pc, #52]	; (8007da8 <__libc_init_array+0x38>)
 8007d74:	4c0d      	ldr	r4, [pc, #52]	; (8007dac <__libc_init_array+0x3c>)
 8007d76:	1ba4      	subs	r4, r4, r6
 8007d78:	10a4      	asrs	r4, r4, #2
 8007d7a:	2500      	movs	r5, #0
 8007d7c:	42a5      	cmp	r5, r4
 8007d7e:	d109      	bne.n	8007d94 <__libc_init_array+0x24>
 8007d80:	4e0b      	ldr	r6, [pc, #44]	; (8007db0 <__libc_init_array+0x40>)
 8007d82:	4c0c      	ldr	r4, [pc, #48]	; (8007db4 <__libc_init_array+0x44>)
 8007d84:	f005 f930 	bl	800cfe8 <_init>
 8007d88:	1ba4      	subs	r4, r4, r6
 8007d8a:	10a4      	asrs	r4, r4, #2
 8007d8c:	2500      	movs	r5, #0
 8007d8e:	42a5      	cmp	r5, r4
 8007d90:	d105      	bne.n	8007d9e <__libc_init_array+0x2e>
 8007d92:	bd70      	pop	{r4, r5, r6, pc}
 8007d94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d98:	4798      	blx	r3
 8007d9a:	3501      	adds	r5, #1
 8007d9c:	e7ee      	b.n	8007d7c <__libc_init_array+0xc>
 8007d9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007da2:	4798      	blx	r3
 8007da4:	3501      	adds	r5, #1
 8007da6:	e7f2      	b.n	8007d8e <__libc_init_array+0x1e>
 8007da8:	0800ea70 	.word	0x0800ea70
 8007dac:	0800ea70 	.word	0x0800ea70
 8007db0:	0800ea70 	.word	0x0800ea70
 8007db4:	0800ea74 	.word	0x0800ea74

08007db8 <malloc>:
 8007db8:	4b02      	ldr	r3, [pc, #8]	; (8007dc4 <malloc+0xc>)
 8007dba:	4601      	mov	r1, r0
 8007dbc:	6818      	ldr	r0, [r3, #0]
 8007dbe:	f000 b885 	b.w	8007ecc <_malloc_r>
 8007dc2:	bf00      	nop
 8007dc4:	20001254 	.word	0x20001254

08007dc8 <free>:
 8007dc8:	4b02      	ldr	r3, [pc, #8]	; (8007dd4 <free+0xc>)
 8007dca:	4601      	mov	r1, r0
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	f000 b82f 	b.w	8007e30 <_free_r>
 8007dd2:	bf00      	nop
 8007dd4:	20001254 	.word	0x20001254

08007dd8 <memcpy>:
 8007dd8:	b510      	push	{r4, lr}
 8007dda:	1e43      	subs	r3, r0, #1
 8007ddc:	440a      	add	r2, r1
 8007dde:	4291      	cmp	r1, r2
 8007de0:	d100      	bne.n	8007de4 <memcpy+0xc>
 8007de2:	bd10      	pop	{r4, pc}
 8007de4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007de8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007dec:	e7f7      	b.n	8007dde <memcpy+0x6>

08007dee <memmove>:
 8007dee:	4288      	cmp	r0, r1
 8007df0:	b510      	push	{r4, lr}
 8007df2:	eb01 0302 	add.w	r3, r1, r2
 8007df6:	d807      	bhi.n	8007e08 <memmove+0x1a>
 8007df8:	1e42      	subs	r2, r0, #1
 8007dfa:	4299      	cmp	r1, r3
 8007dfc:	d00a      	beq.n	8007e14 <memmove+0x26>
 8007dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e02:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e06:	e7f8      	b.n	8007dfa <memmove+0xc>
 8007e08:	4283      	cmp	r3, r0
 8007e0a:	d9f5      	bls.n	8007df8 <memmove+0xa>
 8007e0c:	1881      	adds	r1, r0, r2
 8007e0e:	1ad2      	subs	r2, r2, r3
 8007e10:	42d3      	cmn	r3, r2
 8007e12:	d100      	bne.n	8007e16 <memmove+0x28>
 8007e14:	bd10      	pop	{r4, pc}
 8007e16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e1a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e1e:	e7f7      	b.n	8007e10 <memmove+0x22>

08007e20 <memset>:
 8007e20:	4402      	add	r2, r0
 8007e22:	4603      	mov	r3, r0
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d100      	bne.n	8007e2a <memset+0xa>
 8007e28:	4770      	bx	lr
 8007e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e2e:	e7f9      	b.n	8007e24 <memset+0x4>

08007e30 <_free_r>:
 8007e30:	b538      	push	{r3, r4, r5, lr}
 8007e32:	4605      	mov	r5, r0
 8007e34:	2900      	cmp	r1, #0
 8007e36:	d045      	beq.n	8007ec4 <_free_r+0x94>
 8007e38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e3c:	1f0c      	subs	r4, r1, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bfb8      	it	lt
 8007e42:	18e4      	addlt	r4, r4, r3
 8007e44:	f002 ff64 	bl	800ad10 <__malloc_lock>
 8007e48:	4a1f      	ldr	r2, [pc, #124]	; (8007ec8 <_free_r+0x98>)
 8007e4a:	6813      	ldr	r3, [r2, #0]
 8007e4c:	4610      	mov	r0, r2
 8007e4e:	b933      	cbnz	r3, 8007e5e <_free_r+0x2e>
 8007e50:	6063      	str	r3, [r4, #4]
 8007e52:	6014      	str	r4, [r2, #0]
 8007e54:	4628      	mov	r0, r5
 8007e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e5a:	f002 bf5a 	b.w	800ad12 <__malloc_unlock>
 8007e5e:	42a3      	cmp	r3, r4
 8007e60:	d90c      	bls.n	8007e7c <_free_r+0x4c>
 8007e62:	6821      	ldr	r1, [r4, #0]
 8007e64:	1862      	adds	r2, r4, r1
 8007e66:	4293      	cmp	r3, r2
 8007e68:	bf04      	itt	eq
 8007e6a:	681a      	ldreq	r2, [r3, #0]
 8007e6c:	685b      	ldreq	r3, [r3, #4]
 8007e6e:	6063      	str	r3, [r4, #4]
 8007e70:	bf04      	itt	eq
 8007e72:	1852      	addeq	r2, r2, r1
 8007e74:	6022      	streq	r2, [r4, #0]
 8007e76:	6004      	str	r4, [r0, #0]
 8007e78:	e7ec      	b.n	8007e54 <_free_r+0x24>
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	b10a      	cbz	r2, 8007e84 <_free_r+0x54>
 8007e80:	42a2      	cmp	r2, r4
 8007e82:	d9fa      	bls.n	8007e7a <_free_r+0x4a>
 8007e84:	6819      	ldr	r1, [r3, #0]
 8007e86:	1858      	adds	r0, r3, r1
 8007e88:	42a0      	cmp	r0, r4
 8007e8a:	d10b      	bne.n	8007ea4 <_free_r+0x74>
 8007e8c:	6820      	ldr	r0, [r4, #0]
 8007e8e:	4401      	add	r1, r0
 8007e90:	1858      	adds	r0, r3, r1
 8007e92:	4282      	cmp	r2, r0
 8007e94:	6019      	str	r1, [r3, #0]
 8007e96:	d1dd      	bne.n	8007e54 <_free_r+0x24>
 8007e98:	6810      	ldr	r0, [r2, #0]
 8007e9a:	6852      	ldr	r2, [r2, #4]
 8007e9c:	605a      	str	r2, [r3, #4]
 8007e9e:	4401      	add	r1, r0
 8007ea0:	6019      	str	r1, [r3, #0]
 8007ea2:	e7d7      	b.n	8007e54 <_free_r+0x24>
 8007ea4:	d902      	bls.n	8007eac <_free_r+0x7c>
 8007ea6:	230c      	movs	r3, #12
 8007ea8:	602b      	str	r3, [r5, #0]
 8007eaa:	e7d3      	b.n	8007e54 <_free_r+0x24>
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	1821      	adds	r1, r4, r0
 8007eb0:	428a      	cmp	r2, r1
 8007eb2:	bf04      	itt	eq
 8007eb4:	6811      	ldreq	r1, [r2, #0]
 8007eb6:	6852      	ldreq	r2, [r2, #4]
 8007eb8:	6062      	str	r2, [r4, #4]
 8007eba:	bf04      	itt	eq
 8007ebc:	1809      	addeq	r1, r1, r0
 8007ebe:	6021      	streq	r1, [r4, #0]
 8007ec0:	605c      	str	r4, [r3, #4]
 8007ec2:	e7c7      	b.n	8007e54 <_free_r+0x24>
 8007ec4:	bd38      	pop	{r3, r4, r5, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20001548 	.word	0x20001548

08007ecc <_malloc_r>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	1ccd      	adds	r5, r1, #3
 8007ed0:	f025 0503 	bic.w	r5, r5, #3
 8007ed4:	3508      	adds	r5, #8
 8007ed6:	2d0c      	cmp	r5, #12
 8007ed8:	bf38      	it	cc
 8007eda:	250c      	movcc	r5, #12
 8007edc:	2d00      	cmp	r5, #0
 8007ede:	4606      	mov	r6, r0
 8007ee0:	db01      	blt.n	8007ee6 <_malloc_r+0x1a>
 8007ee2:	42a9      	cmp	r1, r5
 8007ee4:	d903      	bls.n	8007eee <_malloc_r+0x22>
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	6033      	str	r3, [r6, #0]
 8007eea:	2000      	movs	r0, #0
 8007eec:	bd70      	pop	{r4, r5, r6, pc}
 8007eee:	f002 ff0f 	bl	800ad10 <__malloc_lock>
 8007ef2:	4a21      	ldr	r2, [pc, #132]	; (8007f78 <_malloc_r+0xac>)
 8007ef4:	6814      	ldr	r4, [r2, #0]
 8007ef6:	4621      	mov	r1, r4
 8007ef8:	b991      	cbnz	r1, 8007f20 <_malloc_r+0x54>
 8007efa:	4c20      	ldr	r4, [pc, #128]	; (8007f7c <_malloc_r+0xb0>)
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	b91b      	cbnz	r3, 8007f08 <_malloc_r+0x3c>
 8007f00:	4630      	mov	r0, r6
 8007f02:	f000 fe7b 	bl	8008bfc <_sbrk_r>
 8007f06:	6020      	str	r0, [r4, #0]
 8007f08:	4629      	mov	r1, r5
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	f000 fe76 	bl	8008bfc <_sbrk_r>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d124      	bne.n	8007f5e <_malloc_r+0x92>
 8007f14:	230c      	movs	r3, #12
 8007f16:	6033      	str	r3, [r6, #0]
 8007f18:	4630      	mov	r0, r6
 8007f1a:	f002 fefa 	bl	800ad12 <__malloc_unlock>
 8007f1e:	e7e4      	b.n	8007eea <_malloc_r+0x1e>
 8007f20:	680b      	ldr	r3, [r1, #0]
 8007f22:	1b5b      	subs	r3, r3, r5
 8007f24:	d418      	bmi.n	8007f58 <_malloc_r+0x8c>
 8007f26:	2b0b      	cmp	r3, #11
 8007f28:	d90f      	bls.n	8007f4a <_malloc_r+0x7e>
 8007f2a:	600b      	str	r3, [r1, #0]
 8007f2c:	50cd      	str	r5, [r1, r3]
 8007f2e:	18cc      	adds	r4, r1, r3
 8007f30:	4630      	mov	r0, r6
 8007f32:	f002 feee 	bl	800ad12 <__malloc_unlock>
 8007f36:	f104 000b 	add.w	r0, r4, #11
 8007f3a:	1d23      	adds	r3, r4, #4
 8007f3c:	f020 0007 	bic.w	r0, r0, #7
 8007f40:	1ac3      	subs	r3, r0, r3
 8007f42:	d0d3      	beq.n	8007eec <_malloc_r+0x20>
 8007f44:	425a      	negs	r2, r3
 8007f46:	50e2      	str	r2, [r4, r3]
 8007f48:	e7d0      	b.n	8007eec <_malloc_r+0x20>
 8007f4a:	428c      	cmp	r4, r1
 8007f4c:	684b      	ldr	r3, [r1, #4]
 8007f4e:	bf16      	itet	ne
 8007f50:	6063      	strne	r3, [r4, #4]
 8007f52:	6013      	streq	r3, [r2, #0]
 8007f54:	460c      	movne	r4, r1
 8007f56:	e7eb      	b.n	8007f30 <_malloc_r+0x64>
 8007f58:	460c      	mov	r4, r1
 8007f5a:	6849      	ldr	r1, [r1, #4]
 8007f5c:	e7cc      	b.n	8007ef8 <_malloc_r+0x2c>
 8007f5e:	1cc4      	adds	r4, r0, #3
 8007f60:	f024 0403 	bic.w	r4, r4, #3
 8007f64:	42a0      	cmp	r0, r4
 8007f66:	d005      	beq.n	8007f74 <_malloc_r+0xa8>
 8007f68:	1a21      	subs	r1, r4, r0
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f000 fe46 	bl	8008bfc <_sbrk_r>
 8007f70:	3001      	adds	r0, #1
 8007f72:	d0cf      	beq.n	8007f14 <_malloc_r+0x48>
 8007f74:	6025      	str	r5, [r4, #0]
 8007f76:	e7db      	b.n	8007f30 <_malloc_r+0x64>
 8007f78:	20001548 	.word	0x20001548
 8007f7c:	2000154c 	.word	0x2000154c

08007f80 <__cvt>:
 8007f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f84:	ec55 4b10 	vmov	r4, r5, d0
 8007f88:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007f8a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007f8e:	2d00      	cmp	r5, #0
 8007f90:	460e      	mov	r6, r1
 8007f92:	4691      	mov	r9, r2
 8007f94:	4619      	mov	r1, r3
 8007f96:	bfb8      	it	lt
 8007f98:	4622      	movlt	r2, r4
 8007f9a:	462b      	mov	r3, r5
 8007f9c:	f027 0720 	bic.w	r7, r7, #32
 8007fa0:	bfbb      	ittet	lt
 8007fa2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fa6:	461d      	movlt	r5, r3
 8007fa8:	2300      	movge	r3, #0
 8007faa:	232d      	movlt	r3, #45	; 0x2d
 8007fac:	bfb8      	it	lt
 8007fae:	4614      	movlt	r4, r2
 8007fb0:	2f46      	cmp	r7, #70	; 0x46
 8007fb2:	700b      	strb	r3, [r1, #0]
 8007fb4:	d004      	beq.n	8007fc0 <__cvt+0x40>
 8007fb6:	2f45      	cmp	r7, #69	; 0x45
 8007fb8:	d100      	bne.n	8007fbc <__cvt+0x3c>
 8007fba:	3601      	adds	r6, #1
 8007fbc:	2102      	movs	r1, #2
 8007fbe:	e000      	b.n	8007fc2 <__cvt+0x42>
 8007fc0:	2103      	movs	r1, #3
 8007fc2:	ab03      	add	r3, sp, #12
 8007fc4:	9301      	str	r3, [sp, #4]
 8007fc6:	ab02      	add	r3, sp, #8
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	4632      	mov	r2, r6
 8007fcc:	4653      	mov	r3, sl
 8007fce:	ec45 4b10 	vmov	d0, r4, r5
 8007fd2:	f001 fd99 	bl	8009b08 <_dtoa_r>
 8007fd6:	2f47      	cmp	r7, #71	; 0x47
 8007fd8:	4680      	mov	r8, r0
 8007fda:	d102      	bne.n	8007fe2 <__cvt+0x62>
 8007fdc:	f019 0f01 	tst.w	r9, #1
 8007fe0:	d026      	beq.n	8008030 <__cvt+0xb0>
 8007fe2:	2f46      	cmp	r7, #70	; 0x46
 8007fe4:	eb08 0906 	add.w	r9, r8, r6
 8007fe8:	d111      	bne.n	800800e <__cvt+0x8e>
 8007fea:	f898 3000 	ldrb.w	r3, [r8]
 8007fee:	2b30      	cmp	r3, #48	; 0x30
 8007ff0:	d10a      	bne.n	8008008 <__cvt+0x88>
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f7f8 fd75 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ffe:	b918      	cbnz	r0, 8008008 <__cvt+0x88>
 8008000:	f1c6 0601 	rsb	r6, r6, #1
 8008004:	f8ca 6000 	str.w	r6, [sl]
 8008008:	f8da 3000 	ldr.w	r3, [sl]
 800800c:	4499      	add	r9, r3
 800800e:	2200      	movs	r2, #0
 8008010:	2300      	movs	r3, #0
 8008012:	4620      	mov	r0, r4
 8008014:	4629      	mov	r1, r5
 8008016:	f7f8 fd67 	bl	8000ae8 <__aeabi_dcmpeq>
 800801a:	b938      	cbnz	r0, 800802c <__cvt+0xac>
 800801c:	2230      	movs	r2, #48	; 0x30
 800801e:	9b03      	ldr	r3, [sp, #12]
 8008020:	454b      	cmp	r3, r9
 8008022:	d205      	bcs.n	8008030 <__cvt+0xb0>
 8008024:	1c59      	adds	r1, r3, #1
 8008026:	9103      	str	r1, [sp, #12]
 8008028:	701a      	strb	r2, [r3, #0]
 800802a:	e7f8      	b.n	800801e <__cvt+0x9e>
 800802c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008034:	eba3 0308 	sub.w	r3, r3, r8
 8008038:	4640      	mov	r0, r8
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	b004      	add	sp, #16
 800803e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008042 <__exponent>:
 8008042:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008044:	2900      	cmp	r1, #0
 8008046:	4604      	mov	r4, r0
 8008048:	bfba      	itte	lt
 800804a:	4249      	neglt	r1, r1
 800804c:	232d      	movlt	r3, #45	; 0x2d
 800804e:	232b      	movge	r3, #43	; 0x2b
 8008050:	2909      	cmp	r1, #9
 8008052:	f804 2b02 	strb.w	r2, [r4], #2
 8008056:	7043      	strb	r3, [r0, #1]
 8008058:	dd20      	ble.n	800809c <__exponent+0x5a>
 800805a:	f10d 0307 	add.w	r3, sp, #7
 800805e:	461f      	mov	r7, r3
 8008060:	260a      	movs	r6, #10
 8008062:	fb91 f5f6 	sdiv	r5, r1, r6
 8008066:	fb06 1115 	mls	r1, r6, r5, r1
 800806a:	3130      	adds	r1, #48	; 0x30
 800806c:	2d09      	cmp	r5, #9
 800806e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008072:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008076:	4629      	mov	r1, r5
 8008078:	dc09      	bgt.n	800808e <__exponent+0x4c>
 800807a:	3130      	adds	r1, #48	; 0x30
 800807c:	3b02      	subs	r3, #2
 800807e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008082:	42bb      	cmp	r3, r7
 8008084:	4622      	mov	r2, r4
 8008086:	d304      	bcc.n	8008092 <__exponent+0x50>
 8008088:	1a10      	subs	r0, r2, r0
 800808a:	b003      	add	sp, #12
 800808c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800808e:	4613      	mov	r3, r2
 8008090:	e7e7      	b.n	8008062 <__exponent+0x20>
 8008092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008096:	f804 2b01 	strb.w	r2, [r4], #1
 800809a:	e7f2      	b.n	8008082 <__exponent+0x40>
 800809c:	2330      	movs	r3, #48	; 0x30
 800809e:	4419      	add	r1, r3
 80080a0:	7083      	strb	r3, [r0, #2]
 80080a2:	1d02      	adds	r2, r0, #4
 80080a4:	70c1      	strb	r1, [r0, #3]
 80080a6:	e7ef      	b.n	8008088 <__exponent+0x46>

080080a8 <_printf_float>:
 80080a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	b08d      	sub	sp, #52	; 0x34
 80080ae:	460c      	mov	r4, r1
 80080b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80080b4:	4616      	mov	r6, r2
 80080b6:	461f      	mov	r7, r3
 80080b8:	4605      	mov	r5, r0
 80080ba:	f002 fe09 	bl	800acd0 <_localeconv_r>
 80080be:	6803      	ldr	r3, [r0, #0]
 80080c0:	9304      	str	r3, [sp, #16]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7f8 f894 	bl	80001f0 <strlen>
 80080c8:	2300      	movs	r3, #0
 80080ca:	930a      	str	r3, [sp, #40]	; 0x28
 80080cc:	f8d8 3000 	ldr.w	r3, [r8]
 80080d0:	9005      	str	r0, [sp, #20]
 80080d2:	3307      	adds	r3, #7
 80080d4:	f023 0307 	bic.w	r3, r3, #7
 80080d8:	f103 0208 	add.w	r2, r3, #8
 80080dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80080e0:	f8d4 b000 	ldr.w	fp, [r4]
 80080e4:	f8c8 2000 	str.w	r2, [r8]
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080f0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80080f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80080f8:	9307      	str	r3, [sp, #28]
 80080fa:	f8cd 8018 	str.w	r8, [sp, #24]
 80080fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008102:	4ba7      	ldr	r3, [pc, #668]	; (80083a0 <_printf_float+0x2f8>)
 8008104:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008108:	f7f8 fd20 	bl	8000b4c <__aeabi_dcmpun>
 800810c:	bb70      	cbnz	r0, 800816c <_printf_float+0xc4>
 800810e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008112:	4ba3      	ldr	r3, [pc, #652]	; (80083a0 <_printf_float+0x2f8>)
 8008114:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008118:	f7f8 fcfa 	bl	8000b10 <__aeabi_dcmple>
 800811c:	bb30      	cbnz	r0, 800816c <_printf_float+0xc4>
 800811e:	2200      	movs	r2, #0
 8008120:	2300      	movs	r3, #0
 8008122:	4640      	mov	r0, r8
 8008124:	4649      	mov	r1, r9
 8008126:	f7f8 fce9 	bl	8000afc <__aeabi_dcmplt>
 800812a:	b110      	cbz	r0, 8008132 <_printf_float+0x8a>
 800812c:	232d      	movs	r3, #45	; 0x2d
 800812e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008132:	4a9c      	ldr	r2, [pc, #624]	; (80083a4 <_printf_float+0x2fc>)
 8008134:	4b9c      	ldr	r3, [pc, #624]	; (80083a8 <_printf_float+0x300>)
 8008136:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800813a:	bf8c      	ite	hi
 800813c:	4690      	movhi	r8, r2
 800813e:	4698      	movls	r8, r3
 8008140:	2303      	movs	r3, #3
 8008142:	f02b 0204 	bic.w	r2, fp, #4
 8008146:	6123      	str	r3, [r4, #16]
 8008148:	6022      	str	r2, [r4, #0]
 800814a:	f04f 0900 	mov.w	r9, #0
 800814e:	9700      	str	r7, [sp, #0]
 8008150:	4633      	mov	r3, r6
 8008152:	aa0b      	add	r2, sp, #44	; 0x2c
 8008154:	4621      	mov	r1, r4
 8008156:	4628      	mov	r0, r5
 8008158:	f000 f9e6 	bl	8008528 <_printf_common>
 800815c:	3001      	adds	r0, #1
 800815e:	f040 808d 	bne.w	800827c <_printf_float+0x1d4>
 8008162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008166:	b00d      	add	sp, #52	; 0x34
 8008168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800816c:	4642      	mov	r2, r8
 800816e:	464b      	mov	r3, r9
 8008170:	4640      	mov	r0, r8
 8008172:	4649      	mov	r1, r9
 8008174:	f7f8 fcea 	bl	8000b4c <__aeabi_dcmpun>
 8008178:	b110      	cbz	r0, 8008180 <_printf_float+0xd8>
 800817a:	4a8c      	ldr	r2, [pc, #560]	; (80083ac <_printf_float+0x304>)
 800817c:	4b8c      	ldr	r3, [pc, #560]	; (80083b0 <_printf_float+0x308>)
 800817e:	e7da      	b.n	8008136 <_printf_float+0x8e>
 8008180:	6861      	ldr	r1, [r4, #4]
 8008182:	1c4b      	adds	r3, r1, #1
 8008184:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008188:	a80a      	add	r0, sp, #40	; 0x28
 800818a:	d13e      	bne.n	800820a <_printf_float+0x162>
 800818c:	2306      	movs	r3, #6
 800818e:	6063      	str	r3, [r4, #4]
 8008190:	2300      	movs	r3, #0
 8008192:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008196:	ab09      	add	r3, sp, #36	; 0x24
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	ec49 8b10 	vmov	d0, r8, r9
 800819e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	f8cd a004 	str.w	sl, [sp, #4]
 80081a8:	6861      	ldr	r1, [r4, #4]
 80081aa:	4628      	mov	r0, r5
 80081ac:	f7ff fee8 	bl	8007f80 <__cvt>
 80081b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80081b4:	2b47      	cmp	r3, #71	; 0x47
 80081b6:	4680      	mov	r8, r0
 80081b8:	d109      	bne.n	80081ce <_printf_float+0x126>
 80081ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081bc:	1cd8      	adds	r0, r3, #3
 80081be:	db02      	blt.n	80081c6 <_printf_float+0x11e>
 80081c0:	6862      	ldr	r2, [r4, #4]
 80081c2:	4293      	cmp	r3, r2
 80081c4:	dd47      	ble.n	8008256 <_printf_float+0x1ae>
 80081c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80081ca:	fa5f fa8a 	uxtb.w	sl, sl
 80081ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80081d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081d4:	d824      	bhi.n	8008220 <_printf_float+0x178>
 80081d6:	3901      	subs	r1, #1
 80081d8:	4652      	mov	r2, sl
 80081da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081de:	9109      	str	r1, [sp, #36]	; 0x24
 80081e0:	f7ff ff2f 	bl	8008042 <__exponent>
 80081e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081e6:	1813      	adds	r3, r2, r0
 80081e8:	2a01      	cmp	r2, #1
 80081ea:	4681      	mov	r9, r0
 80081ec:	6123      	str	r3, [r4, #16]
 80081ee:	dc02      	bgt.n	80081f6 <_printf_float+0x14e>
 80081f0:	6822      	ldr	r2, [r4, #0]
 80081f2:	07d1      	lsls	r1, r2, #31
 80081f4:	d501      	bpl.n	80081fa <_printf_float+0x152>
 80081f6:	3301      	adds	r3, #1
 80081f8:	6123      	str	r3, [r4, #16]
 80081fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0a5      	beq.n	800814e <_printf_float+0xa6>
 8008202:	232d      	movs	r3, #45	; 0x2d
 8008204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008208:	e7a1      	b.n	800814e <_printf_float+0xa6>
 800820a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800820e:	f000 8177 	beq.w	8008500 <_printf_float+0x458>
 8008212:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008216:	d1bb      	bne.n	8008190 <_printf_float+0xe8>
 8008218:	2900      	cmp	r1, #0
 800821a:	d1b9      	bne.n	8008190 <_printf_float+0xe8>
 800821c:	2301      	movs	r3, #1
 800821e:	e7b6      	b.n	800818e <_printf_float+0xe6>
 8008220:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008224:	d119      	bne.n	800825a <_printf_float+0x1b2>
 8008226:	2900      	cmp	r1, #0
 8008228:	6863      	ldr	r3, [r4, #4]
 800822a:	dd0c      	ble.n	8008246 <_printf_float+0x19e>
 800822c:	6121      	str	r1, [r4, #16]
 800822e:	b913      	cbnz	r3, 8008236 <_printf_float+0x18e>
 8008230:	6822      	ldr	r2, [r4, #0]
 8008232:	07d2      	lsls	r2, r2, #31
 8008234:	d502      	bpl.n	800823c <_printf_float+0x194>
 8008236:	3301      	adds	r3, #1
 8008238:	440b      	add	r3, r1
 800823a:	6123      	str	r3, [r4, #16]
 800823c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800823e:	65a3      	str	r3, [r4, #88]	; 0x58
 8008240:	f04f 0900 	mov.w	r9, #0
 8008244:	e7d9      	b.n	80081fa <_printf_float+0x152>
 8008246:	b913      	cbnz	r3, 800824e <_printf_float+0x1a6>
 8008248:	6822      	ldr	r2, [r4, #0]
 800824a:	07d0      	lsls	r0, r2, #31
 800824c:	d501      	bpl.n	8008252 <_printf_float+0x1aa>
 800824e:	3302      	adds	r3, #2
 8008250:	e7f3      	b.n	800823a <_printf_float+0x192>
 8008252:	2301      	movs	r3, #1
 8008254:	e7f1      	b.n	800823a <_printf_float+0x192>
 8008256:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800825a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800825e:	4293      	cmp	r3, r2
 8008260:	db05      	blt.n	800826e <_printf_float+0x1c6>
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	6123      	str	r3, [r4, #16]
 8008266:	07d1      	lsls	r1, r2, #31
 8008268:	d5e8      	bpl.n	800823c <_printf_float+0x194>
 800826a:	3301      	adds	r3, #1
 800826c:	e7e5      	b.n	800823a <_printf_float+0x192>
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfd4      	ite	le
 8008272:	f1c3 0302 	rsble	r3, r3, #2
 8008276:	2301      	movgt	r3, #1
 8008278:	4413      	add	r3, r2
 800827a:	e7de      	b.n	800823a <_printf_float+0x192>
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	055a      	lsls	r2, r3, #21
 8008280:	d407      	bmi.n	8008292 <_printf_float+0x1ea>
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	4642      	mov	r2, r8
 8008286:	4631      	mov	r1, r6
 8008288:	4628      	mov	r0, r5
 800828a:	47b8      	blx	r7
 800828c:	3001      	adds	r0, #1
 800828e:	d12b      	bne.n	80082e8 <_printf_float+0x240>
 8008290:	e767      	b.n	8008162 <_printf_float+0xba>
 8008292:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008296:	f240 80dc 	bls.w	8008452 <_printf_float+0x3aa>
 800829a:	2200      	movs	r2, #0
 800829c:	2300      	movs	r3, #0
 800829e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082a2:	f7f8 fc21 	bl	8000ae8 <__aeabi_dcmpeq>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d033      	beq.n	8008312 <_printf_float+0x26a>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4a41      	ldr	r2, [pc, #260]	; (80083b4 <_printf_float+0x30c>)
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b8      	blx	r7
 80082b4:	3001      	adds	r0, #1
 80082b6:	f43f af54 	beq.w	8008162 <_printf_float+0xba>
 80082ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082be:	429a      	cmp	r2, r3
 80082c0:	db02      	blt.n	80082c8 <_printf_float+0x220>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	07d8      	lsls	r0, r3, #31
 80082c6:	d50f      	bpl.n	80082e8 <_printf_float+0x240>
 80082c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082cc:	4631      	mov	r1, r6
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	f43f af45 	beq.w	8008162 <_printf_float+0xba>
 80082d8:	f04f 0800 	mov.w	r8, #0
 80082dc:	f104 091a 	add.w	r9, r4, #26
 80082e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e2:	3b01      	subs	r3, #1
 80082e4:	4543      	cmp	r3, r8
 80082e6:	dc09      	bgt.n	80082fc <_printf_float+0x254>
 80082e8:	6823      	ldr	r3, [r4, #0]
 80082ea:	079b      	lsls	r3, r3, #30
 80082ec:	f100 8103 	bmi.w	80084f6 <_printf_float+0x44e>
 80082f0:	68e0      	ldr	r0, [r4, #12]
 80082f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082f4:	4298      	cmp	r0, r3
 80082f6:	bfb8      	it	lt
 80082f8:	4618      	movlt	r0, r3
 80082fa:	e734      	b.n	8008166 <_printf_float+0xbe>
 80082fc:	2301      	movs	r3, #1
 80082fe:	464a      	mov	r2, r9
 8008300:	4631      	mov	r1, r6
 8008302:	4628      	mov	r0, r5
 8008304:	47b8      	blx	r7
 8008306:	3001      	adds	r0, #1
 8008308:	f43f af2b 	beq.w	8008162 <_printf_float+0xba>
 800830c:	f108 0801 	add.w	r8, r8, #1
 8008310:	e7e6      	b.n	80082e0 <_printf_float+0x238>
 8008312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008314:	2b00      	cmp	r3, #0
 8008316:	dc2b      	bgt.n	8008370 <_printf_float+0x2c8>
 8008318:	2301      	movs	r3, #1
 800831a:	4a26      	ldr	r2, [pc, #152]	; (80083b4 <_printf_float+0x30c>)
 800831c:	4631      	mov	r1, r6
 800831e:	4628      	mov	r0, r5
 8008320:	47b8      	blx	r7
 8008322:	3001      	adds	r0, #1
 8008324:	f43f af1d 	beq.w	8008162 <_printf_float+0xba>
 8008328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800832a:	b923      	cbnz	r3, 8008336 <_printf_float+0x28e>
 800832c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800832e:	b913      	cbnz	r3, 8008336 <_printf_float+0x28e>
 8008330:	6823      	ldr	r3, [r4, #0]
 8008332:	07d9      	lsls	r1, r3, #31
 8008334:	d5d8      	bpl.n	80082e8 <_printf_float+0x240>
 8008336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800833a:	4631      	mov	r1, r6
 800833c:	4628      	mov	r0, r5
 800833e:	47b8      	blx	r7
 8008340:	3001      	adds	r0, #1
 8008342:	f43f af0e 	beq.w	8008162 <_printf_float+0xba>
 8008346:	f04f 0900 	mov.w	r9, #0
 800834a:	f104 0a1a 	add.w	sl, r4, #26
 800834e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008350:	425b      	negs	r3, r3
 8008352:	454b      	cmp	r3, r9
 8008354:	dc01      	bgt.n	800835a <_printf_float+0x2b2>
 8008356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008358:	e794      	b.n	8008284 <_printf_float+0x1dc>
 800835a:	2301      	movs	r3, #1
 800835c:	4652      	mov	r2, sl
 800835e:	4631      	mov	r1, r6
 8008360:	4628      	mov	r0, r5
 8008362:	47b8      	blx	r7
 8008364:	3001      	adds	r0, #1
 8008366:	f43f aefc 	beq.w	8008162 <_printf_float+0xba>
 800836a:	f109 0901 	add.w	r9, r9, #1
 800836e:	e7ee      	b.n	800834e <_printf_float+0x2a6>
 8008370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008372:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008374:	429a      	cmp	r2, r3
 8008376:	bfa8      	it	ge
 8008378:	461a      	movge	r2, r3
 800837a:	2a00      	cmp	r2, #0
 800837c:	4691      	mov	r9, r2
 800837e:	dd07      	ble.n	8008390 <_printf_float+0x2e8>
 8008380:	4613      	mov	r3, r2
 8008382:	4631      	mov	r1, r6
 8008384:	4642      	mov	r2, r8
 8008386:	4628      	mov	r0, r5
 8008388:	47b8      	blx	r7
 800838a:	3001      	adds	r0, #1
 800838c:	f43f aee9 	beq.w	8008162 <_printf_float+0xba>
 8008390:	f104 031a 	add.w	r3, r4, #26
 8008394:	f04f 0b00 	mov.w	fp, #0
 8008398:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800839c:	9306      	str	r3, [sp, #24]
 800839e:	e015      	b.n	80083cc <_printf_float+0x324>
 80083a0:	7fefffff 	.word	0x7fefffff
 80083a4:	0800e5a0 	.word	0x0800e5a0
 80083a8:	0800e59c 	.word	0x0800e59c
 80083ac:	0800e5a8 	.word	0x0800e5a8
 80083b0:	0800e5a4 	.word	0x0800e5a4
 80083b4:	0800e5ac 	.word	0x0800e5ac
 80083b8:	2301      	movs	r3, #1
 80083ba:	9a06      	ldr	r2, [sp, #24]
 80083bc:	4631      	mov	r1, r6
 80083be:	4628      	mov	r0, r5
 80083c0:	47b8      	blx	r7
 80083c2:	3001      	adds	r0, #1
 80083c4:	f43f aecd 	beq.w	8008162 <_printf_float+0xba>
 80083c8:	f10b 0b01 	add.w	fp, fp, #1
 80083cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083d0:	ebaa 0309 	sub.w	r3, sl, r9
 80083d4:	455b      	cmp	r3, fp
 80083d6:	dcef      	bgt.n	80083b8 <_printf_float+0x310>
 80083d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083dc:	429a      	cmp	r2, r3
 80083de:	44d0      	add	r8, sl
 80083e0:	db15      	blt.n	800840e <_printf_float+0x366>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	07da      	lsls	r2, r3, #31
 80083e6:	d412      	bmi.n	800840e <_printf_float+0x366>
 80083e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083ec:	eba3 020a 	sub.w	r2, r3, sl
 80083f0:	eba3 0a01 	sub.w	sl, r3, r1
 80083f4:	4592      	cmp	sl, r2
 80083f6:	bfa8      	it	ge
 80083f8:	4692      	movge	sl, r2
 80083fa:	f1ba 0f00 	cmp.w	sl, #0
 80083fe:	dc0e      	bgt.n	800841e <_printf_float+0x376>
 8008400:	f04f 0800 	mov.w	r8, #0
 8008404:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008408:	f104 091a 	add.w	r9, r4, #26
 800840c:	e019      	b.n	8008442 <_printf_float+0x39a>
 800840e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008412:	4631      	mov	r1, r6
 8008414:	4628      	mov	r0, r5
 8008416:	47b8      	blx	r7
 8008418:	3001      	adds	r0, #1
 800841a:	d1e5      	bne.n	80083e8 <_printf_float+0x340>
 800841c:	e6a1      	b.n	8008162 <_printf_float+0xba>
 800841e:	4653      	mov	r3, sl
 8008420:	4642      	mov	r2, r8
 8008422:	4631      	mov	r1, r6
 8008424:	4628      	mov	r0, r5
 8008426:	47b8      	blx	r7
 8008428:	3001      	adds	r0, #1
 800842a:	d1e9      	bne.n	8008400 <_printf_float+0x358>
 800842c:	e699      	b.n	8008162 <_printf_float+0xba>
 800842e:	2301      	movs	r3, #1
 8008430:	464a      	mov	r2, r9
 8008432:	4631      	mov	r1, r6
 8008434:	4628      	mov	r0, r5
 8008436:	47b8      	blx	r7
 8008438:	3001      	adds	r0, #1
 800843a:	f43f ae92 	beq.w	8008162 <_printf_float+0xba>
 800843e:	f108 0801 	add.w	r8, r8, #1
 8008442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008446:	1a9b      	subs	r3, r3, r2
 8008448:	eba3 030a 	sub.w	r3, r3, sl
 800844c:	4543      	cmp	r3, r8
 800844e:	dcee      	bgt.n	800842e <_printf_float+0x386>
 8008450:	e74a      	b.n	80082e8 <_printf_float+0x240>
 8008452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008454:	2a01      	cmp	r2, #1
 8008456:	dc01      	bgt.n	800845c <_printf_float+0x3b4>
 8008458:	07db      	lsls	r3, r3, #31
 800845a:	d53a      	bpl.n	80084d2 <_printf_float+0x42a>
 800845c:	2301      	movs	r3, #1
 800845e:	4642      	mov	r2, r8
 8008460:	4631      	mov	r1, r6
 8008462:	4628      	mov	r0, r5
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	f43f ae7b 	beq.w	8008162 <_printf_float+0xba>
 800846c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008470:	4631      	mov	r1, r6
 8008472:	4628      	mov	r0, r5
 8008474:	47b8      	blx	r7
 8008476:	3001      	adds	r0, #1
 8008478:	f108 0801 	add.w	r8, r8, #1
 800847c:	f43f ae71 	beq.w	8008162 <_printf_float+0xba>
 8008480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008482:	2200      	movs	r2, #0
 8008484:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8008488:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800848c:	2300      	movs	r3, #0
 800848e:	f7f8 fb2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008492:	b9c8      	cbnz	r0, 80084c8 <_printf_float+0x420>
 8008494:	4653      	mov	r3, sl
 8008496:	4642      	mov	r2, r8
 8008498:	4631      	mov	r1, r6
 800849a:	4628      	mov	r0, r5
 800849c:	47b8      	blx	r7
 800849e:	3001      	adds	r0, #1
 80084a0:	d10e      	bne.n	80084c0 <_printf_float+0x418>
 80084a2:	e65e      	b.n	8008162 <_printf_float+0xba>
 80084a4:	2301      	movs	r3, #1
 80084a6:	4652      	mov	r2, sl
 80084a8:	4631      	mov	r1, r6
 80084aa:	4628      	mov	r0, r5
 80084ac:	47b8      	blx	r7
 80084ae:	3001      	adds	r0, #1
 80084b0:	f43f ae57 	beq.w	8008162 <_printf_float+0xba>
 80084b4:	f108 0801 	add.w	r8, r8, #1
 80084b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084ba:	3b01      	subs	r3, #1
 80084bc:	4543      	cmp	r3, r8
 80084be:	dcf1      	bgt.n	80084a4 <_printf_float+0x3fc>
 80084c0:	464b      	mov	r3, r9
 80084c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084c6:	e6de      	b.n	8008286 <_printf_float+0x1de>
 80084c8:	f04f 0800 	mov.w	r8, #0
 80084cc:	f104 0a1a 	add.w	sl, r4, #26
 80084d0:	e7f2      	b.n	80084b8 <_printf_float+0x410>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e7df      	b.n	8008496 <_printf_float+0x3ee>
 80084d6:	2301      	movs	r3, #1
 80084d8:	464a      	mov	r2, r9
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	f43f ae3e 	beq.w	8008162 <_printf_float+0xba>
 80084e6:	f108 0801 	add.w	r8, r8, #1
 80084ea:	68e3      	ldr	r3, [r4, #12]
 80084ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084ee:	1a9b      	subs	r3, r3, r2
 80084f0:	4543      	cmp	r3, r8
 80084f2:	dcf0      	bgt.n	80084d6 <_printf_float+0x42e>
 80084f4:	e6fc      	b.n	80082f0 <_printf_float+0x248>
 80084f6:	f04f 0800 	mov.w	r8, #0
 80084fa:	f104 0919 	add.w	r9, r4, #25
 80084fe:	e7f4      	b.n	80084ea <_printf_float+0x442>
 8008500:	2900      	cmp	r1, #0
 8008502:	f43f ae8b 	beq.w	800821c <_printf_float+0x174>
 8008506:	2300      	movs	r3, #0
 8008508:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800850c:	ab09      	add	r3, sp, #36	; 0x24
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	ec49 8b10 	vmov	d0, r8, r9
 8008514:	6022      	str	r2, [r4, #0]
 8008516:	f8cd a004 	str.w	sl, [sp, #4]
 800851a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800851e:	4628      	mov	r0, r5
 8008520:	f7ff fd2e 	bl	8007f80 <__cvt>
 8008524:	4680      	mov	r8, r0
 8008526:	e648      	b.n	80081ba <_printf_float+0x112>

08008528 <_printf_common>:
 8008528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800852c:	4691      	mov	r9, r2
 800852e:	461f      	mov	r7, r3
 8008530:	688a      	ldr	r2, [r1, #8]
 8008532:	690b      	ldr	r3, [r1, #16]
 8008534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008538:	4293      	cmp	r3, r2
 800853a:	bfb8      	it	lt
 800853c:	4613      	movlt	r3, r2
 800853e:	f8c9 3000 	str.w	r3, [r9]
 8008542:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008546:	4606      	mov	r6, r0
 8008548:	460c      	mov	r4, r1
 800854a:	b112      	cbz	r2, 8008552 <_printf_common+0x2a>
 800854c:	3301      	adds	r3, #1
 800854e:	f8c9 3000 	str.w	r3, [r9]
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	0699      	lsls	r1, r3, #26
 8008556:	bf42      	ittt	mi
 8008558:	f8d9 3000 	ldrmi.w	r3, [r9]
 800855c:	3302      	addmi	r3, #2
 800855e:	f8c9 3000 	strmi.w	r3, [r9]
 8008562:	6825      	ldr	r5, [r4, #0]
 8008564:	f015 0506 	ands.w	r5, r5, #6
 8008568:	d107      	bne.n	800857a <_printf_common+0x52>
 800856a:	f104 0a19 	add.w	sl, r4, #25
 800856e:	68e3      	ldr	r3, [r4, #12]
 8008570:	f8d9 2000 	ldr.w	r2, [r9]
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	42ab      	cmp	r3, r5
 8008578:	dc28      	bgt.n	80085cc <_printf_common+0xa4>
 800857a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800857e:	6822      	ldr	r2, [r4, #0]
 8008580:	3300      	adds	r3, #0
 8008582:	bf18      	it	ne
 8008584:	2301      	movne	r3, #1
 8008586:	0692      	lsls	r2, r2, #26
 8008588:	d42d      	bmi.n	80085e6 <_printf_common+0xbe>
 800858a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800858e:	4639      	mov	r1, r7
 8008590:	4630      	mov	r0, r6
 8008592:	47c0      	blx	r8
 8008594:	3001      	adds	r0, #1
 8008596:	d020      	beq.n	80085da <_printf_common+0xb2>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	68e5      	ldr	r5, [r4, #12]
 800859c:	f8d9 2000 	ldr.w	r2, [r9]
 80085a0:	f003 0306 	and.w	r3, r3, #6
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	bf08      	it	eq
 80085a8:	1aad      	subeq	r5, r5, r2
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	6922      	ldr	r2, [r4, #16]
 80085ae:	bf0c      	ite	eq
 80085b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085b4:	2500      	movne	r5, #0
 80085b6:	4293      	cmp	r3, r2
 80085b8:	bfc4      	itt	gt
 80085ba:	1a9b      	subgt	r3, r3, r2
 80085bc:	18ed      	addgt	r5, r5, r3
 80085be:	f04f 0900 	mov.w	r9, #0
 80085c2:	341a      	adds	r4, #26
 80085c4:	454d      	cmp	r5, r9
 80085c6:	d11a      	bne.n	80085fe <_printf_common+0xd6>
 80085c8:	2000      	movs	r0, #0
 80085ca:	e008      	b.n	80085de <_printf_common+0xb6>
 80085cc:	2301      	movs	r3, #1
 80085ce:	4652      	mov	r2, sl
 80085d0:	4639      	mov	r1, r7
 80085d2:	4630      	mov	r0, r6
 80085d4:	47c0      	blx	r8
 80085d6:	3001      	adds	r0, #1
 80085d8:	d103      	bne.n	80085e2 <_printf_common+0xba>
 80085da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e2:	3501      	adds	r5, #1
 80085e4:	e7c3      	b.n	800856e <_printf_common+0x46>
 80085e6:	18e1      	adds	r1, r4, r3
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	2030      	movs	r0, #48	; 0x30
 80085ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085f0:	4422      	add	r2, r4
 80085f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085fa:	3302      	adds	r3, #2
 80085fc:	e7c5      	b.n	800858a <_printf_common+0x62>
 80085fe:	2301      	movs	r3, #1
 8008600:	4622      	mov	r2, r4
 8008602:	4639      	mov	r1, r7
 8008604:	4630      	mov	r0, r6
 8008606:	47c0      	blx	r8
 8008608:	3001      	adds	r0, #1
 800860a:	d0e6      	beq.n	80085da <_printf_common+0xb2>
 800860c:	f109 0901 	add.w	r9, r9, #1
 8008610:	e7d8      	b.n	80085c4 <_printf_common+0x9c>
	...

08008614 <_printf_i>:
 8008614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008618:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800861c:	460c      	mov	r4, r1
 800861e:	7e09      	ldrb	r1, [r1, #24]
 8008620:	b085      	sub	sp, #20
 8008622:	296e      	cmp	r1, #110	; 0x6e
 8008624:	4617      	mov	r7, r2
 8008626:	4606      	mov	r6, r0
 8008628:	4698      	mov	r8, r3
 800862a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800862c:	f000 80b3 	beq.w	8008796 <_printf_i+0x182>
 8008630:	d822      	bhi.n	8008678 <_printf_i+0x64>
 8008632:	2963      	cmp	r1, #99	; 0x63
 8008634:	d036      	beq.n	80086a4 <_printf_i+0x90>
 8008636:	d80a      	bhi.n	800864e <_printf_i+0x3a>
 8008638:	2900      	cmp	r1, #0
 800863a:	f000 80b9 	beq.w	80087b0 <_printf_i+0x19c>
 800863e:	2958      	cmp	r1, #88	; 0x58
 8008640:	f000 8083 	beq.w	800874a <_printf_i+0x136>
 8008644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008648:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800864c:	e032      	b.n	80086b4 <_printf_i+0xa0>
 800864e:	2964      	cmp	r1, #100	; 0x64
 8008650:	d001      	beq.n	8008656 <_printf_i+0x42>
 8008652:	2969      	cmp	r1, #105	; 0x69
 8008654:	d1f6      	bne.n	8008644 <_printf_i+0x30>
 8008656:	6820      	ldr	r0, [r4, #0]
 8008658:	6813      	ldr	r3, [r2, #0]
 800865a:	0605      	lsls	r5, r0, #24
 800865c:	f103 0104 	add.w	r1, r3, #4
 8008660:	d52a      	bpl.n	80086b8 <_printf_i+0xa4>
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	da03      	bge.n	8008672 <_printf_i+0x5e>
 800866a:	222d      	movs	r2, #45	; 0x2d
 800866c:	425b      	negs	r3, r3
 800866e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008672:	486f      	ldr	r0, [pc, #444]	; (8008830 <_printf_i+0x21c>)
 8008674:	220a      	movs	r2, #10
 8008676:	e039      	b.n	80086ec <_printf_i+0xd8>
 8008678:	2973      	cmp	r1, #115	; 0x73
 800867a:	f000 809d 	beq.w	80087b8 <_printf_i+0x1a4>
 800867e:	d808      	bhi.n	8008692 <_printf_i+0x7e>
 8008680:	296f      	cmp	r1, #111	; 0x6f
 8008682:	d020      	beq.n	80086c6 <_printf_i+0xb2>
 8008684:	2970      	cmp	r1, #112	; 0x70
 8008686:	d1dd      	bne.n	8008644 <_printf_i+0x30>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	f043 0320 	orr.w	r3, r3, #32
 800868e:	6023      	str	r3, [r4, #0]
 8008690:	e003      	b.n	800869a <_printf_i+0x86>
 8008692:	2975      	cmp	r1, #117	; 0x75
 8008694:	d017      	beq.n	80086c6 <_printf_i+0xb2>
 8008696:	2978      	cmp	r1, #120	; 0x78
 8008698:	d1d4      	bne.n	8008644 <_printf_i+0x30>
 800869a:	2378      	movs	r3, #120	; 0x78
 800869c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086a0:	4864      	ldr	r0, [pc, #400]	; (8008834 <_printf_i+0x220>)
 80086a2:	e055      	b.n	8008750 <_printf_i+0x13c>
 80086a4:	6813      	ldr	r3, [r2, #0]
 80086a6:	1d19      	adds	r1, r3, #4
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6011      	str	r1, [r2, #0]
 80086ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086b4:	2301      	movs	r3, #1
 80086b6:	e08c      	b.n	80087d2 <_printf_i+0x1be>
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6011      	str	r1, [r2, #0]
 80086bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086c0:	bf18      	it	ne
 80086c2:	b21b      	sxthne	r3, r3
 80086c4:	e7cf      	b.n	8008666 <_printf_i+0x52>
 80086c6:	6813      	ldr	r3, [r2, #0]
 80086c8:	6825      	ldr	r5, [r4, #0]
 80086ca:	1d18      	adds	r0, r3, #4
 80086cc:	6010      	str	r0, [r2, #0]
 80086ce:	0628      	lsls	r0, r5, #24
 80086d0:	d501      	bpl.n	80086d6 <_printf_i+0xc2>
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	e002      	b.n	80086dc <_printf_i+0xc8>
 80086d6:	0668      	lsls	r0, r5, #25
 80086d8:	d5fb      	bpl.n	80086d2 <_printf_i+0xbe>
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	4854      	ldr	r0, [pc, #336]	; (8008830 <_printf_i+0x21c>)
 80086de:	296f      	cmp	r1, #111	; 0x6f
 80086e0:	bf14      	ite	ne
 80086e2:	220a      	movne	r2, #10
 80086e4:	2208      	moveq	r2, #8
 80086e6:	2100      	movs	r1, #0
 80086e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086ec:	6865      	ldr	r5, [r4, #4]
 80086ee:	60a5      	str	r5, [r4, #8]
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	f2c0 8095 	blt.w	8008820 <_printf_i+0x20c>
 80086f6:	6821      	ldr	r1, [r4, #0]
 80086f8:	f021 0104 	bic.w	r1, r1, #4
 80086fc:	6021      	str	r1, [r4, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d13d      	bne.n	800877e <_printf_i+0x16a>
 8008702:	2d00      	cmp	r5, #0
 8008704:	f040 808e 	bne.w	8008824 <_printf_i+0x210>
 8008708:	4665      	mov	r5, ip
 800870a:	2a08      	cmp	r2, #8
 800870c:	d10b      	bne.n	8008726 <_printf_i+0x112>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	07db      	lsls	r3, r3, #31
 8008712:	d508      	bpl.n	8008726 <_printf_i+0x112>
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	6862      	ldr	r2, [r4, #4]
 8008718:	429a      	cmp	r2, r3
 800871a:	bfde      	ittt	le
 800871c:	2330      	movle	r3, #48	; 0x30
 800871e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008722:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008726:	ebac 0305 	sub.w	r3, ip, r5
 800872a:	6123      	str	r3, [r4, #16]
 800872c:	f8cd 8000 	str.w	r8, [sp]
 8008730:	463b      	mov	r3, r7
 8008732:	aa03      	add	r2, sp, #12
 8008734:	4621      	mov	r1, r4
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff fef6 	bl	8008528 <_printf_common>
 800873c:	3001      	adds	r0, #1
 800873e:	d14d      	bne.n	80087dc <_printf_i+0x1c8>
 8008740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008744:	b005      	add	sp, #20
 8008746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800874a:	4839      	ldr	r0, [pc, #228]	; (8008830 <_printf_i+0x21c>)
 800874c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008750:	6813      	ldr	r3, [r2, #0]
 8008752:	6821      	ldr	r1, [r4, #0]
 8008754:	1d1d      	adds	r5, r3, #4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6015      	str	r5, [r2, #0]
 800875a:	060a      	lsls	r2, r1, #24
 800875c:	d50b      	bpl.n	8008776 <_printf_i+0x162>
 800875e:	07ca      	lsls	r2, r1, #31
 8008760:	bf44      	itt	mi
 8008762:	f041 0120 	orrmi.w	r1, r1, #32
 8008766:	6021      	strmi	r1, [r4, #0]
 8008768:	b91b      	cbnz	r3, 8008772 <_printf_i+0x15e>
 800876a:	6822      	ldr	r2, [r4, #0]
 800876c:	f022 0220 	bic.w	r2, r2, #32
 8008770:	6022      	str	r2, [r4, #0]
 8008772:	2210      	movs	r2, #16
 8008774:	e7b7      	b.n	80086e6 <_printf_i+0xd2>
 8008776:	064d      	lsls	r5, r1, #25
 8008778:	bf48      	it	mi
 800877a:	b29b      	uxthmi	r3, r3
 800877c:	e7ef      	b.n	800875e <_printf_i+0x14a>
 800877e:	4665      	mov	r5, ip
 8008780:	fbb3 f1f2 	udiv	r1, r3, r2
 8008784:	fb02 3311 	mls	r3, r2, r1, r3
 8008788:	5cc3      	ldrb	r3, [r0, r3]
 800878a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800878e:	460b      	mov	r3, r1
 8008790:	2900      	cmp	r1, #0
 8008792:	d1f5      	bne.n	8008780 <_printf_i+0x16c>
 8008794:	e7b9      	b.n	800870a <_printf_i+0xf6>
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	6825      	ldr	r5, [r4, #0]
 800879a:	6961      	ldr	r1, [r4, #20]
 800879c:	1d18      	adds	r0, r3, #4
 800879e:	6010      	str	r0, [r2, #0]
 80087a0:	0628      	lsls	r0, r5, #24
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	d501      	bpl.n	80087aa <_printf_i+0x196>
 80087a6:	6019      	str	r1, [r3, #0]
 80087a8:	e002      	b.n	80087b0 <_printf_i+0x19c>
 80087aa:	066a      	lsls	r2, r5, #25
 80087ac:	d5fb      	bpl.n	80087a6 <_printf_i+0x192>
 80087ae:	8019      	strh	r1, [r3, #0]
 80087b0:	2300      	movs	r3, #0
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	4665      	mov	r5, ip
 80087b6:	e7b9      	b.n	800872c <_printf_i+0x118>
 80087b8:	6813      	ldr	r3, [r2, #0]
 80087ba:	1d19      	adds	r1, r3, #4
 80087bc:	6011      	str	r1, [r2, #0]
 80087be:	681d      	ldr	r5, [r3, #0]
 80087c0:	6862      	ldr	r2, [r4, #4]
 80087c2:	2100      	movs	r1, #0
 80087c4:	4628      	mov	r0, r5
 80087c6:	f7f7 fd1b 	bl	8000200 <memchr>
 80087ca:	b108      	cbz	r0, 80087d0 <_printf_i+0x1bc>
 80087cc:	1b40      	subs	r0, r0, r5
 80087ce:	6060      	str	r0, [r4, #4]
 80087d0:	6863      	ldr	r3, [r4, #4]
 80087d2:	6123      	str	r3, [r4, #16]
 80087d4:	2300      	movs	r3, #0
 80087d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087da:	e7a7      	b.n	800872c <_printf_i+0x118>
 80087dc:	6923      	ldr	r3, [r4, #16]
 80087de:	462a      	mov	r2, r5
 80087e0:	4639      	mov	r1, r7
 80087e2:	4630      	mov	r0, r6
 80087e4:	47c0      	blx	r8
 80087e6:	3001      	adds	r0, #1
 80087e8:	d0aa      	beq.n	8008740 <_printf_i+0x12c>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	079b      	lsls	r3, r3, #30
 80087ee:	d413      	bmi.n	8008818 <_printf_i+0x204>
 80087f0:	68e0      	ldr	r0, [r4, #12]
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	4298      	cmp	r0, r3
 80087f6:	bfb8      	it	lt
 80087f8:	4618      	movlt	r0, r3
 80087fa:	e7a3      	b.n	8008744 <_printf_i+0x130>
 80087fc:	2301      	movs	r3, #1
 80087fe:	464a      	mov	r2, r9
 8008800:	4639      	mov	r1, r7
 8008802:	4630      	mov	r0, r6
 8008804:	47c0      	blx	r8
 8008806:	3001      	adds	r0, #1
 8008808:	d09a      	beq.n	8008740 <_printf_i+0x12c>
 800880a:	3501      	adds	r5, #1
 800880c:	68e3      	ldr	r3, [r4, #12]
 800880e:	9a03      	ldr	r2, [sp, #12]
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	42ab      	cmp	r3, r5
 8008814:	dcf2      	bgt.n	80087fc <_printf_i+0x1e8>
 8008816:	e7eb      	b.n	80087f0 <_printf_i+0x1dc>
 8008818:	2500      	movs	r5, #0
 800881a:	f104 0919 	add.w	r9, r4, #25
 800881e:	e7f5      	b.n	800880c <_printf_i+0x1f8>
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1ac      	bne.n	800877e <_printf_i+0x16a>
 8008824:	7803      	ldrb	r3, [r0, #0]
 8008826:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800882a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800882e:	e76c      	b.n	800870a <_printf_i+0xf6>
 8008830:	0800e5ae 	.word	0x0800e5ae
 8008834:	0800e5bf 	.word	0x0800e5bf

08008838 <_scanf_float>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	469a      	mov	sl, r3
 800883e:	688b      	ldr	r3, [r1, #8]
 8008840:	4616      	mov	r6, r2
 8008842:	1e5a      	subs	r2, r3, #1
 8008844:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008848:	b087      	sub	sp, #28
 800884a:	bf83      	ittte	hi
 800884c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008850:	189b      	addhi	r3, r3, r2
 8008852:	9301      	strhi	r3, [sp, #4]
 8008854:	2300      	movls	r3, #0
 8008856:	bf86      	itte	hi
 8008858:	f240 135d 	movwhi	r3, #349	; 0x15d
 800885c:	608b      	strhi	r3, [r1, #8]
 800885e:	9301      	strls	r3, [sp, #4]
 8008860:	680b      	ldr	r3, [r1, #0]
 8008862:	4688      	mov	r8, r1
 8008864:	f04f 0b00 	mov.w	fp, #0
 8008868:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800886c:	f848 3b1c 	str.w	r3, [r8], #28
 8008870:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008874:	4607      	mov	r7, r0
 8008876:	460c      	mov	r4, r1
 8008878:	4645      	mov	r5, r8
 800887a:	465a      	mov	r2, fp
 800887c:	46d9      	mov	r9, fp
 800887e:	f8cd b008 	str.w	fp, [sp, #8]
 8008882:	68a1      	ldr	r1, [r4, #8]
 8008884:	b181      	cbz	r1, 80088a8 <_scanf_float+0x70>
 8008886:	6833      	ldr	r3, [r6, #0]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	2b49      	cmp	r3, #73	; 0x49
 800888c:	d071      	beq.n	8008972 <_scanf_float+0x13a>
 800888e:	d84d      	bhi.n	800892c <_scanf_float+0xf4>
 8008890:	2b39      	cmp	r3, #57	; 0x39
 8008892:	d840      	bhi.n	8008916 <_scanf_float+0xde>
 8008894:	2b31      	cmp	r3, #49	; 0x31
 8008896:	f080 8088 	bcs.w	80089aa <_scanf_float+0x172>
 800889a:	2b2d      	cmp	r3, #45	; 0x2d
 800889c:	f000 8090 	beq.w	80089c0 <_scanf_float+0x188>
 80088a0:	d815      	bhi.n	80088ce <_scanf_float+0x96>
 80088a2:	2b2b      	cmp	r3, #43	; 0x2b
 80088a4:	f000 808c 	beq.w	80089c0 <_scanf_float+0x188>
 80088a8:	f1b9 0f00 	cmp.w	r9, #0
 80088ac:	d003      	beq.n	80088b6 <_scanf_float+0x7e>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	3a01      	subs	r2, #1
 80088b8:	2a01      	cmp	r2, #1
 80088ba:	f200 80ea 	bhi.w	8008a92 <_scanf_float+0x25a>
 80088be:	4545      	cmp	r5, r8
 80088c0:	f200 80dc 	bhi.w	8008a7c <_scanf_float+0x244>
 80088c4:	2601      	movs	r6, #1
 80088c6:	4630      	mov	r0, r6
 80088c8:	b007      	add	sp, #28
 80088ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ce:	2b2e      	cmp	r3, #46	; 0x2e
 80088d0:	f000 809f 	beq.w	8008a12 <_scanf_float+0x1da>
 80088d4:	2b30      	cmp	r3, #48	; 0x30
 80088d6:	d1e7      	bne.n	80088a8 <_scanf_float+0x70>
 80088d8:	6820      	ldr	r0, [r4, #0]
 80088da:	f410 7f80 	tst.w	r0, #256	; 0x100
 80088de:	d064      	beq.n	80089aa <_scanf_float+0x172>
 80088e0:	9b01      	ldr	r3, [sp, #4]
 80088e2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80088e6:	6020      	str	r0, [r4, #0]
 80088e8:	f109 0901 	add.w	r9, r9, #1
 80088ec:	b11b      	cbz	r3, 80088f6 <_scanf_float+0xbe>
 80088ee:	3b01      	subs	r3, #1
 80088f0:	3101      	adds	r1, #1
 80088f2:	9301      	str	r3, [sp, #4]
 80088f4:	60a1      	str	r1, [r4, #8]
 80088f6:	68a3      	ldr	r3, [r4, #8]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	60a3      	str	r3, [r4, #8]
 80088fc:	6923      	ldr	r3, [r4, #16]
 80088fe:	3301      	adds	r3, #1
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	6873      	ldr	r3, [r6, #4]
 8008904:	3b01      	subs	r3, #1
 8008906:	2b00      	cmp	r3, #0
 8008908:	6073      	str	r3, [r6, #4]
 800890a:	f340 80ac 	ble.w	8008a66 <_scanf_float+0x22e>
 800890e:	6833      	ldr	r3, [r6, #0]
 8008910:	3301      	adds	r3, #1
 8008912:	6033      	str	r3, [r6, #0]
 8008914:	e7b5      	b.n	8008882 <_scanf_float+0x4a>
 8008916:	2b45      	cmp	r3, #69	; 0x45
 8008918:	f000 8085 	beq.w	8008a26 <_scanf_float+0x1ee>
 800891c:	2b46      	cmp	r3, #70	; 0x46
 800891e:	d06a      	beq.n	80089f6 <_scanf_float+0x1be>
 8008920:	2b41      	cmp	r3, #65	; 0x41
 8008922:	d1c1      	bne.n	80088a8 <_scanf_float+0x70>
 8008924:	2a01      	cmp	r2, #1
 8008926:	d1bf      	bne.n	80088a8 <_scanf_float+0x70>
 8008928:	2202      	movs	r2, #2
 800892a:	e046      	b.n	80089ba <_scanf_float+0x182>
 800892c:	2b65      	cmp	r3, #101	; 0x65
 800892e:	d07a      	beq.n	8008a26 <_scanf_float+0x1ee>
 8008930:	d818      	bhi.n	8008964 <_scanf_float+0x12c>
 8008932:	2b54      	cmp	r3, #84	; 0x54
 8008934:	d066      	beq.n	8008a04 <_scanf_float+0x1cc>
 8008936:	d811      	bhi.n	800895c <_scanf_float+0x124>
 8008938:	2b4e      	cmp	r3, #78	; 0x4e
 800893a:	d1b5      	bne.n	80088a8 <_scanf_float+0x70>
 800893c:	2a00      	cmp	r2, #0
 800893e:	d146      	bne.n	80089ce <_scanf_float+0x196>
 8008940:	f1b9 0f00 	cmp.w	r9, #0
 8008944:	d145      	bne.n	80089d2 <_scanf_float+0x19a>
 8008946:	6821      	ldr	r1, [r4, #0]
 8008948:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800894c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008950:	d13f      	bne.n	80089d2 <_scanf_float+0x19a>
 8008952:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008956:	6021      	str	r1, [r4, #0]
 8008958:	2201      	movs	r2, #1
 800895a:	e02e      	b.n	80089ba <_scanf_float+0x182>
 800895c:	2b59      	cmp	r3, #89	; 0x59
 800895e:	d01e      	beq.n	800899e <_scanf_float+0x166>
 8008960:	2b61      	cmp	r3, #97	; 0x61
 8008962:	e7de      	b.n	8008922 <_scanf_float+0xea>
 8008964:	2b6e      	cmp	r3, #110	; 0x6e
 8008966:	d0e9      	beq.n	800893c <_scanf_float+0x104>
 8008968:	d815      	bhi.n	8008996 <_scanf_float+0x15e>
 800896a:	2b66      	cmp	r3, #102	; 0x66
 800896c:	d043      	beq.n	80089f6 <_scanf_float+0x1be>
 800896e:	2b69      	cmp	r3, #105	; 0x69
 8008970:	d19a      	bne.n	80088a8 <_scanf_float+0x70>
 8008972:	f1bb 0f00 	cmp.w	fp, #0
 8008976:	d138      	bne.n	80089ea <_scanf_float+0x1b2>
 8008978:	f1b9 0f00 	cmp.w	r9, #0
 800897c:	d197      	bne.n	80088ae <_scanf_float+0x76>
 800897e:	6821      	ldr	r1, [r4, #0]
 8008980:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008984:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008988:	d195      	bne.n	80088b6 <_scanf_float+0x7e>
 800898a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800898e:	6021      	str	r1, [r4, #0]
 8008990:	f04f 0b01 	mov.w	fp, #1
 8008994:	e011      	b.n	80089ba <_scanf_float+0x182>
 8008996:	2b74      	cmp	r3, #116	; 0x74
 8008998:	d034      	beq.n	8008a04 <_scanf_float+0x1cc>
 800899a:	2b79      	cmp	r3, #121	; 0x79
 800899c:	d184      	bne.n	80088a8 <_scanf_float+0x70>
 800899e:	f1bb 0f07 	cmp.w	fp, #7
 80089a2:	d181      	bne.n	80088a8 <_scanf_float+0x70>
 80089a4:	f04f 0b08 	mov.w	fp, #8
 80089a8:	e007      	b.n	80089ba <_scanf_float+0x182>
 80089aa:	eb12 0f0b 	cmn.w	r2, fp
 80089ae:	f47f af7b 	bne.w	80088a8 <_scanf_float+0x70>
 80089b2:	6821      	ldr	r1, [r4, #0]
 80089b4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80089b8:	6021      	str	r1, [r4, #0]
 80089ba:	702b      	strb	r3, [r5, #0]
 80089bc:	3501      	adds	r5, #1
 80089be:	e79a      	b.n	80088f6 <_scanf_float+0xbe>
 80089c0:	6821      	ldr	r1, [r4, #0]
 80089c2:	0608      	lsls	r0, r1, #24
 80089c4:	f57f af70 	bpl.w	80088a8 <_scanf_float+0x70>
 80089c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80089cc:	e7f4      	b.n	80089b8 <_scanf_float+0x180>
 80089ce:	2a02      	cmp	r2, #2
 80089d0:	d047      	beq.n	8008a62 <_scanf_float+0x22a>
 80089d2:	f1bb 0f01 	cmp.w	fp, #1
 80089d6:	d003      	beq.n	80089e0 <_scanf_float+0x1a8>
 80089d8:	f1bb 0f04 	cmp.w	fp, #4
 80089dc:	f47f af64 	bne.w	80088a8 <_scanf_float+0x70>
 80089e0:	f10b 0b01 	add.w	fp, fp, #1
 80089e4:	fa5f fb8b 	uxtb.w	fp, fp
 80089e8:	e7e7      	b.n	80089ba <_scanf_float+0x182>
 80089ea:	f1bb 0f03 	cmp.w	fp, #3
 80089ee:	d0f7      	beq.n	80089e0 <_scanf_float+0x1a8>
 80089f0:	f1bb 0f05 	cmp.w	fp, #5
 80089f4:	e7f2      	b.n	80089dc <_scanf_float+0x1a4>
 80089f6:	f1bb 0f02 	cmp.w	fp, #2
 80089fa:	f47f af55 	bne.w	80088a8 <_scanf_float+0x70>
 80089fe:	f04f 0b03 	mov.w	fp, #3
 8008a02:	e7da      	b.n	80089ba <_scanf_float+0x182>
 8008a04:	f1bb 0f06 	cmp.w	fp, #6
 8008a08:	f47f af4e 	bne.w	80088a8 <_scanf_float+0x70>
 8008a0c:	f04f 0b07 	mov.w	fp, #7
 8008a10:	e7d3      	b.n	80089ba <_scanf_float+0x182>
 8008a12:	6821      	ldr	r1, [r4, #0]
 8008a14:	0588      	lsls	r0, r1, #22
 8008a16:	f57f af47 	bpl.w	80088a8 <_scanf_float+0x70>
 8008a1a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8008a1e:	6021      	str	r1, [r4, #0]
 8008a20:	f8cd 9008 	str.w	r9, [sp, #8]
 8008a24:	e7c9      	b.n	80089ba <_scanf_float+0x182>
 8008a26:	6821      	ldr	r1, [r4, #0]
 8008a28:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8008a2c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8008a30:	d006      	beq.n	8008a40 <_scanf_float+0x208>
 8008a32:	0548      	lsls	r0, r1, #21
 8008a34:	f57f af38 	bpl.w	80088a8 <_scanf_float+0x70>
 8008a38:	f1b9 0f00 	cmp.w	r9, #0
 8008a3c:	f43f af3b 	beq.w	80088b6 <_scanf_float+0x7e>
 8008a40:	0588      	lsls	r0, r1, #22
 8008a42:	bf58      	it	pl
 8008a44:	9802      	ldrpl	r0, [sp, #8]
 8008a46:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008a4a:	bf58      	it	pl
 8008a4c:	eba9 0000 	subpl.w	r0, r9, r0
 8008a50:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8008a54:	bf58      	it	pl
 8008a56:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8008a5a:	6021      	str	r1, [r4, #0]
 8008a5c:	f04f 0900 	mov.w	r9, #0
 8008a60:	e7ab      	b.n	80089ba <_scanf_float+0x182>
 8008a62:	2203      	movs	r2, #3
 8008a64:	e7a9      	b.n	80089ba <_scanf_float+0x182>
 8008a66:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008a6a:	9205      	str	r2, [sp, #20]
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4638      	mov	r0, r7
 8008a70:	4798      	blx	r3
 8008a72:	9a05      	ldr	r2, [sp, #20]
 8008a74:	2800      	cmp	r0, #0
 8008a76:	f43f af04 	beq.w	8008882 <_scanf_float+0x4a>
 8008a7a:	e715      	b.n	80088a8 <_scanf_float+0x70>
 8008a7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008a84:	4632      	mov	r2, r6
 8008a86:	4638      	mov	r0, r7
 8008a88:	4798      	blx	r3
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	6123      	str	r3, [r4, #16]
 8008a90:	e715      	b.n	80088be <_scanf_float+0x86>
 8008a92:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008a96:	2b06      	cmp	r3, #6
 8008a98:	d80a      	bhi.n	8008ab0 <_scanf_float+0x278>
 8008a9a:	f1bb 0f02 	cmp.w	fp, #2
 8008a9e:	d968      	bls.n	8008b72 <_scanf_float+0x33a>
 8008aa0:	f1ab 0b03 	sub.w	fp, fp, #3
 8008aa4:	fa5f fb8b 	uxtb.w	fp, fp
 8008aa8:	eba5 0b0b 	sub.w	fp, r5, fp
 8008aac:	455d      	cmp	r5, fp
 8008aae:	d14b      	bne.n	8008b48 <_scanf_float+0x310>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	05da      	lsls	r2, r3, #23
 8008ab4:	d51f      	bpl.n	8008af6 <_scanf_float+0x2be>
 8008ab6:	055b      	lsls	r3, r3, #21
 8008ab8:	d468      	bmi.n	8008b8c <_scanf_float+0x354>
 8008aba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008abe:	6923      	ldr	r3, [r4, #16]
 8008ac0:	2965      	cmp	r1, #101	; 0x65
 8008ac2:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008ac6:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8008aca:	6123      	str	r3, [r4, #16]
 8008acc:	d00d      	beq.n	8008aea <_scanf_float+0x2b2>
 8008ace:	2945      	cmp	r1, #69	; 0x45
 8008ad0:	d00b      	beq.n	8008aea <_scanf_float+0x2b2>
 8008ad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ad6:	4632      	mov	r2, r6
 8008ad8:	4638      	mov	r0, r7
 8008ada:	4798      	blx	r3
 8008adc:	6923      	ldr	r3, [r4, #16]
 8008ade:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	f1a5 0b02 	sub.w	fp, r5, #2
 8008ae8:	6123      	str	r3, [r4, #16]
 8008aea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aee:	4632      	mov	r2, r6
 8008af0:	4638      	mov	r0, r7
 8008af2:	4798      	blx	r3
 8008af4:	465d      	mov	r5, fp
 8008af6:	6826      	ldr	r6, [r4, #0]
 8008af8:	f016 0610 	ands.w	r6, r6, #16
 8008afc:	d17a      	bne.n	8008bf4 <_scanf_float+0x3bc>
 8008afe:	702e      	strb	r6, [r5, #0]
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b0a:	d142      	bne.n	8008b92 <_scanf_float+0x35a>
 8008b0c:	9b02      	ldr	r3, [sp, #8]
 8008b0e:	eba9 0303 	sub.w	r3, r9, r3
 8008b12:	425a      	negs	r2, r3
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d149      	bne.n	8008bac <_scanf_float+0x374>
 8008b18:	2200      	movs	r2, #0
 8008b1a:	4641      	mov	r1, r8
 8008b1c:	4638      	mov	r0, r7
 8008b1e:	f000 fec7 	bl	80098b0 <_strtod_r>
 8008b22:	6825      	ldr	r5, [r4, #0]
 8008b24:	f8da 3000 	ldr.w	r3, [sl]
 8008b28:	f015 0f02 	tst.w	r5, #2
 8008b2c:	f103 0204 	add.w	r2, r3, #4
 8008b30:	ec59 8b10 	vmov	r8, r9, d0
 8008b34:	f8ca 2000 	str.w	r2, [sl]
 8008b38:	d043      	beq.n	8008bc2 <_scanf_float+0x38a>
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	e9c3 8900 	strd	r8, r9, [r3]
 8008b40:	68e3      	ldr	r3, [r4, #12]
 8008b42:	3301      	adds	r3, #1
 8008b44:	60e3      	str	r3, [r4, #12]
 8008b46:	e6be      	b.n	80088c6 <_scanf_float+0x8e>
 8008b48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008b50:	4632      	mov	r2, r6
 8008b52:	4638      	mov	r0, r7
 8008b54:	4798      	blx	r3
 8008b56:	6923      	ldr	r3, [r4, #16]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	6123      	str	r3, [r4, #16]
 8008b5c:	e7a6      	b.n	8008aac <_scanf_float+0x274>
 8008b5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b62:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008b66:	4632      	mov	r2, r6
 8008b68:	4638      	mov	r0, r7
 8008b6a:	4798      	blx	r3
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	6123      	str	r3, [r4, #16]
 8008b72:	4545      	cmp	r5, r8
 8008b74:	d8f3      	bhi.n	8008b5e <_scanf_float+0x326>
 8008b76:	e6a5      	b.n	80088c4 <_scanf_float+0x8c>
 8008b78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8008b80:	4632      	mov	r2, r6
 8008b82:	4638      	mov	r0, r7
 8008b84:	4798      	blx	r3
 8008b86:	6923      	ldr	r3, [r4, #16]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	6123      	str	r3, [r4, #16]
 8008b8c:	4545      	cmp	r5, r8
 8008b8e:	d8f3      	bhi.n	8008b78 <_scanf_float+0x340>
 8008b90:	e698      	b.n	80088c4 <_scanf_float+0x8c>
 8008b92:	9b03      	ldr	r3, [sp, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d0bf      	beq.n	8008b18 <_scanf_float+0x2e0>
 8008b98:	9904      	ldr	r1, [sp, #16]
 8008b9a:	230a      	movs	r3, #10
 8008b9c:	4632      	mov	r2, r6
 8008b9e:	3101      	adds	r1, #1
 8008ba0:	4638      	mov	r0, r7
 8008ba2:	f000 ff11 	bl	80099c8 <_strtol_r>
 8008ba6:	9b03      	ldr	r3, [sp, #12]
 8008ba8:	9d04      	ldr	r5, [sp, #16]
 8008baa:	1ac2      	subs	r2, r0, r3
 8008bac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008bb0:	429d      	cmp	r5, r3
 8008bb2:	bf28      	it	cs
 8008bb4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8008bb8:	490f      	ldr	r1, [pc, #60]	; (8008bf8 <_scanf_float+0x3c0>)
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f000 f834 	bl	8008c28 <siprintf>
 8008bc0:	e7aa      	b.n	8008b18 <_scanf_float+0x2e0>
 8008bc2:	f015 0504 	ands.w	r5, r5, #4
 8008bc6:	d1b8      	bne.n	8008b3a <_scanf_float+0x302>
 8008bc8:	681f      	ldr	r7, [r3, #0]
 8008bca:	ee10 2a10 	vmov	r2, s0
 8008bce:	464b      	mov	r3, r9
 8008bd0:	ee10 0a10 	vmov	r0, s0
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	f7f7 ffb9 	bl	8000b4c <__aeabi_dcmpun>
 8008bda:	b128      	cbz	r0, 8008be8 <_scanf_float+0x3b0>
 8008bdc:	4628      	mov	r0, r5
 8008bde:	f000 f81d 	bl	8008c1c <nanf>
 8008be2:	ed87 0a00 	vstr	s0, [r7]
 8008be6:	e7ab      	b.n	8008b40 <_scanf_float+0x308>
 8008be8:	4640      	mov	r0, r8
 8008bea:	4649      	mov	r1, r9
 8008bec:	f7f8 f80c 	bl	8000c08 <__aeabi_d2f>
 8008bf0:	6038      	str	r0, [r7, #0]
 8008bf2:	e7a5      	b.n	8008b40 <_scanf_float+0x308>
 8008bf4:	2600      	movs	r6, #0
 8008bf6:	e666      	b.n	80088c6 <_scanf_float+0x8e>
 8008bf8:	0800e5d0 	.word	0x0800e5d0

08008bfc <_sbrk_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4c06      	ldr	r4, [pc, #24]	; (8008c18 <_sbrk_r+0x1c>)
 8008c00:	2300      	movs	r3, #0
 8008c02:	4605      	mov	r5, r0
 8008c04:	4608      	mov	r0, r1
 8008c06:	6023      	str	r3, [r4, #0]
 8008c08:	f7fa fd82 	bl	8003710 <_sbrk>
 8008c0c:	1c43      	adds	r3, r0, #1
 8008c0e:	d102      	bne.n	8008c16 <_sbrk_r+0x1a>
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	b103      	cbz	r3, 8008c16 <_sbrk_r+0x1a>
 8008c14:	602b      	str	r3, [r5, #0]
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	20001ef8 	.word	0x20001ef8

08008c1c <nanf>:
 8008c1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008c24 <nanf+0x8>
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	7fc00000 	.word	0x7fc00000

08008c28 <siprintf>:
 8008c28:	b40e      	push	{r1, r2, r3}
 8008c2a:	b500      	push	{lr}
 8008c2c:	b09c      	sub	sp, #112	; 0x70
 8008c2e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c30:	9002      	str	r0, [sp, #8]
 8008c32:	9006      	str	r0, [sp, #24]
 8008c34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c38:	4809      	ldr	r0, [pc, #36]	; (8008c60 <siprintf+0x38>)
 8008c3a:	9107      	str	r1, [sp, #28]
 8008c3c:	9104      	str	r1, [sp, #16]
 8008c3e:	4909      	ldr	r1, [pc, #36]	; (8008c64 <siprintf+0x3c>)
 8008c40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c44:	9105      	str	r1, [sp, #20]
 8008c46:	6800      	ldr	r0, [r0, #0]
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	a902      	add	r1, sp, #8
 8008c4c:	f002 fcca 	bl	800b5e4 <_svfiprintf_r>
 8008c50:	9b02      	ldr	r3, [sp, #8]
 8008c52:	2200      	movs	r2, #0
 8008c54:	701a      	strb	r2, [r3, #0]
 8008c56:	b01c      	add	sp, #112	; 0x70
 8008c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c5c:	b003      	add	sp, #12
 8008c5e:	4770      	bx	lr
 8008c60:	20001254 	.word	0x20001254
 8008c64:	ffff0208 	.word	0xffff0208

08008c68 <strncmp>:
 8008c68:	b510      	push	{r4, lr}
 8008c6a:	b16a      	cbz	r2, 8008c88 <strncmp+0x20>
 8008c6c:	3901      	subs	r1, #1
 8008c6e:	1884      	adds	r4, r0, r2
 8008c70:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c74:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d103      	bne.n	8008c84 <strncmp+0x1c>
 8008c7c:	42a0      	cmp	r0, r4
 8008c7e:	d001      	beq.n	8008c84 <strncmp+0x1c>
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1f5      	bne.n	8008c70 <strncmp+0x8>
 8008c84:	1a98      	subs	r0, r3, r2
 8008c86:	bd10      	pop	{r4, pc}
 8008c88:	4610      	mov	r0, r2
 8008c8a:	e7fc      	b.n	8008c86 <strncmp+0x1e>

08008c8c <sulp>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	4604      	mov	r4, r0
 8008c90:	460d      	mov	r5, r1
 8008c92:	ec45 4b10 	vmov	d0, r4, r5
 8008c96:	4616      	mov	r6, r2
 8008c98:	f002 fb08 	bl	800b2ac <__ulp>
 8008c9c:	ec51 0b10 	vmov	r0, r1, d0
 8008ca0:	b17e      	cbz	r6, 8008cc2 <sulp+0x36>
 8008ca2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ca6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	dd09      	ble.n	8008cc2 <sulp+0x36>
 8008cae:	051b      	lsls	r3, r3, #20
 8008cb0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008cb4:	2400      	movs	r4, #0
 8008cb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008cba:	4622      	mov	r2, r4
 8008cbc:	462b      	mov	r3, r5
 8008cbe:	f7f7 fcab 	bl	8000618 <__aeabi_dmul>
 8008cc2:	bd70      	pop	{r4, r5, r6, pc}
 8008cc4:	0000      	movs	r0, r0
	...

08008cc8 <_strtod_l>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	461f      	mov	r7, r3
 8008cce:	b0a1      	sub	sp, #132	; 0x84
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	4681      	mov	r9, r0
 8008cd4:	4638      	mov	r0, r7
 8008cd6:	460e      	mov	r6, r1
 8008cd8:	9217      	str	r2, [sp, #92]	; 0x5c
 8008cda:	931c      	str	r3, [sp, #112]	; 0x70
 8008cdc:	f001 fff5 	bl	800acca <__localeconv_l>
 8008ce0:	4680      	mov	r8, r0
 8008ce2:	6800      	ldr	r0, [r0, #0]
 8008ce4:	f7f7 fa84 	bl	80001f0 <strlen>
 8008ce8:	f04f 0a00 	mov.w	sl, #0
 8008cec:	4604      	mov	r4, r0
 8008cee:	f04f 0b00 	mov.w	fp, #0
 8008cf2:	961b      	str	r6, [sp, #108]	; 0x6c
 8008cf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008cf6:	781a      	ldrb	r2, [r3, #0]
 8008cf8:	2a0d      	cmp	r2, #13
 8008cfa:	d832      	bhi.n	8008d62 <_strtod_l+0x9a>
 8008cfc:	2a09      	cmp	r2, #9
 8008cfe:	d236      	bcs.n	8008d6e <_strtod_l+0xa6>
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	d03e      	beq.n	8008d82 <_strtod_l+0xba>
 8008d04:	2300      	movs	r3, #0
 8008d06:	930d      	str	r3, [sp, #52]	; 0x34
 8008d08:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008d0a:	782b      	ldrb	r3, [r5, #0]
 8008d0c:	2b30      	cmp	r3, #48	; 0x30
 8008d0e:	f040 80ac 	bne.w	8008e6a <_strtod_l+0x1a2>
 8008d12:	786b      	ldrb	r3, [r5, #1]
 8008d14:	2b58      	cmp	r3, #88	; 0x58
 8008d16:	d001      	beq.n	8008d1c <_strtod_l+0x54>
 8008d18:	2b78      	cmp	r3, #120	; 0x78
 8008d1a:	d167      	bne.n	8008dec <_strtod_l+0x124>
 8008d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	ab1c      	add	r3, sp, #112	; 0x70
 8008d22:	9300      	str	r3, [sp, #0]
 8008d24:	9702      	str	r7, [sp, #8]
 8008d26:	ab1d      	add	r3, sp, #116	; 0x74
 8008d28:	4a88      	ldr	r2, [pc, #544]	; (8008f4c <_strtod_l+0x284>)
 8008d2a:	a91b      	add	r1, sp, #108	; 0x6c
 8008d2c:	4648      	mov	r0, r9
 8008d2e:	f001 fcf2 	bl	800a716 <__gethex>
 8008d32:	f010 0407 	ands.w	r4, r0, #7
 8008d36:	4606      	mov	r6, r0
 8008d38:	d005      	beq.n	8008d46 <_strtod_l+0x7e>
 8008d3a:	2c06      	cmp	r4, #6
 8008d3c:	d12b      	bne.n	8008d96 <_strtod_l+0xce>
 8008d3e:	3501      	adds	r5, #1
 8008d40:	2300      	movs	r3, #0
 8008d42:	951b      	str	r5, [sp, #108]	; 0x6c
 8008d44:	930d      	str	r3, [sp, #52]	; 0x34
 8008d46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f040 859a 	bne.w	8009882 <_strtod_l+0xbba>
 8008d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d50:	b1e3      	cbz	r3, 8008d8c <_strtod_l+0xc4>
 8008d52:	4652      	mov	r2, sl
 8008d54:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008d58:	ec43 2b10 	vmov	d0, r2, r3
 8008d5c:	b021      	add	sp, #132	; 0x84
 8008d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d62:	2a2b      	cmp	r2, #43	; 0x2b
 8008d64:	d015      	beq.n	8008d92 <_strtod_l+0xca>
 8008d66:	2a2d      	cmp	r2, #45	; 0x2d
 8008d68:	d004      	beq.n	8008d74 <_strtod_l+0xac>
 8008d6a:	2a20      	cmp	r2, #32
 8008d6c:	d1ca      	bne.n	8008d04 <_strtod_l+0x3c>
 8008d6e:	3301      	adds	r3, #1
 8008d70:	931b      	str	r3, [sp, #108]	; 0x6c
 8008d72:	e7bf      	b.n	8008cf4 <_strtod_l+0x2c>
 8008d74:	2201      	movs	r2, #1
 8008d76:	920d      	str	r2, [sp, #52]	; 0x34
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	921b      	str	r2, [sp, #108]	; 0x6c
 8008d7c:	785b      	ldrb	r3, [r3, #1]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1c2      	bne.n	8008d08 <_strtod_l+0x40>
 8008d82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d84:	961b      	str	r6, [sp, #108]	; 0x6c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f040 8579 	bne.w	800987e <_strtod_l+0xbb6>
 8008d8c:	4652      	mov	r2, sl
 8008d8e:	465b      	mov	r3, fp
 8008d90:	e7e2      	b.n	8008d58 <_strtod_l+0x90>
 8008d92:	2200      	movs	r2, #0
 8008d94:	e7ef      	b.n	8008d76 <_strtod_l+0xae>
 8008d96:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008d98:	b13a      	cbz	r2, 8008daa <_strtod_l+0xe2>
 8008d9a:	2135      	movs	r1, #53	; 0x35
 8008d9c:	a81e      	add	r0, sp, #120	; 0x78
 8008d9e:	f002 fb7d 	bl	800b49c <__copybits>
 8008da2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008da4:	4648      	mov	r0, r9
 8008da6:	f001 ffe9 	bl	800ad7c <_Bfree>
 8008daa:	3c01      	subs	r4, #1
 8008dac:	2c04      	cmp	r4, #4
 8008dae:	d806      	bhi.n	8008dbe <_strtod_l+0xf6>
 8008db0:	e8df f004 	tbb	[pc, r4]
 8008db4:	1714030a 	.word	0x1714030a
 8008db8:	0a          	.byte	0x0a
 8008db9:	00          	.byte	0x00
 8008dba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8008dbe:	0730      	lsls	r0, r6, #28
 8008dc0:	d5c1      	bpl.n	8008d46 <_strtod_l+0x7e>
 8008dc2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008dc6:	e7be      	b.n	8008d46 <_strtod_l+0x7e>
 8008dc8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8008dcc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008dce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008dd2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008dd6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008dda:	e7f0      	b.n	8008dbe <_strtod_l+0xf6>
 8008ddc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8008f50 <_strtod_l+0x288>
 8008de0:	e7ed      	b.n	8008dbe <_strtod_l+0xf6>
 8008de2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008de6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8008dea:	e7e8      	b.n	8008dbe <_strtod_l+0xf6>
 8008dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	921b      	str	r2, [sp, #108]	; 0x6c
 8008df2:	785b      	ldrb	r3, [r3, #1]
 8008df4:	2b30      	cmp	r3, #48	; 0x30
 8008df6:	d0f9      	beq.n	8008dec <_strtod_l+0x124>
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d0a4      	beq.n	8008d46 <_strtod_l+0x7e>
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	2500      	movs	r5, #0
 8008e00:	9306      	str	r3, [sp, #24]
 8008e02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e04:	9308      	str	r3, [sp, #32]
 8008e06:	9507      	str	r5, [sp, #28]
 8008e08:	9505      	str	r5, [sp, #20]
 8008e0a:	220a      	movs	r2, #10
 8008e0c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008e0e:	7807      	ldrb	r7, [r0, #0]
 8008e10:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008e14:	b2d9      	uxtb	r1, r3
 8008e16:	2909      	cmp	r1, #9
 8008e18:	d929      	bls.n	8008e6e <_strtod_l+0x1a6>
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	f8d8 1000 	ldr.w	r1, [r8]
 8008e20:	f7ff ff22 	bl	8008c68 <strncmp>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d031      	beq.n	8008e8c <_strtod_l+0x1c4>
 8008e28:	2000      	movs	r0, #0
 8008e2a:	9c05      	ldr	r4, [sp, #20]
 8008e2c:	9004      	str	r0, [sp, #16]
 8008e2e:	463b      	mov	r3, r7
 8008e30:	4602      	mov	r2, r0
 8008e32:	2b65      	cmp	r3, #101	; 0x65
 8008e34:	d001      	beq.n	8008e3a <_strtod_l+0x172>
 8008e36:	2b45      	cmp	r3, #69	; 0x45
 8008e38:	d114      	bne.n	8008e64 <_strtod_l+0x19c>
 8008e3a:	b924      	cbnz	r4, 8008e46 <_strtod_l+0x17e>
 8008e3c:	b910      	cbnz	r0, 8008e44 <_strtod_l+0x17c>
 8008e3e:	9b06      	ldr	r3, [sp, #24]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d09e      	beq.n	8008d82 <_strtod_l+0xba>
 8008e44:	2400      	movs	r4, #0
 8008e46:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8008e48:	1c73      	adds	r3, r6, #1
 8008e4a:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e4c:	7873      	ldrb	r3, [r6, #1]
 8008e4e:	2b2b      	cmp	r3, #43	; 0x2b
 8008e50:	d078      	beq.n	8008f44 <_strtod_l+0x27c>
 8008e52:	2b2d      	cmp	r3, #45	; 0x2d
 8008e54:	d070      	beq.n	8008f38 <_strtod_l+0x270>
 8008e56:	f04f 0c00 	mov.w	ip, #0
 8008e5a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8008e5e:	2f09      	cmp	r7, #9
 8008e60:	d97c      	bls.n	8008f5c <_strtod_l+0x294>
 8008e62:	961b      	str	r6, [sp, #108]	; 0x6c
 8008e64:	f04f 0e00 	mov.w	lr, #0
 8008e68:	e09a      	b.n	8008fa0 <_strtod_l+0x2d8>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	e7c7      	b.n	8008dfe <_strtod_l+0x136>
 8008e6e:	9905      	ldr	r1, [sp, #20]
 8008e70:	2908      	cmp	r1, #8
 8008e72:	bfdd      	ittte	le
 8008e74:	9907      	ldrle	r1, [sp, #28]
 8008e76:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e7a:	9307      	strle	r3, [sp, #28]
 8008e7c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8008e80:	9b05      	ldr	r3, [sp, #20]
 8008e82:	3001      	adds	r0, #1
 8008e84:	3301      	adds	r3, #1
 8008e86:	9305      	str	r3, [sp, #20]
 8008e88:	901b      	str	r0, [sp, #108]	; 0x6c
 8008e8a:	e7bf      	b.n	8008e0c <_strtod_l+0x144>
 8008e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008e8e:	191a      	adds	r2, r3, r4
 8008e90:	921b      	str	r2, [sp, #108]	; 0x6c
 8008e92:	9a05      	ldr	r2, [sp, #20]
 8008e94:	5d1b      	ldrb	r3, [r3, r4]
 8008e96:	2a00      	cmp	r2, #0
 8008e98:	d037      	beq.n	8008f0a <_strtod_l+0x242>
 8008e9a:	9c05      	ldr	r4, [sp, #20]
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008ea2:	2909      	cmp	r1, #9
 8008ea4:	d913      	bls.n	8008ece <_strtod_l+0x206>
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	9104      	str	r1, [sp, #16]
 8008eaa:	e7c2      	b.n	8008e32 <_strtod_l+0x16a>
 8008eac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8008eb2:	785b      	ldrb	r3, [r3, #1]
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	2b30      	cmp	r3, #48	; 0x30
 8008eb8:	d0f8      	beq.n	8008eac <_strtod_l+0x1e4>
 8008eba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008ebe:	2a08      	cmp	r2, #8
 8008ec0:	f200 84e4 	bhi.w	800988c <_strtod_l+0xbc4>
 8008ec4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008ec6:	9208      	str	r2, [sp, #32]
 8008ec8:	4602      	mov	r2, r0
 8008eca:	2000      	movs	r0, #0
 8008ecc:	4604      	mov	r4, r0
 8008ece:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8008ed2:	f100 0101 	add.w	r1, r0, #1
 8008ed6:	d012      	beq.n	8008efe <_strtod_l+0x236>
 8008ed8:	440a      	add	r2, r1
 8008eda:	eb00 0c04 	add.w	ip, r0, r4
 8008ede:	4621      	mov	r1, r4
 8008ee0:	270a      	movs	r7, #10
 8008ee2:	458c      	cmp	ip, r1
 8008ee4:	d113      	bne.n	8008f0e <_strtod_l+0x246>
 8008ee6:	1821      	adds	r1, r4, r0
 8008ee8:	2908      	cmp	r1, #8
 8008eea:	f104 0401 	add.w	r4, r4, #1
 8008eee:	4404      	add	r4, r0
 8008ef0:	dc19      	bgt.n	8008f26 <_strtod_l+0x25e>
 8008ef2:	9b07      	ldr	r3, [sp, #28]
 8008ef4:	210a      	movs	r1, #10
 8008ef6:	fb01 e303 	mla	r3, r1, r3, lr
 8008efa:	9307      	str	r3, [sp, #28]
 8008efc:	2100      	movs	r1, #0
 8008efe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f00:	1c58      	adds	r0, r3, #1
 8008f02:	901b      	str	r0, [sp, #108]	; 0x6c
 8008f04:	785b      	ldrb	r3, [r3, #1]
 8008f06:	4608      	mov	r0, r1
 8008f08:	e7c9      	b.n	8008e9e <_strtod_l+0x1d6>
 8008f0a:	9805      	ldr	r0, [sp, #20]
 8008f0c:	e7d3      	b.n	8008eb6 <_strtod_l+0x1ee>
 8008f0e:	2908      	cmp	r1, #8
 8008f10:	f101 0101 	add.w	r1, r1, #1
 8008f14:	dc03      	bgt.n	8008f1e <_strtod_l+0x256>
 8008f16:	9b07      	ldr	r3, [sp, #28]
 8008f18:	437b      	muls	r3, r7
 8008f1a:	9307      	str	r3, [sp, #28]
 8008f1c:	e7e1      	b.n	8008ee2 <_strtod_l+0x21a>
 8008f1e:	2910      	cmp	r1, #16
 8008f20:	bfd8      	it	le
 8008f22:	437d      	mulle	r5, r7
 8008f24:	e7dd      	b.n	8008ee2 <_strtod_l+0x21a>
 8008f26:	2c10      	cmp	r4, #16
 8008f28:	bfdc      	itt	le
 8008f2a:	210a      	movle	r1, #10
 8008f2c:	fb01 e505 	mlale	r5, r1, r5, lr
 8008f30:	e7e4      	b.n	8008efc <_strtod_l+0x234>
 8008f32:	2301      	movs	r3, #1
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	e781      	b.n	8008e3c <_strtod_l+0x174>
 8008f38:	f04f 0c01 	mov.w	ip, #1
 8008f3c:	1cb3      	adds	r3, r6, #2
 8008f3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f40:	78b3      	ldrb	r3, [r6, #2]
 8008f42:	e78a      	b.n	8008e5a <_strtod_l+0x192>
 8008f44:	f04f 0c00 	mov.w	ip, #0
 8008f48:	e7f8      	b.n	8008f3c <_strtod_l+0x274>
 8008f4a:	bf00      	nop
 8008f4c:	0800e5d8 	.word	0x0800e5d8
 8008f50:	7ff00000 	.word	0x7ff00000
 8008f54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f56:	1c5f      	adds	r7, r3, #1
 8008f58:	971b      	str	r7, [sp, #108]	; 0x6c
 8008f5a:	785b      	ldrb	r3, [r3, #1]
 8008f5c:	2b30      	cmp	r3, #48	; 0x30
 8008f5e:	d0f9      	beq.n	8008f54 <_strtod_l+0x28c>
 8008f60:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8008f64:	2f08      	cmp	r7, #8
 8008f66:	f63f af7d 	bhi.w	8008e64 <_strtod_l+0x19c>
 8008f6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008f6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f70:	930a      	str	r3, [sp, #40]	; 0x28
 8008f72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008f74:	1c5f      	adds	r7, r3, #1
 8008f76:	971b      	str	r7, [sp, #108]	; 0x6c
 8008f78:	785b      	ldrb	r3, [r3, #1]
 8008f7a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8008f7e:	f1b8 0f09 	cmp.w	r8, #9
 8008f82:	d937      	bls.n	8008ff4 <_strtod_l+0x32c>
 8008f84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f86:	1a7f      	subs	r7, r7, r1
 8008f88:	2f08      	cmp	r7, #8
 8008f8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8008f8e:	dc37      	bgt.n	8009000 <_strtod_l+0x338>
 8008f90:	45be      	cmp	lr, r7
 8008f92:	bfa8      	it	ge
 8008f94:	46be      	movge	lr, r7
 8008f96:	f1bc 0f00 	cmp.w	ip, #0
 8008f9a:	d001      	beq.n	8008fa0 <_strtod_l+0x2d8>
 8008f9c:	f1ce 0e00 	rsb	lr, lr, #0
 8008fa0:	2c00      	cmp	r4, #0
 8008fa2:	d151      	bne.n	8009048 <_strtod_l+0x380>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	f47f aece 	bne.w	8008d46 <_strtod_l+0x7e>
 8008faa:	9a06      	ldr	r2, [sp, #24]
 8008fac:	2a00      	cmp	r2, #0
 8008fae:	f47f aeca 	bne.w	8008d46 <_strtod_l+0x7e>
 8008fb2:	9a04      	ldr	r2, [sp, #16]
 8008fb4:	2a00      	cmp	r2, #0
 8008fb6:	f47f aee4 	bne.w	8008d82 <_strtod_l+0xba>
 8008fba:	2b4e      	cmp	r3, #78	; 0x4e
 8008fbc:	d027      	beq.n	800900e <_strtod_l+0x346>
 8008fbe:	dc21      	bgt.n	8009004 <_strtod_l+0x33c>
 8008fc0:	2b49      	cmp	r3, #73	; 0x49
 8008fc2:	f47f aede 	bne.w	8008d82 <_strtod_l+0xba>
 8008fc6:	49a0      	ldr	r1, [pc, #640]	; (8009248 <_strtod_l+0x580>)
 8008fc8:	a81b      	add	r0, sp, #108	; 0x6c
 8008fca:	f001 fdd7 	bl	800ab7c <__match>
 8008fce:	2800      	cmp	r0, #0
 8008fd0:	f43f aed7 	beq.w	8008d82 <_strtod_l+0xba>
 8008fd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fd6:	499d      	ldr	r1, [pc, #628]	; (800924c <_strtod_l+0x584>)
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	a81b      	add	r0, sp, #108	; 0x6c
 8008fdc:	931b      	str	r3, [sp, #108]	; 0x6c
 8008fde:	f001 fdcd 	bl	800ab7c <__match>
 8008fe2:	b910      	cbnz	r0, 8008fea <_strtod_l+0x322>
 8008fe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	931b      	str	r3, [sp, #108]	; 0x6c
 8008fea:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009260 <_strtod_l+0x598>
 8008fee:	f04f 0a00 	mov.w	sl, #0
 8008ff2:	e6a8      	b.n	8008d46 <_strtod_l+0x7e>
 8008ff4:	210a      	movs	r1, #10
 8008ff6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008ffa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008ffe:	e7b8      	b.n	8008f72 <_strtod_l+0x2aa>
 8009000:	46be      	mov	lr, r7
 8009002:	e7c8      	b.n	8008f96 <_strtod_l+0x2ce>
 8009004:	2b69      	cmp	r3, #105	; 0x69
 8009006:	d0de      	beq.n	8008fc6 <_strtod_l+0x2fe>
 8009008:	2b6e      	cmp	r3, #110	; 0x6e
 800900a:	f47f aeba 	bne.w	8008d82 <_strtod_l+0xba>
 800900e:	4990      	ldr	r1, [pc, #576]	; (8009250 <_strtod_l+0x588>)
 8009010:	a81b      	add	r0, sp, #108	; 0x6c
 8009012:	f001 fdb3 	bl	800ab7c <__match>
 8009016:	2800      	cmp	r0, #0
 8009018:	f43f aeb3 	beq.w	8008d82 <_strtod_l+0xba>
 800901c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	2b28      	cmp	r3, #40	; 0x28
 8009022:	d10e      	bne.n	8009042 <_strtod_l+0x37a>
 8009024:	aa1e      	add	r2, sp, #120	; 0x78
 8009026:	498b      	ldr	r1, [pc, #556]	; (8009254 <_strtod_l+0x58c>)
 8009028:	a81b      	add	r0, sp, #108	; 0x6c
 800902a:	f001 fdbb 	bl	800aba4 <__hexnan>
 800902e:	2805      	cmp	r0, #5
 8009030:	d107      	bne.n	8009042 <_strtod_l+0x37a>
 8009032:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009034:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009038:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800903c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009040:	e681      	b.n	8008d46 <_strtod_l+0x7e>
 8009042:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009268 <_strtod_l+0x5a0>
 8009046:	e7d2      	b.n	8008fee <_strtod_l+0x326>
 8009048:	ebae 0302 	sub.w	r3, lr, r2
 800904c:	9306      	str	r3, [sp, #24]
 800904e:	9b05      	ldr	r3, [sp, #20]
 8009050:	9807      	ldr	r0, [sp, #28]
 8009052:	2b00      	cmp	r3, #0
 8009054:	bf08      	it	eq
 8009056:	4623      	moveq	r3, r4
 8009058:	2c10      	cmp	r4, #16
 800905a:	9305      	str	r3, [sp, #20]
 800905c:	46a0      	mov	r8, r4
 800905e:	bfa8      	it	ge
 8009060:	f04f 0810 	movge.w	r8, #16
 8009064:	f7f7 fa5e 	bl	8000524 <__aeabi_ui2d>
 8009068:	2c09      	cmp	r4, #9
 800906a:	4682      	mov	sl, r0
 800906c:	468b      	mov	fp, r1
 800906e:	dc13      	bgt.n	8009098 <_strtod_l+0x3d0>
 8009070:	9b06      	ldr	r3, [sp, #24]
 8009072:	2b00      	cmp	r3, #0
 8009074:	f43f ae67 	beq.w	8008d46 <_strtod_l+0x7e>
 8009078:	9b06      	ldr	r3, [sp, #24]
 800907a:	dd7a      	ble.n	8009172 <_strtod_l+0x4aa>
 800907c:	2b16      	cmp	r3, #22
 800907e:	dc61      	bgt.n	8009144 <_strtod_l+0x47c>
 8009080:	4a75      	ldr	r2, [pc, #468]	; (8009258 <_strtod_l+0x590>)
 8009082:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8009086:	e9de 0100 	ldrd	r0, r1, [lr]
 800908a:	4652      	mov	r2, sl
 800908c:	465b      	mov	r3, fp
 800908e:	f7f7 fac3 	bl	8000618 <__aeabi_dmul>
 8009092:	4682      	mov	sl, r0
 8009094:	468b      	mov	fp, r1
 8009096:	e656      	b.n	8008d46 <_strtod_l+0x7e>
 8009098:	4b6f      	ldr	r3, [pc, #444]	; (8009258 <_strtod_l+0x590>)
 800909a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800909e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80090a2:	f7f7 fab9 	bl	8000618 <__aeabi_dmul>
 80090a6:	4606      	mov	r6, r0
 80090a8:	4628      	mov	r0, r5
 80090aa:	460f      	mov	r7, r1
 80090ac:	f7f7 fa3a 	bl	8000524 <__aeabi_ui2d>
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4630      	mov	r0, r6
 80090b6:	4639      	mov	r1, r7
 80090b8:	f7f7 f8f8 	bl	80002ac <__adddf3>
 80090bc:	2c0f      	cmp	r4, #15
 80090be:	4682      	mov	sl, r0
 80090c0:	468b      	mov	fp, r1
 80090c2:	ddd5      	ble.n	8009070 <_strtod_l+0x3a8>
 80090c4:	9b06      	ldr	r3, [sp, #24]
 80090c6:	eba4 0808 	sub.w	r8, r4, r8
 80090ca:	4498      	add	r8, r3
 80090cc:	f1b8 0f00 	cmp.w	r8, #0
 80090d0:	f340 8096 	ble.w	8009200 <_strtod_l+0x538>
 80090d4:	f018 030f 	ands.w	r3, r8, #15
 80090d8:	d00a      	beq.n	80090f0 <_strtod_l+0x428>
 80090da:	495f      	ldr	r1, [pc, #380]	; (8009258 <_strtod_l+0x590>)
 80090dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090e0:	4652      	mov	r2, sl
 80090e2:	465b      	mov	r3, fp
 80090e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090e8:	f7f7 fa96 	bl	8000618 <__aeabi_dmul>
 80090ec:	4682      	mov	sl, r0
 80090ee:	468b      	mov	fp, r1
 80090f0:	f038 080f 	bics.w	r8, r8, #15
 80090f4:	d073      	beq.n	80091de <_strtod_l+0x516>
 80090f6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80090fa:	dd47      	ble.n	800918c <_strtod_l+0x4c4>
 80090fc:	2400      	movs	r4, #0
 80090fe:	46a0      	mov	r8, r4
 8009100:	9407      	str	r4, [sp, #28]
 8009102:	9405      	str	r4, [sp, #20]
 8009104:	2322      	movs	r3, #34	; 0x22
 8009106:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009260 <_strtod_l+0x598>
 800910a:	f8c9 3000 	str.w	r3, [r9]
 800910e:	f04f 0a00 	mov.w	sl, #0
 8009112:	9b07      	ldr	r3, [sp, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f43f ae16 	beq.w	8008d46 <_strtod_l+0x7e>
 800911a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800911c:	4648      	mov	r0, r9
 800911e:	f001 fe2d 	bl	800ad7c <_Bfree>
 8009122:	9905      	ldr	r1, [sp, #20]
 8009124:	4648      	mov	r0, r9
 8009126:	f001 fe29 	bl	800ad7c <_Bfree>
 800912a:	4641      	mov	r1, r8
 800912c:	4648      	mov	r0, r9
 800912e:	f001 fe25 	bl	800ad7c <_Bfree>
 8009132:	9907      	ldr	r1, [sp, #28]
 8009134:	4648      	mov	r0, r9
 8009136:	f001 fe21 	bl	800ad7c <_Bfree>
 800913a:	4621      	mov	r1, r4
 800913c:	4648      	mov	r0, r9
 800913e:	f001 fe1d 	bl	800ad7c <_Bfree>
 8009142:	e600      	b.n	8008d46 <_strtod_l+0x7e>
 8009144:	9a06      	ldr	r2, [sp, #24]
 8009146:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800914a:	4293      	cmp	r3, r2
 800914c:	dbba      	blt.n	80090c4 <_strtod_l+0x3fc>
 800914e:	4d42      	ldr	r5, [pc, #264]	; (8009258 <_strtod_l+0x590>)
 8009150:	f1c4 040f 	rsb	r4, r4, #15
 8009154:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009158:	4652      	mov	r2, sl
 800915a:	465b      	mov	r3, fp
 800915c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009160:	f7f7 fa5a 	bl	8000618 <__aeabi_dmul>
 8009164:	9b06      	ldr	r3, [sp, #24]
 8009166:	1b1c      	subs	r4, r3, r4
 8009168:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800916c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009170:	e78d      	b.n	800908e <_strtod_l+0x3c6>
 8009172:	f113 0f16 	cmn.w	r3, #22
 8009176:	dba5      	blt.n	80090c4 <_strtod_l+0x3fc>
 8009178:	4a37      	ldr	r2, [pc, #220]	; (8009258 <_strtod_l+0x590>)
 800917a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800917e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8009182:	4650      	mov	r0, sl
 8009184:	4659      	mov	r1, fp
 8009186:	f7f7 fb71 	bl	800086c <__aeabi_ddiv>
 800918a:	e782      	b.n	8009092 <_strtod_l+0x3ca>
 800918c:	2300      	movs	r3, #0
 800918e:	4e33      	ldr	r6, [pc, #204]	; (800925c <_strtod_l+0x594>)
 8009190:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009194:	4650      	mov	r0, sl
 8009196:	4659      	mov	r1, fp
 8009198:	461d      	mov	r5, r3
 800919a:	f1b8 0f01 	cmp.w	r8, #1
 800919e:	dc21      	bgt.n	80091e4 <_strtod_l+0x51c>
 80091a0:	b10b      	cbz	r3, 80091a6 <_strtod_l+0x4de>
 80091a2:	4682      	mov	sl, r0
 80091a4:	468b      	mov	fp, r1
 80091a6:	4b2d      	ldr	r3, [pc, #180]	; (800925c <_strtod_l+0x594>)
 80091a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80091ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80091b0:	4652      	mov	r2, sl
 80091b2:	465b      	mov	r3, fp
 80091b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80091b8:	f7f7 fa2e 	bl	8000618 <__aeabi_dmul>
 80091bc:	4b28      	ldr	r3, [pc, #160]	; (8009260 <_strtod_l+0x598>)
 80091be:	460a      	mov	r2, r1
 80091c0:	400b      	ands	r3, r1
 80091c2:	4928      	ldr	r1, [pc, #160]	; (8009264 <_strtod_l+0x59c>)
 80091c4:	428b      	cmp	r3, r1
 80091c6:	4682      	mov	sl, r0
 80091c8:	d898      	bhi.n	80090fc <_strtod_l+0x434>
 80091ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80091ce:	428b      	cmp	r3, r1
 80091d0:	bf86      	itte	hi
 80091d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800926c <_strtod_l+0x5a4>
 80091d6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80091da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80091de:	2300      	movs	r3, #0
 80091e0:	9304      	str	r3, [sp, #16]
 80091e2:	e077      	b.n	80092d4 <_strtod_l+0x60c>
 80091e4:	f018 0f01 	tst.w	r8, #1
 80091e8:	d006      	beq.n	80091f8 <_strtod_l+0x530>
 80091ea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80091ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f2:	f7f7 fa11 	bl	8000618 <__aeabi_dmul>
 80091f6:	2301      	movs	r3, #1
 80091f8:	3501      	adds	r5, #1
 80091fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80091fe:	e7cc      	b.n	800919a <_strtod_l+0x4d2>
 8009200:	d0ed      	beq.n	80091de <_strtod_l+0x516>
 8009202:	f1c8 0800 	rsb	r8, r8, #0
 8009206:	f018 020f 	ands.w	r2, r8, #15
 800920a:	d00a      	beq.n	8009222 <_strtod_l+0x55a>
 800920c:	4b12      	ldr	r3, [pc, #72]	; (8009258 <_strtod_l+0x590>)
 800920e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009212:	4650      	mov	r0, sl
 8009214:	4659      	mov	r1, fp
 8009216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921a:	f7f7 fb27 	bl	800086c <__aeabi_ddiv>
 800921e:	4682      	mov	sl, r0
 8009220:	468b      	mov	fp, r1
 8009222:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009226:	d0da      	beq.n	80091de <_strtod_l+0x516>
 8009228:	f1b8 0f1f 	cmp.w	r8, #31
 800922c:	dd20      	ble.n	8009270 <_strtod_l+0x5a8>
 800922e:	2400      	movs	r4, #0
 8009230:	46a0      	mov	r8, r4
 8009232:	9407      	str	r4, [sp, #28]
 8009234:	9405      	str	r4, [sp, #20]
 8009236:	2322      	movs	r3, #34	; 0x22
 8009238:	f04f 0a00 	mov.w	sl, #0
 800923c:	f04f 0b00 	mov.w	fp, #0
 8009240:	f8c9 3000 	str.w	r3, [r9]
 8009244:	e765      	b.n	8009112 <_strtod_l+0x44a>
 8009246:	bf00      	nop
 8009248:	0800e5a1 	.word	0x0800e5a1
 800924c:	0800e62b 	.word	0x0800e62b
 8009250:	0800e5a9 	.word	0x0800e5a9
 8009254:	0800e5ec 	.word	0x0800e5ec
 8009258:	0800e668 	.word	0x0800e668
 800925c:	0800e640 	.word	0x0800e640
 8009260:	7ff00000 	.word	0x7ff00000
 8009264:	7ca00000 	.word	0x7ca00000
 8009268:	fff80000 	.word	0xfff80000
 800926c:	7fefffff 	.word	0x7fefffff
 8009270:	f018 0310 	ands.w	r3, r8, #16
 8009274:	bf18      	it	ne
 8009276:	236a      	movne	r3, #106	; 0x6a
 8009278:	4da0      	ldr	r5, [pc, #640]	; (80094fc <_strtod_l+0x834>)
 800927a:	9304      	str	r3, [sp, #16]
 800927c:	4650      	mov	r0, sl
 800927e:	4659      	mov	r1, fp
 8009280:	2300      	movs	r3, #0
 8009282:	f1b8 0f00 	cmp.w	r8, #0
 8009286:	f300 810a 	bgt.w	800949e <_strtod_l+0x7d6>
 800928a:	b10b      	cbz	r3, 8009290 <_strtod_l+0x5c8>
 800928c:	4682      	mov	sl, r0
 800928e:	468b      	mov	fp, r1
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	b1bb      	cbz	r3, 80092c4 <_strtod_l+0x5fc>
 8009294:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009298:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800929c:	2b00      	cmp	r3, #0
 800929e:	4659      	mov	r1, fp
 80092a0:	dd10      	ble.n	80092c4 <_strtod_l+0x5fc>
 80092a2:	2b1f      	cmp	r3, #31
 80092a4:	f340 8107 	ble.w	80094b6 <_strtod_l+0x7ee>
 80092a8:	2b34      	cmp	r3, #52	; 0x34
 80092aa:	bfde      	ittt	le
 80092ac:	3b20      	suble	r3, #32
 80092ae:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80092b2:	fa02 f303 	lslle.w	r3, r2, r3
 80092b6:	f04f 0a00 	mov.w	sl, #0
 80092ba:	bfcc      	ite	gt
 80092bc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80092c0:	ea03 0b01 	andle.w	fp, r3, r1
 80092c4:	2200      	movs	r2, #0
 80092c6:	2300      	movs	r3, #0
 80092c8:	4650      	mov	r0, sl
 80092ca:	4659      	mov	r1, fp
 80092cc:	f7f7 fc0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	d1ac      	bne.n	800922e <_strtod_l+0x566>
 80092d4:	9b07      	ldr	r3, [sp, #28]
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	9a05      	ldr	r2, [sp, #20]
 80092da:	9908      	ldr	r1, [sp, #32]
 80092dc:	4623      	mov	r3, r4
 80092de:	4648      	mov	r0, r9
 80092e0:	f001 fd9e 	bl	800ae20 <__s2b>
 80092e4:	9007      	str	r0, [sp, #28]
 80092e6:	2800      	cmp	r0, #0
 80092e8:	f43f af08 	beq.w	80090fc <_strtod_l+0x434>
 80092ec:	9a06      	ldr	r2, [sp, #24]
 80092ee:	9b06      	ldr	r3, [sp, #24]
 80092f0:	2a00      	cmp	r2, #0
 80092f2:	f1c3 0300 	rsb	r3, r3, #0
 80092f6:	bfa8      	it	ge
 80092f8:	2300      	movge	r3, #0
 80092fa:	930e      	str	r3, [sp, #56]	; 0x38
 80092fc:	2400      	movs	r4, #0
 80092fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009302:	9316      	str	r3, [sp, #88]	; 0x58
 8009304:	46a0      	mov	r8, r4
 8009306:	9b07      	ldr	r3, [sp, #28]
 8009308:	4648      	mov	r0, r9
 800930a:	6859      	ldr	r1, [r3, #4]
 800930c:	f001 fd02 	bl	800ad14 <_Balloc>
 8009310:	9005      	str	r0, [sp, #20]
 8009312:	2800      	cmp	r0, #0
 8009314:	f43f aef6 	beq.w	8009104 <_strtod_l+0x43c>
 8009318:	9b07      	ldr	r3, [sp, #28]
 800931a:	691a      	ldr	r2, [r3, #16]
 800931c:	3202      	adds	r2, #2
 800931e:	f103 010c 	add.w	r1, r3, #12
 8009322:	0092      	lsls	r2, r2, #2
 8009324:	300c      	adds	r0, #12
 8009326:	f7fe fd57 	bl	8007dd8 <memcpy>
 800932a:	aa1e      	add	r2, sp, #120	; 0x78
 800932c:	a91d      	add	r1, sp, #116	; 0x74
 800932e:	ec4b ab10 	vmov	d0, sl, fp
 8009332:	4648      	mov	r0, r9
 8009334:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009338:	f002 f82e 	bl	800b398 <__d2b>
 800933c:	901c      	str	r0, [sp, #112]	; 0x70
 800933e:	2800      	cmp	r0, #0
 8009340:	f43f aee0 	beq.w	8009104 <_strtod_l+0x43c>
 8009344:	2101      	movs	r1, #1
 8009346:	4648      	mov	r0, r9
 8009348:	f001 fdf6 	bl	800af38 <__i2b>
 800934c:	4680      	mov	r8, r0
 800934e:	2800      	cmp	r0, #0
 8009350:	f43f aed8 	beq.w	8009104 <_strtod_l+0x43c>
 8009354:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009356:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009358:	2e00      	cmp	r6, #0
 800935a:	bfab      	itete	ge
 800935c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800935e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009360:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8009362:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8009364:	bfac      	ite	ge
 8009366:	18f7      	addge	r7, r6, r3
 8009368:	1b9d      	sublt	r5, r3, r6
 800936a:	9b04      	ldr	r3, [sp, #16]
 800936c:	1af6      	subs	r6, r6, r3
 800936e:	4416      	add	r6, r2
 8009370:	4b63      	ldr	r3, [pc, #396]	; (8009500 <_strtod_l+0x838>)
 8009372:	3e01      	subs	r6, #1
 8009374:	429e      	cmp	r6, r3
 8009376:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800937a:	f280 80af 	bge.w	80094dc <_strtod_l+0x814>
 800937e:	1b9b      	subs	r3, r3, r6
 8009380:	2b1f      	cmp	r3, #31
 8009382:	eba2 0203 	sub.w	r2, r2, r3
 8009386:	f04f 0101 	mov.w	r1, #1
 800938a:	f300 809b 	bgt.w	80094c4 <_strtod_l+0x7fc>
 800938e:	fa01 f303 	lsl.w	r3, r1, r3
 8009392:	930f      	str	r3, [sp, #60]	; 0x3c
 8009394:	2300      	movs	r3, #0
 8009396:	930a      	str	r3, [sp, #40]	; 0x28
 8009398:	18be      	adds	r6, r7, r2
 800939a:	9b04      	ldr	r3, [sp, #16]
 800939c:	42b7      	cmp	r7, r6
 800939e:	4415      	add	r5, r2
 80093a0:	441d      	add	r5, r3
 80093a2:	463b      	mov	r3, r7
 80093a4:	bfa8      	it	ge
 80093a6:	4633      	movge	r3, r6
 80093a8:	42ab      	cmp	r3, r5
 80093aa:	bfa8      	it	ge
 80093ac:	462b      	movge	r3, r5
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bfc2      	ittt	gt
 80093b2:	1af6      	subgt	r6, r6, r3
 80093b4:	1aed      	subgt	r5, r5, r3
 80093b6:	1aff      	subgt	r7, r7, r3
 80093b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093ba:	b1bb      	cbz	r3, 80093ec <_strtod_l+0x724>
 80093bc:	4641      	mov	r1, r8
 80093be:	461a      	mov	r2, r3
 80093c0:	4648      	mov	r0, r9
 80093c2:	f001 fe59 	bl	800b078 <__pow5mult>
 80093c6:	4680      	mov	r8, r0
 80093c8:	2800      	cmp	r0, #0
 80093ca:	f43f ae9b 	beq.w	8009104 <_strtod_l+0x43c>
 80093ce:	4601      	mov	r1, r0
 80093d0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80093d2:	4648      	mov	r0, r9
 80093d4:	f001 fdb9 	bl	800af4a <__multiply>
 80093d8:	900c      	str	r0, [sp, #48]	; 0x30
 80093da:	2800      	cmp	r0, #0
 80093dc:	f43f ae92 	beq.w	8009104 <_strtod_l+0x43c>
 80093e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093e2:	4648      	mov	r0, r9
 80093e4:	f001 fcca 	bl	800ad7c <_Bfree>
 80093e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ea:	931c      	str	r3, [sp, #112]	; 0x70
 80093ec:	2e00      	cmp	r6, #0
 80093ee:	dc7a      	bgt.n	80094e6 <_strtod_l+0x81e>
 80093f0:	9b06      	ldr	r3, [sp, #24]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	dd08      	ble.n	8009408 <_strtod_l+0x740>
 80093f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80093f8:	9905      	ldr	r1, [sp, #20]
 80093fa:	4648      	mov	r0, r9
 80093fc:	f001 fe3c 	bl	800b078 <__pow5mult>
 8009400:	9005      	str	r0, [sp, #20]
 8009402:	2800      	cmp	r0, #0
 8009404:	f43f ae7e 	beq.w	8009104 <_strtod_l+0x43c>
 8009408:	2d00      	cmp	r5, #0
 800940a:	dd08      	ble.n	800941e <_strtod_l+0x756>
 800940c:	462a      	mov	r2, r5
 800940e:	9905      	ldr	r1, [sp, #20]
 8009410:	4648      	mov	r0, r9
 8009412:	f001 fe7f 	bl	800b114 <__lshift>
 8009416:	9005      	str	r0, [sp, #20]
 8009418:	2800      	cmp	r0, #0
 800941a:	f43f ae73 	beq.w	8009104 <_strtod_l+0x43c>
 800941e:	2f00      	cmp	r7, #0
 8009420:	dd08      	ble.n	8009434 <_strtod_l+0x76c>
 8009422:	4641      	mov	r1, r8
 8009424:	463a      	mov	r2, r7
 8009426:	4648      	mov	r0, r9
 8009428:	f001 fe74 	bl	800b114 <__lshift>
 800942c:	4680      	mov	r8, r0
 800942e:	2800      	cmp	r0, #0
 8009430:	f43f ae68 	beq.w	8009104 <_strtod_l+0x43c>
 8009434:	9a05      	ldr	r2, [sp, #20]
 8009436:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009438:	4648      	mov	r0, r9
 800943a:	f001 fed9 	bl	800b1f0 <__mdiff>
 800943e:	4604      	mov	r4, r0
 8009440:	2800      	cmp	r0, #0
 8009442:	f43f ae5f 	beq.w	8009104 <_strtod_l+0x43c>
 8009446:	68c3      	ldr	r3, [r0, #12]
 8009448:	930c      	str	r3, [sp, #48]	; 0x30
 800944a:	2300      	movs	r3, #0
 800944c:	60c3      	str	r3, [r0, #12]
 800944e:	4641      	mov	r1, r8
 8009450:	f001 feb4 	bl	800b1bc <__mcmp>
 8009454:	2800      	cmp	r0, #0
 8009456:	da55      	bge.n	8009504 <_strtod_l+0x83c>
 8009458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800945a:	b9e3      	cbnz	r3, 8009496 <_strtod_l+0x7ce>
 800945c:	f1ba 0f00 	cmp.w	sl, #0
 8009460:	d119      	bne.n	8009496 <_strtod_l+0x7ce>
 8009462:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009466:	b9b3      	cbnz	r3, 8009496 <_strtod_l+0x7ce>
 8009468:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800946c:	0d1b      	lsrs	r3, r3, #20
 800946e:	051b      	lsls	r3, r3, #20
 8009470:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009474:	d90f      	bls.n	8009496 <_strtod_l+0x7ce>
 8009476:	6963      	ldr	r3, [r4, #20]
 8009478:	b913      	cbnz	r3, 8009480 <_strtod_l+0x7b8>
 800947a:	6923      	ldr	r3, [r4, #16]
 800947c:	2b01      	cmp	r3, #1
 800947e:	dd0a      	ble.n	8009496 <_strtod_l+0x7ce>
 8009480:	4621      	mov	r1, r4
 8009482:	2201      	movs	r2, #1
 8009484:	4648      	mov	r0, r9
 8009486:	f001 fe45 	bl	800b114 <__lshift>
 800948a:	4641      	mov	r1, r8
 800948c:	4604      	mov	r4, r0
 800948e:	f001 fe95 	bl	800b1bc <__mcmp>
 8009492:	2800      	cmp	r0, #0
 8009494:	dc67      	bgt.n	8009566 <_strtod_l+0x89e>
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d171      	bne.n	8009580 <_strtod_l+0x8b8>
 800949c:	e63d      	b.n	800911a <_strtod_l+0x452>
 800949e:	f018 0f01 	tst.w	r8, #1
 80094a2:	d004      	beq.n	80094ae <_strtod_l+0x7e6>
 80094a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094a8:	f7f7 f8b6 	bl	8000618 <__aeabi_dmul>
 80094ac:	2301      	movs	r3, #1
 80094ae:	ea4f 0868 	mov.w	r8, r8, asr #1
 80094b2:	3508      	adds	r5, #8
 80094b4:	e6e5      	b.n	8009282 <_strtod_l+0x5ba>
 80094b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094ba:	fa02 f303 	lsl.w	r3, r2, r3
 80094be:	ea03 0a0a 	and.w	sl, r3, sl
 80094c2:	e6ff      	b.n	80092c4 <_strtod_l+0x5fc>
 80094c4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80094c8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80094cc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80094d0:	36e2      	adds	r6, #226	; 0xe2
 80094d2:	fa01 f306 	lsl.w	r3, r1, r6
 80094d6:	930a      	str	r3, [sp, #40]	; 0x28
 80094d8:	910f      	str	r1, [sp, #60]	; 0x3c
 80094da:	e75d      	b.n	8009398 <_strtod_l+0x6d0>
 80094dc:	2300      	movs	r3, #0
 80094de:	930a      	str	r3, [sp, #40]	; 0x28
 80094e0:	2301      	movs	r3, #1
 80094e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80094e4:	e758      	b.n	8009398 <_strtod_l+0x6d0>
 80094e6:	4632      	mov	r2, r6
 80094e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80094ea:	4648      	mov	r0, r9
 80094ec:	f001 fe12 	bl	800b114 <__lshift>
 80094f0:	901c      	str	r0, [sp, #112]	; 0x70
 80094f2:	2800      	cmp	r0, #0
 80094f4:	f47f af7c 	bne.w	80093f0 <_strtod_l+0x728>
 80094f8:	e604      	b.n	8009104 <_strtod_l+0x43c>
 80094fa:	bf00      	nop
 80094fc:	0800e600 	.word	0x0800e600
 8009500:	fffffc02 	.word	0xfffffc02
 8009504:	465d      	mov	r5, fp
 8009506:	f040 8086 	bne.w	8009616 <_strtod_l+0x94e>
 800950a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800950c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009510:	b32a      	cbz	r2, 800955e <_strtod_l+0x896>
 8009512:	4aaf      	ldr	r2, [pc, #700]	; (80097d0 <_strtod_l+0xb08>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d153      	bne.n	80095c0 <_strtod_l+0x8f8>
 8009518:	9b04      	ldr	r3, [sp, #16]
 800951a:	4650      	mov	r0, sl
 800951c:	b1d3      	cbz	r3, 8009554 <_strtod_l+0x88c>
 800951e:	4aad      	ldr	r2, [pc, #692]	; (80097d4 <_strtod_l+0xb0c>)
 8009520:	402a      	ands	r2, r5
 8009522:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009526:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800952a:	d816      	bhi.n	800955a <_strtod_l+0x892>
 800952c:	0d12      	lsrs	r2, r2, #20
 800952e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009532:	fa01 f303 	lsl.w	r3, r1, r3
 8009536:	4298      	cmp	r0, r3
 8009538:	d142      	bne.n	80095c0 <_strtod_l+0x8f8>
 800953a:	4ba7      	ldr	r3, [pc, #668]	; (80097d8 <_strtod_l+0xb10>)
 800953c:	429d      	cmp	r5, r3
 800953e:	d102      	bne.n	8009546 <_strtod_l+0x87e>
 8009540:	3001      	adds	r0, #1
 8009542:	f43f addf 	beq.w	8009104 <_strtod_l+0x43c>
 8009546:	4ba3      	ldr	r3, [pc, #652]	; (80097d4 <_strtod_l+0xb0c>)
 8009548:	402b      	ands	r3, r5
 800954a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800954e:	f04f 0a00 	mov.w	sl, #0
 8009552:	e7a0      	b.n	8009496 <_strtod_l+0x7ce>
 8009554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009558:	e7ed      	b.n	8009536 <_strtod_l+0x86e>
 800955a:	460b      	mov	r3, r1
 800955c:	e7eb      	b.n	8009536 <_strtod_l+0x86e>
 800955e:	bb7b      	cbnz	r3, 80095c0 <_strtod_l+0x8f8>
 8009560:	f1ba 0f00 	cmp.w	sl, #0
 8009564:	d12c      	bne.n	80095c0 <_strtod_l+0x8f8>
 8009566:	9904      	ldr	r1, [sp, #16]
 8009568:	4a9a      	ldr	r2, [pc, #616]	; (80097d4 <_strtod_l+0xb0c>)
 800956a:	465b      	mov	r3, fp
 800956c:	b1f1      	cbz	r1, 80095ac <_strtod_l+0x8e4>
 800956e:	ea02 010b 	and.w	r1, r2, fp
 8009572:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009576:	dc19      	bgt.n	80095ac <_strtod_l+0x8e4>
 8009578:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800957c:	f77f ae5b 	ble.w	8009236 <_strtod_l+0x56e>
 8009580:	4a96      	ldr	r2, [pc, #600]	; (80097dc <_strtod_l+0xb14>)
 8009582:	2300      	movs	r3, #0
 8009584:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009588:	4650      	mov	r0, sl
 800958a:	4659      	mov	r1, fp
 800958c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009590:	f7f7 f842 	bl	8000618 <__aeabi_dmul>
 8009594:	4682      	mov	sl, r0
 8009596:	468b      	mov	fp, r1
 8009598:	2900      	cmp	r1, #0
 800959a:	f47f adbe 	bne.w	800911a <_strtod_l+0x452>
 800959e:	2800      	cmp	r0, #0
 80095a0:	f47f adbb 	bne.w	800911a <_strtod_l+0x452>
 80095a4:	2322      	movs	r3, #34	; 0x22
 80095a6:	f8c9 3000 	str.w	r3, [r9]
 80095aa:	e5b6      	b.n	800911a <_strtod_l+0x452>
 80095ac:	4013      	ands	r3, r2
 80095ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80095b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80095b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80095ba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80095be:	e76a      	b.n	8009496 <_strtod_l+0x7ce>
 80095c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095c2:	b193      	cbz	r3, 80095ea <_strtod_l+0x922>
 80095c4:	422b      	tst	r3, r5
 80095c6:	f43f af66 	beq.w	8009496 <_strtod_l+0x7ce>
 80095ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095cc:	9a04      	ldr	r2, [sp, #16]
 80095ce:	4650      	mov	r0, sl
 80095d0:	4659      	mov	r1, fp
 80095d2:	b173      	cbz	r3, 80095f2 <_strtod_l+0x92a>
 80095d4:	f7ff fb5a 	bl	8008c8c <sulp>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095e0:	f7f6 fe64 	bl	80002ac <__adddf3>
 80095e4:	4682      	mov	sl, r0
 80095e6:	468b      	mov	fp, r1
 80095e8:	e755      	b.n	8009496 <_strtod_l+0x7ce>
 80095ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095ec:	ea13 0f0a 	tst.w	r3, sl
 80095f0:	e7e9      	b.n	80095c6 <_strtod_l+0x8fe>
 80095f2:	f7ff fb4b 	bl	8008c8c <sulp>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80095fe:	f7f6 fe53 	bl	80002a8 <__aeabi_dsub>
 8009602:	2200      	movs	r2, #0
 8009604:	2300      	movs	r3, #0
 8009606:	4682      	mov	sl, r0
 8009608:	468b      	mov	fp, r1
 800960a:	f7f7 fa6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800960e:	2800      	cmp	r0, #0
 8009610:	f47f ae11 	bne.w	8009236 <_strtod_l+0x56e>
 8009614:	e73f      	b.n	8009496 <_strtod_l+0x7ce>
 8009616:	4641      	mov	r1, r8
 8009618:	4620      	mov	r0, r4
 800961a:	f001 ff0c 	bl	800b436 <__ratio>
 800961e:	ec57 6b10 	vmov	r6, r7, d0
 8009622:	2200      	movs	r2, #0
 8009624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009628:	ee10 0a10 	vmov	r0, s0
 800962c:	4639      	mov	r1, r7
 800962e:	f7f7 fa6f 	bl	8000b10 <__aeabi_dcmple>
 8009632:	2800      	cmp	r0, #0
 8009634:	d077      	beq.n	8009726 <_strtod_l+0xa5e>
 8009636:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009638:	2b00      	cmp	r3, #0
 800963a:	d04a      	beq.n	80096d2 <_strtod_l+0xa0a>
 800963c:	4b68      	ldr	r3, [pc, #416]	; (80097e0 <_strtod_l+0xb18>)
 800963e:	2200      	movs	r2, #0
 8009640:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009644:	4f66      	ldr	r7, [pc, #408]	; (80097e0 <_strtod_l+0xb18>)
 8009646:	2600      	movs	r6, #0
 8009648:	4b62      	ldr	r3, [pc, #392]	; (80097d4 <_strtod_l+0xb0c>)
 800964a:	402b      	ands	r3, r5
 800964c:	930f      	str	r3, [sp, #60]	; 0x3c
 800964e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009650:	4b64      	ldr	r3, [pc, #400]	; (80097e4 <_strtod_l+0xb1c>)
 8009652:	429a      	cmp	r2, r3
 8009654:	f040 80ce 	bne.w	80097f4 <_strtod_l+0xb2c>
 8009658:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800965c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009660:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009664:	ec4b ab10 	vmov	d0, sl, fp
 8009668:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800966c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009670:	f001 fe1c 	bl	800b2ac <__ulp>
 8009674:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009678:	ec53 2b10 	vmov	r2, r3, d0
 800967c:	f7f6 ffcc 	bl	8000618 <__aeabi_dmul>
 8009680:	4652      	mov	r2, sl
 8009682:	465b      	mov	r3, fp
 8009684:	f7f6 fe12 	bl	80002ac <__adddf3>
 8009688:	460b      	mov	r3, r1
 800968a:	4952      	ldr	r1, [pc, #328]	; (80097d4 <_strtod_l+0xb0c>)
 800968c:	4a56      	ldr	r2, [pc, #344]	; (80097e8 <_strtod_l+0xb20>)
 800968e:	4019      	ands	r1, r3
 8009690:	4291      	cmp	r1, r2
 8009692:	4682      	mov	sl, r0
 8009694:	d95b      	bls.n	800974e <_strtod_l+0xa86>
 8009696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009698:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800969c:	4293      	cmp	r3, r2
 800969e:	d103      	bne.n	80096a8 <_strtod_l+0x9e0>
 80096a0:	9b08      	ldr	r3, [sp, #32]
 80096a2:	3301      	adds	r3, #1
 80096a4:	f43f ad2e 	beq.w	8009104 <_strtod_l+0x43c>
 80096a8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80097d8 <_strtod_l+0xb10>
 80096ac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80096b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80096b2:	4648      	mov	r0, r9
 80096b4:	f001 fb62 	bl	800ad7c <_Bfree>
 80096b8:	9905      	ldr	r1, [sp, #20]
 80096ba:	4648      	mov	r0, r9
 80096bc:	f001 fb5e 	bl	800ad7c <_Bfree>
 80096c0:	4641      	mov	r1, r8
 80096c2:	4648      	mov	r0, r9
 80096c4:	f001 fb5a 	bl	800ad7c <_Bfree>
 80096c8:	4621      	mov	r1, r4
 80096ca:	4648      	mov	r0, r9
 80096cc:	f001 fb56 	bl	800ad7c <_Bfree>
 80096d0:	e619      	b.n	8009306 <_strtod_l+0x63e>
 80096d2:	f1ba 0f00 	cmp.w	sl, #0
 80096d6:	d11a      	bne.n	800970e <_strtod_l+0xa46>
 80096d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096dc:	b9eb      	cbnz	r3, 800971a <_strtod_l+0xa52>
 80096de:	2200      	movs	r2, #0
 80096e0:	4b3f      	ldr	r3, [pc, #252]	; (80097e0 <_strtod_l+0xb18>)
 80096e2:	4630      	mov	r0, r6
 80096e4:	4639      	mov	r1, r7
 80096e6:	f7f7 fa09 	bl	8000afc <__aeabi_dcmplt>
 80096ea:	b9c8      	cbnz	r0, 8009720 <_strtod_l+0xa58>
 80096ec:	4630      	mov	r0, r6
 80096ee:	4639      	mov	r1, r7
 80096f0:	2200      	movs	r2, #0
 80096f2:	4b3e      	ldr	r3, [pc, #248]	; (80097ec <_strtod_l+0xb24>)
 80096f4:	f7f6 ff90 	bl	8000618 <__aeabi_dmul>
 80096f8:	4606      	mov	r6, r0
 80096fa:	460f      	mov	r7, r1
 80096fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009700:	9618      	str	r6, [sp, #96]	; 0x60
 8009702:	9319      	str	r3, [sp, #100]	; 0x64
 8009704:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009708:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800970c:	e79c      	b.n	8009648 <_strtod_l+0x980>
 800970e:	f1ba 0f01 	cmp.w	sl, #1
 8009712:	d102      	bne.n	800971a <_strtod_l+0xa52>
 8009714:	2d00      	cmp	r5, #0
 8009716:	f43f ad8e 	beq.w	8009236 <_strtod_l+0x56e>
 800971a:	2200      	movs	r2, #0
 800971c:	4b34      	ldr	r3, [pc, #208]	; (80097f0 <_strtod_l+0xb28>)
 800971e:	e78f      	b.n	8009640 <_strtod_l+0x978>
 8009720:	2600      	movs	r6, #0
 8009722:	4f32      	ldr	r7, [pc, #200]	; (80097ec <_strtod_l+0xb24>)
 8009724:	e7ea      	b.n	80096fc <_strtod_l+0xa34>
 8009726:	4b31      	ldr	r3, [pc, #196]	; (80097ec <_strtod_l+0xb24>)
 8009728:	4630      	mov	r0, r6
 800972a:	4639      	mov	r1, r7
 800972c:	2200      	movs	r2, #0
 800972e:	f7f6 ff73 	bl	8000618 <__aeabi_dmul>
 8009732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009734:	4606      	mov	r6, r0
 8009736:	460f      	mov	r7, r1
 8009738:	b933      	cbnz	r3, 8009748 <_strtod_l+0xa80>
 800973a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800973e:	9010      	str	r0, [sp, #64]	; 0x40
 8009740:	9311      	str	r3, [sp, #68]	; 0x44
 8009742:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009746:	e7df      	b.n	8009708 <_strtod_l+0xa40>
 8009748:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800974c:	e7f9      	b.n	8009742 <_strtod_l+0xa7a>
 800974e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009752:	9b04      	ldr	r3, [sp, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1ab      	bne.n	80096b0 <_strtod_l+0x9e8>
 8009758:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800975c:	0d1b      	lsrs	r3, r3, #20
 800975e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009760:	051b      	lsls	r3, r3, #20
 8009762:	429a      	cmp	r2, r3
 8009764:	465d      	mov	r5, fp
 8009766:	d1a3      	bne.n	80096b0 <_strtod_l+0x9e8>
 8009768:	4639      	mov	r1, r7
 800976a:	4630      	mov	r0, r6
 800976c:	f7f7 fa04 	bl	8000b78 <__aeabi_d2iz>
 8009770:	f7f6 fee8 	bl	8000544 <__aeabi_i2d>
 8009774:	460b      	mov	r3, r1
 8009776:	4602      	mov	r2, r0
 8009778:	4639      	mov	r1, r7
 800977a:	4630      	mov	r0, r6
 800977c:	f7f6 fd94 	bl	80002a8 <__aeabi_dsub>
 8009780:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009782:	4606      	mov	r6, r0
 8009784:	460f      	mov	r7, r1
 8009786:	b933      	cbnz	r3, 8009796 <_strtod_l+0xace>
 8009788:	f1ba 0f00 	cmp.w	sl, #0
 800978c:	d103      	bne.n	8009796 <_strtod_l+0xace>
 800978e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009792:	2d00      	cmp	r5, #0
 8009794:	d06d      	beq.n	8009872 <_strtod_l+0xbaa>
 8009796:	a30a      	add	r3, pc, #40	; (adr r3, 80097c0 <_strtod_l+0xaf8>)
 8009798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979c:	4630      	mov	r0, r6
 800979e:	4639      	mov	r1, r7
 80097a0:	f7f7 f9ac 	bl	8000afc <__aeabi_dcmplt>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	f47f acb8 	bne.w	800911a <_strtod_l+0x452>
 80097aa:	a307      	add	r3, pc, #28	; (adr r3, 80097c8 <_strtod_l+0xb00>)
 80097ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b0:	4630      	mov	r0, r6
 80097b2:	4639      	mov	r1, r7
 80097b4:	f7f7 f9c0 	bl	8000b38 <__aeabi_dcmpgt>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	f43f af79 	beq.w	80096b0 <_strtod_l+0x9e8>
 80097be:	e4ac      	b.n	800911a <_strtod_l+0x452>
 80097c0:	94a03595 	.word	0x94a03595
 80097c4:	3fdfffff 	.word	0x3fdfffff
 80097c8:	35afe535 	.word	0x35afe535
 80097cc:	3fe00000 	.word	0x3fe00000
 80097d0:	000fffff 	.word	0x000fffff
 80097d4:	7ff00000 	.word	0x7ff00000
 80097d8:	7fefffff 	.word	0x7fefffff
 80097dc:	39500000 	.word	0x39500000
 80097e0:	3ff00000 	.word	0x3ff00000
 80097e4:	7fe00000 	.word	0x7fe00000
 80097e8:	7c9fffff 	.word	0x7c9fffff
 80097ec:	3fe00000 	.word	0x3fe00000
 80097f0:	bff00000 	.word	0xbff00000
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	b333      	cbz	r3, 8009846 <_strtod_l+0xb7e>
 80097f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80097fe:	d822      	bhi.n	8009846 <_strtod_l+0xb7e>
 8009800:	a327      	add	r3, pc, #156	; (adr r3, 80098a0 <_strtod_l+0xbd8>)
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	4630      	mov	r0, r6
 8009808:	4639      	mov	r1, r7
 800980a:	f7f7 f981 	bl	8000b10 <__aeabi_dcmple>
 800980e:	b1a0      	cbz	r0, 800983a <_strtod_l+0xb72>
 8009810:	4639      	mov	r1, r7
 8009812:	4630      	mov	r0, r6
 8009814:	f7f7 f9d8 	bl	8000bc8 <__aeabi_d2uiz>
 8009818:	2800      	cmp	r0, #0
 800981a:	bf08      	it	eq
 800981c:	2001      	moveq	r0, #1
 800981e:	f7f6 fe81 	bl	8000524 <__aeabi_ui2d>
 8009822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009824:	4606      	mov	r6, r0
 8009826:	460f      	mov	r7, r1
 8009828:	bb03      	cbnz	r3, 800986c <_strtod_l+0xba4>
 800982a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800982e:	9012      	str	r0, [sp, #72]	; 0x48
 8009830:	9313      	str	r3, [sp, #76]	; 0x4c
 8009832:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009836:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800983a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800983c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800983e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009842:	1a9b      	subs	r3, r3, r2
 8009844:	930b      	str	r3, [sp, #44]	; 0x2c
 8009846:	ed9d 0b08 	vldr	d0, [sp, #32]
 800984a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800984e:	f001 fd2d 	bl	800b2ac <__ulp>
 8009852:	4650      	mov	r0, sl
 8009854:	ec53 2b10 	vmov	r2, r3, d0
 8009858:	4659      	mov	r1, fp
 800985a:	f7f6 fedd 	bl	8000618 <__aeabi_dmul>
 800985e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009862:	f7f6 fd23 	bl	80002ac <__adddf3>
 8009866:	4682      	mov	sl, r0
 8009868:	468b      	mov	fp, r1
 800986a:	e772      	b.n	8009752 <_strtod_l+0xa8a>
 800986c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009870:	e7df      	b.n	8009832 <_strtod_l+0xb6a>
 8009872:	a30d      	add	r3, pc, #52	; (adr r3, 80098a8 <_strtod_l+0xbe0>)
 8009874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009878:	f7f7 f940 	bl	8000afc <__aeabi_dcmplt>
 800987c:	e79c      	b.n	80097b8 <_strtod_l+0xaf0>
 800987e:	2300      	movs	r3, #0
 8009880:	930d      	str	r3, [sp, #52]	; 0x34
 8009882:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009884:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009886:	6013      	str	r3, [r2, #0]
 8009888:	f7ff ba61 	b.w	8008d4e <_strtod_l+0x86>
 800988c:	2b65      	cmp	r3, #101	; 0x65
 800988e:	f04f 0200 	mov.w	r2, #0
 8009892:	f43f ab4e 	beq.w	8008f32 <_strtod_l+0x26a>
 8009896:	2101      	movs	r1, #1
 8009898:	4614      	mov	r4, r2
 800989a:	9104      	str	r1, [sp, #16]
 800989c:	f7ff bacb 	b.w	8008e36 <_strtod_l+0x16e>
 80098a0:	ffc00000 	.word	0xffc00000
 80098a4:	41dfffff 	.word	0x41dfffff
 80098a8:	94a03595 	.word	0x94a03595
 80098ac:	3fcfffff 	.word	0x3fcfffff

080098b0 <_strtod_r>:
 80098b0:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <_strtod_r+0x18>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	b410      	push	{r4}
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	4c04      	ldr	r4, [pc, #16]	; (80098cc <_strtod_r+0x1c>)
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	bf08      	it	eq
 80098be:	4623      	moveq	r3, r4
 80098c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098c4:	f7ff ba00 	b.w	8008cc8 <_strtod_l>
 80098c8:	20001254 	.word	0x20001254
 80098cc:	200012b8 	.word	0x200012b8

080098d0 <_strtol_l.isra.0>:
 80098d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	4680      	mov	r8, r0
 80098d6:	4689      	mov	r9, r1
 80098d8:	4692      	mov	sl, r2
 80098da:	461e      	mov	r6, r3
 80098dc:	460f      	mov	r7, r1
 80098de:	463d      	mov	r5, r7
 80098e0:	9808      	ldr	r0, [sp, #32]
 80098e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098e6:	f001 f9ed 	bl	800acc4 <__locale_ctype_ptr_l>
 80098ea:	4420      	add	r0, r4
 80098ec:	7843      	ldrb	r3, [r0, #1]
 80098ee:	f013 0308 	ands.w	r3, r3, #8
 80098f2:	d132      	bne.n	800995a <_strtol_l.isra.0+0x8a>
 80098f4:	2c2d      	cmp	r4, #45	; 0x2d
 80098f6:	d132      	bne.n	800995e <_strtol_l.isra.0+0x8e>
 80098f8:	787c      	ldrb	r4, [r7, #1]
 80098fa:	1cbd      	adds	r5, r7, #2
 80098fc:	2201      	movs	r2, #1
 80098fe:	2e00      	cmp	r6, #0
 8009900:	d05d      	beq.n	80099be <_strtol_l.isra.0+0xee>
 8009902:	2e10      	cmp	r6, #16
 8009904:	d109      	bne.n	800991a <_strtol_l.isra.0+0x4a>
 8009906:	2c30      	cmp	r4, #48	; 0x30
 8009908:	d107      	bne.n	800991a <_strtol_l.isra.0+0x4a>
 800990a:	782b      	ldrb	r3, [r5, #0]
 800990c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009910:	2b58      	cmp	r3, #88	; 0x58
 8009912:	d14f      	bne.n	80099b4 <_strtol_l.isra.0+0xe4>
 8009914:	786c      	ldrb	r4, [r5, #1]
 8009916:	2610      	movs	r6, #16
 8009918:	3502      	adds	r5, #2
 800991a:	2a00      	cmp	r2, #0
 800991c:	bf14      	ite	ne
 800991e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009922:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009926:	2700      	movs	r7, #0
 8009928:	fbb1 fcf6 	udiv	ip, r1, r6
 800992c:	4638      	mov	r0, r7
 800992e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009932:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009936:	2b09      	cmp	r3, #9
 8009938:	d817      	bhi.n	800996a <_strtol_l.isra.0+0x9a>
 800993a:	461c      	mov	r4, r3
 800993c:	42a6      	cmp	r6, r4
 800993e:	dd23      	ble.n	8009988 <_strtol_l.isra.0+0xb8>
 8009940:	1c7b      	adds	r3, r7, #1
 8009942:	d007      	beq.n	8009954 <_strtol_l.isra.0+0x84>
 8009944:	4584      	cmp	ip, r0
 8009946:	d31c      	bcc.n	8009982 <_strtol_l.isra.0+0xb2>
 8009948:	d101      	bne.n	800994e <_strtol_l.isra.0+0x7e>
 800994a:	45a6      	cmp	lr, r4
 800994c:	db19      	blt.n	8009982 <_strtol_l.isra.0+0xb2>
 800994e:	fb00 4006 	mla	r0, r0, r6, r4
 8009952:	2701      	movs	r7, #1
 8009954:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009958:	e7eb      	b.n	8009932 <_strtol_l.isra.0+0x62>
 800995a:	462f      	mov	r7, r5
 800995c:	e7bf      	b.n	80098de <_strtol_l.isra.0+0xe>
 800995e:	2c2b      	cmp	r4, #43	; 0x2b
 8009960:	bf04      	itt	eq
 8009962:	1cbd      	addeq	r5, r7, #2
 8009964:	787c      	ldrbeq	r4, [r7, #1]
 8009966:	461a      	mov	r2, r3
 8009968:	e7c9      	b.n	80098fe <_strtol_l.isra.0+0x2e>
 800996a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800996e:	2b19      	cmp	r3, #25
 8009970:	d801      	bhi.n	8009976 <_strtol_l.isra.0+0xa6>
 8009972:	3c37      	subs	r4, #55	; 0x37
 8009974:	e7e2      	b.n	800993c <_strtol_l.isra.0+0x6c>
 8009976:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800997a:	2b19      	cmp	r3, #25
 800997c:	d804      	bhi.n	8009988 <_strtol_l.isra.0+0xb8>
 800997e:	3c57      	subs	r4, #87	; 0x57
 8009980:	e7dc      	b.n	800993c <_strtol_l.isra.0+0x6c>
 8009982:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009986:	e7e5      	b.n	8009954 <_strtol_l.isra.0+0x84>
 8009988:	1c7b      	adds	r3, r7, #1
 800998a:	d108      	bne.n	800999e <_strtol_l.isra.0+0xce>
 800998c:	2322      	movs	r3, #34	; 0x22
 800998e:	f8c8 3000 	str.w	r3, [r8]
 8009992:	4608      	mov	r0, r1
 8009994:	f1ba 0f00 	cmp.w	sl, #0
 8009998:	d107      	bne.n	80099aa <_strtol_l.isra.0+0xda>
 800999a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800999e:	b102      	cbz	r2, 80099a2 <_strtol_l.isra.0+0xd2>
 80099a0:	4240      	negs	r0, r0
 80099a2:	f1ba 0f00 	cmp.w	sl, #0
 80099a6:	d0f8      	beq.n	800999a <_strtol_l.isra.0+0xca>
 80099a8:	b10f      	cbz	r7, 80099ae <_strtol_l.isra.0+0xde>
 80099aa:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80099ae:	f8ca 9000 	str.w	r9, [sl]
 80099b2:	e7f2      	b.n	800999a <_strtol_l.isra.0+0xca>
 80099b4:	2430      	movs	r4, #48	; 0x30
 80099b6:	2e00      	cmp	r6, #0
 80099b8:	d1af      	bne.n	800991a <_strtol_l.isra.0+0x4a>
 80099ba:	2608      	movs	r6, #8
 80099bc:	e7ad      	b.n	800991a <_strtol_l.isra.0+0x4a>
 80099be:	2c30      	cmp	r4, #48	; 0x30
 80099c0:	d0a3      	beq.n	800990a <_strtol_l.isra.0+0x3a>
 80099c2:	260a      	movs	r6, #10
 80099c4:	e7a9      	b.n	800991a <_strtol_l.isra.0+0x4a>
	...

080099c8 <_strtol_r>:
 80099c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ca:	4c06      	ldr	r4, [pc, #24]	; (80099e4 <_strtol_r+0x1c>)
 80099cc:	4d06      	ldr	r5, [pc, #24]	; (80099e8 <_strtol_r+0x20>)
 80099ce:	6824      	ldr	r4, [r4, #0]
 80099d0:	6a24      	ldr	r4, [r4, #32]
 80099d2:	2c00      	cmp	r4, #0
 80099d4:	bf08      	it	eq
 80099d6:	462c      	moveq	r4, r5
 80099d8:	9400      	str	r4, [sp, #0]
 80099da:	f7ff ff79 	bl	80098d0 <_strtol_l.isra.0>
 80099de:	b003      	add	sp, #12
 80099e0:	bd30      	pop	{r4, r5, pc}
 80099e2:	bf00      	nop
 80099e4:	20001254 	.word	0x20001254
 80099e8:	200012b8 	.word	0x200012b8

080099ec <quorem>:
 80099ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f0:	6903      	ldr	r3, [r0, #16]
 80099f2:	690c      	ldr	r4, [r1, #16]
 80099f4:	42a3      	cmp	r3, r4
 80099f6:	4680      	mov	r8, r0
 80099f8:	f2c0 8082 	blt.w	8009b00 <quorem+0x114>
 80099fc:	3c01      	subs	r4, #1
 80099fe:	f101 0714 	add.w	r7, r1, #20
 8009a02:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009a06:	f100 0614 	add.w	r6, r0, #20
 8009a0a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009a0e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009a12:	eb06 030c 	add.w	r3, r6, ip
 8009a16:	3501      	adds	r5, #1
 8009a18:	eb07 090c 	add.w	r9, r7, ip
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009a22:	b395      	cbz	r5, 8009a8a <quorem+0x9e>
 8009a24:	f04f 0a00 	mov.w	sl, #0
 8009a28:	4638      	mov	r0, r7
 8009a2a:	46b6      	mov	lr, r6
 8009a2c:	46d3      	mov	fp, sl
 8009a2e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009a32:	b293      	uxth	r3, r2
 8009a34:	fb05 a303 	mla	r3, r5, r3, sl
 8009a38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	ebab 0303 	sub.w	r3, fp, r3
 8009a42:	0c12      	lsrs	r2, r2, #16
 8009a44:	f8de b000 	ldr.w	fp, [lr]
 8009a48:	fb05 a202 	mla	r2, r5, r2, sl
 8009a4c:	fa13 f38b 	uxtah	r3, r3, fp
 8009a50:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009a54:	fa1f fb82 	uxth.w	fp, r2
 8009a58:	f8de 2000 	ldr.w	r2, [lr]
 8009a5c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009a60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a6a:	4581      	cmp	r9, r0
 8009a6c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009a70:	f84e 3b04 	str.w	r3, [lr], #4
 8009a74:	d2db      	bcs.n	8009a2e <quorem+0x42>
 8009a76:	f856 300c 	ldr.w	r3, [r6, ip]
 8009a7a:	b933      	cbnz	r3, 8009a8a <quorem+0x9e>
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	3b04      	subs	r3, #4
 8009a80:	429e      	cmp	r6, r3
 8009a82:	461a      	mov	r2, r3
 8009a84:	d330      	bcc.n	8009ae8 <quorem+0xfc>
 8009a86:	f8c8 4010 	str.w	r4, [r8, #16]
 8009a8a:	4640      	mov	r0, r8
 8009a8c:	f001 fb96 	bl	800b1bc <__mcmp>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	db25      	blt.n	8009ae0 <quorem+0xf4>
 8009a94:	3501      	adds	r5, #1
 8009a96:	4630      	mov	r0, r6
 8009a98:	f04f 0c00 	mov.w	ip, #0
 8009a9c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009aa0:	f8d0 e000 	ldr.w	lr, [r0]
 8009aa4:	b293      	uxth	r3, r2
 8009aa6:	ebac 0303 	sub.w	r3, ip, r3
 8009aaa:	0c12      	lsrs	r2, r2, #16
 8009aac:	fa13 f38e 	uxtah	r3, r3, lr
 8009ab0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ab4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009abe:	45b9      	cmp	r9, r7
 8009ac0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ac4:	f840 3b04 	str.w	r3, [r0], #4
 8009ac8:	d2e8      	bcs.n	8009a9c <quorem+0xb0>
 8009aca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009ace:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009ad2:	b92a      	cbnz	r2, 8009ae0 <quorem+0xf4>
 8009ad4:	3b04      	subs	r3, #4
 8009ad6:	429e      	cmp	r6, r3
 8009ad8:	461a      	mov	r2, r3
 8009ada:	d30b      	bcc.n	8009af4 <quorem+0x108>
 8009adc:	f8c8 4010 	str.w	r4, [r8, #16]
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	b003      	add	sp, #12
 8009ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae8:	6812      	ldr	r2, [r2, #0]
 8009aea:	3b04      	subs	r3, #4
 8009aec:	2a00      	cmp	r2, #0
 8009aee:	d1ca      	bne.n	8009a86 <quorem+0x9a>
 8009af0:	3c01      	subs	r4, #1
 8009af2:	e7c5      	b.n	8009a80 <quorem+0x94>
 8009af4:	6812      	ldr	r2, [r2, #0]
 8009af6:	3b04      	subs	r3, #4
 8009af8:	2a00      	cmp	r2, #0
 8009afa:	d1ef      	bne.n	8009adc <quorem+0xf0>
 8009afc:	3c01      	subs	r4, #1
 8009afe:	e7ea      	b.n	8009ad6 <quorem+0xea>
 8009b00:	2000      	movs	r0, #0
 8009b02:	e7ee      	b.n	8009ae2 <quorem+0xf6>
 8009b04:	0000      	movs	r0, r0
	...

08009b08 <_dtoa_r>:
 8009b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	ec57 6b10 	vmov	r6, r7, d0
 8009b10:	b097      	sub	sp, #92	; 0x5c
 8009b12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b14:	9106      	str	r1, [sp, #24]
 8009b16:	4604      	mov	r4, r0
 8009b18:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b1a:	9312      	str	r3, [sp, #72]	; 0x48
 8009b1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b20:	e9cd 6700 	strd	r6, r7, [sp]
 8009b24:	b93d      	cbnz	r5, 8009b36 <_dtoa_r+0x2e>
 8009b26:	2010      	movs	r0, #16
 8009b28:	f7fe f946 	bl	8007db8 <malloc>
 8009b2c:	6260      	str	r0, [r4, #36]	; 0x24
 8009b2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009b32:	6005      	str	r5, [r0, #0]
 8009b34:	60c5      	str	r5, [r0, #12]
 8009b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b38:	6819      	ldr	r1, [r3, #0]
 8009b3a:	b151      	cbz	r1, 8009b52 <_dtoa_r+0x4a>
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	604a      	str	r2, [r1, #4]
 8009b40:	2301      	movs	r3, #1
 8009b42:	4093      	lsls	r3, r2
 8009b44:	608b      	str	r3, [r1, #8]
 8009b46:	4620      	mov	r0, r4
 8009b48:	f001 f918 	bl	800ad7c <_Bfree>
 8009b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b4e:	2200      	movs	r2, #0
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	1e3b      	subs	r3, r7, #0
 8009b54:	bfbb      	ittet	lt
 8009b56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009b5a:	9301      	strlt	r3, [sp, #4]
 8009b5c:	2300      	movge	r3, #0
 8009b5e:	2201      	movlt	r2, #1
 8009b60:	bfac      	ite	ge
 8009b62:	f8c8 3000 	strge.w	r3, [r8]
 8009b66:	f8c8 2000 	strlt.w	r2, [r8]
 8009b6a:	4baf      	ldr	r3, [pc, #700]	; (8009e28 <_dtoa_r+0x320>)
 8009b6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b70:	ea33 0308 	bics.w	r3, r3, r8
 8009b74:	d114      	bne.n	8009ba0 <_dtoa_r+0x98>
 8009b76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b78:	f242 730f 	movw	r3, #9999	; 0x270f
 8009b7c:	6013      	str	r3, [r2, #0]
 8009b7e:	9b00      	ldr	r3, [sp, #0]
 8009b80:	b923      	cbnz	r3, 8009b8c <_dtoa_r+0x84>
 8009b82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009b86:	2800      	cmp	r0, #0
 8009b88:	f000 8542 	beq.w	800a610 <_dtoa_r+0xb08>
 8009b8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8009e3c <_dtoa_r+0x334>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 8544 	beq.w	800a620 <_dtoa_r+0xb18>
 8009b98:	f10b 0303 	add.w	r3, fp, #3
 8009b9c:	f000 bd3e 	b.w	800a61c <_dtoa_r+0xb14>
 8009ba0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	4630      	mov	r0, r6
 8009baa:	4639      	mov	r1, r7
 8009bac:	f7f6 ff9c 	bl	8000ae8 <__aeabi_dcmpeq>
 8009bb0:	4681      	mov	r9, r0
 8009bb2:	b168      	cbz	r0, 8009bd0 <_dtoa_r+0xc8>
 8009bb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	6013      	str	r3, [r2, #0]
 8009bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	f000 8524 	beq.w	800a60a <_dtoa_r+0xb02>
 8009bc2:	4b9a      	ldr	r3, [pc, #616]	; (8009e2c <_dtoa_r+0x324>)
 8009bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009bc6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	f000 bd28 	b.w	800a620 <_dtoa_r+0xb18>
 8009bd0:	aa14      	add	r2, sp, #80	; 0x50
 8009bd2:	a915      	add	r1, sp, #84	; 0x54
 8009bd4:	ec47 6b10 	vmov	d0, r6, r7
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f001 fbdd 	bl	800b398 <__d2b>
 8009bde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009be2:	9004      	str	r0, [sp, #16]
 8009be4:	2d00      	cmp	r5, #0
 8009be6:	d07c      	beq.n	8009ce2 <_dtoa_r+0x1da>
 8009be8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009bec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009bf0:	46b2      	mov	sl, r6
 8009bf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009bf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009bfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009bfe:	2200      	movs	r2, #0
 8009c00:	4b8b      	ldr	r3, [pc, #556]	; (8009e30 <_dtoa_r+0x328>)
 8009c02:	4650      	mov	r0, sl
 8009c04:	4659      	mov	r1, fp
 8009c06:	f7f6 fb4f 	bl	80002a8 <__aeabi_dsub>
 8009c0a:	a381      	add	r3, pc, #516	; (adr r3, 8009e10 <_dtoa_r+0x308>)
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	f7f6 fd02 	bl	8000618 <__aeabi_dmul>
 8009c14:	a380      	add	r3, pc, #512	; (adr r3, 8009e18 <_dtoa_r+0x310>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	f7f6 fb47 	bl	80002ac <__adddf3>
 8009c1e:	4606      	mov	r6, r0
 8009c20:	4628      	mov	r0, r5
 8009c22:	460f      	mov	r7, r1
 8009c24:	f7f6 fc8e 	bl	8000544 <__aeabi_i2d>
 8009c28:	a37d      	add	r3, pc, #500	; (adr r3, 8009e20 <_dtoa_r+0x318>)
 8009c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c2e:	f7f6 fcf3 	bl	8000618 <__aeabi_dmul>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4630      	mov	r0, r6
 8009c38:	4639      	mov	r1, r7
 8009c3a:	f7f6 fb37 	bl	80002ac <__adddf3>
 8009c3e:	4606      	mov	r6, r0
 8009c40:	460f      	mov	r7, r1
 8009c42:	f7f6 ff99 	bl	8000b78 <__aeabi_d2iz>
 8009c46:	2200      	movs	r2, #0
 8009c48:	4682      	mov	sl, r0
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	4630      	mov	r0, r6
 8009c4e:	4639      	mov	r1, r7
 8009c50:	f7f6 ff54 	bl	8000afc <__aeabi_dcmplt>
 8009c54:	b148      	cbz	r0, 8009c6a <_dtoa_r+0x162>
 8009c56:	4650      	mov	r0, sl
 8009c58:	f7f6 fc74 	bl	8000544 <__aeabi_i2d>
 8009c5c:	4632      	mov	r2, r6
 8009c5e:	463b      	mov	r3, r7
 8009c60:	f7f6 ff42 	bl	8000ae8 <__aeabi_dcmpeq>
 8009c64:	b908      	cbnz	r0, 8009c6a <_dtoa_r+0x162>
 8009c66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009c6a:	f1ba 0f16 	cmp.w	sl, #22
 8009c6e:	d859      	bhi.n	8009d24 <_dtoa_r+0x21c>
 8009c70:	4970      	ldr	r1, [pc, #448]	; (8009e34 <_dtoa_r+0x32c>)
 8009c72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c7e:	f7f6 ff5b 	bl	8000b38 <__aeabi_dcmpgt>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	d050      	beq.n	8009d28 <_dtoa_r+0x220>
 8009c86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c90:	1b5d      	subs	r5, r3, r5
 8009c92:	f1b5 0801 	subs.w	r8, r5, #1
 8009c96:	bf49      	itett	mi
 8009c98:	f1c5 0301 	rsbmi	r3, r5, #1
 8009c9c:	2300      	movpl	r3, #0
 8009c9e:	9305      	strmi	r3, [sp, #20]
 8009ca0:	f04f 0800 	movmi.w	r8, #0
 8009ca4:	bf58      	it	pl
 8009ca6:	9305      	strpl	r3, [sp, #20]
 8009ca8:	f1ba 0f00 	cmp.w	sl, #0
 8009cac:	db3e      	blt.n	8009d2c <_dtoa_r+0x224>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	44d0      	add	r8, sl
 8009cb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009cb6:	9307      	str	r3, [sp, #28]
 8009cb8:	9b06      	ldr	r3, [sp, #24]
 8009cba:	2b09      	cmp	r3, #9
 8009cbc:	f200 8090 	bhi.w	8009de0 <_dtoa_r+0x2d8>
 8009cc0:	2b05      	cmp	r3, #5
 8009cc2:	bfc4      	itt	gt
 8009cc4:	3b04      	subgt	r3, #4
 8009cc6:	9306      	strgt	r3, [sp, #24]
 8009cc8:	9b06      	ldr	r3, [sp, #24]
 8009cca:	f1a3 0302 	sub.w	r3, r3, #2
 8009cce:	bfcc      	ite	gt
 8009cd0:	2500      	movgt	r5, #0
 8009cd2:	2501      	movle	r5, #1
 8009cd4:	2b03      	cmp	r3, #3
 8009cd6:	f200 808f 	bhi.w	8009df8 <_dtoa_r+0x2f0>
 8009cda:	e8df f003 	tbb	[pc, r3]
 8009cde:	7f7d      	.short	0x7f7d
 8009ce0:	7131      	.short	0x7131
 8009ce2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009ce6:	441d      	add	r5, r3
 8009ce8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8009cec:	2820      	cmp	r0, #32
 8009cee:	dd13      	ble.n	8009d18 <_dtoa_r+0x210>
 8009cf0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009cf4:	9b00      	ldr	r3, [sp, #0]
 8009cf6:	fa08 f800 	lsl.w	r8, r8, r0
 8009cfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009cfe:	fa23 f000 	lsr.w	r0, r3, r0
 8009d02:	ea48 0000 	orr.w	r0, r8, r0
 8009d06:	f7f6 fc0d 	bl	8000524 <__aeabi_ui2d>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	4682      	mov	sl, r0
 8009d0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009d12:	3d01      	subs	r5, #1
 8009d14:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d16:	e772      	b.n	8009bfe <_dtoa_r+0xf6>
 8009d18:	9b00      	ldr	r3, [sp, #0]
 8009d1a:	f1c0 0020 	rsb	r0, r0, #32
 8009d1e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d22:	e7f0      	b.n	8009d06 <_dtoa_r+0x1fe>
 8009d24:	2301      	movs	r3, #1
 8009d26:	e7b1      	b.n	8009c8c <_dtoa_r+0x184>
 8009d28:	900f      	str	r0, [sp, #60]	; 0x3c
 8009d2a:	e7b0      	b.n	8009c8e <_dtoa_r+0x186>
 8009d2c:	9b05      	ldr	r3, [sp, #20]
 8009d2e:	eba3 030a 	sub.w	r3, r3, sl
 8009d32:	9305      	str	r3, [sp, #20]
 8009d34:	f1ca 0300 	rsb	r3, sl, #0
 8009d38:	9307      	str	r3, [sp, #28]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d3e:	e7bb      	b.n	8009cb8 <_dtoa_r+0x1b0>
 8009d40:	2301      	movs	r3, #1
 8009d42:	930a      	str	r3, [sp, #40]	; 0x28
 8009d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	dd59      	ble.n	8009dfe <_dtoa_r+0x2f6>
 8009d4a:	9302      	str	r3, [sp, #8]
 8009d4c:	4699      	mov	r9, r3
 8009d4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009d50:	2200      	movs	r2, #0
 8009d52:	6072      	str	r2, [r6, #4]
 8009d54:	2204      	movs	r2, #4
 8009d56:	f102 0014 	add.w	r0, r2, #20
 8009d5a:	4298      	cmp	r0, r3
 8009d5c:	6871      	ldr	r1, [r6, #4]
 8009d5e:	d953      	bls.n	8009e08 <_dtoa_r+0x300>
 8009d60:	4620      	mov	r0, r4
 8009d62:	f000 ffd7 	bl	800ad14 <_Balloc>
 8009d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d68:	6030      	str	r0, [r6, #0]
 8009d6a:	f1b9 0f0e 	cmp.w	r9, #14
 8009d6e:	f8d3 b000 	ldr.w	fp, [r3]
 8009d72:	f200 80e6 	bhi.w	8009f42 <_dtoa_r+0x43a>
 8009d76:	2d00      	cmp	r5, #0
 8009d78:	f000 80e3 	beq.w	8009f42 <_dtoa_r+0x43a>
 8009d7c:	ed9d 7b00 	vldr	d7, [sp]
 8009d80:	f1ba 0f00 	cmp.w	sl, #0
 8009d84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009d88:	dd74      	ble.n	8009e74 <_dtoa_r+0x36c>
 8009d8a:	4a2a      	ldr	r2, [pc, #168]	; (8009e34 <_dtoa_r+0x32c>)
 8009d8c:	f00a 030f 	and.w	r3, sl, #15
 8009d90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d94:	ed93 7b00 	vldr	d7, [r3]
 8009d98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009d9c:	06f0      	lsls	r0, r6, #27
 8009d9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8009da2:	d565      	bpl.n	8009e70 <_dtoa_r+0x368>
 8009da4:	4b24      	ldr	r3, [pc, #144]	; (8009e38 <_dtoa_r+0x330>)
 8009da6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009daa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009dae:	f7f6 fd5d 	bl	800086c <__aeabi_ddiv>
 8009db2:	e9cd 0100 	strd	r0, r1, [sp]
 8009db6:	f006 060f 	and.w	r6, r6, #15
 8009dba:	2503      	movs	r5, #3
 8009dbc:	4f1e      	ldr	r7, [pc, #120]	; (8009e38 <_dtoa_r+0x330>)
 8009dbe:	e04c      	b.n	8009e5a <_dtoa_r+0x352>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8009dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dc6:	4453      	add	r3, sl
 8009dc8:	f103 0901 	add.w	r9, r3, #1
 8009dcc:	9302      	str	r3, [sp, #8]
 8009dce:	464b      	mov	r3, r9
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	bfb8      	it	lt
 8009dd4:	2301      	movlt	r3, #1
 8009dd6:	e7ba      	b.n	8009d4e <_dtoa_r+0x246>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	e7b2      	b.n	8009d42 <_dtoa_r+0x23a>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	e7f0      	b.n	8009dc2 <_dtoa_r+0x2ba>
 8009de0:	2501      	movs	r5, #1
 8009de2:	2300      	movs	r3, #0
 8009de4:	9306      	str	r3, [sp, #24]
 8009de6:	950a      	str	r5, [sp, #40]	; 0x28
 8009de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dec:	9302      	str	r3, [sp, #8]
 8009dee:	4699      	mov	r9, r3
 8009df0:	2200      	movs	r2, #0
 8009df2:	2312      	movs	r3, #18
 8009df4:	920b      	str	r2, [sp, #44]	; 0x2c
 8009df6:	e7aa      	b.n	8009d4e <_dtoa_r+0x246>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8009dfc:	e7f4      	b.n	8009de8 <_dtoa_r+0x2e0>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	9302      	str	r3, [sp, #8]
 8009e02:	4699      	mov	r9, r3
 8009e04:	461a      	mov	r2, r3
 8009e06:	e7f5      	b.n	8009df4 <_dtoa_r+0x2ec>
 8009e08:	3101      	adds	r1, #1
 8009e0a:	6071      	str	r1, [r6, #4]
 8009e0c:	0052      	lsls	r2, r2, #1
 8009e0e:	e7a2      	b.n	8009d56 <_dtoa_r+0x24e>
 8009e10:	636f4361 	.word	0x636f4361
 8009e14:	3fd287a7 	.word	0x3fd287a7
 8009e18:	8b60c8b3 	.word	0x8b60c8b3
 8009e1c:	3fc68a28 	.word	0x3fc68a28
 8009e20:	509f79fb 	.word	0x509f79fb
 8009e24:	3fd34413 	.word	0x3fd34413
 8009e28:	7ff00000 	.word	0x7ff00000
 8009e2c:	0800e5ad 	.word	0x0800e5ad
 8009e30:	3ff80000 	.word	0x3ff80000
 8009e34:	0800e668 	.word	0x0800e668
 8009e38:	0800e640 	.word	0x0800e640
 8009e3c:	0800e631 	.word	0x0800e631
 8009e40:	07f1      	lsls	r1, r6, #31
 8009e42:	d508      	bpl.n	8009e56 <_dtoa_r+0x34e>
 8009e44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e4c:	f7f6 fbe4 	bl	8000618 <__aeabi_dmul>
 8009e50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e54:	3501      	adds	r5, #1
 8009e56:	1076      	asrs	r6, r6, #1
 8009e58:	3708      	adds	r7, #8
 8009e5a:	2e00      	cmp	r6, #0
 8009e5c:	d1f0      	bne.n	8009e40 <_dtoa_r+0x338>
 8009e5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e66:	f7f6 fd01 	bl	800086c <__aeabi_ddiv>
 8009e6a:	e9cd 0100 	strd	r0, r1, [sp]
 8009e6e:	e01a      	b.n	8009ea6 <_dtoa_r+0x39e>
 8009e70:	2502      	movs	r5, #2
 8009e72:	e7a3      	b.n	8009dbc <_dtoa_r+0x2b4>
 8009e74:	f000 80a0 	beq.w	8009fb8 <_dtoa_r+0x4b0>
 8009e78:	f1ca 0600 	rsb	r6, sl, #0
 8009e7c:	4b9f      	ldr	r3, [pc, #636]	; (800a0fc <_dtoa_r+0x5f4>)
 8009e7e:	4fa0      	ldr	r7, [pc, #640]	; (800a100 <_dtoa_r+0x5f8>)
 8009e80:	f006 020f 	and.w	r2, r6, #15
 8009e84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e90:	f7f6 fbc2 	bl	8000618 <__aeabi_dmul>
 8009e94:	e9cd 0100 	strd	r0, r1, [sp]
 8009e98:	1136      	asrs	r6, r6, #4
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	2502      	movs	r5, #2
 8009e9e:	2e00      	cmp	r6, #0
 8009ea0:	d17f      	bne.n	8009fa2 <_dtoa_r+0x49a>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1e1      	bne.n	8009e6a <_dtoa_r+0x362>
 8009ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 8087 	beq.w	8009fbc <_dtoa_r+0x4b4>
 8009eae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	4b93      	ldr	r3, [pc, #588]	; (800a104 <_dtoa_r+0x5fc>)
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7f6 fe1f 	bl	8000afc <__aeabi_dcmplt>
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d07c      	beq.n	8009fbc <_dtoa_r+0x4b4>
 8009ec2:	f1b9 0f00 	cmp.w	r9, #0
 8009ec6:	d079      	beq.n	8009fbc <_dtoa_r+0x4b4>
 8009ec8:	9b02      	ldr	r3, [sp, #8]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	dd35      	ble.n	8009f3a <_dtoa_r+0x432>
 8009ece:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009ed2:	9308      	str	r3, [sp, #32]
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	4b8b      	ldr	r3, [pc, #556]	; (800a108 <_dtoa_r+0x600>)
 8009eda:	4630      	mov	r0, r6
 8009edc:	f7f6 fb9c 	bl	8000618 <__aeabi_dmul>
 8009ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8009ee4:	9f02      	ldr	r7, [sp, #8]
 8009ee6:	3501      	adds	r5, #1
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f7f6 fb2b 	bl	8000544 <__aeabi_i2d>
 8009eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ef2:	f7f6 fb91 	bl	8000618 <__aeabi_dmul>
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	4b84      	ldr	r3, [pc, #528]	; (800a10c <_dtoa_r+0x604>)
 8009efa:	f7f6 f9d7 	bl	80002ac <__adddf3>
 8009efe:	4605      	mov	r5, r0
 8009f00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009f04:	2f00      	cmp	r7, #0
 8009f06:	d15d      	bne.n	8009fc4 <_dtoa_r+0x4bc>
 8009f08:	2200      	movs	r2, #0
 8009f0a:	4b81      	ldr	r3, [pc, #516]	; (800a110 <_dtoa_r+0x608>)
 8009f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f10:	f7f6 f9ca 	bl	80002a8 <__aeabi_dsub>
 8009f14:	462a      	mov	r2, r5
 8009f16:	4633      	mov	r3, r6
 8009f18:	e9cd 0100 	strd	r0, r1, [sp]
 8009f1c:	f7f6 fe0c 	bl	8000b38 <__aeabi_dcmpgt>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	f040 8288 	bne.w	800a436 <_dtoa_r+0x92e>
 8009f26:	462a      	mov	r2, r5
 8009f28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f30:	f7f6 fde4 	bl	8000afc <__aeabi_dcmplt>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	f040 827c 	bne.w	800a432 <_dtoa_r+0x92a>
 8009f3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f3e:	e9cd 2300 	strd	r2, r3, [sp]
 8009f42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f2c0 8150 	blt.w	800a1ea <_dtoa_r+0x6e2>
 8009f4a:	f1ba 0f0e 	cmp.w	sl, #14
 8009f4e:	f300 814c 	bgt.w	800a1ea <_dtoa_r+0x6e2>
 8009f52:	4b6a      	ldr	r3, [pc, #424]	; (800a0fc <_dtoa_r+0x5f4>)
 8009f54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009f58:	ed93 7b00 	vldr	d7, [r3]
 8009f5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009f64:	f280 80d8 	bge.w	800a118 <_dtoa_r+0x610>
 8009f68:	f1b9 0f00 	cmp.w	r9, #0
 8009f6c:	f300 80d4 	bgt.w	800a118 <_dtoa_r+0x610>
 8009f70:	f040 825e 	bne.w	800a430 <_dtoa_r+0x928>
 8009f74:	2200      	movs	r2, #0
 8009f76:	4b66      	ldr	r3, [pc, #408]	; (800a110 <_dtoa_r+0x608>)
 8009f78:	ec51 0b17 	vmov	r0, r1, d7
 8009f7c:	f7f6 fb4c 	bl	8000618 <__aeabi_dmul>
 8009f80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f84:	f7f6 fdce 	bl	8000b24 <__aeabi_dcmpge>
 8009f88:	464f      	mov	r7, r9
 8009f8a:	464e      	mov	r6, r9
 8009f8c:	2800      	cmp	r0, #0
 8009f8e:	f040 8234 	bne.w	800a3fa <_dtoa_r+0x8f2>
 8009f92:	2331      	movs	r3, #49	; 0x31
 8009f94:	f10b 0501 	add.w	r5, fp, #1
 8009f98:	f88b 3000 	strb.w	r3, [fp]
 8009f9c:	f10a 0a01 	add.w	sl, sl, #1
 8009fa0:	e22f      	b.n	800a402 <_dtoa_r+0x8fa>
 8009fa2:	07f2      	lsls	r2, r6, #31
 8009fa4:	d505      	bpl.n	8009fb2 <_dtoa_r+0x4aa>
 8009fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009faa:	f7f6 fb35 	bl	8000618 <__aeabi_dmul>
 8009fae:	3501      	adds	r5, #1
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	1076      	asrs	r6, r6, #1
 8009fb4:	3708      	adds	r7, #8
 8009fb6:	e772      	b.n	8009e9e <_dtoa_r+0x396>
 8009fb8:	2502      	movs	r5, #2
 8009fba:	e774      	b.n	8009ea6 <_dtoa_r+0x39e>
 8009fbc:	f8cd a020 	str.w	sl, [sp, #32]
 8009fc0:	464f      	mov	r7, r9
 8009fc2:	e791      	b.n	8009ee8 <_dtoa_r+0x3e0>
 8009fc4:	4b4d      	ldr	r3, [pc, #308]	; (800a0fc <_dtoa_r+0x5f4>)
 8009fc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d047      	beq.n	800a064 <_dtoa_r+0x55c>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	2000      	movs	r0, #0
 8009fda:	494e      	ldr	r1, [pc, #312]	; (800a114 <_dtoa_r+0x60c>)
 8009fdc:	f7f6 fc46 	bl	800086c <__aeabi_ddiv>
 8009fe0:	462a      	mov	r2, r5
 8009fe2:	4633      	mov	r3, r6
 8009fe4:	f7f6 f960 	bl	80002a8 <__aeabi_dsub>
 8009fe8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009fec:	465d      	mov	r5, fp
 8009fee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ff2:	f7f6 fdc1 	bl	8000b78 <__aeabi_d2iz>
 8009ff6:	4606      	mov	r6, r0
 8009ff8:	f7f6 faa4 	bl	8000544 <__aeabi_i2d>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	460b      	mov	r3, r1
 800a000:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a004:	f7f6 f950 	bl	80002a8 <__aeabi_dsub>
 800a008:	3630      	adds	r6, #48	; 0x30
 800a00a:	f805 6b01 	strb.w	r6, [r5], #1
 800a00e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a012:	e9cd 0100 	strd	r0, r1, [sp]
 800a016:	f7f6 fd71 	bl	8000afc <__aeabi_dcmplt>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	d163      	bne.n	800a0e6 <_dtoa_r+0x5de>
 800a01e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a022:	2000      	movs	r0, #0
 800a024:	4937      	ldr	r1, [pc, #220]	; (800a104 <_dtoa_r+0x5fc>)
 800a026:	f7f6 f93f 	bl	80002a8 <__aeabi_dsub>
 800a02a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a02e:	f7f6 fd65 	bl	8000afc <__aeabi_dcmplt>
 800a032:	2800      	cmp	r0, #0
 800a034:	f040 80b7 	bne.w	800a1a6 <_dtoa_r+0x69e>
 800a038:	eba5 030b 	sub.w	r3, r5, fp
 800a03c:	429f      	cmp	r7, r3
 800a03e:	f77f af7c 	ble.w	8009f3a <_dtoa_r+0x432>
 800a042:	2200      	movs	r2, #0
 800a044:	4b30      	ldr	r3, [pc, #192]	; (800a108 <_dtoa_r+0x600>)
 800a046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a04a:	f7f6 fae5 	bl	8000618 <__aeabi_dmul>
 800a04e:	2200      	movs	r2, #0
 800a050:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a054:	4b2c      	ldr	r3, [pc, #176]	; (800a108 <_dtoa_r+0x600>)
 800a056:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a05a:	f7f6 fadd 	bl	8000618 <__aeabi_dmul>
 800a05e:	e9cd 0100 	strd	r0, r1, [sp]
 800a062:	e7c4      	b.n	8009fee <_dtoa_r+0x4e6>
 800a064:	462a      	mov	r2, r5
 800a066:	4633      	mov	r3, r6
 800a068:	f7f6 fad6 	bl	8000618 <__aeabi_dmul>
 800a06c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a070:	eb0b 0507 	add.w	r5, fp, r7
 800a074:	465e      	mov	r6, fp
 800a076:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a07a:	f7f6 fd7d 	bl	8000b78 <__aeabi_d2iz>
 800a07e:	4607      	mov	r7, r0
 800a080:	f7f6 fa60 	bl	8000544 <__aeabi_i2d>
 800a084:	3730      	adds	r7, #48	; 0x30
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a08e:	f7f6 f90b 	bl	80002a8 <__aeabi_dsub>
 800a092:	f806 7b01 	strb.w	r7, [r6], #1
 800a096:	42ae      	cmp	r6, r5
 800a098:	e9cd 0100 	strd	r0, r1, [sp]
 800a09c:	f04f 0200 	mov.w	r2, #0
 800a0a0:	d126      	bne.n	800a0f0 <_dtoa_r+0x5e8>
 800a0a2:	4b1c      	ldr	r3, [pc, #112]	; (800a114 <_dtoa_r+0x60c>)
 800a0a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0a8:	f7f6 f900 	bl	80002ac <__adddf3>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	460b      	mov	r3, r1
 800a0b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0b4:	f7f6 fd40 	bl	8000b38 <__aeabi_dcmpgt>
 800a0b8:	2800      	cmp	r0, #0
 800a0ba:	d174      	bne.n	800a1a6 <_dtoa_r+0x69e>
 800a0bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	4914      	ldr	r1, [pc, #80]	; (800a114 <_dtoa_r+0x60c>)
 800a0c4:	f7f6 f8f0 	bl	80002a8 <__aeabi_dsub>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0d0:	f7f6 fd14 	bl	8000afc <__aeabi_dcmplt>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	f43f af30 	beq.w	8009f3a <_dtoa_r+0x432>
 800a0da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0de:	2b30      	cmp	r3, #48	; 0x30
 800a0e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a0e4:	d002      	beq.n	800a0ec <_dtoa_r+0x5e4>
 800a0e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a0ea:	e04a      	b.n	800a182 <_dtoa_r+0x67a>
 800a0ec:	4615      	mov	r5, r2
 800a0ee:	e7f4      	b.n	800a0da <_dtoa_r+0x5d2>
 800a0f0:	4b05      	ldr	r3, [pc, #20]	; (800a108 <_dtoa_r+0x600>)
 800a0f2:	f7f6 fa91 	bl	8000618 <__aeabi_dmul>
 800a0f6:	e9cd 0100 	strd	r0, r1, [sp]
 800a0fa:	e7bc      	b.n	800a076 <_dtoa_r+0x56e>
 800a0fc:	0800e668 	.word	0x0800e668
 800a100:	0800e640 	.word	0x0800e640
 800a104:	3ff00000 	.word	0x3ff00000
 800a108:	40240000 	.word	0x40240000
 800a10c:	401c0000 	.word	0x401c0000
 800a110:	40140000 	.word	0x40140000
 800a114:	3fe00000 	.word	0x3fe00000
 800a118:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a11c:	465d      	mov	r5, fp
 800a11e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a122:	4630      	mov	r0, r6
 800a124:	4639      	mov	r1, r7
 800a126:	f7f6 fba1 	bl	800086c <__aeabi_ddiv>
 800a12a:	f7f6 fd25 	bl	8000b78 <__aeabi_d2iz>
 800a12e:	4680      	mov	r8, r0
 800a130:	f7f6 fa08 	bl	8000544 <__aeabi_i2d>
 800a134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a138:	f7f6 fa6e 	bl	8000618 <__aeabi_dmul>
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4630      	mov	r0, r6
 800a142:	4639      	mov	r1, r7
 800a144:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a148:	f7f6 f8ae 	bl	80002a8 <__aeabi_dsub>
 800a14c:	f805 6b01 	strb.w	r6, [r5], #1
 800a150:	eba5 060b 	sub.w	r6, r5, fp
 800a154:	45b1      	cmp	r9, r6
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	d139      	bne.n	800a1d0 <_dtoa_r+0x6c8>
 800a15c:	f7f6 f8a6 	bl	80002ac <__adddf3>
 800a160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a164:	4606      	mov	r6, r0
 800a166:	460f      	mov	r7, r1
 800a168:	f7f6 fce6 	bl	8000b38 <__aeabi_dcmpgt>
 800a16c:	b9c8      	cbnz	r0, 800a1a2 <_dtoa_r+0x69a>
 800a16e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a172:	4630      	mov	r0, r6
 800a174:	4639      	mov	r1, r7
 800a176:	f7f6 fcb7 	bl	8000ae8 <__aeabi_dcmpeq>
 800a17a:	b110      	cbz	r0, 800a182 <_dtoa_r+0x67a>
 800a17c:	f018 0f01 	tst.w	r8, #1
 800a180:	d10f      	bne.n	800a1a2 <_dtoa_r+0x69a>
 800a182:	9904      	ldr	r1, [sp, #16]
 800a184:	4620      	mov	r0, r4
 800a186:	f000 fdf9 	bl	800ad7c <_Bfree>
 800a18a:	2300      	movs	r3, #0
 800a18c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a18e:	702b      	strb	r3, [r5, #0]
 800a190:	f10a 0301 	add.w	r3, sl, #1
 800a194:	6013      	str	r3, [r2, #0]
 800a196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f000 8241 	beq.w	800a620 <_dtoa_r+0xb18>
 800a19e:	601d      	str	r5, [r3, #0]
 800a1a0:	e23e      	b.n	800a620 <_dtoa_r+0xb18>
 800a1a2:	f8cd a020 	str.w	sl, [sp, #32]
 800a1a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1aa:	2a39      	cmp	r2, #57	; 0x39
 800a1ac:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800a1b0:	d108      	bne.n	800a1c4 <_dtoa_r+0x6bc>
 800a1b2:	459b      	cmp	fp, r3
 800a1b4:	d10a      	bne.n	800a1cc <_dtoa_r+0x6c4>
 800a1b6:	9b08      	ldr	r3, [sp, #32]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	9308      	str	r3, [sp, #32]
 800a1bc:	2330      	movs	r3, #48	; 0x30
 800a1be:	f88b 3000 	strb.w	r3, [fp]
 800a1c2:	465b      	mov	r3, fp
 800a1c4:	781a      	ldrb	r2, [r3, #0]
 800a1c6:	3201      	adds	r2, #1
 800a1c8:	701a      	strb	r2, [r3, #0]
 800a1ca:	e78c      	b.n	800a0e6 <_dtoa_r+0x5de>
 800a1cc:	461d      	mov	r5, r3
 800a1ce:	e7ea      	b.n	800a1a6 <_dtoa_r+0x69e>
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	4b9b      	ldr	r3, [pc, #620]	; (800a440 <_dtoa_r+0x938>)
 800a1d4:	f7f6 fa20 	bl	8000618 <__aeabi_dmul>
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4606      	mov	r6, r0
 800a1de:	460f      	mov	r7, r1
 800a1e0:	f7f6 fc82 	bl	8000ae8 <__aeabi_dcmpeq>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d09a      	beq.n	800a11e <_dtoa_r+0x616>
 800a1e8:	e7cb      	b.n	800a182 <_dtoa_r+0x67a>
 800a1ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1ec:	2a00      	cmp	r2, #0
 800a1ee:	f000 808b 	beq.w	800a308 <_dtoa_r+0x800>
 800a1f2:	9a06      	ldr	r2, [sp, #24]
 800a1f4:	2a01      	cmp	r2, #1
 800a1f6:	dc6e      	bgt.n	800a2d6 <_dtoa_r+0x7ce>
 800a1f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1fa:	2a00      	cmp	r2, #0
 800a1fc:	d067      	beq.n	800a2ce <_dtoa_r+0x7c6>
 800a1fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a202:	9f07      	ldr	r7, [sp, #28]
 800a204:	9d05      	ldr	r5, [sp, #20]
 800a206:	9a05      	ldr	r2, [sp, #20]
 800a208:	2101      	movs	r1, #1
 800a20a:	441a      	add	r2, r3
 800a20c:	4620      	mov	r0, r4
 800a20e:	9205      	str	r2, [sp, #20]
 800a210:	4498      	add	r8, r3
 800a212:	f000 fe91 	bl	800af38 <__i2b>
 800a216:	4606      	mov	r6, r0
 800a218:	2d00      	cmp	r5, #0
 800a21a:	dd0c      	ble.n	800a236 <_dtoa_r+0x72e>
 800a21c:	f1b8 0f00 	cmp.w	r8, #0
 800a220:	dd09      	ble.n	800a236 <_dtoa_r+0x72e>
 800a222:	4545      	cmp	r5, r8
 800a224:	9a05      	ldr	r2, [sp, #20]
 800a226:	462b      	mov	r3, r5
 800a228:	bfa8      	it	ge
 800a22a:	4643      	movge	r3, r8
 800a22c:	1ad2      	subs	r2, r2, r3
 800a22e:	9205      	str	r2, [sp, #20]
 800a230:	1aed      	subs	r5, r5, r3
 800a232:	eba8 0803 	sub.w	r8, r8, r3
 800a236:	9b07      	ldr	r3, [sp, #28]
 800a238:	b1eb      	cbz	r3, 800a276 <_dtoa_r+0x76e>
 800a23a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d067      	beq.n	800a310 <_dtoa_r+0x808>
 800a240:	b18f      	cbz	r7, 800a266 <_dtoa_r+0x75e>
 800a242:	4631      	mov	r1, r6
 800a244:	463a      	mov	r2, r7
 800a246:	4620      	mov	r0, r4
 800a248:	f000 ff16 	bl	800b078 <__pow5mult>
 800a24c:	9a04      	ldr	r2, [sp, #16]
 800a24e:	4601      	mov	r1, r0
 800a250:	4606      	mov	r6, r0
 800a252:	4620      	mov	r0, r4
 800a254:	f000 fe79 	bl	800af4a <__multiply>
 800a258:	9904      	ldr	r1, [sp, #16]
 800a25a:	9008      	str	r0, [sp, #32]
 800a25c:	4620      	mov	r0, r4
 800a25e:	f000 fd8d 	bl	800ad7c <_Bfree>
 800a262:	9b08      	ldr	r3, [sp, #32]
 800a264:	9304      	str	r3, [sp, #16]
 800a266:	9b07      	ldr	r3, [sp, #28]
 800a268:	1bda      	subs	r2, r3, r7
 800a26a:	d004      	beq.n	800a276 <_dtoa_r+0x76e>
 800a26c:	9904      	ldr	r1, [sp, #16]
 800a26e:	4620      	mov	r0, r4
 800a270:	f000 ff02 	bl	800b078 <__pow5mult>
 800a274:	9004      	str	r0, [sp, #16]
 800a276:	2101      	movs	r1, #1
 800a278:	4620      	mov	r0, r4
 800a27a:	f000 fe5d 	bl	800af38 <__i2b>
 800a27e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a280:	4607      	mov	r7, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 81d0 	beq.w	800a628 <_dtoa_r+0xb20>
 800a288:	461a      	mov	r2, r3
 800a28a:	4601      	mov	r1, r0
 800a28c:	4620      	mov	r0, r4
 800a28e:	f000 fef3 	bl	800b078 <__pow5mult>
 800a292:	9b06      	ldr	r3, [sp, #24]
 800a294:	2b01      	cmp	r3, #1
 800a296:	4607      	mov	r7, r0
 800a298:	dc40      	bgt.n	800a31c <_dtoa_r+0x814>
 800a29a:	9b00      	ldr	r3, [sp, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d139      	bne.n	800a314 <_dtoa_r+0x80c>
 800a2a0:	9b01      	ldr	r3, [sp, #4]
 800a2a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d136      	bne.n	800a318 <_dtoa_r+0x810>
 800a2aa:	9b01      	ldr	r3, [sp, #4]
 800a2ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2b0:	0d1b      	lsrs	r3, r3, #20
 800a2b2:	051b      	lsls	r3, r3, #20
 800a2b4:	b12b      	cbz	r3, 800a2c2 <_dtoa_r+0x7ba>
 800a2b6:	9b05      	ldr	r3, [sp, #20]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	9305      	str	r3, [sp, #20]
 800a2bc:	f108 0801 	add.w	r8, r8, #1
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	9307      	str	r3, [sp, #28]
 800a2c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d12a      	bne.n	800a320 <_dtoa_r+0x818>
 800a2ca:	2001      	movs	r0, #1
 800a2cc:	e030      	b.n	800a330 <_dtoa_r+0x828>
 800a2ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2d4:	e795      	b.n	800a202 <_dtoa_r+0x6fa>
 800a2d6:	9b07      	ldr	r3, [sp, #28]
 800a2d8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800a2dc:	42bb      	cmp	r3, r7
 800a2de:	bfbf      	itttt	lt
 800a2e0:	9b07      	ldrlt	r3, [sp, #28]
 800a2e2:	9707      	strlt	r7, [sp, #28]
 800a2e4:	1afa      	sublt	r2, r7, r3
 800a2e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a2e8:	bfbb      	ittet	lt
 800a2ea:	189b      	addlt	r3, r3, r2
 800a2ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a2ee:	1bdf      	subge	r7, r3, r7
 800a2f0:	2700      	movlt	r7, #0
 800a2f2:	f1b9 0f00 	cmp.w	r9, #0
 800a2f6:	bfb5      	itete	lt
 800a2f8:	9b05      	ldrlt	r3, [sp, #20]
 800a2fa:	9d05      	ldrge	r5, [sp, #20]
 800a2fc:	eba3 0509 	sublt.w	r5, r3, r9
 800a300:	464b      	movge	r3, r9
 800a302:	bfb8      	it	lt
 800a304:	2300      	movlt	r3, #0
 800a306:	e77e      	b.n	800a206 <_dtoa_r+0x6fe>
 800a308:	9f07      	ldr	r7, [sp, #28]
 800a30a:	9d05      	ldr	r5, [sp, #20]
 800a30c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a30e:	e783      	b.n	800a218 <_dtoa_r+0x710>
 800a310:	9a07      	ldr	r2, [sp, #28]
 800a312:	e7ab      	b.n	800a26c <_dtoa_r+0x764>
 800a314:	2300      	movs	r3, #0
 800a316:	e7d4      	b.n	800a2c2 <_dtoa_r+0x7ba>
 800a318:	9b00      	ldr	r3, [sp, #0]
 800a31a:	e7d2      	b.n	800a2c2 <_dtoa_r+0x7ba>
 800a31c:	2300      	movs	r3, #0
 800a31e:	9307      	str	r3, [sp, #28]
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a326:	6918      	ldr	r0, [r3, #16]
 800a328:	f000 fdb8 	bl	800ae9c <__hi0bits>
 800a32c:	f1c0 0020 	rsb	r0, r0, #32
 800a330:	4440      	add	r0, r8
 800a332:	f010 001f 	ands.w	r0, r0, #31
 800a336:	d047      	beq.n	800a3c8 <_dtoa_r+0x8c0>
 800a338:	f1c0 0320 	rsb	r3, r0, #32
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	dd3b      	ble.n	800a3b8 <_dtoa_r+0x8b0>
 800a340:	9b05      	ldr	r3, [sp, #20]
 800a342:	f1c0 001c 	rsb	r0, r0, #28
 800a346:	4403      	add	r3, r0
 800a348:	9305      	str	r3, [sp, #20]
 800a34a:	4405      	add	r5, r0
 800a34c:	4480      	add	r8, r0
 800a34e:	9b05      	ldr	r3, [sp, #20]
 800a350:	2b00      	cmp	r3, #0
 800a352:	dd05      	ble.n	800a360 <_dtoa_r+0x858>
 800a354:	461a      	mov	r2, r3
 800a356:	9904      	ldr	r1, [sp, #16]
 800a358:	4620      	mov	r0, r4
 800a35a:	f000 fedb 	bl	800b114 <__lshift>
 800a35e:	9004      	str	r0, [sp, #16]
 800a360:	f1b8 0f00 	cmp.w	r8, #0
 800a364:	dd05      	ble.n	800a372 <_dtoa_r+0x86a>
 800a366:	4639      	mov	r1, r7
 800a368:	4642      	mov	r2, r8
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 fed2 	bl	800b114 <__lshift>
 800a370:	4607      	mov	r7, r0
 800a372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a374:	b353      	cbz	r3, 800a3cc <_dtoa_r+0x8c4>
 800a376:	4639      	mov	r1, r7
 800a378:	9804      	ldr	r0, [sp, #16]
 800a37a:	f000 ff1f 	bl	800b1bc <__mcmp>
 800a37e:	2800      	cmp	r0, #0
 800a380:	da24      	bge.n	800a3cc <_dtoa_r+0x8c4>
 800a382:	2300      	movs	r3, #0
 800a384:	220a      	movs	r2, #10
 800a386:	9904      	ldr	r1, [sp, #16]
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 fd0e 	bl	800adaa <__multadd>
 800a38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a390:	9004      	str	r0, [sp, #16]
 800a392:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 814d 	beq.w	800a636 <_dtoa_r+0xb2e>
 800a39c:	2300      	movs	r3, #0
 800a39e:	4631      	mov	r1, r6
 800a3a0:	220a      	movs	r2, #10
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 fd01 	bl	800adaa <__multadd>
 800a3a8:	9b02      	ldr	r3, [sp, #8]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	4606      	mov	r6, r0
 800a3ae:	dc4f      	bgt.n	800a450 <_dtoa_r+0x948>
 800a3b0:	9b06      	ldr	r3, [sp, #24]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	dd4c      	ble.n	800a450 <_dtoa_r+0x948>
 800a3b6:	e011      	b.n	800a3dc <_dtoa_r+0x8d4>
 800a3b8:	d0c9      	beq.n	800a34e <_dtoa_r+0x846>
 800a3ba:	9a05      	ldr	r2, [sp, #20]
 800a3bc:	331c      	adds	r3, #28
 800a3be:	441a      	add	r2, r3
 800a3c0:	9205      	str	r2, [sp, #20]
 800a3c2:	441d      	add	r5, r3
 800a3c4:	4498      	add	r8, r3
 800a3c6:	e7c2      	b.n	800a34e <_dtoa_r+0x846>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	e7f6      	b.n	800a3ba <_dtoa_r+0x8b2>
 800a3cc:	f1b9 0f00 	cmp.w	r9, #0
 800a3d0:	dc38      	bgt.n	800a444 <_dtoa_r+0x93c>
 800a3d2:	9b06      	ldr	r3, [sp, #24]
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	dd35      	ble.n	800a444 <_dtoa_r+0x93c>
 800a3d8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a3dc:	9b02      	ldr	r3, [sp, #8]
 800a3de:	b963      	cbnz	r3, 800a3fa <_dtoa_r+0x8f2>
 800a3e0:	4639      	mov	r1, r7
 800a3e2:	2205      	movs	r2, #5
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	f000 fce0 	bl	800adaa <__multadd>
 800a3ea:	4601      	mov	r1, r0
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	9804      	ldr	r0, [sp, #16]
 800a3f0:	f000 fee4 	bl	800b1bc <__mcmp>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	f73f adcc 	bgt.w	8009f92 <_dtoa_r+0x48a>
 800a3fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3fc:	465d      	mov	r5, fp
 800a3fe:	ea6f 0a03 	mvn.w	sl, r3
 800a402:	f04f 0900 	mov.w	r9, #0
 800a406:	4639      	mov	r1, r7
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fcb7 	bl	800ad7c <_Bfree>
 800a40e:	2e00      	cmp	r6, #0
 800a410:	f43f aeb7 	beq.w	800a182 <_dtoa_r+0x67a>
 800a414:	f1b9 0f00 	cmp.w	r9, #0
 800a418:	d005      	beq.n	800a426 <_dtoa_r+0x91e>
 800a41a:	45b1      	cmp	r9, r6
 800a41c:	d003      	beq.n	800a426 <_dtoa_r+0x91e>
 800a41e:	4649      	mov	r1, r9
 800a420:	4620      	mov	r0, r4
 800a422:	f000 fcab 	bl	800ad7c <_Bfree>
 800a426:	4631      	mov	r1, r6
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 fca7 	bl	800ad7c <_Bfree>
 800a42e:	e6a8      	b.n	800a182 <_dtoa_r+0x67a>
 800a430:	2700      	movs	r7, #0
 800a432:	463e      	mov	r6, r7
 800a434:	e7e1      	b.n	800a3fa <_dtoa_r+0x8f2>
 800a436:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a43a:	463e      	mov	r6, r7
 800a43c:	e5a9      	b.n	8009f92 <_dtoa_r+0x48a>
 800a43e:	bf00      	nop
 800a440:	40240000 	.word	0x40240000
 800a444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a446:	f8cd 9008 	str.w	r9, [sp, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f000 80fa 	beq.w	800a644 <_dtoa_r+0xb3c>
 800a450:	2d00      	cmp	r5, #0
 800a452:	dd05      	ble.n	800a460 <_dtoa_r+0x958>
 800a454:	4631      	mov	r1, r6
 800a456:	462a      	mov	r2, r5
 800a458:	4620      	mov	r0, r4
 800a45a:	f000 fe5b 	bl	800b114 <__lshift>
 800a45e:	4606      	mov	r6, r0
 800a460:	9b07      	ldr	r3, [sp, #28]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d04c      	beq.n	800a500 <_dtoa_r+0x9f8>
 800a466:	6871      	ldr	r1, [r6, #4]
 800a468:	4620      	mov	r0, r4
 800a46a:	f000 fc53 	bl	800ad14 <_Balloc>
 800a46e:	6932      	ldr	r2, [r6, #16]
 800a470:	3202      	adds	r2, #2
 800a472:	4605      	mov	r5, r0
 800a474:	0092      	lsls	r2, r2, #2
 800a476:	f106 010c 	add.w	r1, r6, #12
 800a47a:	300c      	adds	r0, #12
 800a47c:	f7fd fcac 	bl	8007dd8 <memcpy>
 800a480:	2201      	movs	r2, #1
 800a482:	4629      	mov	r1, r5
 800a484:	4620      	mov	r0, r4
 800a486:	f000 fe45 	bl	800b114 <__lshift>
 800a48a:	9b00      	ldr	r3, [sp, #0]
 800a48c:	f8cd b014 	str.w	fp, [sp, #20]
 800a490:	f003 0301 	and.w	r3, r3, #1
 800a494:	46b1      	mov	r9, r6
 800a496:	9307      	str	r3, [sp, #28]
 800a498:	4606      	mov	r6, r0
 800a49a:	4639      	mov	r1, r7
 800a49c:	9804      	ldr	r0, [sp, #16]
 800a49e:	f7ff faa5 	bl	80099ec <quorem>
 800a4a2:	4649      	mov	r1, r9
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a4aa:	9804      	ldr	r0, [sp, #16]
 800a4ac:	f000 fe86 	bl	800b1bc <__mcmp>
 800a4b0:	4632      	mov	r2, r6
 800a4b2:	9000      	str	r0, [sp, #0]
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f000 fe9a 	bl	800b1f0 <__mdiff>
 800a4bc:	68c3      	ldr	r3, [r0, #12]
 800a4be:	4602      	mov	r2, r0
 800a4c0:	bb03      	cbnz	r3, 800a504 <_dtoa_r+0x9fc>
 800a4c2:	4601      	mov	r1, r0
 800a4c4:	9008      	str	r0, [sp, #32]
 800a4c6:	9804      	ldr	r0, [sp, #16]
 800a4c8:	f000 fe78 	bl	800b1bc <__mcmp>
 800a4cc:	9a08      	ldr	r2, [sp, #32]
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	4611      	mov	r1, r2
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	9308      	str	r3, [sp, #32]
 800a4d6:	f000 fc51 	bl	800ad7c <_Bfree>
 800a4da:	9b08      	ldr	r3, [sp, #32]
 800a4dc:	b9a3      	cbnz	r3, 800a508 <_dtoa_r+0xa00>
 800a4de:	9a06      	ldr	r2, [sp, #24]
 800a4e0:	b992      	cbnz	r2, 800a508 <_dtoa_r+0xa00>
 800a4e2:	9a07      	ldr	r2, [sp, #28]
 800a4e4:	b982      	cbnz	r2, 800a508 <_dtoa_r+0xa00>
 800a4e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a4ea:	d029      	beq.n	800a540 <_dtoa_r+0xa38>
 800a4ec:	9b00      	ldr	r3, [sp, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	dd01      	ble.n	800a4f6 <_dtoa_r+0x9ee>
 800a4f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a4f6:	9b05      	ldr	r3, [sp, #20]
 800a4f8:	1c5d      	adds	r5, r3, #1
 800a4fa:	f883 8000 	strb.w	r8, [r3]
 800a4fe:	e782      	b.n	800a406 <_dtoa_r+0x8fe>
 800a500:	4630      	mov	r0, r6
 800a502:	e7c2      	b.n	800a48a <_dtoa_r+0x982>
 800a504:	2301      	movs	r3, #1
 800a506:	e7e3      	b.n	800a4d0 <_dtoa_r+0x9c8>
 800a508:	9a00      	ldr	r2, [sp, #0]
 800a50a:	2a00      	cmp	r2, #0
 800a50c:	db04      	blt.n	800a518 <_dtoa_r+0xa10>
 800a50e:	d125      	bne.n	800a55c <_dtoa_r+0xa54>
 800a510:	9a06      	ldr	r2, [sp, #24]
 800a512:	bb1a      	cbnz	r2, 800a55c <_dtoa_r+0xa54>
 800a514:	9a07      	ldr	r2, [sp, #28]
 800a516:	bb0a      	cbnz	r2, 800a55c <_dtoa_r+0xa54>
 800a518:	2b00      	cmp	r3, #0
 800a51a:	ddec      	ble.n	800a4f6 <_dtoa_r+0x9ee>
 800a51c:	2201      	movs	r2, #1
 800a51e:	9904      	ldr	r1, [sp, #16]
 800a520:	4620      	mov	r0, r4
 800a522:	f000 fdf7 	bl	800b114 <__lshift>
 800a526:	4639      	mov	r1, r7
 800a528:	9004      	str	r0, [sp, #16]
 800a52a:	f000 fe47 	bl	800b1bc <__mcmp>
 800a52e:	2800      	cmp	r0, #0
 800a530:	dc03      	bgt.n	800a53a <_dtoa_r+0xa32>
 800a532:	d1e0      	bne.n	800a4f6 <_dtoa_r+0x9ee>
 800a534:	f018 0f01 	tst.w	r8, #1
 800a538:	d0dd      	beq.n	800a4f6 <_dtoa_r+0x9ee>
 800a53a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a53e:	d1d8      	bne.n	800a4f2 <_dtoa_r+0x9ea>
 800a540:	9b05      	ldr	r3, [sp, #20]
 800a542:	9a05      	ldr	r2, [sp, #20]
 800a544:	1c5d      	adds	r5, r3, #1
 800a546:	2339      	movs	r3, #57	; 0x39
 800a548:	7013      	strb	r3, [r2, #0]
 800a54a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a54e:	2b39      	cmp	r3, #57	; 0x39
 800a550:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a554:	d04f      	beq.n	800a5f6 <_dtoa_r+0xaee>
 800a556:	3301      	adds	r3, #1
 800a558:	7013      	strb	r3, [r2, #0]
 800a55a:	e754      	b.n	800a406 <_dtoa_r+0x8fe>
 800a55c:	9a05      	ldr	r2, [sp, #20]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f102 0501 	add.w	r5, r2, #1
 800a564:	dd06      	ble.n	800a574 <_dtoa_r+0xa6c>
 800a566:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a56a:	d0e9      	beq.n	800a540 <_dtoa_r+0xa38>
 800a56c:	f108 0801 	add.w	r8, r8, #1
 800a570:	9b05      	ldr	r3, [sp, #20]
 800a572:	e7c2      	b.n	800a4fa <_dtoa_r+0x9f2>
 800a574:	9a02      	ldr	r2, [sp, #8]
 800a576:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a57a:	eba5 030b 	sub.w	r3, r5, fp
 800a57e:	4293      	cmp	r3, r2
 800a580:	d021      	beq.n	800a5c6 <_dtoa_r+0xabe>
 800a582:	2300      	movs	r3, #0
 800a584:	220a      	movs	r2, #10
 800a586:	9904      	ldr	r1, [sp, #16]
 800a588:	4620      	mov	r0, r4
 800a58a:	f000 fc0e 	bl	800adaa <__multadd>
 800a58e:	45b1      	cmp	r9, r6
 800a590:	9004      	str	r0, [sp, #16]
 800a592:	f04f 0300 	mov.w	r3, #0
 800a596:	f04f 020a 	mov.w	r2, #10
 800a59a:	4649      	mov	r1, r9
 800a59c:	4620      	mov	r0, r4
 800a59e:	d105      	bne.n	800a5ac <_dtoa_r+0xaa4>
 800a5a0:	f000 fc03 	bl	800adaa <__multadd>
 800a5a4:	4681      	mov	r9, r0
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	9505      	str	r5, [sp, #20]
 800a5aa:	e776      	b.n	800a49a <_dtoa_r+0x992>
 800a5ac:	f000 fbfd 	bl	800adaa <__multadd>
 800a5b0:	4631      	mov	r1, r6
 800a5b2:	4681      	mov	r9, r0
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	220a      	movs	r2, #10
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f000 fbf6 	bl	800adaa <__multadd>
 800a5be:	4606      	mov	r6, r0
 800a5c0:	e7f2      	b.n	800a5a8 <_dtoa_r+0xaa0>
 800a5c2:	f04f 0900 	mov.w	r9, #0
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	9904      	ldr	r1, [sp, #16]
 800a5ca:	4620      	mov	r0, r4
 800a5cc:	f000 fda2 	bl	800b114 <__lshift>
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	9004      	str	r0, [sp, #16]
 800a5d4:	f000 fdf2 	bl	800b1bc <__mcmp>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	dcb6      	bgt.n	800a54a <_dtoa_r+0xa42>
 800a5dc:	d102      	bne.n	800a5e4 <_dtoa_r+0xadc>
 800a5de:	f018 0f01 	tst.w	r8, #1
 800a5e2:	d1b2      	bne.n	800a54a <_dtoa_r+0xa42>
 800a5e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a5e8:	2b30      	cmp	r3, #48	; 0x30
 800a5ea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a5ee:	f47f af0a 	bne.w	800a406 <_dtoa_r+0x8fe>
 800a5f2:	4615      	mov	r5, r2
 800a5f4:	e7f6      	b.n	800a5e4 <_dtoa_r+0xadc>
 800a5f6:	4593      	cmp	fp, r2
 800a5f8:	d105      	bne.n	800a606 <_dtoa_r+0xafe>
 800a5fa:	2331      	movs	r3, #49	; 0x31
 800a5fc:	f10a 0a01 	add.w	sl, sl, #1
 800a600:	f88b 3000 	strb.w	r3, [fp]
 800a604:	e6ff      	b.n	800a406 <_dtoa_r+0x8fe>
 800a606:	4615      	mov	r5, r2
 800a608:	e79f      	b.n	800a54a <_dtoa_r+0xa42>
 800a60a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a670 <_dtoa_r+0xb68>
 800a60e:	e007      	b.n	800a620 <_dtoa_r+0xb18>
 800a610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a612:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a674 <_dtoa_r+0xb6c>
 800a616:	b11b      	cbz	r3, 800a620 <_dtoa_r+0xb18>
 800a618:	f10b 0308 	add.w	r3, fp, #8
 800a61c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	4658      	mov	r0, fp
 800a622:	b017      	add	sp, #92	; 0x5c
 800a624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a628:	9b06      	ldr	r3, [sp, #24]
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	f77f ae35 	ble.w	800a29a <_dtoa_r+0x792>
 800a630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a632:	9307      	str	r3, [sp, #28]
 800a634:	e649      	b.n	800a2ca <_dtoa_r+0x7c2>
 800a636:	9b02      	ldr	r3, [sp, #8]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	dc03      	bgt.n	800a644 <_dtoa_r+0xb3c>
 800a63c:	9b06      	ldr	r3, [sp, #24]
 800a63e:	2b02      	cmp	r3, #2
 800a640:	f73f aecc 	bgt.w	800a3dc <_dtoa_r+0x8d4>
 800a644:	465d      	mov	r5, fp
 800a646:	4639      	mov	r1, r7
 800a648:	9804      	ldr	r0, [sp, #16]
 800a64a:	f7ff f9cf 	bl	80099ec <quorem>
 800a64e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a652:	f805 8b01 	strb.w	r8, [r5], #1
 800a656:	9a02      	ldr	r2, [sp, #8]
 800a658:	eba5 030b 	sub.w	r3, r5, fp
 800a65c:	429a      	cmp	r2, r3
 800a65e:	ddb0      	ble.n	800a5c2 <_dtoa_r+0xaba>
 800a660:	2300      	movs	r3, #0
 800a662:	220a      	movs	r2, #10
 800a664:	9904      	ldr	r1, [sp, #16]
 800a666:	4620      	mov	r0, r4
 800a668:	f000 fb9f 	bl	800adaa <__multadd>
 800a66c:	9004      	str	r0, [sp, #16]
 800a66e:	e7ea      	b.n	800a646 <_dtoa_r+0xb3e>
 800a670:	0800e5ac 	.word	0x0800e5ac
 800a674:	0800e628 	.word	0x0800e628

0800a678 <rshift>:
 800a678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a67a:	6906      	ldr	r6, [r0, #16]
 800a67c:	114b      	asrs	r3, r1, #5
 800a67e:	429e      	cmp	r6, r3
 800a680:	f100 0414 	add.w	r4, r0, #20
 800a684:	dd30      	ble.n	800a6e8 <rshift+0x70>
 800a686:	f011 011f 	ands.w	r1, r1, #31
 800a68a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800a68e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800a692:	d108      	bne.n	800a6a6 <rshift+0x2e>
 800a694:	4621      	mov	r1, r4
 800a696:	42b2      	cmp	r2, r6
 800a698:	460b      	mov	r3, r1
 800a69a:	d211      	bcs.n	800a6c0 <rshift+0x48>
 800a69c:	f852 3b04 	ldr.w	r3, [r2], #4
 800a6a0:	f841 3b04 	str.w	r3, [r1], #4
 800a6a4:	e7f7      	b.n	800a696 <rshift+0x1e>
 800a6a6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800a6aa:	f1c1 0c20 	rsb	ip, r1, #32
 800a6ae:	40cd      	lsrs	r5, r1
 800a6b0:	3204      	adds	r2, #4
 800a6b2:	4623      	mov	r3, r4
 800a6b4:	42b2      	cmp	r2, r6
 800a6b6:	4617      	mov	r7, r2
 800a6b8:	d30c      	bcc.n	800a6d4 <rshift+0x5c>
 800a6ba:	601d      	str	r5, [r3, #0]
 800a6bc:	b105      	cbz	r5, 800a6c0 <rshift+0x48>
 800a6be:	3304      	adds	r3, #4
 800a6c0:	1b1a      	subs	r2, r3, r4
 800a6c2:	42a3      	cmp	r3, r4
 800a6c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a6c8:	bf08      	it	eq
 800a6ca:	2300      	moveq	r3, #0
 800a6cc:	6102      	str	r2, [r0, #16]
 800a6ce:	bf08      	it	eq
 800a6d0:	6143      	streq	r3, [r0, #20]
 800a6d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d4:	683f      	ldr	r7, [r7, #0]
 800a6d6:	fa07 f70c 	lsl.w	r7, r7, ip
 800a6da:	433d      	orrs	r5, r7
 800a6dc:	f843 5b04 	str.w	r5, [r3], #4
 800a6e0:	f852 5b04 	ldr.w	r5, [r2], #4
 800a6e4:	40cd      	lsrs	r5, r1
 800a6e6:	e7e5      	b.n	800a6b4 <rshift+0x3c>
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	e7e9      	b.n	800a6c0 <rshift+0x48>

0800a6ec <__hexdig_fun>:
 800a6ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a6f0:	2b09      	cmp	r3, #9
 800a6f2:	d802      	bhi.n	800a6fa <__hexdig_fun+0xe>
 800a6f4:	3820      	subs	r0, #32
 800a6f6:	b2c0      	uxtb	r0, r0
 800a6f8:	4770      	bx	lr
 800a6fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a6fe:	2b05      	cmp	r3, #5
 800a700:	d801      	bhi.n	800a706 <__hexdig_fun+0x1a>
 800a702:	3847      	subs	r0, #71	; 0x47
 800a704:	e7f7      	b.n	800a6f6 <__hexdig_fun+0xa>
 800a706:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a70a:	2b05      	cmp	r3, #5
 800a70c:	d801      	bhi.n	800a712 <__hexdig_fun+0x26>
 800a70e:	3827      	subs	r0, #39	; 0x27
 800a710:	e7f1      	b.n	800a6f6 <__hexdig_fun+0xa>
 800a712:	2000      	movs	r0, #0
 800a714:	4770      	bx	lr

0800a716 <__gethex>:
 800a716:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71a:	b08b      	sub	sp, #44	; 0x2c
 800a71c:	468a      	mov	sl, r1
 800a71e:	9002      	str	r0, [sp, #8]
 800a720:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a722:	9306      	str	r3, [sp, #24]
 800a724:	4690      	mov	r8, r2
 800a726:	f000 fad0 	bl	800acca <__localeconv_l>
 800a72a:	6803      	ldr	r3, [r0, #0]
 800a72c:	9303      	str	r3, [sp, #12]
 800a72e:	4618      	mov	r0, r3
 800a730:	f7f5 fd5e 	bl	80001f0 <strlen>
 800a734:	9b03      	ldr	r3, [sp, #12]
 800a736:	9001      	str	r0, [sp, #4]
 800a738:	4403      	add	r3, r0
 800a73a:	f04f 0b00 	mov.w	fp, #0
 800a73e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a742:	9307      	str	r3, [sp, #28]
 800a744:	f8da 3000 	ldr.w	r3, [sl]
 800a748:	3302      	adds	r3, #2
 800a74a:	461f      	mov	r7, r3
 800a74c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a750:	2830      	cmp	r0, #48	; 0x30
 800a752:	d06c      	beq.n	800a82e <__gethex+0x118>
 800a754:	f7ff ffca 	bl	800a6ec <__hexdig_fun>
 800a758:	4604      	mov	r4, r0
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d16a      	bne.n	800a834 <__gethex+0x11e>
 800a75e:	9a01      	ldr	r2, [sp, #4]
 800a760:	9903      	ldr	r1, [sp, #12]
 800a762:	4638      	mov	r0, r7
 800a764:	f7fe fa80 	bl	8008c68 <strncmp>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d166      	bne.n	800a83a <__gethex+0x124>
 800a76c:	9b01      	ldr	r3, [sp, #4]
 800a76e:	5cf8      	ldrb	r0, [r7, r3]
 800a770:	18fe      	adds	r6, r7, r3
 800a772:	f7ff ffbb 	bl	800a6ec <__hexdig_fun>
 800a776:	2800      	cmp	r0, #0
 800a778:	d062      	beq.n	800a840 <__gethex+0x12a>
 800a77a:	4633      	mov	r3, r6
 800a77c:	7818      	ldrb	r0, [r3, #0]
 800a77e:	2830      	cmp	r0, #48	; 0x30
 800a780:	461f      	mov	r7, r3
 800a782:	f103 0301 	add.w	r3, r3, #1
 800a786:	d0f9      	beq.n	800a77c <__gethex+0x66>
 800a788:	f7ff ffb0 	bl	800a6ec <__hexdig_fun>
 800a78c:	fab0 f580 	clz	r5, r0
 800a790:	096d      	lsrs	r5, r5, #5
 800a792:	4634      	mov	r4, r6
 800a794:	f04f 0b01 	mov.w	fp, #1
 800a798:	463a      	mov	r2, r7
 800a79a:	4616      	mov	r6, r2
 800a79c:	3201      	adds	r2, #1
 800a79e:	7830      	ldrb	r0, [r6, #0]
 800a7a0:	f7ff ffa4 	bl	800a6ec <__hexdig_fun>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	d1f8      	bne.n	800a79a <__gethex+0x84>
 800a7a8:	9a01      	ldr	r2, [sp, #4]
 800a7aa:	9903      	ldr	r1, [sp, #12]
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	f7fe fa5b 	bl	8008c68 <strncmp>
 800a7b2:	b950      	cbnz	r0, 800a7ca <__gethex+0xb4>
 800a7b4:	b954      	cbnz	r4, 800a7cc <__gethex+0xb6>
 800a7b6:	9b01      	ldr	r3, [sp, #4]
 800a7b8:	18f4      	adds	r4, r6, r3
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	4616      	mov	r6, r2
 800a7be:	3201      	adds	r2, #1
 800a7c0:	7830      	ldrb	r0, [r6, #0]
 800a7c2:	f7ff ff93 	bl	800a6ec <__hexdig_fun>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d1f8      	bne.n	800a7bc <__gethex+0xa6>
 800a7ca:	b10c      	cbz	r4, 800a7d0 <__gethex+0xba>
 800a7cc:	1ba4      	subs	r4, r4, r6
 800a7ce:	00a4      	lsls	r4, r4, #2
 800a7d0:	7833      	ldrb	r3, [r6, #0]
 800a7d2:	2b50      	cmp	r3, #80	; 0x50
 800a7d4:	d001      	beq.n	800a7da <__gethex+0xc4>
 800a7d6:	2b70      	cmp	r3, #112	; 0x70
 800a7d8:	d140      	bne.n	800a85c <__gethex+0x146>
 800a7da:	7873      	ldrb	r3, [r6, #1]
 800a7dc:	2b2b      	cmp	r3, #43	; 0x2b
 800a7de:	d031      	beq.n	800a844 <__gethex+0x12e>
 800a7e0:	2b2d      	cmp	r3, #45	; 0x2d
 800a7e2:	d033      	beq.n	800a84c <__gethex+0x136>
 800a7e4:	1c71      	adds	r1, r6, #1
 800a7e6:	f04f 0900 	mov.w	r9, #0
 800a7ea:	7808      	ldrb	r0, [r1, #0]
 800a7ec:	f7ff ff7e 	bl	800a6ec <__hexdig_fun>
 800a7f0:	1e43      	subs	r3, r0, #1
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	2b18      	cmp	r3, #24
 800a7f6:	d831      	bhi.n	800a85c <__gethex+0x146>
 800a7f8:	f1a0 0210 	sub.w	r2, r0, #16
 800a7fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a800:	f7ff ff74 	bl	800a6ec <__hexdig_fun>
 800a804:	1e43      	subs	r3, r0, #1
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b18      	cmp	r3, #24
 800a80a:	d922      	bls.n	800a852 <__gethex+0x13c>
 800a80c:	f1b9 0f00 	cmp.w	r9, #0
 800a810:	d000      	beq.n	800a814 <__gethex+0xfe>
 800a812:	4252      	negs	r2, r2
 800a814:	4414      	add	r4, r2
 800a816:	f8ca 1000 	str.w	r1, [sl]
 800a81a:	b30d      	cbz	r5, 800a860 <__gethex+0x14a>
 800a81c:	f1bb 0f00 	cmp.w	fp, #0
 800a820:	bf0c      	ite	eq
 800a822:	2706      	moveq	r7, #6
 800a824:	2700      	movne	r7, #0
 800a826:	4638      	mov	r0, r7
 800a828:	b00b      	add	sp, #44	; 0x2c
 800a82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82e:	f10b 0b01 	add.w	fp, fp, #1
 800a832:	e78a      	b.n	800a74a <__gethex+0x34>
 800a834:	2500      	movs	r5, #0
 800a836:	462c      	mov	r4, r5
 800a838:	e7ae      	b.n	800a798 <__gethex+0x82>
 800a83a:	463e      	mov	r6, r7
 800a83c:	2501      	movs	r5, #1
 800a83e:	e7c7      	b.n	800a7d0 <__gethex+0xba>
 800a840:	4604      	mov	r4, r0
 800a842:	e7fb      	b.n	800a83c <__gethex+0x126>
 800a844:	f04f 0900 	mov.w	r9, #0
 800a848:	1cb1      	adds	r1, r6, #2
 800a84a:	e7ce      	b.n	800a7ea <__gethex+0xd4>
 800a84c:	f04f 0901 	mov.w	r9, #1
 800a850:	e7fa      	b.n	800a848 <__gethex+0x132>
 800a852:	230a      	movs	r3, #10
 800a854:	fb03 0202 	mla	r2, r3, r2, r0
 800a858:	3a10      	subs	r2, #16
 800a85a:	e7cf      	b.n	800a7fc <__gethex+0xe6>
 800a85c:	4631      	mov	r1, r6
 800a85e:	e7da      	b.n	800a816 <__gethex+0x100>
 800a860:	1bf3      	subs	r3, r6, r7
 800a862:	3b01      	subs	r3, #1
 800a864:	4629      	mov	r1, r5
 800a866:	2b07      	cmp	r3, #7
 800a868:	dc49      	bgt.n	800a8fe <__gethex+0x1e8>
 800a86a:	9802      	ldr	r0, [sp, #8]
 800a86c:	f000 fa52 	bl	800ad14 <_Balloc>
 800a870:	9b01      	ldr	r3, [sp, #4]
 800a872:	f100 0914 	add.w	r9, r0, #20
 800a876:	f04f 0b00 	mov.w	fp, #0
 800a87a:	f1c3 0301 	rsb	r3, r3, #1
 800a87e:	4605      	mov	r5, r0
 800a880:	f8cd 9010 	str.w	r9, [sp, #16]
 800a884:	46da      	mov	sl, fp
 800a886:	9308      	str	r3, [sp, #32]
 800a888:	42b7      	cmp	r7, r6
 800a88a:	d33b      	bcc.n	800a904 <__gethex+0x1ee>
 800a88c:	9804      	ldr	r0, [sp, #16]
 800a88e:	f840 ab04 	str.w	sl, [r0], #4
 800a892:	eba0 0009 	sub.w	r0, r0, r9
 800a896:	1080      	asrs	r0, r0, #2
 800a898:	6128      	str	r0, [r5, #16]
 800a89a:	0147      	lsls	r7, r0, #5
 800a89c:	4650      	mov	r0, sl
 800a89e:	f000 fafd 	bl	800ae9c <__hi0bits>
 800a8a2:	f8d8 6000 	ldr.w	r6, [r8]
 800a8a6:	1a3f      	subs	r7, r7, r0
 800a8a8:	42b7      	cmp	r7, r6
 800a8aa:	dd64      	ble.n	800a976 <__gethex+0x260>
 800a8ac:	1bbf      	subs	r7, r7, r6
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	4628      	mov	r0, r5
 800a8b2:	f000 fe0d 	bl	800b4d0 <__any_on>
 800a8b6:	4682      	mov	sl, r0
 800a8b8:	b178      	cbz	r0, 800a8da <__gethex+0x1c4>
 800a8ba:	1e7b      	subs	r3, r7, #1
 800a8bc:	1159      	asrs	r1, r3, #5
 800a8be:	f003 021f 	and.w	r2, r3, #31
 800a8c2:	f04f 0a01 	mov.w	sl, #1
 800a8c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a8ca:	fa0a f202 	lsl.w	r2, sl, r2
 800a8ce:	420a      	tst	r2, r1
 800a8d0:	d003      	beq.n	800a8da <__gethex+0x1c4>
 800a8d2:	4553      	cmp	r3, sl
 800a8d4:	dc46      	bgt.n	800a964 <__gethex+0x24e>
 800a8d6:	f04f 0a02 	mov.w	sl, #2
 800a8da:	4639      	mov	r1, r7
 800a8dc:	4628      	mov	r0, r5
 800a8de:	f7ff fecb 	bl	800a678 <rshift>
 800a8e2:	443c      	add	r4, r7
 800a8e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a8e8:	42a3      	cmp	r3, r4
 800a8ea:	da52      	bge.n	800a992 <__gethex+0x27c>
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	9802      	ldr	r0, [sp, #8]
 800a8f0:	f000 fa44 	bl	800ad7c <_Bfree>
 800a8f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	6013      	str	r3, [r2, #0]
 800a8fa:	27a3      	movs	r7, #163	; 0xa3
 800a8fc:	e793      	b.n	800a826 <__gethex+0x110>
 800a8fe:	3101      	adds	r1, #1
 800a900:	105b      	asrs	r3, r3, #1
 800a902:	e7b0      	b.n	800a866 <__gethex+0x150>
 800a904:	1e73      	subs	r3, r6, #1
 800a906:	9305      	str	r3, [sp, #20]
 800a908:	9a07      	ldr	r2, [sp, #28]
 800a90a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a90e:	4293      	cmp	r3, r2
 800a910:	d018      	beq.n	800a944 <__gethex+0x22e>
 800a912:	f1bb 0f20 	cmp.w	fp, #32
 800a916:	d107      	bne.n	800a928 <__gethex+0x212>
 800a918:	9b04      	ldr	r3, [sp, #16]
 800a91a:	f8c3 a000 	str.w	sl, [r3]
 800a91e:	3304      	adds	r3, #4
 800a920:	f04f 0a00 	mov.w	sl, #0
 800a924:	9304      	str	r3, [sp, #16]
 800a926:	46d3      	mov	fp, sl
 800a928:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a92c:	f7ff fede 	bl	800a6ec <__hexdig_fun>
 800a930:	f000 000f 	and.w	r0, r0, #15
 800a934:	fa00 f00b 	lsl.w	r0, r0, fp
 800a938:	ea4a 0a00 	orr.w	sl, sl, r0
 800a93c:	f10b 0b04 	add.w	fp, fp, #4
 800a940:	9b05      	ldr	r3, [sp, #20]
 800a942:	e00d      	b.n	800a960 <__gethex+0x24a>
 800a944:	9b05      	ldr	r3, [sp, #20]
 800a946:	9a08      	ldr	r2, [sp, #32]
 800a948:	4413      	add	r3, r2
 800a94a:	42bb      	cmp	r3, r7
 800a94c:	d3e1      	bcc.n	800a912 <__gethex+0x1fc>
 800a94e:	4618      	mov	r0, r3
 800a950:	9a01      	ldr	r2, [sp, #4]
 800a952:	9903      	ldr	r1, [sp, #12]
 800a954:	9309      	str	r3, [sp, #36]	; 0x24
 800a956:	f7fe f987 	bl	8008c68 <strncmp>
 800a95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a95c:	2800      	cmp	r0, #0
 800a95e:	d1d8      	bne.n	800a912 <__gethex+0x1fc>
 800a960:	461e      	mov	r6, r3
 800a962:	e791      	b.n	800a888 <__gethex+0x172>
 800a964:	1eb9      	subs	r1, r7, #2
 800a966:	4628      	mov	r0, r5
 800a968:	f000 fdb2 	bl	800b4d0 <__any_on>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	d0b2      	beq.n	800a8d6 <__gethex+0x1c0>
 800a970:	f04f 0a03 	mov.w	sl, #3
 800a974:	e7b1      	b.n	800a8da <__gethex+0x1c4>
 800a976:	da09      	bge.n	800a98c <__gethex+0x276>
 800a978:	1bf7      	subs	r7, r6, r7
 800a97a:	4629      	mov	r1, r5
 800a97c:	463a      	mov	r2, r7
 800a97e:	9802      	ldr	r0, [sp, #8]
 800a980:	f000 fbc8 	bl	800b114 <__lshift>
 800a984:	1be4      	subs	r4, r4, r7
 800a986:	4605      	mov	r5, r0
 800a988:	f100 0914 	add.w	r9, r0, #20
 800a98c:	f04f 0a00 	mov.w	sl, #0
 800a990:	e7a8      	b.n	800a8e4 <__gethex+0x1ce>
 800a992:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a996:	42a0      	cmp	r0, r4
 800a998:	dd6a      	ble.n	800aa70 <__gethex+0x35a>
 800a99a:	1b04      	subs	r4, r0, r4
 800a99c:	42a6      	cmp	r6, r4
 800a99e:	dc2e      	bgt.n	800a9fe <__gethex+0x2e8>
 800a9a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d022      	beq.n	800a9ee <__gethex+0x2d8>
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d024      	beq.n	800a9f6 <__gethex+0x2e0>
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d115      	bne.n	800a9dc <__gethex+0x2c6>
 800a9b0:	42a6      	cmp	r6, r4
 800a9b2:	d113      	bne.n	800a9dc <__gethex+0x2c6>
 800a9b4:	2e01      	cmp	r6, #1
 800a9b6:	dc0b      	bgt.n	800a9d0 <__gethex+0x2ba>
 800a9b8:	9a06      	ldr	r2, [sp, #24]
 800a9ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9be:	6013      	str	r3, [r2, #0]
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	612b      	str	r3, [r5, #16]
 800a9c4:	f8c9 3000 	str.w	r3, [r9]
 800a9c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9ca:	2762      	movs	r7, #98	; 0x62
 800a9cc:	601d      	str	r5, [r3, #0]
 800a9ce:	e72a      	b.n	800a826 <__gethex+0x110>
 800a9d0:	1e71      	subs	r1, r6, #1
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f000 fd7c 	bl	800b4d0 <__any_on>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d1ed      	bne.n	800a9b8 <__gethex+0x2a2>
 800a9dc:	4629      	mov	r1, r5
 800a9de:	9802      	ldr	r0, [sp, #8]
 800a9e0:	f000 f9cc 	bl	800ad7c <_Bfree>
 800a9e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	6013      	str	r3, [r2, #0]
 800a9ea:	2750      	movs	r7, #80	; 0x50
 800a9ec:	e71b      	b.n	800a826 <__gethex+0x110>
 800a9ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d0e1      	beq.n	800a9b8 <__gethex+0x2a2>
 800a9f4:	e7f2      	b.n	800a9dc <__gethex+0x2c6>
 800a9f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1dd      	bne.n	800a9b8 <__gethex+0x2a2>
 800a9fc:	e7ee      	b.n	800a9dc <__gethex+0x2c6>
 800a9fe:	1e67      	subs	r7, r4, #1
 800aa00:	f1ba 0f00 	cmp.w	sl, #0
 800aa04:	d131      	bne.n	800aa6a <__gethex+0x354>
 800aa06:	b127      	cbz	r7, 800aa12 <__gethex+0x2fc>
 800aa08:	4639      	mov	r1, r7
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f000 fd60 	bl	800b4d0 <__any_on>
 800aa10:	4682      	mov	sl, r0
 800aa12:	117a      	asrs	r2, r7, #5
 800aa14:	2301      	movs	r3, #1
 800aa16:	f007 071f 	and.w	r7, r7, #31
 800aa1a:	fa03 f707 	lsl.w	r7, r3, r7
 800aa1e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800aa22:	4621      	mov	r1, r4
 800aa24:	421f      	tst	r7, r3
 800aa26:	4628      	mov	r0, r5
 800aa28:	bf18      	it	ne
 800aa2a:	f04a 0a02 	orrne.w	sl, sl, #2
 800aa2e:	1b36      	subs	r6, r6, r4
 800aa30:	f7ff fe22 	bl	800a678 <rshift>
 800aa34:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800aa38:	2702      	movs	r7, #2
 800aa3a:	f1ba 0f00 	cmp.w	sl, #0
 800aa3e:	d048      	beq.n	800aad2 <__gethex+0x3bc>
 800aa40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d015      	beq.n	800aa74 <__gethex+0x35e>
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d017      	beq.n	800aa7c <__gethex+0x366>
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d109      	bne.n	800aa64 <__gethex+0x34e>
 800aa50:	f01a 0f02 	tst.w	sl, #2
 800aa54:	d006      	beq.n	800aa64 <__gethex+0x34e>
 800aa56:	f8d9 3000 	ldr.w	r3, [r9]
 800aa5a:	ea4a 0a03 	orr.w	sl, sl, r3
 800aa5e:	f01a 0f01 	tst.w	sl, #1
 800aa62:	d10e      	bne.n	800aa82 <__gethex+0x36c>
 800aa64:	f047 0710 	orr.w	r7, r7, #16
 800aa68:	e033      	b.n	800aad2 <__gethex+0x3bc>
 800aa6a:	f04f 0a01 	mov.w	sl, #1
 800aa6e:	e7d0      	b.n	800aa12 <__gethex+0x2fc>
 800aa70:	2701      	movs	r7, #1
 800aa72:	e7e2      	b.n	800aa3a <__gethex+0x324>
 800aa74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa76:	f1c3 0301 	rsb	r3, r3, #1
 800aa7a:	9315      	str	r3, [sp, #84]	; 0x54
 800aa7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0f0      	beq.n	800aa64 <__gethex+0x34e>
 800aa82:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800aa86:	f105 0314 	add.w	r3, r5, #20
 800aa8a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800aa8e:	eb03 010a 	add.w	r1, r3, sl
 800aa92:	f04f 0c00 	mov.w	ip, #0
 800aa96:	4618      	mov	r0, r3
 800aa98:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa9c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800aaa0:	d01c      	beq.n	800aadc <__gethex+0x3c6>
 800aaa2:	3201      	adds	r2, #1
 800aaa4:	6002      	str	r2, [r0, #0]
 800aaa6:	2f02      	cmp	r7, #2
 800aaa8:	f105 0314 	add.w	r3, r5, #20
 800aaac:	d138      	bne.n	800ab20 <__gethex+0x40a>
 800aaae:	f8d8 2000 	ldr.w	r2, [r8]
 800aab2:	3a01      	subs	r2, #1
 800aab4:	42b2      	cmp	r2, r6
 800aab6:	d10a      	bne.n	800aace <__gethex+0x3b8>
 800aab8:	1171      	asrs	r1, r6, #5
 800aaba:	2201      	movs	r2, #1
 800aabc:	f006 061f 	and.w	r6, r6, #31
 800aac0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aac4:	fa02 f606 	lsl.w	r6, r2, r6
 800aac8:	421e      	tst	r6, r3
 800aaca:	bf18      	it	ne
 800aacc:	4617      	movne	r7, r2
 800aace:	f047 0720 	orr.w	r7, r7, #32
 800aad2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aad4:	601d      	str	r5, [r3, #0]
 800aad6:	9b06      	ldr	r3, [sp, #24]
 800aad8:	601c      	str	r4, [r3, #0]
 800aada:	e6a4      	b.n	800a826 <__gethex+0x110>
 800aadc:	4299      	cmp	r1, r3
 800aade:	f843 cc04 	str.w	ip, [r3, #-4]
 800aae2:	d8d8      	bhi.n	800aa96 <__gethex+0x380>
 800aae4:	68ab      	ldr	r3, [r5, #8]
 800aae6:	4599      	cmp	r9, r3
 800aae8:	db12      	blt.n	800ab10 <__gethex+0x3fa>
 800aaea:	6869      	ldr	r1, [r5, #4]
 800aaec:	9802      	ldr	r0, [sp, #8]
 800aaee:	3101      	adds	r1, #1
 800aaf0:	f000 f910 	bl	800ad14 <_Balloc>
 800aaf4:	692a      	ldr	r2, [r5, #16]
 800aaf6:	3202      	adds	r2, #2
 800aaf8:	f105 010c 	add.w	r1, r5, #12
 800aafc:	4683      	mov	fp, r0
 800aafe:	0092      	lsls	r2, r2, #2
 800ab00:	300c      	adds	r0, #12
 800ab02:	f7fd f969 	bl	8007dd8 <memcpy>
 800ab06:	4629      	mov	r1, r5
 800ab08:	9802      	ldr	r0, [sp, #8]
 800ab0a:	f000 f937 	bl	800ad7c <_Bfree>
 800ab0e:	465d      	mov	r5, fp
 800ab10:	692b      	ldr	r3, [r5, #16]
 800ab12:	1c5a      	adds	r2, r3, #1
 800ab14:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800ab18:	612a      	str	r2, [r5, #16]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	615a      	str	r2, [r3, #20]
 800ab1e:	e7c2      	b.n	800aaa6 <__gethex+0x390>
 800ab20:	692a      	ldr	r2, [r5, #16]
 800ab22:	454a      	cmp	r2, r9
 800ab24:	dd0b      	ble.n	800ab3e <__gethex+0x428>
 800ab26:	2101      	movs	r1, #1
 800ab28:	4628      	mov	r0, r5
 800ab2a:	f7ff fda5 	bl	800a678 <rshift>
 800ab2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab32:	3401      	adds	r4, #1
 800ab34:	42a3      	cmp	r3, r4
 800ab36:	f6ff aed9 	blt.w	800a8ec <__gethex+0x1d6>
 800ab3a:	2701      	movs	r7, #1
 800ab3c:	e7c7      	b.n	800aace <__gethex+0x3b8>
 800ab3e:	f016 061f 	ands.w	r6, r6, #31
 800ab42:	d0fa      	beq.n	800ab3a <__gethex+0x424>
 800ab44:	449a      	add	sl, r3
 800ab46:	f1c6 0620 	rsb	r6, r6, #32
 800ab4a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ab4e:	f000 f9a5 	bl	800ae9c <__hi0bits>
 800ab52:	42b0      	cmp	r0, r6
 800ab54:	dbe7      	blt.n	800ab26 <__gethex+0x410>
 800ab56:	e7f0      	b.n	800ab3a <__gethex+0x424>

0800ab58 <L_shift>:
 800ab58:	f1c2 0208 	rsb	r2, r2, #8
 800ab5c:	0092      	lsls	r2, r2, #2
 800ab5e:	b570      	push	{r4, r5, r6, lr}
 800ab60:	f1c2 0620 	rsb	r6, r2, #32
 800ab64:	6843      	ldr	r3, [r0, #4]
 800ab66:	6804      	ldr	r4, [r0, #0]
 800ab68:	fa03 f506 	lsl.w	r5, r3, r6
 800ab6c:	432c      	orrs	r4, r5
 800ab6e:	40d3      	lsrs	r3, r2
 800ab70:	6004      	str	r4, [r0, #0]
 800ab72:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab76:	4288      	cmp	r0, r1
 800ab78:	d3f4      	bcc.n	800ab64 <L_shift+0xc>
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}

0800ab7c <__match>:
 800ab7c:	b530      	push	{r4, r5, lr}
 800ab7e:	6803      	ldr	r3, [r0, #0]
 800ab80:	3301      	adds	r3, #1
 800ab82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab86:	b914      	cbnz	r4, 800ab8e <__match+0x12>
 800ab88:	6003      	str	r3, [r0, #0]
 800ab8a:	2001      	movs	r0, #1
 800ab8c:	bd30      	pop	{r4, r5, pc}
 800ab8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab92:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ab96:	2d19      	cmp	r5, #25
 800ab98:	bf98      	it	ls
 800ab9a:	3220      	addls	r2, #32
 800ab9c:	42a2      	cmp	r2, r4
 800ab9e:	d0f0      	beq.n	800ab82 <__match+0x6>
 800aba0:	2000      	movs	r0, #0
 800aba2:	e7f3      	b.n	800ab8c <__match+0x10>

0800aba4 <__hexnan>:
 800aba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba8:	680b      	ldr	r3, [r1, #0]
 800abaa:	6801      	ldr	r1, [r0, #0]
 800abac:	115f      	asrs	r7, r3, #5
 800abae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800abb2:	f013 031f 	ands.w	r3, r3, #31
 800abb6:	b087      	sub	sp, #28
 800abb8:	bf18      	it	ne
 800abba:	3704      	addne	r7, #4
 800abbc:	2500      	movs	r5, #0
 800abbe:	1f3e      	subs	r6, r7, #4
 800abc0:	4682      	mov	sl, r0
 800abc2:	4690      	mov	r8, r2
 800abc4:	9301      	str	r3, [sp, #4]
 800abc6:	f847 5c04 	str.w	r5, [r7, #-4]
 800abca:	46b1      	mov	r9, r6
 800abcc:	4634      	mov	r4, r6
 800abce:	9502      	str	r5, [sp, #8]
 800abd0:	46ab      	mov	fp, r5
 800abd2:	784a      	ldrb	r2, [r1, #1]
 800abd4:	1c4b      	adds	r3, r1, #1
 800abd6:	9303      	str	r3, [sp, #12]
 800abd8:	b342      	cbz	r2, 800ac2c <__hexnan+0x88>
 800abda:	4610      	mov	r0, r2
 800abdc:	9105      	str	r1, [sp, #20]
 800abde:	9204      	str	r2, [sp, #16]
 800abe0:	f7ff fd84 	bl	800a6ec <__hexdig_fun>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d143      	bne.n	800ac70 <__hexnan+0xcc>
 800abe8:	9a04      	ldr	r2, [sp, #16]
 800abea:	9905      	ldr	r1, [sp, #20]
 800abec:	2a20      	cmp	r2, #32
 800abee:	d818      	bhi.n	800ac22 <__hexnan+0x7e>
 800abf0:	9b02      	ldr	r3, [sp, #8]
 800abf2:	459b      	cmp	fp, r3
 800abf4:	dd13      	ble.n	800ac1e <__hexnan+0x7a>
 800abf6:	454c      	cmp	r4, r9
 800abf8:	d206      	bcs.n	800ac08 <__hexnan+0x64>
 800abfa:	2d07      	cmp	r5, #7
 800abfc:	dc04      	bgt.n	800ac08 <__hexnan+0x64>
 800abfe:	462a      	mov	r2, r5
 800ac00:	4649      	mov	r1, r9
 800ac02:	4620      	mov	r0, r4
 800ac04:	f7ff ffa8 	bl	800ab58 <L_shift>
 800ac08:	4544      	cmp	r4, r8
 800ac0a:	d944      	bls.n	800ac96 <__hexnan+0xf2>
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	f1a4 0904 	sub.w	r9, r4, #4
 800ac12:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac16:	f8cd b008 	str.w	fp, [sp, #8]
 800ac1a:	464c      	mov	r4, r9
 800ac1c:	461d      	mov	r5, r3
 800ac1e:	9903      	ldr	r1, [sp, #12]
 800ac20:	e7d7      	b.n	800abd2 <__hexnan+0x2e>
 800ac22:	2a29      	cmp	r2, #41	; 0x29
 800ac24:	d14a      	bne.n	800acbc <__hexnan+0x118>
 800ac26:	3102      	adds	r1, #2
 800ac28:	f8ca 1000 	str.w	r1, [sl]
 800ac2c:	f1bb 0f00 	cmp.w	fp, #0
 800ac30:	d044      	beq.n	800acbc <__hexnan+0x118>
 800ac32:	454c      	cmp	r4, r9
 800ac34:	d206      	bcs.n	800ac44 <__hexnan+0xa0>
 800ac36:	2d07      	cmp	r5, #7
 800ac38:	dc04      	bgt.n	800ac44 <__hexnan+0xa0>
 800ac3a:	462a      	mov	r2, r5
 800ac3c:	4649      	mov	r1, r9
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f7ff ff8a 	bl	800ab58 <L_shift>
 800ac44:	4544      	cmp	r4, r8
 800ac46:	d928      	bls.n	800ac9a <__hexnan+0xf6>
 800ac48:	4643      	mov	r3, r8
 800ac4a:	f854 2b04 	ldr.w	r2, [r4], #4
 800ac4e:	f843 2b04 	str.w	r2, [r3], #4
 800ac52:	42a6      	cmp	r6, r4
 800ac54:	d2f9      	bcs.n	800ac4a <__hexnan+0xa6>
 800ac56:	2200      	movs	r2, #0
 800ac58:	f843 2b04 	str.w	r2, [r3], #4
 800ac5c:	429e      	cmp	r6, r3
 800ac5e:	d2fb      	bcs.n	800ac58 <__hexnan+0xb4>
 800ac60:	6833      	ldr	r3, [r6, #0]
 800ac62:	b91b      	cbnz	r3, 800ac6c <__hexnan+0xc8>
 800ac64:	4546      	cmp	r6, r8
 800ac66:	d127      	bne.n	800acb8 <__hexnan+0x114>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	6033      	str	r3, [r6, #0]
 800ac6c:	2005      	movs	r0, #5
 800ac6e:	e026      	b.n	800acbe <__hexnan+0x11a>
 800ac70:	3501      	adds	r5, #1
 800ac72:	2d08      	cmp	r5, #8
 800ac74:	f10b 0b01 	add.w	fp, fp, #1
 800ac78:	dd06      	ble.n	800ac88 <__hexnan+0xe4>
 800ac7a:	4544      	cmp	r4, r8
 800ac7c:	d9cf      	bls.n	800ac1e <__hexnan+0x7a>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac84:	2501      	movs	r5, #1
 800ac86:	3c04      	subs	r4, #4
 800ac88:	6822      	ldr	r2, [r4, #0]
 800ac8a:	f000 000f 	and.w	r0, r0, #15
 800ac8e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ac92:	6020      	str	r0, [r4, #0]
 800ac94:	e7c3      	b.n	800ac1e <__hexnan+0x7a>
 800ac96:	2508      	movs	r5, #8
 800ac98:	e7c1      	b.n	800ac1e <__hexnan+0x7a>
 800ac9a:	9b01      	ldr	r3, [sp, #4]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d0df      	beq.n	800ac60 <__hexnan+0xbc>
 800aca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aca4:	f1c3 0320 	rsb	r3, r3, #32
 800aca8:	fa22 f303 	lsr.w	r3, r2, r3
 800acac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800acb0:	401a      	ands	r2, r3
 800acb2:	f847 2c04 	str.w	r2, [r7, #-4]
 800acb6:	e7d3      	b.n	800ac60 <__hexnan+0xbc>
 800acb8:	3e04      	subs	r6, #4
 800acba:	e7d1      	b.n	800ac60 <__hexnan+0xbc>
 800acbc:	2004      	movs	r0, #4
 800acbe:	b007      	add	sp, #28
 800acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acc4 <__locale_ctype_ptr_l>:
 800acc4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800acc8:	4770      	bx	lr

0800acca <__localeconv_l>:
 800acca:	30f0      	adds	r0, #240	; 0xf0
 800accc:	4770      	bx	lr
	...

0800acd0 <_localeconv_r>:
 800acd0:	4b04      	ldr	r3, [pc, #16]	; (800ace4 <_localeconv_r+0x14>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	6a18      	ldr	r0, [r3, #32]
 800acd6:	4b04      	ldr	r3, [pc, #16]	; (800ace8 <_localeconv_r+0x18>)
 800acd8:	2800      	cmp	r0, #0
 800acda:	bf08      	it	eq
 800acdc:	4618      	moveq	r0, r3
 800acde:	30f0      	adds	r0, #240	; 0xf0
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	20001254 	.word	0x20001254
 800ace8:	200012b8 	.word	0x200012b8

0800acec <__ascii_mbtowc>:
 800acec:	b082      	sub	sp, #8
 800acee:	b901      	cbnz	r1, 800acf2 <__ascii_mbtowc+0x6>
 800acf0:	a901      	add	r1, sp, #4
 800acf2:	b142      	cbz	r2, 800ad06 <__ascii_mbtowc+0x1a>
 800acf4:	b14b      	cbz	r3, 800ad0a <__ascii_mbtowc+0x1e>
 800acf6:	7813      	ldrb	r3, [r2, #0]
 800acf8:	600b      	str	r3, [r1, #0]
 800acfa:	7812      	ldrb	r2, [r2, #0]
 800acfc:	1c10      	adds	r0, r2, #0
 800acfe:	bf18      	it	ne
 800ad00:	2001      	movne	r0, #1
 800ad02:	b002      	add	sp, #8
 800ad04:	4770      	bx	lr
 800ad06:	4610      	mov	r0, r2
 800ad08:	e7fb      	b.n	800ad02 <__ascii_mbtowc+0x16>
 800ad0a:	f06f 0001 	mvn.w	r0, #1
 800ad0e:	e7f8      	b.n	800ad02 <__ascii_mbtowc+0x16>

0800ad10 <__malloc_lock>:
 800ad10:	4770      	bx	lr

0800ad12 <__malloc_unlock>:
 800ad12:	4770      	bx	lr

0800ad14 <_Balloc>:
 800ad14:	b570      	push	{r4, r5, r6, lr}
 800ad16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad18:	4604      	mov	r4, r0
 800ad1a:	460e      	mov	r6, r1
 800ad1c:	b93d      	cbnz	r5, 800ad2e <_Balloc+0x1a>
 800ad1e:	2010      	movs	r0, #16
 800ad20:	f7fd f84a 	bl	8007db8 <malloc>
 800ad24:	6260      	str	r0, [r4, #36]	; 0x24
 800ad26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad2a:	6005      	str	r5, [r0, #0]
 800ad2c:	60c5      	str	r5, [r0, #12]
 800ad2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ad30:	68eb      	ldr	r3, [r5, #12]
 800ad32:	b183      	cbz	r3, 800ad56 <_Balloc+0x42>
 800ad34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ad3c:	b9b8      	cbnz	r0, 800ad6e <_Balloc+0x5a>
 800ad3e:	2101      	movs	r1, #1
 800ad40:	fa01 f506 	lsl.w	r5, r1, r6
 800ad44:	1d6a      	adds	r2, r5, #5
 800ad46:	0092      	lsls	r2, r2, #2
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f000 fbe2 	bl	800b512 <_calloc_r>
 800ad4e:	b160      	cbz	r0, 800ad6a <_Balloc+0x56>
 800ad50:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ad54:	e00e      	b.n	800ad74 <_Balloc+0x60>
 800ad56:	2221      	movs	r2, #33	; 0x21
 800ad58:	2104      	movs	r1, #4
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 fbd9 	bl	800b512 <_calloc_r>
 800ad60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad62:	60e8      	str	r0, [r5, #12]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e4      	bne.n	800ad34 <_Balloc+0x20>
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	bd70      	pop	{r4, r5, r6, pc}
 800ad6e:	6802      	ldr	r2, [r0, #0]
 800ad70:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ad74:	2300      	movs	r3, #0
 800ad76:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad7a:	e7f7      	b.n	800ad6c <_Balloc+0x58>

0800ad7c <_Bfree>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ad80:	4606      	mov	r6, r0
 800ad82:	460d      	mov	r5, r1
 800ad84:	b93c      	cbnz	r4, 800ad96 <_Bfree+0x1a>
 800ad86:	2010      	movs	r0, #16
 800ad88:	f7fd f816 	bl	8007db8 <malloc>
 800ad8c:	6270      	str	r0, [r6, #36]	; 0x24
 800ad8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad92:	6004      	str	r4, [r0, #0]
 800ad94:	60c4      	str	r4, [r0, #12]
 800ad96:	b13d      	cbz	r5, 800ada8 <_Bfree+0x2c>
 800ad98:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ad9a:	686a      	ldr	r2, [r5, #4]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ada2:	6029      	str	r1, [r5, #0]
 800ada4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ada8:	bd70      	pop	{r4, r5, r6, pc}

0800adaa <__multadd>:
 800adaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adae:	690d      	ldr	r5, [r1, #16]
 800adb0:	461f      	mov	r7, r3
 800adb2:	4606      	mov	r6, r0
 800adb4:	460c      	mov	r4, r1
 800adb6:	f101 0c14 	add.w	ip, r1, #20
 800adba:	2300      	movs	r3, #0
 800adbc:	f8dc 0000 	ldr.w	r0, [ip]
 800adc0:	b281      	uxth	r1, r0
 800adc2:	fb02 7101 	mla	r1, r2, r1, r7
 800adc6:	0c0f      	lsrs	r7, r1, #16
 800adc8:	0c00      	lsrs	r0, r0, #16
 800adca:	fb02 7000 	mla	r0, r2, r0, r7
 800adce:	b289      	uxth	r1, r1
 800add0:	3301      	adds	r3, #1
 800add2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800add6:	429d      	cmp	r5, r3
 800add8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800addc:	f84c 1b04 	str.w	r1, [ip], #4
 800ade0:	dcec      	bgt.n	800adbc <__multadd+0x12>
 800ade2:	b1d7      	cbz	r7, 800ae1a <__multadd+0x70>
 800ade4:	68a3      	ldr	r3, [r4, #8]
 800ade6:	42ab      	cmp	r3, r5
 800ade8:	dc12      	bgt.n	800ae10 <__multadd+0x66>
 800adea:	6861      	ldr	r1, [r4, #4]
 800adec:	4630      	mov	r0, r6
 800adee:	3101      	adds	r1, #1
 800adf0:	f7ff ff90 	bl	800ad14 <_Balloc>
 800adf4:	6922      	ldr	r2, [r4, #16]
 800adf6:	3202      	adds	r2, #2
 800adf8:	f104 010c 	add.w	r1, r4, #12
 800adfc:	4680      	mov	r8, r0
 800adfe:	0092      	lsls	r2, r2, #2
 800ae00:	300c      	adds	r0, #12
 800ae02:	f7fc ffe9 	bl	8007dd8 <memcpy>
 800ae06:	4621      	mov	r1, r4
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f7ff ffb7 	bl	800ad7c <_Bfree>
 800ae0e:	4644      	mov	r4, r8
 800ae10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae14:	3501      	adds	r5, #1
 800ae16:	615f      	str	r7, [r3, #20]
 800ae18:	6125      	str	r5, [r4, #16]
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ae20 <__s2b>:
 800ae20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae24:	460c      	mov	r4, r1
 800ae26:	4615      	mov	r5, r2
 800ae28:	461f      	mov	r7, r3
 800ae2a:	2209      	movs	r2, #9
 800ae2c:	3308      	adds	r3, #8
 800ae2e:	4606      	mov	r6, r0
 800ae30:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae34:	2100      	movs	r1, #0
 800ae36:	2201      	movs	r2, #1
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	db20      	blt.n	800ae7e <__s2b+0x5e>
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f7ff ff69 	bl	800ad14 <_Balloc>
 800ae42:	9b08      	ldr	r3, [sp, #32]
 800ae44:	6143      	str	r3, [r0, #20]
 800ae46:	2d09      	cmp	r5, #9
 800ae48:	f04f 0301 	mov.w	r3, #1
 800ae4c:	6103      	str	r3, [r0, #16]
 800ae4e:	dd19      	ble.n	800ae84 <__s2b+0x64>
 800ae50:	f104 0809 	add.w	r8, r4, #9
 800ae54:	46c1      	mov	r9, r8
 800ae56:	442c      	add	r4, r5
 800ae58:	f819 3b01 	ldrb.w	r3, [r9], #1
 800ae5c:	4601      	mov	r1, r0
 800ae5e:	3b30      	subs	r3, #48	; 0x30
 800ae60:	220a      	movs	r2, #10
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7ff ffa1 	bl	800adaa <__multadd>
 800ae68:	45a1      	cmp	r9, r4
 800ae6a:	d1f5      	bne.n	800ae58 <__s2b+0x38>
 800ae6c:	eb08 0405 	add.w	r4, r8, r5
 800ae70:	3c08      	subs	r4, #8
 800ae72:	1b2d      	subs	r5, r5, r4
 800ae74:	1963      	adds	r3, r4, r5
 800ae76:	42bb      	cmp	r3, r7
 800ae78:	db07      	blt.n	800ae8a <__s2b+0x6a>
 800ae7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae7e:	0052      	lsls	r2, r2, #1
 800ae80:	3101      	adds	r1, #1
 800ae82:	e7d9      	b.n	800ae38 <__s2b+0x18>
 800ae84:	340a      	adds	r4, #10
 800ae86:	2509      	movs	r5, #9
 800ae88:	e7f3      	b.n	800ae72 <__s2b+0x52>
 800ae8a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae8e:	4601      	mov	r1, r0
 800ae90:	3b30      	subs	r3, #48	; 0x30
 800ae92:	220a      	movs	r2, #10
 800ae94:	4630      	mov	r0, r6
 800ae96:	f7ff ff88 	bl	800adaa <__multadd>
 800ae9a:	e7eb      	b.n	800ae74 <__s2b+0x54>

0800ae9c <__hi0bits>:
 800ae9c:	0c02      	lsrs	r2, r0, #16
 800ae9e:	0412      	lsls	r2, r2, #16
 800aea0:	4603      	mov	r3, r0
 800aea2:	b9b2      	cbnz	r2, 800aed2 <__hi0bits+0x36>
 800aea4:	0403      	lsls	r3, r0, #16
 800aea6:	2010      	movs	r0, #16
 800aea8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800aeac:	bf04      	itt	eq
 800aeae:	021b      	lsleq	r3, r3, #8
 800aeb0:	3008      	addeq	r0, #8
 800aeb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800aeb6:	bf04      	itt	eq
 800aeb8:	011b      	lsleq	r3, r3, #4
 800aeba:	3004      	addeq	r0, #4
 800aebc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800aec0:	bf04      	itt	eq
 800aec2:	009b      	lsleq	r3, r3, #2
 800aec4:	3002      	addeq	r0, #2
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	db06      	blt.n	800aed8 <__hi0bits+0x3c>
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	d503      	bpl.n	800aed6 <__hi0bits+0x3a>
 800aece:	3001      	adds	r0, #1
 800aed0:	4770      	bx	lr
 800aed2:	2000      	movs	r0, #0
 800aed4:	e7e8      	b.n	800aea8 <__hi0bits+0xc>
 800aed6:	2020      	movs	r0, #32
 800aed8:	4770      	bx	lr

0800aeda <__lo0bits>:
 800aeda:	6803      	ldr	r3, [r0, #0]
 800aedc:	f013 0207 	ands.w	r2, r3, #7
 800aee0:	4601      	mov	r1, r0
 800aee2:	d00b      	beq.n	800aefc <__lo0bits+0x22>
 800aee4:	07da      	lsls	r2, r3, #31
 800aee6:	d423      	bmi.n	800af30 <__lo0bits+0x56>
 800aee8:	0798      	lsls	r0, r3, #30
 800aeea:	bf49      	itett	mi
 800aeec:	085b      	lsrmi	r3, r3, #1
 800aeee:	089b      	lsrpl	r3, r3, #2
 800aef0:	2001      	movmi	r0, #1
 800aef2:	600b      	strmi	r3, [r1, #0]
 800aef4:	bf5c      	itt	pl
 800aef6:	600b      	strpl	r3, [r1, #0]
 800aef8:	2002      	movpl	r0, #2
 800aefa:	4770      	bx	lr
 800aefc:	b298      	uxth	r0, r3
 800aefe:	b9a8      	cbnz	r0, 800af2c <__lo0bits+0x52>
 800af00:	0c1b      	lsrs	r3, r3, #16
 800af02:	2010      	movs	r0, #16
 800af04:	f013 0fff 	tst.w	r3, #255	; 0xff
 800af08:	bf04      	itt	eq
 800af0a:	0a1b      	lsreq	r3, r3, #8
 800af0c:	3008      	addeq	r0, #8
 800af0e:	071a      	lsls	r2, r3, #28
 800af10:	bf04      	itt	eq
 800af12:	091b      	lsreq	r3, r3, #4
 800af14:	3004      	addeq	r0, #4
 800af16:	079a      	lsls	r2, r3, #30
 800af18:	bf04      	itt	eq
 800af1a:	089b      	lsreq	r3, r3, #2
 800af1c:	3002      	addeq	r0, #2
 800af1e:	07da      	lsls	r2, r3, #31
 800af20:	d402      	bmi.n	800af28 <__lo0bits+0x4e>
 800af22:	085b      	lsrs	r3, r3, #1
 800af24:	d006      	beq.n	800af34 <__lo0bits+0x5a>
 800af26:	3001      	adds	r0, #1
 800af28:	600b      	str	r3, [r1, #0]
 800af2a:	4770      	bx	lr
 800af2c:	4610      	mov	r0, r2
 800af2e:	e7e9      	b.n	800af04 <__lo0bits+0x2a>
 800af30:	2000      	movs	r0, #0
 800af32:	4770      	bx	lr
 800af34:	2020      	movs	r0, #32
 800af36:	4770      	bx	lr

0800af38 <__i2b>:
 800af38:	b510      	push	{r4, lr}
 800af3a:	460c      	mov	r4, r1
 800af3c:	2101      	movs	r1, #1
 800af3e:	f7ff fee9 	bl	800ad14 <_Balloc>
 800af42:	2201      	movs	r2, #1
 800af44:	6144      	str	r4, [r0, #20]
 800af46:	6102      	str	r2, [r0, #16]
 800af48:	bd10      	pop	{r4, pc}

0800af4a <__multiply>:
 800af4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4e:	4614      	mov	r4, r2
 800af50:	690a      	ldr	r2, [r1, #16]
 800af52:	6923      	ldr	r3, [r4, #16]
 800af54:	429a      	cmp	r2, r3
 800af56:	bfb8      	it	lt
 800af58:	460b      	movlt	r3, r1
 800af5a:	4688      	mov	r8, r1
 800af5c:	bfbc      	itt	lt
 800af5e:	46a0      	movlt	r8, r4
 800af60:	461c      	movlt	r4, r3
 800af62:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800af66:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800af6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800af72:	eb07 0609 	add.w	r6, r7, r9
 800af76:	42b3      	cmp	r3, r6
 800af78:	bfb8      	it	lt
 800af7a:	3101      	addlt	r1, #1
 800af7c:	f7ff feca 	bl	800ad14 <_Balloc>
 800af80:	f100 0514 	add.w	r5, r0, #20
 800af84:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800af88:	462b      	mov	r3, r5
 800af8a:	2200      	movs	r2, #0
 800af8c:	4573      	cmp	r3, lr
 800af8e:	d316      	bcc.n	800afbe <__multiply+0x74>
 800af90:	f104 0214 	add.w	r2, r4, #20
 800af94:	f108 0114 	add.w	r1, r8, #20
 800af98:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800af9c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	9b00      	ldr	r3, [sp, #0]
 800afa4:	9201      	str	r2, [sp, #4]
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d80c      	bhi.n	800afc4 <__multiply+0x7a>
 800afaa:	2e00      	cmp	r6, #0
 800afac:	dd03      	ble.n	800afb6 <__multiply+0x6c>
 800afae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d05d      	beq.n	800b072 <__multiply+0x128>
 800afb6:	6106      	str	r6, [r0, #16]
 800afb8:	b003      	add	sp, #12
 800afba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afbe:	f843 2b04 	str.w	r2, [r3], #4
 800afc2:	e7e3      	b.n	800af8c <__multiply+0x42>
 800afc4:	f8b2 b000 	ldrh.w	fp, [r2]
 800afc8:	f1bb 0f00 	cmp.w	fp, #0
 800afcc:	d023      	beq.n	800b016 <__multiply+0xcc>
 800afce:	4689      	mov	r9, r1
 800afd0:	46ac      	mov	ip, r5
 800afd2:	f04f 0800 	mov.w	r8, #0
 800afd6:	f859 4b04 	ldr.w	r4, [r9], #4
 800afda:	f8dc a000 	ldr.w	sl, [ip]
 800afde:	b2a3      	uxth	r3, r4
 800afe0:	fa1f fa8a 	uxth.w	sl, sl
 800afe4:	fb0b a303 	mla	r3, fp, r3, sl
 800afe8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800afec:	f8dc 4000 	ldr.w	r4, [ip]
 800aff0:	4443      	add	r3, r8
 800aff2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800aff6:	fb0b 840a 	mla	r4, fp, sl, r8
 800affa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800affe:	46e2      	mov	sl, ip
 800b000:	b29b      	uxth	r3, r3
 800b002:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b006:	454f      	cmp	r7, r9
 800b008:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b00c:	f84a 3b04 	str.w	r3, [sl], #4
 800b010:	d82b      	bhi.n	800b06a <__multiply+0x120>
 800b012:	f8cc 8004 	str.w	r8, [ip, #4]
 800b016:	9b01      	ldr	r3, [sp, #4]
 800b018:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b01c:	3204      	adds	r2, #4
 800b01e:	f1ba 0f00 	cmp.w	sl, #0
 800b022:	d020      	beq.n	800b066 <__multiply+0x11c>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	4689      	mov	r9, r1
 800b028:	46a8      	mov	r8, r5
 800b02a:	f04f 0b00 	mov.w	fp, #0
 800b02e:	f8b9 c000 	ldrh.w	ip, [r9]
 800b032:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b036:	fb0a 440c 	mla	r4, sl, ip, r4
 800b03a:	445c      	add	r4, fp
 800b03c:	46c4      	mov	ip, r8
 800b03e:	b29b      	uxth	r3, r3
 800b040:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b044:	f84c 3b04 	str.w	r3, [ip], #4
 800b048:	f859 3b04 	ldr.w	r3, [r9], #4
 800b04c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b050:	0c1b      	lsrs	r3, r3, #16
 800b052:	fb0a b303 	mla	r3, sl, r3, fp
 800b056:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b05a:	454f      	cmp	r7, r9
 800b05c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b060:	d805      	bhi.n	800b06e <__multiply+0x124>
 800b062:	f8c8 3004 	str.w	r3, [r8, #4]
 800b066:	3504      	adds	r5, #4
 800b068:	e79b      	b.n	800afa2 <__multiply+0x58>
 800b06a:	46d4      	mov	ip, sl
 800b06c:	e7b3      	b.n	800afd6 <__multiply+0x8c>
 800b06e:	46e0      	mov	r8, ip
 800b070:	e7dd      	b.n	800b02e <__multiply+0xe4>
 800b072:	3e01      	subs	r6, #1
 800b074:	e799      	b.n	800afaa <__multiply+0x60>
	...

0800b078 <__pow5mult>:
 800b078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b07c:	4615      	mov	r5, r2
 800b07e:	f012 0203 	ands.w	r2, r2, #3
 800b082:	4606      	mov	r6, r0
 800b084:	460f      	mov	r7, r1
 800b086:	d007      	beq.n	800b098 <__pow5mult+0x20>
 800b088:	3a01      	subs	r2, #1
 800b08a:	4c21      	ldr	r4, [pc, #132]	; (800b110 <__pow5mult+0x98>)
 800b08c:	2300      	movs	r3, #0
 800b08e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b092:	f7ff fe8a 	bl	800adaa <__multadd>
 800b096:	4607      	mov	r7, r0
 800b098:	10ad      	asrs	r5, r5, #2
 800b09a:	d035      	beq.n	800b108 <__pow5mult+0x90>
 800b09c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b09e:	b93c      	cbnz	r4, 800b0b0 <__pow5mult+0x38>
 800b0a0:	2010      	movs	r0, #16
 800b0a2:	f7fc fe89 	bl	8007db8 <malloc>
 800b0a6:	6270      	str	r0, [r6, #36]	; 0x24
 800b0a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0ac:	6004      	str	r4, [r0, #0]
 800b0ae:	60c4      	str	r4, [r0, #12]
 800b0b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b0b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0b8:	b94c      	cbnz	r4, 800b0ce <__pow5mult+0x56>
 800b0ba:	f240 2171 	movw	r1, #625	; 0x271
 800b0be:	4630      	mov	r0, r6
 800b0c0:	f7ff ff3a 	bl	800af38 <__i2b>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b0ca:	4604      	mov	r4, r0
 800b0cc:	6003      	str	r3, [r0, #0]
 800b0ce:	f04f 0800 	mov.w	r8, #0
 800b0d2:	07eb      	lsls	r3, r5, #31
 800b0d4:	d50a      	bpl.n	800b0ec <__pow5mult+0x74>
 800b0d6:	4639      	mov	r1, r7
 800b0d8:	4622      	mov	r2, r4
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7ff ff35 	bl	800af4a <__multiply>
 800b0e0:	4639      	mov	r1, r7
 800b0e2:	4681      	mov	r9, r0
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff fe49 	bl	800ad7c <_Bfree>
 800b0ea:	464f      	mov	r7, r9
 800b0ec:	106d      	asrs	r5, r5, #1
 800b0ee:	d00b      	beq.n	800b108 <__pow5mult+0x90>
 800b0f0:	6820      	ldr	r0, [r4, #0]
 800b0f2:	b938      	cbnz	r0, 800b104 <__pow5mult+0x8c>
 800b0f4:	4622      	mov	r2, r4
 800b0f6:	4621      	mov	r1, r4
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f7ff ff26 	bl	800af4a <__multiply>
 800b0fe:	6020      	str	r0, [r4, #0]
 800b100:	f8c0 8000 	str.w	r8, [r0]
 800b104:	4604      	mov	r4, r0
 800b106:	e7e4      	b.n	800b0d2 <__pow5mult+0x5a>
 800b108:	4638      	mov	r0, r7
 800b10a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b10e:	bf00      	nop
 800b110:	0800e730 	.word	0x0800e730

0800b114 <__lshift>:
 800b114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b118:	460c      	mov	r4, r1
 800b11a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b11e:	6923      	ldr	r3, [r4, #16]
 800b120:	6849      	ldr	r1, [r1, #4]
 800b122:	eb0a 0903 	add.w	r9, sl, r3
 800b126:	68a3      	ldr	r3, [r4, #8]
 800b128:	4607      	mov	r7, r0
 800b12a:	4616      	mov	r6, r2
 800b12c:	f109 0501 	add.w	r5, r9, #1
 800b130:	42ab      	cmp	r3, r5
 800b132:	db32      	blt.n	800b19a <__lshift+0x86>
 800b134:	4638      	mov	r0, r7
 800b136:	f7ff fded 	bl	800ad14 <_Balloc>
 800b13a:	2300      	movs	r3, #0
 800b13c:	4680      	mov	r8, r0
 800b13e:	f100 0114 	add.w	r1, r0, #20
 800b142:	461a      	mov	r2, r3
 800b144:	4553      	cmp	r3, sl
 800b146:	db2b      	blt.n	800b1a0 <__lshift+0x8c>
 800b148:	6920      	ldr	r0, [r4, #16]
 800b14a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b14e:	f104 0314 	add.w	r3, r4, #20
 800b152:	f016 021f 	ands.w	r2, r6, #31
 800b156:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b15a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b15e:	d025      	beq.n	800b1ac <__lshift+0x98>
 800b160:	f1c2 0e20 	rsb	lr, r2, #32
 800b164:	2000      	movs	r0, #0
 800b166:	681e      	ldr	r6, [r3, #0]
 800b168:	468a      	mov	sl, r1
 800b16a:	4096      	lsls	r6, r2
 800b16c:	4330      	orrs	r0, r6
 800b16e:	f84a 0b04 	str.w	r0, [sl], #4
 800b172:	f853 0b04 	ldr.w	r0, [r3], #4
 800b176:	459c      	cmp	ip, r3
 800b178:	fa20 f00e 	lsr.w	r0, r0, lr
 800b17c:	d814      	bhi.n	800b1a8 <__lshift+0x94>
 800b17e:	6048      	str	r0, [r1, #4]
 800b180:	b108      	cbz	r0, 800b186 <__lshift+0x72>
 800b182:	f109 0502 	add.w	r5, r9, #2
 800b186:	3d01      	subs	r5, #1
 800b188:	4638      	mov	r0, r7
 800b18a:	f8c8 5010 	str.w	r5, [r8, #16]
 800b18e:	4621      	mov	r1, r4
 800b190:	f7ff fdf4 	bl	800ad7c <_Bfree>
 800b194:	4640      	mov	r0, r8
 800b196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19a:	3101      	adds	r1, #1
 800b19c:	005b      	lsls	r3, r3, #1
 800b19e:	e7c7      	b.n	800b130 <__lshift+0x1c>
 800b1a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	e7cd      	b.n	800b144 <__lshift+0x30>
 800b1a8:	4651      	mov	r1, sl
 800b1aa:	e7dc      	b.n	800b166 <__lshift+0x52>
 800b1ac:	3904      	subs	r1, #4
 800b1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1b2:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1b6:	459c      	cmp	ip, r3
 800b1b8:	d8f9      	bhi.n	800b1ae <__lshift+0x9a>
 800b1ba:	e7e4      	b.n	800b186 <__lshift+0x72>

0800b1bc <__mcmp>:
 800b1bc:	6903      	ldr	r3, [r0, #16]
 800b1be:	690a      	ldr	r2, [r1, #16]
 800b1c0:	1a9b      	subs	r3, r3, r2
 800b1c2:	b530      	push	{r4, r5, lr}
 800b1c4:	d10c      	bne.n	800b1e0 <__mcmp+0x24>
 800b1c6:	0092      	lsls	r2, r2, #2
 800b1c8:	3014      	adds	r0, #20
 800b1ca:	3114      	adds	r1, #20
 800b1cc:	1884      	adds	r4, r0, r2
 800b1ce:	4411      	add	r1, r2
 800b1d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1d8:	4295      	cmp	r5, r2
 800b1da:	d003      	beq.n	800b1e4 <__mcmp+0x28>
 800b1dc:	d305      	bcc.n	800b1ea <__mcmp+0x2e>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	bd30      	pop	{r4, r5, pc}
 800b1e4:	42a0      	cmp	r0, r4
 800b1e6:	d3f3      	bcc.n	800b1d0 <__mcmp+0x14>
 800b1e8:	e7fa      	b.n	800b1e0 <__mcmp+0x24>
 800b1ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1ee:	e7f7      	b.n	800b1e0 <__mcmp+0x24>

0800b1f0 <__mdiff>:
 800b1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f4:	460d      	mov	r5, r1
 800b1f6:	4607      	mov	r7, r0
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	4614      	mov	r4, r2
 800b1fe:	f7ff ffdd 	bl	800b1bc <__mcmp>
 800b202:	1e06      	subs	r6, r0, #0
 800b204:	d108      	bne.n	800b218 <__mdiff+0x28>
 800b206:	4631      	mov	r1, r6
 800b208:	4638      	mov	r0, r7
 800b20a:	f7ff fd83 	bl	800ad14 <_Balloc>
 800b20e:	2301      	movs	r3, #1
 800b210:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b218:	bfa4      	itt	ge
 800b21a:	4623      	movge	r3, r4
 800b21c:	462c      	movge	r4, r5
 800b21e:	4638      	mov	r0, r7
 800b220:	6861      	ldr	r1, [r4, #4]
 800b222:	bfa6      	itte	ge
 800b224:	461d      	movge	r5, r3
 800b226:	2600      	movge	r6, #0
 800b228:	2601      	movlt	r6, #1
 800b22a:	f7ff fd73 	bl	800ad14 <_Balloc>
 800b22e:	692b      	ldr	r3, [r5, #16]
 800b230:	60c6      	str	r6, [r0, #12]
 800b232:	6926      	ldr	r6, [r4, #16]
 800b234:	f105 0914 	add.w	r9, r5, #20
 800b238:	f104 0214 	add.w	r2, r4, #20
 800b23c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b240:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b244:	f100 0514 	add.w	r5, r0, #20
 800b248:	f04f 0e00 	mov.w	lr, #0
 800b24c:	f852 ab04 	ldr.w	sl, [r2], #4
 800b250:	f859 4b04 	ldr.w	r4, [r9], #4
 800b254:	fa1e f18a 	uxtah	r1, lr, sl
 800b258:	b2a3      	uxth	r3, r4
 800b25a:	1ac9      	subs	r1, r1, r3
 800b25c:	0c23      	lsrs	r3, r4, #16
 800b25e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b262:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b266:	b289      	uxth	r1, r1
 800b268:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b26c:	45c8      	cmp	r8, r9
 800b26e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b272:	4694      	mov	ip, r2
 800b274:	f845 3b04 	str.w	r3, [r5], #4
 800b278:	d8e8      	bhi.n	800b24c <__mdiff+0x5c>
 800b27a:	45bc      	cmp	ip, r7
 800b27c:	d304      	bcc.n	800b288 <__mdiff+0x98>
 800b27e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b282:	b183      	cbz	r3, 800b2a6 <__mdiff+0xb6>
 800b284:	6106      	str	r6, [r0, #16]
 800b286:	e7c5      	b.n	800b214 <__mdiff+0x24>
 800b288:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b28c:	fa1e f381 	uxtah	r3, lr, r1
 800b290:	141a      	asrs	r2, r3, #16
 800b292:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b296:	b29b      	uxth	r3, r3
 800b298:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b29c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b2a0:	f845 3b04 	str.w	r3, [r5], #4
 800b2a4:	e7e9      	b.n	800b27a <__mdiff+0x8a>
 800b2a6:	3e01      	subs	r6, #1
 800b2a8:	e7e9      	b.n	800b27e <__mdiff+0x8e>
	...

0800b2ac <__ulp>:
 800b2ac:	4b12      	ldr	r3, [pc, #72]	; (800b2f8 <__ulp+0x4c>)
 800b2ae:	ee10 2a90 	vmov	r2, s1
 800b2b2:	401a      	ands	r2, r3
 800b2b4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	dd04      	ble.n	800b2c6 <__ulp+0x1a>
 800b2bc:	2000      	movs	r0, #0
 800b2be:	4619      	mov	r1, r3
 800b2c0:	ec41 0b10 	vmov	d0, r0, r1
 800b2c4:	4770      	bx	lr
 800b2c6:	425b      	negs	r3, r3
 800b2c8:	151b      	asrs	r3, r3, #20
 800b2ca:	2b13      	cmp	r3, #19
 800b2cc:	f04f 0000 	mov.w	r0, #0
 800b2d0:	f04f 0100 	mov.w	r1, #0
 800b2d4:	dc04      	bgt.n	800b2e0 <__ulp+0x34>
 800b2d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b2da:	fa42 f103 	asr.w	r1, r2, r3
 800b2de:	e7ef      	b.n	800b2c0 <__ulp+0x14>
 800b2e0:	3b14      	subs	r3, #20
 800b2e2:	2b1e      	cmp	r3, #30
 800b2e4:	f04f 0201 	mov.w	r2, #1
 800b2e8:	bfda      	itte	le
 800b2ea:	f1c3 031f 	rsble	r3, r3, #31
 800b2ee:	fa02 f303 	lslle.w	r3, r2, r3
 800b2f2:	4613      	movgt	r3, r2
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	e7e3      	b.n	800b2c0 <__ulp+0x14>
 800b2f8:	7ff00000 	.word	0x7ff00000

0800b2fc <__b2d>:
 800b2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fe:	6905      	ldr	r5, [r0, #16]
 800b300:	f100 0714 	add.w	r7, r0, #20
 800b304:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b308:	1f2e      	subs	r6, r5, #4
 800b30a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b30e:	4620      	mov	r0, r4
 800b310:	f7ff fdc4 	bl	800ae9c <__hi0bits>
 800b314:	f1c0 0320 	rsb	r3, r0, #32
 800b318:	280a      	cmp	r0, #10
 800b31a:	600b      	str	r3, [r1, #0]
 800b31c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b394 <__b2d+0x98>
 800b320:	dc14      	bgt.n	800b34c <__b2d+0x50>
 800b322:	f1c0 0e0b 	rsb	lr, r0, #11
 800b326:	fa24 f10e 	lsr.w	r1, r4, lr
 800b32a:	42b7      	cmp	r7, r6
 800b32c:	ea41 030c 	orr.w	r3, r1, ip
 800b330:	bf34      	ite	cc
 800b332:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b336:	2100      	movcs	r1, #0
 800b338:	3015      	adds	r0, #21
 800b33a:	fa04 f000 	lsl.w	r0, r4, r0
 800b33e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b342:	ea40 0201 	orr.w	r2, r0, r1
 800b346:	ec43 2b10 	vmov	d0, r2, r3
 800b34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b34c:	42b7      	cmp	r7, r6
 800b34e:	bf3a      	itte	cc
 800b350:	f1a5 0608 	subcc.w	r6, r5, #8
 800b354:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b358:	2100      	movcs	r1, #0
 800b35a:	380b      	subs	r0, #11
 800b35c:	d015      	beq.n	800b38a <__b2d+0x8e>
 800b35e:	4084      	lsls	r4, r0
 800b360:	f1c0 0520 	rsb	r5, r0, #32
 800b364:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b368:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b36c:	42be      	cmp	r6, r7
 800b36e:	fa21 fc05 	lsr.w	ip, r1, r5
 800b372:	ea44 030c 	orr.w	r3, r4, ip
 800b376:	bf8c      	ite	hi
 800b378:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b37c:	2400      	movls	r4, #0
 800b37e:	fa01 f000 	lsl.w	r0, r1, r0
 800b382:	40ec      	lsrs	r4, r5
 800b384:	ea40 0204 	orr.w	r2, r0, r4
 800b388:	e7dd      	b.n	800b346 <__b2d+0x4a>
 800b38a:	ea44 030c 	orr.w	r3, r4, ip
 800b38e:	460a      	mov	r2, r1
 800b390:	e7d9      	b.n	800b346 <__b2d+0x4a>
 800b392:	bf00      	nop
 800b394:	3ff00000 	.word	0x3ff00000

0800b398 <__d2b>:
 800b398:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b39c:	460e      	mov	r6, r1
 800b39e:	2101      	movs	r1, #1
 800b3a0:	ec59 8b10 	vmov	r8, r9, d0
 800b3a4:	4615      	mov	r5, r2
 800b3a6:	f7ff fcb5 	bl	800ad14 <_Balloc>
 800b3aa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b3ae:	4607      	mov	r7, r0
 800b3b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3b4:	bb34      	cbnz	r4, 800b404 <__d2b+0x6c>
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	f1b8 0300 	subs.w	r3, r8, #0
 800b3bc:	d027      	beq.n	800b40e <__d2b+0x76>
 800b3be:	a802      	add	r0, sp, #8
 800b3c0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b3c4:	f7ff fd89 	bl	800aeda <__lo0bits>
 800b3c8:	9900      	ldr	r1, [sp, #0]
 800b3ca:	b1f0      	cbz	r0, 800b40a <__d2b+0x72>
 800b3cc:	9a01      	ldr	r2, [sp, #4]
 800b3ce:	f1c0 0320 	rsb	r3, r0, #32
 800b3d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d6:	430b      	orrs	r3, r1
 800b3d8:	40c2      	lsrs	r2, r0
 800b3da:	617b      	str	r3, [r7, #20]
 800b3dc:	9201      	str	r2, [sp, #4]
 800b3de:	9b01      	ldr	r3, [sp, #4]
 800b3e0:	61bb      	str	r3, [r7, #24]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	bf14      	ite	ne
 800b3e6:	2102      	movne	r1, #2
 800b3e8:	2101      	moveq	r1, #1
 800b3ea:	6139      	str	r1, [r7, #16]
 800b3ec:	b1c4      	cbz	r4, 800b420 <__d2b+0x88>
 800b3ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b3f2:	4404      	add	r4, r0
 800b3f4:	6034      	str	r4, [r6, #0]
 800b3f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b3fa:	6028      	str	r0, [r5, #0]
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	b003      	add	sp, #12
 800b400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b408:	e7d5      	b.n	800b3b6 <__d2b+0x1e>
 800b40a:	6179      	str	r1, [r7, #20]
 800b40c:	e7e7      	b.n	800b3de <__d2b+0x46>
 800b40e:	a801      	add	r0, sp, #4
 800b410:	f7ff fd63 	bl	800aeda <__lo0bits>
 800b414:	9b01      	ldr	r3, [sp, #4]
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	2101      	movs	r1, #1
 800b41a:	6139      	str	r1, [r7, #16]
 800b41c:	3020      	adds	r0, #32
 800b41e:	e7e5      	b.n	800b3ec <__d2b+0x54>
 800b420:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b424:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b428:	6030      	str	r0, [r6, #0]
 800b42a:	6918      	ldr	r0, [r3, #16]
 800b42c:	f7ff fd36 	bl	800ae9c <__hi0bits>
 800b430:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b434:	e7e1      	b.n	800b3fa <__d2b+0x62>

0800b436 <__ratio>:
 800b436:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43a:	4688      	mov	r8, r1
 800b43c:	4669      	mov	r1, sp
 800b43e:	4681      	mov	r9, r0
 800b440:	f7ff ff5c 	bl	800b2fc <__b2d>
 800b444:	a901      	add	r1, sp, #4
 800b446:	4640      	mov	r0, r8
 800b448:	ec57 6b10 	vmov	r6, r7, d0
 800b44c:	f7ff ff56 	bl	800b2fc <__b2d>
 800b450:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b454:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b458:	eba3 0c02 	sub.w	ip, r3, r2
 800b45c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b460:	1a9b      	subs	r3, r3, r2
 800b462:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b466:	ec5b ab10 	vmov	sl, fp, d0
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	bfce      	itee	gt
 800b46e:	463a      	movgt	r2, r7
 800b470:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b474:	465a      	movle	r2, fp
 800b476:	4659      	mov	r1, fp
 800b478:	463d      	mov	r5, r7
 800b47a:	bfd4      	ite	le
 800b47c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b480:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800b484:	4630      	mov	r0, r6
 800b486:	ee10 2a10 	vmov	r2, s0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4629      	mov	r1, r5
 800b48e:	f7f5 f9ed 	bl	800086c <__aeabi_ddiv>
 800b492:	ec41 0b10 	vmov	d0, r0, r1
 800b496:	b003      	add	sp, #12
 800b498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b49c <__copybits>:
 800b49c:	3901      	subs	r1, #1
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	1149      	asrs	r1, r1, #5
 800b4a2:	6914      	ldr	r4, [r2, #16]
 800b4a4:	3101      	adds	r1, #1
 800b4a6:	f102 0314 	add.w	r3, r2, #20
 800b4aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b4ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b4b2:	42a3      	cmp	r3, r4
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	d303      	bcc.n	800b4c0 <__copybits+0x24>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	428a      	cmp	r2, r1
 800b4bc:	d305      	bcc.n	800b4ca <__copybits+0x2e>
 800b4be:	bd10      	pop	{r4, pc}
 800b4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4c4:	f840 2b04 	str.w	r2, [r0], #4
 800b4c8:	e7f3      	b.n	800b4b2 <__copybits+0x16>
 800b4ca:	f842 3b04 	str.w	r3, [r2], #4
 800b4ce:	e7f4      	b.n	800b4ba <__copybits+0x1e>

0800b4d0 <__any_on>:
 800b4d0:	f100 0214 	add.w	r2, r0, #20
 800b4d4:	6900      	ldr	r0, [r0, #16]
 800b4d6:	114b      	asrs	r3, r1, #5
 800b4d8:	4298      	cmp	r0, r3
 800b4da:	b510      	push	{r4, lr}
 800b4dc:	db11      	blt.n	800b502 <__any_on+0x32>
 800b4de:	dd0a      	ble.n	800b4f6 <__any_on+0x26>
 800b4e0:	f011 011f 	ands.w	r1, r1, #31
 800b4e4:	d007      	beq.n	800b4f6 <__any_on+0x26>
 800b4e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b4ea:	fa24 f001 	lsr.w	r0, r4, r1
 800b4ee:	fa00 f101 	lsl.w	r1, r0, r1
 800b4f2:	428c      	cmp	r4, r1
 800b4f4:	d10b      	bne.n	800b50e <__any_on+0x3e>
 800b4f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d803      	bhi.n	800b506 <__any_on+0x36>
 800b4fe:	2000      	movs	r0, #0
 800b500:	bd10      	pop	{r4, pc}
 800b502:	4603      	mov	r3, r0
 800b504:	e7f7      	b.n	800b4f6 <__any_on+0x26>
 800b506:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b50a:	2900      	cmp	r1, #0
 800b50c:	d0f5      	beq.n	800b4fa <__any_on+0x2a>
 800b50e:	2001      	movs	r0, #1
 800b510:	e7f6      	b.n	800b500 <__any_on+0x30>

0800b512 <_calloc_r>:
 800b512:	b538      	push	{r3, r4, r5, lr}
 800b514:	fb02 f401 	mul.w	r4, r2, r1
 800b518:	4621      	mov	r1, r4
 800b51a:	f7fc fcd7 	bl	8007ecc <_malloc_r>
 800b51e:	4605      	mov	r5, r0
 800b520:	b118      	cbz	r0, 800b52a <_calloc_r+0x18>
 800b522:	4622      	mov	r2, r4
 800b524:	2100      	movs	r1, #0
 800b526:	f7fc fc7b 	bl	8007e20 <memset>
 800b52a:	4628      	mov	r0, r5
 800b52c:	bd38      	pop	{r3, r4, r5, pc}

0800b52e <__ssputs_r>:
 800b52e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b532:	688e      	ldr	r6, [r1, #8]
 800b534:	429e      	cmp	r6, r3
 800b536:	4682      	mov	sl, r0
 800b538:	460c      	mov	r4, r1
 800b53a:	4690      	mov	r8, r2
 800b53c:	4699      	mov	r9, r3
 800b53e:	d837      	bhi.n	800b5b0 <__ssputs_r+0x82>
 800b540:	898a      	ldrh	r2, [r1, #12]
 800b542:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b546:	d031      	beq.n	800b5ac <__ssputs_r+0x7e>
 800b548:	6825      	ldr	r5, [r4, #0]
 800b54a:	6909      	ldr	r1, [r1, #16]
 800b54c:	1a6f      	subs	r7, r5, r1
 800b54e:	6965      	ldr	r5, [r4, #20]
 800b550:	2302      	movs	r3, #2
 800b552:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b556:	fb95 f5f3 	sdiv	r5, r5, r3
 800b55a:	f109 0301 	add.w	r3, r9, #1
 800b55e:	443b      	add	r3, r7
 800b560:	429d      	cmp	r5, r3
 800b562:	bf38      	it	cc
 800b564:	461d      	movcc	r5, r3
 800b566:	0553      	lsls	r3, r2, #21
 800b568:	d530      	bpl.n	800b5cc <__ssputs_r+0x9e>
 800b56a:	4629      	mov	r1, r5
 800b56c:	f7fc fcae 	bl	8007ecc <_malloc_r>
 800b570:	4606      	mov	r6, r0
 800b572:	b950      	cbnz	r0, 800b58a <__ssputs_r+0x5c>
 800b574:	230c      	movs	r3, #12
 800b576:	f8ca 3000 	str.w	r3, [sl]
 800b57a:	89a3      	ldrh	r3, [r4, #12]
 800b57c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b580:	81a3      	strh	r3, [r4, #12]
 800b582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b58a:	463a      	mov	r2, r7
 800b58c:	6921      	ldr	r1, [r4, #16]
 800b58e:	f7fc fc23 	bl	8007dd8 <memcpy>
 800b592:	89a3      	ldrh	r3, [r4, #12]
 800b594:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b59c:	81a3      	strh	r3, [r4, #12]
 800b59e:	6126      	str	r6, [r4, #16]
 800b5a0:	6165      	str	r5, [r4, #20]
 800b5a2:	443e      	add	r6, r7
 800b5a4:	1bed      	subs	r5, r5, r7
 800b5a6:	6026      	str	r6, [r4, #0]
 800b5a8:	60a5      	str	r5, [r4, #8]
 800b5aa:	464e      	mov	r6, r9
 800b5ac:	454e      	cmp	r6, r9
 800b5ae:	d900      	bls.n	800b5b2 <__ssputs_r+0x84>
 800b5b0:	464e      	mov	r6, r9
 800b5b2:	4632      	mov	r2, r6
 800b5b4:	4641      	mov	r1, r8
 800b5b6:	6820      	ldr	r0, [r4, #0]
 800b5b8:	f7fc fc19 	bl	8007dee <memmove>
 800b5bc:	68a3      	ldr	r3, [r4, #8]
 800b5be:	1b9b      	subs	r3, r3, r6
 800b5c0:	60a3      	str	r3, [r4, #8]
 800b5c2:	6823      	ldr	r3, [r4, #0]
 800b5c4:	441e      	add	r6, r3
 800b5c6:	6026      	str	r6, [r4, #0]
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	e7dc      	b.n	800b586 <__ssputs_r+0x58>
 800b5cc:	462a      	mov	r2, r5
 800b5ce:	f000 f90e 	bl	800b7ee <_realloc_r>
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	d1e2      	bne.n	800b59e <__ssputs_r+0x70>
 800b5d8:	6921      	ldr	r1, [r4, #16]
 800b5da:	4650      	mov	r0, sl
 800b5dc:	f7fc fc28 	bl	8007e30 <_free_r>
 800b5e0:	e7c8      	b.n	800b574 <__ssputs_r+0x46>
	...

0800b5e4 <_svfiprintf_r>:
 800b5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e8:	461d      	mov	r5, r3
 800b5ea:	898b      	ldrh	r3, [r1, #12]
 800b5ec:	061f      	lsls	r7, r3, #24
 800b5ee:	b09d      	sub	sp, #116	; 0x74
 800b5f0:	4680      	mov	r8, r0
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	4616      	mov	r6, r2
 800b5f6:	d50f      	bpl.n	800b618 <_svfiprintf_r+0x34>
 800b5f8:	690b      	ldr	r3, [r1, #16]
 800b5fa:	b96b      	cbnz	r3, 800b618 <_svfiprintf_r+0x34>
 800b5fc:	2140      	movs	r1, #64	; 0x40
 800b5fe:	f7fc fc65 	bl	8007ecc <_malloc_r>
 800b602:	6020      	str	r0, [r4, #0]
 800b604:	6120      	str	r0, [r4, #16]
 800b606:	b928      	cbnz	r0, 800b614 <_svfiprintf_r+0x30>
 800b608:	230c      	movs	r3, #12
 800b60a:	f8c8 3000 	str.w	r3, [r8]
 800b60e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b612:	e0c8      	b.n	800b7a6 <_svfiprintf_r+0x1c2>
 800b614:	2340      	movs	r3, #64	; 0x40
 800b616:	6163      	str	r3, [r4, #20]
 800b618:	2300      	movs	r3, #0
 800b61a:	9309      	str	r3, [sp, #36]	; 0x24
 800b61c:	2320      	movs	r3, #32
 800b61e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b622:	2330      	movs	r3, #48	; 0x30
 800b624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b628:	9503      	str	r5, [sp, #12]
 800b62a:	f04f 0b01 	mov.w	fp, #1
 800b62e:	4637      	mov	r7, r6
 800b630:	463d      	mov	r5, r7
 800b632:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b636:	b10b      	cbz	r3, 800b63c <_svfiprintf_r+0x58>
 800b638:	2b25      	cmp	r3, #37	; 0x25
 800b63a:	d13e      	bne.n	800b6ba <_svfiprintf_r+0xd6>
 800b63c:	ebb7 0a06 	subs.w	sl, r7, r6
 800b640:	d00b      	beq.n	800b65a <_svfiprintf_r+0x76>
 800b642:	4653      	mov	r3, sl
 800b644:	4632      	mov	r2, r6
 800b646:	4621      	mov	r1, r4
 800b648:	4640      	mov	r0, r8
 800b64a:	f7ff ff70 	bl	800b52e <__ssputs_r>
 800b64e:	3001      	adds	r0, #1
 800b650:	f000 80a4 	beq.w	800b79c <_svfiprintf_r+0x1b8>
 800b654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b656:	4453      	add	r3, sl
 800b658:	9309      	str	r3, [sp, #36]	; 0x24
 800b65a:	783b      	ldrb	r3, [r7, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	f000 809d 	beq.w	800b79c <_svfiprintf_r+0x1b8>
 800b662:	2300      	movs	r3, #0
 800b664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b66c:	9304      	str	r3, [sp, #16]
 800b66e:	9307      	str	r3, [sp, #28]
 800b670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b674:	931a      	str	r3, [sp, #104]	; 0x68
 800b676:	462f      	mov	r7, r5
 800b678:	2205      	movs	r2, #5
 800b67a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b67e:	4850      	ldr	r0, [pc, #320]	; (800b7c0 <_svfiprintf_r+0x1dc>)
 800b680:	f7f4 fdbe 	bl	8000200 <memchr>
 800b684:	9b04      	ldr	r3, [sp, #16]
 800b686:	b9d0      	cbnz	r0, 800b6be <_svfiprintf_r+0xda>
 800b688:	06d9      	lsls	r1, r3, #27
 800b68a:	bf44      	itt	mi
 800b68c:	2220      	movmi	r2, #32
 800b68e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b692:	071a      	lsls	r2, r3, #28
 800b694:	bf44      	itt	mi
 800b696:	222b      	movmi	r2, #43	; 0x2b
 800b698:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b69c:	782a      	ldrb	r2, [r5, #0]
 800b69e:	2a2a      	cmp	r2, #42	; 0x2a
 800b6a0:	d015      	beq.n	800b6ce <_svfiprintf_r+0xea>
 800b6a2:	9a07      	ldr	r2, [sp, #28]
 800b6a4:	462f      	mov	r7, r5
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	250a      	movs	r5, #10
 800b6aa:	4639      	mov	r1, r7
 800b6ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6b0:	3b30      	subs	r3, #48	; 0x30
 800b6b2:	2b09      	cmp	r3, #9
 800b6b4:	d94d      	bls.n	800b752 <_svfiprintf_r+0x16e>
 800b6b6:	b1b8      	cbz	r0, 800b6e8 <_svfiprintf_r+0x104>
 800b6b8:	e00f      	b.n	800b6da <_svfiprintf_r+0xf6>
 800b6ba:	462f      	mov	r7, r5
 800b6bc:	e7b8      	b.n	800b630 <_svfiprintf_r+0x4c>
 800b6be:	4a40      	ldr	r2, [pc, #256]	; (800b7c0 <_svfiprintf_r+0x1dc>)
 800b6c0:	1a80      	subs	r0, r0, r2
 800b6c2:	fa0b f000 	lsl.w	r0, fp, r0
 800b6c6:	4318      	orrs	r0, r3
 800b6c8:	9004      	str	r0, [sp, #16]
 800b6ca:	463d      	mov	r5, r7
 800b6cc:	e7d3      	b.n	800b676 <_svfiprintf_r+0x92>
 800b6ce:	9a03      	ldr	r2, [sp, #12]
 800b6d0:	1d11      	adds	r1, r2, #4
 800b6d2:	6812      	ldr	r2, [r2, #0]
 800b6d4:	9103      	str	r1, [sp, #12]
 800b6d6:	2a00      	cmp	r2, #0
 800b6d8:	db01      	blt.n	800b6de <_svfiprintf_r+0xfa>
 800b6da:	9207      	str	r2, [sp, #28]
 800b6dc:	e004      	b.n	800b6e8 <_svfiprintf_r+0x104>
 800b6de:	4252      	negs	r2, r2
 800b6e0:	f043 0302 	orr.w	r3, r3, #2
 800b6e4:	9207      	str	r2, [sp, #28]
 800b6e6:	9304      	str	r3, [sp, #16]
 800b6e8:	783b      	ldrb	r3, [r7, #0]
 800b6ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b6ec:	d10c      	bne.n	800b708 <_svfiprintf_r+0x124>
 800b6ee:	787b      	ldrb	r3, [r7, #1]
 800b6f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b6f2:	d133      	bne.n	800b75c <_svfiprintf_r+0x178>
 800b6f4:	9b03      	ldr	r3, [sp, #12]
 800b6f6:	1d1a      	adds	r2, r3, #4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	9203      	str	r2, [sp, #12]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	bfb8      	it	lt
 800b700:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b704:	3702      	adds	r7, #2
 800b706:	9305      	str	r3, [sp, #20]
 800b708:	4d2e      	ldr	r5, [pc, #184]	; (800b7c4 <_svfiprintf_r+0x1e0>)
 800b70a:	7839      	ldrb	r1, [r7, #0]
 800b70c:	2203      	movs	r2, #3
 800b70e:	4628      	mov	r0, r5
 800b710:	f7f4 fd76 	bl	8000200 <memchr>
 800b714:	b138      	cbz	r0, 800b726 <_svfiprintf_r+0x142>
 800b716:	2340      	movs	r3, #64	; 0x40
 800b718:	1b40      	subs	r0, r0, r5
 800b71a:	fa03 f000 	lsl.w	r0, r3, r0
 800b71e:	9b04      	ldr	r3, [sp, #16]
 800b720:	4303      	orrs	r3, r0
 800b722:	3701      	adds	r7, #1
 800b724:	9304      	str	r3, [sp, #16]
 800b726:	7839      	ldrb	r1, [r7, #0]
 800b728:	4827      	ldr	r0, [pc, #156]	; (800b7c8 <_svfiprintf_r+0x1e4>)
 800b72a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b72e:	2206      	movs	r2, #6
 800b730:	1c7e      	adds	r6, r7, #1
 800b732:	f7f4 fd65 	bl	8000200 <memchr>
 800b736:	2800      	cmp	r0, #0
 800b738:	d038      	beq.n	800b7ac <_svfiprintf_r+0x1c8>
 800b73a:	4b24      	ldr	r3, [pc, #144]	; (800b7cc <_svfiprintf_r+0x1e8>)
 800b73c:	bb13      	cbnz	r3, 800b784 <_svfiprintf_r+0x1a0>
 800b73e:	9b03      	ldr	r3, [sp, #12]
 800b740:	3307      	adds	r3, #7
 800b742:	f023 0307 	bic.w	r3, r3, #7
 800b746:	3308      	adds	r3, #8
 800b748:	9303      	str	r3, [sp, #12]
 800b74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b74c:	444b      	add	r3, r9
 800b74e:	9309      	str	r3, [sp, #36]	; 0x24
 800b750:	e76d      	b.n	800b62e <_svfiprintf_r+0x4a>
 800b752:	fb05 3202 	mla	r2, r5, r2, r3
 800b756:	2001      	movs	r0, #1
 800b758:	460f      	mov	r7, r1
 800b75a:	e7a6      	b.n	800b6aa <_svfiprintf_r+0xc6>
 800b75c:	2300      	movs	r3, #0
 800b75e:	3701      	adds	r7, #1
 800b760:	9305      	str	r3, [sp, #20]
 800b762:	4619      	mov	r1, r3
 800b764:	250a      	movs	r5, #10
 800b766:	4638      	mov	r0, r7
 800b768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b76c:	3a30      	subs	r2, #48	; 0x30
 800b76e:	2a09      	cmp	r2, #9
 800b770:	d903      	bls.n	800b77a <_svfiprintf_r+0x196>
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0c8      	beq.n	800b708 <_svfiprintf_r+0x124>
 800b776:	9105      	str	r1, [sp, #20]
 800b778:	e7c6      	b.n	800b708 <_svfiprintf_r+0x124>
 800b77a:	fb05 2101 	mla	r1, r5, r1, r2
 800b77e:	2301      	movs	r3, #1
 800b780:	4607      	mov	r7, r0
 800b782:	e7f0      	b.n	800b766 <_svfiprintf_r+0x182>
 800b784:	ab03      	add	r3, sp, #12
 800b786:	9300      	str	r3, [sp, #0]
 800b788:	4622      	mov	r2, r4
 800b78a:	4b11      	ldr	r3, [pc, #68]	; (800b7d0 <_svfiprintf_r+0x1ec>)
 800b78c:	a904      	add	r1, sp, #16
 800b78e:	4640      	mov	r0, r8
 800b790:	f7fc fc8a 	bl	80080a8 <_printf_float>
 800b794:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b798:	4681      	mov	r9, r0
 800b79a:	d1d6      	bne.n	800b74a <_svfiprintf_r+0x166>
 800b79c:	89a3      	ldrh	r3, [r4, #12]
 800b79e:	065b      	lsls	r3, r3, #25
 800b7a0:	f53f af35 	bmi.w	800b60e <_svfiprintf_r+0x2a>
 800b7a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7a6:	b01d      	add	sp, #116	; 0x74
 800b7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ac:	ab03      	add	r3, sp, #12
 800b7ae:	9300      	str	r3, [sp, #0]
 800b7b0:	4622      	mov	r2, r4
 800b7b2:	4b07      	ldr	r3, [pc, #28]	; (800b7d0 <_svfiprintf_r+0x1ec>)
 800b7b4:	a904      	add	r1, sp, #16
 800b7b6:	4640      	mov	r0, r8
 800b7b8:	f7fc ff2c 	bl	8008614 <_printf_i>
 800b7bc:	e7ea      	b.n	800b794 <_svfiprintf_r+0x1b0>
 800b7be:	bf00      	nop
 800b7c0:	0800e73c 	.word	0x0800e73c
 800b7c4:	0800e742 	.word	0x0800e742
 800b7c8:	0800e746 	.word	0x0800e746
 800b7cc:	080080a9 	.word	0x080080a9
 800b7d0:	0800b52f 	.word	0x0800b52f

0800b7d4 <__ascii_wctomb>:
 800b7d4:	b149      	cbz	r1, 800b7ea <__ascii_wctomb+0x16>
 800b7d6:	2aff      	cmp	r2, #255	; 0xff
 800b7d8:	bf85      	ittet	hi
 800b7da:	238a      	movhi	r3, #138	; 0x8a
 800b7dc:	6003      	strhi	r3, [r0, #0]
 800b7de:	700a      	strbls	r2, [r1, #0]
 800b7e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b7e4:	bf98      	it	ls
 800b7e6:	2001      	movls	r0, #1
 800b7e8:	4770      	bx	lr
 800b7ea:	4608      	mov	r0, r1
 800b7ec:	4770      	bx	lr

0800b7ee <_realloc_r>:
 800b7ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	4614      	mov	r4, r2
 800b7f4:	460e      	mov	r6, r1
 800b7f6:	b921      	cbnz	r1, 800b802 <_realloc_r+0x14>
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b7fe:	f7fc bb65 	b.w	8007ecc <_malloc_r>
 800b802:	b922      	cbnz	r2, 800b80e <_realloc_r+0x20>
 800b804:	f7fc fb14 	bl	8007e30 <_free_r>
 800b808:	4625      	mov	r5, r4
 800b80a:	4628      	mov	r0, r5
 800b80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b80e:	f000 f814 	bl	800b83a <_malloc_usable_size_r>
 800b812:	42a0      	cmp	r0, r4
 800b814:	d20f      	bcs.n	800b836 <_realloc_r+0x48>
 800b816:	4621      	mov	r1, r4
 800b818:	4638      	mov	r0, r7
 800b81a:	f7fc fb57 	bl	8007ecc <_malloc_r>
 800b81e:	4605      	mov	r5, r0
 800b820:	2800      	cmp	r0, #0
 800b822:	d0f2      	beq.n	800b80a <_realloc_r+0x1c>
 800b824:	4631      	mov	r1, r6
 800b826:	4622      	mov	r2, r4
 800b828:	f7fc fad6 	bl	8007dd8 <memcpy>
 800b82c:	4631      	mov	r1, r6
 800b82e:	4638      	mov	r0, r7
 800b830:	f7fc fafe 	bl	8007e30 <_free_r>
 800b834:	e7e9      	b.n	800b80a <_realloc_r+0x1c>
 800b836:	4635      	mov	r5, r6
 800b838:	e7e7      	b.n	800b80a <_realloc_r+0x1c>

0800b83a <_malloc_usable_size_r>:
 800b83a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b83e:	1f18      	subs	r0, r3, #4
 800b840:	2b00      	cmp	r3, #0
 800b842:	bfbc      	itt	lt
 800b844:	580b      	ldrlt	r3, [r1, r0]
 800b846:	18c0      	addlt	r0, r0, r3
 800b848:	4770      	bx	lr

0800b84a <cabsf>:
 800b84a:	b508      	push	{r3, lr}
 800b84c:	ed2d 8b04 	vpush	{d8-d9}
 800b850:	eeb0 9a40 	vmov.f32	s18, s0
 800b854:	eef0 8a60 	vmov.f32	s17, s1
 800b858:	f000 f873 	bl	800b942 <crealf>
 800b85c:	eef0 0a68 	vmov.f32	s1, s17
 800b860:	eeb0 8a40 	vmov.f32	s16, s0
 800b864:	eeb0 0a49 	vmov.f32	s0, s18
 800b868:	f000 f867 	bl	800b93a <cimagf>
 800b86c:	eef0 0a40 	vmov.f32	s1, s0
 800b870:	eeb0 0a48 	vmov.f32	s0, s16
 800b874:	ecbd 8b04 	vpop	{d8-d9}
 800b878:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b87c:	f000 b96c 	b.w	800bb58 <hypotf>

0800b880 <cexp>:
 800b880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b884:	ed2d 8b06 	vpush	{d8-d10}
 800b888:	eeb0 aa40 	vmov.f32	s20, s0
 800b88c:	eef0 aa60 	vmov.f32	s21, s1
 800b890:	eeb0 8a41 	vmov.f32	s16, s2
 800b894:	eef0 8a61 	vmov.f32	s17, s3
 800b898:	f000 f852 	bl	800b940 <creal>
 800b89c:	eeb0 1a48 	vmov.f32	s2, s16
 800b8a0:	eef0 1a68 	vmov.f32	s3, s17
 800b8a4:	eeb0 9a40 	vmov.f32	s18, s0
 800b8a8:	eef0 9a60 	vmov.f32	s19, s1
 800b8ac:	eeb0 0a4a 	vmov.f32	s0, s20
 800b8b0:	eef0 0a6a 	vmov.f32	s1, s21
 800b8b4:	f000 f83c 	bl	800b930 <cimag>
 800b8b8:	eeb0 8a40 	vmov.f32	s16, s0
 800b8bc:	eef0 8a60 	vmov.f32	s17, s1
 800b8c0:	eeb0 0a49 	vmov.f32	s0, s18
 800b8c4:	eef0 0a69 	vmov.f32	s1, s19
 800b8c8:	f000 f8ca 	bl	800ba60 <exp>
 800b8cc:	ec57 6b10 	vmov	r6, r7, d0
 800b8d0:	eeb0 0a48 	vmov.f32	s0, s16
 800b8d4:	eef0 0a68 	vmov.f32	s1, s17
 800b8d8:	f000 f87a 	bl	800b9d0 <sin>
 800b8dc:	4632      	mov	r2, r6
 800b8de:	463b      	mov	r3, r7
 800b8e0:	ec51 0b10 	vmov	r0, r1, d0
 800b8e4:	f7f4 fe98 	bl	8000618 <__aeabi_dmul>
 800b8e8:	eeb0 0a48 	vmov.f32	s0, s16
 800b8ec:	eef0 0a68 	vmov.f32	s1, s17
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	f000 f828 	bl	800b948 <cos>
 800b8f8:	4632      	mov	r2, r6
 800b8fa:	ec51 0b10 	vmov	r0, r1, d0
 800b8fe:	463b      	mov	r3, r7
 800b900:	f7f4 fe8a 	bl	8000618 <__aeabi_dmul>
 800b904:	2200      	movs	r2, #0
 800b906:	4606      	mov	r6, r0
 800b908:	460f      	mov	r7, r1
 800b90a:	2300      	movs	r3, #0
 800b90c:	4620      	mov	r0, r4
 800b90e:	4629      	mov	r1, r5
 800b910:	f7f4 fe82 	bl	8000618 <__aeabi_dmul>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	4630      	mov	r0, r6
 800b91a:	4639      	mov	r1, r7
 800b91c:	f7f4 fcc6 	bl	80002ac <__adddf3>
 800b920:	ecbd 8b06 	vpop	{d8-d10}
 800b924:	ec41 0b10 	vmov	d0, r0, r1
 800b928:	ec45 4b11 	vmov	d1, r4, r5
 800b92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b930 <cimag>:
 800b930:	eeb0 0a41 	vmov.f32	s0, s2
 800b934:	eef0 0a61 	vmov.f32	s1, s3
 800b938:	4770      	bx	lr

0800b93a <cimagf>:
 800b93a:	eeb0 0a60 	vmov.f32	s0, s1
 800b93e:	4770      	bx	lr

0800b940 <creal>:
 800b940:	4770      	bx	lr

0800b942 <crealf>:
 800b942:	4770      	bx	lr
 800b944:	0000      	movs	r0, r0
	...

0800b948 <cos>:
 800b948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b94a:	ec51 0b10 	vmov	r0, r1, d0
 800b94e:	4a1e      	ldr	r2, [pc, #120]	; (800b9c8 <cos+0x80>)
 800b950:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b954:	4293      	cmp	r3, r2
 800b956:	dc06      	bgt.n	800b966 <cos+0x1e>
 800b958:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800b9c0 <cos+0x78>
 800b95c:	f000 fd58 	bl	800c410 <__kernel_cos>
 800b960:	ec51 0b10 	vmov	r0, r1, d0
 800b964:	e007      	b.n	800b976 <cos+0x2e>
 800b966:	4a19      	ldr	r2, [pc, #100]	; (800b9cc <cos+0x84>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	dd09      	ble.n	800b980 <cos+0x38>
 800b96c:	ee10 2a10 	vmov	r2, s0
 800b970:	460b      	mov	r3, r1
 800b972:	f7f4 fc99 	bl	80002a8 <__aeabi_dsub>
 800b976:	ec41 0b10 	vmov	d0, r0, r1
 800b97a:	b005      	add	sp, #20
 800b97c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b980:	4668      	mov	r0, sp
 800b982:	f000 fabd 	bl	800bf00 <__ieee754_rem_pio2>
 800b986:	f000 0003 	and.w	r0, r0, #3
 800b98a:	2801      	cmp	r0, #1
 800b98c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b990:	ed9d 0b00 	vldr	d0, [sp]
 800b994:	d007      	beq.n	800b9a6 <cos+0x5e>
 800b996:	2802      	cmp	r0, #2
 800b998:	d00e      	beq.n	800b9b8 <cos+0x70>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d0de      	beq.n	800b95c <cos+0x14>
 800b99e:	2001      	movs	r0, #1
 800b9a0:	f001 f93e 	bl	800cc20 <__kernel_sin>
 800b9a4:	e7dc      	b.n	800b960 <cos+0x18>
 800b9a6:	f001 f93b 	bl	800cc20 <__kernel_sin>
 800b9aa:	ec53 2b10 	vmov	r2, r3, d0
 800b9ae:	ee10 0a10 	vmov	r0, s0
 800b9b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b9b6:	e7de      	b.n	800b976 <cos+0x2e>
 800b9b8:	f000 fd2a 	bl	800c410 <__kernel_cos>
 800b9bc:	e7f5      	b.n	800b9aa <cos+0x62>
 800b9be:	bf00      	nop
	...
 800b9c8:	3fe921fb 	.word	0x3fe921fb
 800b9cc:	7fefffff 	.word	0x7fefffff

0800b9d0 <sin>:
 800b9d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9d2:	ec51 0b10 	vmov	r0, r1, d0
 800b9d6:	4a20      	ldr	r2, [pc, #128]	; (800ba58 <sin+0x88>)
 800b9d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	dc07      	bgt.n	800b9f0 <sin+0x20>
 800b9e0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800ba50 <sin+0x80>
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	f001 f91b 	bl	800cc20 <__kernel_sin>
 800b9ea:	ec51 0b10 	vmov	r0, r1, d0
 800b9ee:	e007      	b.n	800ba00 <sin+0x30>
 800b9f0:	4a1a      	ldr	r2, [pc, #104]	; (800ba5c <sin+0x8c>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	dd09      	ble.n	800ba0a <sin+0x3a>
 800b9f6:	ee10 2a10 	vmov	r2, s0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	f7f4 fc54 	bl	80002a8 <__aeabi_dsub>
 800ba00:	ec41 0b10 	vmov	d0, r0, r1
 800ba04:	b005      	add	sp, #20
 800ba06:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba0a:	4668      	mov	r0, sp
 800ba0c:	f000 fa78 	bl	800bf00 <__ieee754_rem_pio2>
 800ba10:	f000 0003 	and.w	r0, r0, #3
 800ba14:	2801      	cmp	r0, #1
 800ba16:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ba1a:	ed9d 0b00 	vldr	d0, [sp]
 800ba1e:	d004      	beq.n	800ba2a <sin+0x5a>
 800ba20:	2802      	cmp	r0, #2
 800ba22:	d005      	beq.n	800ba30 <sin+0x60>
 800ba24:	b970      	cbnz	r0, 800ba44 <sin+0x74>
 800ba26:	2001      	movs	r0, #1
 800ba28:	e7dd      	b.n	800b9e6 <sin+0x16>
 800ba2a:	f000 fcf1 	bl	800c410 <__kernel_cos>
 800ba2e:	e7dc      	b.n	800b9ea <sin+0x1a>
 800ba30:	2001      	movs	r0, #1
 800ba32:	f001 f8f5 	bl	800cc20 <__kernel_sin>
 800ba36:	ec53 2b10 	vmov	r2, r3, d0
 800ba3a:	ee10 0a10 	vmov	r0, s0
 800ba3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ba42:	e7dd      	b.n	800ba00 <sin+0x30>
 800ba44:	f000 fce4 	bl	800c410 <__kernel_cos>
 800ba48:	e7f5      	b.n	800ba36 <sin+0x66>
 800ba4a:	bf00      	nop
 800ba4c:	f3af 8000 	nop.w
	...
 800ba58:	3fe921fb 	.word	0x3fe921fb
 800ba5c:	7fefffff 	.word	0x7fefffff

0800ba60 <exp>:
 800ba60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba62:	ed2d 8b02 	vpush	{d8}
 800ba66:	4e38      	ldr	r6, [pc, #224]	; (800bb48 <exp+0xe8>)
 800ba68:	b08b      	sub	sp, #44	; 0x2c
 800ba6a:	ec55 4b10 	vmov	r4, r5, d0
 800ba6e:	f000 f8d7 	bl	800bc20 <__ieee754_exp>
 800ba72:	f996 3000 	ldrsb.w	r3, [r6]
 800ba76:	eeb0 8a40 	vmov.f32	s16, s0
 800ba7a:	eef0 8a60 	vmov.f32	s17, s1
 800ba7e:	3301      	adds	r3, #1
 800ba80:	d02c      	beq.n	800badc <exp+0x7c>
 800ba82:	ec45 4b10 	vmov	d0, r4, r5
 800ba86:	f001 f98e 	bl	800cda6 <finite>
 800ba8a:	b338      	cbz	r0, 800badc <exp+0x7c>
 800ba8c:	a32a      	add	r3, pc, #168	; (adr r3, 800bb38 <exp+0xd8>)
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	4620      	mov	r0, r4
 800ba94:	4629      	mov	r1, r5
 800ba96:	f7f5 f84f 	bl	8000b38 <__aeabi_dcmpgt>
 800ba9a:	4607      	mov	r7, r0
 800ba9c:	2800      	cmp	r0, #0
 800ba9e:	d030      	beq.n	800bb02 <exp+0xa2>
 800baa0:	2303      	movs	r3, #3
 800baa2:	9300      	str	r3, [sp, #0]
 800baa4:	4b29      	ldr	r3, [pc, #164]	; (800bb4c <exp+0xec>)
 800baa6:	9301      	str	r3, [sp, #4]
 800baa8:	2300      	movs	r3, #0
 800baaa:	9308      	str	r3, [sp, #32]
 800baac:	f996 3000 	ldrsb.w	r3, [r6]
 800bab0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bab4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bab8:	b9c3      	cbnz	r3, 800baec <exp+0x8c>
 800baba:	4b25      	ldr	r3, [pc, #148]	; (800bb50 <exp+0xf0>)
 800babc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bac0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bac4:	4668      	mov	r0, sp
 800bac6:	f001 f9fb 	bl	800cec0 <matherr>
 800baca:	b1a8      	cbz	r0, 800baf8 <exp+0x98>
 800bacc:	9b08      	ldr	r3, [sp, #32]
 800bace:	b11b      	cbz	r3, 800bad8 <exp+0x78>
 800bad0:	f7fc f948 	bl	8007d64 <__errno>
 800bad4:	9b08      	ldr	r3, [sp, #32]
 800bad6:	6003      	str	r3, [r0, #0]
 800bad8:	ed9d 8b06 	vldr	d8, [sp, #24]
 800badc:	eeb0 0a48 	vmov.f32	s0, s16
 800bae0:	eef0 0a68 	vmov.f32	s1, s17
 800bae4:	b00b      	add	sp, #44	; 0x2c
 800bae6:	ecbd 8b02 	vpop	{d8}
 800baea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800baec:	4919      	ldr	r1, [pc, #100]	; (800bb54 <exp+0xf4>)
 800baee:	2000      	movs	r0, #0
 800baf0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	d1e5      	bne.n	800bac4 <exp+0x64>
 800baf8:	f7fc f934 	bl	8007d64 <__errno>
 800bafc:	2322      	movs	r3, #34	; 0x22
 800bafe:	6003      	str	r3, [r0, #0]
 800bb00:	e7e4      	b.n	800bacc <exp+0x6c>
 800bb02:	a30f      	add	r3, pc, #60	; (adr r3, 800bb40 <exp+0xe0>)
 800bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb08:	4620      	mov	r0, r4
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	f7f4 fff6 	bl	8000afc <__aeabi_dcmplt>
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d0e3      	beq.n	800badc <exp+0x7c>
 800bb14:	2304      	movs	r3, #4
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	4b0c      	ldr	r3, [pc, #48]	; (800bb4c <exp+0xec>)
 800bb1a:	9301      	str	r3, [sp, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	2300      	movs	r3, #0
 800bb20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bb24:	9708      	str	r7, [sp, #32]
 800bb26:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800bb2a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800bb2e:	f996 3000 	ldrsb.w	r3, [r6]
 800bb32:	e7df      	b.n	800baf4 <exp+0x94>
 800bb34:	f3af 8000 	nop.w
 800bb38:	fefa39ef 	.word	0xfefa39ef
 800bb3c:	40862e42 	.word	0x40862e42
 800bb40:	d52d3051 	.word	0xd52d3051
 800bb44:	c0874910 	.word	0xc0874910
 800bb48:	20001424 	.word	0x20001424
 800bb4c:	0800e84e 	.word	0x0800e84e
 800bb50:	47efffff 	.word	0x47efffff
 800bb54:	7ff00000 	.word	0x7ff00000

0800bb58 <hypotf>:
 800bb58:	b530      	push	{r4, r5, lr}
 800bb5a:	ed2d 8b04 	vpush	{d8-d9}
 800bb5e:	4c2b      	ldr	r4, [pc, #172]	; (800bc0c <hypotf+0xb4>)
 800bb60:	b08b      	sub	sp, #44	; 0x2c
 800bb62:	eeb0 9a40 	vmov.f32	s18, s0
 800bb66:	eef0 8a60 	vmov.f32	s17, s1
 800bb6a:	f000 fbbb 	bl	800c2e4 <__ieee754_hypotf>
 800bb6e:	f994 3000 	ldrsb.w	r3, [r4]
 800bb72:	3301      	adds	r3, #1
 800bb74:	eeb0 8a40 	vmov.f32	s16, s0
 800bb78:	d037      	beq.n	800bbea <hypotf+0x92>
 800bb7a:	f001 fa1b 	bl	800cfb4 <finitef>
 800bb7e:	4605      	mov	r5, r0
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d132      	bne.n	800bbea <hypotf+0x92>
 800bb84:	eeb0 0a49 	vmov.f32	s0, s18
 800bb88:	f001 fa14 	bl	800cfb4 <finitef>
 800bb8c:	b368      	cbz	r0, 800bbea <hypotf+0x92>
 800bb8e:	eeb0 0a68 	vmov.f32	s0, s17
 800bb92:	f001 fa0f 	bl	800cfb4 <finitef>
 800bb96:	b340      	cbz	r0, 800bbea <hypotf+0x92>
 800bb98:	2303      	movs	r3, #3
 800bb9a:	9300      	str	r3, [sp, #0]
 800bb9c:	ee19 0a10 	vmov	r0, s18
 800bba0:	4b1b      	ldr	r3, [pc, #108]	; (800bc10 <hypotf+0xb8>)
 800bba2:	9301      	str	r3, [sp, #4]
 800bba4:	9508      	str	r5, [sp, #32]
 800bba6:	f7f4 fcdf 	bl	8000568 <__aeabi_f2d>
 800bbaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbae:	ee18 0a90 	vmov	r0, s17
 800bbb2:	f7f4 fcd9 	bl	8000568 <__aeabi_f2d>
 800bbb6:	f994 3000 	ldrsb.w	r3, [r4]
 800bbba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbbe:	b9d3      	cbnz	r3, 800bbf6 <hypotf+0x9e>
 800bbc0:	4b14      	ldr	r3, [pc, #80]	; (800bc14 <hypotf+0xbc>)
 800bbc2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bbc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bbca:	4668      	mov	r0, sp
 800bbcc:	f001 f978 	bl	800cec0 <matherr>
 800bbd0:	b1b8      	cbz	r0, 800bc02 <hypotf+0xaa>
 800bbd2:	9b08      	ldr	r3, [sp, #32]
 800bbd4:	b11b      	cbz	r3, 800bbde <hypotf+0x86>
 800bbd6:	f7fc f8c5 	bl	8007d64 <__errno>
 800bbda:	9b08      	ldr	r3, [sp, #32]
 800bbdc:	6003      	str	r3, [r0, #0]
 800bbde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbe2:	f7f5 f811 	bl	8000c08 <__aeabi_d2f>
 800bbe6:	ee08 0a10 	vmov	s16, r0
 800bbea:	eeb0 0a48 	vmov.f32	s0, s16
 800bbee:	b00b      	add	sp, #44	; 0x2c
 800bbf0:	ecbd 8b04 	vpop	{d8-d9}
 800bbf4:	bd30      	pop	{r4, r5, pc}
 800bbf6:	4908      	ldr	r1, [pc, #32]	; (800bc18 <hypotf+0xc0>)
 800bbf8:	2000      	movs	r0, #0
 800bbfa:	2b02      	cmp	r3, #2
 800bbfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc00:	d1e3      	bne.n	800bbca <hypotf+0x72>
 800bc02:	f7fc f8af 	bl	8007d64 <__errno>
 800bc06:	2322      	movs	r3, #34	; 0x22
 800bc08:	6003      	str	r3, [r0, #0]
 800bc0a:	e7e2      	b.n	800bbd2 <hypotf+0x7a>
 800bc0c:	20001424 	.word	0x20001424
 800bc10:	0800e852 	.word	0x0800e852
 800bc14:	47efffff 	.word	0x47efffff
 800bc18:	7ff00000 	.word	0x7ff00000
 800bc1c:	00000000 	.word	0x00000000

0800bc20 <__ieee754_exp>:
 800bc20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc24:	ec55 4b10 	vmov	r4, r5, d0
 800bc28:	4aab      	ldr	r2, [pc, #684]	; (800bed8 <__ieee754_exp+0x2b8>)
 800bc2a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bc2e:	4296      	cmp	r6, r2
 800bc30:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 800bc34:	d932      	bls.n	800bc9c <__ieee754_exp+0x7c>
 800bc36:	4aa9      	ldr	r2, [pc, #676]	; (800bedc <__ieee754_exp+0x2bc>)
 800bc38:	4296      	cmp	r6, r2
 800bc3a:	d913      	bls.n	800bc64 <__ieee754_exp+0x44>
 800bc3c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800bc40:	4323      	orrs	r3, r4
 800bc42:	ee10 2a10 	vmov	r2, s0
 800bc46:	d007      	beq.n	800bc58 <__ieee754_exp+0x38>
 800bc48:	462b      	mov	r3, r5
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	4629      	mov	r1, r5
 800bc4e:	f7f4 fb2d 	bl	80002ac <__adddf3>
 800bc52:	4604      	mov	r4, r0
 800bc54:	460d      	mov	r5, r1
 800bc56:	e000      	b.n	800bc5a <__ieee754_exp+0x3a>
 800bc58:	b9ef      	cbnz	r7, 800bc96 <__ieee754_exp+0x76>
 800bc5a:	ec45 4b10 	vmov	d0, r4, r5
 800bc5e:	b004      	add	sp, #16
 800bc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc64:	a386      	add	r3, pc, #536	; (adr r3, 800be80 <__ieee754_exp+0x260>)
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	ee10 0a10 	vmov	r0, s0
 800bc6e:	4629      	mov	r1, r5
 800bc70:	f7f4 ff62 	bl	8000b38 <__aeabi_dcmpgt>
 800bc74:	b138      	cbz	r0, 800bc86 <__ieee754_exp+0x66>
 800bc76:	a384      	add	r3, pc, #528	; (adr r3, 800be88 <__ieee754_exp+0x268>)
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	4610      	mov	r0, r2
 800bc7e:	4619      	mov	r1, r3
 800bc80:	f7f4 fcca 	bl	8000618 <__aeabi_dmul>
 800bc84:	e7e5      	b.n	800bc52 <__ieee754_exp+0x32>
 800bc86:	a382      	add	r3, pc, #520	; (adr r3, 800be90 <__ieee754_exp+0x270>)
 800bc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	4629      	mov	r1, r5
 800bc90:	f7f4 ff34 	bl	8000afc <__aeabi_dcmplt>
 800bc94:	b130      	cbz	r0, 800bca4 <__ieee754_exp+0x84>
 800bc96:	2400      	movs	r4, #0
 800bc98:	2500      	movs	r5, #0
 800bc9a:	e7de      	b.n	800bc5a <__ieee754_exp+0x3a>
 800bc9c:	4b90      	ldr	r3, [pc, #576]	; (800bee0 <__ieee754_exp+0x2c0>)
 800bc9e:	429e      	cmp	r6, r3
 800bca0:	f240 80a6 	bls.w	800bdf0 <__ieee754_exp+0x1d0>
 800bca4:	4b8f      	ldr	r3, [pc, #572]	; (800bee4 <__ieee754_exp+0x2c4>)
 800bca6:	429e      	cmp	r6, r3
 800bca8:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800bcac:	d875      	bhi.n	800bd9a <__ieee754_exp+0x17a>
 800bcae:	4b8e      	ldr	r3, [pc, #568]	; (800bee8 <__ieee754_exp+0x2c8>)
 800bcb0:	4e8e      	ldr	r6, [pc, #568]	; (800beec <__ieee754_exp+0x2cc>)
 800bcb2:	4443      	add	r3, r8
 800bcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb8:	4620      	mov	r0, r4
 800bcba:	4629      	mov	r1, r5
 800bcbc:	f7f4 faf4 	bl	80002a8 <__aeabi_dsub>
 800bcc0:	4446      	add	r6, r8
 800bcc2:	e9cd 0100 	strd	r0, r1, [sp]
 800bcc6:	e9d6 8900 	ldrd	r8, r9, [r6]
 800bcca:	f1c7 0a01 	rsb	sl, r7, #1
 800bcce:	ebaa 0a07 	sub.w	sl, sl, r7
 800bcd2:	4642      	mov	r2, r8
 800bcd4:	464b      	mov	r3, r9
 800bcd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcda:	f7f4 fae5 	bl	80002a8 <__aeabi_dsub>
 800bcde:	4604      	mov	r4, r0
 800bce0:	460d      	mov	r5, r1
 800bce2:	4622      	mov	r2, r4
 800bce4:	462b      	mov	r3, r5
 800bce6:	4620      	mov	r0, r4
 800bce8:	4629      	mov	r1, r5
 800bcea:	f7f4 fc95 	bl	8000618 <__aeabi_dmul>
 800bcee:	a36a      	add	r3, pc, #424	; (adr r3, 800be98 <__ieee754_exp+0x278>)
 800bcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf4:	4606      	mov	r6, r0
 800bcf6:	460f      	mov	r7, r1
 800bcf8:	f7f4 fc8e 	bl	8000618 <__aeabi_dmul>
 800bcfc:	a368      	add	r3, pc, #416	; (adr r3, 800bea0 <__ieee754_exp+0x280>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 fad1 	bl	80002a8 <__aeabi_dsub>
 800bd06:	4632      	mov	r2, r6
 800bd08:	463b      	mov	r3, r7
 800bd0a:	f7f4 fc85 	bl	8000618 <__aeabi_dmul>
 800bd0e:	a366      	add	r3, pc, #408	; (adr r3, 800bea8 <__ieee754_exp+0x288>)
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	f7f4 faca 	bl	80002ac <__adddf3>
 800bd18:	4632      	mov	r2, r6
 800bd1a:	463b      	mov	r3, r7
 800bd1c:	f7f4 fc7c 	bl	8000618 <__aeabi_dmul>
 800bd20:	a363      	add	r3, pc, #396	; (adr r3, 800beb0 <__ieee754_exp+0x290>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fabf 	bl	80002a8 <__aeabi_dsub>
 800bd2a:	4632      	mov	r2, r6
 800bd2c:	463b      	mov	r3, r7
 800bd2e:	f7f4 fc73 	bl	8000618 <__aeabi_dmul>
 800bd32:	a361      	add	r3, pc, #388	; (adr r3, 800beb8 <__ieee754_exp+0x298>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 fab8 	bl	80002ac <__adddf3>
 800bd3c:	4632      	mov	r2, r6
 800bd3e:	463b      	mov	r3, r7
 800bd40:	f7f4 fc6a 	bl	8000618 <__aeabi_dmul>
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	4620      	mov	r0, r4
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	f7f4 faac 	bl	80002a8 <__aeabi_dsub>
 800bd50:	4602      	mov	r2, r0
 800bd52:	460b      	mov	r3, r1
 800bd54:	4606      	mov	r6, r0
 800bd56:	460f      	mov	r7, r1
 800bd58:	4620      	mov	r0, r4
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	f7f4 fc5c 	bl	8000618 <__aeabi_dmul>
 800bd60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd64:	f1ba 0f00 	cmp.w	sl, #0
 800bd68:	d15c      	bne.n	800be24 <__ieee754_exp+0x204>
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bd70:	4630      	mov	r0, r6
 800bd72:	4639      	mov	r1, r7
 800bd74:	f7f4 fa98 	bl	80002a8 <__aeabi_dsub>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd80:	f7f4 fd74 	bl	800086c <__aeabi_ddiv>
 800bd84:	4622      	mov	r2, r4
 800bd86:	462b      	mov	r3, r5
 800bd88:	f7f4 fa8e 	bl	80002a8 <__aeabi_dsub>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	460b      	mov	r3, r1
 800bd90:	2000      	movs	r0, #0
 800bd92:	4957      	ldr	r1, [pc, #348]	; (800bef0 <__ieee754_exp+0x2d0>)
 800bd94:	f7f4 fa88 	bl	80002a8 <__aeabi_dsub>
 800bd98:	e75b      	b.n	800bc52 <__ieee754_exp+0x32>
 800bd9a:	4e56      	ldr	r6, [pc, #344]	; (800bef4 <__ieee754_exp+0x2d4>)
 800bd9c:	a348      	add	r3, pc, #288	; (adr r3, 800bec0 <__ieee754_exp+0x2a0>)
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	4446      	add	r6, r8
 800bda4:	4620      	mov	r0, r4
 800bda6:	4629      	mov	r1, r5
 800bda8:	f7f4 fc36 	bl	8000618 <__aeabi_dmul>
 800bdac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bdb0:	f7f4 fa7c 	bl	80002ac <__adddf3>
 800bdb4:	f7f4 fee0 	bl	8000b78 <__aeabi_d2iz>
 800bdb8:	4682      	mov	sl, r0
 800bdba:	f7f4 fbc3 	bl	8000544 <__aeabi_i2d>
 800bdbe:	a342      	add	r3, pc, #264	; (adr r3, 800bec8 <__ieee754_exp+0x2a8>)
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	4606      	mov	r6, r0
 800bdc6:	460f      	mov	r7, r1
 800bdc8:	f7f4 fc26 	bl	8000618 <__aeabi_dmul>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	f7f4 fa68 	bl	80002a8 <__aeabi_dsub>
 800bdd8:	a33d      	add	r3, pc, #244	; (adr r3, 800bed0 <__ieee754_exp+0x2b0>)
 800bdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdde:	e9cd 0100 	strd	r0, r1, [sp]
 800bde2:	4630      	mov	r0, r6
 800bde4:	4639      	mov	r1, r7
 800bde6:	f7f4 fc17 	bl	8000618 <__aeabi_dmul>
 800bdea:	4680      	mov	r8, r0
 800bdec:	4689      	mov	r9, r1
 800bdee:	e770      	b.n	800bcd2 <__ieee754_exp+0xb2>
 800bdf0:	4b41      	ldr	r3, [pc, #260]	; (800bef8 <__ieee754_exp+0x2d8>)
 800bdf2:	429e      	cmp	r6, r3
 800bdf4:	d811      	bhi.n	800be1a <__ieee754_exp+0x1fa>
 800bdf6:	a324      	add	r3, pc, #144	; (adr r3, 800be88 <__ieee754_exp+0x268>)
 800bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdfc:	ee10 0a10 	vmov	r0, s0
 800be00:	4629      	mov	r1, r5
 800be02:	f7f4 fa53 	bl	80002ac <__adddf3>
 800be06:	2200      	movs	r2, #0
 800be08:	4b39      	ldr	r3, [pc, #228]	; (800bef0 <__ieee754_exp+0x2d0>)
 800be0a:	f7f4 fe95 	bl	8000b38 <__aeabi_dcmpgt>
 800be0e:	b138      	cbz	r0, 800be20 <__ieee754_exp+0x200>
 800be10:	2200      	movs	r2, #0
 800be12:	4b37      	ldr	r3, [pc, #220]	; (800bef0 <__ieee754_exp+0x2d0>)
 800be14:	4620      	mov	r0, r4
 800be16:	4629      	mov	r1, r5
 800be18:	e719      	b.n	800bc4e <__ieee754_exp+0x2e>
 800be1a:	f04f 0a00 	mov.w	sl, #0
 800be1e:	e760      	b.n	800bce2 <__ieee754_exp+0xc2>
 800be20:	4682      	mov	sl, r0
 800be22:	e75e      	b.n	800bce2 <__ieee754_exp+0xc2>
 800be24:	4632      	mov	r2, r6
 800be26:	463b      	mov	r3, r7
 800be28:	2000      	movs	r0, #0
 800be2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800be2e:	f7f4 fa3b 	bl	80002a8 <__aeabi_dsub>
 800be32:	4602      	mov	r2, r0
 800be34:	460b      	mov	r3, r1
 800be36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be3a:	f7f4 fd17 	bl	800086c <__aeabi_ddiv>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	4640      	mov	r0, r8
 800be44:	4649      	mov	r1, r9
 800be46:	f7f4 fa2f 	bl	80002a8 <__aeabi_dsub>
 800be4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be4e:	f7f4 fa2b 	bl	80002a8 <__aeabi_dsub>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	2000      	movs	r0, #0
 800be58:	4925      	ldr	r1, [pc, #148]	; (800bef0 <__ieee754_exp+0x2d0>)
 800be5a:	f7f4 fa25 	bl	80002a8 <__aeabi_dsub>
 800be5e:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800be62:	4592      	cmp	sl, r2
 800be64:	db02      	blt.n	800be6c <__ieee754_exp+0x24c>
 800be66:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800be6a:	e6f2      	b.n	800bc52 <__ieee754_exp+0x32>
 800be6c:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800be70:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800be74:	2200      	movs	r2, #0
 800be76:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800be7a:	e701      	b.n	800bc80 <__ieee754_exp+0x60>
 800be7c:	f3af 8000 	nop.w
 800be80:	fefa39ef 	.word	0xfefa39ef
 800be84:	40862e42 	.word	0x40862e42
 800be88:	8800759c 	.word	0x8800759c
 800be8c:	7e37e43c 	.word	0x7e37e43c
 800be90:	d52d3051 	.word	0xd52d3051
 800be94:	c0874910 	.word	0xc0874910
 800be98:	72bea4d0 	.word	0x72bea4d0
 800be9c:	3e663769 	.word	0x3e663769
 800bea0:	c5d26bf1 	.word	0xc5d26bf1
 800bea4:	3ebbbd41 	.word	0x3ebbbd41
 800bea8:	af25de2c 	.word	0xaf25de2c
 800beac:	3f11566a 	.word	0x3f11566a
 800beb0:	16bebd93 	.word	0x16bebd93
 800beb4:	3f66c16c 	.word	0x3f66c16c
 800beb8:	5555553e 	.word	0x5555553e
 800bebc:	3fc55555 	.word	0x3fc55555
 800bec0:	652b82fe 	.word	0x652b82fe
 800bec4:	3ff71547 	.word	0x3ff71547
 800bec8:	fee00000 	.word	0xfee00000
 800becc:	3fe62e42 	.word	0x3fe62e42
 800bed0:	35793c76 	.word	0x35793c76
 800bed4:	3dea39ef 	.word	0x3dea39ef
 800bed8:	40862e41 	.word	0x40862e41
 800bedc:	7fefffff 	.word	0x7fefffff
 800bee0:	3fd62e42 	.word	0x3fd62e42
 800bee4:	3ff0a2b1 	.word	0x3ff0a2b1
 800bee8:	0800e870 	.word	0x0800e870
 800beec:	0800e880 	.word	0x0800e880
 800bef0:	3ff00000 	.word	0x3ff00000
 800bef4:	0800e860 	.word	0x0800e860
 800bef8:	3e2fffff 	.word	0x3e2fffff
 800befc:	00000000 	.word	0x00000000

0800bf00 <__ieee754_rem_pio2>:
 800bf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf04:	ec57 6b10 	vmov	r6, r7, d0
 800bf08:	4bc3      	ldr	r3, [pc, #780]	; (800c218 <__ieee754_rem_pio2+0x318>)
 800bf0a:	b08d      	sub	sp, #52	; 0x34
 800bf0c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bf10:	4598      	cmp	r8, r3
 800bf12:	4604      	mov	r4, r0
 800bf14:	9704      	str	r7, [sp, #16]
 800bf16:	dc07      	bgt.n	800bf28 <__ieee754_rem_pio2+0x28>
 800bf18:	2200      	movs	r2, #0
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	ed84 0b00 	vstr	d0, [r4]
 800bf20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bf24:	2500      	movs	r5, #0
 800bf26:	e027      	b.n	800bf78 <__ieee754_rem_pio2+0x78>
 800bf28:	4bbc      	ldr	r3, [pc, #752]	; (800c21c <__ieee754_rem_pio2+0x31c>)
 800bf2a:	4598      	cmp	r8, r3
 800bf2c:	dc75      	bgt.n	800c01a <__ieee754_rem_pio2+0x11a>
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	4dbb      	ldr	r5, [pc, #748]	; (800c220 <__ieee754_rem_pio2+0x320>)
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	ee10 0a10 	vmov	r0, s0
 800bf38:	a3a9      	add	r3, pc, #676	; (adr r3, 800c1e0 <__ieee754_rem_pio2+0x2e0>)
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	4639      	mov	r1, r7
 800bf40:	dd36      	ble.n	800bfb0 <__ieee754_rem_pio2+0xb0>
 800bf42:	f7f4 f9b1 	bl	80002a8 <__aeabi_dsub>
 800bf46:	45a8      	cmp	r8, r5
 800bf48:	4606      	mov	r6, r0
 800bf4a:	460f      	mov	r7, r1
 800bf4c:	d018      	beq.n	800bf80 <__ieee754_rem_pio2+0x80>
 800bf4e:	a3a6      	add	r3, pc, #664	; (adr r3, 800c1e8 <__ieee754_rem_pio2+0x2e8>)
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	f7f4 f9a8 	bl	80002a8 <__aeabi_dsub>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	e9c4 2300 	strd	r2, r3, [r4]
 800bf60:	4630      	mov	r0, r6
 800bf62:	4639      	mov	r1, r7
 800bf64:	f7f4 f9a0 	bl	80002a8 <__aeabi_dsub>
 800bf68:	a39f      	add	r3, pc, #636	; (adr r3, 800c1e8 <__ieee754_rem_pio2+0x2e8>)
 800bf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6e:	f7f4 f99b 	bl	80002a8 <__aeabi_dsub>
 800bf72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf76:	2501      	movs	r5, #1
 800bf78:	4628      	mov	r0, r5
 800bf7a:	b00d      	add	sp, #52	; 0x34
 800bf7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf80:	a39b      	add	r3, pc, #620	; (adr r3, 800c1f0 <__ieee754_rem_pio2+0x2f0>)
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	f7f4 f98f 	bl	80002a8 <__aeabi_dsub>
 800bf8a:	a39b      	add	r3, pc, #620	; (adr r3, 800c1f8 <__ieee754_rem_pio2+0x2f8>)
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	4606      	mov	r6, r0
 800bf92:	460f      	mov	r7, r1
 800bf94:	f7f4 f988 	bl	80002a8 <__aeabi_dsub>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	e9c4 2300 	strd	r2, r3, [r4]
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	4639      	mov	r1, r7
 800bfa4:	f7f4 f980 	bl	80002a8 <__aeabi_dsub>
 800bfa8:	a393      	add	r3, pc, #588	; (adr r3, 800c1f8 <__ieee754_rem_pio2+0x2f8>)
 800bfaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfae:	e7de      	b.n	800bf6e <__ieee754_rem_pio2+0x6e>
 800bfb0:	f7f4 f97c 	bl	80002ac <__adddf3>
 800bfb4:	45a8      	cmp	r8, r5
 800bfb6:	4606      	mov	r6, r0
 800bfb8:	460f      	mov	r7, r1
 800bfba:	d016      	beq.n	800bfea <__ieee754_rem_pio2+0xea>
 800bfbc:	a38a      	add	r3, pc, #552	; (adr r3, 800c1e8 <__ieee754_rem_pio2+0x2e8>)
 800bfbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc2:	f7f4 f973 	bl	80002ac <__adddf3>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	e9c4 2300 	strd	r2, r3, [r4]
 800bfce:	4630      	mov	r0, r6
 800bfd0:	4639      	mov	r1, r7
 800bfd2:	f7f4 f969 	bl	80002a8 <__aeabi_dsub>
 800bfd6:	a384      	add	r3, pc, #528	; (adr r3, 800c1e8 <__ieee754_rem_pio2+0x2e8>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	f7f4 f966 	bl	80002ac <__adddf3>
 800bfe0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bfe4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bfe8:	e7c6      	b.n	800bf78 <__ieee754_rem_pio2+0x78>
 800bfea:	a381      	add	r3, pc, #516	; (adr r3, 800c1f0 <__ieee754_rem_pio2+0x2f0>)
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	f7f4 f95c 	bl	80002ac <__adddf3>
 800bff4:	a380      	add	r3, pc, #512	; (adr r3, 800c1f8 <__ieee754_rem_pio2+0x2f8>)
 800bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffa:	4606      	mov	r6, r0
 800bffc:	460f      	mov	r7, r1
 800bffe:	f7f4 f955 	bl	80002ac <__adddf3>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	e9c4 2300 	strd	r2, r3, [r4]
 800c00a:	4630      	mov	r0, r6
 800c00c:	4639      	mov	r1, r7
 800c00e:	f7f4 f94b 	bl	80002a8 <__aeabi_dsub>
 800c012:	a379      	add	r3, pc, #484	; (adr r3, 800c1f8 <__ieee754_rem_pio2+0x2f8>)
 800c014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c018:	e7e0      	b.n	800bfdc <__ieee754_rem_pio2+0xdc>
 800c01a:	4b82      	ldr	r3, [pc, #520]	; (800c224 <__ieee754_rem_pio2+0x324>)
 800c01c:	4598      	cmp	r8, r3
 800c01e:	f300 80d0 	bgt.w	800c1c2 <__ieee754_rem_pio2+0x2c2>
 800c022:	f000 feb7 	bl	800cd94 <fabs>
 800c026:	ec57 6b10 	vmov	r6, r7, d0
 800c02a:	ee10 0a10 	vmov	r0, s0
 800c02e:	a374      	add	r3, pc, #464	; (adr r3, 800c200 <__ieee754_rem_pio2+0x300>)
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	4639      	mov	r1, r7
 800c036:	f7f4 faef 	bl	8000618 <__aeabi_dmul>
 800c03a:	2200      	movs	r2, #0
 800c03c:	4b7a      	ldr	r3, [pc, #488]	; (800c228 <__ieee754_rem_pio2+0x328>)
 800c03e:	f7f4 f935 	bl	80002ac <__adddf3>
 800c042:	f7f4 fd99 	bl	8000b78 <__aeabi_d2iz>
 800c046:	4605      	mov	r5, r0
 800c048:	f7f4 fa7c 	bl	8000544 <__aeabi_i2d>
 800c04c:	a364      	add	r3, pc, #400	; (adr r3, 800c1e0 <__ieee754_rem_pio2+0x2e0>)
 800c04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c052:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c056:	f7f4 fadf 	bl	8000618 <__aeabi_dmul>
 800c05a:	4602      	mov	r2, r0
 800c05c:	460b      	mov	r3, r1
 800c05e:	4630      	mov	r0, r6
 800c060:	4639      	mov	r1, r7
 800c062:	f7f4 f921 	bl	80002a8 <__aeabi_dsub>
 800c066:	a360      	add	r3, pc, #384	; (adr r3, 800c1e8 <__ieee754_rem_pio2+0x2e8>)
 800c068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c06c:	4682      	mov	sl, r0
 800c06e:	468b      	mov	fp, r1
 800c070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c074:	f7f4 fad0 	bl	8000618 <__aeabi_dmul>
 800c078:	2d1f      	cmp	r5, #31
 800c07a:	4606      	mov	r6, r0
 800c07c:	460f      	mov	r7, r1
 800c07e:	dc0c      	bgt.n	800c09a <__ieee754_rem_pio2+0x19a>
 800c080:	1e6a      	subs	r2, r5, #1
 800c082:	4b6a      	ldr	r3, [pc, #424]	; (800c22c <__ieee754_rem_pio2+0x32c>)
 800c084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c088:	4543      	cmp	r3, r8
 800c08a:	d006      	beq.n	800c09a <__ieee754_rem_pio2+0x19a>
 800c08c:	4632      	mov	r2, r6
 800c08e:	463b      	mov	r3, r7
 800c090:	4650      	mov	r0, sl
 800c092:	4659      	mov	r1, fp
 800c094:	f7f4 f908 	bl	80002a8 <__aeabi_dsub>
 800c098:	e00e      	b.n	800c0b8 <__ieee754_rem_pio2+0x1b8>
 800c09a:	4632      	mov	r2, r6
 800c09c:	463b      	mov	r3, r7
 800c09e:	4650      	mov	r0, sl
 800c0a0:	4659      	mov	r1, fp
 800c0a2:	f7f4 f901 	bl	80002a8 <__aeabi_dsub>
 800c0a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c0aa:	9305      	str	r3, [sp, #20]
 800c0ac:	9a05      	ldr	r2, [sp, #20]
 800c0ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c0b2:	1ad3      	subs	r3, r2, r3
 800c0b4:	2b10      	cmp	r3, #16
 800c0b6:	dc02      	bgt.n	800c0be <__ieee754_rem_pio2+0x1be>
 800c0b8:	e9c4 0100 	strd	r0, r1, [r4]
 800c0bc:	e039      	b.n	800c132 <__ieee754_rem_pio2+0x232>
 800c0be:	a34c      	add	r3, pc, #304	; (adr r3, 800c1f0 <__ieee754_rem_pio2+0x2f0>)
 800c0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0c8:	f7f4 faa6 	bl	8000618 <__aeabi_dmul>
 800c0cc:	4606      	mov	r6, r0
 800c0ce:	460f      	mov	r7, r1
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4650      	mov	r0, sl
 800c0d6:	4659      	mov	r1, fp
 800c0d8:	f7f4 f8e6 	bl	80002a8 <__aeabi_dsub>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	460b      	mov	r3, r1
 800c0e0:	4680      	mov	r8, r0
 800c0e2:	4689      	mov	r9, r1
 800c0e4:	4650      	mov	r0, sl
 800c0e6:	4659      	mov	r1, fp
 800c0e8:	f7f4 f8de 	bl	80002a8 <__aeabi_dsub>
 800c0ec:	4632      	mov	r2, r6
 800c0ee:	463b      	mov	r3, r7
 800c0f0:	f7f4 f8da 	bl	80002a8 <__aeabi_dsub>
 800c0f4:	a340      	add	r3, pc, #256	; (adr r3, 800c1f8 <__ieee754_rem_pio2+0x2f8>)
 800c0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fa:	4606      	mov	r6, r0
 800c0fc:	460f      	mov	r7, r1
 800c0fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c102:	f7f4 fa89 	bl	8000618 <__aeabi_dmul>
 800c106:	4632      	mov	r2, r6
 800c108:	463b      	mov	r3, r7
 800c10a:	f7f4 f8cd 	bl	80002a8 <__aeabi_dsub>
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	4606      	mov	r6, r0
 800c114:	460f      	mov	r7, r1
 800c116:	4640      	mov	r0, r8
 800c118:	4649      	mov	r1, r9
 800c11a:	f7f4 f8c5 	bl	80002a8 <__aeabi_dsub>
 800c11e:	9a05      	ldr	r2, [sp, #20]
 800c120:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	2b31      	cmp	r3, #49	; 0x31
 800c128:	dc20      	bgt.n	800c16c <__ieee754_rem_pio2+0x26c>
 800c12a:	e9c4 0100 	strd	r0, r1, [r4]
 800c12e:	46c2      	mov	sl, r8
 800c130:	46cb      	mov	fp, r9
 800c132:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c136:	4650      	mov	r0, sl
 800c138:	4642      	mov	r2, r8
 800c13a:	464b      	mov	r3, r9
 800c13c:	4659      	mov	r1, fp
 800c13e:	f7f4 f8b3 	bl	80002a8 <__aeabi_dsub>
 800c142:	463b      	mov	r3, r7
 800c144:	4632      	mov	r2, r6
 800c146:	f7f4 f8af 	bl	80002a8 <__aeabi_dsub>
 800c14a:	9b04      	ldr	r3, [sp, #16]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c152:	f6bf af11 	bge.w	800bf78 <__ieee754_rem_pio2+0x78>
 800c156:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c15a:	6063      	str	r3, [r4, #4]
 800c15c:	f8c4 8000 	str.w	r8, [r4]
 800c160:	60a0      	str	r0, [r4, #8]
 800c162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c166:	60e3      	str	r3, [r4, #12]
 800c168:	426d      	negs	r5, r5
 800c16a:	e705      	b.n	800bf78 <__ieee754_rem_pio2+0x78>
 800c16c:	a326      	add	r3, pc, #152	; (adr r3, 800c208 <__ieee754_rem_pio2+0x308>)
 800c16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c172:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c176:	f7f4 fa4f 	bl	8000618 <__aeabi_dmul>
 800c17a:	4606      	mov	r6, r0
 800c17c:	460f      	mov	r7, r1
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	4640      	mov	r0, r8
 800c184:	4649      	mov	r1, r9
 800c186:	f7f4 f88f 	bl	80002a8 <__aeabi_dsub>
 800c18a:	4602      	mov	r2, r0
 800c18c:	460b      	mov	r3, r1
 800c18e:	4682      	mov	sl, r0
 800c190:	468b      	mov	fp, r1
 800c192:	4640      	mov	r0, r8
 800c194:	4649      	mov	r1, r9
 800c196:	f7f4 f887 	bl	80002a8 <__aeabi_dsub>
 800c19a:	4632      	mov	r2, r6
 800c19c:	463b      	mov	r3, r7
 800c19e:	f7f4 f883 	bl	80002a8 <__aeabi_dsub>
 800c1a2:	a31b      	add	r3, pc, #108	; (adr r3, 800c210 <__ieee754_rem_pio2+0x310>)
 800c1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a8:	4606      	mov	r6, r0
 800c1aa:	460f      	mov	r7, r1
 800c1ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1b0:	f7f4 fa32 	bl	8000618 <__aeabi_dmul>
 800c1b4:	4632      	mov	r2, r6
 800c1b6:	463b      	mov	r3, r7
 800c1b8:	f7f4 f876 	bl	80002a8 <__aeabi_dsub>
 800c1bc:	4606      	mov	r6, r0
 800c1be:	460f      	mov	r7, r1
 800c1c0:	e764      	b.n	800c08c <__ieee754_rem_pio2+0x18c>
 800c1c2:	4b1b      	ldr	r3, [pc, #108]	; (800c230 <__ieee754_rem_pio2+0x330>)
 800c1c4:	4598      	cmp	r8, r3
 800c1c6:	dd35      	ble.n	800c234 <__ieee754_rem_pio2+0x334>
 800c1c8:	ee10 2a10 	vmov	r2, s0
 800c1cc:	463b      	mov	r3, r7
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	4639      	mov	r1, r7
 800c1d2:	f7f4 f869 	bl	80002a8 <__aeabi_dsub>
 800c1d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c1da:	e9c4 0100 	strd	r0, r1, [r4]
 800c1de:	e6a1      	b.n	800bf24 <__ieee754_rem_pio2+0x24>
 800c1e0:	54400000 	.word	0x54400000
 800c1e4:	3ff921fb 	.word	0x3ff921fb
 800c1e8:	1a626331 	.word	0x1a626331
 800c1ec:	3dd0b461 	.word	0x3dd0b461
 800c1f0:	1a600000 	.word	0x1a600000
 800c1f4:	3dd0b461 	.word	0x3dd0b461
 800c1f8:	2e037073 	.word	0x2e037073
 800c1fc:	3ba3198a 	.word	0x3ba3198a
 800c200:	6dc9c883 	.word	0x6dc9c883
 800c204:	3fe45f30 	.word	0x3fe45f30
 800c208:	2e000000 	.word	0x2e000000
 800c20c:	3ba3198a 	.word	0x3ba3198a
 800c210:	252049c1 	.word	0x252049c1
 800c214:	397b839a 	.word	0x397b839a
 800c218:	3fe921fb 	.word	0x3fe921fb
 800c21c:	4002d97b 	.word	0x4002d97b
 800c220:	3ff921fb 	.word	0x3ff921fb
 800c224:	413921fb 	.word	0x413921fb
 800c228:	3fe00000 	.word	0x3fe00000
 800c22c:	0800e890 	.word	0x0800e890
 800c230:	7fefffff 	.word	0x7fefffff
 800c234:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c238:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c23c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c240:	4630      	mov	r0, r6
 800c242:	460f      	mov	r7, r1
 800c244:	f7f4 fc98 	bl	8000b78 <__aeabi_d2iz>
 800c248:	f7f4 f97c 	bl	8000544 <__aeabi_i2d>
 800c24c:	4602      	mov	r2, r0
 800c24e:	460b      	mov	r3, r1
 800c250:	4630      	mov	r0, r6
 800c252:	4639      	mov	r1, r7
 800c254:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c258:	f7f4 f826 	bl	80002a8 <__aeabi_dsub>
 800c25c:	2200      	movs	r2, #0
 800c25e:	4b1f      	ldr	r3, [pc, #124]	; (800c2dc <__ieee754_rem_pio2+0x3dc>)
 800c260:	f7f4 f9da 	bl	8000618 <__aeabi_dmul>
 800c264:	460f      	mov	r7, r1
 800c266:	4606      	mov	r6, r0
 800c268:	f7f4 fc86 	bl	8000b78 <__aeabi_d2iz>
 800c26c:	f7f4 f96a 	bl	8000544 <__aeabi_i2d>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	4630      	mov	r0, r6
 800c276:	4639      	mov	r1, r7
 800c278:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c27c:	f7f4 f814 	bl	80002a8 <__aeabi_dsub>
 800c280:	2200      	movs	r2, #0
 800c282:	4b16      	ldr	r3, [pc, #88]	; (800c2dc <__ieee754_rem_pio2+0x3dc>)
 800c284:	f7f4 f9c8 	bl	8000618 <__aeabi_dmul>
 800c288:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c28c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c290:	f04f 0803 	mov.w	r8, #3
 800c294:	2600      	movs	r6, #0
 800c296:	2700      	movs	r7, #0
 800c298:	4632      	mov	r2, r6
 800c29a:	463b      	mov	r3, r7
 800c29c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c2a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800c2a4:	f7f4 fc20 	bl	8000ae8 <__aeabi_dcmpeq>
 800c2a8:	b9b0      	cbnz	r0, 800c2d8 <__ieee754_rem_pio2+0x3d8>
 800c2aa:	4b0d      	ldr	r3, [pc, #52]	; (800c2e0 <__ieee754_rem_pio2+0x3e0>)
 800c2ac:	9301      	str	r3, [sp, #4]
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	462a      	mov	r2, r5
 800c2b4:	4643      	mov	r3, r8
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	a806      	add	r0, sp, #24
 800c2ba:	f000 f971 	bl	800c5a0 <__kernel_rem_pio2>
 800c2be:	9b04      	ldr	r3, [sp, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	4605      	mov	r5, r0
 800c2c4:	f6bf ae58 	bge.w	800bf78 <__ieee754_rem_pio2+0x78>
 800c2c8:	6863      	ldr	r3, [r4, #4]
 800c2ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c2ce:	6063      	str	r3, [r4, #4]
 800c2d0:	68e3      	ldr	r3, [r4, #12]
 800c2d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c2d6:	e746      	b.n	800c166 <__ieee754_rem_pio2+0x266>
 800c2d8:	46d0      	mov	r8, sl
 800c2da:	e7dd      	b.n	800c298 <__ieee754_rem_pio2+0x398>
 800c2dc:	41700000 	.word	0x41700000
 800c2e0:	0800e910 	.word	0x0800e910

0800c2e4 <__ieee754_hypotf>:
 800c2e4:	ee10 3a10 	vmov	r3, s0
 800c2e8:	ee10 2a90 	vmov	r2, s1
 800c2ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	bfbe      	ittt	lt
 800c2f8:	4619      	movlt	r1, r3
 800c2fa:	4613      	movlt	r3, r2
 800c2fc:	460a      	movlt	r2, r1
 800c2fe:	1a99      	subs	r1, r3, r2
 800c300:	f1b1 6f70 	cmp.w	r1, #251658240	; 0xf000000
 800c304:	b510      	push	{r4, lr}
 800c306:	ee00 3a10 	vmov	s0, r3
 800c30a:	ee06 2a90 	vmov	s13, r2
 800c30e:	dd02      	ble.n	800c316 <__ieee754_hypotf+0x32>
 800c310:	ee30 0a26 	vadd.f32	s0, s0, s13
 800c314:	bd10      	pop	{r4, pc}
 800c316:	f1b3 4fb1 	cmp.w	r3, #1484783616	; 0x58800000
 800c31a:	dd48      	ble.n	800c3ae <__ieee754_hypotf+0xca>
 800c31c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c320:	db0c      	blt.n	800c33c <__ieee754_hypotf+0x58>
 800c322:	bf14      	ite	ne
 800c324:	ee30 0a26 	vaddne.f32	s0, s0, s13
 800c328:	ed9f 0a33 	vldreq	s0, [pc, #204]	; 800c3f8 <__ieee754_hypotf+0x114>
 800c32c:	eddf 7a32 	vldr	s15, [pc, #200]	; 800c3f8 <__ieee754_hypotf+0x114>
 800c330:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c334:	bf08      	it	eq
 800c336:	eeb0 0a67 	vmoveq.f32	s0, s15
 800c33a:	e7eb      	b.n	800c314 <__ieee754_hypotf+0x30>
 800c33c:	f103 435e 	add.w	r3, r3, #3724541952	; 0xde000000
 800c340:	f102 425e 	add.w	r2, r2, #3724541952	; 0xde000000
 800c344:	ee00 3a10 	vmov	s0, r3
 800c348:	ee06 2a90 	vmov	s13, r2
 800c34c:	2444      	movs	r4, #68	; 0x44
 800c34e:	f1b2 5f1a 	cmp.w	r2, #645922816	; 0x26800000
 800c352:	da0b      	bge.n	800c36c <__ieee754_hypotf+0x88>
 800c354:	2a00      	cmp	r2, #0
 800c356:	d0dd      	beq.n	800c314 <__ieee754_hypotf+0x30>
 800c358:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800c35c:	da29      	bge.n	800c3b2 <__ieee754_hypotf+0xce>
 800c35e:	eddf 7a27 	vldr	s15, [pc, #156]	; 800c3fc <__ieee754_hypotf+0x118>
 800c362:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c366:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c36a:	3c7e      	subs	r4, #126	; 0x7e
 800c36c:	ee30 6a66 	vsub.f32	s12, s0, s13
 800c370:	4923      	ldr	r1, [pc, #140]	; (800c400 <__ieee754_hypotf+0x11c>)
 800c372:	eef4 6ac6 	vcmpe.f32	s13, s12
 800c376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c37a:	d524      	bpl.n	800c3c6 <__ieee754_hypotf+0xe2>
 800c37c:	400b      	ands	r3, r1
 800c37e:	ee07 3a90 	vmov	s15, r3
 800c382:	ee30 7a27 	vadd.f32	s14, s0, s15
 800c386:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c38a:	ee20 0a47 	vnmul.f32	s0, s0, s14
 800c38e:	eea6 0ae6 	vfms.f32	s0, s13, s13
 800c392:	ee97 0aa7 	vfnms.f32	s0, s15, s15
 800c396:	f000 f835 	bl	800c404 <__ieee754_sqrtf>
 800c39a:	2c00      	cmp	r4, #0
 800c39c:	d0ba      	beq.n	800c314 <__ieee754_hypotf+0x30>
 800c39e:	05e4      	lsls	r4, r4, #23
 800c3a0:	f104 547e 	add.w	r4, r4, #1065353216	; 0x3f800000
 800c3a4:	ee07 4a90 	vmov	s15, r4
 800c3a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c3ac:	e7b2      	b.n	800c314 <__ieee754_hypotf+0x30>
 800c3ae:	2400      	movs	r4, #0
 800c3b0:	e7cd      	b.n	800c34e <__ieee754_hypotf+0x6a>
 800c3b2:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 800c3b6:	f102 5208 	add.w	r2, r2, #570425344	; 0x22000000
 800c3ba:	3c44      	subs	r4, #68	; 0x44
 800c3bc:	ee00 3a10 	vmov	s0, r3
 800c3c0:	ee06 2a90 	vmov	s13, r2
 800c3c4:	e7d2      	b.n	800c36c <__ieee754_hypotf+0x88>
 800c3c6:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 800c3ca:	ee05 3a10 	vmov	s10, r3
 800c3ce:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c3d2:	ee90 5a25 	vfnms.f32	s10, s0, s11
 800c3d6:	400a      	ands	r2, r1
 800c3d8:	ee07 2a10 	vmov	s14, r2
 800c3dc:	ee07 3a90 	vmov	s15, r3
 800c3e0:	ee25 0a26 	vmul.f32	s0, s10, s13
 800c3e4:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800c3e8:	eea7 0aa6 	vfma.f32	s0, s15, s13
 800c3ec:	ee96 0a46 	vfnma.f32	s0, s12, s12
 800c3f0:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800c3f4:	e7cf      	b.n	800c396 <__ieee754_hypotf+0xb2>
 800c3f6:	bf00      	nop
 800c3f8:	7f800000 	.word	0x7f800000
 800c3fc:	7e800000 	.word	0x7e800000
 800c400:	fffff000 	.word	0xfffff000

0800c404 <__ieee754_sqrtf>:
 800c404:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c408:	4770      	bx	lr
 800c40a:	0000      	movs	r0, r0
 800c40c:	0000      	movs	r0, r0
	...

0800c410 <__kernel_cos>:
 800c410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	ec59 8b10 	vmov	r8, r9, d0
 800c418:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800c41c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c420:	ed2d 8b02 	vpush	{d8}
 800c424:	eeb0 8a41 	vmov.f32	s16, s2
 800c428:	eef0 8a61 	vmov.f32	s17, s3
 800c42c:	da07      	bge.n	800c43e <__kernel_cos+0x2e>
 800c42e:	ee10 0a10 	vmov	r0, s0
 800c432:	4649      	mov	r1, r9
 800c434:	f7f4 fba0 	bl	8000b78 <__aeabi_d2iz>
 800c438:	2800      	cmp	r0, #0
 800c43a:	f000 8089 	beq.w	800c550 <__kernel_cos+0x140>
 800c43e:	4642      	mov	r2, r8
 800c440:	464b      	mov	r3, r9
 800c442:	4640      	mov	r0, r8
 800c444:	4649      	mov	r1, r9
 800c446:	f7f4 f8e7 	bl	8000618 <__aeabi_dmul>
 800c44a:	2200      	movs	r2, #0
 800c44c:	4b4e      	ldr	r3, [pc, #312]	; (800c588 <__kernel_cos+0x178>)
 800c44e:	4604      	mov	r4, r0
 800c450:	460d      	mov	r5, r1
 800c452:	f7f4 f8e1 	bl	8000618 <__aeabi_dmul>
 800c456:	a340      	add	r3, pc, #256	; (adr r3, 800c558 <__kernel_cos+0x148>)
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	4682      	mov	sl, r0
 800c45e:	468b      	mov	fp, r1
 800c460:	4620      	mov	r0, r4
 800c462:	4629      	mov	r1, r5
 800c464:	f7f4 f8d8 	bl	8000618 <__aeabi_dmul>
 800c468:	a33d      	add	r3, pc, #244	; (adr r3, 800c560 <__kernel_cos+0x150>)
 800c46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46e:	f7f3 ff1d 	bl	80002ac <__adddf3>
 800c472:	4622      	mov	r2, r4
 800c474:	462b      	mov	r3, r5
 800c476:	f7f4 f8cf 	bl	8000618 <__aeabi_dmul>
 800c47a:	a33b      	add	r3, pc, #236	; (adr r3, 800c568 <__kernel_cos+0x158>)
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	f7f3 ff12 	bl	80002a8 <__aeabi_dsub>
 800c484:	4622      	mov	r2, r4
 800c486:	462b      	mov	r3, r5
 800c488:	f7f4 f8c6 	bl	8000618 <__aeabi_dmul>
 800c48c:	a338      	add	r3, pc, #224	; (adr r3, 800c570 <__kernel_cos+0x160>)
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	f7f3 ff0b 	bl	80002ac <__adddf3>
 800c496:	4622      	mov	r2, r4
 800c498:	462b      	mov	r3, r5
 800c49a:	f7f4 f8bd 	bl	8000618 <__aeabi_dmul>
 800c49e:	a336      	add	r3, pc, #216	; (adr r3, 800c578 <__kernel_cos+0x168>)
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f7f3 ff00 	bl	80002a8 <__aeabi_dsub>
 800c4a8:	4622      	mov	r2, r4
 800c4aa:	462b      	mov	r3, r5
 800c4ac:	f7f4 f8b4 	bl	8000618 <__aeabi_dmul>
 800c4b0:	a333      	add	r3, pc, #204	; (adr r3, 800c580 <__kernel_cos+0x170>)
 800c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b6:	f7f3 fef9 	bl	80002ac <__adddf3>
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	462b      	mov	r3, r5
 800c4be:	f7f4 f8ab 	bl	8000618 <__aeabi_dmul>
 800c4c2:	4622      	mov	r2, r4
 800c4c4:	462b      	mov	r3, r5
 800c4c6:	f7f4 f8a7 	bl	8000618 <__aeabi_dmul>
 800c4ca:	ec53 2b18 	vmov	r2, r3, d8
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	460d      	mov	r5, r1
 800c4d2:	4640      	mov	r0, r8
 800c4d4:	4649      	mov	r1, r9
 800c4d6:	f7f4 f89f 	bl	8000618 <__aeabi_dmul>
 800c4da:	460b      	mov	r3, r1
 800c4dc:	4602      	mov	r2, r0
 800c4de:	4629      	mov	r1, r5
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f7f3 fee1 	bl	80002a8 <__aeabi_dsub>
 800c4e6:	4b29      	ldr	r3, [pc, #164]	; (800c58c <__kernel_cos+0x17c>)
 800c4e8:	429e      	cmp	r6, r3
 800c4ea:	4680      	mov	r8, r0
 800c4ec:	4689      	mov	r9, r1
 800c4ee:	dc11      	bgt.n	800c514 <__kernel_cos+0x104>
 800c4f0:	4602      	mov	r2, r0
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4650      	mov	r0, sl
 800c4f6:	4659      	mov	r1, fp
 800c4f8:	f7f3 fed6 	bl	80002a8 <__aeabi_dsub>
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	4924      	ldr	r1, [pc, #144]	; (800c590 <__kernel_cos+0x180>)
 800c500:	4602      	mov	r2, r0
 800c502:	2000      	movs	r0, #0
 800c504:	f7f3 fed0 	bl	80002a8 <__aeabi_dsub>
 800c508:	ecbd 8b02 	vpop	{d8}
 800c50c:	ec41 0b10 	vmov	d0, r0, r1
 800c510:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c514:	4b1f      	ldr	r3, [pc, #124]	; (800c594 <__kernel_cos+0x184>)
 800c516:	491e      	ldr	r1, [pc, #120]	; (800c590 <__kernel_cos+0x180>)
 800c518:	429e      	cmp	r6, r3
 800c51a:	bfcc      	ite	gt
 800c51c:	4d1e      	ldrgt	r5, [pc, #120]	; (800c598 <__kernel_cos+0x188>)
 800c51e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c522:	2400      	movs	r4, #0
 800c524:	4622      	mov	r2, r4
 800c526:	462b      	mov	r3, r5
 800c528:	2000      	movs	r0, #0
 800c52a:	f7f3 febd 	bl	80002a8 <__aeabi_dsub>
 800c52e:	4622      	mov	r2, r4
 800c530:	4606      	mov	r6, r0
 800c532:	460f      	mov	r7, r1
 800c534:	462b      	mov	r3, r5
 800c536:	4650      	mov	r0, sl
 800c538:	4659      	mov	r1, fp
 800c53a:	f7f3 feb5 	bl	80002a8 <__aeabi_dsub>
 800c53e:	4642      	mov	r2, r8
 800c540:	464b      	mov	r3, r9
 800c542:	f7f3 feb1 	bl	80002a8 <__aeabi_dsub>
 800c546:	4602      	mov	r2, r0
 800c548:	460b      	mov	r3, r1
 800c54a:	4630      	mov	r0, r6
 800c54c:	4639      	mov	r1, r7
 800c54e:	e7d9      	b.n	800c504 <__kernel_cos+0xf4>
 800c550:	2000      	movs	r0, #0
 800c552:	490f      	ldr	r1, [pc, #60]	; (800c590 <__kernel_cos+0x180>)
 800c554:	e7d8      	b.n	800c508 <__kernel_cos+0xf8>
 800c556:	bf00      	nop
 800c558:	be8838d4 	.word	0xbe8838d4
 800c55c:	bda8fae9 	.word	0xbda8fae9
 800c560:	bdb4b1c4 	.word	0xbdb4b1c4
 800c564:	3e21ee9e 	.word	0x3e21ee9e
 800c568:	809c52ad 	.word	0x809c52ad
 800c56c:	3e927e4f 	.word	0x3e927e4f
 800c570:	19cb1590 	.word	0x19cb1590
 800c574:	3efa01a0 	.word	0x3efa01a0
 800c578:	16c15177 	.word	0x16c15177
 800c57c:	3f56c16c 	.word	0x3f56c16c
 800c580:	5555554c 	.word	0x5555554c
 800c584:	3fa55555 	.word	0x3fa55555
 800c588:	3fe00000 	.word	0x3fe00000
 800c58c:	3fd33332 	.word	0x3fd33332
 800c590:	3ff00000 	.word	0x3ff00000
 800c594:	3fe90000 	.word	0x3fe90000
 800c598:	3fd20000 	.word	0x3fd20000
 800c59c:	00000000 	.word	0x00000000

0800c5a0 <__kernel_rem_pio2>:
 800c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a4:	ed2d 8b02 	vpush	{d8}
 800c5a8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c5ac:	1ed4      	subs	r4, r2, #3
 800c5ae:	9308      	str	r3, [sp, #32]
 800c5b0:	9101      	str	r1, [sp, #4]
 800c5b2:	4bc5      	ldr	r3, [pc, #788]	; (800c8c8 <__kernel_rem_pio2+0x328>)
 800c5b4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c5b6:	9009      	str	r0, [sp, #36]	; 0x24
 800c5b8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c5bc:	9304      	str	r3, [sp, #16]
 800c5be:	9b08      	ldr	r3, [sp, #32]
 800c5c0:	3b01      	subs	r3, #1
 800c5c2:	9307      	str	r3, [sp, #28]
 800c5c4:	2318      	movs	r3, #24
 800c5c6:	fb94 f4f3 	sdiv	r4, r4, r3
 800c5ca:	f06f 0317 	mvn.w	r3, #23
 800c5ce:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c5d2:	fb04 3303 	mla	r3, r4, r3, r3
 800c5d6:	eb03 0a02 	add.w	sl, r3, r2
 800c5da:	9b04      	ldr	r3, [sp, #16]
 800c5dc:	9a07      	ldr	r2, [sp, #28]
 800c5de:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800c8b8 <__kernel_rem_pio2+0x318>
 800c5e2:	eb03 0802 	add.w	r8, r3, r2
 800c5e6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c5e8:	1aa7      	subs	r7, r4, r2
 800c5ea:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c5ee:	ae22      	add	r6, sp, #136	; 0x88
 800c5f0:	2500      	movs	r5, #0
 800c5f2:	4545      	cmp	r5, r8
 800c5f4:	dd13      	ble.n	800c61e <__kernel_rem_pio2+0x7e>
 800c5f6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800c8b8 <__kernel_rem_pio2+0x318>
 800c5fa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c5fe:	2600      	movs	r6, #0
 800c600:	9b04      	ldr	r3, [sp, #16]
 800c602:	429e      	cmp	r6, r3
 800c604:	dc32      	bgt.n	800c66c <__kernel_rem_pio2+0xcc>
 800c606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c608:	9302      	str	r3, [sp, #8]
 800c60a:	9b08      	ldr	r3, [sp, #32]
 800c60c:	199d      	adds	r5, r3, r6
 800c60e:	ab22      	add	r3, sp, #136	; 0x88
 800c610:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c614:	9306      	str	r3, [sp, #24]
 800c616:	ec59 8b18 	vmov	r8, r9, d8
 800c61a:	2700      	movs	r7, #0
 800c61c:	e01f      	b.n	800c65e <__kernel_rem_pio2+0xbe>
 800c61e:	42ef      	cmn	r7, r5
 800c620:	d407      	bmi.n	800c632 <__kernel_rem_pio2+0x92>
 800c622:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c626:	f7f3 ff8d 	bl	8000544 <__aeabi_i2d>
 800c62a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c62e:	3501      	adds	r5, #1
 800c630:	e7df      	b.n	800c5f2 <__kernel_rem_pio2+0x52>
 800c632:	ec51 0b18 	vmov	r0, r1, d8
 800c636:	e7f8      	b.n	800c62a <__kernel_rem_pio2+0x8a>
 800c638:	9906      	ldr	r1, [sp, #24]
 800c63a:	9d02      	ldr	r5, [sp, #8]
 800c63c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c640:	9106      	str	r1, [sp, #24]
 800c642:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800c646:	9502      	str	r5, [sp, #8]
 800c648:	f7f3 ffe6 	bl	8000618 <__aeabi_dmul>
 800c64c:	4602      	mov	r2, r0
 800c64e:	460b      	mov	r3, r1
 800c650:	4640      	mov	r0, r8
 800c652:	4649      	mov	r1, r9
 800c654:	f7f3 fe2a 	bl	80002ac <__adddf3>
 800c658:	3701      	adds	r7, #1
 800c65a:	4680      	mov	r8, r0
 800c65c:	4689      	mov	r9, r1
 800c65e:	9b07      	ldr	r3, [sp, #28]
 800c660:	429f      	cmp	r7, r3
 800c662:	dde9      	ble.n	800c638 <__kernel_rem_pio2+0x98>
 800c664:	e8eb 8902 	strd	r8, r9, [fp], #8
 800c668:	3601      	adds	r6, #1
 800c66a:	e7c9      	b.n	800c600 <__kernel_rem_pio2+0x60>
 800c66c:	9b04      	ldr	r3, [sp, #16]
 800c66e:	aa0e      	add	r2, sp, #56	; 0x38
 800c670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c674:	930c      	str	r3, [sp, #48]	; 0x30
 800c676:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c678:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c67c:	9c04      	ldr	r4, [sp, #16]
 800c67e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c680:	ab9a      	add	r3, sp, #616	; 0x268
 800c682:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800c686:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c68a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c68e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c692:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c696:	ab9a      	add	r3, sp, #616	; 0x268
 800c698:	445b      	add	r3, fp
 800c69a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800c69e:	2500      	movs	r5, #0
 800c6a0:	1b63      	subs	r3, r4, r5
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	dc78      	bgt.n	800c798 <__kernel_rem_pio2+0x1f8>
 800c6a6:	4650      	mov	r0, sl
 800c6a8:	ec49 8b10 	vmov	d0, r8, r9
 800c6ac:	f000 fc0c 	bl	800cec8 <scalbn>
 800c6b0:	ec57 6b10 	vmov	r6, r7, d0
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c6ba:	ee10 0a10 	vmov	r0, s0
 800c6be:	4639      	mov	r1, r7
 800c6c0:	f7f3 ffaa 	bl	8000618 <__aeabi_dmul>
 800c6c4:	ec41 0b10 	vmov	d0, r0, r1
 800c6c8:	f000 fb76 	bl	800cdb8 <floor>
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	ec51 0b10 	vmov	r0, r1, d0
 800c6d2:	4b7e      	ldr	r3, [pc, #504]	; (800c8cc <__kernel_rem_pio2+0x32c>)
 800c6d4:	f7f3 ffa0 	bl	8000618 <__aeabi_dmul>
 800c6d8:	4602      	mov	r2, r0
 800c6da:	460b      	mov	r3, r1
 800c6dc:	4630      	mov	r0, r6
 800c6de:	4639      	mov	r1, r7
 800c6e0:	f7f3 fde2 	bl	80002a8 <__aeabi_dsub>
 800c6e4:	460f      	mov	r7, r1
 800c6e6:	4606      	mov	r6, r0
 800c6e8:	f7f4 fa46 	bl	8000b78 <__aeabi_d2iz>
 800c6ec:	9006      	str	r0, [sp, #24]
 800c6ee:	f7f3 ff29 	bl	8000544 <__aeabi_i2d>
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	4639      	mov	r1, r7
 800c6fa:	f7f3 fdd5 	bl	80002a8 <__aeabi_dsub>
 800c6fe:	f1ba 0f00 	cmp.w	sl, #0
 800c702:	4606      	mov	r6, r0
 800c704:	460f      	mov	r7, r1
 800c706:	dd6c      	ble.n	800c7e2 <__kernel_rem_pio2+0x242>
 800c708:	1e62      	subs	r2, r4, #1
 800c70a:	ab0e      	add	r3, sp, #56	; 0x38
 800c70c:	f1ca 0118 	rsb	r1, sl, #24
 800c710:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c714:	9d06      	ldr	r5, [sp, #24]
 800c716:	fa40 f301 	asr.w	r3, r0, r1
 800c71a:	441d      	add	r5, r3
 800c71c:	408b      	lsls	r3, r1
 800c71e:	1ac0      	subs	r0, r0, r3
 800c720:	ab0e      	add	r3, sp, #56	; 0x38
 800c722:	9506      	str	r5, [sp, #24]
 800c724:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c728:	f1ca 0317 	rsb	r3, sl, #23
 800c72c:	fa40 f303 	asr.w	r3, r0, r3
 800c730:	9302      	str	r3, [sp, #8]
 800c732:	9b02      	ldr	r3, [sp, #8]
 800c734:	2b00      	cmp	r3, #0
 800c736:	dd62      	ble.n	800c7fe <__kernel_rem_pio2+0x25e>
 800c738:	9b06      	ldr	r3, [sp, #24]
 800c73a:	2200      	movs	r2, #0
 800c73c:	3301      	adds	r3, #1
 800c73e:	9306      	str	r3, [sp, #24]
 800c740:	4615      	mov	r5, r2
 800c742:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c746:	4294      	cmp	r4, r2
 800c748:	f300 8095 	bgt.w	800c876 <__kernel_rem_pio2+0x2d6>
 800c74c:	f1ba 0f00 	cmp.w	sl, #0
 800c750:	dd07      	ble.n	800c762 <__kernel_rem_pio2+0x1c2>
 800c752:	f1ba 0f01 	cmp.w	sl, #1
 800c756:	f000 80a2 	beq.w	800c89e <__kernel_rem_pio2+0x2fe>
 800c75a:	f1ba 0f02 	cmp.w	sl, #2
 800c75e:	f000 80c1 	beq.w	800c8e4 <__kernel_rem_pio2+0x344>
 800c762:	9b02      	ldr	r3, [sp, #8]
 800c764:	2b02      	cmp	r3, #2
 800c766:	d14a      	bne.n	800c7fe <__kernel_rem_pio2+0x25e>
 800c768:	4632      	mov	r2, r6
 800c76a:	463b      	mov	r3, r7
 800c76c:	2000      	movs	r0, #0
 800c76e:	4958      	ldr	r1, [pc, #352]	; (800c8d0 <__kernel_rem_pio2+0x330>)
 800c770:	f7f3 fd9a 	bl	80002a8 <__aeabi_dsub>
 800c774:	4606      	mov	r6, r0
 800c776:	460f      	mov	r7, r1
 800c778:	2d00      	cmp	r5, #0
 800c77a:	d040      	beq.n	800c7fe <__kernel_rem_pio2+0x25e>
 800c77c:	4650      	mov	r0, sl
 800c77e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800c8c0 <__kernel_rem_pio2+0x320>
 800c782:	f000 fba1 	bl	800cec8 <scalbn>
 800c786:	4630      	mov	r0, r6
 800c788:	4639      	mov	r1, r7
 800c78a:	ec53 2b10 	vmov	r2, r3, d0
 800c78e:	f7f3 fd8b 	bl	80002a8 <__aeabi_dsub>
 800c792:	4606      	mov	r6, r0
 800c794:	460f      	mov	r7, r1
 800c796:	e032      	b.n	800c7fe <__kernel_rem_pio2+0x25e>
 800c798:	2200      	movs	r2, #0
 800c79a:	4b4e      	ldr	r3, [pc, #312]	; (800c8d4 <__kernel_rem_pio2+0x334>)
 800c79c:	4640      	mov	r0, r8
 800c79e:	4649      	mov	r1, r9
 800c7a0:	f7f3 ff3a 	bl	8000618 <__aeabi_dmul>
 800c7a4:	f7f4 f9e8 	bl	8000b78 <__aeabi_d2iz>
 800c7a8:	f7f3 fecc 	bl	8000544 <__aeabi_i2d>
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	4b4a      	ldr	r3, [pc, #296]	; (800c8d8 <__kernel_rem_pio2+0x338>)
 800c7b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c7b4:	f7f3 ff30 	bl	8000618 <__aeabi_dmul>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	4640      	mov	r0, r8
 800c7be:	4649      	mov	r1, r9
 800c7c0:	f7f3 fd72 	bl	80002a8 <__aeabi_dsub>
 800c7c4:	f7f4 f9d8 	bl	8000b78 <__aeabi_d2iz>
 800c7c8:	ab0e      	add	r3, sp, #56	; 0x38
 800c7ca:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800c7ce:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c7d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7d6:	f7f3 fd69 	bl	80002ac <__adddf3>
 800c7da:	3501      	adds	r5, #1
 800c7dc:	4680      	mov	r8, r0
 800c7de:	4689      	mov	r9, r1
 800c7e0:	e75e      	b.n	800c6a0 <__kernel_rem_pio2+0x100>
 800c7e2:	d105      	bne.n	800c7f0 <__kernel_rem_pio2+0x250>
 800c7e4:	1e63      	subs	r3, r4, #1
 800c7e6:	aa0e      	add	r2, sp, #56	; 0x38
 800c7e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c7ec:	15c3      	asrs	r3, r0, #23
 800c7ee:	e79f      	b.n	800c730 <__kernel_rem_pio2+0x190>
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	4b3a      	ldr	r3, [pc, #232]	; (800c8dc <__kernel_rem_pio2+0x33c>)
 800c7f4:	f7f4 f996 	bl	8000b24 <__aeabi_dcmpge>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	d139      	bne.n	800c870 <__kernel_rem_pio2+0x2d0>
 800c7fc:	9002      	str	r0, [sp, #8]
 800c7fe:	2200      	movs	r2, #0
 800c800:	2300      	movs	r3, #0
 800c802:	4630      	mov	r0, r6
 800c804:	4639      	mov	r1, r7
 800c806:	f7f4 f96f 	bl	8000ae8 <__aeabi_dcmpeq>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	f000 80c7 	beq.w	800c99e <__kernel_rem_pio2+0x3fe>
 800c810:	1e65      	subs	r5, r4, #1
 800c812:	462b      	mov	r3, r5
 800c814:	2200      	movs	r2, #0
 800c816:	9904      	ldr	r1, [sp, #16]
 800c818:	428b      	cmp	r3, r1
 800c81a:	da6a      	bge.n	800c8f2 <__kernel_rem_pio2+0x352>
 800c81c:	2a00      	cmp	r2, #0
 800c81e:	f000 8088 	beq.w	800c932 <__kernel_rem_pio2+0x392>
 800c822:	ab0e      	add	r3, sp, #56	; 0x38
 800c824:	f1aa 0a18 	sub.w	sl, sl, #24
 800c828:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	f000 80b4 	beq.w	800c99a <__kernel_rem_pio2+0x3fa>
 800c832:	4650      	mov	r0, sl
 800c834:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800c8c0 <__kernel_rem_pio2+0x320>
 800c838:	f000 fb46 	bl	800cec8 <scalbn>
 800c83c:	00ec      	lsls	r4, r5, #3
 800c83e:	ab72      	add	r3, sp, #456	; 0x1c8
 800c840:	191e      	adds	r6, r3, r4
 800c842:	ec59 8b10 	vmov	r8, r9, d0
 800c846:	f106 0a08 	add.w	sl, r6, #8
 800c84a:	462f      	mov	r7, r5
 800c84c:	2f00      	cmp	r7, #0
 800c84e:	f280 80df 	bge.w	800ca10 <__kernel_rem_pio2+0x470>
 800c852:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800c8b8 <__kernel_rem_pio2+0x318>
 800c856:	f04f 0a00 	mov.w	sl, #0
 800c85a:	eba5 030a 	sub.w	r3, r5, sl
 800c85e:	2b00      	cmp	r3, #0
 800c860:	f2c0 810a 	blt.w	800ca78 <__kernel_rem_pio2+0x4d8>
 800c864:	f8df b078 	ldr.w	fp, [pc, #120]	; 800c8e0 <__kernel_rem_pio2+0x340>
 800c868:	ec59 8b18 	vmov	r8, r9, d8
 800c86c:	2700      	movs	r7, #0
 800c86e:	e0f5      	b.n	800ca5c <__kernel_rem_pio2+0x4bc>
 800c870:	2302      	movs	r3, #2
 800c872:	9302      	str	r3, [sp, #8]
 800c874:	e760      	b.n	800c738 <__kernel_rem_pio2+0x198>
 800c876:	ab0e      	add	r3, sp, #56	; 0x38
 800c878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c87c:	b94d      	cbnz	r5, 800c892 <__kernel_rem_pio2+0x2f2>
 800c87e:	b12b      	cbz	r3, 800c88c <__kernel_rem_pio2+0x2ec>
 800c880:	a80e      	add	r0, sp, #56	; 0x38
 800c882:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c886:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c88a:	2301      	movs	r3, #1
 800c88c:	3201      	adds	r2, #1
 800c88e:	461d      	mov	r5, r3
 800c890:	e759      	b.n	800c746 <__kernel_rem_pio2+0x1a6>
 800c892:	a80e      	add	r0, sp, #56	; 0x38
 800c894:	1acb      	subs	r3, r1, r3
 800c896:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c89a:	462b      	mov	r3, r5
 800c89c:	e7f6      	b.n	800c88c <__kernel_rem_pio2+0x2ec>
 800c89e:	1e62      	subs	r2, r4, #1
 800c8a0:	ab0e      	add	r3, sp, #56	; 0x38
 800c8a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c8aa:	a90e      	add	r1, sp, #56	; 0x38
 800c8ac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c8b0:	e757      	b.n	800c762 <__kernel_rem_pio2+0x1c2>
 800c8b2:	bf00      	nop
 800c8b4:	f3af 8000 	nop.w
	...
 800c8c4:	3ff00000 	.word	0x3ff00000
 800c8c8:	0800ea58 	.word	0x0800ea58
 800c8cc:	40200000 	.word	0x40200000
 800c8d0:	3ff00000 	.word	0x3ff00000
 800c8d4:	3e700000 	.word	0x3e700000
 800c8d8:	41700000 	.word	0x41700000
 800c8dc:	3fe00000 	.word	0x3fe00000
 800c8e0:	0800ea18 	.word	0x0800ea18
 800c8e4:	1e62      	subs	r2, r4, #1
 800c8e6:	ab0e      	add	r3, sp, #56	; 0x38
 800c8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ec:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c8f0:	e7db      	b.n	800c8aa <__kernel_rem_pio2+0x30a>
 800c8f2:	a90e      	add	r1, sp, #56	; 0x38
 800c8f4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c8f8:	3b01      	subs	r3, #1
 800c8fa:	430a      	orrs	r2, r1
 800c8fc:	e78b      	b.n	800c816 <__kernel_rem_pio2+0x276>
 800c8fe:	3301      	adds	r3, #1
 800c900:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c904:	2900      	cmp	r1, #0
 800c906:	d0fa      	beq.n	800c8fe <__kernel_rem_pio2+0x35e>
 800c908:	9a08      	ldr	r2, [sp, #32]
 800c90a:	4422      	add	r2, r4
 800c90c:	00d2      	lsls	r2, r2, #3
 800c90e:	a922      	add	r1, sp, #136	; 0x88
 800c910:	18e3      	adds	r3, r4, r3
 800c912:	9206      	str	r2, [sp, #24]
 800c914:	440a      	add	r2, r1
 800c916:	9302      	str	r3, [sp, #8]
 800c918:	f10b 0108 	add.w	r1, fp, #8
 800c91c:	f102 0308 	add.w	r3, r2, #8
 800c920:	1c66      	adds	r6, r4, #1
 800c922:	910a      	str	r1, [sp, #40]	; 0x28
 800c924:	2500      	movs	r5, #0
 800c926:	930d      	str	r3, [sp, #52]	; 0x34
 800c928:	9b02      	ldr	r3, [sp, #8]
 800c92a:	42b3      	cmp	r3, r6
 800c92c:	da04      	bge.n	800c938 <__kernel_rem_pio2+0x398>
 800c92e:	461c      	mov	r4, r3
 800c930:	e6a6      	b.n	800c680 <__kernel_rem_pio2+0xe0>
 800c932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c934:	2301      	movs	r3, #1
 800c936:	e7e3      	b.n	800c900 <__kernel_rem_pio2+0x360>
 800c938:	9b06      	ldr	r3, [sp, #24]
 800c93a:	18ef      	adds	r7, r5, r3
 800c93c:	ab22      	add	r3, sp, #136	; 0x88
 800c93e:	441f      	add	r7, r3
 800c940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c942:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c946:	f7f3 fdfd 	bl	8000544 <__aeabi_i2d>
 800c94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c94c:	461c      	mov	r4, r3
 800c94e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c950:	e9c7 0100 	strd	r0, r1, [r7]
 800c954:	eb03 0b05 	add.w	fp, r3, r5
 800c958:	2700      	movs	r7, #0
 800c95a:	f04f 0800 	mov.w	r8, #0
 800c95e:	f04f 0900 	mov.w	r9, #0
 800c962:	9b07      	ldr	r3, [sp, #28]
 800c964:	429f      	cmp	r7, r3
 800c966:	dd08      	ble.n	800c97a <__kernel_rem_pio2+0x3da>
 800c968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c96a:	aa72      	add	r2, sp, #456	; 0x1c8
 800c96c:	18eb      	adds	r3, r5, r3
 800c96e:	4413      	add	r3, r2
 800c970:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800c974:	3601      	adds	r6, #1
 800c976:	3508      	adds	r5, #8
 800c978:	e7d6      	b.n	800c928 <__kernel_rem_pio2+0x388>
 800c97a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c97e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c982:	f7f3 fe49 	bl	8000618 <__aeabi_dmul>
 800c986:	4602      	mov	r2, r0
 800c988:	460b      	mov	r3, r1
 800c98a:	4640      	mov	r0, r8
 800c98c:	4649      	mov	r1, r9
 800c98e:	f7f3 fc8d 	bl	80002ac <__adddf3>
 800c992:	3701      	adds	r7, #1
 800c994:	4680      	mov	r8, r0
 800c996:	4689      	mov	r9, r1
 800c998:	e7e3      	b.n	800c962 <__kernel_rem_pio2+0x3c2>
 800c99a:	3d01      	subs	r5, #1
 800c99c:	e741      	b.n	800c822 <__kernel_rem_pio2+0x282>
 800c99e:	f1ca 0000 	rsb	r0, sl, #0
 800c9a2:	ec47 6b10 	vmov	d0, r6, r7
 800c9a6:	f000 fa8f 	bl	800cec8 <scalbn>
 800c9aa:	ec57 6b10 	vmov	r6, r7, d0
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	4b99      	ldr	r3, [pc, #612]	; (800cc18 <__kernel_rem_pio2+0x678>)
 800c9b2:	ee10 0a10 	vmov	r0, s0
 800c9b6:	4639      	mov	r1, r7
 800c9b8:	f7f4 f8b4 	bl	8000b24 <__aeabi_dcmpge>
 800c9bc:	b1f8      	cbz	r0, 800c9fe <__kernel_rem_pio2+0x45e>
 800c9be:	2200      	movs	r2, #0
 800c9c0:	4b96      	ldr	r3, [pc, #600]	; (800cc1c <__kernel_rem_pio2+0x67c>)
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	4639      	mov	r1, r7
 800c9c6:	f7f3 fe27 	bl	8000618 <__aeabi_dmul>
 800c9ca:	f7f4 f8d5 	bl	8000b78 <__aeabi_d2iz>
 800c9ce:	4680      	mov	r8, r0
 800c9d0:	f7f3 fdb8 	bl	8000544 <__aeabi_i2d>
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	4b90      	ldr	r3, [pc, #576]	; (800cc18 <__kernel_rem_pio2+0x678>)
 800c9d8:	f7f3 fe1e 	bl	8000618 <__aeabi_dmul>
 800c9dc:	460b      	mov	r3, r1
 800c9de:	4602      	mov	r2, r0
 800c9e0:	4639      	mov	r1, r7
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f7f3 fc60 	bl	80002a8 <__aeabi_dsub>
 800c9e8:	f7f4 f8c6 	bl	8000b78 <__aeabi_d2iz>
 800c9ec:	1c65      	adds	r5, r4, #1
 800c9ee:	ab0e      	add	r3, sp, #56	; 0x38
 800c9f0:	f10a 0a18 	add.w	sl, sl, #24
 800c9f4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c9f8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c9fc:	e719      	b.n	800c832 <__kernel_rem_pio2+0x292>
 800c9fe:	4630      	mov	r0, r6
 800ca00:	4639      	mov	r1, r7
 800ca02:	f7f4 f8b9 	bl	8000b78 <__aeabi_d2iz>
 800ca06:	ab0e      	add	r3, sp, #56	; 0x38
 800ca08:	4625      	mov	r5, r4
 800ca0a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ca0e:	e710      	b.n	800c832 <__kernel_rem_pio2+0x292>
 800ca10:	ab0e      	add	r3, sp, #56	; 0x38
 800ca12:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ca16:	f7f3 fd95 	bl	8000544 <__aeabi_i2d>
 800ca1a:	4642      	mov	r2, r8
 800ca1c:	464b      	mov	r3, r9
 800ca1e:	f7f3 fdfb 	bl	8000618 <__aeabi_dmul>
 800ca22:	2200      	movs	r2, #0
 800ca24:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ca28:	4b7c      	ldr	r3, [pc, #496]	; (800cc1c <__kernel_rem_pio2+0x67c>)
 800ca2a:	4640      	mov	r0, r8
 800ca2c:	4649      	mov	r1, r9
 800ca2e:	f7f3 fdf3 	bl	8000618 <__aeabi_dmul>
 800ca32:	3f01      	subs	r7, #1
 800ca34:	4680      	mov	r8, r0
 800ca36:	4689      	mov	r9, r1
 800ca38:	e708      	b.n	800c84c <__kernel_rem_pio2+0x2ac>
 800ca3a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ca3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca42:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ca46:	f7f3 fde7 	bl	8000618 <__aeabi_dmul>
 800ca4a:	4602      	mov	r2, r0
 800ca4c:	460b      	mov	r3, r1
 800ca4e:	4640      	mov	r0, r8
 800ca50:	4649      	mov	r1, r9
 800ca52:	f7f3 fc2b 	bl	80002ac <__adddf3>
 800ca56:	3701      	adds	r7, #1
 800ca58:	4680      	mov	r8, r0
 800ca5a:	4689      	mov	r9, r1
 800ca5c:	9b04      	ldr	r3, [sp, #16]
 800ca5e:	429f      	cmp	r7, r3
 800ca60:	dc01      	bgt.n	800ca66 <__kernel_rem_pio2+0x4c6>
 800ca62:	45ba      	cmp	sl, r7
 800ca64:	dae9      	bge.n	800ca3a <__kernel_rem_pio2+0x49a>
 800ca66:	ab4a      	add	r3, sp, #296	; 0x128
 800ca68:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ca6c:	e9c3 8900 	strd	r8, r9, [r3]
 800ca70:	f10a 0a01 	add.w	sl, sl, #1
 800ca74:	3e08      	subs	r6, #8
 800ca76:	e6f0      	b.n	800c85a <__kernel_rem_pio2+0x2ba>
 800ca78:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ca7a:	2b03      	cmp	r3, #3
 800ca7c:	d85b      	bhi.n	800cb36 <__kernel_rem_pio2+0x596>
 800ca7e:	e8df f003 	tbb	[pc, r3]
 800ca82:	264a      	.short	0x264a
 800ca84:	0226      	.short	0x0226
 800ca86:	ab9a      	add	r3, sp, #616	; 0x268
 800ca88:	441c      	add	r4, r3
 800ca8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ca8e:	46a2      	mov	sl, r4
 800ca90:	46ab      	mov	fp, r5
 800ca92:	f1bb 0f00 	cmp.w	fp, #0
 800ca96:	dc6c      	bgt.n	800cb72 <__kernel_rem_pio2+0x5d2>
 800ca98:	46a2      	mov	sl, r4
 800ca9a:	46ab      	mov	fp, r5
 800ca9c:	f1bb 0f01 	cmp.w	fp, #1
 800caa0:	f300 8086 	bgt.w	800cbb0 <__kernel_rem_pio2+0x610>
 800caa4:	2000      	movs	r0, #0
 800caa6:	2100      	movs	r1, #0
 800caa8:	2d01      	cmp	r5, #1
 800caaa:	f300 80a0 	bgt.w	800cbee <__kernel_rem_pio2+0x64e>
 800caae:	9b02      	ldr	r3, [sp, #8]
 800cab0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800cab4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800cab8:	2b00      	cmp	r3, #0
 800caba:	f040 809e 	bne.w	800cbfa <__kernel_rem_pio2+0x65a>
 800cabe:	9b01      	ldr	r3, [sp, #4]
 800cac0:	e9c3 7800 	strd	r7, r8, [r3]
 800cac4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800cac8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cacc:	e033      	b.n	800cb36 <__kernel_rem_pio2+0x596>
 800cace:	3408      	adds	r4, #8
 800cad0:	ab4a      	add	r3, sp, #296	; 0x128
 800cad2:	441c      	add	r4, r3
 800cad4:	462e      	mov	r6, r5
 800cad6:	2000      	movs	r0, #0
 800cad8:	2100      	movs	r1, #0
 800cada:	2e00      	cmp	r6, #0
 800cadc:	da3a      	bge.n	800cb54 <__kernel_rem_pio2+0x5b4>
 800cade:	9b02      	ldr	r3, [sp, #8]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d03d      	beq.n	800cb60 <__kernel_rem_pio2+0x5c0>
 800cae4:	4602      	mov	r2, r0
 800cae6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800caea:	9c01      	ldr	r4, [sp, #4]
 800caec:	e9c4 2300 	strd	r2, r3, [r4]
 800caf0:	4602      	mov	r2, r0
 800caf2:	460b      	mov	r3, r1
 800caf4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800caf8:	f7f3 fbd6 	bl	80002a8 <__aeabi_dsub>
 800cafc:	ae4c      	add	r6, sp, #304	; 0x130
 800cafe:	2401      	movs	r4, #1
 800cb00:	42a5      	cmp	r5, r4
 800cb02:	da30      	bge.n	800cb66 <__kernel_rem_pio2+0x5c6>
 800cb04:	9b02      	ldr	r3, [sp, #8]
 800cb06:	b113      	cbz	r3, 800cb0e <__kernel_rem_pio2+0x56e>
 800cb08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	9b01      	ldr	r3, [sp, #4]
 800cb10:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cb14:	e00f      	b.n	800cb36 <__kernel_rem_pio2+0x596>
 800cb16:	ab9a      	add	r3, sp, #616	; 0x268
 800cb18:	441c      	add	r4, r3
 800cb1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800cb1e:	2000      	movs	r0, #0
 800cb20:	2100      	movs	r1, #0
 800cb22:	2d00      	cmp	r5, #0
 800cb24:	da10      	bge.n	800cb48 <__kernel_rem_pio2+0x5a8>
 800cb26:	9b02      	ldr	r3, [sp, #8]
 800cb28:	b113      	cbz	r3, 800cb30 <__kernel_rem_pio2+0x590>
 800cb2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb2e:	4619      	mov	r1, r3
 800cb30:	9b01      	ldr	r3, [sp, #4]
 800cb32:	e9c3 0100 	strd	r0, r1, [r3]
 800cb36:	9b06      	ldr	r3, [sp, #24]
 800cb38:	f003 0007 	and.w	r0, r3, #7
 800cb3c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800cb40:	ecbd 8b02 	vpop	{d8}
 800cb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb48:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cb4c:	f7f3 fbae 	bl	80002ac <__adddf3>
 800cb50:	3d01      	subs	r5, #1
 800cb52:	e7e6      	b.n	800cb22 <__kernel_rem_pio2+0x582>
 800cb54:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cb58:	f7f3 fba8 	bl	80002ac <__adddf3>
 800cb5c:	3e01      	subs	r6, #1
 800cb5e:	e7bc      	b.n	800cada <__kernel_rem_pio2+0x53a>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	e7c1      	b.n	800caea <__kernel_rem_pio2+0x54a>
 800cb66:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cb6a:	f7f3 fb9f 	bl	80002ac <__adddf3>
 800cb6e:	3401      	adds	r4, #1
 800cb70:	e7c6      	b.n	800cb00 <__kernel_rem_pio2+0x560>
 800cb72:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800cb76:	ed3a 7b02 	vldmdb	sl!, {d7}
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	ec53 2b17 	vmov	r2, r3, d7
 800cb80:	4649      	mov	r1, r9
 800cb82:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cb86:	f7f3 fb91 	bl	80002ac <__adddf3>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	4606      	mov	r6, r0
 800cb90:	460f      	mov	r7, r1
 800cb92:	4640      	mov	r0, r8
 800cb94:	4649      	mov	r1, r9
 800cb96:	f7f3 fb87 	bl	80002a8 <__aeabi_dsub>
 800cb9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb9e:	f7f3 fb85 	bl	80002ac <__adddf3>
 800cba2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cba6:	e9ca 0100 	strd	r0, r1, [sl]
 800cbaa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800cbae:	e770      	b.n	800ca92 <__kernel_rem_pio2+0x4f2>
 800cbb0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800cbb4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800cbb8:	4630      	mov	r0, r6
 800cbba:	ec53 2b17 	vmov	r2, r3, d7
 800cbbe:	4639      	mov	r1, r7
 800cbc0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cbc4:	f7f3 fb72 	bl	80002ac <__adddf3>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	460b      	mov	r3, r1
 800cbcc:	4680      	mov	r8, r0
 800cbce:	4689      	mov	r9, r1
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	4639      	mov	r1, r7
 800cbd4:	f7f3 fb68 	bl	80002a8 <__aeabi_dsub>
 800cbd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbdc:	f7f3 fb66 	bl	80002ac <__adddf3>
 800cbe0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cbe4:	e9ca 0100 	strd	r0, r1, [sl]
 800cbe8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800cbec:	e756      	b.n	800ca9c <__kernel_rem_pio2+0x4fc>
 800cbee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cbf2:	f7f3 fb5b 	bl	80002ac <__adddf3>
 800cbf6:	3d01      	subs	r5, #1
 800cbf8:	e756      	b.n	800caa8 <__kernel_rem_pio2+0x508>
 800cbfa:	9b01      	ldr	r3, [sp, #4]
 800cbfc:	9a01      	ldr	r2, [sp, #4]
 800cbfe:	601f      	str	r7, [r3, #0]
 800cc00:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800cc04:	605c      	str	r4, [r3, #4]
 800cc06:	609d      	str	r5, [r3, #8]
 800cc08:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cc0c:	60d3      	str	r3, [r2, #12]
 800cc0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc12:	6110      	str	r0, [r2, #16]
 800cc14:	6153      	str	r3, [r2, #20]
 800cc16:	e78e      	b.n	800cb36 <__kernel_rem_pio2+0x596>
 800cc18:	41700000 	.word	0x41700000
 800cc1c:	3e700000 	.word	0x3e700000

0800cc20 <__kernel_sin>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	ec55 4b10 	vmov	r4, r5, d0
 800cc28:	b085      	sub	sp, #20
 800cc2a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cc2e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cc32:	ed8d 1b00 	vstr	d1, [sp]
 800cc36:	9002      	str	r0, [sp, #8]
 800cc38:	da06      	bge.n	800cc48 <__kernel_sin+0x28>
 800cc3a:	ee10 0a10 	vmov	r0, s0
 800cc3e:	4629      	mov	r1, r5
 800cc40:	f7f3 ff9a 	bl	8000b78 <__aeabi_d2iz>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d051      	beq.n	800ccec <__kernel_sin+0xcc>
 800cc48:	4622      	mov	r2, r4
 800cc4a:	462b      	mov	r3, r5
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	4629      	mov	r1, r5
 800cc50:	f7f3 fce2 	bl	8000618 <__aeabi_dmul>
 800cc54:	4682      	mov	sl, r0
 800cc56:	468b      	mov	fp, r1
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	4620      	mov	r0, r4
 800cc5e:	4629      	mov	r1, r5
 800cc60:	f7f3 fcda 	bl	8000618 <__aeabi_dmul>
 800cc64:	a341      	add	r3, pc, #260	; (adr r3, 800cd6c <__kernel_sin+0x14c>)
 800cc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6a:	4680      	mov	r8, r0
 800cc6c:	4689      	mov	r9, r1
 800cc6e:	4650      	mov	r0, sl
 800cc70:	4659      	mov	r1, fp
 800cc72:	f7f3 fcd1 	bl	8000618 <__aeabi_dmul>
 800cc76:	a33f      	add	r3, pc, #252	; (adr r3, 800cd74 <__kernel_sin+0x154>)
 800cc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7c:	f7f3 fb14 	bl	80002a8 <__aeabi_dsub>
 800cc80:	4652      	mov	r2, sl
 800cc82:	465b      	mov	r3, fp
 800cc84:	f7f3 fcc8 	bl	8000618 <__aeabi_dmul>
 800cc88:	a33c      	add	r3, pc, #240	; (adr r3, 800cd7c <__kernel_sin+0x15c>)
 800cc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8e:	f7f3 fb0d 	bl	80002ac <__adddf3>
 800cc92:	4652      	mov	r2, sl
 800cc94:	465b      	mov	r3, fp
 800cc96:	f7f3 fcbf 	bl	8000618 <__aeabi_dmul>
 800cc9a:	a33a      	add	r3, pc, #232	; (adr r3, 800cd84 <__kernel_sin+0x164>)
 800cc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca0:	f7f3 fb02 	bl	80002a8 <__aeabi_dsub>
 800cca4:	4652      	mov	r2, sl
 800cca6:	465b      	mov	r3, fp
 800cca8:	f7f3 fcb6 	bl	8000618 <__aeabi_dmul>
 800ccac:	a337      	add	r3, pc, #220	; (adr r3, 800cd8c <__kernel_sin+0x16c>)
 800ccae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb2:	f7f3 fafb 	bl	80002ac <__adddf3>
 800ccb6:	9b02      	ldr	r3, [sp, #8]
 800ccb8:	4606      	mov	r6, r0
 800ccba:	460f      	mov	r7, r1
 800ccbc:	b9db      	cbnz	r3, 800ccf6 <__kernel_sin+0xd6>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	4650      	mov	r0, sl
 800ccc4:	4659      	mov	r1, fp
 800ccc6:	f7f3 fca7 	bl	8000618 <__aeabi_dmul>
 800ccca:	a325      	add	r3, pc, #148	; (adr r3, 800cd60 <__kernel_sin+0x140>)
 800cccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd0:	f7f3 faea 	bl	80002a8 <__aeabi_dsub>
 800ccd4:	4642      	mov	r2, r8
 800ccd6:	464b      	mov	r3, r9
 800ccd8:	f7f3 fc9e 	bl	8000618 <__aeabi_dmul>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	460b      	mov	r3, r1
 800cce0:	4620      	mov	r0, r4
 800cce2:	4629      	mov	r1, r5
 800cce4:	f7f3 fae2 	bl	80002ac <__adddf3>
 800cce8:	4604      	mov	r4, r0
 800ccea:	460d      	mov	r5, r1
 800ccec:	ec45 4b10 	vmov	d0, r4, r5
 800ccf0:	b005      	add	sp, #20
 800ccf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	4b1b      	ldr	r3, [pc, #108]	; (800cd68 <__kernel_sin+0x148>)
 800ccfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ccfe:	f7f3 fc8b 	bl	8000618 <__aeabi_dmul>
 800cd02:	4632      	mov	r2, r6
 800cd04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd08:	463b      	mov	r3, r7
 800cd0a:	4640      	mov	r0, r8
 800cd0c:	4649      	mov	r1, r9
 800cd0e:	f7f3 fc83 	bl	8000618 <__aeabi_dmul>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd1a:	f7f3 fac5 	bl	80002a8 <__aeabi_dsub>
 800cd1e:	4652      	mov	r2, sl
 800cd20:	465b      	mov	r3, fp
 800cd22:	f7f3 fc79 	bl	8000618 <__aeabi_dmul>
 800cd26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd2a:	f7f3 fabd 	bl	80002a8 <__aeabi_dsub>
 800cd2e:	a30c      	add	r3, pc, #48	; (adr r3, 800cd60 <__kernel_sin+0x140>)
 800cd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd34:	4606      	mov	r6, r0
 800cd36:	460f      	mov	r7, r1
 800cd38:	4640      	mov	r0, r8
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	f7f3 fc6c 	bl	8000618 <__aeabi_dmul>
 800cd40:	4602      	mov	r2, r0
 800cd42:	460b      	mov	r3, r1
 800cd44:	4630      	mov	r0, r6
 800cd46:	4639      	mov	r1, r7
 800cd48:	f7f3 fab0 	bl	80002ac <__adddf3>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	460b      	mov	r3, r1
 800cd50:	4620      	mov	r0, r4
 800cd52:	4629      	mov	r1, r5
 800cd54:	f7f3 faa8 	bl	80002a8 <__aeabi_dsub>
 800cd58:	e7c6      	b.n	800cce8 <__kernel_sin+0xc8>
 800cd5a:	bf00      	nop
 800cd5c:	f3af 8000 	nop.w
 800cd60:	55555549 	.word	0x55555549
 800cd64:	3fc55555 	.word	0x3fc55555
 800cd68:	3fe00000 	.word	0x3fe00000
 800cd6c:	5acfd57c 	.word	0x5acfd57c
 800cd70:	3de5d93a 	.word	0x3de5d93a
 800cd74:	8a2b9ceb 	.word	0x8a2b9ceb
 800cd78:	3e5ae5e6 	.word	0x3e5ae5e6
 800cd7c:	57b1fe7d 	.word	0x57b1fe7d
 800cd80:	3ec71de3 	.word	0x3ec71de3
 800cd84:	19c161d5 	.word	0x19c161d5
 800cd88:	3f2a01a0 	.word	0x3f2a01a0
 800cd8c:	1110f8a6 	.word	0x1110f8a6
 800cd90:	3f811111 	.word	0x3f811111

0800cd94 <fabs>:
 800cd94:	ec51 0b10 	vmov	r0, r1, d0
 800cd98:	ee10 2a10 	vmov	r2, s0
 800cd9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cda0:	ec43 2b10 	vmov	d0, r2, r3
 800cda4:	4770      	bx	lr

0800cda6 <finite>:
 800cda6:	ee10 3a90 	vmov	r3, s1
 800cdaa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800cdae:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cdb2:	0fc0      	lsrs	r0, r0, #31
 800cdb4:	4770      	bx	lr
	...

0800cdb8 <floor>:
 800cdb8:	ec51 0b10 	vmov	r0, r1, d0
 800cdbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cdc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cdc8:	2e13      	cmp	r6, #19
 800cdca:	460c      	mov	r4, r1
 800cdcc:	ee10 5a10 	vmov	r5, s0
 800cdd0:	4680      	mov	r8, r0
 800cdd2:	dc34      	bgt.n	800ce3e <floor+0x86>
 800cdd4:	2e00      	cmp	r6, #0
 800cdd6:	da16      	bge.n	800ce06 <floor+0x4e>
 800cdd8:	a335      	add	r3, pc, #212	; (adr r3, 800ceb0 <floor+0xf8>)
 800cdda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdde:	f7f3 fa65 	bl	80002ac <__adddf3>
 800cde2:	2200      	movs	r2, #0
 800cde4:	2300      	movs	r3, #0
 800cde6:	f7f3 fea7 	bl	8000b38 <__aeabi_dcmpgt>
 800cdea:	b148      	cbz	r0, 800ce00 <floor+0x48>
 800cdec:	2c00      	cmp	r4, #0
 800cdee:	da59      	bge.n	800cea4 <floor+0xec>
 800cdf0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cdf4:	4a30      	ldr	r2, [pc, #192]	; (800ceb8 <floor+0x100>)
 800cdf6:	432b      	orrs	r3, r5
 800cdf8:	2500      	movs	r5, #0
 800cdfa:	42ab      	cmp	r3, r5
 800cdfc:	bf18      	it	ne
 800cdfe:	4614      	movne	r4, r2
 800ce00:	4621      	mov	r1, r4
 800ce02:	4628      	mov	r0, r5
 800ce04:	e025      	b.n	800ce52 <floor+0x9a>
 800ce06:	4f2d      	ldr	r7, [pc, #180]	; (800cebc <floor+0x104>)
 800ce08:	4137      	asrs	r7, r6
 800ce0a:	ea01 0307 	and.w	r3, r1, r7
 800ce0e:	4303      	orrs	r3, r0
 800ce10:	d01f      	beq.n	800ce52 <floor+0x9a>
 800ce12:	a327      	add	r3, pc, #156	; (adr r3, 800ceb0 <floor+0xf8>)
 800ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce18:	f7f3 fa48 	bl	80002ac <__adddf3>
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	2300      	movs	r3, #0
 800ce20:	f7f3 fe8a 	bl	8000b38 <__aeabi_dcmpgt>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d0eb      	beq.n	800ce00 <floor+0x48>
 800ce28:	2c00      	cmp	r4, #0
 800ce2a:	bfbe      	ittt	lt
 800ce2c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ce30:	fa43 f606 	asrlt.w	r6, r3, r6
 800ce34:	19a4      	addlt	r4, r4, r6
 800ce36:	ea24 0407 	bic.w	r4, r4, r7
 800ce3a:	2500      	movs	r5, #0
 800ce3c:	e7e0      	b.n	800ce00 <floor+0x48>
 800ce3e:	2e33      	cmp	r6, #51	; 0x33
 800ce40:	dd0b      	ble.n	800ce5a <floor+0xa2>
 800ce42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ce46:	d104      	bne.n	800ce52 <floor+0x9a>
 800ce48:	ee10 2a10 	vmov	r2, s0
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	f7f3 fa2d 	bl	80002ac <__adddf3>
 800ce52:	ec41 0b10 	vmov	d0, r0, r1
 800ce56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce5a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ce5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce62:	fa23 f707 	lsr.w	r7, r3, r7
 800ce66:	4207      	tst	r7, r0
 800ce68:	d0f3      	beq.n	800ce52 <floor+0x9a>
 800ce6a:	a311      	add	r3, pc, #68	; (adr r3, 800ceb0 <floor+0xf8>)
 800ce6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce70:	f7f3 fa1c 	bl	80002ac <__adddf3>
 800ce74:	2200      	movs	r2, #0
 800ce76:	2300      	movs	r3, #0
 800ce78:	f7f3 fe5e 	bl	8000b38 <__aeabi_dcmpgt>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d0bf      	beq.n	800ce00 <floor+0x48>
 800ce80:	2c00      	cmp	r4, #0
 800ce82:	da02      	bge.n	800ce8a <floor+0xd2>
 800ce84:	2e14      	cmp	r6, #20
 800ce86:	d103      	bne.n	800ce90 <floor+0xd8>
 800ce88:	3401      	adds	r4, #1
 800ce8a:	ea25 0507 	bic.w	r5, r5, r7
 800ce8e:	e7b7      	b.n	800ce00 <floor+0x48>
 800ce90:	2301      	movs	r3, #1
 800ce92:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ce96:	fa03 f606 	lsl.w	r6, r3, r6
 800ce9a:	4435      	add	r5, r6
 800ce9c:	4545      	cmp	r5, r8
 800ce9e:	bf38      	it	cc
 800cea0:	18e4      	addcc	r4, r4, r3
 800cea2:	e7f2      	b.n	800ce8a <floor+0xd2>
 800cea4:	2500      	movs	r5, #0
 800cea6:	462c      	mov	r4, r5
 800cea8:	e7aa      	b.n	800ce00 <floor+0x48>
 800ceaa:	bf00      	nop
 800ceac:	f3af 8000 	nop.w
 800ceb0:	8800759c 	.word	0x8800759c
 800ceb4:	7e37e43c 	.word	0x7e37e43c
 800ceb8:	bff00000 	.word	0xbff00000
 800cebc:	000fffff 	.word	0x000fffff

0800cec0 <matherr>:
 800cec0:	2000      	movs	r0, #0
 800cec2:	4770      	bx	lr
 800cec4:	0000      	movs	r0, r0
	...

0800cec8 <scalbn>:
 800cec8:	b570      	push	{r4, r5, r6, lr}
 800ceca:	ec55 4b10 	vmov	r4, r5, d0
 800cece:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ced2:	4606      	mov	r6, r0
 800ced4:	462b      	mov	r3, r5
 800ced6:	b9aa      	cbnz	r2, 800cf04 <scalbn+0x3c>
 800ced8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cedc:	4323      	orrs	r3, r4
 800cede:	d03b      	beq.n	800cf58 <scalbn+0x90>
 800cee0:	4b31      	ldr	r3, [pc, #196]	; (800cfa8 <scalbn+0xe0>)
 800cee2:	4629      	mov	r1, r5
 800cee4:	2200      	movs	r2, #0
 800cee6:	ee10 0a10 	vmov	r0, s0
 800ceea:	f7f3 fb95 	bl	8000618 <__aeabi_dmul>
 800ceee:	4b2f      	ldr	r3, [pc, #188]	; (800cfac <scalbn+0xe4>)
 800cef0:	429e      	cmp	r6, r3
 800cef2:	4604      	mov	r4, r0
 800cef4:	460d      	mov	r5, r1
 800cef6:	da12      	bge.n	800cf1e <scalbn+0x56>
 800cef8:	a327      	add	r3, pc, #156	; (adr r3, 800cf98 <scalbn+0xd0>)
 800cefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefe:	f7f3 fb8b 	bl	8000618 <__aeabi_dmul>
 800cf02:	e009      	b.n	800cf18 <scalbn+0x50>
 800cf04:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cf08:	428a      	cmp	r2, r1
 800cf0a:	d10c      	bne.n	800cf26 <scalbn+0x5e>
 800cf0c:	ee10 2a10 	vmov	r2, s0
 800cf10:	4620      	mov	r0, r4
 800cf12:	4629      	mov	r1, r5
 800cf14:	f7f3 f9ca 	bl	80002ac <__adddf3>
 800cf18:	4604      	mov	r4, r0
 800cf1a:	460d      	mov	r5, r1
 800cf1c:	e01c      	b.n	800cf58 <scalbn+0x90>
 800cf1e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cf22:	460b      	mov	r3, r1
 800cf24:	3a36      	subs	r2, #54	; 0x36
 800cf26:	4432      	add	r2, r6
 800cf28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cf2c:	428a      	cmp	r2, r1
 800cf2e:	dd0b      	ble.n	800cf48 <scalbn+0x80>
 800cf30:	ec45 4b11 	vmov	d1, r4, r5
 800cf34:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800cfa0 <scalbn+0xd8>
 800cf38:	f000 f846 	bl	800cfc8 <copysign>
 800cf3c:	a318      	add	r3, pc, #96	; (adr r3, 800cfa0 <scalbn+0xd8>)
 800cf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf42:	ec51 0b10 	vmov	r0, r1, d0
 800cf46:	e7da      	b.n	800cefe <scalbn+0x36>
 800cf48:	2a00      	cmp	r2, #0
 800cf4a:	dd08      	ble.n	800cf5e <scalbn+0x96>
 800cf4c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf50:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf54:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf58:	ec45 4b10 	vmov	d0, r4, r5
 800cf5c:	bd70      	pop	{r4, r5, r6, pc}
 800cf5e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cf62:	da0d      	bge.n	800cf80 <scalbn+0xb8>
 800cf64:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cf68:	429e      	cmp	r6, r3
 800cf6a:	ec45 4b11 	vmov	d1, r4, r5
 800cf6e:	dce1      	bgt.n	800cf34 <scalbn+0x6c>
 800cf70:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800cf98 <scalbn+0xd0>
 800cf74:	f000 f828 	bl	800cfc8 <copysign>
 800cf78:	a307      	add	r3, pc, #28	; (adr r3, 800cf98 <scalbn+0xd0>)
 800cf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf7e:	e7e0      	b.n	800cf42 <scalbn+0x7a>
 800cf80:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cf84:	3236      	adds	r2, #54	; 0x36
 800cf86:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cf8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cf8e:	4620      	mov	r0, r4
 800cf90:	4629      	mov	r1, r5
 800cf92:	2200      	movs	r2, #0
 800cf94:	4b06      	ldr	r3, [pc, #24]	; (800cfb0 <scalbn+0xe8>)
 800cf96:	e7b2      	b.n	800cefe <scalbn+0x36>
 800cf98:	c2f8f359 	.word	0xc2f8f359
 800cf9c:	01a56e1f 	.word	0x01a56e1f
 800cfa0:	8800759c 	.word	0x8800759c
 800cfa4:	7e37e43c 	.word	0x7e37e43c
 800cfa8:	43500000 	.word	0x43500000
 800cfac:	ffff3cb0 	.word	0xffff3cb0
 800cfb0:	3c900000 	.word	0x3c900000

0800cfb4 <finitef>:
 800cfb4:	ee10 3a10 	vmov	r3, s0
 800cfb8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800cfbc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800cfc0:	bfac      	ite	ge
 800cfc2:	2000      	movge	r0, #0
 800cfc4:	2001      	movlt	r0, #1
 800cfc6:	4770      	bx	lr

0800cfc8 <copysign>:
 800cfc8:	ec51 0b10 	vmov	r0, r1, d0
 800cfcc:	ee11 0a90 	vmov	r0, s3
 800cfd0:	ee10 2a10 	vmov	r2, s0
 800cfd4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800cfd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800cfdc:	ea41 0300 	orr.w	r3, r1, r0
 800cfe0:	ec43 2b10 	vmov	d0, r2, r3
 800cfe4:	4770      	bx	lr
	...

0800cfe8 <_init>:
 800cfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfea:	bf00      	nop
 800cfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfee:	bc08      	pop	{r3}
 800cff0:	469e      	mov	lr, r3
 800cff2:	4770      	bx	lr

0800cff4 <_fini>:
 800cff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff6:	bf00      	nop
 800cff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cffa:	bc08      	pop	{r3}
 800cffc:	469e      	mov	lr, r3
 800cffe:	4770      	bx	lr
