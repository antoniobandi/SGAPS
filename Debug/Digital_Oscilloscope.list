
Digital_Oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000106b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ae8  08010868  08010868  00020868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012350  08012350  00030b5c  2**0
                  CONTENTS
  4 .ARM          00000008  08012350  08012350  00022350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012358  08012358  00030b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012358  08012358  00022358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801235c  0801235c  0002235c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b5c  20000000  08012360  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b6c  20000b5c  08012ebc  00030b5c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200036c8  08012ebc  000336c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000258d5  00000000  00000000  00030b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005737  00000000  00000000  00056461  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c60  00000000  00000000  0005bb98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001998  00000000  00000000  0005d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b43d  00000000  00000000  0005f190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d311  00000000  00000000  0008a5cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec8f5  00000000  00000000  000a78de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001941d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008670  00000000  00000000  00194250  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000b5c 	.word	0x20000b5c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010850 	.word	0x08010850

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000b60 	.word	0x20000b60
 80001ec:	08010850 	.word	0x08010850

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 bdd2 	b.w	8001864 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 fc66 	bl	8001598 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__mulsc3>:
 8000cd8:	ee60 6a01 	vmul.f32	s13, s0, s2
 8000cdc:	ee20 6aa1 	vmul.f32	s12, s1, s3
 8000ce0:	ee60 5a21 	vmul.f32	s11, s0, s3
 8000ce4:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8000ce8:	ee21 5a20 	vmul.f32	s10, s2, s1
 8000cec:	eef4 7a67 	vcmp.f32	s15, s15
 8000cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf4:	ee35 7a85 	vadd.f32	s14, s11, s10
 8000cf8:	d104      	bne.n	8000d04 <__mulsc3+0x2c>
 8000cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8000cfe:	eef0 0a47 	vmov.f32	s1, s14
 8000d02:	4770      	bx	lr
 8000d04:	eeb4 7a47 	vcmp.f32	s14, s14
 8000d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0c:	d0f5      	beq.n	8000cfa <__mulsc3+0x22>
 8000d0e:	ee70 4ae0 	vsub.f32	s9, s1, s1
 8000d12:	eef4 0a60 	vcmp.f32	s1, s1
 8000d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1a:	eef4 4a64 	vcmp.f32	s9, s9
 8000d1e:	bf0c      	ite	eq
 8000d20:	2301      	moveq	r3, #1
 8000d22:	2300      	movne	r3, #0
 8000d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d28:	eeb4 0a40 	vcmp.f32	s0, s0
 8000d2c:	bf08      	it	eq
 8000d2e:	2300      	moveq	r3, #0
 8000d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d34:	ee70 4a40 	vsub.f32	s9, s0, s0
 8000d38:	d104      	bne.n	8000d44 <__mulsc3+0x6c>
 8000d3a:	eef4 4a64 	vcmp.f32	s9, s9
 8000d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d42:	d17a      	bne.n	8000e3a <__mulsc3+0x162>
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f040 80de 	bne.w	8000f06 <__mulsc3+0x22e>
 8000d4a:	ee71 4ae1 	vsub.f32	s9, s3, s3
 8000d4e:	eef4 1a61 	vcmp.f32	s3, s3
 8000d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d56:	eef4 4a64 	vcmp.f32	s9, s9
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2201      	moveq	r2, #1
 8000d5e:	2200      	movne	r2, #0
 8000d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d64:	eeb4 1a41 	vcmp.f32	s2, s2
 8000d68:	bf08      	it	eq
 8000d6a:	2200      	moveq	r2, #0
 8000d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d70:	ee71 4a41 	vsub.f32	s9, s2, s2
 8000d74:	d105      	bne.n	8000d82 <__mulsc3+0xaa>
 8000d76:	eef4 4a64 	vcmp.f32	s9, s9
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7e:	f040 8091 	bne.w	8000ea4 <__mulsc3+0x1cc>
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	f040 80ce 	bne.w	8000f24 <__mulsc3+0x24c>
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d147      	bne.n	8000e1c <__mulsc3+0x144>
 8000d8c:	eef4 6a66 	vcmp.f32	s13, s13
 8000d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d94:	ee76 4ae6 	vsub.f32	s9, s13, s13
 8000d98:	d104      	bne.n	8000da4 <__mulsc3+0xcc>
 8000d9a:	eef4 4a64 	vcmp.f32	s9, s9
 8000d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da2:	d123      	bne.n	8000dec <__mulsc3+0x114>
 8000da4:	eeb4 6a46 	vcmp.f32	s12, s12
 8000da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dac:	ee76 6a46 	vsub.f32	s13, s12, s12
 8000db0:	d104      	bne.n	8000dbc <__mulsc3+0xe4>
 8000db2:	eef4 6a66 	vcmp.f32	s13, s13
 8000db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dba:	d117      	bne.n	8000dec <__mulsc3+0x114>
 8000dbc:	eef4 5a65 	vcmp.f32	s11, s11
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	ee75 6ae5 	vsub.f32	s13, s11, s11
 8000dc8:	d104      	bne.n	8000dd4 <__mulsc3+0xfc>
 8000dca:	eef4 6a66 	vcmp.f32	s13, s13
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	d10b      	bne.n	8000dec <__mulsc3+0x114>
 8000dd4:	eeb4 5a45 	vcmp.f32	s10, s10
 8000dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ddc:	ee75 6a45 	vsub.f32	s13, s10, s10
 8000de0:	d18b      	bne.n	8000cfa <__mulsc3+0x22>
 8000de2:	eef4 6a66 	vcmp.f32	s13, s13
 8000de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dea:	d086      	beq.n	8000cfa <__mulsc3+0x22>
 8000dec:	eeb4 0a40 	vcmp.f32	s0, s0
 8000df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df4:	f040 80e6 	bne.w	8000fc4 <__mulsc3+0x2ec>
 8000df8:	eef4 0a60 	vcmp.f32	s1, s1
 8000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e00:	f040 80d3 	bne.w	8000faa <__mulsc3+0x2d2>
 8000e04:	eeb4 1a41 	vcmp.f32	s2, s2
 8000e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e0c:	f040 80c0 	bne.w	8000f90 <__mulsc3+0x2b8>
 8000e10:	eef4 1a61 	vcmp.f32	s3, s3
 8000e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e18:	f040 80ad 	bne.w	8000f76 <__mulsc3+0x29e>
 8000e1c:	ee61 7ae0 	vnmul.f32	s15, s3, s1
 8000e20:	ee20 7a81 	vmul.f32	s14, s1, s2
 8000e24:	eee0 7a01 	vfma.f32	s15, s0, s2
 8000e28:	eea0 7a21 	vfma.f32	s14, s0, s3
 8000e2c:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8000fe0 <__mulsc3+0x308>
 8000e30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000e34:	ee27 7a26 	vmul.f32	s14, s14, s13
 8000e38:	e75f      	b.n	8000cfa <__mulsc3+0x22>
 8000e3a:	ee10 2a10 	vmov	r2, s0
 8000e3e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8000e48:	eddf 4a66 	vldr	s9, [pc, #408]	; 8000fe4 <__mulsc3+0x30c>
 8000e4c:	bfa8      	it	ge
 8000e4e:	eeb0 0a44 	vmovge.f32	s0, s8
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	bf18      	it	ne
 8000e56:	eef0 4a44 	vmovne.f32	s9, s8
 8000e5a:	ee10 3a90 	vmov	r3, s1
 8000e5e:	eef0 4ae4 	vabs.f32	s9, s9
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	eeb4 1a41 	vcmp.f32	s2, s2
 8000e68:	bfb8      	it	lt
 8000e6a:	eef1 4a64 	vneglt.f32	s9, s9
 8000e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e72:	eef0 0a64 	vmov.f32	s1, s9
 8000e76:	d164      	bne.n	8000f42 <__mulsc3+0x26a>
 8000e78:	eef4 1a61 	vcmp.f32	s3, s3
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	bf08      	it	eq
 8000e82:	2301      	moveq	r3, #1
 8000e84:	f43f af61 	beq.w	8000d4a <__mulsc3+0x72>
 8000e88:	ee11 3a90 	vmov	r3, s3
 8000e8c:	ed9f 4a55 	vldr	s8, [pc, #340]	; 8000fe4 <__mulsc3+0x30c>
 8000e90:	eddf 4a55 	vldr	s9, [pc, #340]	; 8000fe8 <__mulsc3+0x310>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bfb4      	ite	lt
 8000e98:	eef0 1a64 	vmovlt.f32	s3, s9
 8000e9c:	eef0 1a44 	vmovge.f32	s3, s8
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e752      	b.n	8000d4a <__mulsc3+0x72>
 8000ea4:	ee11 3a10 	vmov	r3, s2
 8000ea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8000eb2:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8000fe4 <__mulsc3+0x30c>
 8000eb6:	bfa8      	it	ge
 8000eb8:	eeb0 1a47 	vmovge.f32	s2, s14
 8000ebc:	2a00      	cmp	r2, #0
 8000ebe:	bf18      	it	ne
 8000ec0:	eef0 7a47 	vmovne.f32	s15, s14
 8000ec4:	ee11 3a90 	vmov	r3, s3
 8000ec8:	eef0 7ae7 	vabs.f32	s15, s15
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	eeb4 0a40 	vcmp.f32	s0, s0
 8000ed2:	bfb8      	it	lt
 8000ed4:	eef1 7a67 	vneglt.f32	s15, s15
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	eef0 1a67 	vmov.f32	s3, s15
 8000ee0:	d13c      	bne.n	8000f5c <__mulsc3+0x284>
 8000ee2:	eef4 0a60 	vcmp.f32	s1, s1
 8000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eea:	d097      	beq.n	8000e1c <__mulsc3+0x144>
 8000eec:	ee10 3a90 	vmov	r3, s1
 8000ef0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8000fe4 <__mulsc3+0x30c>
 8000ef4:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8000fe8 <__mulsc3+0x310>
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	bfb4      	ite	lt
 8000efc:	eef0 0a67 	vmovlt.f32	s1, s15
 8000f00:	eef0 0a47 	vmovge.f32	s1, s14
 8000f04:	e78a      	b.n	8000e1c <__mulsc3+0x144>
 8000f06:	ee10 3a10 	vmov	r3, s0
 8000f0a:	eddf 4a37 	vldr	s9, [pc, #220]	; 8000fe8 <__mulsc3+0x310>
 8000f0e:	ed9f 4a35 	vldr	s8, [pc, #212]	; 8000fe4 <__mulsc3+0x30c>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	bfb4      	ite	lt
 8000f16:	eeb0 0a64 	vmovlt.f32	s0, s9
 8000f1a:	eeb0 0a44 	vmovge.f32	s0, s8
 8000f1e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8000f22:	e79a      	b.n	8000e5a <__mulsc3+0x182>
 8000f24:	ee11 3a10 	vmov	r3, s2
 8000f28:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8000fe8 <__mulsc3+0x310>
 8000f2c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000fe4 <__mulsc3+0x30c>
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	bfb4      	ite	lt
 8000f34:	eeb0 1a67 	vmovlt.f32	s2, s15
 8000f38:	eeb0 1a47 	vmovge.f32	s2, s14
 8000f3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000f40:	e7c0      	b.n	8000ec4 <__mulsc3+0x1ec>
 8000f42:	ee11 3a10 	vmov	r3, s2
 8000f46:	ed9f 4a27 	vldr	s8, [pc, #156]	; 8000fe4 <__mulsc3+0x30c>
 8000f4a:	eddf 4a27 	vldr	s9, [pc, #156]	; 8000fe8 <__mulsc3+0x310>
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	bfb4      	ite	lt
 8000f52:	eeb0 1a64 	vmovlt.f32	s2, s9
 8000f56:	eeb0 1a44 	vmovge.f32	s2, s8
 8000f5a:	e78d      	b.n	8000e78 <__mulsc3+0x1a0>
 8000f5c:	ee10 3a10 	vmov	r3, s0
 8000f60:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000fe4 <__mulsc3+0x30c>
 8000f64:	eddf 7a20 	vldr	s15, [pc, #128]	; 8000fe8 <__mulsc3+0x310>
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	bfb4      	ite	lt
 8000f6c:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000f70:	eeb0 0a47 	vmovge.f32	s0, s14
 8000f74:	e7b5      	b.n	8000ee2 <__mulsc3+0x20a>
 8000f76:	ee11 3a90 	vmov	r3, s3
 8000f7a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fe4 <__mulsc3+0x30c>
 8000f7e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8000fe8 <__mulsc3+0x310>
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bfb4      	ite	lt
 8000f86:	eef0 1a67 	vmovlt.f32	s3, s15
 8000f8a:	eef0 1a47 	vmovge.f32	s3, s14
 8000f8e:	e745      	b.n	8000e1c <__mulsc3+0x144>
 8000f90:	ee11 3a10 	vmov	r3, s2
 8000f94:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000fe4 <__mulsc3+0x30c>
 8000f98:	eddf 7a13 	vldr	s15, [pc, #76]	; 8000fe8 <__mulsc3+0x310>
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	bfb4      	ite	lt
 8000fa0:	eeb0 1a67 	vmovlt.f32	s2, s15
 8000fa4:	eeb0 1a47 	vmovge.f32	s2, s14
 8000fa8:	e732      	b.n	8000e10 <__mulsc3+0x138>
 8000faa:	ee10 3a90 	vmov	r3, s1
 8000fae:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000fe4 <__mulsc3+0x30c>
 8000fb2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8000fe8 <__mulsc3+0x310>
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	bfb4      	ite	lt
 8000fba:	eef0 0a67 	vmovlt.f32	s1, s15
 8000fbe:	eef0 0a47 	vmovge.f32	s1, s14
 8000fc2:	e71f      	b.n	8000e04 <__mulsc3+0x12c>
 8000fc4:	ee10 3a10 	vmov	r3, s0
 8000fc8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000fe4 <__mulsc3+0x30c>
 8000fcc:	eddf 7a06 	vldr	s15, [pc, #24]	; 8000fe8 <__mulsc3+0x310>
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	bfb4      	ite	lt
 8000fd4:	eeb0 0a67 	vmovlt.f32	s0, s15
 8000fd8:	eeb0 0a47 	vmovge.f32	s0, s14
 8000fdc:	e70c      	b.n	8000df8 <__mulsc3+0x120>
 8000fde:	bf00      	nop
 8000fe0:	7f800000 	.word	0x7f800000
 8000fe4:	00000000 	.word	0x00000000
 8000fe8:	80000000 	.word	0x80000000

08000fec <__muldc3>:
 8000fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ff0:	ec57 6b10 	vmov	r6, r7, d0
 8000ff4:	ec59 8b12 	vmov	r8, r9, d2
 8000ff8:	b095      	sub	sp, #84	; 0x54
 8000ffa:	ee12 2a10 	vmov	r2, s4
 8000ffe:	ee10 0a10 	vmov	r0, s0
 8001002:	4639      	mov	r1, r7
 8001004:	464b      	mov	r3, r9
 8001006:	ec55 4b13 	vmov	r4, r5, d3
 800100a:	ec5b ab11 	vmov	sl, fp, d1
 800100e:	ed8d 0b08 	vstr	d0, [sp, #32]
 8001012:	ed8d 3b0a 	vstr	d3, [sp, #40]	; 0x28
 8001016:	f7ff faff 	bl	8000618 <__aeabi_dmul>
 800101a:	4622      	mov	r2, r4
 800101c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001020:	462b      	mov	r3, r5
 8001022:	4650      	mov	r0, sl
 8001024:	4659      	mov	r1, fp
 8001026:	f7ff faf7 	bl	8000618 <__aeabi_dmul>
 800102a:	4622      	mov	r2, r4
 800102c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001030:	462b      	mov	r3, r5
 8001032:	4630      	mov	r0, r6
 8001034:	4639      	mov	r1, r7
 8001036:	f7ff faef 	bl	8000618 <__aeabi_dmul>
 800103a:	4652      	mov	r2, sl
 800103c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8001040:	465b      	mov	r3, fp
 8001042:	4640      	mov	r0, r8
 8001044:	4649      	mov	r1, r9
 8001046:	f7ff fae7 	bl	8000618 <__aeabi_dmul>
 800104a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800104e:	4606      	mov	r6, r0
 8001050:	460f      	mov	r7, r1
 8001052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001056:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
 800105a:	f7ff f925 	bl	80002a8 <__aeabi_dsub>
 800105e:	4632      	mov	r2, r6
 8001060:	4604      	mov	r4, r0
 8001062:	460d      	mov	r5, r1
 8001064:	463b      	mov	r3, r7
 8001066:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800106a:	f7ff f91f 	bl	80002ac <__adddf3>
 800106e:	4622      	mov	r2, r4
 8001070:	e9cd 0100 	strd	r0, r1, [sp]
 8001074:	462b      	mov	r3, r5
 8001076:	4620      	mov	r0, r4
 8001078:	4629      	mov	r1, r5
 800107a:	f7ff fd35 	bl	8000ae8 <__aeabi_dcmpeq>
 800107e:	b130      	cbz	r0, 800108e <__muldc3+0xa2>
 8001080:	ed9d 1b00 	vldr	d1, [sp]
 8001084:	ec45 4b10 	vmov	d0, r4, r5
 8001088:	b015      	add	sp, #84	; 0x54
 800108a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800108e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	f7ff fd27 	bl	8000ae8 <__aeabi_dcmpeq>
 800109a:	2800      	cmp	r0, #0
 800109c:	d1f0      	bne.n	8001080 <__muldc3+0x94>
 800109e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	f7ff f8ff 	bl	80002a8 <__aeabi_dsub>
 80010aa:	4652      	mov	r2, sl
 80010ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80010b0:	465b      	mov	r3, fp
 80010b2:	4650      	mov	r0, sl
 80010b4:	4659      	mov	r1, fp
 80010b6:	f7ff f8f7 	bl	80002a8 <__aeabi_dsub>
 80010ba:	f04f 0601 	mov.w	r6, #1
 80010be:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80010c2:	4652      	mov	r2, sl
 80010c4:	465b      	mov	r3, fp
 80010c6:	4650      	mov	r0, sl
 80010c8:	4659      	mov	r1, fp
 80010ca:	4637      	mov	r7, r6
 80010cc:	f7ff fd0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80010d0:	b910      	cbnz	r0, 80010d8 <__muldc3+0xec>
 80010d2:	f04f 0300 	mov.w	r3, #0
 80010d6:	461f      	mov	r7, r3
 80010d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 0601 	mov.w	r6, #1
 80010e4:	f7ff fd00 	bl	8000ae8 <__aeabi_dcmpeq>
 80010e8:	b110      	cbz	r0, 80010f0 <__muldc3+0x104>
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	461e      	mov	r6, r3
 80010f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80010f4:	ea07 0c06 	and.w	ip, r7, r6
 80010f8:	fa5f f68c 	uxtb.w	r6, ip
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	960e      	str	r6, [sp, #56]	; 0x38
 8001102:	f04f 0601 	mov.w	r6, #1
 8001106:	f7ff fcef 	bl	8000ae8 <__aeabi_dcmpeq>
 800110a:	b910      	cbnz	r0, 8001112 <__muldc3+0x126>
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	461e      	mov	r6, r3
 8001112:	f016 0fff 	tst.w	r6, #255	; 0xff
 8001116:	d00f      	beq.n	8001138 <__muldc3+0x14c>
 8001118:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800111c:	4610      	mov	r0, r2
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 0601 	mov.w	r6, #1
 8001124:	f7ff fce0 	bl	8000ae8 <__aeabi_dcmpeq>
 8001128:	b110      	cbz	r0, 8001130 <__muldc3+0x144>
 800112a:	f04f 0300 	mov.w	r3, #0
 800112e:	461e      	mov	r6, r3
 8001130:	f016 0fff 	tst.w	r6, #255	; 0xff
 8001134:	f040 8183 	bne.w	800143e <__muldc3+0x452>
 8001138:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800113a:	2b00      	cmp	r3, #0
 800113c:	f040 81b9 	bne.w	80014b2 <__muldc3+0x4c6>
 8001140:	4642      	mov	r2, r8
 8001142:	464b      	mov	r3, r9
 8001144:	4640      	mov	r0, r8
 8001146:	4649      	mov	r1, r9
 8001148:	f7ff f8ae 	bl	80002a8 <__aeabi_dsub>
 800114c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8001150:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001154:	4632      	mov	r2, r6
 8001156:	463b      	mov	r3, r7
 8001158:	4630      	mov	r0, r6
 800115a:	4639      	mov	r1, r7
 800115c:	f7ff f8a4 	bl	80002a8 <__aeabi_dsub>
 8001160:	4632      	mov	r2, r6
 8001162:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8001166:	463b      	mov	r3, r7
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f04f 0601 	mov.w	r6, #1
 8001170:	4637      	mov	r7, r6
 8001172:	f7ff fcb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8001176:	b910      	cbnz	r0, 800117e <__muldc3+0x192>
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	461f      	mov	r7, r3
 800117e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f04f 0601 	mov.w	r6, #1
 800118a:	f7ff fcad 	bl	8000ae8 <__aeabi_dcmpeq>
 800118e:	b110      	cbz	r0, 8001196 <__muldc3+0x1aa>
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	461e      	mov	r6, r3
 8001196:	ea07 0c06 	and.w	ip, r7, r6
 800119a:	fa5f f68c 	uxtb.w	r6, ip
 800119e:	4642      	mov	r2, r8
 80011a0:	464b      	mov	r3, r9
 80011a2:	4640      	mov	r0, r8
 80011a4:	4649      	mov	r1, r9
 80011a6:	4637      	mov	r7, r6
 80011a8:	f04f 0601 	mov.w	r6, #1
 80011ac:	f7ff fc9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80011b0:	b910      	cbnz	r0, 80011b8 <__muldc3+0x1cc>
 80011b2:	f04f 0300 	mov.w	r3, #0
 80011b6:	461e      	mov	r6, r3
 80011b8:	f016 0fff 	tst.w	r6, #255	; 0xff
 80011bc:	d00f      	beq.n	80011de <__muldc3+0x1f2>
 80011be:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 0601 	mov.w	r6, #1
 80011ca:	f7ff fc8d 	bl	8000ae8 <__aeabi_dcmpeq>
 80011ce:	b110      	cbz	r0, 80011d6 <__muldc3+0x1ea>
 80011d0:	f04f 0300 	mov.w	r3, #0
 80011d4:	461e      	mov	r6, r3
 80011d6:	f016 0fff 	tst.w	r6, #255	; 0xff
 80011da:	f040 80fa 	bne.w	80013d2 <__muldc3+0x3e6>
 80011de:	2f00      	cmp	r7, #0
 80011e0:	f040 8158 	bne.w	8001494 <__muldc3+0x4a8>
 80011e4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80011e6:	2e00      	cmp	r6, #0
 80011e8:	f040 80bc 	bne.w	8001364 <__muldc3+0x378>
 80011ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	f7ff f858 	bl	80002a8 <__aeabi_dsub>
 80011f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 0701 	mov.w	r7, #1
 8001208:	f7ff fc6e 	bl	8000ae8 <__aeabi_dcmpeq>
 800120c:	b900      	cbnz	r0, 8001210 <__muldc3+0x224>
 800120e:	4637      	mov	r7, r6
 8001210:	f017 0fff 	tst.w	r7, #255	; 0xff
 8001214:	d00e      	beq.n	8001234 <__muldc3+0x248>
 8001216:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 0601 	mov.w	r6, #1
 8001222:	f7ff fc61 	bl	8000ae8 <__aeabi_dcmpeq>
 8001226:	b110      	cbz	r0, 800122e <__muldc3+0x242>
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	461e      	mov	r6, r3
 800122e:	f016 0fff 	tst.w	r6, #255	; 0xff
 8001232:	d173      	bne.n	800131c <__muldc3+0x330>
 8001234:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 8001238:	4632      	mov	r2, r6
 800123a:	463b      	mov	r3, r7
 800123c:	4630      	mov	r0, r6
 800123e:	4639      	mov	r1, r7
 8001240:	f7ff f832 	bl	80002a8 <__aeabi_dsub>
 8001244:	463b      	mov	r3, r7
 8001246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800124a:	4632      	mov	r2, r6
 800124c:	4630      	mov	r0, r6
 800124e:	4639      	mov	r1, r7
 8001250:	f7ff fc4a 	bl	8000ae8 <__aeabi_dcmpeq>
 8001254:	f04f 0301 	mov.w	r3, #1
 8001258:	b900      	cbnz	r0, 800125c <__muldc3+0x270>
 800125a:	4603      	mov	r3, r0
 800125c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001260:	d00e      	beq.n	8001280 <__muldc3+0x294>
 8001262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	f04f 0601 	mov.w	r6, #1
 800126e:	f7ff fc3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8001272:	b110      	cbz	r0, 800127a <__muldc3+0x28e>
 8001274:	f04f 0300 	mov.w	r3, #0
 8001278:	461e      	mov	r6, r3
 800127a:	f016 0fff 	tst.w	r6, #255	; 0xff
 800127e:	d14d      	bne.n	800131c <__muldc3+0x330>
 8001280:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8001284:	4632      	mov	r2, r6
 8001286:	463b      	mov	r3, r7
 8001288:	4630      	mov	r0, r6
 800128a:	4639      	mov	r1, r7
 800128c:	f7ff f80c 	bl	80002a8 <__aeabi_dsub>
 8001290:	463b      	mov	r3, r7
 8001292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001296:	4632      	mov	r2, r6
 8001298:	4630      	mov	r0, r6
 800129a:	4639      	mov	r1, r7
 800129c:	f7ff fc24 	bl	8000ae8 <__aeabi_dcmpeq>
 80012a0:	f04f 0301 	mov.w	r3, #1
 80012a4:	b900      	cbnz	r0, 80012a8 <__muldc3+0x2bc>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80012ac:	d00e      	beq.n	80012cc <__muldc3+0x2e0>
 80012ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 0601 	mov.w	r6, #1
 80012ba:	f7ff fc15 	bl	8000ae8 <__aeabi_dcmpeq>
 80012be:	b110      	cbz	r0, 80012c6 <__muldc3+0x2da>
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	461e      	mov	r6, r3
 80012c6:	f016 0fff 	tst.w	r6, #255	; 0xff
 80012ca:	d127      	bne.n	800131c <__muldc3+0x330>
 80012cc:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80012d0:	4632      	mov	r2, r6
 80012d2:	463b      	mov	r3, r7
 80012d4:	4630      	mov	r0, r6
 80012d6:	4639      	mov	r1, r7
 80012d8:	f7fe ffe6 	bl	80002a8 <__aeabi_dsub>
 80012dc:	463b      	mov	r3, r7
 80012de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012e2:	4632      	mov	r2, r6
 80012e4:	4630      	mov	r0, r6
 80012e6:	4639      	mov	r1, r7
 80012e8:	f7ff fbfe 	bl	8000ae8 <__aeabi_dcmpeq>
 80012ec:	f04f 0301 	mov.w	r3, #1
 80012f0:	b900      	cbnz	r0, 80012f4 <__muldc3+0x308>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80012f8:	f43f aec2 	beq.w	8001080 <__muldc3+0x94>
 80012fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 0601 	mov.w	r6, #1
 8001308:	f7ff fbee 	bl	8000ae8 <__aeabi_dcmpeq>
 800130c:	b110      	cbz	r0, 8001314 <__muldc3+0x328>
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	461e      	mov	r6, r3
 8001314:	f016 0fff 	tst.w	r6, #255	; 0xff
 8001318:	f43f aeb2 	beq.w	8001080 <__muldc3+0x94>
 800131c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	f7ff fbe0 	bl	8000ae8 <__aeabi_dcmpeq>
 8001328:	2800      	cmp	r0, #0
 800132a:	f000 8121 	beq.w	8001570 <__muldc3+0x584>
 800132e:	4652      	mov	r2, sl
 8001330:	465b      	mov	r3, fp
 8001332:	4650      	mov	r0, sl
 8001334:	4659      	mov	r1, fp
 8001336:	f7ff fbd7 	bl	8000ae8 <__aeabi_dcmpeq>
 800133a:	2800      	cmp	r0, #0
 800133c:	f000 810b 	beq.w	8001556 <__muldc3+0x56a>
 8001340:	4642      	mov	r2, r8
 8001342:	464b      	mov	r3, r9
 8001344:	4640      	mov	r0, r8
 8001346:	4649      	mov	r1, r9
 8001348:	f7ff fbce 	bl	8000ae8 <__aeabi_dcmpeq>
 800134c:	2800      	cmp	r0, #0
 800134e:	f000 80f5 	beq.w	800153c <__muldc3+0x550>
 8001352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	f7ff fbc5 	bl	8000ae8 <__aeabi_dcmpeq>
 800135e:	2800      	cmp	r0, #0
 8001360:	f000 80df 	beq.w	8001522 <__muldc3+0x536>
 8001364:	4642      	mov	r2, r8
 8001366:	464b      	mov	r3, r9
 8001368:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800136c:	f7ff f954 	bl	8000618 <__aeabi_dmul>
 8001370:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8001374:	4604      	mov	r4, r0
 8001376:	460d      	mov	r5, r1
 8001378:	4632      	mov	r2, r6
 800137a:	463b      	mov	r3, r7
 800137c:	4650      	mov	r0, sl
 800137e:	4659      	mov	r1, fp
 8001380:	f7ff f94a 	bl	8000618 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4620      	mov	r0, r4
 800138a:	4629      	mov	r1, r5
 800138c:	f7fe ff8c 	bl	80002a8 <__aeabi_dsub>
 8001390:	2200      	movs	r2, #0
 8001392:	4b7e      	ldr	r3, [pc, #504]	; (800158c <__muldc3+0x5a0>)
 8001394:	f7ff f940 	bl	8000618 <__aeabi_dmul>
 8001398:	4632      	mov	r2, r6
 800139a:	463b      	mov	r3, r7
 800139c:	4604      	mov	r4, r0
 800139e:	460d      	mov	r5, r1
 80013a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80013a4:	f7ff f938 	bl	8000618 <__aeabi_dmul>
 80013a8:	4642      	mov	r2, r8
 80013aa:	4606      	mov	r6, r0
 80013ac:	460f      	mov	r7, r1
 80013ae:	464b      	mov	r3, r9
 80013b0:	4650      	mov	r0, sl
 80013b2:	4659      	mov	r1, fp
 80013b4:	f7ff f930 	bl	8000618 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4630      	mov	r0, r6
 80013be:	4639      	mov	r1, r7
 80013c0:	f7fe ff74 	bl	80002ac <__adddf3>
 80013c4:	2200      	movs	r2, #0
 80013c6:	4b71      	ldr	r3, [pc, #452]	; (800158c <__muldc3+0x5a0>)
 80013c8:	f7ff f926 	bl	8000618 <__aeabi_dmul>
 80013cc:	e9cd 0100 	strd	r0, r1, [sp]
 80013d0:	e656      	b.n	8001080 <__muldc3+0x94>
 80013d2:	f1b9 0f00 	cmp.w	r9, #0
 80013d6:	4b6e      	ldr	r3, [pc, #440]	; (8001590 <__muldc3+0x5a4>)
 80013d8:	bfb8      	it	lt
 80013da:	4b6e      	ldrlt	r3, [pc, #440]	; (8001594 <__muldc3+0x5a8>)
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	bfb8      	it	lt
 80013e2:	2200      	movlt	r2, #0
 80013e4:	4690      	mov	r8, r2
 80013e6:	4699      	mov	r9, r3
 80013e8:	2200      	movs	r2, #0
 80013ea:	2f00      	cmp	r7, #0
 80013ec:	d15f      	bne.n	80014ae <__muldc3+0x4c2>
 80013ee:	2300      	movs	r3, #0
 80013f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80013f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013f6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80013fa:	ea43 0501 	orr.w	r5, r3, r1
 80013fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8001402:	4614      	mov	r4, r2
 8001404:	460b      	mov	r3, r1
 8001406:	4602      	mov	r2, r0
 8001408:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800140c:	f7ff fb6c 	bl	8000ae8 <__aeabi_dcmpeq>
 8001410:	2800      	cmp	r0, #0
 8001412:	d06a      	beq.n	80014ea <__muldc3+0x4fe>
 8001414:	4652      	mov	r2, sl
 8001416:	465b      	mov	r3, fp
 8001418:	4650      	mov	r0, sl
 800141a:	4659      	mov	r1, fp
 800141c:	f7ff fb64 	bl	8000ae8 <__aeabi_dcmpeq>
 8001420:	2800      	cmp	r0, #0
 8001422:	d19f      	bne.n	8001364 <__muldc3+0x378>
 8001424:	f1bb 0f00 	cmp.w	fp, #0
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	bfbc      	itt	lt
 8001432:	2200      	movlt	r2, #0
 8001434:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001438:	4692      	mov	sl, r2
 800143a:	469b      	mov	fp, r3
 800143c:	e792      	b.n	8001364 <__muldc3+0x378>
 800143e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001440:	4b53      	ldr	r3, [pc, #332]	; (8001590 <__muldc3+0x5a4>)
 8001442:	2900      	cmp	r1, #0
 8001444:	bfb8      	it	lt
 8001446:	4b53      	ldrlt	r3, [pc, #332]	; (8001594 <__muldc3+0x5a8>)
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	bfb8      	it	lt
 800144e:	2200      	movlt	r2, #0
 8001450:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001456:	2200      	movs	r2, #0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d137      	bne.n	80014cc <__muldc3+0x4e0>
 800145c:	2300      	movs	r3, #0
 800145e:	f00b 4100 	and.w	r1, fp, #2147483648	; 0x80000000
 8001462:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001466:	430b      	orrs	r3, r1
 8001468:	4616      	mov	r6, r2
 800146a:	461f      	mov	r7, r3
 800146c:	4642      	mov	r2, r8
 800146e:	464b      	mov	r3, r9
 8001470:	4640      	mov	r0, r8
 8001472:	4649      	mov	r1, r9
 8001474:	46b2      	mov	sl, r6
 8001476:	46bb      	mov	fp, r7
 8001478:	f7ff fb36 	bl	8000ae8 <__aeabi_dcmpeq>
 800147c:	b340      	cbz	r0, 80014d0 <__muldc3+0x4e4>
 800147e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	f7ff fb2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800148a:	2800      	cmp	r0, #0
 800148c:	d03a      	beq.n	8001504 <__muldc3+0x518>
 800148e:	2301      	movs	r3, #1
 8001490:	930e      	str	r3, [sp, #56]	; 0x38
 8001492:	e655      	b.n	8001140 <__muldc3+0x154>
 8001494:	f1b9 0f00 	cmp.w	r9, #0
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	bfbc      	itt	lt
 80014a2:	2200      	movlt	r2, #0
 80014a4:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80014a8:	4690      	mov	r8, r2
 80014aa:	4699      	mov	r9, r3
 80014ac:	2200      	movs	r2, #0
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <__muldc3+0x5a4>)
 80014b0:	e79e      	b.n	80013f0 <__muldc3+0x404>
 80014b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80014b4:	2900      	cmp	r1, #0
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	bfbc      	itt	lt
 80014c0:	2200      	movlt	r2, #0
 80014c2:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80014c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80014ca:	2200      	movs	r2, #0
 80014cc:	4b30      	ldr	r3, [pc, #192]	; (8001590 <__muldc3+0x5a4>)
 80014ce:	e7c6      	b.n	800145e <__muldc3+0x472>
 80014d0:	f1b9 0f00 	cmp.w	r9, #0
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	bfbc      	itt	lt
 80014de:	2200      	movlt	r2, #0
 80014e0:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80014e4:	4690      	mov	r8, r2
 80014e6:	4699      	mov	r9, r3
 80014e8:	e7c9      	b.n	800147e <__muldc3+0x492>
 80014ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80014ec:	2900      	cmp	r1, #0
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	bfbc      	itt	lt
 80014f8:	2200      	movlt	r2, #0
 80014fa:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 80014fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001502:	e787      	b.n	8001414 <__muldc3+0x428>
 8001504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001506:	2900      	cmp	r1, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	bfbc      	itt	lt
 8001512:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001516:	2200      	movlt	r2, #0
 8001518:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800151c:	2301      	movs	r3, #1
 800151e:	930e      	str	r3, [sp, #56]	; 0x38
 8001520:	e60e      	b.n	8001140 <__muldc3+0x154>
 8001522:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001524:	2900      	cmp	r1, #0
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	f04f 0300 	mov.w	r3, #0
 800152e:	bfbc      	itt	lt
 8001530:	2200      	movlt	r2, #0
 8001532:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001536:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800153a:	e713      	b.n	8001364 <__muldc3+0x378>
 800153c:	f1b9 0f00 	cmp.w	r9, #0
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	bfbc      	itt	lt
 800154a:	2200      	movlt	r2, #0
 800154c:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001550:	4690      	mov	r8, r2
 8001552:	4699      	mov	r9, r3
 8001554:	e6fd      	b.n	8001352 <__muldc3+0x366>
 8001556:	f1bb 0f00 	cmp.w	fp, #0
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	f04f 0300 	mov.w	r3, #0
 8001562:	bfbc      	itt	lt
 8001564:	2200      	movlt	r2, #0
 8001566:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 800156a:	4692      	mov	sl, r2
 800156c:	469b      	mov	fp, r3
 800156e:	e6e7      	b.n	8001340 <__muldc3+0x354>
 8001570:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001572:	2900      	cmp	r1, #0
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	bfbc      	itt	lt
 800157e:	2200      	movlt	r2, #0
 8001580:	f04f 4300 	movlt.w	r3, #2147483648	; 0x80000000
 8001584:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001588:	e6d1      	b.n	800132e <__muldc3+0x342>
 800158a:	bf00      	nop
 800158c:	7ff00000 	.word	0x7ff00000
 8001590:	3ff00000 	.word	0x3ff00000
 8001594:	bff00000 	.word	0xbff00000

08001598 <__udivmoddi4>:
 8001598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800159c:	9e08      	ldr	r6, [sp, #32]
 800159e:	4604      	mov	r4, r0
 80015a0:	4688      	mov	r8, r1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d14b      	bne.n	800163e <__udivmoddi4+0xa6>
 80015a6:	428a      	cmp	r2, r1
 80015a8:	4615      	mov	r5, r2
 80015aa:	d967      	bls.n	800167c <__udivmoddi4+0xe4>
 80015ac:	fab2 f282 	clz	r2, r2
 80015b0:	b14a      	cbz	r2, 80015c6 <__udivmoddi4+0x2e>
 80015b2:	f1c2 0720 	rsb	r7, r2, #32
 80015b6:	fa01 f302 	lsl.w	r3, r1, r2
 80015ba:	fa20 f707 	lsr.w	r7, r0, r7
 80015be:	4095      	lsls	r5, r2
 80015c0:	ea47 0803 	orr.w	r8, r7, r3
 80015c4:	4094      	lsls	r4, r2
 80015c6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80015ca:	0c23      	lsrs	r3, r4, #16
 80015cc:	fbb8 f7fe 	udiv	r7, r8, lr
 80015d0:	fa1f fc85 	uxth.w	ip, r5
 80015d4:	fb0e 8817 	mls	r8, lr, r7, r8
 80015d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80015dc:	fb07 f10c 	mul.w	r1, r7, ip
 80015e0:	4299      	cmp	r1, r3
 80015e2:	d909      	bls.n	80015f8 <__udivmoddi4+0x60>
 80015e4:	18eb      	adds	r3, r5, r3
 80015e6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80015ea:	f080 811b 	bcs.w	8001824 <__udivmoddi4+0x28c>
 80015ee:	4299      	cmp	r1, r3
 80015f0:	f240 8118 	bls.w	8001824 <__udivmoddi4+0x28c>
 80015f4:	3f02      	subs	r7, #2
 80015f6:	442b      	add	r3, r5
 80015f8:	1a5b      	subs	r3, r3, r1
 80015fa:	b2a4      	uxth	r4, r4
 80015fc:	fbb3 f0fe 	udiv	r0, r3, lr
 8001600:	fb0e 3310 	mls	r3, lr, r0, r3
 8001604:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001608:	fb00 fc0c 	mul.w	ip, r0, ip
 800160c:	45a4      	cmp	ip, r4
 800160e:	d909      	bls.n	8001624 <__udivmoddi4+0x8c>
 8001610:	192c      	adds	r4, r5, r4
 8001612:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001616:	f080 8107 	bcs.w	8001828 <__udivmoddi4+0x290>
 800161a:	45a4      	cmp	ip, r4
 800161c:	f240 8104 	bls.w	8001828 <__udivmoddi4+0x290>
 8001620:	3802      	subs	r0, #2
 8001622:	442c      	add	r4, r5
 8001624:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001628:	eba4 040c 	sub.w	r4, r4, ip
 800162c:	2700      	movs	r7, #0
 800162e:	b11e      	cbz	r6, 8001638 <__udivmoddi4+0xa0>
 8001630:	40d4      	lsrs	r4, r2
 8001632:	2300      	movs	r3, #0
 8001634:	e9c6 4300 	strd	r4, r3, [r6]
 8001638:	4639      	mov	r1, r7
 800163a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800163e:	428b      	cmp	r3, r1
 8001640:	d909      	bls.n	8001656 <__udivmoddi4+0xbe>
 8001642:	2e00      	cmp	r6, #0
 8001644:	f000 80eb 	beq.w	800181e <__udivmoddi4+0x286>
 8001648:	2700      	movs	r7, #0
 800164a:	e9c6 0100 	strd	r0, r1, [r6]
 800164e:	4638      	mov	r0, r7
 8001650:	4639      	mov	r1, r7
 8001652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001656:	fab3 f783 	clz	r7, r3
 800165a:	2f00      	cmp	r7, #0
 800165c:	d147      	bne.n	80016ee <__udivmoddi4+0x156>
 800165e:	428b      	cmp	r3, r1
 8001660:	d302      	bcc.n	8001668 <__udivmoddi4+0xd0>
 8001662:	4282      	cmp	r2, r0
 8001664:	f200 80fa 	bhi.w	800185c <__udivmoddi4+0x2c4>
 8001668:	1a84      	subs	r4, r0, r2
 800166a:	eb61 0303 	sbc.w	r3, r1, r3
 800166e:	2001      	movs	r0, #1
 8001670:	4698      	mov	r8, r3
 8001672:	2e00      	cmp	r6, #0
 8001674:	d0e0      	beq.n	8001638 <__udivmoddi4+0xa0>
 8001676:	e9c6 4800 	strd	r4, r8, [r6]
 800167a:	e7dd      	b.n	8001638 <__udivmoddi4+0xa0>
 800167c:	b902      	cbnz	r2, 8001680 <__udivmoddi4+0xe8>
 800167e:	deff      	udf	#255	; 0xff
 8001680:	fab2 f282 	clz	r2, r2
 8001684:	2a00      	cmp	r2, #0
 8001686:	f040 808f 	bne.w	80017a8 <__udivmoddi4+0x210>
 800168a:	1b49      	subs	r1, r1, r5
 800168c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001690:	fa1f f885 	uxth.w	r8, r5
 8001694:	2701      	movs	r7, #1
 8001696:	fbb1 fcfe 	udiv	ip, r1, lr
 800169a:	0c23      	lsrs	r3, r4, #16
 800169c:	fb0e 111c 	mls	r1, lr, ip, r1
 80016a0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80016a4:	fb08 f10c 	mul.w	r1, r8, ip
 80016a8:	4299      	cmp	r1, r3
 80016aa:	d907      	bls.n	80016bc <__udivmoddi4+0x124>
 80016ac:	18eb      	adds	r3, r5, r3
 80016ae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80016b2:	d202      	bcs.n	80016ba <__udivmoddi4+0x122>
 80016b4:	4299      	cmp	r1, r3
 80016b6:	f200 80cd 	bhi.w	8001854 <__udivmoddi4+0x2bc>
 80016ba:	4684      	mov	ip, r0
 80016bc:	1a59      	subs	r1, r3, r1
 80016be:	b2a3      	uxth	r3, r4
 80016c0:	fbb1 f0fe 	udiv	r0, r1, lr
 80016c4:	fb0e 1410 	mls	r4, lr, r0, r1
 80016c8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80016cc:	fb08 f800 	mul.w	r8, r8, r0
 80016d0:	45a0      	cmp	r8, r4
 80016d2:	d907      	bls.n	80016e4 <__udivmoddi4+0x14c>
 80016d4:	192c      	adds	r4, r5, r4
 80016d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80016da:	d202      	bcs.n	80016e2 <__udivmoddi4+0x14a>
 80016dc:	45a0      	cmp	r8, r4
 80016de:	f200 80b6 	bhi.w	800184e <__udivmoddi4+0x2b6>
 80016e2:	4618      	mov	r0, r3
 80016e4:	eba4 0408 	sub.w	r4, r4, r8
 80016e8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80016ec:	e79f      	b.n	800162e <__udivmoddi4+0x96>
 80016ee:	f1c7 0c20 	rsb	ip, r7, #32
 80016f2:	40bb      	lsls	r3, r7
 80016f4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80016f8:	ea4e 0e03 	orr.w	lr, lr, r3
 80016fc:	fa01 f407 	lsl.w	r4, r1, r7
 8001700:	fa20 f50c 	lsr.w	r5, r0, ip
 8001704:	fa21 f30c 	lsr.w	r3, r1, ip
 8001708:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800170c:	4325      	orrs	r5, r4
 800170e:	fbb3 f9f8 	udiv	r9, r3, r8
 8001712:	0c2c      	lsrs	r4, r5, #16
 8001714:	fb08 3319 	mls	r3, r8, r9, r3
 8001718:	fa1f fa8e 	uxth.w	sl, lr
 800171c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001720:	fb09 f40a 	mul.w	r4, r9, sl
 8001724:	429c      	cmp	r4, r3
 8001726:	fa02 f207 	lsl.w	r2, r2, r7
 800172a:	fa00 f107 	lsl.w	r1, r0, r7
 800172e:	d90b      	bls.n	8001748 <__udivmoddi4+0x1b0>
 8001730:	eb1e 0303 	adds.w	r3, lr, r3
 8001734:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001738:	f080 8087 	bcs.w	800184a <__udivmoddi4+0x2b2>
 800173c:	429c      	cmp	r4, r3
 800173e:	f240 8084 	bls.w	800184a <__udivmoddi4+0x2b2>
 8001742:	f1a9 0902 	sub.w	r9, r9, #2
 8001746:	4473      	add	r3, lr
 8001748:	1b1b      	subs	r3, r3, r4
 800174a:	b2ad      	uxth	r5, r5
 800174c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001750:	fb08 3310 	mls	r3, r8, r0, r3
 8001754:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001758:	fb00 fa0a 	mul.w	sl, r0, sl
 800175c:	45a2      	cmp	sl, r4
 800175e:	d908      	bls.n	8001772 <__udivmoddi4+0x1da>
 8001760:	eb1e 0404 	adds.w	r4, lr, r4
 8001764:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001768:	d26b      	bcs.n	8001842 <__udivmoddi4+0x2aa>
 800176a:	45a2      	cmp	sl, r4
 800176c:	d969      	bls.n	8001842 <__udivmoddi4+0x2aa>
 800176e:	3802      	subs	r0, #2
 8001770:	4474      	add	r4, lr
 8001772:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001776:	fba0 8902 	umull	r8, r9, r0, r2
 800177a:	eba4 040a 	sub.w	r4, r4, sl
 800177e:	454c      	cmp	r4, r9
 8001780:	46c2      	mov	sl, r8
 8001782:	464b      	mov	r3, r9
 8001784:	d354      	bcc.n	8001830 <__udivmoddi4+0x298>
 8001786:	d051      	beq.n	800182c <__udivmoddi4+0x294>
 8001788:	2e00      	cmp	r6, #0
 800178a:	d069      	beq.n	8001860 <__udivmoddi4+0x2c8>
 800178c:	ebb1 050a 	subs.w	r5, r1, sl
 8001790:	eb64 0403 	sbc.w	r4, r4, r3
 8001794:	fa04 fc0c 	lsl.w	ip, r4, ip
 8001798:	40fd      	lsrs	r5, r7
 800179a:	40fc      	lsrs	r4, r7
 800179c:	ea4c 0505 	orr.w	r5, ip, r5
 80017a0:	e9c6 5400 	strd	r5, r4, [r6]
 80017a4:	2700      	movs	r7, #0
 80017a6:	e747      	b.n	8001638 <__udivmoddi4+0xa0>
 80017a8:	f1c2 0320 	rsb	r3, r2, #32
 80017ac:	fa20 f703 	lsr.w	r7, r0, r3
 80017b0:	4095      	lsls	r5, r2
 80017b2:	fa01 f002 	lsl.w	r0, r1, r2
 80017b6:	fa21 f303 	lsr.w	r3, r1, r3
 80017ba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80017be:	4338      	orrs	r0, r7
 80017c0:	0c01      	lsrs	r1, r0, #16
 80017c2:	fbb3 f7fe 	udiv	r7, r3, lr
 80017c6:	fa1f f885 	uxth.w	r8, r5
 80017ca:	fb0e 3317 	mls	r3, lr, r7, r3
 80017ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80017d2:	fb07 f308 	mul.w	r3, r7, r8
 80017d6:	428b      	cmp	r3, r1
 80017d8:	fa04 f402 	lsl.w	r4, r4, r2
 80017dc:	d907      	bls.n	80017ee <__udivmoddi4+0x256>
 80017de:	1869      	adds	r1, r5, r1
 80017e0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80017e4:	d22f      	bcs.n	8001846 <__udivmoddi4+0x2ae>
 80017e6:	428b      	cmp	r3, r1
 80017e8:	d92d      	bls.n	8001846 <__udivmoddi4+0x2ae>
 80017ea:	3f02      	subs	r7, #2
 80017ec:	4429      	add	r1, r5
 80017ee:	1acb      	subs	r3, r1, r3
 80017f0:	b281      	uxth	r1, r0
 80017f2:	fbb3 f0fe 	udiv	r0, r3, lr
 80017f6:	fb0e 3310 	mls	r3, lr, r0, r3
 80017fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80017fe:	fb00 f308 	mul.w	r3, r0, r8
 8001802:	428b      	cmp	r3, r1
 8001804:	d907      	bls.n	8001816 <__udivmoddi4+0x27e>
 8001806:	1869      	adds	r1, r5, r1
 8001808:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800180c:	d217      	bcs.n	800183e <__udivmoddi4+0x2a6>
 800180e:	428b      	cmp	r3, r1
 8001810:	d915      	bls.n	800183e <__udivmoddi4+0x2a6>
 8001812:	3802      	subs	r0, #2
 8001814:	4429      	add	r1, r5
 8001816:	1ac9      	subs	r1, r1, r3
 8001818:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800181c:	e73b      	b.n	8001696 <__udivmoddi4+0xfe>
 800181e:	4637      	mov	r7, r6
 8001820:	4630      	mov	r0, r6
 8001822:	e709      	b.n	8001638 <__udivmoddi4+0xa0>
 8001824:	4607      	mov	r7, r0
 8001826:	e6e7      	b.n	80015f8 <__udivmoddi4+0x60>
 8001828:	4618      	mov	r0, r3
 800182a:	e6fb      	b.n	8001624 <__udivmoddi4+0x8c>
 800182c:	4541      	cmp	r1, r8
 800182e:	d2ab      	bcs.n	8001788 <__udivmoddi4+0x1f0>
 8001830:	ebb8 0a02 	subs.w	sl, r8, r2
 8001834:	eb69 020e 	sbc.w	r2, r9, lr
 8001838:	3801      	subs	r0, #1
 800183a:	4613      	mov	r3, r2
 800183c:	e7a4      	b.n	8001788 <__udivmoddi4+0x1f0>
 800183e:	4660      	mov	r0, ip
 8001840:	e7e9      	b.n	8001816 <__udivmoddi4+0x27e>
 8001842:	4618      	mov	r0, r3
 8001844:	e795      	b.n	8001772 <__udivmoddi4+0x1da>
 8001846:	4667      	mov	r7, ip
 8001848:	e7d1      	b.n	80017ee <__udivmoddi4+0x256>
 800184a:	4681      	mov	r9, r0
 800184c:	e77c      	b.n	8001748 <__udivmoddi4+0x1b0>
 800184e:	3802      	subs	r0, #2
 8001850:	442c      	add	r4, r5
 8001852:	e747      	b.n	80016e4 <__udivmoddi4+0x14c>
 8001854:	f1ac 0c02 	sub.w	ip, ip, #2
 8001858:	442b      	add	r3, r5
 800185a:	e72f      	b.n	80016bc <__udivmoddi4+0x124>
 800185c:	4638      	mov	r0, r7
 800185e:	e708      	b.n	8001672 <__udivmoddi4+0xda>
 8001860:	4637      	mov	r7, r6
 8001862:	e6e9      	b.n	8001638 <__udivmoddi4+0xa0>

08001864 <__aeabi_idiv0>:
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <cutOffSetup>:
#include "fft.h"
#include "usart.h"
#include "lcd.h"


void cutOffSetup() {
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
		if(cutOffFreq == 0.1) {
 800186c:	4b62      	ldr	r3, [pc, #392]	; (80019f8 <cutOffSetup+0x190>)
 800186e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001872:	a353      	add	r3, pc, #332	; (adr r3, 80019c0 <cutOffSetup+0x158>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7ff f936 	bl	8000ae8 <__aeabi_dcmpeq>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d008      	beq.n	8001894 <cutOffSetup+0x2c>
	    	 copy_LP(firCoef_LP, firCoef_LP_01);
 8001882:	495e      	ldr	r1, [pc, #376]	; (80019fc <cutOffSetup+0x194>)
 8001884:	485e      	ldr	r0, [pc, #376]	; (8001a00 <cutOffSetup+0x198>)
 8001886:	f000 fb7b 	bl	8001f80 <copy_LP>
	    	 copy_HP(firCoef_HP, firCoef_HP_01);
 800188a:	495e      	ldr	r1, [pc, #376]	; (8001a04 <cutOffSetup+0x19c>)
 800188c:	485e      	ldr	r0, [pc, #376]	; (8001a08 <cutOffSetup+0x1a0>)
 800188e:	f000 fb96 	bl	8001fbe <copy_HP>
	         copy_HP(firCoef_HP, firCoef_HP_08);
	       } else {
	         copy_LP(firCoef_LP, firCoef_LP_09);
	         copy_HP(firCoef_HP, firCoef_HP_09);
	       }
}
 8001892:	e093      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.2) {
 8001894:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <cutOffSetup+0x190>)
 8001896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189a:	a34b      	add	r3, pc, #300	; (adr r3, 80019c8 <cutOffSetup+0x160>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7ff f922 	bl	8000ae8 <__aeabi_dcmpeq>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <cutOffSetup+0x54>
	         copy_LP(firCoef_LP, firCoef_LP_02);
 80018aa:	4958      	ldr	r1, [pc, #352]	; (8001a0c <cutOffSetup+0x1a4>)
 80018ac:	4854      	ldr	r0, [pc, #336]	; (8001a00 <cutOffSetup+0x198>)
 80018ae:	f000 fb67 	bl	8001f80 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_02);
 80018b2:	4957      	ldr	r1, [pc, #348]	; (8001a10 <cutOffSetup+0x1a8>)
 80018b4:	4854      	ldr	r0, [pc, #336]	; (8001a08 <cutOffSetup+0x1a0>)
 80018b6:	f000 fb82 	bl	8001fbe <copy_HP>
}
 80018ba:	e07f      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.3) {
 80018bc:	4b4e      	ldr	r3, [pc, #312]	; (80019f8 <cutOffSetup+0x190>)
 80018be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c2:	a343      	add	r3, pc, #268	; (adr r3, 80019d0 <cutOffSetup+0x168>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7ff f90e 	bl	8000ae8 <__aeabi_dcmpeq>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d008      	beq.n	80018e4 <cutOffSetup+0x7c>
	         copy_LP(firCoef_LP, firCoef_LP_03);
 80018d2:	4950      	ldr	r1, [pc, #320]	; (8001a14 <cutOffSetup+0x1ac>)
 80018d4:	484a      	ldr	r0, [pc, #296]	; (8001a00 <cutOffSetup+0x198>)
 80018d6:	f000 fb53 	bl	8001f80 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_03);
 80018da:	494f      	ldr	r1, [pc, #316]	; (8001a18 <cutOffSetup+0x1b0>)
 80018dc:	484a      	ldr	r0, [pc, #296]	; (8001a08 <cutOffSetup+0x1a0>)
 80018de:	f000 fb6e 	bl	8001fbe <copy_HP>
}
 80018e2:	e06b      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.4) {
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <cutOffSetup+0x190>)
 80018e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ea:	a33b      	add	r3, pc, #236	; (adr r3, 80019d8 <cutOffSetup+0x170>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	f7ff f8fa 	bl	8000ae8 <__aeabi_dcmpeq>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <cutOffSetup+0xa4>
	         copy_LP(firCoef_LP, firCoef_LP_04);
 80018fa:	4948      	ldr	r1, [pc, #288]	; (8001a1c <cutOffSetup+0x1b4>)
 80018fc:	4840      	ldr	r0, [pc, #256]	; (8001a00 <cutOffSetup+0x198>)
 80018fe:	f000 fb3f 	bl	8001f80 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_04);
 8001902:	4947      	ldr	r1, [pc, #284]	; (8001a20 <cutOffSetup+0x1b8>)
 8001904:	4840      	ldr	r0, [pc, #256]	; (8001a08 <cutOffSetup+0x1a0>)
 8001906:	f000 fb5a 	bl	8001fbe <copy_HP>
}
 800190a:	e057      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.5) {
 800190c:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <cutOffSetup+0x190>)
 800190e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b43      	ldr	r3, [pc, #268]	; (8001a24 <cutOffSetup+0x1bc>)
 8001918:	f7ff f8e6 	bl	8000ae8 <__aeabi_dcmpeq>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d008      	beq.n	8001934 <cutOffSetup+0xcc>
	         copy_LP(firCoef_LP, firCoef_LP_05);
 8001922:	4941      	ldr	r1, [pc, #260]	; (8001a28 <cutOffSetup+0x1c0>)
 8001924:	4836      	ldr	r0, [pc, #216]	; (8001a00 <cutOffSetup+0x198>)
 8001926:	f000 fb2b 	bl	8001f80 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_05);
 800192a:	4940      	ldr	r1, [pc, #256]	; (8001a2c <cutOffSetup+0x1c4>)
 800192c:	4836      	ldr	r0, [pc, #216]	; (8001a08 <cutOffSetup+0x1a0>)
 800192e:	f000 fb46 	bl	8001fbe <copy_HP>
}
 8001932:	e043      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.6) {
 8001934:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <cutOffSetup+0x190>)
 8001936:	e9d3 0100 	ldrd	r0, r1, [r3]
 800193a:	a329      	add	r3, pc, #164	; (adr r3, 80019e0 <cutOffSetup+0x178>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	f7ff f8d2 	bl	8000ae8 <__aeabi_dcmpeq>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d008      	beq.n	800195c <cutOffSetup+0xf4>
	         copy_LP(firCoef_LP, firCoef_LP_06);
 800194a:	4939      	ldr	r1, [pc, #228]	; (8001a30 <cutOffSetup+0x1c8>)
 800194c:	482c      	ldr	r0, [pc, #176]	; (8001a00 <cutOffSetup+0x198>)
 800194e:	f000 fb17 	bl	8001f80 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_06);
 8001952:	4938      	ldr	r1, [pc, #224]	; (8001a34 <cutOffSetup+0x1cc>)
 8001954:	482c      	ldr	r0, [pc, #176]	; (8001a08 <cutOffSetup+0x1a0>)
 8001956:	f000 fb32 	bl	8001fbe <copy_HP>
}
 800195a:	e02f      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.7) {
 800195c:	4b26      	ldr	r3, [pc, #152]	; (80019f8 <cutOffSetup+0x190>)
 800195e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001962:	a321      	add	r3, pc, #132	; (adr r3, 80019e8 <cutOffSetup+0x180>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7ff f8be 	bl	8000ae8 <__aeabi_dcmpeq>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d008      	beq.n	8001984 <cutOffSetup+0x11c>
	         copy_LP(firCoef_LP, firCoef_LP_07);
 8001972:	4931      	ldr	r1, [pc, #196]	; (8001a38 <cutOffSetup+0x1d0>)
 8001974:	4822      	ldr	r0, [pc, #136]	; (8001a00 <cutOffSetup+0x198>)
 8001976:	f000 fb03 	bl	8001f80 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_07);
 800197a:	4930      	ldr	r1, [pc, #192]	; (8001a3c <cutOffSetup+0x1d4>)
 800197c:	4822      	ldr	r0, [pc, #136]	; (8001a08 <cutOffSetup+0x1a0>)
 800197e:	f000 fb1e 	bl	8001fbe <copy_HP>
}
 8001982:	e01b      	b.n	80019bc <cutOffSetup+0x154>
	       } else if(cutOffFreq == 0.8) {
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <cutOffSetup+0x190>)
 8001986:	e9d3 0100 	ldrd	r0, r1, [r3]
 800198a:	a319      	add	r3, pc, #100	; (adr r3, 80019f0 <cutOffSetup+0x188>)
 800198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001990:	f7ff f8aa 	bl	8000ae8 <__aeabi_dcmpeq>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d008      	beq.n	80019ac <cutOffSetup+0x144>
	         copy_LP(firCoef_LP, firCoef_LP_08);
 800199a:	4929      	ldr	r1, [pc, #164]	; (8001a40 <cutOffSetup+0x1d8>)
 800199c:	4818      	ldr	r0, [pc, #96]	; (8001a00 <cutOffSetup+0x198>)
 800199e:	f000 faef 	bl	8001f80 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_08);
 80019a2:	4928      	ldr	r1, [pc, #160]	; (8001a44 <cutOffSetup+0x1dc>)
 80019a4:	4818      	ldr	r0, [pc, #96]	; (8001a08 <cutOffSetup+0x1a0>)
 80019a6:	f000 fb0a 	bl	8001fbe <copy_HP>
}
 80019aa:	e007      	b.n	80019bc <cutOffSetup+0x154>
	         copy_LP(firCoef_LP, firCoef_LP_09);
 80019ac:	4926      	ldr	r1, [pc, #152]	; (8001a48 <cutOffSetup+0x1e0>)
 80019ae:	4814      	ldr	r0, [pc, #80]	; (8001a00 <cutOffSetup+0x198>)
 80019b0:	f000 fae6 	bl	8001f80 <copy_LP>
	         copy_HP(firCoef_HP, firCoef_HP_09);
 80019b4:	4925      	ldr	r1, [pc, #148]	; (8001a4c <cutOffSetup+0x1e4>)
 80019b6:	4814      	ldr	r0, [pc, #80]	; (8001a08 <cutOffSetup+0x1a0>)
 80019b8:	f000 fb01 	bl	8001fbe <copy_HP>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	9999999a 	.word	0x9999999a
 80019c4:	3fb99999 	.word	0x3fb99999
 80019c8:	9999999a 	.word	0x9999999a
 80019cc:	3fc99999 	.word	0x3fc99999
 80019d0:	33333333 	.word	0x33333333
 80019d4:	3fd33333 	.word	0x3fd33333
 80019d8:	9999999a 	.word	0x9999999a
 80019dc:	3fd99999 	.word	0x3fd99999
 80019e0:	33333333 	.word	0x33333333
 80019e4:	3fe33333 	.word	0x3fe33333
 80019e8:	66666666 	.word	0x66666666
 80019ec:	3fe66666 	.word	0x3fe66666
 80019f0:	9999999a 	.word	0x9999999a
 80019f4:	3fe99999 	.word	0x3fe99999
 80019f8:	20000960 	.word	0x20000960
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000ce8 	.word	0x20000ce8
 8001a04:	200004a4 	.word	0x200004a4
 8001a08:	200011e8 	.word	0x200011e8
 8001a0c:	20000084 	.word	0x20000084
 8001a10:	20000528 	.word	0x20000528
 8001a14:	20000108 	.word	0x20000108
 8001a18:	200005ac 	.word	0x200005ac
 8001a1c:	2000018c 	.word	0x2000018c
 8001a20:	20000630 	.word	0x20000630
 8001a24:	3fe00000 	.word	0x3fe00000
 8001a28:	20000210 	.word	0x20000210
 8001a2c:	200006b4 	.word	0x200006b4
 8001a30:	20000294 	.word	0x20000294
 8001a34:	20000738 	.word	0x20000738
 8001a38:	20000318 	.word	0x20000318
 8001a3c:	200007bc 	.word	0x200007bc
 8001a40:	2000039c 	.word	0x2000039c
 8001a44:	20000840 	.word	0x20000840
 8001a48:	20000420 	.word	0x20000420
 8001a4c:	200008c4 	.word	0x200008c4

08001a50 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	f6ad 7d4c 	subw	sp, sp, #3916	; 0xf4c
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	6018      	str	r0, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc3);
 8001a5c:	48da      	ldr	r0, [pc, #872]	; (8001dc8 <HAL_ADC_ConvCpltCallback+0x378>)
 8001a5e:	f003 f97f 	bl	8004d60 <HAL_ADC_Stop_DMA>

	ADC_ChannelConfTypeDef sConfig = {0};
 8001a62:	f607 730c 	addw	r3, r7, #3852	; 0xf0c
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;
 8001a70:	2304      	movs	r3, #4
 8001a72:	f8c7 3f0c 	str.w	r3, [r7, #3852]	; 0xf0c
	sConfig.Rank = 1;
 8001a76:	2301      	movs	r3, #1
 8001a78:	f8c7 3f10 	str.w	r3, [r7, #3856]	; 0xf10

	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 1);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a82:	48d2      	ldr	r0, [pc, #840]	; (8001dcc <HAL_ADC_ConvCpltCallback+0x37c>)
 8001a84:	f005 f856 	bl	8006b34 <HAL_GPIO_WritePin>
	for(int i = 0; i < BUFFER_SIZE; ++i) {
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 3f44 	str.w	r3, [r7, #3908]	; 0xf44
 8001a8e:	e03d      	b.n	8001b0c <HAL_ADC_ConvCpltCallback+0xbc>
				array[i] = -amplitude/2 + (float)buffer[i]/FS_INT *(amplitude/2 + 1);
 8001a90:	4bcf      	ldr	r3, [pc, #828]	; (8001dd0 <HAL_ADC_ConvCpltCallback+0x380>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	eef1 7a67 	vneg.f32	s15, s15
 8001a9a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a9e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aa2:	4acc      	ldr	r2, [pc, #816]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x384>)
 8001aa4:	f8d7 3f44 	ldr.w	r3, [r7, #3908]	; 0xf44
 8001aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab6:	ed9f 6ac8 	vldr	s12, [pc, #800]	; 8001dd8 <HAL_ADC_ConvCpltCallback+0x388>
 8001aba:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001abe:	4bc4      	ldr	r3, [pc, #784]	; (8001dd0 <HAL_ADC_ConvCpltCallback+0x380>)
 8001ac0:	ed93 6a00 	vldr	s12, [r3]
 8001ac4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001ac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001acc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8001ad0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001adc:	4abf      	ldr	r2, [pc, #764]	; (8001ddc <HAL_ADC_ConvCpltCallback+0x38c>)
 8001ade:	f8d7 3f44 	ldr.w	r3, [r7, #3908]	; 0xf44
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	edc3 7a00 	vstr	s15, [r3]
				arrayInt[i] = buffer[i];
 8001aea:	4aba      	ldr	r2, [pc, #744]	; (8001dd4 <HAL_ADC_ConvCpltCallback+0x384>)
 8001aec:	f8d7 3f44 	ldr.w	r3, [r7, #3908]	; 0xf44
 8001af0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4619      	mov	r1, r3
 8001af8:	4ab9      	ldr	r2, [pc, #740]	; (8001de0 <HAL_ADC_ConvCpltCallback+0x390>)
 8001afa:	f8d7 3f44 	ldr.w	r3, [r7, #3908]	; 0xf44
 8001afe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < BUFFER_SIZE; ++i) {
 8001b02:	f8d7 3f44 	ldr.w	r3, [r7, #3908]	; 0xf44
 8001b06:	3301      	adds	r3, #1
 8001b08:	f8c7 3f44 	str.w	r3, [r7, #3908]	; 0xf44
 8001b0c:	f8d7 3f44 	ldr.w	r3, [r7, #3908]	; 0xf44
 8001b10:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b14:	dbbc      	blt.n	8001a90 <HAL_ADC_ConvCpltCallback+0x40>
			}

	float sum = 0;
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8001b1e:	6013      	str	r3, [r2, #0]

	if(!lowpass) {										//!lowpass= 1 -> HP
 8001b20:	4bb0      	ldr	r3, [pc, #704]	; (8001de4 <HAL_ADC_ConvCpltCallback+0x394>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f083 0301 	eor.w	r3, r3, #1
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d06e      	beq.n	8001c0c <HAL_ADC_ConvCpltCallback+0x1bc>
		for(int n = 0; n < BUFFER_SIZE; ++n) {
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 3f3c 	str.w	r3, [r7, #3900]	; 0xf3c
 8001b34:	e064      	b.n	8001c00 <HAL_ADC_ConvCpltCallback+0x1b0>
			for(int k = 0; k < FILTER_ORDER; ++k) {
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 3f38 	str.w	r3, [r7, #3896]	; 0xf38
 8001b3c:	e049      	b.n	8001bd2 <HAL_ADC_ConvCpltCallback+0x182>
				if(n - k >= 0)
 8001b3e:	f8d7 2f3c 	ldr.w	r2, [r7, #3900]	; 0xf3c
 8001b42:	f8d7 3f38 	ldr.w	r3, [r7, #3896]	; 0xf38
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	db1d      	blt.n	8001b88 <HAL_ADC_ConvCpltCallback+0x138>
					sum += firCoef_LP[k] * array[n-k];
 8001b4c:	4aa6      	ldr	r2, [pc, #664]	; (8001de8 <HAL_ADC_ConvCpltCallback+0x398>)
 8001b4e:	f8d7 3f38 	ldr.w	r3, [r7, #3896]	; 0xf38
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	ed93 7a00 	vldr	s14, [r3]
 8001b5a:	f8d7 2f3c 	ldr.w	r2, [r7, #3900]	; 0xf3c
 8001b5e:	f8d7 3f38 	ldr.w	r3, [r7, #3896]	; 0xf38
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	4a9d      	ldr	r2, [pc, #628]	; (8001ddc <HAL_ADC_ConvCpltCallback+0x38c>)
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b72:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8001b76:	ed93 7a00 	vldr	s14, [r3]
 8001b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7e:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8001b82:	edc3 7a00 	vstr	s15, [r3]
 8001b86:	e01f      	b.n	8001bc8 <HAL_ADC_ConvCpltCallback+0x178>
				else
					sum += firCoef_LP[k] * arrayFormer[BUFFER_SIZE + n - k + 1];
 8001b88:	4a97      	ldr	r2, [pc, #604]	; (8001de8 <HAL_ADC_ConvCpltCallback+0x398>)
 8001b8a:	f8d7 3f38 	ldr.w	r3, [r7, #3896]	; 0xf38
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	ed93 7a00 	vldr	s14, [r3]
 8001b96:	f8d7 3f3c 	ldr.w	r3, [r7, #3900]	; 0xf3c
 8001b9a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8001b9e:	f8d7 3f38 	ldr.w	r3, [r7, #3896]	; 0xf38
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	4a91      	ldr	r2, [pc, #580]	; (8001dec <HAL_ADC_ConvCpltCallback+0x39c>)
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb4:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8001bb8:	ed93 7a00 	vldr	s14, [r3]
 8001bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc0:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8001bc4:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < FILTER_ORDER; ++k) {
 8001bc8:	f8d7 3f38 	ldr.w	r3, [r7, #3896]	; 0xf38
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f8c7 3f38 	str.w	r3, [r7, #3896]	; 0xf38
 8001bd2:	f8d7 3f38 	ldr.w	r3, [r7, #3896]	; 0xf38
 8001bd6:	2b1f      	cmp	r3, #31
 8001bd8:	ddb1      	ble.n	8001b3e <HAL_ADC_ConvCpltCallback+0xee>
			}
			filteredArray[n] = sum;
 8001bda:	4a85      	ldr	r2, [pc, #532]	; (8001df0 <HAL_ADC_ConvCpltCallback+0x3a0>)
 8001bdc:	f8d7 3f3c 	ldr.w	r3, [r7, #3900]	; 0xf3c
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	601a      	str	r2, [r3, #0]
			sum = 0;
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8001bf4:	6013      	str	r3, [r2, #0]
		for(int n = 0; n < BUFFER_SIZE; ++n) {
 8001bf6:	f8d7 3f3c 	ldr.w	r3, [r7, #3900]	; 0xf3c
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	f8c7 3f3c 	str.w	r3, [r7, #3900]	; 0xf3c
 8001c00:	f8d7 3f3c 	ldr.w	r3, [r7, #3900]	; 0xf3c
 8001c04:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c08:	db95      	blt.n	8001b36 <HAL_ADC_ConvCpltCallback+0xe6>
 8001c0a:	e06d      	b.n	8001ce8 <HAL_ADC_ConvCpltCallback+0x298>
		}
	} else {											//!lowpass = 0 -> LP
		for(int n = 0; n < BUFFER_SIZE; ++n) {			//L = BUFFER_SIZE
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3f34 	str.w	r3, [r7, #3892]	; 0xf34
 8001c12:	e064      	b.n	8001cde <HAL_ADC_ConvCpltCallback+0x28e>
			for(int k = 0; k < FILTER_ORDER; ++k) {	//N = L - 1 = BUFFER_SIZE - 1
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8c7 3f30 	str.w	r3, [r7, #3888]	; 0xf30
 8001c1a:	e049      	b.n	8001cb0 <HAL_ADC_ConvCpltCallback+0x260>
				if(n - k >= 0)
 8001c1c:	f8d7 2f34 	ldr.w	r2, [r7, #3892]	; 0xf34
 8001c20:	f8d7 3f30 	ldr.w	r3, [r7, #3888]	; 0xf30
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db1d      	blt.n	8001c66 <HAL_ADC_ConvCpltCallback+0x216>
					sum += firCoef_HP[k] * array[n-k];
 8001c2a:	4a72      	ldr	r2, [pc, #456]	; (8001df4 <HAL_ADC_ConvCpltCallback+0x3a4>)
 8001c2c:	f8d7 3f30 	ldr.w	r3, [r7, #3888]	; 0xf30
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	ed93 7a00 	vldr	s14, [r3]
 8001c38:	f8d7 2f34 	ldr.w	r2, [r7, #3892]	; 0xf34
 8001c3c:	f8d7 3f30 	ldr.w	r3, [r7, #3888]	; 0xf30
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	4a66      	ldr	r2, [pc, #408]	; (8001ddc <HAL_ADC_ConvCpltCallback+0x38c>)
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	edd3 7a00 	vldr	s15, [r3]
 8001c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c50:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8001c54:	ed93 7a00 	vldr	s14, [r3]
 8001c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5c:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8001c60:	edc3 7a00 	vstr	s15, [r3]
 8001c64:	e01f      	b.n	8001ca6 <HAL_ADC_ConvCpltCallback+0x256>
				else
					sum += firCoef_HP[k] * arrayFormer[BUFFER_SIZE + n - k + 1];
 8001c66:	4a63      	ldr	r2, [pc, #396]	; (8001df4 <HAL_ADC_ConvCpltCallback+0x3a4>)
 8001c68:	f8d7 3f30 	ldr.w	r3, [r7, #3888]	; 0xf30
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	ed93 7a00 	vldr	s14, [r3]
 8001c74:	f8d7 3f34 	ldr.w	r3, [r7, #3892]	; 0xf34
 8001c78:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8001c7c:	f8d7 3f30 	ldr.w	r3, [r7, #3888]	; 0xf30
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	4a59      	ldr	r2, [pc, #356]	; (8001dec <HAL_ADC_ConvCpltCallback+0x39c>)
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c92:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8001c96:	ed93 7a00 	vldr	s14, [r3]
 8001c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9e:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8001ca2:	edc3 7a00 	vstr	s15, [r3]
			for(int k = 0; k < FILTER_ORDER; ++k) {	//N = L - 1 = BUFFER_SIZE - 1
 8001ca6:	f8d7 3f30 	ldr.w	r3, [r7, #3888]	; 0xf30
 8001caa:	3301      	adds	r3, #1
 8001cac:	f8c7 3f30 	str.w	r3, [r7, #3888]	; 0xf30
 8001cb0:	f8d7 3f30 	ldr.w	r3, [r7, #3888]	; 0xf30
 8001cb4:	2b1f      	cmp	r3, #31
 8001cb6:	ddb1      	ble.n	8001c1c <HAL_ADC_ConvCpltCallback+0x1cc>
			}
			filteredArray[n] = sum;
 8001cb8:	4a4d      	ldr	r2, [pc, #308]	; (8001df0 <HAL_ADC_ConvCpltCallback+0x3a0>)
 8001cba:	f8d7 3f34 	ldr.w	r3, [r7, #3892]	; 0xf34
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	601a      	str	r2, [r3, #0]
			sum = 0;
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8001cd2:	6013      	str	r3, [r2, #0]
		for(int n = 0; n < BUFFER_SIZE; ++n) {			//L = BUFFER_SIZE
 8001cd4:	f8d7 3f34 	ldr.w	r3, [r7, #3892]	; 0xf34
 8001cd8:	3301      	adds	r3, #1
 8001cda:	f8c7 3f34 	str.w	r3, [r7, #3892]	; 0xf34
 8001cde:	f8d7 3f34 	ldr.w	r3, [r7, #3892]	; 0xf34
 8001ce2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001ce6:	db95      	blt.n	8001c14 <HAL_ADC_ConvCpltCallback+0x1c4>
		}
	}

	for(int i = 0; i < BUFFER_SIZE; i++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 3f2c 	str.w	r3, [r7, #3884]	; 0xf2c
 8001cee:	e028      	b.n	8001d42 <HAL_ADC_ConvCpltCallback+0x2f2>
		filteredArray_int[i] = filteredArray[i] * FS_INT_HALF + FS_INT_HALF;
 8001cf0:	4a3f      	ldr	r2, [pc, #252]	; (8001df0 <HAL_ADC_ConvCpltCallback+0x3a0>)
 8001cf2:	f8d7 3f2c 	ldr.w	r3, [r7, #3884]	; 0xf2c
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	edd3 7a00 	vldr	s15, [r3]
 8001cfe:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001df8 <HAL_ADC_ConvCpltCallback+0x3a8>
 8001d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d06:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001df8 <HAL_ADC_ConvCpltCallback+0x3a8>
 8001d0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d12:	ee17 1a90 	vmov	r1, s15
 8001d16:	4a39      	ldr	r2, [pc, #228]	; (8001dfc <HAL_ADC_ConvCpltCallback+0x3ac>)
 8001d18:	f8d7 3f2c 	ldr.w	r3, [r7, #3884]	; 0xf2c
 8001d1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		arrayFormer[i] = array[i];
 8001d20:	4a2e      	ldr	r2, [pc, #184]	; (8001ddc <HAL_ADC_ConvCpltCallback+0x38c>)
 8001d22:	f8d7 3f2c 	ldr.w	r3, [r7, #3884]	; 0xf2c
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	492f      	ldr	r1, [pc, #188]	; (8001dec <HAL_ADC_ConvCpltCallback+0x39c>)
 8001d2e:	f8d7 3f2c 	ldr.w	r3, [r7, #3884]	; 0xf2c
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < BUFFER_SIZE; i++) {
 8001d38:	f8d7 3f2c 	ldr.w	r3, [r7, #3884]	; 0xf2c
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f8c7 3f2c 	str.w	r3, [r7, #3884]	; 0xf2c
 8001d42:	f8d7 3f2c 	ldr.w	r3, [r7, #3884]	; 0xf2c
 8001d46:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d4a:	dbd1      	blt.n	8001cf0 <HAL_ADC_ConvCpltCallback+0x2a0>
	}

		if(!signal_q) {
 8001d4c:	4b2c      	ldr	r3, [pc, #176]	; (8001e00 <HAL_ADC_ConvCpltCallback+0x3b0>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	f083 0301 	eor.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f000 80e9 	beq.w	8001f2e <HAL_ADC_ConvCpltCallback+0x4de>

			if(filtered){
 8001d5c:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_ADC_ConvCpltCallback+0x3b4>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 8082 	beq.w	8001e6a <HAL_ADC_ConvCpltCallback+0x41a>
				int spectrum_int[BUFFER_SIZE];
				float complex vector[BUFFER_SIZE];
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001d66:	2300      	movs	r3, #0
 8001d68:	f8c7 3f28 	str.w	r3, [r7, #3880]	; 0xf28
 8001d6c:	e01c      	b.n	8001da8 <HAL_ADC_ConvCpltCallback+0x358>
					vector[k] = (float) filteredArray_int[k];
 8001d6e:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <HAL_ADC_ConvCpltCallback+0x3ac>)
 8001d70:	f8d7 3f28 	ldr.w	r3, [r7, #3880]	; 0xf28
 8001d74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d80:	ee17 4a90 	vmov	r4, s15
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8001d8c:	f8d7 2f28 	ldr.w	r2, [r7, #3880]	; 0xf28
 8001d90:	00d1      	lsls	r1, r2, #3
 8001d92:	4419      	add	r1, r3
 8001d94:	600c      	str	r4, [r1, #0]
 8001d96:	00d2      	lsls	r2, r2, #3
 8001d98:	4413      	add	r3, r2
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	6018      	str	r0, [r3, #0]
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001d9e:	f8d7 3f28 	ldr.w	r3, [r7, #3880]	; 0xf28
 8001da2:	3301      	adds	r3, #1
 8001da4:	f8c7 3f28 	str.w	r3, [r7, #3880]	; 0xf28
 8001da8:	f8d7 3f28 	ldr.w	r3, [r7, #3880]	; 0xf28
 8001dac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001db0:	dbdd      	blt.n	8001d6e <HAL_ADC_ConvCpltCallback+0x31e>
				}
				fft(vector, BUFFER_SIZE);
 8001db2:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8001db6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 ff4d 	bl	8002c5a <fft>
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 3f24 	str.w	r3, [r7, #3876]	; 0xf24
 8001dc6:	e045      	b.n	8001e54 <HAL_ADC_ConvCpltCallback+0x404>
 8001dc8:	2000174c 	.word	0x2000174c
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	20000954 	.word	0x20000954
 8001dd4:	20002194 	.word	0x20002194
 8001dd8:	457ff000 	.word	0x457ff000
 8001ddc:	20002e18 	.word	0x20002e18
 8001de0:	20001794 	.word	0x20001794
 8001de4:	20000b7d 	.word	0x20000b7d
 8001de8:	20000ce8 	.word	0x20000ce8
 8001dec:	20001c94 	.word	0x20001c94
 8001df0:	20002414 	.word	0x20002414
 8001df4:	200011e8 	.word	0x200011e8
 8001df8:	44ffe000 	.word	0x44ffe000
 8001dfc:	20002914 	.word	0x20002914
 8001e00:	2000094b 	.word	0x2000094b
 8001e04:	2000094c 	.word	0x2000094c
					spectrum_int[k] = (int) cabsf(vector[k]);
 8001e08:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8001e0c:	f8d7 2f24 	ldr.w	r2, [r7, #3876]	; 0xf24
 8001e10:	00d1      	lsls	r1, r2, #3
 8001e12:	4419      	add	r1, r3
 8001e14:	6809      	ldr	r1, [r1, #0]
 8001e16:	00d2      	lsls	r2, r2, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	ee07 1a10 	vmov	s14, r1
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eeb0 0a47 	vmov.f32	s0, s14
 8001e2a:	eef0 0a67 	vmov.f32	s1, s15
 8001e2e:	f00d f940 	bl	800f0b2 <cabsf>
 8001e32:	eef0 7a40 	vmov.f32	s15, s0
 8001e36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e3a:	ee17 1a90 	vmov	r1, s15
 8001e3e:	f107 030c 	add.w	r3, r7, #12
 8001e42:	f8d7 2f24 	ldr.w	r2, [r7, #3876]	; 0xf24
 8001e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001e4a:	f8d7 3f24 	ldr.w	r3, [r7, #3876]	; 0xf24
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f8c7 3f24 	str.w	r3, [r7, #3876]	; 0xf24
 8001e54:	f8d7 3f24 	ldr.w	r3, [r7, #3876]	; 0xf24
 8001e58:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e5c:	dbd4      	blt.n	8001e08 <HAL_ADC_ConvCpltCallback+0x3b8>
				}
				STS(spectrum_int);
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	4618      	mov	r0, r3
 8001e64:	f001 fd94 	bl	8003990 <STS>
 8001e68:	e06c      	b.n	8001f44 <HAL_ADC_ConvCpltCallback+0x4f4>
			} else {
				int spectrum_int[BUFFER_SIZE];
				float complex vector[BUFFER_SIZE];
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 3f20 	str.w	r3, [r7, #3872]	; 0xf20
 8001e70:	e01c      	b.n	8001eac <HAL_ADC_ConvCpltCallback+0x45c>
					vector[k] = (float) arrayInt[k];
 8001e72:	4a3d      	ldr	r2, [pc, #244]	; (8001f68 <HAL_ADC_ConvCpltCallback+0x518>)
 8001e74:	f8d7 3f20 	ldr.w	r3, [r7, #3872]	; 0xf20
 8001e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7c:	ee07 3a90 	vmov	s15, r3
 8001e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e84:	ee17 4a90 	vmov	r4, s15
 8001e88:	f04f 0000 	mov.w	r0, #0
 8001e8c:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8001e90:	f8d7 2f20 	ldr.w	r2, [r7, #3872]	; 0xf20
 8001e94:	00d1      	lsls	r1, r2, #3
 8001e96:	4419      	add	r1, r3
 8001e98:	600c      	str	r4, [r1, #0]
 8001e9a:	00d2      	lsls	r2, r2, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	6018      	str	r0, [r3, #0]
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001ea2:	f8d7 3f20 	ldr.w	r3, [r7, #3872]	; 0xf20
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	f8c7 3f20 	str.w	r3, [r7, #3872]	; 0xf20
 8001eac:	f8d7 3f20 	ldr.w	r3, [r7, #3872]	; 0xf20
 8001eb0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001eb4:	dbdd      	blt.n	8001e72 <HAL_ADC_ConvCpltCallback+0x422>
				}
				fft(vector, BUFFER_SIZE);
 8001eb6:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8001eba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fecb 	bl	8002c5a <fft>
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 3f1c 	str.w	r3, [r7, #3868]	; 0xf1c
 8001eca:	e025      	b.n	8001f18 <HAL_ADC_ConvCpltCallback+0x4c8>
					spectrum_int[k] = (int) cabsf(vector[k]);
 8001ecc:	f207 530c 	addw	r3, r7, #1292	; 0x50c
 8001ed0:	f8d7 2f1c 	ldr.w	r2, [r7, #3868]	; 0xf1c
 8001ed4:	00d1      	lsls	r1, r2, #3
 8001ed6:	4419      	add	r1, r3
 8001ed8:	6809      	ldr	r1, [r1, #0]
 8001eda:	00d2      	lsls	r2, r2, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	ee07 1a10 	vmov	s14, r1
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eeb0 0a47 	vmov.f32	s0, s14
 8001eee:	eef0 0a67 	vmov.f32	s1, s15
 8001ef2:	f00d f8de 	bl	800f0b2 <cabsf>
 8001ef6:	eef0 7a40 	vmov.f32	s15, s0
 8001efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001efe:	ee17 1a90 	vmov	r1, s15
 8001f02:	f107 030c 	add.w	r3, r7, #12
 8001f06:	f8d7 2f1c 	ldr.w	r2, [r7, #3868]	; 0xf1c
 8001f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				for (int k = 0; k < BUFFER_SIZE; k++){
 8001f0e:	f8d7 3f1c 	ldr.w	r3, [r7, #3868]	; 0xf1c
 8001f12:	3301      	adds	r3, #1
 8001f14:	f8c7 3f1c 	str.w	r3, [r7, #3868]	; 0xf1c
 8001f18:	f8d7 3f1c 	ldr.w	r3, [r7, #3868]	; 0xf1c
 8001f1c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001f20:	dbd4      	blt.n	8001ecc <HAL_ADC_ConvCpltCallback+0x47c>
				}
				STS(spectrum_int);
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 fd32 	bl	8003990 <STS>
 8001f2c:	e00a      	b.n	8001f44 <HAL_ADC_ConvCpltCallback+0x4f4>
			}
		} else {
			if(filtered){
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_ADC_ConvCpltCallback+0x51c>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_ADC_ConvCpltCallback+0x4ee>
				STS(filteredArray_int);
 8001f36:	480e      	ldr	r0, [pc, #56]	; (8001f70 <HAL_ADC_ConvCpltCallback+0x520>)
 8001f38:	f001 fd2a 	bl	8003990 <STS>
 8001f3c:	e002      	b.n	8001f44 <HAL_ADC_ConvCpltCallback+0x4f4>
			} else {
				STS(arrayInt);
 8001f3e:	480a      	ldr	r0, [pc, #40]	; (8001f68 <HAL_ADC_ConvCpltCallback+0x518>)
 8001f40:	f001 fd26 	bl	8003990 <STS>
			}
		}
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f4a:	480a      	ldr	r0, [pc, #40]	; (8001f74 <HAL_ADC_ConvCpltCallback+0x524>)
 8001f4c:	f004 fdf2 	bl	8006b34 <HAL_GPIO_WritePin>

		HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&buffer, BUFFER_SIZE);
 8001f50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f54:	4908      	ldr	r1, [pc, #32]	; (8001f78 <HAL_ADC_ConvCpltCallback+0x528>)
 8001f56:	4809      	ldr	r0, [pc, #36]	; (8001f7c <HAL_ADC_ConvCpltCallback+0x52c>)
 8001f58:	f002 fe10 	bl	8004b7c <HAL_ADC_Start_DMA>


}
 8001f5c:	bf00      	nop
 8001f5e:	f607 774c 	addw	r7, r7, #3916	; 0xf4c
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd90      	pop	{r4, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20001794 	.word	0x20001794
 8001f6c:	2000094c 	.word	0x2000094c
 8001f70:	20002914 	.word	0x20002914
 8001f74:	40021800 	.word	0x40021800
 8001f78:	20002194 	.word	0x20002194
 8001f7c:	2000174c 	.word	0x2000174c

08001f80 <copy_LP>:

void copy_LP(volatile float* array1, float *array2) {
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < BUFFER_SIZE; i++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
 8001f8e:	e00c      	b.n	8001faa <copy_LP+0x2a>
		*(array1 + i) = *(array2 + i);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	441a      	add	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	440b      	add	r3, r1
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE; i++)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001fb0:	dbee      	blt.n	8001f90 <copy_LP+0x10>
}
 8001fb2:	bf00      	nop
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <copy_HP>:

void copy_HP(volatile float* array1, float *array2) {
 8001fbe:	b480      	push	{r7}
 8001fc0:	b085      	sub	sp, #20
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < BUFFER_SIZE + 1; i++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	e00c      	b.n	8001fe8 <copy_HP+0x2a>
		*(array1 + i) = *(array2 + i);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	441a      	add	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	440b      	add	r3, r1
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < BUFFER_SIZE + 1; i++)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001fee:	ddee      	ble.n	8001fce <copy_HP+0x10>
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800200e:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <MX_ADC3_Init+0xc0>)
 8002010:	4a2b      	ldr	r2, [pc, #172]	; (80020c0 <MX_ADC3_Init+0xc4>)
 8002012:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8002014:	4b29      	ldr	r3, [pc, #164]	; (80020bc <MX_ADC3_Init+0xc0>)
 8002016:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800201a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <MX_ADC3_Init+0xc0>)
 800201e:	2200      	movs	r2, #0
 8002020:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <MX_ADC3_Init+0xc0>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002028:	4b24      	ldr	r3, [pc, #144]	; (80020bc <MX_ADC3_Init+0xc0>)
 800202a:	2201      	movs	r2, #1
 800202c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800202e:	4b23      	ldr	r3, [pc, #140]	; (80020bc <MX_ADC3_Init+0xc0>)
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002036:	4b21      	ldr	r3, [pc, #132]	; (80020bc <MX_ADC3_Init+0xc0>)
 8002038:	2200      	movs	r2, #0
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <MX_ADC3_Init+0xc0>)
 800203e:	4a21      	ldr	r2, [pc, #132]	; (80020c4 <MX_ADC3_Init+0xc8>)
 8002040:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <MX_ADC3_Init+0xc0>)
 8002044:	2200      	movs	r2, #0
 8002046:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002048:	4b1c      	ldr	r3, [pc, #112]	; (80020bc <MX_ADC3_Init+0xc0>)
 800204a:	2201      	movs	r2, #1
 800204c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800204e:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <MX_ADC3_Init+0xc0>)
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002056:	4b19      	ldr	r3, [pc, #100]	; (80020bc <MX_ADC3_Init+0xc0>)
 8002058:	2201      	movs	r2, #1
 800205a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800205c:	4817      	ldr	r0, [pc, #92]	; (80020bc <MX_ADC3_Init+0xc0>)
 800205e:	f002 fd49 	bl	8004af4 <HAL_ADC_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002068:	f001 fe96 	bl	8003d98 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800206c:	2304      	movs	r3, #4
 800206e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8002070:	2301      	movs	r3, #1
 8002072:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002074:	2307      	movs	r3, #7
 8002076:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	4619      	mov	r1, r3
 800207c:	480f      	ldr	r0, [pc, #60]	; (80020bc <MX_ADC3_Init+0xc0>)
 800207e:	f002 fecd 	bl	8004e1c <HAL_ADC_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002088:	f001 fe86 	bl	8003d98 <Error_Handler>
  }

  /* USER CODE BEGIN ADC3_Init 1 */
  for(int i = 0; i < BUFFER_SIZE; ++i){
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	e00c      	b.n	80020ac <MX_ADC3_Init+0xb0>
	  arrayFormer[i] = array[i];
 8002092:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <MX_ADC3_Init+0xcc>)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	490b      	ldr	r1, [pc, #44]	; (80020cc <MX_ADC3_Init+0xd0>)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < BUFFER_SIZE; ++i){
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	3301      	adds	r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020b2:	dbee      	blt.n	8002092 <MX_ADC3_Init+0x96>
  }
   /* USER CODE END ADC3_Init 1 */

}
 80020b4:	bf00      	nop
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	2000174c 	.word	0x2000174c
 80020c0:	40012200 	.word	0x40012200
 80020c4:	0f000001 	.word	0x0f000001
 80020c8:	20002e18 	.word	0x20002e18
 80020cc:	20001c94 	.word	0x20001c94

080020d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a2f      	ldr	r2, [pc, #188]	; (80021ac <HAL_ADC_MspInit+0xdc>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d158      	bne.n	80021a4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <HAL_ADC_MspInit+0xe0>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	4a2d      	ldr	r2, [pc, #180]	; (80021b0 <HAL_ADC_MspInit+0xe0>)
 80020fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002100:	6453      	str	r3, [r2, #68]	; 0x44
 8002102:	4b2b      	ldr	r3, [pc, #172]	; (80021b0 <HAL_ADC_MspInit+0xe0>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_ADC_MspInit+0xe0>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a26      	ldr	r2, [pc, #152]	; (80021b0 <HAL_ADC_MspInit+0xe0>)
 8002118:	f043 0320 	orr.w	r3, r3, #32
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_ADC_MspInit+0xe0>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800212a:	2340      	movs	r3, #64	; 0x40
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212e:	2303      	movs	r3, #3
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	481d      	ldr	r0, [pc, #116]	; (80021b4 <HAL_ADC_MspInit+0xe4>)
 800213e:	f004 fb4f 	bl	80067e0 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_ADC_MspInit+0xec>)
 8002146:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 800214a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800214e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002150:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002156:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800215c:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 800215e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002162:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 8002166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800216a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 800216e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002172:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 8002176:	f44f 7280 	mov.w	r2, #256	; 0x100
 800217a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 800217e:	2200      	movs	r2, #0
 8002180:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 8002184:	2200      	movs	r2, #0
 8002186:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002188:	480b      	ldr	r0, [pc, #44]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 800218a:	f003 fc9d 	bl	8005ac8 <HAL_DMA_Init>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002194:	f001 fe00 	bl	8003d98 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 800219c:	639a      	str	r2, [r3, #56]	; 0x38
 800219e:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <HAL_ADC_MspInit+0xe8>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80021a4:	bf00      	nop
 80021a6:	3728      	adds	r7, #40	; 0x28
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40012200 	.word	0x40012200
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40021400 	.word	0x40021400
 80021b8:	200016ec 	.word	0x200016ec
 80021bc:	40026410 	.word	0x40026410

080021c0 <generate>:
float amplitude_check;
long int frequency_check;
_Bool gen_check;
_Bool sinewave_check;

void generate () {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af02      	add	r7, sp, #8
   if (amplitude_check != amplitude || frequency_check != frequency || gen_check != gen || sinewave_check != sinewave) {
 80021c6:	4b31      	ldr	r3, [pc, #196]	; (800228c <generate+0xcc>)
 80021c8:	ed93 7a00 	vldr	s14, [r3]
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <generate+0xd0>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80021d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021da:	d111      	bne.n	8002200 <generate+0x40>
 80021dc:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <generate+0xd4>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <generate+0xd8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d10b      	bne.n	8002200 <generate+0x40>
 80021e8:	4b2c      	ldr	r3, [pc, #176]	; (800229c <generate+0xdc>)
 80021ea:	781a      	ldrb	r2, [r3, #0]
 80021ec:	4b2c      	ldr	r3, [pc, #176]	; (80022a0 <generate+0xe0>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d105      	bne.n	8002200 <generate+0x40>
 80021f4:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <generate+0xe4>)
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	4b2b      	ldr	r3, [pc, #172]	; (80022a8 <generate+0xe8>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d041      	beq.n	8002284 <generate+0xc4>
	  if (gen) {
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <generate+0xe0>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d027      	beq.n	8002258 <generate+0x98>
		  if (sinewave) {
 8002208:	4b27      	ldr	r3, [pc, #156]	; (80022a8 <generate+0xe8>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d011      	beq.n	8002234 <generate+0x74>
			  racunaj_sinus();
 8002210:	f000 f94a 	bl	80024a8 <racunaj_sinus>
			  MX_TIM6_Freq_Init();
 8002214:	f000 f8f8 	bl	8002408 <MX_TIM6_Freq_Init>
			  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, signal, SAMPLES,DAC_ALIGN_12B_R);
 8002218:	2300      	movs	r3, #0
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	2364      	movs	r3, #100	; 0x64
 800221e:	4a23      	ldr	r2, [pc, #140]	; (80022ac <generate+0xec>)
 8002220:	2110      	movs	r1, #16
 8002222:	4823      	ldr	r0, [pc, #140]	; (80022b0 <generate+0xf0>)
 8002224:	f003 fa0e 	bl	8005644 <HAL_DAC_Start_DMA>
			  SetSineOutput(frequency);
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <generate+0xd8>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4618      	mov	r0, r3
 800222e:	f001 fa83 	bl	8003738 <SetSineOutput>
 8002232:	e017      	b.n	8002264 <generate+0xa4>
		  } else {
			  racunaj_pravokutni();
 8002234:	f000 f9b4 	bl	80025a0 <racunaj_pravokutni>
			  MX_TIM6_Freq_Init();
 8002238:	f000 f8e6 	bl	8002408 <MX_TIM6_Freq_Init>
			  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, signal, SAMPLES,DAC_ALIGN_12B_R);
 800223c:	2300      	movs	r3, #0
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2364      	movs	r3, #100	; 0x64
 8002242:	4a1a      	ldr	r2, [pc, #104]	; (80022ac <generate+0xec>)
 8002244:	2110      	movs	r1, #16
 8002246:	481a      	ldr	r0, [pc, #104]	; (80022b0 <generate+0xf0>)
 8002248:	f003 f9fc 	bl	8005644 <HAL_DAC_Start_DMA>
			  SetSquareOutput(frequency);
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <generate+0xd8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f001 f945 	bl	80034e0 <SetSquareOutput>
 8002256:	e005      	b.n	8002264 <generate+0xa4>
		  }
	  } else {
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 8002258:	2110      	movs	r1, #16
 800225a:	4815      	ldr	r0, [pc, #84]	; (80022b0 <generate+0xf0>)
 800225c:	f003 faa0 	bl	80057a0 <HAL_DAC_Stop_DMA>
		  LCDFunctionGeneratorOFF();
 8002260:	f001 f8a2 	bl	80033a8 <LCDFunctionGeneratorOFF>
	  }
	  amplitude_check = amplitude;
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <generate+0xd0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a08      	ldr	r2, [pc, #32]	; (800228c <generate+0xcc>)
 800226a:	6013      	str	r3, [r2, #0]
	  frequency_check = frequency;
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <generate+0xd8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a08      	ldr	r2, [pc, #32]	; (8002294 <generate+0xd4>)
 8002272:	6013      	str	r3, [r2, #0]
	  gen_check = gen;
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <generate+0xe0>)
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <generate+0xdc>)
 800227a:	701a      	strb	r2, [r3, #0]
	  sinewave_check = sinewave;
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <generate+0xe8>)
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <generate+0xe4>)
 8002282:	701a      	strb	r2, [r3, #0]
   }
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20003320 	.word	0x20003320
 8002290:	20000954 	.word	0x20000954
 8002294:	20003528 	.word	0x20003528
 8002298:	20000958 	.word	0x20000958
 800229c:	2000331c 	.word	0x2000331c
 80022a0:	2000094a 	.word	0x2000094a
 80022a4:	2000331d 	.word	0x2000331d
 80022a8:	20000b7c 	.word	0x20000b7c
 80022ac:	20003324 	.word	0x20003324
 80022b0:	200034b4 	.word	0x200034b4

080022b4 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80022ba:	463b      	mov	r3, r7
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80022c2:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <MX_DAC_Init+0x4c>)
 80022c4:	4a0f      	ldr	r2, [pc, #60]	; (8002304 <MX_DAC_Init+0x50>)
 80022c6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80022c8:	480d      	ldr	r0, [pc, #52]	; (8002300 <MX_DAC_Init+0x4c>)
 80022ca:	f003 f998 	bl	80055fe <HAL_DAC_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80022d4:	f001 fd60 	bl	8003d98 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80022d8:	2304      	movs	r3, #4
 80022da:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80022e0:	463b      	mov	r3, r7
 80022e2:	2210      	movs	r2, #16
 80022e4:	4619      	mov	r1, r3
 80022e6:	4806      	ldr	r0, [pc, #24]	; (8002300 <MX_DAC_Init+0x4c>)
 80022e8:	f003 fb0d 	bl	8005906 <HAL_DAC_ConfigChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80022f2:	f001 fd51 	bl	8003d98 <Error_Handler>
  }

}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200034b4 	.word	0x200034b4
 8002304:	40007400 	.word	0x40007400

08002308 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	; 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <HAL_DAC_MspInit+0xec>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d160      	bne.n	80023ec <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <HAL_DAC_MspInit+0xf0>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a31      	ldr	r2, [pc, #196]	; (80023f8 <HAL_DAC_MspInit+0xf0>)
 8002334:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_DAC_MspInit+0xf0>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <HAL_DAC_MspInit+0xf0>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a2a      	ldr	r2, [pc, #168]	; (80023f8 <HAL_DAC_MspInit+0xf0>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b28      	ldr	r3, [pc, #160]	; (80023f8 <HAL_DAC_MspInit+0xf0>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002362:	2320      	movs	r3, #32
 8002364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002366:	2303      	movs	r3, #3
 8002368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236e:	f107 0314 	add.w	r3, r7, #20
 8002372:	4619      	mov	r1, r3
 8002374:	4821      	ldr	r0, [pc, #132]	; (80023fc <HAL_DAC_MspInit+0xf4>)
 8002376:	f004 fa33 	bl	80067e0 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800237a:	4b21      	ldr	r3, [pc, #132]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 800237c:	4a21      	ldr	r2, [pc, #132]	; (8002404 <HAL_DAC_MspInit+0xfc>)
 800237e:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8002380:	4b1f      	ldr	r3, [pc, #124]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 8002382:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002386:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002388:	4b1d      	ldr	r3, [pc, #116]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 800238a:	2240      	movs	r2, #64	; 0x40
 800238c:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800238e:	4b1c      	ldr	r3, [pc, #112]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 8002390:	2200      	movs	r2, #0
 8002392:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8002394:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 8002396:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800239a:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 800239e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023a2:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023a4:	4b16      	ldr	r3, [pc, #88]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 80023a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023aa:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 80023ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b2:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80023c0:	480f      	ldr	r0, [pc, #60]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 80023c2:	f003 fb81 	bl	8005ac8 <HAL_DMA_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 80023cc:	f001 fce4 	bl	8003d98 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	4a0a      	ldr	r2, [pc, #40]	; (8002400 <HAL_DAC_MspInit+0xf8>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	2036      	movs	r0, #54	; 0x36
 80023e2:	f003 f8c8 	bl	8005576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023e6:	2036      	movs	r0, #54	; 0x36
 80023e8:	f003 f8e1 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80023ec:	bf00      	nop
 80023ee:	3728      	adds	r7, #40	; 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40007400 	.word	0x40007400
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020000 	.word	0x40020000
 8002400:	200034c8 	.word	0x200034c8
 8002404:	400260a0 	.word	0x400260a0

08002408 <MX_TIM6_Freq_Init>:
  }
}

/* USER CODE BEGIN 1 */
void MX_TIM6_Freq_Init()
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800240e:	463b      	mov	r3, r7
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002416:	4b20      	ldr	r3, [pc, #128]	; (8002498 <MX_TIM6_Freq_Init+0x90>)
 8002418:	4a20      	ldr	r2, [pc, #128]	; (800249c <MX_TIM6_Freq_Init+0x94>)
 800241a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 800241c:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <MX_TIM6_Freq_Init+0x90>)
 800241e:	2259      	movs	r2, #89	; 0x59
 8002420:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <MX_TIM6_Freq_Init+0x90>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (10000/frequency) - 1;
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <MX_TIM6_Freq_Init+0x98>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002430:	fb92 f3f3 	sdiv	r3, r2, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	461a      	mov	r2, r3
 8002438:	4b17      	ldr	r3, [pc, #92]	; (8002498 <MX_TIM6_Freq_Init+0x90>)
 800243a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <MX_TIM6_Freq_Init+0x90>)
 800243e:	2200      	movs	r2, #0
 8002440:	619a      	str	r2, [r3, #24]

  if (frequency > 1000) {
 8002442:	4b17      	ldr	r3, [pc, #92]	; (80024a0 <MX_TIM6_Freq_Init+0x98>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800244a:	dd0b      	ble.n	8002464 <MX_TIM6_Freq_Init+0x5c>
	  htim6.Init.Prescaler = (90000/frequency) - 1;
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <MX_TIM6_Freq_Init+0x98>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <MX_TIM6_Freq_Init+0x9c>)
 8002452:	fb92 f3f3 	sdiv	r3, r2, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	461a      	mov	r2, r3
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <MX_TIM6_Freq_Init+0x90>)
 800245c:	605a      	str	r2, [r3, #4]
	  htim6.Init.Period = 10-1;
 800245e:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <MX_TIM6_Freq_Init+0x90>)
 8002460:	2209      	movs	r2, #9
 8002462:	60da      	str	r2, [r3, #12]
  }
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002464:	480c      	ldr	r0, [pc, #48]	; (8002498 <MX_TIM6_Freq_Init+0x90>)
 8002466:	f005 feb2 	bl	80081ce <HAL_TIM_Base_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM6_Freq_Init+0x6c>
  {
    Error_Handler();
 8002470:	f001 fc92 	bl	8003d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002474:	2320      	movs	r3, #32
 8002476:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800247c:	463b      	mov	r3, r7
 800247e:	4619      	mov	r1, r3
 8002480:	4805      	ldr	r0, [pc, #20]	; (8002498 <MX_TIM6_Freq_Init+0x90>)
 8002482:	f006 f8cd 	bl	8008620 <HAL_TIMEx_MasterConfigSynchronization>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM6_Freq_Init+0x88>
  {
    Error_Handler();
 800248c:	f001 fc84 	bl	8003d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20003600 	.word	0x20003600
 800249c:	40001000 	.word	0x40001000
 80024a0:	20000958 	.word	0x20000958
 80024a4:	00015f90 	.word	0x00015f90

080024a8 <racunaj_sinus>:

void racunaj_sinus()
{
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	e058      	b.n	8002566 <racunaj_sinus+0xbe>
	{
		signal[i] = (amplitude/U_REF)*(sin(i*2*PI/SAMPLES) + 1) * (0xFFF)/2;
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <racunaj_sinus+0xe8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe f855 	bl	8000568 <__aeabi_f2d>
 80024be:	a32e      	add	r3, pc, #184	; (adr r3, 8002578 <racunaj_sinus+0xd0>)
 80024c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c4:	f7fe f9d2 	bl	800086c <__aeabi_ddiv>
 80024c8:	4603      	mov	r3, r0
 80024ca:	460c      	mov	r4, r1
 80024cc:	4625      	mov	r5, r4
 80024ce:	461c      	mov	r4, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe f835 	bl	8000544 <__aeabi_i2d>
 80024da:	a329      	add	r3, pc, #164	; (adr r3, 8002580 <racunaj_sinus+0xd8>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f7fe f89a 	bl	8000618 <__aeabi_dmul>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <racunaj_sinus+0xec>)
 80024f2:	f7fe f9bb 	bl	800086c <__aeabi_ddiv>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	ec43 2b17 	vmov	d7, r2, r3
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	f00c fe97 	bl	800f238 <sin>
 800250a:	ec51 0b10 	vmov	r0, r1, d0
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	4b21      	ldr	r3, [pc, #132]	; (8002598 <racunaj_sinus+0xf0>)
 8002514:	f7fd feca 	bl	80002ac <__adddf3>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4620      	mov	r0, r4
 800251e:	4629      	mov	r1, r5
 8002520:	f7fe f87a 	bl	8000618 <__aeabi_dmul>
 8002524:	4603      	mov	r3, r0
 8002526:	460c      	mov	r4, r1
 8002528:	4618      	mov	r0, r3
 800252a:	4621      	mov	r1, r4
 800252c:	a316      	add	r3, pc, #88	; (adr r3, 8002588 <racunaj_sinus+0xe0>)
 800252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002532:	f7fe f871 	bl	8000618 <__aeabi_dmul>
 8002536:	4603      	mov	r3, r0
 8002538:	460c      	mov	r4, r1
 800253a:	4618      	mov	r0, r3
 800253c:	4621      	mov	r1, r4
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002546:	f7fe f991 	bl	800086c <__aeabi_ddiv>
 800254a:	4603      	mov	r3, r0
 800254c:	460c      	mov	r4, r1
 800254e:	4618      	mov	r0, r3
 8002550:	4621      	mov	r1, r4
 8002552:	f7fe fb39 	bl	8000bc8 <__aeabi_d2uiz>
 8002556:	4601      	mov	r1, r0
 8002558:	4a10      	ldr	r2, [pc, #64]	; (800259c <racunaj_sinus+0xf4>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SAMPLES; i++)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3301      	adds	r3, #1
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b63      	cmp	r3, #99	; 0x63
 800256a:	dda3      	ble.n	80024b4 <racunaj_sinus+0xc>
	}
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bdb0      	pop	{r4, r5, r7, pc}
 8002574:	f3af 8000 	nop.w
 8002578:	851eb852 	.word	0x851eb852
 800257c:	400851eb 	.word	0x400851eb
 8002580:	54442eea 	.word	0x54442eea
 8002584:	400921fb 	.word	0x400921fb
 8002588:	00000000 	.word	0x00000000
 800258c:	40affe00 	.word	0x40affe00
 8002590:	20000954 	.word	0x20000954
 8002594:	40590000 	.word	0x40590000
 8002598:	3ff00000 	.word	0x3ff00000
 800259c:	20003324 	.word	0x20003324

080025a0 <racunaj_pravokutni>:

void racunaj_pravokutni()
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 80025a6:	2300      	movs	r3, #0
 80025a8:	607b      	str	r3, [r7, #4]
 80025aa:	e026      	b.n	80025fa <racunaj_pravokutni+0x5a>
	{
		if (i < SAMPLES/2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b31      	cmp	r3, #49	; 0x31
 80025b0:	dc1b      	bgt.n	80025ea <racunaj_pravokutni+0x4a>
		{
			signal[i] = amplitude*0xFFF/U_REF;
 80025b2:	4b17      	ldr	r3, [pc, #92]	; (8002610 <racunaj_pravokutni+0x70>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002614 <racunaj_pravokutni+0x74>
 80025bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025c0:	ee17 0a90 	vmov	r0, s15
 80025c4:	f7fd ffd0 	bl	8000568 <__aeabi_f2d>
 80025c8:	a30f      	add	r3, pc, #60	; (adr r3, 8002608 <racunaj_pravokutni+0x68>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f7fe f94d 	bl	800086c <__aeabi_ddiv>
 80025d2:	4603      	mov	r3, r0
 80025d4:	460c      	mov	r4, r1
 80025d6:	4618      	mov	r0, r3
 80025d8:	4621      	mov	r1, r4
 80025da:	f7fe faf5 	bl	8000bc8 <__aeabi_d2uiz>
 80025de:	4601      	mov	r1, r0
 80025e0:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <racunaj_pravokutni+0x78>)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80025e8:	e004      	b.n	80025f4 <racunaj_pravokutni+0x54>
		} else
		{
			signal[i] = 0;
 80025ea:	4a0b      	ldr	r2, [pc, #44]	; (8002618 <racunaj_pravokutni+0x78>)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2100      	movs	r1, #0
 80025f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SAMPLES; i++)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3301      	adds	r3, #1
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b63      	cmp	r3, #99	; 0x63
 80025fe:	ddd5      	ble.n	80025ac <racunaj_pravokutni+0xc>
		}
	}
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bd90      	pop	{r4, r7, pc}
 8002608:	851eb852 	.word	0x851eb852
 800260c:	400851eb 	.word	0x400851eb
 8002610:	20000954 	.word	0x20000954
 8002614:	457ff000 	.word	0x457ff000
 8002618:	20003324 	.word	0x20003324

0800261c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	607b      	str	r3, [r7, #4]
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <MX_DMA_Init+0x68>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	4a16      	ldr	r2, [pc, #88]	; (8002684 <MX_DMA_Init+0x68>)
 800262c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002630:	6313      	str	r3, [r2, #48]	; 0x30
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <MX_DMA_Init+0x68>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	4b10      	ldr	r3, [pc, #64]	; (8002684 <MX_DMA_Init+0x68>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	4a0f      	ldr	r2, [pc, #60]	; (8002684 <MX_DMA_Init+0x68>)
 8002648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800264c:	6313      	str	r3, [r2, #48]	; 0x30
 800264e:	4b0d      	ldr	r3, [pc, #52]	; (8002684 <MX_DMA_Init+0x68>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002656:	603b      	str	r3, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2011      	movs	r0, #17
 8002660:	f002 ff89 	bl	8005576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002664:	2011      	movs	r0, #17
 8002666:	f002 ffa2 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	2038      	movs	r0, #56	; 0x38
 8002670:	f002 ff81 	bl	8005576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002674:	2038      	movs	r0, #56	; 0x38
 8002676:	f002 ff9a 	bl	80055ae <HAL_NVIC_EnableIRQ>

}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800

08002688 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800268c:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <MX_DMA2D_Init+0x5c>)
 800268e:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <MX_DMA2D_Init+0x60>)
 8002690:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002692:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <MX_DMA2D_Init+0x5c>)
 8002694:	2200      	movs	r2, #0
 8002696:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002698:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <MX_DMA2D_Init+0x5c>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800269e:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <MX_DMA2D_Init+0x5c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80026a4:	4b0f      	ldr	r3, [pc, #60]	; (80026e4 <MX_DMA2D_Init+0x5c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	; (80026e4 <MX_DMA2D_Init+0x5c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80026b0:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <MX_DMA2D_Init+0x5c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <MX_DMA2D_Init+0x5c>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80026bc:	4809      	ldr	r0, [pc, #36]	; (80026e4 <MX_DMA2D_Init+0x5c>)
 80026be:	f003 fe03 	bl	80062c8 <HAL_DMA2D_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80026c8:	f001 fb66 	bl	8003d98 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80026cc:	2101      	movs	r1, #1
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <MX_DMA2D_Init+0x5c>)
 80026d0:	f003 ff58 	bl	8006584 <HAL_DMA2D_ConfigLayer>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80026da:	f001 fb5d 	bl	8003d98 <Error_Handler>
  }

}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000352c 	.word	0x2000352c
 80026e8:	4002b000 	.word	0x4002b000

080026ec <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <HAL_DMA2D_MspInit+0x3c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d10d      	bne.n	800271a <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_DMA2D_MspInit+0x40>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_DMA2D_MspInit+0x40>)
 8002708:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800270c:	6313      	str	r3, [r2, #48]	; 0x30
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_DMA2D_MspInit+0x40>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	4002b000 	.word	0x4002b000
 800272c:	40023800 	.word	0x40023800

08002730 <ctz>:
#include <math.h>
#include <stdlib.h>
#include <string.h>

static int ctz(size_t N)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	int ctz1 = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	60fb      	str	r3, [r7, #12]

	while( N ) {
 800273c:	e005      	b.n	800274a <ctz+0x1a>
		ctz1++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3301      	adds	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
		N >>= 1;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	607b      	str	r3, [r7, #4]
	while( N ) {
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f6      	bne.n	800273e <ctz+0xe>
	}

	return ctz1-1;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3b01      	subs	r3, #1
}
 8002754:	4618      	mov	r0, r3
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <nop_split>:

static void nop_split(const float complex *x, float complex *X, size_t N)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
	for(size_t n = 0; n < N/2; n++) {
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	e01e      	b.n	80027b0 <nop_split+0x50>
		X[0/2+n] = x[2*n+0];
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	441a      	add	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	440b      	add	r3, r1
 8002782:	6811      	ldr	r1, [r2, #0]
 8002784:	6852      	ldr	r2, [r2, #4]
 8002786:	6019      	str	r1, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
		X[N/2+n] = x[2*n+1];
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	3308      	adds	r3, #8
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	441a      	add	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	0859      	lsrs	r1, r3, #1
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	440b      	add	r3, r1
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	440b      	add	r3, r1
 80027a2:	6811      	ldr	r1, [r2, #0]
 80027a4:	6852      	ldr	r2, [r2, #4]
 80027a6:	6019      	str	r1, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
	for(size_t n = 0; n < N/2; n++) {
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	3301      	adds	r3, #1
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	085b      	lsrs	r3, r3, #1
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d3db      	bcc.n	8002772 <nop_split+0x12>
	}
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <fft_split>:

static void fft_split(const float complex *x, float complex *X, size_t N, float complex phi)
{
 80027c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027cc:	ed2d 8b04 	vpush	{d8-d9}
 80027d0:	b08b      	sub	sp, #44	; 0x2c
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6178      	str	r0, [r7, #20]
 80027d6:	6139      	str	r1, [r7, #16]
 80027d8:	60fa      	str	r2, [r7, #12]
 80027da:	eeb0 7a40 	vmov.f32	s14, s0
 80027de:	eef0 7a60 	vmov.f32	s15, s1
 80027e2:	ee17 2a10 	vmov	r2, s14
 80027e6:	ee17 3a90 	vmov	r3, s15
 80027ea:	607a      	str	r2, [r7, #4]
 80027ec:	60bb      	str	r3, [r7, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	61fb      	str	r3, [r7, #28]
	for(size_t n = 0; n < N/2; n++) {
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
 80027fa:	e141      	b.n	8002a80 <fft_split+0x2b8>
		X[0/2+n] = x[2*n+0] + x[2*n+1] * cexp(-2*(float)M_PI*I*phi);
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4413      	add	r3, r2
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd feae 	bl	8000568 <__aeabi_f2d>
 800280c:	4680      	mov	r8, r0
 800280e:	4689      	mov	r9, r1
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	4413      	add	r3, r2
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fd fea4 	bl	8000568 <__aeabi_f2d>
 8002820:	4604      	mov	r4, r0
 8002822:	460d      	mov	r5, r1
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	3308      	adds	r3, #8
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	4413      	add	r3, r2
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fd fe99 	bl	8000568 <__aeabi_f2d>
 8002836:	ec41 0b18 	vmov	d8, r0, r1
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	3308      	adds	r3, #8
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	4413      	add	r3, r2
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4618      	mov	r0, r3
 8002848:	f7fd fe8e 	bl	8000568 <__aeabi_f2d>
 800284c:	ec41 0b19 	vmov	d9, r0, r1
 8002850:	eddf 1a92 	vldr	s3, [pc, #584]	; 8002a9c <fft_split+0x2d4>
 8002854:	ed9f 1a92 	vldr	s2, [pc, #584]	; 8002aa0 <fft_split+0x2d8>
 8002858:	edd7 0a07 	vldr	s1, [r7, #28]
 800285c:	ed97 0a08 	vldr	s0, [r7, #32]
 8002860:	f7fe fa3a 	bl	8000cd8 <__mulsc3>
 8002864:	eeb0 7a40 	vmov.f32	s14, s0
 8002868:	eef0 7a60 	vmov.f32	s15, s1
 800286c:	ee17 3a10 	vmov	r3, s14
 8002870:	ee17 6a90 	vmov	r6, s15
 8002874:	4618      	mov	r0, r3
 8002876:	f7fd fe77 	bl	8000568 <__aeabi_f2d>
 800287a:	4682      	mov	sl, r0
 800287c:	468b      	mov	fp, r1
 800287e:	4630      	mov	r0, r6
 8002880:	f7fd fe72 	bl	8000568 <__aeabi_f2d>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4650      	mov	r0, sl
 800288a:	4659      	mov	r1, fp
 800288c:	ec41 0b16 	vmov	d6, r0, r1
 8002890:	ec43 2b17 	vmov	d7, r2, r3
 8002894:	eeb0 0a46 	vmov.f32	s0, s12
 8002898:	eef0 0a66 	vmov.f32	s1, s13
 800289c:	eeb0 1a47 	vmov.f32	s2, s14
 80028a0:	eef0 1a67 	vmov.f32	s3, s15
 80028a4:	f00c fc20 	bl	800f0e8 <cexp>
 80028a8:	eeb0 7a40 	vmov.f32	s14, s0
 80028ac:	eef0 7a60 	vmov.f32	s15, s1
 80028b0:	eeb0 6a41 	vmov.f32	s12, s2
 80028b4:	eef0 6a61 	vmov.f32	s13, s3
 80028b8:	eeb0 3a46 	vmov.f32	s6, s12
 80028bc:	eef0 3a66 	vmov.f32	s7, s13
 80028c0:	eeb0 2a47 	vmov.f32	s4, s14
 80028c4:	eef0 2a67 	vmov.f32	s5, s15
 80028c8:	eeb0 1a49 	vmov.f32	s2, s18
 80028cc:	eef0 1a69 	vmov.f32	s3, s19
 80028d0:	eeb0 0a48 	vmov.f32	s0, s16
 80028d4:	eef0 0a68 	vmov.f32	s1, s17
 80028d8:	f7fe fb88 	bl	8000fec <__muldc3>
 80028dc:	eeb0 6a40 	vmov.f32	s12, s0
 80028e0:	eef0 6a60 	vmov.f32	s13, s1
 80028e4:	eeb0 7a41 	vmov.f32	s14, s2
 80028e8:	eef0 7a61 	vmov.f32	s15, s3
 80028ec:	ec53 2b16 	vmov	r2, r3, d6
 80028f0:	ec5b ab17 	vmov	sl, fp, d7
 80028f4:	4640      	mov	r0, r8
 80028f6:	4649      	mov	r1, r9
 80028f8:	f7fd fcd8 	bl	80002ac <__adddf3>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4690      	mov	r8, r2
 8002902:	4699      	mov	r9, r3
 8002904:	4652      	mov	r2, sl
 8002906:	465b      	mov	r3, fp
 8002908:	4620      	mov	r0, r4
 800290a:	4629      	mov	r1, r5
 800290c:	f7fd fcce 	bl	80002ac <__adddf3>
 8002910:	4603      	mov	r3, r0
 8002912:	460c      	mov	r4, r1
 8002914:	461d      	mov	r5, r3
 8002916:	4626      	mov	r6, r4
 8002918:	4640      	mov	r0, r8
 800291a:	4649      	mov	r1, r9
 800291c:	f7fe f974 	bl	8000c08 <__aeabi_d2f>
 8002920:	4604      	mov	r4, r0
 8002922:	4628      	mov	r0, r5
 8002924:	4631      	mov	r1, r6
 8002926:	f7fe f96f 	bl	8000c08 <__aeabi_d2f>
 800292a:	4601      	mov	r1, r0
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	601c      	str	r4, [r3, #0]
 8002936:	6059      	str	r1, [r3, #4]
		X[N/2+n] = x[2*n+0] - x[2*n+1] * cexp(-2*(float)M_PI*I*phi);
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4413      	add	r3, r2
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fe10 	bl	8000568 <__aeabi_f2d>
 8002948:	4680      	mov	r8, r0
 800294a:	4689      	mov	r9, r1
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4413      	add	r3, r2
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fe06 	bl	8000568 <__aeabi_f2d>
 800295c:	4604      	mov	r4, r0
 800295e:	460d      	mov	r5, r1
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	3308      	adds	r3, #8
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4413      	add	r3, r2
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fdfb 	bl	8000568 <__aeabi_f2d>
 8002972:	ec41 0b18 	vmov	d8, r0, r1
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	3308      	adds	r3, #8
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4413      	add	r3, r2
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fdf0 	bl	8000568 <__aeabi_f2d>
 8002988:	ec41 0b19 	vmov	d9, r0, r1
 800298c:	eddf 1a43 	vldr	s3, [pc, #268]	; 8002a9c <fft_split+0x2d4>
 8002990:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8002aa0 <fft_split+0x2d8>
 8002994:	edd7 0a07 	vldr	s1, [r7, #28]
 8002998:	ed97 0a08 	vldr	s0, [r7, #32]
 800299c:	f7fe f99c 	bl	8000cd8 <__mulsc3>
 80029a0:	eeb0 7a40 	vmov.f32	s14, s0
 80029a4:	eef0 7a60 	vmov.f32	s15, s1
 80029a8:	ee17 3a10 	vmov	r3, s14
 80029ac:	ee17 6a90 	vmov	r6, s15
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fdd9 	bl	8000568 <__aeabi_f2d>
 80029b6:	4682      	mov	sl, r0
 80029b8:	468b      	mov	fp, r1
 80029ba:	4630      	mov	r0, r6
 80029bc:	f7fd fdd4 	bl	8000568 <__aeabi_f2d>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4650      	mov	r0, sl
 80029c6:	4659      	mov	r1, fp
 80029c8:	ec41 0b16 	vmov	d6, r0, r1
 80029cc:	ec43 2b17 	vmov	d7, r2, r3
 80029d0:	eeb0 0a46 	vmov.f32	s0, s12
 80029d4:	eef0 0a66 	vmov.f32	s1, s13
 80029d8:	eeb0 1a47 	vmov.f32	s2, s14
 80029dc:	eef0 1a67 	vmov.f32	s3, s15
 80029e0:	f00c fb82 	bl	800f0e8 <cexp>
 80029e4:	eeb0 7a40 	vmov.f32	s14, s0
 80029e8:	eef0 7a60 	vmov.f32	s15, s1
 80029ec:	eeb0 6a41 	vmov.f32	s12, s2
 80029f0:	eef0 6a61 	vmov.f32	s13, s3
 80029f4:	eeb0 3a46 	vmov.f32	s6, s12
 80029f8:	eef0 3a66 	vmov.f32	s7, s13
 80029fc:	eeb0 2a47 	vmov.f32	s4, s14
 8002a00:	eef0 2a67 	vmov.f32	s5, s15
 8002a04:	eeb0 1a49 	vmov.f32	s2, s18
 8002a08:	eef0 1a69 	vmov.f32	s3, s19
 8002a0c:	eeb0 0a48 	vmov.f32	s0, s16
 8002a10:	eef0 0a68 	vmov.f32	s1, s17
 8002a14:	f7fe faea 	bl	8000fec <__muldc3>
 8002a18:	eeb0 6a40 	vmov.f32	s12, s0
 8002a1c:	eef0 6a60 	vmov.f32	s13, s1
 8002a20:	eeb0 7a41 	vmov.f32	s14, s2
 8002a24:	eef0 7a61 	vmov.f32	s15, s3
 8002a28:	ec53 2b16 	vmov	r2, r3, d6
 8002a2c:	ec5b ab17 	vmov	sl, fp, d7
 8002a30:	4640      	mov	r0, r8
 8002a32:	4649      	mov	r1, r9
 8002a34:	f7fd fc38 	bl	80002a8 <__aeabi_dsub>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4690      	mov	r8, r2
 8002a3e:	4699      	mov	r9, r3
 8002a40:	4652      	mov	r2, sl
 8002a42:	465b      	mov	r3, fp
 8002a44:	4620      	mov	r0, r4
 8002a46:	4629      	mov	r1, r5
 8002a48:	f7fd fc2e 	bl	80002a8 <__aeabi_dsub>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	460c      	mov	r4, r1
 8002a50:	461d      	mov	r5, r3
 8002a52:	4626      	mov	r6, r4
 8002a54:	4640      	mov	r0, r8
 8002a56:	4649      	mov	r1, r9
 8002a58:	f7fe f8d6 	bl	8000c08 <__aeabi_d2f>
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	4628      	mov	r0, r5
 8002a60:	4631      	mov	r1, r6
 8002a62:	f7fe f8d1 	bl	8000c08 <__aeabi_d2f>
 8002a66:	4601      	mov	r1, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	085a      	lsrs	r2, r3, #1
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	4413      	add	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4413      	add	r3, r2
 8002a76:	601c      	str	r4, [r3, #0]
 8002a78:	6059      	str	r1, [r3, #4]
	for(size_t n = 0; n < N/2; n++) {
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	085b      	lsrs	r3, r3, #1
 8002a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a86:	429a      	cmp	r2, r3
 8002a88:	f4ff aeb8 	bcc.w	80027fc <fft_split+0x34>
	}
}
 8002a8c:	bf00      	nop
 8002a8e:	372c      	adds	r7, #44	; 0x2c
 8002a90:	46bd      	mov	sp, r7
 8002a92:	ecbd 8b04 	vpop	{d8-d9}
 8002a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a9a:	bf00      	nop
 8002a9c:	c0c90fdb 	.word	0xc0c90fdb
 8002aa0:	80000000 	.word	0x80000000

08002aa4 <revbits>:

static size_t revbits(size_t v, int J)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
	size_t r = 0;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]

	for(int j = 0; j < J; j++) {
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	e011      	b.n	8002adc <revbits+0x38>
		r |= ( (v>>j)&1 ) << (J-1-j);
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	f003 0201 	and.w	r2, r3, #1
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	1e59      	subs	r1, r3, #1
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	1acb      	subs	r3, r1, r3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
	for(int j = 0; j < J; j++) {
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dbe9      	blt.n	8002ab8 <revbits+0x14>
	}

	return r;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <nop_reverse>:

static int nop_reverse(int b, float complex *buffers[2], size_t N)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b088      	sub	sp, #32
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	60f8      	str	r0, [r7, #12]
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	607a      	str	r2, [r7, #4]
	int J = ctz(N);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff fe16 	bl	8002730 <ctz>
 8002b04:	6178      	str	r0, [r7, #20]

	for(int j = 0; j < J-1; j++, b++) {
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	e031      	b.n	8002b70 <nop_reverse+0x7e>
		size_t delta = N>>j;
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
 8002b14:	613b      	str	r3, [r7, #16]

		for(size_t n = 0; n < N; n += delta) {
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	e01f      	b.n	8002b5c <nop_reverse+0x6a>
			nop_split(buffers[b&1]+n, buffers[~b&1]+n, delta);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	4413      	add	r3, r2
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	18d0      	adds	r0, r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <nop_reverse+0x4c>
 8002b3a:	2304      	movs	r3, #4
 8002b3c:	e000      	b.n	8002b40 <nop_reverse+0x4e>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	4413      	add	r3, r2
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4413      	add	r3, r2
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	f7ff fe06 	bl	8002760 <nop_split>
		for(size_t n = 0; n < N; n += delta) {
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3db      	bcc.n	8002b1c <nop_reverse+0x2a>
	for(int j = 0; j < J-1; j++, b++) {
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	3301      	adds	r3, #1
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	69fa      	ldr	r2, [r7, #28]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	dbc8      	blt.n	8002b0c <nop_reverse+0x1a>
		}
	}

	return b;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <fft_reverse>:

static int fft_reverse(int b, float complex *buffers[2], size_t N)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b08a      	sub	sp, #40	; 0x28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
	int J = ctz(N);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fdcd 	bl	8002730 <ctz>
 8002b96:	61f8      	str	r0, [r7, #28]

	for(int j = 0; j < J; j++, b++) {
 8002b98:	2300      	movs	r3, #0
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9c:	e054      	b.n	8002c48 <fft_reverse+0xc4>
		size_t delta = N>>j;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	61bb      	str	r3, [r7, #24]

		for(size_t n = 0; n < N; n += delta) {
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
 8002bac:	e042      	b.n	8002c34 <fft_reverse+0xb0>
			float complex phi = (float)revbits( n/delta, j) / (float)(2<<j);
 8002bae:	6a3a      	ldr	r2, [r7, #32]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff73 	bl	8002aa4 <revbits>
 8002bbe:	ee07 0a90 	vmov	s15, r0
 8002bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	fa02 f303 	lsl.w	r3, r2, r3
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bda:	edc7 7a04 	vstr	s15, [r7, #16]
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
			fft_split(buffers[b&1]+n, buffers[~b&1]+n, delta, phi);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	4413      	add	r3, r2
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	00db      	lsls	r3, r3, #3
 8002bf6:	18d0      	adds	r0, r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <fft_reverse+0x82>
 8002c02:	2304      	movs	r3, #4
 8002c04:	e000      	b.n	8002c08 <fft_reverse+0x84>
 8002c06:	2300      	movs	r3, #0
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c18:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002c20:	eef0 0a67 	vmov.f32	s1, s15
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4619      	mov	r1, r3
 8002c28:	f7ff fdce 	bl	80027c8 <fft_split>
		for(size_t n = 0; n < N; n += delta) {
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	4413      	add	r3, r2
 8002c32:	623b      	str	r3, [r7, #32]
 8002c34:	6a3a      	ldr	r2, [r7, #32]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d3b8      	bcc.n	8002bae <fft_reverse+0x2a>
	for(int j = 0; j < J; j++, b++) {
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	3301      	adds	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	; 0x24
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3301      	adds	r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	dba6      	blt.n	8002b9e <fft_reverse+0x1a>
		}
	}

	return b;
 8002c50:	68fb      	ldr	r3, [r7, #12]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3728      	adds	r7, #40	; 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <fft>:

int fft(float complex *vector, size_t N)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
	if( !N ) return 0;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <fft+0x14>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e044      	b.n	8002cf8 <fft+0x9e>

	if( N & (N-1) ) return 1;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	1e5a      	subs	r2, r3, #1
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <fft+0x24>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e03c      	b.n	8002cf8 <fft+0x9e>

	float complex *buffers[2] = { vector, malloc(N*sizeof(float complex)) };
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	4618      	mov	r0, r3
 8002c88:	f008 fc94 	bl	800b5b4 <malloc>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	613b      	str	r3, [r7, #16]

	if( !buffers[1] ) return -1;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d102      	bne.n	8002c9c <fft+0x42>
 8002c96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c9a:	e02d      	b.n	8002cf8 <fft+0x9e>

	int b = 0;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]

	b = nop_reverse(b, buffers, N);
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	6978      	ldr	r0, [r7, #20]
 8002caa:	f7ff ff22 	bl	8002af2 <nop_reverse>
 8002cae:	6178      	str	r0, [r7, #20]
	b = fft_reverse(b, buffers, N);
 8002cb0:	f107 030c 	add.w	r3, r7, #12
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6978      	ldr	r0, [r7, #20]
 8002cba:	f7ff ff63 	bl	8002b84 <fft_reverse>
 8002cbe:	6178      	str	r0, [r7, #20]
	b = nop_reverse(b, buffers, N);
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	6978      	ldr	r0, [r7, #20]
 8002cca:	f7ff ff12 	bl	8002af2 <nop_reverse>
 8002cce:	6178      	str	r0, [r7, #20]


	memmove(vector, buffers[b&1], N*sizeof(float complex));
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	f107 0218 	add.w	r2, r7, #24
 8002cdc:	4413      	add	r3, r2
 8002cde:	f853 1c0c 	ldr.w	r1, [r3, #-12]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f008 fc7e 	bl	800b5ea <memmove>

	free( buffers[1] );
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f008 fc67 	bl	800b5c4 <free>

	return 0;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
 8002d14:	615a      	str	r2, [r3, #20]
 8002d16:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002d18:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d1a:	4a1f      	ldr	r2, [pc, #124]	; (8002d98 <MX_FMC_Init+0x98>)
 8002d1c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002d1e:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002d24:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002d2a:	4b1a      	ldr	r3, [pc, #104]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002d30:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d32:	2210      	movs	r2, #16
 8002d34:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002d36:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d38:	2240      	movs	r2, #64	; 0x40
 8002d3a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002d3c:	4b15      	ldr	r3, [pc, #84]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002d42:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8002d5a:	2310      	movs	r3, #16
 8002d5c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8002d5e:	2310      	movs	r3, #16
 8002d60:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8002d62:	2310      	movs	r3, #16
 8002d64:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8002d66:	2310      	movs	r3, #16
 8002d68:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8002d6a:	2310      	movs	r3, #16
 8002d6c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8002d6e:	2310      	movs	r3, #16
 8002d70:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8002d72:	2310      	movs	r3, #16
 8002d74:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002d76:	1d3b      	adds	r3, r7, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4806      	ldr	r0, [pc, #24]	; (8002d94 <MX_FMC_Init+0x94>)
 8002d7c:	f005 f944 	bl	8008008 <HAL_SDRAM_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002d86:	f001 f807 	bl	8003d98 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002d8a:	bf00      	nop
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	2000356c 	.word	0x2000356c
 8002d98:	a0000140 	.word	0xa0000140

08002d9c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002db0:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <HAL_FMC_MspInit+0xe8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d160      	bne.n	8002e7a <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 8002db8:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <HAL_FMC_MspInit+0xe8>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	603b      	str	r3, [r7, #0]
 8002dc2:	4b31      	ldr	r3, [pc, #196]	; (8002e88 <HAL_FMC_MspInit+0xec>)
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	4a30      	ldr	r2, [pc, #192]	; (8002e88 <HAL_FMC_MspInit+0xec>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6393      	str	r3, [r2, #56]	; 0x38
 8002dce:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <HAL_FMC_MspInit+0xec>)
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002dda:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002dde:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de0:	2302      	movs	r3, #2
 8002de2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002dec:	230c      	movs	r3, #12
 8002dee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	4619      	mov	r1, r3
 8002df4:	4825      	ldr	r0, [pc, #148]	; (8002e8c <HAL_FMC_MspInit+0xf0>)
 8002df6:	f003 fcf3 	bl	80067e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002dfa:	230d      	movs	r3, #13
 8002dfc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e06:	2303      	movs	r3, #3
 8002e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e0a:	230c      	movs	r3, #12
 8002e0c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	4619      	mov	r1, r3
 8002e12:	481f      	ldr	r0, [pc, #124]	; (8002e90 <HAL_FMC_MspInit+0xf4>)
 8002e14:	f003 fce4 	bl	80067e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8002e18:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e1c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e26:	2303      	movs	r3, #3
 8002e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e2a:	230c      	movs	r3, #12
 8002e2c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4818      	ldr	r0, [pc, #96]	; (8002e94 <HAL_FMC_MspInit+0xf8>)
 8002e34:	f003 fcd4 	bl	80067e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002e38:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002e3c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e46:	2303      	movs	r3, #3
 8002e48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e4a:	230c      	movs	r3, #12
 8002e4c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e4e:	1d3b      	adds	r3, r7, #4
 8002e50:	4619      	mov	r1, r3
 8002e52:	4811      	ldr	r0, [pc, #68]	; (8002e98 <HAL_FMC_MspInit+0xfc>)
 8002e54:	f003 fcc4 	bl	80067e0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8002e58:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002e5c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e66:	2303      	movs	r3, #3
 8002e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002e6a:	230c      	movs	r3, #12
 8002e6c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e6e:	1d3b      	adds	r3, r7, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	480a      	ldr	r0, [pc, #40]	; (8002e9c <HAL_FMC_MspInit+0x100>)
 8002e74:	f003 fcb4 	bl	80067e0 <HAL_GPIO_Init>
 8002e78:	e000      	b.n	8002e7c <HAL_FMC_MspInit+0xe0>
    return;
 8002e7a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000b78 	.word	0x20000b78
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40021400 	.word	0x40021400
 8002e90:	40020800 	.word	0x40020800
 8002e94:	40021800 	.word	0x40021800
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40020c00 	.word	0x40020c00

08002ea0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002ea8:	f7ff ff78 	bl	8002d9c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	; 0x38
 8002eb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	623b      	str	r3, [r7, #32]
 8002ece:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a42      	ldr	r2, [pc, #264]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002ed4:	f043 0320 	orr.w	r3, r3, #32
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b40      	ldr	r3, [pc, #256]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
 8002eea:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	4a3b      	ldr	r2, [pc, #236]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef6:	4b39      	ldr	r3, [pc, #228]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	61bb      	str	r3, [r7, #24]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	4b2e      	ldr	r3, [pc, #184]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	4a2d      	ldr	r2, [pc, #180]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2e:	4b2b      	ldr	r3, [pc, #172]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	4a26      	ldr	r2, [pc, #152]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f44:	f043 0302 	orr.w	r3, r3, #2
 8002f48:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4a:	4b24      	ldr	r3, [pc, #144]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	4b20      	ldr	r3, [pc, #128]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f64:	6313      	str	r3, [r2, #48]	; 0x30
 8002f66:	4b1d      	ldr	r3, [pc, #116]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4a18      	ldr	r2, [pc, #96]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f7c:	f043 0310 	orr.w	r3, r3, #16
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	4a11      	ldr	r2, [pc, #68]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002f98:	f043 0308 	orr.w	r3, r3, #8
 8002f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <MX_GPIO_Init+0x128>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8002faa:	2200      	movs	r2, #0
 8002fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fb0:	480b      	ldr	r0, [pc, #44]	; (8002fe0 <MX_GPIO_Init+0x12c>)
 8002fb2:	f003 fdbf 	bl	8006b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002fb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4804      	ldr	r0, [pc, #16]	; (8002fe0 <MX_GPIO_Init+0x12c>)
 8002fd0:	f003 fc06 	bl	80067e0 <HAL_GPIO_Init>

}
 8002fd4:	bf00      	nop
 8002fd6:	3738      	adds	r7, #56	; 0x38
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40021800 	.word	0x40021800

08002fe4 <StartScreen>:

int width;
int counter;


void StartScreen(void){
 8002fe4:	b5b0      	push	{r4, r5, r7, lr}
 8002fe6:	b08e      	sub	sp, #56	; 0x38
 8002fe8:	af00      	add	r7, sp, #0
	TM_LCD_Init();
 8002fea:	f007 f955 	bl	800a298 <TM_LCD_Init>
	TM_LCD_SetOrientation(2);
 8002fee:	2002      	movs	r0, #2
 8002ff0:	f007 f9ca 	bl	800a388 <TM_LCD_SetOrientation>
	TM_LCD_SetLayer1();
 8002ff4:	f007 fb22 	bl	800a63c <TM_LCD_SetLayer1>
	TM_LCD_Fill(LCD_COLOR_WHITE);
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ffc:	f007 f9b8 	bl	800a370 <TM_LCD_Fill>


	ScreenIntro();
 8003000:	f000 f8ca 	bl	8003198 <ScreenIntro>

	/*	prozor za osciloskop	*/

	Window();
 8003004:	f000 fd7e 	bl	8003b04 <Window>

	/*	generator; ime i ON/OFF */

	TM_LCD_SetXY(0, TM_LCD_GetHeight()-22);
 8003008:	f007 fb66 	bl	800a6d8 <TM_LCD_GetHeight>
 800300c:	4603      	mov	r3, r0
 800300e:	3b16      	subs	r3, #22
 8003010:	b29b      	uxth	r3, r3
 8003012:	4619      	mov	r1, r3
 8003014:	2000      	movs	r0, #0
 8003016:	f007 f9f7 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_SetFont(&TM_Font_7x10);
 800301a:	485a      	ldr	r0, [pc, #360]	; (8003184 <StartScreen+0x1a0>)
 800301c:	f007 fa1a 	bl	800a454 <TM_LCD_SetFont>
	char s[] = "Function generator";
 8003020:	4b59      	ldr	r3, [pc, #356]	; (8003188 <StartScreen+0x1a4>)
 8003022:	f107 0414 	add.w	r4, r7, #20
 8003026:	461d      	mov	r5, r3
 8003028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800302a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800302c:	682b      	ldr	r3, [r5, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	8022      	strh	r2, [r4, #0]
 8003032:	3402      	adds	r4, #2
 8003034:	0c1b      	lsrs	r3, r3, #16
 8003036:	7023      	strb	r3, [r4, #0]
	TM_LCD_Puts(&s[0]);
 8003038:	f107 0314 	add.w	r3, r7, #20
 800303c:	4618      	mov	r0, r3
 800303e:	f007 fae1 	bl	800a604 <TM_LCD_Puts>
	char on[] = "ON";
 8003042:	4a52      	ldr	r2, [pc, #328]	; (800318c <StartScreen+0x1a8>)
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	4611      	mov	r1, r2
 800304c:	8019      	strh	r1, [r3, #0]
 800304e:	3302      	adds	r3, #2
 8003050:	0c12      	lsrs	r2, r2, #16
 8003052:	701a      	strb	r2, [r3, #0]
	TM_LCD_SetXY(8, TM_LCD_GetHeight()-11);
 8003054:	f007 fb40 	bl	800a6d8 <TM_LCD_GetHeight>
 8003058:	4603      	mov	r3, r0
 800305a:	3b0b      	subs	r3, #11
 800305c:	b29b      	uxth	r3, r3
 800305e:	4619      	mov	r1, r3
 8003060:	2008      	movs	r0, #8
 8003062:	f007 f9d1 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_Puts(&on[0]);
 8003066:	f107 0310 	add.w	r3, r7, #16
 800306a:	4618      	mov	r0, r3
 800306c:	f007 faca 	bl	800a604 <TM_LCD_Puts>
	char off[] = "OFF";
 8003070:	4b47      	ldr	r3, [pc, #284]	; (8003190 <StartScreen+0x1ac>)
 8003072:	60fb      	str	r3, [r7, #12]
	TM_LCD_SetXY(28, TM_LCD_GetHeight()-11);
 8003074:	f007 fb30 	bl	800a6d8 <TM_LCD_GetHeight>
 8003078:	4603      	mov	r3, r0
 800307a:	3b0b      	subs	r3, #11
 800307c:	b29b      	uxth	r3, r3
 800307e:	4619      	mov	r1, r3
 8003080:	201c      	movs	r0, #28
 8003082:	f007 f9c1 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_Puts(&off[0]);
 8003086:	f107 030c 	add.w	r3, r7, #12
 800308a:	4618      	mov	r0, r3
 800308c:	f007 faba 	bl	800a604 <TM_LCD_Puts>

	/*	prozor za generator	*/

	for(int i=135; i<160;i++){
 8003090:	2387      	movs	r3, #135	; 0x87
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
 8003094:	e00e      	b.n	80030b4 <StartScreen+0xd0>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-22, LCD_COLOR_BLACK);
 8003096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003098:	b29c      	uxth	r4, r3
 800309a:	f007 fb1d 	bl	800a6d8 <TM_LCD_GetHeight>
 800309e:	4603      	mov	r3, r0
 80030a0:	3b16      	subs	r3, #22
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2200      	movs	r2, #0
 80030a6:	4619      	mov	r1, r3
 80030a8:	4620      	mov	r0, r4
 80030aa:	f007 fa85 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=135; i<160;i++){
 80030ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b0:	3301      	adds	r3, #1
 80030b2:	637b      	str	r3, [r7, #52]	; 0x34
 80030b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b6:	2b9f      	cmp	r3, #159	; 0x9f
 80030b8:	dded      	ble.n	8003096 <StartScreen+0xb2>
	}
	for(int i=135; i<161;i++){
 80030ba:	2387      	movs	r3, #135	; 0x87
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
 80030be:	e00e      	b.n	80030de <StartScreen+0xfa>
			TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-5, LCD_COLOR_BLACK);
 80030c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c2:	b29c      	uxth	r4, r3
 80030c4:	f007 fb08 	bl	800a6d8 <TM_LCD_GetHeight>
 80030c8:	4603      	mov	r3, r0
 80030ca:	3b05      	subs	r3, #5
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2200      	movs	r2, #0
 80030d0:	4619      	mov	r1, r3
 80030d2:	4620      	mov	r0, r4
 80030d4:	f007 fa70 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=135; i<161;i++){
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	3301      	adds	r3, #1
 80030dc:	633b      	str	r3, [r7, #48]	; 0x30
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	2ba0      	cmp	r3, #160	; 0xa0
 80030e2:	dded      	ble.n	80030c0 <StartScreen+0xdc>
		}
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 80030e4:	f007 faf8 	bl	800a6d8 <TM_LCD_GetHeight>
 80030e8:	4603      	mov	r3, r0
 80030ea:	3b16      	subs	r3, #22
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ee:	e009      	b.n	8003104 <StartScreen+0x120>
			TM_LCD_DrawPixel(135, i, LCD_COLOR_BLACK);
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2200      	movs	r2, #0
 80030f6:	4619      	mov	r1, r3
 80030f8:	2087      	movs	r0, #135	; 0x87
 80030fa:	f007 fa5d 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 80030fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003100:	3301      	adds	r3, #1
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003104:	f007 fae8 	bl	800a6d8 <TM_LCD_GetHeight>
 8003108:	4603      	mov	r3, r0
 800310a:	3b05      	subs	r3, #5
 800310c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800310e:	429a      	cmp	r2, r3
 8003110:	dbee      	blt.n	80030f0 <StartScreen+0x10c>
		}
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 8003112:	f007 fae1 	bl	800a6d8 <TM_LCD_GetHeight>
 8003116:	4603      	mov	r3, r0
 8003118:	3b16      	subs	r3, #22
 800311a:	62bb      	str	r3, [r7, #40]	; 0x28
 800311c:	e009      	b.n	8003132 <StartScreen+0x14e>
			TM_LCD_DrawPixel(160, i, LCD_COLOR_BLACK);
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	b29b      	uxth	r3, r3
 8003122:	2200      	movs	r2, #0
 8003124:	4619      	mov	r1, r3
 8003126:	20a0      	movs	r0, #160	; 0xa0
 8003128:	f007 fa46 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	3301      	adds	r3, #1
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
 8003132:	f007 fad1 	bl	800a6d8 <TM_LCD_GetHeight>
 8003136:	4603      	mov	r3, r0
 8003138:	3b05      	subs	r3, #5
 800313a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800313c:	429a      	cmp	r2, r3
 800313e:	dbee      	blt.n	800311e <StartScreen+0x13a>
		}
	char yaxis[] = "0.15 V/div";
 8003140:	4a14      	ldr	r2, [pc, #80]	; (8003194 <StartScreen+0x1b0>)
 8003142:	463b      	mov	r3, r7
 8003144:	ca07      	ldmia	r2, {r0, r1, r2}
 8003146:	c303      	stmia	r3!, {r0, r1}
 8003148:	801a      	strh	r2, [r3, #0]
 800314a:	3302      	adds	r3, #2
 800314c:	0c12      	lsrs	r2, r2, #16
 800314e:	701a      	strb	r2, [r3, #0]
	TM_LCD_SetXY(210,TM_LCD_GetHeight()*3/4+5);
 8003150:	f007 fac2 	bl	800a6d8 <TM_LCD_GetHeight>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	4613      	mov	r3, r2
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	4413      	add	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	da00      	bge.n	8003164 <StartScreen+0x180>
 8003162:	3303      	adds	r3, #3
 8003164:	109b      	asrs	r3, r3, #2
 8003166:	b29b      	uxth	r3, r3
 8003168:	3305      	adds	r3, #5
 800316a:	b29b      	uxth	r3, r3
 800316c:	4619      	mov	r1, r3
 800316e:	20d2      	movs	r0, #210	; 0xd2
 8003170:	f007 f94a 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_Puts(&yaxis[0]);
 8003174:	463b      	mov	r3, r7
 8003176:	4618      	mov	r0, r3
 8003178:	f007 fa44 	bl	800a604 <TM_LCD_Puts>
}
 800317c:	bf00      	nop
 800317e:	3738      	adds	r7, #56	; 0x38
 8003180:	46bd      	mov	sp, r7
 8003182:	bdb0      	pop	{r4, r5, r7, pc}
 8003184:	20000978 	.word	0x20000978
 8003188:	08010868 	.word	0x08010868
 800318c:	0801087c 	.word	0x0801087c
 8003190:	0046464f 	.word	0x0046464f
 8003194:	08010880 	.word	0x08010880

08003198 <ScreenIntro>:

void ScreenIntro(void){
 8003198:	b5b0      	push	{r4, r5, r7, lr}
 800319a:	b09c      	sub	sp, #112	; 0x70
 800319c:	af00      	add	r7, sp, #0
	char begin[] = "Sustav za generiranje,";
 800319e:	4b48      	ldr	r3, [pc, #288]	; (80032c0 <ScreenIntro+0x128>)
 80031a0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80031a4:	461d      	mov	r5, r3
 80031a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031aa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031ae:	6020      	str	r0, [r4, #0]
 80031b0:	3404      	adds	r4, #4
 80031b2:	8021      	strh	r1, [r4, #0]
 80031b4:	3402      	adds	r4, #2
 80031b6:	0c0b      	lsrs	r3, r1, #16
 80031b8:	7023      	strb	r3, [r4, #0]
	char end[] = "akviziciju i prikaz signala";
 80031ba:	4b42      	ldr	r3, [pc, #264]	; (80032c4 <ScreenIntro+0x12c>)
 80031bc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80031c0:	461d      	mov	r5, r3
 80031c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80031c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80031ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TM_LCD_SetXY(35, TM_LCD_GetHeight()/2-22);
 80031ce:	f007 fa83 	bl	800a6d8 <TM_LCD_GetHeight>
 80031d2:	4603      	mov	r3, r0
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b16      	subs	r3, #22
 80031da:	b29b      	uxth	r3, r3
 80031dc:	4619      	mov	r1, r3
 80031de:	2023      	movs	r0, #35	; 0x23
 80031e0:	f007 f912 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_Puts(&begin[0]);
 80031e4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031e8:	4618      	mov	r0, r3
 80031ea:	f007 fa0b 	bl	800a604 <TM_LCD_Puts>
	TM_LCD_SetXY(10, TM_LCD_GetHeight()/2);
 80031ee:	f007 fa73 	bl	800a6d8 <TM_LCD_GetHeight>
 80031f2:	4603      	mov	r3, r0
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	4619      	mov	r1, r3
 80031fa:	200a      	movs	r0, #10
 80031fc:	f007 f904 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_Puts(&end[0]);
 8003200:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003204:	4618      	mov	r0, r3
 8003206:	f007 f9fd 	bl	800a604 <TM_LCD_Puts>
	char fer[] = "FER, 2020./2021.";
 800320a:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <ScreenIntro+0x130>)
 800320c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8003210:	461d      	mov	r5, r3
 8003212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003216:	682b      	ldr	r3, [r5, #0]
 8003218:	7023      	strb	r3, [r4, #0]
	TM_LCD_SetFont(&TM_Font_7x10);
 800321a:	482c      	ldr	r0, [pc, #176]	; (80032cc <ScreenIntro+0x134>)
 800321c:	f007 f91a 	bl	800a454 <TM_LCD_SetFont>
	TM_LCD_SetXY(8, TM_LCD_GetHeight()-15);
 8003220:	f007 fa5a 	bl	800a6d8 <TM_LCD_GetHeight>
 8003224:	4603      	mov	r3, r0
 8003226:	3b0f      	subs	r3, #15
 8003228:	b29b      	uxth	r3, r3
 800322a:	4619      	mov	r1, r3
 800322c:	2008      	movs	r0, #8
 800322e:	f007 f8eb 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_Puts(&fer[0]);
 8003232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003236:	4618      	mov	r0, r3
 8003238:	f007 f9e4 	bl	800a604 <TM_LCD_Puts>
	for(int i=0; i<20000000;i++){}
 800323c:	2300      	movs	r3, #0
 800323e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003240:	e002      	b.n	8003248 <ScreenIntro+0xb0>
 8003242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003244:	3301      	adds	r3, #1
 8003246:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800324a:	4a21      	ldr	r2, [pc, #132]	; (80032d0 <ScreenIntro+0x138>)
 800324c:	4293      	cmp	r3, r2
 800324e:	ddf8      	ble.n	8003242 <ScreenIntro+0xaa>
	char next1[] = "Press user button";
 8003250:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <ScreenIntro+0x13c>)
 8003252:	f107 0410 	add.w	r4, r7, #16
 8003256:	461d      	mov	r5, r3
 8003258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800325a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	8023      	strh	r3, [r4, #0]
	char next2[] = "to continue";
 8003260:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <ScreenIntro+0x140>)
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	ca07      	ldmia	r2, {r0, r1, r2}
 8003266:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	TM_LCD_SetXY(200, TM_LCD_GetHeight()-20);
 800326a:	f007 fa35 	bl	800a6d8 <TM_LCD_GetHeight>
 800326e:	4603      	mov	r3, r0
 8003270:	3b14      	subs	r3, #20
 8003272:	b29b      	uxth	r3, r3
 8003274:	4619      	mov	r1, r3
 8003276:	20c8      	movs	r0, #200	; 0xc8
 8003278:	f007 f8c6 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_Puts(&next1[0]);
 800327c:	f107 0310 	add.w	r3, r7, #16
 8003280:	4618      	mov	r0, r3
 8003282:	f007 f9bf 	bl	800a604 <TM_LCD_Puts>
	TM_LCD_SetXY(200, TM_LCD_GetHeight()-10);
 8003286:	f007 fa27 	bl	800a6d8 <TM_LCD_GetHeight>
 800328a:	4603      	mov	r3, r0
 800328c:	3b0a      	subs	r3, #10
 800328e:	b29b      	uxth	r3, r3
 8003290:	4619      	mov	r1, r3
 8003292:	20c8      	movs	r0, #200	; 0xc8
 8003294:	f007 f8b8 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_Puts(&next2[0]);
 8003298:	1d3b      	adds	r3, r7, #4
 800329a:	4618      	mov	r0, r3
 800329c:	f007 f9b2 	bl	800a604 <TM_LCD_Puts>
	while(1){
		if(TM_DISCO_ButtonPressed() > 0) {
 80032a0:	4b0e      	ldr	r3, [pc, #56]	; (80032dc <ScreenIntro+0x144>)
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f9      	beq.n	80032a0 <ScreenIntro+0x108>
			TM_LCD_Fill(LCD_COLOR_WHITE);
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032b0:	f007 f85e 	bl	800a370 <TM_LCD_Fill>
			break;
 80032b4:	bf00      	nop
		}
	}

}
 80032b6:	bf00      	nop
 80032b8:	3770      	adds	r7, #112	; 0x70
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bdb0      	pop	{r4, r5, r7, pc}
 80032be:	bf00      	nop
 80032c0:	0801088c 	.word	0x0801088c
 80032c4:	080108a4 	.word	0x080108a4
 80032c8:	080108c0 	.word	0x080108c0
 80032cc:	20000978 	.word	0x20000978
 80032d0:	01312cff 	.word	0x01312cff
 80032d4:	080108d4 	.word	0x080108d4
 80032d8:	080108e8 	.word	0x080108e8
 80032dc:	40020000 	.word	0x40020000

080032e0 <LCDFunctionGeneratorON>:

void LCDFunctionGeneratorON(void){
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
	for(int i=7;i<23;i++){
 80032e6:	2307      	movs	r3, #7
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e027      	b.n	800333c <LCDFunctionGeneratorON+0x5c>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 80032ec:	f007 f9f4 	bl	800a6d8 <TM_LCD_GetHeight>
 80032f0:	4603      	mov	r3, r0
 80032f2:	3b0d      	subs	r3, #13
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	e017      	b.n	8003328 <LCDFunctionGeneratorON+0x48>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_WHITE){
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	b292      	uxth	r2, r2
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f007 f96b 	bl	800a5de <TM_LCD_GetPixel>
 8003308:	4603      	mov	r3, r0
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800330e:	d108      	bne.n	8003322 <LCDFunctionGeneratorON+0x42>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_GREEN2);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	b29b      	uxth	r3, r3
 8003314:	68ba      	ldr	r2, [r7, #8]
 8003316:	b291      	uxth	r1, r2
 8003318:	f244 3221 	movw	r2, #17185	; 0x4321
 800331c:	4618      	mov	r0, r3
 800331e:	f007 f94b 	bl	800a5b8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	3301      	adds	r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	f007 f9d6 	bl	800a6d8 <TM_LCD_GetHeight>
 800332c:	4603      	mov	r3, r0
 800332e:	3b02      	subs	r3, #2
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	429a      	cmp	r2, r3
 8003334:	dbe0      	blt.n	80032f8 <LCDFunctionGeneratorON+0x18>
	for(int i=7;i<23;i++){
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3301      	adds	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2b16      	cmp	r3, #22
 8003340:	ddd4      	ble.n	80032ec <LCDFunctionGeneratorON+0xc>
			}
		}
	}
	for(int i=27;i<49;i++){
 8003342:	231b      	movs	r3, #27
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	e027      	b.n	8003398 <LCDFunctionGeneratorON+0xb8>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8003348:	f007 f9c6 	bl	800a6d8 <TM_LCD_GetHeight>
 800334c:	4603      	mov	r3, r0
 800334e:	3b0d      	subs	r3, #13
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	e017      	b.n	8003384 <LCDFunctionGeneratorON+0xa4>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_RED2){
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	b29b      	uxth	r3, r3
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	b292      	uxth	r2, r2
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f007 f93d 	bl	800a5de <TM_LCD_GetPixel>
 8003364:	4603      	mov	r3, r0
 8003366:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 800336a:	d108      	bne.n	800337e <LCDFunctionGeneratorON+0x9e>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	b29b      	uxth	r3, r3
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	b291      	uxth	r1, r2
 8003374:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003378:	4618      	mov	r0, r3
 800337a:	f007 f91d 	bl	800a5b8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	f007 f9a8 	bl	800a6d8 <TM_LCD_GetHeight>
 8003388:	4603      	mov	r3, r0
 800338a:	3b02      	subs	r3, #2
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	dbe0      	blt.n	8003354 <LCDFunctionGeneratorON+0x74>
	for(int i=27;i<49;i++){
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3301      	adds	r3, #1
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b30      	cmp	r3, #48	; 0x30
 800339c:	ddd4      	ble.n	8003348 <LCDFunctionGeneratorON+0x68>
			}
		}
	}
}
 800339e:	bf00      	nop
 80033a0:	3710      	adds	r7, #16
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <LCDFunctionGeneratorOFF>:

void LCDFunctionGeneratorOFF(void){
 80033a8:	b590      	push	{r4, r7, lr}
 80033aa:	b08b      	sub	sp, #44	; 0x2c
 80033ac:	af00      	add	r7, sp, #0
	for(int i=27;i<49;i++){
 80033ae:	231b      	movs	r3, #27
 80033b0:	627b      	str	r3, [r7, #36]	; 0x24
 80033b2:	e027      	b.n	8003404 <LCDFunctionGeneratorOFF+0x5c>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 80033b4:	f007 f990 	bl	800a6d8 <TM_LCD_GetHeight>
 80033b8:	4603      	mov	r3, r0
 80033ba:	3b0d      	subs	r3, #13
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	e017      	b.n	80033f0 <LCDFunctionGeneratorOFF+0x48>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_WHITE){
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	6a3a      	ldr	r2, [r7, #32]
 80033c6:	b292      	uxth	r2, r2
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f007 f907 	bl	800a5de <TM_LCD_GetPixel>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d6:	d108      	bne.n	80033ea <LCDFunctionGeneratorOFF+0x42>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_RED2);
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	b29b      	uxth	r3, r3
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	b291      	uxth	r1, r2
 80033e0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80033e4:	4618      	mov	r0, r3
 80033e6:	f007 f8e7 	bl	800a5b8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	3301      	adds	r3, #1
 80033ee:	623b      	str	r3, [r7, #32]
 80033f0:	f007 f972 	bl	800a6d8 <TM_LCD_GetHeight>
 80033f4:	4603      	mov	r3, r0
 80033f6:	3b02      	subs	r3, #2
 80033f8:	6a3a      	ldr	r2, [r7, #32]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	dbe0      	blt.n	80033c0 <LCDFunctionGeneratorOFF+0x18>
	for(int i=27;i<49;i++){
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	3301      	adds	r3, #1
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	2b30      	cmp	r3, #48	; 0x30
 8003408:	ddd4      	ble.n	80033b4 <LCDFunctionGeneratorOFF+0xc>
			}
		}
	}
	for(int i=7;i<23;i++){
 800340a:	2307      	movs	r3, #7
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e028      	b.n	8003462 <LCDFunctionGeneratorOFF+0xba>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8003410:	f007 f962 	bl	800a6d8 <TM_LCD_GetHeight>
 8003414:	4603      	mov	r3, r0
 8003416:	3b0d      	subs	r3, #13
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	e018      	b.n	800344e <LCDFunctionGeneratorOFF+0xa6>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_GREEN2){
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	b29b      	uxth	r3, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	b292      	uxth	r2, r2
 8003424:	4611      	mov	r1, r2
 8003426:	4618      	mov	r0, r3
 8003428:	f007 f8d9 	bl	800a5de <TM_LCD_GetPixel>
 800342c:	4602      	mov	r2, r0
 800342e:	f244 3321 	movw	r3, #17185	; 0x4321
 8003432:	429a      	cmp	r2, r3
 8003434:	d108      	bne.n	8003448 <LCDFunctionGeneratorOFF+0xa0>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	b29b      	uxth	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	b291      	uxth	r1, r2
 800343e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003442:	4618      	mov	r0, r3
 8003444:	f007 f8b8 	bl	800a5b8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	3301      	adds	r3, #1
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	f007 f943 	bl	800a6d8 <TM_LCD_GetHeight>
 8003452:	4603      	mov	r3, r0
 8003454:	3b02      	subs	r3, #2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	429a      	cmp	r2, r3
 800345a:	dbdf      	blt.n	800341c <LCDFunctionGeneratorOFF+0x74>
	for(int i=7;i<23;i++){
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	3301      	adds	r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2b16      	cmp	r3, #22
 8003466:	ddd3      	ble.n	8003410 <LCDFunctionGeneratorOFF+0x68>
			}
		}
	}
	for(int i=137;i<159;i++){
 8003468:	2389      	movs	r3, #137	; 0x89
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	e01b      	b.n	80034a6 <LCDFunctionGeneratorOFF+0xfe>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight()-7;j++){
 800346e:	f007 f933 	bl	800a6d8 <TM_LCD_GetHeight>
 8003472:	4603      	mov	r3, r0
 8003474:	3b12      	subs	r3, #18
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	e00b      	b.n	8003492 <LCDFunctionGeneratorOFF+0xea>
			TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	b29b      	uxth	r3, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	b291      	uxth	r1, r2
 8003482:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003486:	4618      	mov	r0, r3
 8003488:	f007 f896 	bl	800a5b8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight()-7;j++){
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	3301      	adds	r3, #1
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	f007 f921 	bl	800a6d8 <TM_LCD_GetHeight>
 8003496:	4603      	mov	r3, r0
 8003498:	3b07      	subs	r3, #7
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	429a      	cmp	r2, r3
 800349e:	dbec      	blt.n	800347a <LCDFunctionGeneratorOFF+0xd2>
	for(int i=137;i<159;i++){
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b9e      	cmp	r3, #158	; 0x9e
 80034aa:	dde0      	ble.n	800346e <LCDFunctionGeneratorOFF+0xc6>
		}
	}
	char gasi[] = "               ";
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <LCDFunctionGeneratorOFF+0x130>)
 80034ae:	463c      	mov	r4, r7
 80034b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 80034b6:	f007 f90f 	bl	800a6d8 <TM_LCD_GetHeight>
 80034ba:	4603      	mov	r3, r0
 80034bc:	3b12      	subs	r3, #18
 80034be:	b29b      	uxth	r3, r3
 80034c0:	4619      	mov	r1, r3
 80034c2:	20a5      	movs	r0, #165	; 0xa5
 80034c4:	f006 ffa0 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_Puts(&gasi[0]);
 80034c8:	463b      	mov	r3, r7
 80034ca:	4618      	mov	r0, r3
 80034cc:	f007 f89a 	bl	800a604 <TM_LCD_Puts>
}
 80034d0:	bf00      	nop
 80034d2:	372c      	adds	r7, #44	; 0x2c
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd90      	pop	{r4, r7, pc}
 80034d8:	080108f4 	.word	0x080108f4
 80034dc:	00000000 	.word	0x00000000

080034e0 <SetSquareOutput>:
		}
		width++;
	}
}

void SetSquareOutput(long int freq){
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b0b9      	sub	sp, #228	; 0xe4
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	LCDFunctionGeneratorON();
 80034e8:	f7ff fefa 	bl	80032e0 <LCDFunctionGeneratorON>
	double sinus[20];
	for(int i=0; i<20; i++){
 80034ec:	2300      	movs	r3, #0
 80034ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80034f2:	e02a      	b.n	800354a <SetSquareOutput+0x6a>
		double a = (double) i;
 80034f4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80034f8:	f7fd f824 	bl	8000544 <__aeabi_i2d>
 80034fc:	4603      	mov	r3, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		sinus[i] = sin(0.33*a);
 8003504:	a389      	add	r3, pc, #548	; (adr r3, 800372c <SetSquareOutput+0x24c>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800350e:	f7fd f883 	bl	8000618 <__aeabi_dmul>
 8003512:	4603      	mov	r3, r0
 8003514:	460c      	mov	r4, r1
 8003516:	ec44 3b17 	vmov	d7, r3, r4
 800351a:	eeb0 0a47 	vmov.f32	s0, s14
 800351e:	eef0 0a67 	vmov.f32	s1, s15
 8003522:	f00b fe89 	bl	800f238 <sin>
 8003526:	eeb0 7a40 	vmov.f32	s14, s0
 800352a:	eef0 7a60 	vmov.f32	s15, s1
 800352e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003538:	4413      	add	r3, r2
 800353a:	3bc8      	subs	r3, #200	; 0xc8
 800353c:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<20; i++){
 8003540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003544:	3301      	adds	r3, #1
 8003546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800354a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800354e:	2b13      	cmp	r3, #19
 8003550:	ddd0      	ble.n	80034f4 <SetSquareOutput+0x14>
	}

	for(int i=0;i<20;i++){
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003558:	e031      	b.n	80035be <SetSquareOutput+0xde>
		int amplitude = (int)(-6* sinus[i] + 227);
 800355a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003564:	4413      	add	r3, r2
 8003566:	3bc8      	subs	r3, #200	; 0xc8
 8003568:	e9d3 0100 	ldrd	r0, r1, [r3]
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	4b6b      	ldr	r3, [pc, #428]	; (8003720 <SetSquareOutput+0x240>)
 8003572:	f7fd f851 	bl	8000618 <__aeabi_dmul>
 8003576:	4603      	mov	r3, r0
 8003578:	460c      	mov	r4, r1
 800357a:	4618      	mov	r0, r3
 800357c:	4621      	mov	r1, r4
 800357e:	a366      	add	r3, pc, #408	; (adr r3, 8003718 <SetSquareOutput+0x238>)
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f7fc fe92 	bl	80002ac <__adddf3>
 8003588:	4603      	mov	r3, r0
 800358a:	460c      	mov	r4, r1
 800358c:	4618      	mov	r0, r3
 800358e:	4621      	mov	r1, r4
 8003590:	f7fd faf2 	bl	8000b78 <__aeabi_d2iz>
 8003594:	4603      	mov	r3, r0
 8003596:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		TM_LCD_DrawPixel(i+138, amplitude, LCD_COLOR_WHITE );
 800359a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800359e:	b29b      	uxth	r3, r3
 80035a0:	338a      	adds	r3, #138	; 0x8a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80035a8:	b291      	uxth	r1, r2
 80035aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035ae:	4618      	mov	r0, r3
 80035b0:	f007 f802 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=0;i<20;i++){
 80035b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035b8:	3301      	adds	r3, #1
 80035ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80035be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035c2:	2b13      	cmp	r3, #19
 80035c4:	ddc9      	ble.n	800355a <SetSquareOutput+0x7a>
	}
	for(int i=147; i<159;i++){
 80035c6:	2393      	movs	r3, #147	; 0x93
 80035c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80035cc:	e012      	b.n	80035f4 <SetSquareOutput+0x114>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-18, LCD_COLOR_RED2);
 80035ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035d2:	b29c      	uxth	r4, r3
 80035d4:	f007 f880 	bl	800a6d8 <TM_LCD_GetHeight>
 80035d8:	4603      	mov	r3, r0
 80035da:	3b12      	subs	r3, #18
 80035dc:	b29b      	uxth	r3, r3
 80035de:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80035e2:	4619      	mov	r1, r3
 80035e4:	4620      	mov	r0, r4
 80035e6:	f006 ffe7 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=147; i<159;i++){
 80035ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035ee:	3301      	adds	r3, #1
 80035f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80035f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035f8:	2b9e      	cmp	r3, #158	; 0x9e
 80035fa:	dde8      	ble.n	80035ce <SetSquareOutput+0xee>
	}
	for(int i=137; i<147;i++){
 80035fc:	2389      	movs	r3, #137	; 0x89
 80035fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003602:	e012      	b.n	800362a <SetSquareOutput+0x14a>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-8, LCD_COLOR_RED2);
 8003604:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003608:	b29c      	uxth	r4, r3
 800360a:	f007 f865 	bl	800a6d8 <TM_LCD_GetHeight>
 800360e:	4603      	mov	r3, r0
 8003610:	3b08      	subs	r3, #8
 8003612:	b29b      	uxth	r3, r3
 8003614:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003618:	4619      	mov	r1, r3
 800361a:	4620      	mov	r0, r4
 800361c:	f006 ffcc 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=137; i<147;i++){
 8003620:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003624:	3301      	adds	r3, #1
 8003626:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800362a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800362e:	2b92      	cmp	r3, #146	; 0x92
 8003630:	dde8      	ble.n	8003604 <SetSquareOutput+0x124>
	}
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 8003632:	f007 f851 	bl	800a6d8 <TM_LCD_GetHeight>
 8003636:	4603      	mov	r3, r0
 8003638:	3b12      	subs	r3, #18
 800363a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800363e:	e00d      	b.n	800365c <SetSquareOutput+0x17c>
		TM_LCD_DrawPixel(147, i, LCD_COLOR_RED2);
 8003640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003644:	b29b      	uxth	r3, r3
 8003646:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800364a:	4619      	mov	r1, r3
 800364c:	2093      	movs	r0, #147	; 0x93
 800364e:	f006 ffb3 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 8003652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003656:	3301      	adds	r3, #1
 8003658:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800365c:	f007 f83c 	bl	800a6d8 <TM_LCD_GetHeight>
 8003660:	4603      	mov	r3, r0
 8003662:	3b08      	subs	r3, #8
 8003664:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003668:	429a      	cmp	r2, r3
 800366a:	dbe9      	blt.n	8003640 <SetSquareOutput+0x160>
	}
	char f[10] = {0};
 800366c:	f107 030c 	add.w	r3, r7, #12
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	811a      	strh	r2, [r3, #8]
	sprintf(f,"%.ld",freq);
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	4929      	ldr	r1, [pc, #164]	; (8003724 <SetSquareOutput+0x244>)
 8003680:	4618      	mov	r0, r3
 8003682:	f008 fecf 	bl	800c424 <siprintf>
	for(int i=165;i<320;i++){
 8003686:	23a5      	movs	r3, #165	; 0xa5
 8003688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800368c:	e023      	b.n	80036d6 <SetSquareOutput+0x1f6>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 800368e:	f007 f823 	bl	800a6d8 <TM_LCD_GetHeight>
 8003692:	4603      	mov	r3, r0
 8003694:	3b12      	subs	r3, #18
 8003696:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800369a:	e00f      	b.n	80036bc <SetSquareOutput+0x1dc>
			TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800369c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036a6:	b291      	uxth	r1, r2
 80036a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ac:	4618      	mov	r0, r3
 80036ae:	f006 ff83 	bl	800a5b8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 80036b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036b6:	3301      	adds	r3, #1
 80036b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036bc:	f007 f80c 	bl	800a6d8 <TM_LCD_GetHeight>
 80036c0:	4603      	mov	r3, r0
 80036c2:	461a      	mov	r2, r3
 80036c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036c8:	4293      	cmp	r3, r2
 80036ca:	dbe7      	blt.n	800369c <SetSquareOutput+0x1bc>
	for(int i=165;i<320;i++){
 80036cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036d0:	3301      	adds	r3, #1
 80036d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036da:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80036de:	dbd6      	blt.n	800368e <SetSquareOutput+0x1ae>
		}
	}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 80036e0:	f006 fffa 	bl	800a6d8 <TM_LCD_GetHeight>
 80036e4:	4603      	mov	r3, r0
 80036e6:	3b12      	subs	r3, #18
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	4619      	mov	r1, r3
 80036ec:	20a5      	movs	r0, #165	; 0xa5
 80036ee:	f006 fe8b 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_Puts(&f[0]);
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	4618      	mov	r0, r3
 80036f8:	f006 ff84 	bl	800a604 <TM_LCD_Puts>
	char f1[] = " Hz";
 80036fc:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <SetSquareOutput+0x248>)
 80036fe:	60bb      	str	r3, [r7, #8]
	TM_LCD_Puts(&f1[0]);
 8003700:	f107 0308 	add.w	r3, r7, #8
 8003704:	4618      	mov	r0, r3
 8003706:	f006 ff7d 	bl	800a604 <TM_LCD_Puts>

}
 800370a:	bf00      	nop
 800370c:	37e4      	adds	r7, #228	; 0xe4
 800370e:	46bd      	mov	sp, r7
 8003710:	bd90      	pop	{r4, r7, pc}
 8003712:	bf00      	nop
 8003714:	f3af 8000 	nop.w
 8003718:	00000000 	.word	0x00000000
 800371c:	406c6000 	.word	0x406c6000
 8003720:	c0180000 	.word	0xc0180000
 8003724:	08010904 	.word	0x08010904
 8003728:	007a4820 	.word	0x007a4820
 800372c:	51eb851f 	.word	0x51eb851f
 8003730:	3fd51eb8 	.word	0x3fd51eb8
 8003734:	00000000 	.word	0x00000000

08003738 <SetSineOutput>:

void SetSineOutput(long int freq){
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b0b9      	sub	sp, #228	; 0xe4
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

	LCDFunctionGeneratorON();
 8003740:	f7ff fdce 	bl	80032e0 <LCDFunctionGeneratorON>
	double sinus[20];
	for(int i=147; i<159;i++){
 8003744:	2393      	movs	r3, #147	; 0x93
 8003746:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800374a:	e012      	b.n	8003772 <SetSineOutput+0x3a>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-18, LCD_COLOR_WHITE);
 800374c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003750:	b29c      	uxth	r4, r3
 8003752:	f006 ffc1 	bl	800a6d8 <TM_LCD_GetHeight>
 8003756:	4603      	mov	r3, r0
 8003758:	3b12      	subs	r3, #18
 800375a:	b29b      	uxth	r3, r3
 800375c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003760:	4619      	mov	r1, r3
 8003762:	4620      	mov	r0, r4
 8003764:	f006 ff28 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=147; i<159;i++){
 8003768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800376c:	3301      	adds	r3, #1
 800376e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003776:	2b9e      	cmp	r3, #158	; 0x9e
 8003778:	dde8      	ble.n	800374c <SetSineOutput+0x14>
	}
	for(int i=137; i<147;i++){
 800377a:	2389      	movs	r3, #137	; 0x89
 800377c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003780:	e012      	b.n	80037a8 <SetSineOutput+0x70>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-8, LCD_COLOR_WHITE);
 8003782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003786:	b29c      	uxth	r4, r3
 8003788:	f006 ffa6 	bl	800a6d8 <TM_LCD_GetHeight>
 800378c:	4603      	mov	r3, r0
 800378e:	3b08      	subs	r3, #8
 8003790:	b29b      	uxth	r3, r3
 8003792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003796:	4619      	mov	r1, r3
 8003798:	4620      	mov	r0, r4
 800379a:	f006 ff0d 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=137; i<147;i++){
 800379e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037a2:	3301      	adds	r3, #1
 80037a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037ac:	2b92      	cmp	r3, #146	; 0x92
 80037ae:	dde8      	ble.n	8003782 <SetSineOutput+0x4a>
	}
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 80037b0:	f006 ff92 	bl	800a6d8 <TM_LCD_GetHeight>
 80037b4:	4603      	mov	r3, r0
 80037b6:	3b12      	subs	r3, #18
 80037b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80037bc:	e00d      	b.n	80037da <SetSineOutput+0xa2>
		TM_LCD_DrawPixel(147, i, LCD_COLOR_WHITE);
 80037be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037c8:	4619      	mov	r1, r3
 80037ca:	2093      	movs	r0, #147	; 0x93
 80037cc:	f006 fef4 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 80037d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037d4:	3301      	adds	r3, #1
 80037d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80037da:	f006 ff7d 	bl	800a6d8 <TM_LCD_GetHeight>
 80037de:	4603      	mov	r3, r0
 80037e0:	3b08      	subs	r3, #8
 80037e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80037e6:	429a      	cmp	r2, r3
 80037e8:	dbe9      	blt.n	80037be <SetSineOutput+0x86>
	}

	for(int i=0; i<20; i++){
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037f0:	e02a      	b.n	8003848 <SetSineOutput+0x110>
		double a = (double) i;
 80037f2:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80037f6:	f7fc fea5 	bl	8000544 <__aeabi_i2d>
 80037fa:	4603      	mov	r3, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		sinus[i] = sin(0.33*a);
 8003802:	a360      	add	r3, pc, #384	; (adr r3, 8003984 <SetSineOutput+0x24c>)
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800380c:	f7fc ff04 	bl	8000618 <__aeabi_dmul>
 8003810:	4603      	mov	r3, r0
 8003812:	460c      	mov	r4, r1
 8003814:	ec44 3b17 	vmov	d7, r3, r4
 8003818:	eeb0 0a47 	vmov.f32	s0, s14
 800381c:	eef0 0a67 	vmov.f32	s1, s15
 8003820:	f00b fd0a 	bl	800f238 <sin>
 8003824:	eeb0 7a40 	vmov.f32	s14, s0
 8003828:	eef0 7a60 	vmov.f32	s15, s1
 800382c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003836:	4413      	add	r3, r2
 8003838:	3bc8      	subs	r3, #200	; 0xc8
 800383a:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<20; i++){
 800383e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003842:	3301      	adds	r3, #1
 8003844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003848:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800384c:	2b13      	cmp	r3, #19
 800384e:	ddd0      	ble.n	80037f2 <SetSineOutput+0xba>
	}

	for(int i=0;i<20;i++){
 8003850:	2300      	movs	r3, #0
 8003852:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003856:	e031      	b.n	80038bc <SetSineOutput+0x184>
		int amplitude = (int)(-6* sinus[i] + 227);
 8003858:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8003862:	4413      	add	r3, r2
 8003864:	3bc8      	subs	r3, #200	; 0xc8
 8003866:	e9d3 0100 	ldrd	r0, r1, [r3]
 800386a:	f04f 0200 	mov.w	r2, #0
 800386e:	4b42      	ldr	r3, [pc, #264]	; (8003978 <SetSineOutput+0x240>)
 8003870:	f7fc fed2 	bl	8000618 <__aeabi_dmul>
 8003874:	4603      	mov	r3, r0
 8003876:	460c      	mov	r4, r1
 8003878:	4618      	mov	r0, r3
 800387a:	4621      	mov	r1, r4
 800387c:	a33c      	add	r3, pc, #240	; (adr r3, 8003970 <SetSineOutput+0x238>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f7fc fd13 	bl	80002ac <__adddf3>
 8003886:	4603      	mov	r3, r0
 8003888:	460c      	mov	r4, r1
 800388a:	4618      	mov	r0, r3
 800388c:	4621      	mov	r1, r4
 800388e:	f7fd f973 	bl	8000b78 <__aeabi_d2iz>
 8003892:	4603      	mov	r3, r0
 8003894:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		TM_LCD_DrawPixel(i+138, amplitude, LCD_COLOR_RED2);
 8003898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800389c:	b29b      	uxth	r3, r3
 800389e:	338a      	adds	r3, #138	; 0x8a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038a6:	b291      	uxth	r1, r2
 80038a8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80038ac:	4618      	mov	r0, r3
 80038ae:	f006 fe83 	bl	800a5b8 <TM_LCD_DrawPixel>
	for(int i=0;i<20;i++){
 80038b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038b6:	3301      	adds	r3, #1
 80038b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80038bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80038c0:	2b13      	cmp	r3, #19
 80038c2:	ddc9      	ble.n	8003858 <SetSineOutput+0x120>
	}
	char f[10] = {0};
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	811a      	strh	r2, [r3, #8]
	sprintf(f,"%.ld",freq);
 80038d0:	f107 030c 	add.w	r3, r7, #12
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4929      	ldr	r1, [pc, #164]	; (800397c <SetSineOutput+0x244>)
 80038d8:	4618      	mov	r0, r3
 80038da:	f008 fda3 	bl	800c424 <siprintf>
	for(int i=165;i<320;i++){
 80038de:	23a5      	movs	r3, #165	; 0xa5
 80038e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038e4:	e023      	b.n	800392e <SetSineOutput+0x1f6>
			for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 80038e6:	f006 fef7 	bl	800a6d8 <TM_LCD_GetHeight>
 80038ea:	4603      	mov	r3, r0
 80038ec:	3b12      	subs	r3, #18
 80038ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038f2:	e00f      	b.n	8003914 <SetSineOutput+0x1dc>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 80038f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038fe:	b291      	uxth	r1, r2
 8003900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003904:	4618      	mov	r0, r3
 8003906:	f006 fe57 	bl	800a5b8 <TM_LCD_DrawPixel>
			for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 800390a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800390e:	3301      	adds	r3, #1
 8003910:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003914:	f006 fee0 	bl	800a6d8 <TM_LCD_GetHeight>
 8003918:	4603      	mov	r3, r0
 800391a:	461a      	mov	r2, r3
 800391c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003920:	4293      	cmp	r3, r2
 8003922:	dbe7      	blt.n	80038f4 <SetSineOutput+0x1bc>
	for(int i=165;i<320;i++){
 8003924:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003928:	3301      	adds	r3, #1
 800392a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800392e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003932:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003936:	dbd6      	blt.n	80038e6 <SetSineOutput+0x1ae>
			}
		}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 8003938:	f006 fece 	bl	800a6d8 <TM_LCD_GetHeight>
 800393c:	4603      	mov	r3, r0
 800393e:	3b12      	subs	r3, #18
 8003940:	b29b      	uxth	r3, r3
 8003942:	4619      	mov	r1, r3
 8003944:	20a5      	movs	r0, #165	; 0xa5
 8003946:	f006 fd5f 	bl	800a408 <TM_LCD_SetXY>
	TM_LCD_Puts(&f[0]);
 800394a:	f107 030c 	add.w	r3, r7, #12
 800394e:	4618      	mov	r0, r3
 8003950:	f006 fe58 	bl	800a604 <TM_LCD_Puts>
	char f1[] = " Hz";
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <SetSineOutput+0x248>)
 8003956:	60bb      	str	r3, [r7, #8]
	TM_LCD_Puts(&f1[0]);
 8003958:	f107 0308 	add.w	r3, r7, #8
 800395c:	4618      	mov	r0, r3
 800395e:	f006 fe51 	bl	800a604 <TM_LCD_Puts>
}
 8003962:	bf00      	nop
 8003964:	37e4      	adds	r7, #228	; 0xe4
 8003966:	46bd      	mov	sp, r7
 8003968:	bd90      	pop	{r4, r7, pc}
 800396a:	bf00      	nop
 800396c:	f3af 8000 	nop.w
 8003970:	00000000 	.word	0x00000000
 8003974:	406c6000 	.word	0x406c6000
 8003978:	c0180000 	.word	0xc0180000
 800397c:	08010904 	.word	0x08010904
 8003980:	007a4820 	.word	0x007a4820
 8003984:	51eb851f 	.word	0x51eb851f
 8003988:	3fd51eb8 	.word	0x3fd51eb8
 800398c:	00000000 	.word	0x00000000

08003990 <STS>:
	TM_LCD_Puts(&title[0]);
	TM_LCD_SetFont(&TM_Font_7x10);
	SendToScreen(signal);
}

void STS (int* signal){
 8003990:	b590      	push	{r4, r7, lr}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	int factor;
	int k = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	61bb      	str	r3, [r7, #24]
	int last_amp = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]
	int inter_amp;
	if (frequency <= 100 ) factor = 1;
 80039a0:	4b57      	ldr	r3, [pc, #348]	; (8003b00 <STS+0x170>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b64      	cmp	r3, #100	; 0x64
 80039a6:	dc02      	bgt.n	80039ae <STS+0x1e>
 80039a8:	2301      	movs	r3, #1
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	e027      	b.n	80039fe <STS+0x6e>
	else if (frequency > 100 && frequency <= 300 ) factor = 2;
 80039ae:	4b54      	ldr	r3, [pc, #336]	; (8003b00 <STS+0x170>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b64      	cmp	r3, #100	; 0x64
 80039b4:	dd07      	ble.n	80039c6 <STS+0x36>
 80039b6:	4b52      	ldr	r3, [pc, #328]	; (8003b00 <STS+0x170>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80039be:	dc02      	bgt.n	80039c6 <STS+0x36>
 80039c0:	2302      	movs	r3, #2
 80039c2:	61fb      	str	r3, [r7, #28]
 80039c4:	e01b      	b.n	80039fe <STS+0x6e>
	else if (frequency > 300 && frequency <= 500 ) factor = 3;
 80039c6:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <STS+0x170>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80039ce:	dd07      	ble.n	80039e0 <STS+0x50>
 80039d0:	4b4b      	ldr	r3, [pc, #300]	; (8003b00 <STS+0x170>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80039d8:	dc02      	bgt.n	80039e0 <STS+0x50>
 80039da:	2303      	movs	r3, #3
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e00e      	b.n	80039fe <STS+0x6e>
	else if (frequency > 500 && frequency <= 800 ) factor = 4;
 80039e0:	4b47      	ldr	r3, [pc, #284]	; (8003b00 <STS+0x170>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80039e8:	dd07      	ble.n	80039fa <STS+0x6a>
 80039ea:	4b45      	ldr	r3, [pc, #276]	; (8003b00 <STS+0x170>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80039f2:	dc02      	bgt.n	80039fa <STS+0x6a>
 80039f4:	2304      	movs	r3, #4
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	e001      	b.n	80039fe <STS+0x6e>
	else factor = 5;
 80039fa:	2305      	movs	r3, #5
 80039fc:	61fb      	str	r3, [r7, #28]

	for(int i = 1; i < BUFFER_SIZE/factor - 1; i++){
 80039fe:	2301      	movs	r3, #1
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	e060      	b.n	8003ac6 <STS+0x136>
		int amplitude = -0.0417582 * signal[i] + 171;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fd98 	bl	8000544 <__aeabi_i2d>
 8003a14:	a336      	add	r3, pc, #216	; (adr r3, 8003af0 <STS+0x160>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f7fc fdfd 	bl	8000618 <__aeabi_dmul>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	460c      	mov	r4, r1
 8003a22:	4618      	mov	r0, r3
 8003a24:	4621      	mov	r1, r4
 8003a26:	a334      	add	r3, pc, #208	; (adr r3, 8003af8 <STS+0x168>)
 8003a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2c:	f7fc fc3e 	bl	80002ac <__adddf3>
 8003a30:	4603      	mov	r3, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	4618      	mov	r0, r3
 8003a36:	4621      	mov	r1, r4
 8003a38:	f7fd f89e 	bl	8000b78 <__aeabi_d2iz>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	60fb      	str	r3, [r7, #12]
		TM_LCD_DrawPixel(/*width*/ factor*i, amplitude, LCD_COLOR_YELLOW);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	fb12 f303 	smulbb	r3, r2, r3
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	b291      	uxth	r1, r2
 8003a52:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8003a56:	4618      	mov	r0, r3
 8003a58:	f006 fdae 	bl	800a5b8 <TM_LCD_DrawPixel>

		if (i > 1) {
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	dd2c      	ble.n	8003abc <STS+0x12c>
			for(k = factor*(i-1) + 1; k < factor*i; k++) {
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	61bb      	str	r3, [r7, #24]
 8003a70:	e01d      	b.n	8003aae <STS+0x11e>
				inter_amp = (amplitude - last_amp)*(k - factor*(i-1) )/factor + last_amp;
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	3a01      	subs	r2, #1
 8003a7c:	69f9      	ldr	r1, [r7, #28]
 8003a7e:	fb01 f202 	mul.w	r2, r1, r2
 8003a82:	69b9      	ldr	r1, [r7, #24]
 8003a84:	1a8a      	subs	r2, r1, r2
 8003a86:	fb02 f203 	mul.w	r2, r2, r3
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4413      	add	r3, r2
 8003a94:	60bb      	str	r3, [r7, #8]
				TM_LCD_DrawPixel(/*width*/ k, inter_amp, LCD_COLOR_YELLOW);
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	b291      	uxth	r1, r2
 8003a9e:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f006 fd88 	bl	800a5b8 <TM_LCD_DrawPixel>
			for(k = factor*(i-1) + 1; k < factor*i; k++) {
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	61bb      	str	r3, [r7, #24]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	dbda      	blt.n	8003a72 <STS+0xe2>
			}
		}
		last_amp = amplitude;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < BUFFER_SIZE/factor - 1; i++){
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	db95      	blt.n	8003a04 <STS+0x74>
	}
	HAL_Delay(300);
 8003ad8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003adc:	f005 feea 	bl	80098b4 <HAL_Delay>
	Window();
 8003ae0:	f000 f810 	bl	8003b04 <Window>
//			}
//		}
//		HAL_Delay(300);
//		counter++;

}
 8003ae4:	bf00      	nop
 8003ae6:	3724      	adds	r7, #36	; 0x24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd90      	pop	{r4, r7, pc}
 8003aec:	f3af 8000 	nop.w
 8003af0:	aeadfdd5 	.word	0xaeadfdd5
 8003af4:	bfa56154 	.word	0xbfa56154
 8003af8:	00000000 	.word	0x00000000
 8003afc:	40656000 	.word	0x40656000
 8003b00:	20000958 	.word	0x20000958

08003b04 <Window>:

void Window(void){
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0

	for(int i=1; i<319;i++){
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	e013      	b.n	8003b38 <Window+0x34>
			for(int j=1;j<182;j++){
 8003b10:	2301      	movs	r3, #1
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	e00a      	b.n	8003b2c <Window+0x28>

					TM_LCD_DrawPixel(i, j, LCD_COLOR_BLACK);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	68ba      	ldr	r2, [r7, #8]
 8003b1c:	b291      	uxth	r1, r2
 8003b1e:	2200      	movs	r2, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f006 fd49 	bl	800a5b8 <TM_LCD_DrawPixel>
			for(int j=1;j<182;j++){
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2bb5      	cmp	r3, #181	; 0xb5
 8003b30:	ddf1      	ble.n	8003b16 <Window+0x12>
	for(int i=1; i<319;i++){
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3301      	adds	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8003b3e:	dde7      	ble.n	8003b10 <Window+0xc>

			}
		}

		for(int i=1; i<319;i++){
 8003b40:	2301      	movs	r3, #1
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	e04a      	b.n	8003bdc <Window+0xd8>
			for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 8003b46:	2301      	movs	r3, #1
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	e035      	b.n	8003bb8 <Window+0xb4>
				if(j==171){
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2bab      	cmp	r3, #171	; 0xab
 8003b50:	d114      	bne.n	8003b7c <Window+0x78>
					if(i%3==0){
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4b25      	ldr	r3, [pc, #148]	; (8003bec <Window+0xe8>)
 8003b56:	fb83 3201 	smull	r3, r2, r3, r1
 8003b5a:	17cb      	asrs	r3, r1, #31
 8003b5c:	1ad2      	subs	r2, r2, r3
 8003b5e:	4613      	mov	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	1aca      	subs	r2, r1, r3
 8003b66:	2a00      	cmp	r2, #0
 8003b68:	d108      	bne.n	8003b7c <Window+0x78>
						TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	b291      	uxth	r1, r2
 8003b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b76:	4618      	mov	r0, r3
 8003b78:	f006 fd1e 	bl	800a5b8 <TM_LCD_DrawPixel>
					}
				}
				if((i%16==0)&&(j%9==0))	TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d115      	bne.n	8003bb2 <Window+0xae>
 8003b86:	6839      	ldr	r1, [r7, #0]
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <Window+0xec>)
 8003b8a:	fb83 2301 	smull	r2, r3, r3, r1
 8003b8e:	105a      	asrs	r2, r3, #1
 8003b90:	17cb      	asrs	r3, r1, #31
 8003b92:	1ad2      	subs	r2, r2, r3
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	1aca      	subs	r2, r1, r3
 8003b9c:	2a00      	cmp	r2, #0
 8003b9e:	d108      	bne.n	8003bb2 <Window+0xae>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	b291      	uxth	r1, r2
 8003ba8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bac:	4618      	mov	r0, r3
 8003bae:	f006 fd03 	bl	800a5b8 <TM_LCD_DrawPixel>
			for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	f006 fd8e 	bl	800a6d8 <TM_LCD_GetHeight>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	4413      	add	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	da00      	bge.n	8003bcc <Window+0xc8>
 8003bca:	3303      	adds	r3, #3
 8003bcc:	109b      	asrs	r3, r3, #2
 8003bce:	461a      	mov	r2, r3
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	dbba      	blt.n	8003b4c <Window+0x48>
		for(int i=1; i<319;i++){
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8003be2:	ddb0      	ble.n	8003b46 <Window+0x42>
			}
		}
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	55555556 	.word	0x55555556
 8003bf0:	38e38e39 	.word	0x38e38e39

08003bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bfa:	f000 ff29 	bl	8004a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bfe:	f000 f83f 	bl	8003c80 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //MX_SPI1_Init();
  StartScreen();
 8003c02:	f7ff f9ef 	bl	8002fe4 <StartScreen>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c06:	f7ff f955 	bl	8002eb4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c0a:	f7fe fd07 	bl	800261c <MX_DMA_Init>
  MX_DMA2D_Init();
 8003c0e:	f7fe fd3b 	bl	8002688 <MX_DMA2D_Init>
  MX_FMC_Init();
 8003c12:	f7ff f875 	bl	8002d00 <MX_FMC_Init>
  MX_SPI1_Init();
 8003c16:	f000 fc05 	bl	8004424 <MX_SPI1_Init>
  MX_ADC3_Init();
 8003c1a:	f7fe f9ef 	bl	8001ffc <MX_ADC3_Init>
  MX_DAC_Init();
 8003c1e:	f7fe fb49 	bl	80022b4 <MX_DAC_Init>
  MX_USART1_UART_Init();
 8003c22:	f000 fdcf 	bl	80047c4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8003c26:	f000 fd67 	bl	80046f8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  start_timer();
 8003c2a:	f000 fdc1 	bl	80047b0 <start_timer>
  if(HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&buffer, BUFFER_SIZE) != HAL_OK)
 8003c2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003c32:	4910      	ldr	r1, [pc, #64]	; (8003c74 <main+0x80>)
 8003c34:	4810      	ldr	r0, [pc, #64]	; (8003c78 <main+0x84>)
 8003c36:	f000 ffa1 	bl	8004b7c <HAL_ADC_Start_DMA>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <main+0x50>
    {
      /* Start Conversation Error */
      Error_Handler();
 8003c40:	f000 f8aa 	bl	8003d98 <Error_Handler>
    }

  for(int i = 0; i < BUFFER_SIZE; i++){
 8003c44:	2300      	movs	r3, #0
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	e009      	b.n	8003c5e <main+0x6a>
	  arrayFormer[i] = 0;
 8003c4a:	4a0c      	ldr	r2, [pc, #48]	; (8003c7c <main+0x88>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < BUFFER_SIZE; i++){
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003c64:	dbf1      	blt.n	8003c4a <main+0x56>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  generate();
 8003c66:	f7fe faab 	bl	80021c0 <generate>
	  matlab();
 8003c6a:	f000 f899 	bl	8003da0 <matlab>
	  cutOffSetup();
 8003c6e:	f7fd fdfb 	bl	8001868 <cutOffSetup>
	  generate();
 8003c72:	e7f8      	b.n	8003c66 <main+0x72>
 8003c74:	20002194 	.word	0x20002194
 8003c78:	2000174c 	.word	0x2000174c
 8003c7c:	20001c94 	.word	0x20001c94

08003c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b0a0      	sub	sp, #128	; 0x80
 8003c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c8a:	2230      	movs	r2, #48	; 0x30
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f007 fcc4 	bl	800b61c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c94:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c98:	2200      	movs	r2, #0
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ca4:	f107 030c 	add.w	r3, r7, #12
 8003ca8:	2230      	movs	r2, #48	; 0x30
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f007 fcb5 	bl	800b61c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <SystemClock_Config+0x110>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	4a35      	ldr	r2, [pc, #212]	; (8003d90 <SystemClock_Config+0x110>)
 8003cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc2:	4b33      	ldr	r3, [pc, #204]	; (8003d90 <SystemClock_Config+0x110>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	607b      	str	r3, [r7, #4]
 8003cd2:	4b30      	ldr	r3, [pc, #192]	; (8003d94 <SystemClock_Config+0x114>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2f      	ldr	r2, [pc, #188]	; (8003d94 <SystemClock_Config+0x114>)
 8003cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <SystemClock_Config+0x114>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ce6:	607b      	str	r3, [r7, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003cea:	2301      	movs	r3, #1
 8003cec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cf2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003cf8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003cfe:	2308      	movs	r3, #8
 8003d00:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 8003d02:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003d06:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d08:	2302      	movs	r3, #2
 8003d0a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003d14:	4618      	mov	r0, r3
 8003d16:	f003 fb57 	bl	80073c8 <HAL_RCC_OscConfig>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8003d20:	f000 f83a 	bl	8003d98 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003d24:	f003 fb00 	bl	8007328 <HAL_PWREx_EnableOverDrive>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8003d2e:	f000 f833 	bl	8003d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d32:	230f      	movs	r3, #15
 8003d34:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d36:	2302      	movs	r3, #2
 8003d38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003d3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003d44:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003d48:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003d4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d4e:	2105      	movs	r1, #5
 8003d50:	4618      	mov	r0, r3
 8003d52:	f003 fda9 	bl	80078a8 <HAL_RCC_ClockConfig>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8003d5c:	f000 f81c 	bl	8003d98 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003d60:	2308      	movs	r3, #8
 8003d62:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003d64:	23c0      	movs	r3, #192	; 0xc0
 8003d66:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003d68:	2304      	movs	r3, #4
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003d6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d70:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d72:	f107 030c 	add.w	r3, r7, #12
 8003d76:	4618      	mov	r0, r3
 8003d78:	f003 ff88 	bl	8007c8c <HAL_RCCEx_PeriphCLKConfig>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8003d82:	f000 f809 	bl	8003d98 <Error_Handler>
  }
}
 8003d86:	bf00      	nop
 8003d88:	3780      	adds	r7, #128	; 0x80
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40007000 	.word	0x40007000

08003d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d9c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d9e:	e7fe      	b.n	8003d9e <Error_Handler+0x6>

08003da0 <matlab>:

float i = 0;



void matlab(void){
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b087      	sub	sp, #28
 8003da4:	af00      	add	r7, sp, #0

	for (int k = 0; k < SEND_SIZE; k++){
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e007      	b.n	8003dbc <matlab+0x1c>
		USART1_SendInt((int) amplitude_temp);
 8003dac:	4bd8      	ldr	r3, [pc, #864]	; (8004110 <matlab+0x370>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fdd5 	bl	8004960 <USART1_SendInt>
	for (int k = 0; k < SEND_SIZE; k++){
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	3301      	adds	r3, #1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b3f      	cmp	r3, #63	; 0x3f
 8003dc0:	ddf4      	ble.n	8003dac <matlab+0xc>
	}
	USART1_SendChar('\r');
 8003dc2:	200d      	movs	r0, #13
 8003dc4:	f000 fdba 	bl	800493c <USART1_SendChar>
	USART1_SendChar('\n');
 8003dc8:	200a      	movs	r0, #10
 8003dca:	f000 fdb7 	bl	800493c <USART1_SendChar>

	char response[RESPONSE_SIZE];
	response[0] = '-';
 8003dce:	232d      	movs	r3, #45	; 0x2d
 8003dd0:	713b      	strb	r3, [r7, #4]
	response[1] = '\0';
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	717b      	strb	r3, [r7, #5]
	
	while (USART1_Dequeue(&c)){
 8003dd6:	e009      	b.n	8003dec <matlab+0x4c>
		temp[0] = c;
 8003dd8:	4bce      	ldr	r3, [pc, #824]	; (8004114 <matlab+0x374>)
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	4bce      	ldr	r3, [pc, #824]	; (8004118 <matlab+0x378>)
 8003dde:	701a      	strb	r2, [r3, #0]
		strncat(response,temp,1);
 8003de0:	1d3b      	adds	r3, r7, #4
 8003de2:	2201      	movs	r2, #1
 8003de4:	49cc      	ldr	r1, [pc, #816]	; (8004118 <matlab+0x378>)
 8003de6:	4618      	mov	r0, r3
 8003de8:	f008 fb49 	bl	800c47e <strncat>
	while (USART1_Dequeue(&c)){
 8003dec:	48c9      	ldr	r0, [pc, #804]	; (8004114 <matlab+0x374>)
 8003dee:	f000 fdd1 	bl	8004994 <USART1_Dequeue>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ef      	bne.n	8003dd8 <matlab+0x38>
	}

	switch (response[1]){
 8003df8:	797b      	ldrb	r3, [r7, #5]
 8003dfa:	2b57      	cmp	r3, #87	; 0x57
 8003dfc:	f200 82b2 	bhi.w	8004364 <matlab+0x5c4>
 8003e00:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <matlab+0x68>)
 8003e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e06:	bf00      	nop
 8003e08:	08004365 	.word	0x08004365
 8003e0c:	08004365 	.word	0x08004365
 8003e10:	08004365 	.word	0x08004365
 8003e14:	08004365 	.word	0x08004365
 8003e18:	08004365 	.word	0x08004365
 8003e1c:	08004365 	.word	0x08004365
 8003e20:	08004365 	.word	0x08004365
 8003e24:	08004365 	.word	0x08004365
 8003e28:	08004365 	.word	0x08004365
 8003e2c:	08004365 	.word	0x08004365
 8003e30:	08004365 	.word	0x08004365
 8003e34:	08004365 	.word	0x08004365
 8003e38:	08004365 	.word	0x08004365
 8003e3c:	08004365 	.word	0x08004365
 8003e40:	08004365 	.word	0x08004365
 8003e44:	08004365 	.word	0x08004365
 8003e48:	08004365 	.word	0x08004365
 8003e4c:	08004365 	.word	0x08004365
 8003e50:	08004365 	.word	0x08004365
 8003e54:	08004365 	.word	0x08004365
 8003e58:	08004365 	.word	0x08004365
 8003e5c:	08004365 	.word	0x08004365
 8003e60:	08004365 	.word	0x08004365
 8003e64:	08004365 	.word	0x08004365
 8003e68:	08004365 	.word	0x08004365
 8003e6c:	08004365 	.word	0x08004365
 8003e70:	08004365 	.word	0x08004365
 8003e74:	08004365 	.word	0x08004365
 8003e78:	08004365 	.word	0x08004365
 8003e7c:	08004365 	.word	0x08004365
 8003e80:	08004365 	.word	0x08004365
 8003e84:	08004365 	.word	0x08004365
 8003e88:	08004365 	.word	0x08004365
 8003e8c:	08004365 	.word	0x08004365
 8003e90:	08004365 	.word	0x08004365
 8003e94:	08004365 	.word	0x08004365
 8003e98:	08004365 	.word	0x08004365
 8003e9c:	08004365 	.word	0x08004365
 8003ea0:	08004365 	.word	0x08004365
 8003ea4:	08004365 	.word	0x08004365
 8003ea8:	08004365 	.word	0x08004365
 8003eac:	08004365 	.word	0x08004365
 8003eb0:	08004365 	.word	0x08004365
 8003eb4:	08004365 	.word	0x08004365
 8003eb8:	08004365 	.word	0x08004365
 8003ebc:	08004365 	.word	0x08004365
 8003ec0:	08004365 	.word	0x08004365
 8003ec4:	08004365 	.word	0x08004365
 8003ec8:	08004365 	.word	0x08004365
 8003ecc:	08004365 	.word	0x08004365
 8003ed0:	08004365 	.word	0x08004365
 8003ed4:	08004365 	.word	0x08004365
 8003ed8:	08004365 	.word	0x08004365
 8003edc:	08004365 	.word	0x08004365
 8003ee0:	08004365 	.word	0x08004365
 8003ee4:	08004365 	.word	0x08004365
 8003ee8:	08004365 	.word	0x08004365
 8003eec:	08004365 	.word	0x08004365
 8003ef0:	08004365 	.word	0x08004365
 8003ef4:	08004365 	.word	0x08004365
 8003ef8:	08004365 	.word	0x08004365
 8003efc:	08004365 	.word	0x08004365
 8003f00:	08004365 	.word	0x08004365
 8003f04:	08004365 	.word	0x08004365
 8003f08:	08004365 	.word	0x08004365
 8003f0c:	0800402b 	.word	0x0800402b
 8003f10:	08004365 	.word	0x08004365
 8003f14:	08004365 	.word	0x08004365
 8003f18:	08004365 	.word	0x08004365
 8003f1c:	08004365 	.word	0x08004365
 8003f20:	08003ffd 	.word	0x08003ffd
 8003f24:	08003f69 	.word	0x08003f69
 8003f28:	08004365 	.word	0x08004365
 8003f2c:	08004365 	.word	0x08004365
 8003f30:	08004365 	.word	0x08004365
 8003f34:	08004365 	.word	0x08004365
 8003f38:	0800415d 	.word	0x0800415d
 8003f3c:	08004365 	.word	0x08004365
 8003f40:	08004365 	.word	0x08004365
 8003f44:	08004365 	.word	0x08004365
 8003f48:	0800407d 	.word	0x0800407d
 8003f4c:	080041a7 	.word	0x080041a7
 8003f50:	08004365 	.word	0x08004365
 8003f54:	080040c7 	.word	0x080040c7
 8003f58:	08004365 	.word	0x08004365
 8003f5c:	080041eb 	.word	0x080041eb
 8003f60:	08004365 	.word	0x08004365
 8003f64:	08003fb3 	.word	0x08003fb3
		
		case '\0':
			break;

		case 'G' :
			if (strncmp(":on",strchr(response, ':'),3) == 0 ){
 8003f68:	1d3b      	adds	r3, r7, #4
 8003f6a:	213a      	movs	r1, #58	; 0x3a
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f008 fa79 	bl	800c464 <strchr>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2203      	movs	r2, #3
 8003f76:	4619      	mov	r1, r3
 8003f78:	4868      	ldr	r0, [pc, #416]	; (800411c <matlab+0x37c>)
 8003f7a:	f008 fa94 	bl	800c4a6 <strncmp>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d103      	bne.n	8003f8c <matlab+0x1ec>
				gen = true;
 8003f84:	4b66      	ldr	r3, [pc, #408]	; (8004120 <matlab+0x380>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	701a      	strb	r2, [r3, #0]
			}
			else if (strncmp(":off", strchr(response,':'),4) == 0){
				gen = false;
			}
			break;
 8003f8a:	e1ed      	b.n	8004368 <matlab+0x5c8>
			else if (strncmp(":off", strchr(response,':'),4) == 0){
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	213a      	movs	r1, #58	; 0x3a
 8003f90:	4618      	mov	r0, r3
 8003f92:	f008 fa67 	bl	800c464 <strchr>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2204      	movs	r2, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4861      	ldr	r0, [pc, #388]	; (8004124 <matlab+0x384>)
 8003f9e:	f008 fa82 	bl	800c4a6 <strncmp>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f040 81df 	bne.w	8004368 <matlab+0x5c8>
				gen = false;
 8003faa:	4b5d      	ldr	r3, [pc, #372]	; (8004120 <matlab+0x380>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
			break;
 8003fb0:	e1da      	b.n	8004368 <matlab+0x5c8>

		case 'W':
			if (strncmp(":Sin",strchr(response, ':'),4) == 0 ){
 8003fb2:	1d3b      	adds	r3, r7, #4
 8003fb4:	213a      	movs	r1, #58	; 0x3a
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f008 fa54 	bl	800c464 <strchr>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4859      	ldr	r0, [pc, #356]	; (8004128 <matlab+0x388>)
 8003fc4:	f008 fa6f 	bl	800c4a6 <strncmp>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <matlab+0x236>
				sinewave = true;
 8003fce:	4b57      	ldr	r3, [pc, #348]	; (800412c <matlab+0x38c>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
			}
			else if (strncmp(":Pra", strchr(response,':'),4) == 0){
				sinewave = false;
			}
			break;
 8003fd4:	e1ca      	b.n	800436c <matlab+0x5cc>
			else if (strncmp(":Pra", strchr(response,':'),4) == 0){
 8003fd6:	1d3b      	adds	r3, r7, #4
 8003fd8:	213a      	movs	r1, #58	; 0x3a
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f008 fa42 	bl	800c464 <strchr>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4852      	ldr	r0, [pc, #328]	; (8004130 <matlab+0x390>)
 8003fe8:	f008 fa5d 	bl	800c4a6 <strncmp>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f040 81bc 	bne.w	800436c <matlab+0x5cc>
				sinewave = false;
 8003ff4:	4b4d      	ldr	r3, [pc, #308]	; (800412c <matlab+0x38c>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	701a      	strb	r2, [r3, #0]
			break;
 8003ffa:	e1b7      	b.n	800436c <matlab+0x5cc>

		case 'F':
			frequency = strtol(strchr(response,'0'),&ptr,10);
 8003ffc:	1d3b      	adds	r3, r7, #4
 8003ffe:	2130      	movs	r1, #48	; 0x30
 8004000:	4618      	mov	r0, r3
 8004002:	f008 fa2f 	bl	800c464 <strchr>
 8004006:	4603      	mov	r3, r0
 8004008:	220a      	movs	r2, #10
 800400a:	494a      	ldr	r1, [pc, #296]	; (8004134 <matlab+0x394>)
 800400c:	4618      	mov	r0, r3
 800400e:	f009 f90d 	bl	800d22c <strtol>
 8004012:	4602      	mov	r2, r0
 8004014:	4b48      	ldr	r3, [pc, #288]	; (8004138 <matlab+0x398>)
 8004016:	601a      	str	r2, [r3, #0]
			if (frequency <= 0) frequency = FREQ_MIN;
 8004018:	4b47      	ldr	r3, [pc, #284]	; (8004138 <matlab+0x398>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f300 81a7 	bgt.w	8004370 <matlab+0x5d0>
 8004022:	4b45      	ldr	r3, [pc, #276]	; (8004138 <matlab+0x398>)
 8004024:	2264      	movs	r2, #100	; 0x64
 8004026:	601a      	str	r2, [r3, #0]
			break;
 8004028:	e1a2      	b.n	8004370 <matlab+0x5d0>

		case 'A':
			amplitude_temp = strtol(strchr(response,'0'),&ptr,10);
 800402a:	1d3b      	adds	r3, r7, #4
 800402c:	2130      	movs	r1, #48	; 0x30
 800402e:	4618      	mov	r0, r3
 8004030:	f008 fa18 	bl	800c464 <strchr>
 8004034:	4603      	mov	r3, r0
 8004036:	220a      	movs	r2, #10
 8004038:	493e      	ldr	r1, [pc, #248]	; (8004134 <matlab+0x394>)
 800403a:	4618      	mov	r0, r3
 800403c:	f009 f8f6 	bl	800d22c <strtol>
 8004040:	4602      	mov	r2, r0
 8004042:	4b33      	ldr	r3, [pc, #204]	; (8004110 <matlab+0x370>)
 8004044:	601a      	str	r2, [r3, #0]
			amplitude = amplitude_temp * AMP_COEF;
 8004046:	4b32      	ldr	r3, [pc, #200]	; (8004110 <matlab+0x370>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004052:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800413c <matlab+0x39c>
 8004056:	ee67 7a87 	vmul.f32	s15, s15, s14
 800405a:	4b39      	ldr	r3, [pc, #228]	; (8004140 <matlab+0x3a0>)
 800405c:	edc3 7a00 	vstr	s15, [r3]
			if (amplitude < 0) amplitude = AMP_MIN;
 8004060:	4b37      	ldr	r3, [pc, #220]	; (8004140 <matlab+0x3a0>)
 8004062:	edd3 7a00 	vldr	s15, [r3]
 8004066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	d400      	bmi.n	8004072 <matlab+0x2d2>
			break;
 8004070:	e187      	b.n	8004382 <matlab+0x5e2>
			if (amplitude < 0) amplitude = AMP_MIN;
 8004072:	4b33      	ldr	r3, [pc, #204]	; (8004140 <matlab+0x3a0>)
 8004074:	f04f 0200 	mov.w	r2, #0
 8004078:	601a      	str	r2, [r3, #0]
			break;
 800407a:	e182      	b.n	8004382 <matlab+0x5e2>

		case 'P':
			if (strncmp(":low",strchr(response, ':'),4) == 0 ){
 800407c:	1d3b      	adds	r3, r7, #4
 800407e:	213a      	movs	r1, #58	; 0x3a
 8004080:	4618      	mov	r0, r3
 8004082:	f008 f9ef 	bl	800c464 <strchr>
 8004086:	4603      	mov	r3, r0
 8004088:	2204      	movs	r2, #4
 800408a:	4619      	mov	r1, r3
 800408c:	482d      	ldr	r0, [pc, #180]	; (8004144 <matlab+0x3a4>)
 800408e:	f008 fa0a 	bl	800c4a6 <strncmp>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <matlab+0x300>
				lowpass = true;
 8004098:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <matlab+0x3a8>)
 800409a:	2201      	movs	r2, #1
 800409c:	701a      	strb	r2, [r3, #0]
			}
			else if (strncmp(":high", strchr(response,':'),5) == 0){
				lowpass = false;
			}
			break;
 800409e:	e169      	b.n	8004374 <matlab+0x5d4>
			else if (strncmp(":high", strchr(response,':'),5) == 0){
 80040a0:	1d3b      	adds	r3, r7, #4
 80040a2:	213a      	movs	r1, #58	; 0x3a
 80040a4:	4618      	mov	r0, r3
 80040a6:	f008 f9dd 	bl	800c464 <strchr>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2205      	movs	r2, #5
 80040ae:	4619      	mov	r1, r3
 80040b0:	4826      	ldr	r0, [pc, #152]	; (800414c <matlab+0x3ac>)
 80040b2:	f008 f9f8 	bl	800c4a6 <strncmp>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f040 815b 	bne.w	8004374 <matlab+0x5d4>
				lowpass = false;
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <matlab+0x3a8>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
			break;
 80040c4:	e156      	b.n	8004374 <matlab+0x5d4>

		case 'S':
			if (strncmp(":Sig",strchr(response, ':'),4) == 0 ){
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	213a      	movs	r1, #58	; 0x3a
 80040ca:	4618      	mov	r0, r3
 80040cc:	f008 f9ca 	bl	800c464 <strchr>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2204      	movs	r2, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	481e      	ldr	r0, [pc, #120]	; (8004150 <matlab+0x3b0>)
 80040d8:	f008 f9e5 	bl	800c4a6 <strncmp>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d103      	bne.n	80040ea <matlab+0x34a>
				signal_q = true;
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <matlab+0x3b4>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
			}
			else if (strncmp(":Spec", strchr(response,':'),5) == 0){
				signal_q = false;
			}
			break;
 80040e8:	e146      	b.n	8004378 <matlab+0x5d8>
			else if (strncmp(":Spec", strchr(response,':'),5) == 0){
 80040ea:	1d3b      	adds	r3, r7, #4
 80040ec:	213a      	movs	r1, #58	; 0x3a
 80040ee:	4618      	mov	r0, r3
 80040f0:	f008 f9b8 	bl	800c464 <strchr>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2205      	movs	r2, #5
 80040f8:	4619      	mov	r1, r3
 80040fa:	4817      	ldr	r0, [pc, #92]	; (8004158 <matlab+0x3b8>)
 80040fc:	f008 f9d3 	bl	800c4a6 <strncmp>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 8138 	bne.w	8004378 <matlab+0x5d8>
				signal_q = false;
 8004108:	4b12      	ldr	r3, [pc, #72]	; (8004154 <matlab+0x3b4>)
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
			break;
 800410e:	e133      	b.n	8004378 <matlab+0x5d8>
 8004110:	20000950 	.word	0x20000950
 8004114:	200035a4 	.word	0x200035a4
 8004118:	20000948 	.word	0x20000948
 800411c:	0801090c 	.word	0x0801090c
 8004120:	2000094a 	.word	0x2000094a
 8004124:	08010910 	.word	0x08010910
 8004128:	08010918 	.word	0x08010918
 800412c:	20000b7c 	.word	0x20000b7c
 8004130:	08010920 	.word	0x08010920
 8004134:	200035a0 	.word	0x200035a0
 8004138:	20000958 	.word	0x20000958
 800413c:	3a000801 	.word	0x3a000801
 8004140:	20000954 	.word	0x20000954
 8004144:	08010928 	.word	0x08010928
 8004148:	20000b7d 	.word	0x20000b7d
 800414c:	08010930 	.word	0x08010930
 8004150:	08010938 	.word	0x08010938
 8004154:	2000094b 	.word	0x2000094b
 8004158:	08010940 	.word	0x08010940

		case 'L':
			if (strncmp(":Yes",strchr(response, ':'),4) == 0 ){
 800415c:	1d3b      	adds	r3, r7, #4
 800415e:	213a      	movs	r1, #58	; 0x3a
 8004160:	4618      	mov	r0, r3
 8004162:	f008 f97f 	bl	800c464 <strchr>
 8004166:	4603      	mov	r3, r0
 8004168:	2204      	movs	r2, #4
 800416a:	4619      	mov	r1, r3
 800416c:	4898      	ldr	r0, [pc, #608]	; (80043d0 <matlab+0x630>)
 800416e:	f008 f99a 	bl	800c4a6 <strncmp>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d103      	bne.n	8004180 <matlab+0x3e0>
				filtered = true;
 8004178:	4b96      	ldr	r3, [pc, #600]	; (80043d4 <matlab+0x634>)
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
			}
			else if (strncmp(":No", strchr(response,':'),3) == 0){
				filtered = false;
			}
			break;
 800417e:	e0fd      	b.n	800437c <matlab+0x5dc>
			else if (strncmp(":No", strchr(response,':'),3) == 0){
 8004180:	1d3b      	adds	r3, r7, #4
 8004182:	213a      	movs	r1, #58	; 0x3a
 8004184:	4618      	mov	r0, r3
 8004186:	f008 f96d 	bl	800c464 <strchr>
 800418a:	4603      	mov	r3, r0
 800418c:	2203      	movs	r2, #3
 800418e:	4619      	mov	r1, r3
 8004190:	4891      	ldr	r0, [pc, #580]	; (80043d8 <matlab+0x638>)
 8004192:	f008 f988 	bl	800c4a6 <strncmp>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 80ef 	bne.w	800437c <matlab+0x5dc>
				filtered = false;
 800419e:	4b8d      	ldr	r3, [pc, #564]	; (80043d4 <matlab+0x634>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]
			break;
 80041a4:	e0ea      	b.n	800437c <matlab+0x5dc>

		case 'Q':
			gen = GEN_S;
 80041a6:	4b8d      	ldr	r3, [pc, #564]	; (80043dc <matlab+0x63c>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	701a      	strb	r2, [r3, #0]
			sinewave = SINE_S;
 80041ac:	4b8c      	ldr	r3, [pc, #560]	; (80043e0 <matlab+0x640>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
			signal_q = SIG_S;
 80041b2:	4b8c      	ldr	r3, [pc, #560]	; (80043e4 <matlab+0x644>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
			filtered= FIL_S;
 80041b8:	4b86      	ldr	r3, [pc, #536]	; (80043d4 <matlab+0x634>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	701a      	strb	r2, [r3, #0]
			lowpass = LOWPASS_S;
 80041be:	4b8a      	ldr	r3, [pc, #552]	; (80043e8 <matlab+0x648>)
 80041c0:	2201      	movs	r2, #1
 80041c2:	701a      	strb	r2, [r3, #0]
			amplitude_temp = AMP_TEMP;
 80041c4:	4b89      	ldr	r3, [pc, #548]	; (80043ec <matlab+0x64c>)
 80041c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ca:	601a      	str	r2, [r3, #0]
			amplitude = AMP_S;
 80041cc:	4b88      	ldr	r3, [pc, #544]	; (80043f0 <matlab+0x650>)
 80041ce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80041d2:	601a      	str	r2, [r3, #0]
			frequency = FREQ_S;
 80041d4:	4b87      	ldr	r3, [pc, #540]	; (80043f4 <matlab+0x654>)
 80041d6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041da:	601a      	str	r2, [r3, #0]
			cutOffFreq = FGFREQ_S;
 80041dc:	4a86      	ldr	r2, [pc, #536]	; (80043f8 <matlab+0x658>)
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	4c86      	ldr	r4, [pc, #536]	; (80043fc <matlab+0x65c>)
 80041e4:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 80041e8:	e0cb      	b.n	8004382 <matlab+0x5e2>

		case 'U':
			if (strncmp(":0.1",strchr(response, ':'),4) == 0 ){
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	213a      	movs	r1, #58	; 0x3a
 80041ee:	4618      	mov	r0, r3
 80041f0:	f008 f938 	bl	800c464 <strchr>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2204      	movs	r2, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4881      	ldr	r0, [pc, #516]	; (8004400 <matlab+0x660>)
 80041fc:	f008 f953 	bl	800c4a6 <strncmp>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <matlab+0x474>
				cutOffFreq = 0.1;
 8004206:	4a7c      	ldr	r2, [pc, #496]	; (80043f8 <matlab+0x658>)
 8004208:	a461      	add	r4, pc, #388	; (adr r4, 8004390 <matlab+0x5f0>)
 800420a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800420e:	e9c2 3400 	strd	r3, r4, [r2]
				cutOffFreq = 0.8;
			}
			else if (strncmp(":0.9", strchr(response,':'),4) == 0){
				cutOffFreq = 0.9;
			}
			break;
 8004212:	e0b5      	b.n	8004380 <matlab+0x5e0>
			else if (strncmp(":0.2", strchr(response,':'),4) == 0){
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	213a      	movs	r1, #58	; 0x3a
 8004218:	4618      	mov	r0, r3
 800421a:	f008 f923 	bl	800c464 <strchr>
 800421e:	4603      	mov	r3, r0
 8004220:	2204      	movs	r2, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4877      	ldr	r0, [pc, #476]	; (8004404 <matlab+0x664>)
 8004226:	f008 f93e 	bl	800c4a6 <strncmp>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d106      	bne.n	800423e <matlab+0x49e>
				cutOffFreq = 0.2;
 8004230:	4a71      	ldr	r2, [pc, #452]	; (80043f8 <matlab+0x658>)
 8004232:	a459      	add	r4, pc, #356	; (adr r4, 8004398 <matlab+0x5f8>)
 8004234:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004238:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 800423c:	e0a0      	b.n	8004380 <matlab+0x5e0>
			else if (strncmp(":0.3", strchr(response,':'),4) == 0){
 800423e:	1d3b      	adds	r3, r7, #4
 8004240:	213a      	movs	r1, #58	; 0x3a
 8004242:	4618      	mov	r0, r3
 8004244:	f008 f90e 	bl	800c464 <strchr>
 8004248:	4603      	mov	r3, r0
 800424a:	2204      	movs	r2, #4
 800424c:	4619      	mov	r1, r3
 800424e:	486e      	ldr	r0, [pc, #440]	; (8004408 <matlab+0x668>)
 8004250:	f008 f929 	bl	800c4a6 <strncmp>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <matlab+0x4c8>
				cutOffFreq = 0.3;
 800425a:	4a67      	ldr	r2, [pc, #412]	; (80043f8 <matlab+0x658>)
 800425c:	a450      	add	r4, pc, #320	; (adr r4, 80043a0 <matlab+0x600>)
 800425e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004262:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8004266:	e08b      	b.n	8004380 <matlab+0x5e0>
			else if (strncmp(":0.4", strchr(response,':'),4) == 0){
 8004268:	1d3b      	adds	r3, r7, #4
 800426a:	213a      	movs	r1, #58	; 0x3a
 800426c:	4618      	mov	r0, r3
 800426e:	f008 f8f9 	bl	800c464 <strchr>
 8004272:	4603      	mov	r3, r0
 8004274:	2204      	movs	r2, #4
 8004276:	4619      	mov	r1, r3
 8004278:	4864      	ldr	r0, [pc, #400]	; (800440c <matlab+0x66c>)
 800427a:	f008 f914 	bl	800c4a6 <strncmp>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <matlab+0x4f2>
				cutOffFreq = 0.4;
 8004284:	4a5c      	ldr	r2, [pc, #368]	; (80043f8 <matlab+0x658>)
 8004286:	a448      	add	r4, pc, #288	; (adr r4, 80043a8 <matlab+0x608>)
 8004288:	e9d4 3400 	ldrd	r3, r4, [r4]
 800428c:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8004290:	e076      	b.n	8004380 <matlab+0x5e0>
			else if (strncmp(":0.5", strchr(response,':'),4) == 0){
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	213a      	movs	r1, #58	; 0x3a
 8004296:	4618      	mov	r0, r3
 8004298:	f008 f8e4 	bl	800c464 <strchr>
 800429c:	4603      	mov	r3, r0
 800429e:	2204      	movs	r2, #4
 80042a0:	4619      	mov	r1, r3
 80042a2:	485b      	ldr	r0, [pc, #364]	; (8004410 <matlab+0x670>)
 80042a4:	f008 f8ff 	bl	800c4a6 <strncmp>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <matlab+0x51c>
				cutOffFreq = 0.5;
 80042ae:	4a52      	ldr	r2, [pc, #328]	; (80043f8 <matlab+0x658>)
 80042b0:	f04f 0300 	mov.w	r3, #0
 80042b4:	4c51      	ldr	r4, [pc, #324]	; (80043fc <matlab+0x65c>)
 80042b6:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 80042ba:	e061      	b.n	8004380 <matlab+0x5e0>
			else if (strncmp(":0.6", strchr(response,':'),4) == 0){
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	213a      	movs	r1, #58	; 0x3a
 80042c0:	4618      	mov	r0, r3
 80042c2:	f008 f8cf 	bl	800c464 <strchr>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2204      	movs	r2, #4
 80042ca:	4619      	mov	r1, r3
 80042cc:	4851      	ldr	r0, [pc, #324]	; (8004414 <matlab+0x674>)
 80042ce:	f008 f8ea 	bl	800c4a6 <strncmp>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d106      	bne.n	80042e6 <matlab+0x546>
				cutOffFreq = 0.6;
 80042d8:	4a47      	ldr	r2, [pc, #284]	; (80043f8 <matlab+0x658>)
 80042da:	a435      	add	r4, pc, #212	; (adr r4, 80043b0 <matlab+0x610>)
 80042dc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80042e0:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 80042e4:	e04c      	b.n	8004380 <matlab+0x5e0>
			else if (strncmp(":0.7", strchr(response,':'),4) == 0){
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	213a      	movs	r1, #58	; 0x3a
 80042ea:	4618      	mov	r0, r3
 80042ec:	f008 f8ba 	bl	800c464 <strchr>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2204      	movs	r2, #4
 80042f4:	4619      	mov	r1, r3
 80042f6:	4848      	ldr	r0, [pc, #288]	; (8004418 <matlab+0x678>)
 80042f8:	f008 f8d5 	bl	800c4a6 <strncmp>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <matlab+0x570>
				cutOffFreq = 0.7;
 8004302:	4a3d      	ldr	r2, [pc, #244]	; (80043f8 <matlab+0x658>)
 8004304:	a42c      	add	r4, pc, #176	; (adr r4, 80043b8 <matlab+0x618>)
 8004306:	e9d4 3400 	ldrd	r3, r4, [r4]
 800430a:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 800430e:	e037      	b.n	8004380 <matlab+0x5e0>
			else if (strncmp(":0.8", strchr(response,':'),4) == 0){
 8004310:	1d3b      	adds	r3, r7, #4
 8004312:	213a      	movs	r1, #58	; 0x3a
 8004314:	4618      	mov	r0, r3
 8004316:	f008 f8a5 	bl	800c464 <strchr>
 800431a:	4603      	mov	r3, r0
 800431c:	2204      	movs	r2, #4
 800431e:	4619      	mov	r1, r3
 8004320:	483e      	ldr	r0, [pc, #248]	; (800441c <matlab+0x67c>)
 8004322:	f008 f8c0 	bl	800c4a6 <strncmp>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <matlab+0x59a>
				cutOffFreq = 0.8;
 800432c:	4a32      	ldr	r2, [pc, #200]	; (80043f8 <matlab+0x658>)
 800432e:	a424      	add	r4, pc, #144	; (adr r4, 80043c0 <matlab+0x620>)
 8004330:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004334:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8004338:	e022      	b.n	8004380 <matlab+0x5e0>
			else if (strncmp(":0.9", strchr(response,':'),4) == 0){
 800433a:	1d3b      	adds	r3, r7, #4
 800433c:	213a      	movs	r1, #58	; 0x3a
 800433e:	4618      	mov	r0, r3
 8004340:	f008 f890 	bl	800c464 <strchr>
 8004344:	4603      	mov	r3, r0
 8004346:	2204      	movs	r2, #4
 8004348:	4619      	mov	r1, r3
 800434a:	4835      	ldr	r0, [pc, #212]	; (8004420 <matlab+0x680>)
 800434c:	f008 f8ab 	bl	800c4a6 <strncmp>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d114      	bne.n	8004380 <matlab+0x5e0>
				cutOffFreq = 0.9;
 8004356:	4a28      	ldr	r2, [pc, #160]	; (80043f8 <matlab+0x658>)
 8004358:	a41b      	add	r4, pc, #108	; (adr r4, 80043c8 <matlab+0x628>)
 800435a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800435e:	e9c2 3400 	strd	r3, r4, [r2]
			break;
 8004362:	e00d      	b.n	8004380 <matlab+0x5e0>

		default:
			break;
 8004364:	bf00      	nop
 8004366:	e00c      	b.n	8004382 <matlab+0x5e2>
			break;
 8004368:	bf00      	nop
 800436a:	e00a      	b.n	8004382 <matlab+0x5e2>
			break;
 800436c:	bf00      	nop
 800436e:	e008      	b.n	8004382 <matlab+0x5e2>
			break;
 8004370:	bf00      	nop
 8004372:	e006      	b.n	8004382 <matlab+0x5e2>
			break;
 8004374:	bf00      	nop
 8004376:	e004      	b.n	8004382 <matlab+0x5e2>
			break;
 8004378:	bf00      	nop
 800437a:	e002      	b.n	8004382 <matlab+0x5e2>
			break;
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <matlab+0x5e2>
			break;
 8004380:	bf00      	nop
	}
}
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bd90      	pop	{r4, r7, pc}
 800438a:	bf00      	nop
 800438c:	f3af 8000 	nop.w
 8004390:	9999999a 	.word	0x9999999a
 8004394:	3fb99999 	.word	0x3fb99999
 8004398:	9999999a 	.word	0x9999999a
 800439c:	3fc99999 	.word	0x3fc99999
 80043a0:	33333333 	.word	0x33333333
 80043a4:	3fd33333 	.word	0x3fd33333
 80043a8:	9999999a 	.word	0x9999999a
 80043ac:	3fd99999 	.word	0x3fd99999
 80043b0:	33333333 	.word	0x33333333
 80043b4:	3fe33333 	.word	0x3fe33333
 80043b8:	66666666 	.word	0x66666666
 80043bc:	3fe66666 	.word	0x3fe66666
 80043c0:	9999999a 	.word	0x9999999a
 80043c4:	3fe99999 	.word	0x3fe99999
 80043c8:	cccccccd 	.word	0xcccccccd
 80043cc:	3feccccc 	.word	0x3feccccc
 80043d0:	08010948 	.word	0x08010948
 80043d4:	2000094c 	.word	0x2000094c
 80043d8:	08010950 	.word	0x08010950
 80043dc:	2000094a 	.word	0x2000094a
 80043e0:	20000b7c 	.word	0x20000b7c
 80043e4:	2000094b 	.word	0x2000094b
 80043e8:	20000b7d 	.word	0x20000b7d
 80043ec:	20000950 	.word	0x20000950
 80043f0:	20000954 	.word	0x20000954
 80043f4:	20000958 	.word	0x20000958
 80043f8:	20000960 	.word	0x20000960
 80043fc:	3fe00000 	.word	0x3fe00000
 8004400:	08010954 	.word	0x08010954
 8004404:	0801095c 	.word	0x0801095c
 8004408:	08010964 	.word	0x08010964
 800440c:	0801096c 	.word	0x0801096c
 8004410:	08010974 	.word	0x08010974
 8004414:	0801097c 	.word	0x0801097c
 8004418:	08010984 	.word	0x08010984
 800441c:	0801098c 	.word	0x0801098c
 8004420:	08010994 	.word	0x08010994

08004424 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004428:	4b17      	ldr	r3, [pc, #92]	; (8004488 <MX_SPI1_Init+0x64>)
 800442a:	4a18      	ldr	r2, [pc, #96]	; (800448c <MX_SPI1_Init+0x68>)
 800442c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800442e:	4b16      	ldr	r3, [pc, #88]	; (8004488 <MX_SPI1_Init+0x64>)
 8004430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004434:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <MX_SPI1_Init+0x64>)
 8004438:	2200      	movs	r2, #0
 800443a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <MX_SPI1_Init+0x64>)
 800443e:	2200      	movs	r2, #0
 8004440:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <MX_SPI1_Init+0x64>)
 8004444:	2200      	movs	r2, #0
 8004446:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <MX_SPI1_Init+0x64>)
 800444a:	2200      	movs	r2, #0
 800444c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <MX_SPI1_Init+0x64>)
 8004450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004454:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <MX_SPI1_Init+0x64>)
 8004458:	2200      	movs	r2, #0
 800445a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <MX_SPI1_Init+0x64>)
 800445e:	2200      	movs	r2, #0
 8004460:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <MX_SPI1_Init+0x64>)
 8004464:	2200      	movs	r2, #0
 8004466:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <MX_SPI1_Init+0x64>)
 800446a:	2200      	movs	r2, #0
 800446c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <MX_SPI1_Init+0x64>)
 8004470:	220a      	movs	r2, #10
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004474:	4804      	ldr	r0, [pc, #16]	; (8004488 <MX_SPI1_Init+0x64>)
 8004476:	f003 fe46 	bl	8008106 <HAL_SPI_Init>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004480:	f7ff fc8a 	bl	8003d98 <Error_Handler>
  }

}
 8004484:	bf00      	nop
 8004486:	bd80      	pop	{r7, pc}
 8004488:	200035a8 	.word	0x200035a8
 800448c:	40013000 	.word	0x40013000

08004490 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a28      	ldr	r2, [pc, #160]	; (8004550 <HAL_SPI_MspInit+0xc0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d149      	bne.n	8004546 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	4b27      	ldr	r3, [pc, #156]	; (8004554 <HAL_SPI_MspInit+0xc4>)
 80044b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ba:	4a26      	ldr	r2, [pc, #152]	; (8004554 <HAL_SPI_MspInit+0xc4>)
 80044bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80044c0:	6453      	str	r3, [r2, #68]	; 0x44
 80044c2:	4b24      	ldr	r3, [pc, #144]	; (8004554 <HAL_SPI_MspInit+0xc4>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	4b20      	ldr	r3, [pc, #128]	; (8004554 <HAL_SPI_MspInit+0xc4>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	4a1f      	ldr	r2, [pc, #124]	; (8004554 <HAL_SPI_MspInit+0xc4>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	6313      	str	r3, [r2, #48]	; 0x30
 80044de:	4b1d      	ldr	r3, [pc, #116]	; (8004554 <HAL_SPI_MspInit+0xc4>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	4b19      	ldr	r3, [pc, #100]	; (8004554 <HAL_SPI_MspInit+0xc4>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	4a18      	ldr	r2, [pc, #96]	; (8004554 <HAL_SPI_MspInit+0xc4>)
 80044f4:	f043 0302 	orr.w	r3, r3, #2
 80044f8:	6313      	str	r3, [r2, #48]	; 0x30
 80044fa:	4b16      	ldr	r3, [pc, #88]	; (8004554 <HAL_SPI_MspInit+0xc4>)
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004506:	2380      	movs	r3, #128	; 0x80
 8004508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450a:	2302      	movs	r3, #2
 800450c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004512:	2303      	movs	r3, #3
 8004514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004516:	2305      	movs	r3, #5
 8004518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800451a:	f107 0314 	add.w	r3, r7, #20
 800451e:	4619      	mov	r1, r3
 8004520:	480d      	ldr	r0, [pc, #52]	; (8004558 <HAL_SPI_MspInit+0xc8>)
 8004522:	f002 f95d 	bl	80067e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004526:	2318      	movs	r3, #24
 8004528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800452a:	2302      	movs	r3, #2
 800452c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452e:	2300      	movs	r3, #0
 8004530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004532:	2303      	movs	r3, #3
 8004534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004536:	2305      	movs	r3, #5
 8004538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800453a:	f107 0314 	add.w	r3, r7, #20
 800453e:	4619      	mov	r1, r3
 8004540:	4806      	ldr	r0, [pc, #24]	; (800455c <HAL_SPI_MspInit+0xcc>)
 8004542:	f002 f94d 	bl	80067e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004546:	bf00      	nop
 8004548:	3728      	adds	r7, #40	; 0x28
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40013000 	.word	0x40013000
 8004554:	40023800 	.word	0x40023800
 8004558:	40020000 	.word	0x40020000
 800455c:	40020400 	.word	0x40020400

08004560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <HAL_MspInit+0x4c>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <HAL_MspInit+0x4c>)
 8004570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004574:	6453      	str	r3, [r2, #68]	; 0x44
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <HAL_MspInit+0x4c>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	603b      	str	r3, [r7, #0]
 8004586:	4b09      	ldr	r3, [pc, #36]	; (80045ac <HAL_MspInit+0x4c>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	4a08      	ldr	r2, [pc, #32]	; (80045ac <HAL_MspInit+0x4c>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004590:	6413      	str	r3, [r2, #64]	; 0x40
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <HAL_MspInit+0x4c>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800

080045b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045b4:	e7fe      	b.n	80045b4 <NMI_Handler+0x4>

080045b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045b6:	b480      	push	{r7}
 80045b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045ba:	e7fe      	b.n	80045ba <HardFault_Handler+0x4>

080045bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045c0:	e7fe      	b.n	80045c0 <MemManage_Handler+0x4>

080045c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045c2:	b480      	push	{r7}
 80045c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045c6:	e7fe      	b.n	80045c6 <BusFault_Handler+0x4>

080045c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045cc:	e7fe      	b.n	80045cc <UsageFault_Handler+0x4>

080045ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045ce:	b480      	push	{r7}
 80045d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045d2:	bf00      	nop
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045e0:	bf00      	nop
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045ea:	b480      	push	{r7}
 80045ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045fc:	f005 f8d4 	bl	80097a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004600:	bf00      	nop
 8004602:	bd80      	pop	{r7, pc}

08004604 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8004608:	4802      	ldr	r0, [pc, #8]	; (8004614 <DMA1_Stream6_IRQHandler+0x10>)
 800460a:	f001 fbf5 	bl	8005df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	200034c8 	.word	0x200034c8

08004618 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800461c:	4803      	ldr	r0, [pc, #12]	; (800462c <USART1_IRQHandler+0x14>)
 800461e:	f004 f975 	bl	800890c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 8004622:	4802      	ldr	r0, [pc, #8]	; (800462c <USART1_IRQHandler+0x14>)
 8004624:	f000 f948 	bl	80048b8 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 8004628:	bf00      	nop
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20003650 	.word	0x20003650

08004630 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8004634:	4803      	ldr	r0, [pc, #12]	; (8004644 <TIM6_DAC_IRQHandler+0x14>)
 8004636:	f001 f8f4 	bl	8005822 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800463a:	4803      	ldr	r0, [pc, #12]	; (8004648 <TIM6_DAC_IRQHandler+0x18>)
 800463c:	f003 fe16 	bl	800826c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}
 8004644:	200034b4 	.word	0x200034b4
 8004648:	20003600 	.word	0x20003600

0800464c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004650:	4802      	ldr	r0, [pc, #8]	; (800465c <DMA2_Stream0_IRQHandler+0x10>)
 8004652:	f001 fbd1 	bl	8005df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	200016ec 	.word	0x200016ec

08004660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <_sbrk+0x5c>)
 800466a:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <_sbrk+0x60>)
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004674:	4b13      	ldr	r3, [pc, #76]	; (80046c4 <_sbrk+0x64>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d102      	bne.n	8004682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800467c:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <_sbrk+0x64>)
 800467e:	4a12      	ldr	r2, [pc, #72]	; (80046c8 <_sbrk+0x68>)
 8004680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004682:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <_sbrk+0x64>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	429a      	cmp	r2, r3
 800468e:	d207      	bcs.n	80046a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004690:	f006 ff66 	bl	800b560 <__errno>
 8004694:	4602      	mov	r2, r0
 8004696:	230c      	movs	r3, #12
 8004698:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800469a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800469e:	e009      	b.n	80046b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <_sbrk+0x64>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046a6:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <_sbrk+0x64>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	4a05      	ldr	r2, [pc, #20]	; (80046c4 <_sbrk+0x64>)
 80046b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046b2:	68fb      	ldr	r3, [r7, #12]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3718      	adds	r7, #24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	20030000 	.word	0x20030000
 80046c0:	00000400 	.word	0x00000400
 80046c4:	20000b80 	.word	0x20000b80
 80046c8:	200036c8 	.word	0x200036c8

080046cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046cc:	b480      	push	{r7}
 80046ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80046d0:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <SystemInit+0x28>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d6:	4a07      	ldr	r2, [pc, #28]	; (80046f4 <SystemInit+0x28>)
 80046d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046e0:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <SystemInit+0x28>)
 80046e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046e6:	609a      	str	r2, [r3, #8]
#endif
}
 80046e8:	bf00      	nop
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	e000ed00 	.word	0xe000ed00

080046f8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046fe:	463b      	mov	r3, r7
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8004706:	4b14      	ldr	r3, [pc, #80]	; (8004758 <MX_TIM6_Init+0x60>)
 8004708:	4a14      	ldr	r2, [pc, #80]	; (800475c <MX_TIM6_Init+0x64>)
 800470a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 800470c:	4b12      	ldr	r3, [pc, #72]	; (8004758 <MX_TIM6_Init+0x60>)
 800470e:	2259      	movs	r2, #89	; 0x59
 8004710:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <MX_TIM6_Init+0x60>)
 8004714:	2200      	movs	r2, #0
 8004716:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8004718:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <MX_TIM6_Init+0x60>)
 800471a:	2263      	movs	r2, #99	; 0x63
 800471c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800471e:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <MX_TIM6_Init+0x60>)
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004724:	480c      	ldr	r0, [pc, #48]	; (8004758 <MX_TIM6_Init+0x60>)
 8004726:	f003 fd52 	bl	80081ce <HAL_TIM_Base_Init>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8004730:	f7ff fb32 	bl	8003d98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004734:	2320      	movs	r3, #32
 8004736:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004738:	2300      	movs	r3, #0
 800473a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800473c:	463b      	mov	r3, r7
 800473e:	4619      	mov	r1, r3
 8004740:	4805      	ldr	r0, [pc, #20]	; (8004758 <MX_TIM6_Init+0x60>)
 8004742:	f003 ff6d 	bl	8008620 <HAL_TIMEx_MasterConfigSynchronization>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 800474c:	f7ff fb24 	bl	8003d98 <Error_Handler>
  }

}
 8004750:	bf00      	nop
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20003600 	.word	0x20003600
 800475c:	40001000 	.word	0x40001000

08004760 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a0e      	ldr	r2, [pc, #56]	; (80047a8 <HAL_TIM_Base_MspInit+0x48>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d115      	bne.n	800479e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004772:	2300      	movs	r3, #0
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <HAL_TIM_Base_MspInit+0x4c>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	4a0c      	ldr	r2, [pc, #48]	; (80047ac <HAL_TIM_Base_MspInit+0x4c>)
 800477c:	f043 0310 	orr.w	r3, r3, #16
 8004780:	6413      	str	r3, [r2, #64]	; 0x40
 8004782:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <HAL_TIM_Base_MspInit+0x4c>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800478e:	2200      	movs	r2, #0
 8004790:	2100      	movs	r1, #0
 8004792:	2036      	movs	r0, #54	; 0x36
 8004794:	f000 feef 	bl	8005576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004798:	2036      	movs	r0, #54	; 0x36
 800479a:	f000 ff08 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40001000 	.word	0x40001000
 80047ac:	40023800 	.word	0x40023800

080047b0 <start_timer>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void start_timer() {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 80047b4:	4802      	ldr	r0, [pc, #8]	; (80047c0 <start_timer+0x10>)
 80047b6:	f003 fd35 	bl	8008224 <HAL_TIM_Base_Start_IT>
}
 80047ba:	bf00      	nop
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20003600 	.word	0x20003600

080047c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <MX_USART1_UART_Init+0x4c>)
 80047ca:	4a12      	ldr	r2, [pc, #72]	; (8004814 <MX_USART1_UART_Init+0x50>)
 80047cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80047ce:	4b10      	ldr	r3, [pc, #64]	; (8004810 <MX_USART1_UART_Init+0x4c>)
 80047d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80047d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80047d6:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <MX_USART1_UART_Init+0x4c>)
 80047d8:	2200      	movs	r2, #0
 80047da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80047dc:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <MX_USART1_UART_Init+0x4c>)
 80047de:	2200      	movs	r2, #0
 80047e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80047e2:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <MX_USART1_UART_Init+0x4c>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <MX_USART1_UART_Init+0x4c>)
 80047ea:	220c      	movs	r2, #12
 80047ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047ee:	4b08      	ldr	r3, [pc, #32]	; (8004810 <MX_USART1_UART_Init+0x4c>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <MX_USART1_UART_Init+0x4c>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80047fa:	4805      	ldr	r0, [pc, #20]	; (8004810 <MX_USART1_UART_Init+0x4c>)
 80047fc:	f003 ffa0 	bl	8008740 <HAL_UART_Init>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004806:	f7ff fac7 	bl	8003d98 <Error_Handler>
  }

}
 800480a:	bf00      	nop
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	20003650 	.word	0x20003650
 8004814:	40011000 	.word	0x40011000

08004818 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004820:	f107 0314 	add.w	r3, r7, #20
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a1d      	ldr	r2, [pc, #116]	; (80048ac <HAL_UART_MspInit+0x94>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d134      	bne.n	80048a4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	4b1c      	ldr	r3, [pc, #112]	; (80048b0 <HAL_UART_MspInit+0x98>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	4a1b      	ldr	r2, [pc, #108]	; (80048b0 <HAL_UART_MspInit+0x98>)
 8004844:	f043 0310 	orr.w	r3, r3, #16
 8004848:	6453      	str	r3, [r2, #68]	; 0x44
 800484a:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_UART_MspInit+0x98>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <HAL_UART_MspInit+0x98>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <HAL_UART_MspInit+0x98>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	6313      	str	r3, [r2, #48]	; 0x30
 8004866:	4b12      	ldr	r3, [pc, #72]	; (80048b0 <HAL_UART_MspInit+0x98>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004872:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004878:	2302      	movs	r3, #2
 800487a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487c:	2300      	movs	r3, #0
 800487e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004880:	2303      	movs	r3, #3
 8004882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004884:	2307      	movs	r3, #7
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004888:	f107 0314 	add.w	r3, r7, #20
 800488c:	4619      	mov	r1, r3
 800488e:	4809      	ldr	r0, [pc, #36]	; (80048b4 <HAL_UART_MspInit+0x9c>)
 8004890:	f001 ffa6 	bl	80067e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004894:	2200      	movs	r2, #0
 8004896:	2100      	movs	r1, #0
 8004898:	2025      	movs	r0, #37	; 0x25
 800489a:	f000 fe6c 	bl	8005576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800489e:	2025      	movs	r0, #37	; 0x25
 80048a0:	f000 fe85 	bl	80055ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80048a4:	bf00      	nop
 80048a6:	3728      	adds	r7, #40	; 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	40011000 	.word	0x40011000
 80048b0:	40023800 	.word	0x40023800
 80048b4:	40020000 	.word	0x40020000

080048b8 <USER_UART_IRQHandler>:

/* USER CODE BEGIN 1 */
char RX_BUFFER[BUFSIZE];
int RX_BUFFER_HEAD, RX_BUFFER_TAIL;

void  USER_UART_IRQHandler(UART_HandleTypeDef *huart) {
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
	if( huart ->Instance  ==  USART1 ) {
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a17      	ldr	r2, [pc, #92]	; (8004924 <USER_UART_IRQHandler+0x6c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d125      	bne.n	8004916 <USER_UART_IRQHandler+0x5e>
		rx_data = __HAL_UART_FLUSH_DRREGISTER( huart );
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	4b15      	ldr	r3, [pc, #84]	; (8004928 <USER_UART_IRQHandler+0x70>)
 80048d4:	701a      	strb	r2, [r3, #0]

		static  char  rx_head;
		rx_head = RX_BUFFER_HEAD + 1;
 80048d6:	4b15      	ldr	r3, [pc, #84]	; (800492c <USER_UART_IRQHandler+0x74>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	3301      	adds	r3, #1
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	4b13      	ldr	r3, [pc, #76]	; (8004930 <USER_UART_IRQHandler+0x78>)
 80048e2:	701a      	strb	r2, [r3, #0]
		if( rx_head  ==  BUFSIZE ) {
 80048e4:	4b12      	ldr	r3, [pc, #72]	; (8004930 <USER_UART_IRQHandler+0x78>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	2b10      	cmp	r3, #16
 80048ea:	d102      	bne.n	80048f2 <USER_UART_IRQHandler+0x3a>
			rx_head = 0;
 80048ec:	4b10      	ldr	r3, [pc, #64]	; (8004930 <USER_UART_IRQHandler+0x78>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	701a      	strb	r2, [r3, #0]
		}
		if( rx_head  !=  RX_BUFFER_TAIL ) {
 80048f2:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <USER_UART_IRQHandler+0x78>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	461a      	mov	r2, r3
 80048f8:	4b0e      	ldr	r3, [pc, #56]	; (8004934 <USER_UART_IRQHandler+0x7c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d00a      	beq.n	8004916 <USER_UART_IRQHandler+0x5e>
			RX_BUFFER[RX_BUFFER_HEAD] = rx_data;
 8004900:	4b0a      	ldr	r3, [pc, #40]	; (800492c <USER_UART_IRQHandler+0x74>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a08      	ldr	r2, [pc, #32]	; (8004928 <USER_UART_IRQHandler+0x70>)
 8004906:	7811      	ldrb	r1, [r2, #0]
 8004908:	4a0b      	ldr	r2, [pc, #44]	; (8004938 <USER_UART_IRQHandler+0x80>)
 800490a:	54d1      	strb	r1, [r2, r3]
			RX_BUFFER_HEAD = rx_head;
 800490c:	4b08      	ldr	r3, [pc, #32]	; (8004930 <USER_UART_IRQHandler+0x78>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	4b06      	ldr	r3, [pc, #24]	; (800492c <USER_UART_IRQHandler+0x74>)
 8004914:	601a      	str	r2, [r3, #0]
		}
	}
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40011000 	.word	0x40011000
 8004928:	20002e14 	.word	0x20002e14
 800492c:	20003690 	.word	0x20003690
 8004930:	20000b84 	.word	0x20000b84
 8004934:	20003694 	.word	0x20003694
 8004938:	20003640 	.word	0x20003640

0800493c <USART1_SendChar>:

void  USART1_SendChar(uint8_t c) {
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit (&huart1 , &c, sizeof(c), 10);
 8004946:	1df9      	adds	r1, r7, #7
 8004948:	230a      	movs	r3, #10
 800494a:	2201      	movs	r2, #1
 800494c:	4803      	ldr	r0, [pc, #12]	; (800495c <USART1_SendChar+0x20>)
 800494e:	f003 ff44 	bl	80087da <HAL_UART_Transmit>
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	20003650 	.word	0x20003650

08004960 <USART1_SendInt>:
	USART1_SendChar(array_cast[1]);
	USART1_SendChar(array_cast[2]);
	USART1_SendChar(array_cast[3]);
}

void USART1_SendInt(int v) {
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	array_cast = (uint8_t *) (&v);
 8004968:	4a09      	ldr	r2, [pc, #36]	; (8004990 <USART1_SendInt+0x30>)
 800496a:	1d3b      	adds	r3, r7, #4
 800496c:	6013      	str	r3, [r2, #0]
	USART1_SendChar(array_cast[0]);
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <USART1_SendInt+0x30>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff ffe1 	bl	800493c <USART1_SendChar>
	USART1_SendChar(array_cast[1]);
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <USART1_SendInt+0x30>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3301      	adds	r3, #1
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff ffda 	bl	800493c <USART1_SendChar>
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	20003318 	.word	0x20003318

08004994 <USART1_Dequeue>:

int  USART1_Dequeue(char* c) {
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	int  ret;
	ret = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
	*c = 0;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
	HAL_NVIC_DisableIRQ(USART1_IRQn);
 80049a6:	2025      	movs	r0, #37	; 0x25
 80049a8:	f000 fe0f 	bl	80055ca <HAL_NVIC_DisableIRQ>
	if (RX_BUFFER_HEAD  !=  RX_BUFFER_TAIL) {
 80049ac:	4b10      	ldr	r3, [pc, #64]	; (80049f0 <USART1_Dequeue+0x5c>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <USART1_Dequeue+0x60>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d013      	beq.n	80049e0 <USART1_Dequeue+0x4c>
		*c = RX_BUFFER[RX_BUFFER_TAIL ];
 80049b8:	4b0e      	ldr	r3, [pc, #56]	; (80049f4 <USART1_Dequeue+0x60>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <USART1_Dequeue+0x64>)
 80049be:	5cd2      	ldrb	r2, [r2, r3]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	701a      	strb	r2, [r3, #0]
		RX_BUFFER_TAIL ++;
 80049c4:	4b0b      	ldr	r3, [pc, #44]	; (80049f4 <USART1_Dequeue+0x60>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3301      	adds	r3, #1
 80049ca:	4a0a      	ldr	r2, [pc, #40]	; (80049f4 <USART1_Dequeue+0x60>)
 80049cc:	6013      	str	r3, [r2, #0]
		if (RX_BUFFER_TAIL  ==  BUFSIZE) {
 80049ce:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <USART1_Dequeue+0x60>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d102      	bne.n	80049dc <USART1_Dequeue+0x48>
			RX_BUFFER_TAIL = 0;
 80049d6:	4b07      	ldr	r3, [pc, #28]	; (80049f4 <USART1_Dequeue+0x60>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
		}
		ret = 1;
 80049dc:	2301      	movs	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
	}
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049e0:	2025      	movs	r0, #37	; 0x25
 80049e2:	f000 fde4 	bl	80055ae <HAL_NVIC_EnableIRQ>
	return  ret;
 80049e6:	68fb      	ldr	r3, [r7, #12]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	20003690 	.word	0x20003690
 80049f4:	20003694 	.word	0x20003694
 80049f8:	20003640 	.word	0x20003640

080049fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80049fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a34 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a02:	e003      	b.n	8004a0c <LoopCopyDataInit>

08004a04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a0a:	3104      	adds	r1, #4

08004a0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a0c:	480b      	ldr	r0, [pc, #44]	; (8004a3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a0e:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a14:	d3f6      	bcc.n	8004a04 <CopyDataInit>
  ldr  r2, =_sbss
 8004a16:	4a0b      	ldr	r2, [pc, #44]	; (8004a44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004a18:	e002      	b.n	8004a20 <LoopFillZerobss>

08004a1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004a1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004a1c:	f842 3b04 	str.w	r3, [r2], #4

08004a20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004a22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004a24:	d3f9      	bcc.n	8004a1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a26:	f7ff fe51 	bl	80046cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a2a:	f006 fd9f 	bl	800b56c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a2e:	f7ff f8e1 	bl	8003bf4 <main>
  bx  lr    
 8004a32:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004a34:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004a38:	08012360 	.word	0x08012360
  ldr  r0, =_sdata
 8004a3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004a40:	20000b5c 	.word	0x20000b5c
  ldr  r2, =_sbss
 8004a44:	20000b5c 	.word	0x20000b5c
  ldr  r3, = _ebss
 8004a48:	200036c8 	.word	0x200036c8

08004a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a4c:	e7fe      	b.n	8004a4c <ADC_IRQHandler>
	...

08004a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a54:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <HAL_Init+0x40>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a0d      	ldr	r2, [pc, #52]	; (8004a90 <HAL_Init+0x40>)
 8004a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_Init+0x40>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <HAL_Init+0x40>)
 8004a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a6c:	4b08      	ldr	r3, [pc, #32]	; (8004a90 <HAL_Init+0x40>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a07      	ldr	r2, [pc, #28]	; (8004a90 <HAL_Init+0x40>)
 8004a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a78:	2003      	movs	r0, #3
 8004a7a:	f000 fd71 	bl	8005560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f000 f808 	bl	8004a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a84:	f7ff fd6c 	bl	8004560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40023c00 	.word	0x40023c00

08004a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a9c:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <HAL_InitTick+0x54>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	4b12      	ldr	r3, [pc, #72]	; (8004aec <HAL_InitTick+0x58>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fd97 	bl	80055e6 <HAL_SYSTICK_Config>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e00e      	b.n	8004ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b0f      	cmp	r3, #15
 8004ac6:	d80a      	bhi.n	8004ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ac8:	2200      	movs	r2, #0
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ad0:	f000 fd51 	bl	8005576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ad4:	4a06      	ldr	r2, [pc, #24]	; (8004af0 <HAL_InitTick+0x5c>)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e000      	b.n	8004ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	20000968 	.word	0x20000968
 8004aec:	20000970 	.word	0x20000970
 8004af0:	2000096c 	.word	0x2000096c

08004af4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d101      	bne.n	8004b0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e033      	b.n	8004b72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d109      	bne.n	8004b26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fd fadc 	bl	80020d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d118      	bne.n	8004b64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b3a:	f023 0302 	bic.w	r3, r3, #2
 8004b3e:	f043 0202 	orr.w	r2, r3, #2
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fa9a 	bl	8005080 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	f023 0303 	bic.w	r3, r3, #3
 8004b5a:	f043 0201 	orr.w	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	641a      	str	r2, [r3, #64]	; 0x40
 8004b62:	e001      	b.n	8004b68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d101      	bne.n	8004b9a <HAL_ADC_Start_DMA+0x1e>
 8004b96:	2302      	movs	r3, #2
 8004b98:	e0cc      	b.n	8004d34 <HAL_ADC_Start_DMA+0x1b8>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d018      	beq.n	8004be2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004bc0:	4b5e      	ldr	r3, [pc, #376]	; (8004d3c <HAL_ADC_Start_DMA+0x1c0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a5e      	ldr	r2, [pc, #376]	; (8004d40 <HAL_ADC_Start_DMA+0x1c4>)
 8004bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bca:	0c9a      	lsrs	r2, r3, #18
 8004bcc:	4613      	mov	r3, r2
 8004bce:	005b      	lsls	r3, r3, #1
 8004bd0:	4413      	add	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004bd4:	e002      	b.n	8004bdc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1f9      	bne.n	8004bd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	f040 80a0 	bne.w	8004d32 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c1c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c30:	d106      	bne.n	8004c40 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	f023 0206 	bic.w	r2, r3, #6
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	645a      	str	r2, [r3, #68]	; 0x44
 8004c3e:	e002      	b.n	8004c46 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c4e:	4b3d      	ldr	r3, [pc, #244]	; (8004d44 <HAL_ADC_Start_DMA+0x1c8>)
 8004c50:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	4a3c      	ldr	r2, [pc, #240]	; (8004d48 <HAL_ADC_Start_DMA+0x1cc>)
 8004c58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5e:	4a3b      	ldr	r2, [pc, #236]	; (8004d4c <HAL_ADC_Start_DMA+0x1d0>)
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	4a3a      	ldr	r2, [pc, #232]	; (8004d50 <HAL_ADC_Start_DMA+0x1d4>)
 8004c68:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004c82:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c92:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	334c      	adds	r3, #76	; 0x4c
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f000 ffbe 	bl	8005c24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d12a      	bne.n	8004d0a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a26      	ldr	r2, [pc, #152]	; (8004d54 <HAL_ADC_Start_DMA+0x1d8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d015      	beq.n	8004cea <HAL_ADC_Start_DMA+0x16e>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <HAL_ADC_Start_DMA+0x1dc>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d105      	bne.n	8004cd4 <HAL_ADC_Start_DMA+0x158>
 8004cc8:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <HAL_ADC_Start_DMA+0x1c8>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a20      	ldr	r2, [pc, #128]	; (8004d5c <HAL_ADC_Start_DMA+0x1e0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d129      	bne.n	8004d32 <HAL_ADC_Start_DMA+0x1b6>
 8004cde:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <HAL_ADC_Start_DMA+0x1c8>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	2b0f      	cmp	r3, #15
 8004ce8:	d823      	bhi.n	8004d32 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11c      	bne.n	8004d32 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689a      	ldr	r2, [r3, #8]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	e013      	b.n	8004d32 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a11      	ldr	r2, [pc, #68]	; (8004d54 <HAL_ADC_Start_DMA+0x1d8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d10e      	bne.n	8004d32 <HAL_ADC_Start_DMA+0x1b6>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d107      	bne.n	8004d32 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d30:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000968 	.word	0x20000968
 8004d40:	431bde83 	.word	0x431bde83
 8004d44:	40012300 	.word	0x40012300
 8004d48:	08005279 	.word	0x08005279
 8004d4c:	08005333 	.word	0x08005333
 8004d50:	0800534f 	.word	0x0800534f
 8004d54:	40012000 	.word	0x40012000
 8004d58:	40012100 	.word	0x40012100
 8004d5c:	40012200 	.word	0x40012200

08004d60 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_ADC_Stop_DMA+0x1a>
 8004d76:	2302      	movs	r3, #2
 8004d78:	e038      	b.n	8004dec <HAL_ADC_Stop_DMA+0x8c>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	689a      	ldr	r2, [r3, #8]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d120      	bne.n	8004de2 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dae:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 ff8d 	bl	8005cd4 <HAL_DMA_Abort>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8004dcc:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	f043 0201 	orr.w	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x1c>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e113      	b.n	8005060 <HAL_ADC_ConfigChannel+0x244>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b09      	cmp	r3, #9
 8004e46:	d925      	bls.n	8004e94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68d9      	ldr	r1, [r3, #12]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	4613      	mov	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	3b1e      	subs	r3, #30
 8004e5e:	2207      	movs	r2, #7
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43da      	mvns	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68d9      	ldr	r1, [r3, #12]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	4618      	mov	r0, r3
 8004e80:	4603      	mov	r3, r0
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	4403      	add	r3, r0
 8004e86:	3b1e      	subs	r3, #30
 8004e88:	409a      	lsls	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	e022      	b.n	8004eda <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6919      	ldr	r1, [r3, #16]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	005b      	lsls	r3, r3, #1
 8004ea6:	4413      	add	r3, r2
 8004ea8:	2207      	movs	r2, #7
 8004eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004eae:	43da      	mvns	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	400a      	ands	r2, r1
 8004eb6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6919      	ldr	r1, [r3, #16]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689a      	ldr	r2, [r3, #8]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	4618      	mov	r0, r3
 8004eca:	4603      	mov	r3, r0
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	4403      	add	r3, r0
 8004ed0:	409a      	lsls	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b06      	cmp	r3, #6
 8004ee0:	d824      	bhi.n	8004f2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	3b05      	subs	r3, #5
 8004ef4:	221f      	movs	r2, #31
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43da      	mvns	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	400a      	ands	r2, r1
 8004f02:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	4618      	mov	r0, r3
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	3b05      	subs	r3, #5
 8004f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	635a      	str	r2, [r3, #52]	; 0x34
 8004f2a:	e04c      	b.n	8004fc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	2b0c      	cmp	r3, #12
 8004f32:	d824      	bhi.n	8004f7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	3b23      	subs	r3, #35	; 0x23
 8004f46:	221f      	movs	r2, #31
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	43da      	mvns	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	400a      	ands	r2, r1
 8004f54:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	4618      	mov	r0, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	3b23      	subs	r3, #35	; 0x23
 8004f70:	fa00 f203 	lsl.w	r2, r0, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f7c:	e023      	b.n	8004fc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	3b41      	subs	r3, #65	; 0x41
 8004f90:	221f      	movs	r2, #31
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	43da      	mvns	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4618      	mov	r0, r3
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3b41      	subs	r3, #65	; 0x41
 8004fba:	fa00 f203 	lsl.w	r2, r0, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004fc6:	4b29      	ldr	r3, [pc, #164]	; (800506c <HAL_ADC_ConfigChannel+0x250>)
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a28      	ldr	r2, [pc, #160]	; (8005070 <HAL_ADC_ConfigChannel+0x254>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d10f      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x1d8>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b12      	cmp	r3, #18
 8004fda:	d10b      	bne.n	8004ff4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <HAL_ADC_ConfigChannel+0x254>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d12b      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x23a>
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1c      	ldr	r2, [pc, #112]	; (8005074 <HAL_ADC_ConfigChannel+0x258>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <HAL_ADC_ConfigChannel+0x1f4>
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b11      	cmp	r3, #17
 800500e:	d122      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a11      	ldr	r2, [pc, #68]	; (8005074 <HAL_ADC_ConfigChannel+0x258>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d111      	bne.n	8005056 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005032:	4b11      	ldr	r3, [pc, #68]	; (8005078 <HAL_ADC_ConfigChannel+0x25c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a11      	ldr	r2, [pc, #68]	; (800507c <HAL_ADC_ConfigChannel+0x260>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	0c9a      	lsrs	r2, r3, #18
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	005b      	lsls	r3, r3, #1
 8005046:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005048:	e002      	b.n	8005050 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	3b01      	subs	r3, #1
 800504e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f9      	bne.n	800504a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	40012300 	.word	0x40012300
 8005070:	40012000 	.word	0x40012000
 8005074:	10000012 	.word	0x10000012
 8005078:	20000968 	.word	0x20000968
 800507c:	431bde83 	.word	0x431bde83

08005080 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005088:	4b79      	ldr	r3, [pc, #484]	; (8005270 <ADC_Init+0x1f0>)
 800508a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685a      	ldr	r2, [r3, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6859      	ldr	r1, [r3, #4]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	021a      	lsls	r2, r3, #8
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80050d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6859      	ldr	r1, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689a      	ldr	r2, [r3, #8]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689a      	ldr	r2, [r3, #8]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6899      	ldr	r1, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	4a58      	ldr	r2, [pc, #352]	; (8005274 <ADC_Init+0x1f4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d022      	beq.n	800515e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005126:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	6899      	ldr	r1, [r3, #8]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005148:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6899      	ldr	r1, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	430a      	orrs	r2, r1
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	e00f      	b.n	800517e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800516c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800517c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0202 	bic.w	r2, r2, #2
 800518c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6899      	ldr	r1, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	7e1b      	ldrb	r3, [r3, #24]
 8005198:	005a      	lsls	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d01b      	beq.n	80051e4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80051ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	3b01      	subs	r3, #1
 80051d8:	035a      	lsls	r2, r3, #13
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
 80051e2:	e007      	b.n	80051f4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005202:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	3b01      	subs	r3, #1
 8005210:	051a      	lsls	r2, r3, #20
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005228:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6899      	ldr	r1, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005236:	025a      	lsls	r2, r3, #9
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800524e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6899      	ldr	r1, [r3, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	029a      	lsls	r2, r3, #10
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	40012300 	.word	0x40012300
 8005274:	0f000001 	.word	0x0f000001

08005278 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800528e:	2b00      	cmp	r3, #0
 8005290:	d13c      	bne.n	800530c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d12b      	bne.n	8005304 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d127      	bne.n	8005304 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d006      	beq.n	80052d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d119      	bne.n	8005304 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685a      	ldr	r2, [r3, #4]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0220 	bic.w	r2, r2, #32
 80052de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d105      	bne.n	8005304 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7fc fba3 	bl	8001a50 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800530a:	e00e      	b.n	800532a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005310:	f003 0310 	and.w	r3, r3, #16
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff fd75 	bl	8004e08 <HAL_ADC_ErrorCallback>
}
 800531e:	e004      	b.n	800532a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	4798      	blx	r3
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7ff fd57 	bl	8004df4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005346:	bf00      	nop
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2240      	movs	r2, #64	; 0x40
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	f043 0204 	orr.w	r2, r3, #4
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f7ff fd4a 	bl	8004e08 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800538c:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <__NVIC_SetPriorityGrouping+0x44>)
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005398:	4013      	ands	r3, r2
 800539a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053ae:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <__NVIC_SetPriorityGrouping+0x44>)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	60d3      	str	r3, [r2, #12]
}
 80053b4:	bf00      	nop
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	e000ed00 	.word	0xe000ed00

080053c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053c4:	b480      	push	{r7}
 80053c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c8:	4b04      	ldr	r3, [pc, #16]	; (80053dc <__NVIC_GetPriorityGrouping+0x18>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	0a1b      	lsrs	r3, r3, #8
 80053ce:	f003 0307 	and.w	r3, r3, #7
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	e000ed00 	.word	0xe000ed00

080053e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	4603      	mov	r3, r0
 80053e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	db0b      	blt.n	800540a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053f2:	79fb      	ldrb	r3, [r7, #7]
 80053f4:	f003 021f 	and.w	r2, r3, #31
 80053f8:	4907      	ldr	r1, [pc, #28]	; (8005418 <__NVIC_EnableIRQ+0x38>)
 80053fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fe:	095b      	lsrs	r3, r3, #5
 8005400:	2001      	movs	r0, #1
 8005402:	fa00 f202 	lsl.w	r2, r0, r2
 8005406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	e000e100 	.word	0xe000e100

0800541c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800542a:	2b00      	cmp	r3, #0
 800542c:	db10      	blt.n	8005450 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	f003 021f 	and.w	r2, r3, #31
 8005434:	4909      	ldr	r1, [pc, #36]	; (800545c <__NVIC_DisableIRQ+0x40>)
 8005436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800543a:	095b      	lsrs	r3, r3, #5
 800543c:	2001      	movs	r0, #1
 800543e:	fa00 f202 	lsl.w	r2, r0, r2
 8005442:	3320      	adds	r3, #32
 8005444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005448:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800544c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	e000e100 	.word	0xe000e100

08005460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	6039      	str	r1, [r7, #0]
 800546a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800546c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005470:	2b00      	cmp	r3, #0
 8005472:	db0a      	blt.n	800548a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	b2da      	uxtb	r2, r3
 8005478:	490c      	ldr	r1, [pc, #48]	; (80054ac <__NVIC_SetPriority+0x4c>)
 800547a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800547e:	0112      	lsls	r2, r2, #4
 8005480:	b2d2      	uxtb	r2, r2
 8005482:	440b      	add	r3, r1
 8005484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005488:	e00a      	b.n	80054a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	b2da      	uxtb	r2, r3
 800548e:	4908      	ldr	r1, [pc, #32]	; (80054b0 <__NVIC_SetPriority+0x50>)
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	3b04      	subs	r3, #4
 8005498:	0112      	lsls	r2, r2, #4
 800549a:	b2d2      	uxtb	r2, r2
 800549c:	440b      	add	r3, r1
 800549e:	761a      	strb	r2, [r3, #24]
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	e000e100 	.word	0xe000e100
 80054b0:	e000ed00 	.word	0xe000ed00

080054b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b089      	sub	sp, #36	; 0x24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	f1c3 0307 	rsb	r3, r3, #7
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	bf28      	it	cs
 80054d2:	2304      	movcs	r3, #4
 80054d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3304      	adds	r3, #4
 80054da:	2b06      	cmp	r3, #6
 80054dc:	d902      	bls.n	80054e4 <NVIC_EncodePriority+0x30>
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	3b03      	subs	r3, #3
 80054e2:	e000      	b.n	80054e6 <NVIC_EncodePriority+0x32>
 80054e4:	2300      	movs	r3, #0
 80054e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	43da      	mvns	r2, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	401a      	ands	r2, r3
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	fa01 f303 	lsl.w	r3, r1, r3
 8005506:	43d9      	mvns	r1, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800550c:	4313      	orrs	r3, r2
         );
}
 800550e:	4618      	mov	r0, r3
 8005510:	3724      	adds	r7, #36	; 0x24
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b082      	sub	sp, #8
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3b01      	subs	r3, #1
 8005528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800552c:	d301      	bcc.n	8005532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800552e:	2301      	movs	r3, #1
 8005530:	e00f      	b.n	8005552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005532:	4a0a      	ldr	r2, [pc, #40]	; (800555c <SysTick_Config+0x40>)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3b01      	subs	r3, #1
 8005538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800553a:	210f      	movs	r1, #15
 800553c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005540:	f7ff ff8e 	bl	8005460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005544:	4b05      	ldr	r3, [pc, #20]	; (800555c <SysTick_Config+0x40>)
 8005546:	2200      	movs	r2, #0
 8005548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800554a:	4b04      	ldr	r3, [pc, #16]	; (800555c <SysTick_Config+0x40>)
 800554c:	2207      	movs	r2, #7
 800554e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	e000e010 	.word	0xe000e010

08005560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff ff07 	bl	800537c <__NVIC_SetPriorityGrouping>
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005576:	b580      	push	{r7, lr}
 8005578:	b086      	sub	sp, #24
 800557a:	af00      	add	r7, sp, #0
 800557c:	4603      	mov	r3, r0
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
 8005582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005588:	f7ff ff1c 	bl	80053c4 <__NVIC_GetPriorityGrouping>
 800558c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	6978      	ldr	r0, [r7, #20]
 8005594:	f7ff ff8e 	bl	80054b4 <NVIC_EncodePriority>
 8005598:	4602      	mov	r2, r0
 800559a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800559e:	4611      	mov	r1, r2
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff ff5d 	bl	8005460 <__NVIC_SetPriority>
}
 80055a6:	bf00      	nop
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b082      	sub	sp, #8
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	4603      	mov	r3, r0
 80055b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055bc:	4618      	mov	r0, r3
 80055be:	f7ff ff0f 	bl	80053e0 <__NVIC_EnableIRQ>
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	4603      	mov	r3, r0
 80055d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80055d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7ff ff1f 	bl	800541c <__NVIC_DisableIRQ>
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff ff94 	bl	800551c <SysTick_Config>
 80055f4:	4603      	mov	r3, r0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3708      	adds	r7, #8
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80055fe:	b580      	push	{r7, lr}
 8005600:	b082      	sub	sp, #8
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e014      	b.n	800563a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	791b      	ldrb	r3, [r3, #4]
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d105      	bne.n	8005626 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7fc fe71 	bl	8002308 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
	...

08005644 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	795b      	ldrb	r3, [r3, #5]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_DAC_Start_DMA+0x1e>
 800565e:	2302      	movs	r3, #2
 8005660:	e08e      	b.n	8005780 <HAL_DAC_Start_DMA+0x13c>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2202      	movs	r2, #2
 800566c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d12a      	bne.n	80056ca <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	4a43      	ldr	r2, [pc, #268]	; (8005788 <HAL_DAC_Start_DMA+0x144>)
 800567a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	4a42      	ldr	r2, [pc, #264]	; (800578c <HAL_DAC_Start_DMA+0x148>)
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	4a41      	ldr	r2, [pc, #260]	; (8005790 <HAL_DAC_Start_DMA+0x14c>)
 800568a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800569a:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d009      	beq.n	80056b6 <HAL_DAC_Start_DMA+0x72>
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d00c      	beq.n	80056c0 <HAL_DAC_Start_DMA+0x7c>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d000      	beq.n	80056ac <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80056aa:	e039      	b.n	8005720 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3308      	adds	r3, #8
 80056b2:	617b      	str	r3, [r7, #20]
        break;
 80056b4:	e034      	b.n	8005720 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	330c      	adds	r3, #12
 80056bc:	617b      	str	r3, [r7, #20]
        break;
 80056be:	e02f      	b.n	8005720 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3310      	adds	r3, #16
 80056c6:	617b      	str	r3, [r7, #20]
        break;
 80056c8:	e02a      	b.n	8005720 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	4a31      	ldr	r2, [pc, #196]	; (8005794 <HAL_DAC_Start_DMA+0x150>)
 80056d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	4a30      	ldr	r2, [pc, #192]	; (8005798 <HAL_DAC_Start_DMA+0x154>)
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	4a2f      	ldr	r2, [pc, #188]	; (800579c <HAL_DAC_Start_DMA+0x158>)
 80056e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80056f0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d009      	beq.n	800570c <HAL_DAC_Start_DMA+0xc8>
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d00c      	beq.n	8005716 <HAL_DAC_Start_DMA+0xd2>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d000      	beq.n	8005702 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8005700:	e00e      	b.n	8005720 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3314      	adds	r3, #20
 8005708:	617b      	str	r3, [r7, #20]
        break;
 800570a:	e009      	b.n	8005720 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3318      	adds	r3, #24
 8005712:	617b      	str	r3, [r7, #20]
        break;
 8005714:	e004      	b.n	8005720 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	331c      	adds	r3, #28
 800571c:	617b      	str	r3, [r7, #20]
        break;
 800571e:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005734:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6898      	ldr	r0, [r3, #8]
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	f000 fa70 	bl	8005c24 <HAL_DMA_Start_IT>
 8005744:	e00e      	b.n	8005764 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005754:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68d8      	ldr	r0, [r3, #12]
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	f000 fa60 	bl	8005c24 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6819      	ldr	r1, [r3, #0]
 800576a:	2201      	movs	r2, #1
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	409a      	lsls	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	080059a1 	.word	0x080059a1
 800578c:	080059c3 	.word	0x080059c3
 8005790:	080059df 	.word	0x080059df
 8005794:	08005a5d 	.word	0x08005a5d
 8005798:	08005a7f 	.word	0x08005a7f
 800579c:	08005a9b 	.word	0x08005a9b

080057a0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6819      	ldr	r1, [r3, #0]
 80057b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	43da      	mvns	r2, r3
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	400a      	ands	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6819      	ldr	r1, [r3, #0]
 80057ce:	2201      	movs	r2, #1
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	fa02 f303 	lsl.w	r3, r2, r3
 80057d6:	43da      	mvns	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	400a      	ands	r2, r1
 80057de:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d107      	bne.n	80057f6 <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fa72 	bl	8005cd4 <HAL_DMA_Abort>
 80057f0:	4603      	mov	r3, r0
 80057f2:	73fb      	strb	r3, [r7, #15]
 80057f4:	e006      	b.n	8005804 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fa6a 	bl	8005cd4 <HAL_DMA_Abort>
 8005800:	4603      	mov	r3, r0
 8005802:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 8005804:	7bfb      	ldrb	r3, [r7, #15]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2204      	movs	r2, #4
 800580e:	711a      	strb	r2, [r3, #4]
 8005810:	e002      	b.n	8005818 <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8005818:	7bfb      	ldrb	r3, [r7, #15]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b082      	sub	sp, #8
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005838:	d118      	bne.n	800586c <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2204      	movs	r2, #4
 800583e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f043 0201 	orr.w	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005854:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005864:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f843 	bl	80058f2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005872:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005876:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800587a:	d118      	bne.n	80058ae <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2204      	movs	r2, #4
 8005880:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	f043 0202 	orr.w	r2, r3, #2
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005896:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80058a6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f8cd 	bl	8005a48 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b083      	sub	sp, #12
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b083      	sub	sp, #12
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80058d2:	bf00      	nop
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr

080058de <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058de:	b480      	push	{r7}
 80058e0:	b083      	sub	sp, #12
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80058e6:	bf00      	nop
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8005906:	b480      	push	{r7}
 8005908:	b087      	sub	sp, #28
 800590a:	af00      	add	r7, sp, #0
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	795b      	ldrb	r3, [r3, #5]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_DAC_ConfigChannel+0x20>
 8005922:	2302      	movs	r3, #2
 8005924:	e036      	b.n	8005994 <HAL_DAC_ConfigChannel+0x8e>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2202      	movs	r2, #2
 8005930:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800593a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	43db      	mvns	r3, r3
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	4013      	ands	r3, r2
 800594a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	fa02 f303 	lsl.w	r3, r2, r3
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6819      	ldr	r1, [r3, #0]
 8005974:	22c0      	movs	r2, #192	; 0xc0
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43da      	mvns	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	400a      	ands	r2, r1
 8005984:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff ff81 	bl	80058b6 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2201      	movs	r2, #1
 80059b8:	711a      	strb	r2, [r3, #4]
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ce:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff ff7a 	bl	80058ca <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f043 0204 	orr.w	r2, r3, #4
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f7ff ff70 	bl	80058de <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2201      	movs	r2, #1
 8005a02:	711a      	strb	r2, [r3, #4]
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f7ff ffce 	bl	8005a0c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	711a      	strb	r2, [r3, #4]
}
 8005a76:	bf00      	nop
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f7ff ffc7 	bl	8005a20 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f043 0204 	orr.w	r2, r3, #4
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff ffbd 	bl	8005a34 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	711a      	strb	r2, [r3, #4]
}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ad4:	f003 ff18 	bl	8009908 <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e099      	b.n	8005c18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b04:	e00f      	b.n	8005b26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b06:	f003 feff 	bl	8009908 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b05      	cmp	r3, #5
 8005b12:	d908      	bls.n	8005b26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2203      	movs	r2, #3
 8005b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e078      	b.n	8005c18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e8      	bne.n	8005b06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	4b38      	ldr	r3, [pc, #224]	; (8005c20 <HAL_DMA_Init+0x158>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d107      	bne.n	8005b90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0307 	bic.w	r3, r3, #7
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d117      	bne.n	8005bea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00e      	beq.n	8005bea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 fb01 	bl	80061d4 <DMA_CheckFifoParam>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2240      	movs	r2, #64	; 0x40
 8005bdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005be6:	2301      	movs	r3, #1
 8005be8:	e016      	b.n	8005c18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fab8 	bl	8006168 <DMA_CalcBaseAndBitshift>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c00:	223f      	movs	r2, #63	; 0x3f
 8005c02:	409a      	lsls	r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	f010803f 	.word	0xf010803f

08005c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c32:	2300      	movs	r3, #0
 8005c34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_DMA_Start_IT+0x26>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e040      	b.n	8005ccc <HAL_DMA_Start_IT+0xa8>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d12f      	bne.n	8005cbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2202      	movs	r2, #2
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fa4a 	bl	800610c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7c:	223f      	movs	r2, #63	; 0x3f
 8005c7e:	409a      	lsls	r2, r3
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0216 	orr.w	r2, r2, #22
 8005c92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f042 0208 	orr.w	r2, r2, #8
 8005caa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e005      	b.n	8005cca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005cc6:	2302      	movs	r3, #2
 8005cc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3718      	adds	r7, #24
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005ce2:	f003 fe11 	bl	8009908 <HAL_GetTick>
 8005ce6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d008      	beq.n	8005d06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2280      	movs	r2, #128	; 0x80
 8005cf8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e052      	b.n	8005dac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0216 	bic.w	r2, r2, #22
 8005d14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	695a      	ldr	r2, [r3, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <HAL_DMA_Abort+0x62>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d007      	beq.n	8005d46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 0208 	bic.w	r2, r2, #8
 8005d44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0201 	bic.w	r2, r2, #1
 8005d54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d56:	e013      	b.n	8005d80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d58:	f003 fdd6 	bl	8009908 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b05      	cmp	r3, #5
 8005d64:	d90c      	bls.n	8005d80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2203      	movs	r2, #3
 8005d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e015      	b.n	8005dac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e4      	bne.n	8005d58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d92:	223f      	movs	r2, #63	; 0x3f
 8005d94:	409a      	lsls	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	d004      	beq.n	8005dd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2280      	movs	r2, #128	; 0x80
 8005dcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e00c      	b.n	8005dec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2205      	movs	r2, #5
 8005dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 0201 	bic.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005e04:	4b92      	ldr	r3, [pc, #584]	; (8006050 <HAL_DMA_IRQHandler+0x258>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a92      	ldr	r2, [pc, #584]	; (8006054 <HAL_DMA_IRQHandler+0x25c>)
 8005e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e0e:	0a9b      	lsrs	r3, r3, #10
 8005e10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e22:	2208      	movs	r2, #8
 8005e24:	409a      	lsls	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01a      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d013      	beq.n	8005e64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0204 	bic.w	r2, r2, #4
 8005e4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e50:	2208      	movs	r2, #8
 8005e52:	409a      	lsls	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	f043 0201 	orr.w	r2, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e68:	2201      	movs	r2, #1
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4013      	ands	r3, r2
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d012      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e86:	2201      	movs	r2, #1
 8005e88:	409a      	lsls	r2, r3
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e92:	f043 0202 	orr.w	r2, r3, #2
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d012      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebc:	2204      	movs	r2, #4
 8005ebe:	409a      	lsls	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec8:	f043 0204 	orr.w	r2, r3, #4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed4:	2210      	movs	r2, #16
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d043      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0308 	and.w	r3, r3, #8
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d03c      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef2:	2210      	movs	r2, #16
 8005ef4:	409a      	lsls	r2, r3
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d018      	beq.n	8005f3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d108      	bne.n	8005f28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d024      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	4798      	blx	r3
 8005f26:	e01f      	b.n	8005f68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
 8005f38:	e016      	b.n	8005f68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d107      	bne.n	8005f58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0208 	bic.w	r2, r2, #8
 8005f56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f000 808e 	beq.w	8006096 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8086 	beq.w	8006096 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8e:	2220      	movs	r2, #32
 8005f90:	409a      	lsls	r2, r3
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b05      	cmp	r3, #5
 8005fa0:	d136      	bne.n	8006010 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0216 	bic.w	r2, r2, #22
 8005fb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d103      	bne.n	8005fd2 <HAL_DMA_IRQHandler+0x1da>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d007      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0208 	bic.w	r2, r2, #8
 8005fe0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe6:	223f      	movs	r2, #63	; 0x3f
 8005fe8:	409a      	lsls	r2, r3
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006002:	2b00      	cmp	r3, #0
 8006004:	d07d      	beq.n	8006102 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
        }
        return;
 800600e:	e078      	b.n	8006102 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01c      	beq.n	8006058 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d108      	bne.n	800603e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006030:	2b00      	cmp	r3, #0
 8006032:	d030      	beq.n	8006096 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	4798      	blx	r3
 800603c:	e02b      	b.n	8006096 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006042:	2b00      	cmp	r3, #0
 8006044:	d027      	beq.n	8006096 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	4798      	blx	r3
 800604e:	e022      	b.n	8006096 <HAL_DMA_IRQHandler+0x29e>
 8006050:	20000968 	.word	0x20000968
 8006054:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10f      	bne.n	8006086 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0210 	bic.w	r2, r2, #16
 8006074:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	2b00      	cmp	r3, #0
 800609c:	d032      	beq.n	8006104 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d022      	beq.n	80060f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2205      	movs	r2, #5
 80060ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	3301      	adds	r3, #1
 80060c6:	60bb      	str	r3, [r7, #8]
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d307      	bcc.n	80060de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f2      	bne.n	80060c2 <HAL_DMA_IRQHandler+0x2ca>
 80060dc:	e000      	b.n	80060e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80060de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	4798      	blx	r3
 8006100:	e000      	b.n	8006104 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006102:	bf00      	nop
    }
  }
}
 8006104:	3718      	adds	r7, #24
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop

0800610c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
 8006118:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006128:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b40      	cmp	r3, #64	; 0x40
 8006138:	d108      	bne.n	800614c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800614a:	e007      	b.n	800615c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	60da      	str	r2, [r3, #12]
}
 800615c:	bf00      	nop
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	b2db      	uxtb	r3, r3
 8006176:	3b10      	subs	r3, #16
 8006178:	4a14      	ldr	r2, [pc, #80]	; (80061cc <DMA_CalcBaseAndBitshift+0x64>)
 800617a:	fba2 2303 	umull	r2, r3, r2, r3
 800617e:	091b      	lsrs	r3, r3, #4
 8006180:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006182:	4a13      	ldr	r2, [pc, #76]	; (80061d0 <DMA_CalcBaseAndBitshift+0x68>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b03      	cmp	r3, #3
 8006194:	d909      	bls.n	80061aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	1d1a      	adds	r2, r3, #4
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	659a      	str	r2, [r3, #88]	; 0x58
 80061a8:	e007      	b.n	80061ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80061b2:	f023 0303 	bic.w	r3, r3, #3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	aaaaaaab 	.word	0xaaaaaaab
 80061d0:	080109b4 	.word	0x080109b4

080061d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d11f      	bne.n	800622e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	2b03      	cmp	r3, #3
 80061f2:	d855      	bhi.n	80062a0 <DMA_CheckFifoParam+0xcc>
 80061f4:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <DMA_CheckFifoParam+0x28>)
 80061f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fa:	bf00      	nop
 80061fc:	0800620d 	.word	0x0800620d
 8006200:	0800621f 	.word	0x0800621f
 8006204:	0800620d 	.word	0x0800620d
 8006208:	080062a1 	.word	0x080062a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006210:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006214:	2b00      	cmp	r3, #0
 8006216:	d045      	beq.n	80062a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800621c:	e042      	b.n	80062a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006222:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006226:	d13f      	bne.n	80062a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800622c:	e03c      	b.n	80062a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006236:	d121      	bne.n	800627c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2b03      	cmp	r3, #3
 800623c:	d836      	bhi.n	80062ac <DMA_CheckFifoParam+0xd8>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <DMA_CheckFifoParam+0x70>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006255 	.word	0x08006255
 8006248:	0800625b 	.word	0x0800625b
 800624c:	08006255 	.word	0x08006255
 8006250:	0800626d 	.word	0x0800626d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	73fb      	strb	r3, [r7, #15]
      break;
 8006258:	e02f      	b.n	80062ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800625e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d024      	beq.n	80062b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800626a:	e021      	b.n	80062b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006274:	d11e      	bne.n	80062b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800627a:	e01b      	b.n	80062b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d902      	bls.n	8006288 <DMA_CheckFifoParam+0xb4>
 8006282:	2b03      	cmp	r3, #3
 8006284:	d003      	beq.n	800628e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006286:	e018      	b.n	80062ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	73fb      	strb	r3, [r7, #15]
      break;
 800628c:	e015      	b.n	80062ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00e      	beq.n	80062b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
      break;
 800629e:	e00b      	b.n	80062b8 <DMA_CheckFifoParam+0xe4>
      break;
 80062a0:	bf00      	nop
 80062a2:	e00a      	b.n	80062ba <DMA_CheckFifoParam+0xe6>
      break;
 80062a4:	bf00      	nop
 80062a6:	e008      	b.n	80062ba <DMA_CheckFifoParam+0xe6>
      break;
 80062a8:	bf00      	nop
 80062aa:	e006      	b.n	80062ba <DMA_CheckFifoParam+0xe6>
      break;
 80062ac:	bf00      	nop
 80062ae:	e004      	b.n	80062ba <DMA_CheckFifoParam+0xe6>
      break;
 80062b0:	bf00      	nop
 80062b2:	e002      	b.n	80062ba <DMA_CheckFifoParam+0xe6>
      break;   
 80062b4:	bf00      	nop
 80062b6:	e000      	b.n	80062ba <DMA_CheckFifoParam+0xe6>
      break;
 80062b8:	bf00      	nop
    }
  } 
  
  return status; 
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3714      	adds	r7, #20
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e03b      	b.n	8006352 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fc f9fc 	bl	80026ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006318:	f023 0107 	bic.w	r1, r3, #7
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006332:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	68d1      	ldr	r1, [r2, #12]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	430b      	orrs	r3, r1
 8006340:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af02      	add	r7, sp, #8
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
 8006366:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_DMA2D_Start+0x1c>
 8006372:	2302      	movs	r3, #2
 8006374:	e018      	b.n	80063a8 <HAL_DMA2D_Start+0x4e>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2202      	movs	r2, #2
 8006382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f989 	bl	80066a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f042 0201 	orr.w	r2, r2, #1
 80063a4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3710      	adds	r7, #16
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80063ba:	2300      	movs	r3, #0
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0301 	and.w	r3, r3, #1
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d056      	beq.n	800647a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80063cc:	f003 fa9c 	bl	8009908 <HAL_GetTick>
 80063d0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80063d2:	e04b      	b.n	800646c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d023      	beq.n	800642e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f4:	f043 0202 	orr.w	r2, r3, #2
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	f043 0201 	orr.w	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2221      	movs	r2, #33	; 0x21
 8006418:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2204      	movs	r2, #4
 800641e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e0a5      	b.n	800657a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006434:	d01a      	beq.n	800646c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006436:	f003 fa67 	bl	8009908 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d302      	bcc.n	800644c <HAL_DMA2D_PollForTransfer+0x9c>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10f      	bne.n	800646c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006450:	f043 0220 	orr.w	r2, r3, #32
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2203      	movs	r2, #3
 800645c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e086      	b.n	800657a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d0ac      	beq.n	80063d4 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	f003 0320 	and.w	r3, r3, #32
 8006484:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	f003 0320 	and.w	r3, r3, #32
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4313      	orrs	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d061      	beq.n	8006560 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800649c:	f003 fa34 	bl	8009908 <HAL_GetTick>
 80064a0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80064a2:	e056      	b.n	8006552 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d02e      	beq.n	8006514 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	f043 0204 	orr.w	r2, r3, #4
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d005      	beq.n	80064e2 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064da:	f043 0202 	orr.w	r2, r3, #2
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f0:	f043 0201 	orr.w	r2, r3, #1
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2229      	movs	r2, #41	; 0x29
 80064fe:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2204      	movs	r2, #4
 8006504:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e032      	b.n	800657a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800651a:	d01a      	beq.n	8006552 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800651c:	f003 f9f4 	bl	8009908 <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	683a      	ldr	r2, [r7, #0]
 8006528:	429a      	cmp	r2, r3
 800652a:	d302      	bcc.n	8006532 <HAL_DMA2D_PollForTransfer+0x182>
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10f      	bne.n	8006552 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006536:	f043 0220 	orr.w	r2, r3, #32
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2203      	movs	r2, #3
 8006542:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e013      	b.n	800657a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0a1      	beq.n	80064a4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2212      	movs	r2, #18
 8006566:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3718      	adds	r7, #24
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_DMA2D_ConfigLayer+0x20>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e079      	b.n	8006698 <HAL_DMA2D_ConfigLayer+0x114>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	3318      	adds	r3, #24
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	4413      	add	r3, r2
 80065be:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80065ce:	4b35      	ldr	r3, [pc, #212]	; (80066a4 <HAL_DMA2D_ConfigLayer+0x120>)
 80065d0:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b0a      	cmp	r3, #10
 80065d8:	d003      	beq.n	80065e2 <HAL_DMA2D_ConfigLayer+0x5e>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b09      	cmp	r3, #9
 80065e0:	d107      	bne.n	80065f2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	e005      	b.n	80065fe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	061b      	lsls	r3, r3, #24
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d120      	bne.n	8006646 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	43db      	mvns	r3, r3
 800660e:	ea02 0103 	and.w	r1, r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	430a      	orrs	r2, r1
 800661a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	6812      	ldr	r2, [r2, #0]
 8006624:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	2b0a      	cmp	r3, #10
 800662c:	d003      	beq.n	8006636 <HAL_DMA2D_ConfigLayer+0xb2>
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b09      	cmp	r3, #9
 8006634:	d127      	bne.n	8006686 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006642:	629a      	str	r2, [r3, #40]	; 0x28
 8006644:	e01f      	b.n	8006686 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69da      	ldr	r2, [r3, #28]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	43db      	mvns	r3, r3
 8006650:	ea02 0103 	and.w	r1, r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	430a      	orrs	r2, r1
 800665c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b0a      	cmp	r3, #10
 800666e:	d003      	beq.n	8006678 <HAL_DMA2D_ConfigLayer+0xf4>
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	2b09      	cmp	r3, #9
 8006676:	d106      	bne.n	8006686 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	68da      	ldr	r2, [r3, #12]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006684:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr
 80066a4:	ff03000f 	.word	0xff03000f

080066a8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b08b      	sub	sp, #44	; 0x2c
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066bc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	041a      	lsls	r2, r3, #16
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	431a      	orrs	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066e0:	d174      	bne.n	80067cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80066e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80066f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d108      	bne.n	800671a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	431a      	orrs	r2, r3
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	4313      	orrs	r3, r2
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	4313      	orrs	r3, r2
 8006716:	627b      	str	r3, [r7, #36]	; 0x24
 8006718:	e053      	b.n	80067c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d106      	bne.n	8006730 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	4313      	orrs	r3, r2
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	4313      	orrs	r3, r2
 800672c:	627b      	str	r3, [r7, #36]	; 0x24
 800672e:	e048      	b.n	80067c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	2b02      	cmp	r3, #2
 8006736:	d111      	bne.n	800675c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	0cdb      	lsrs	r3, r3, #19
 800673c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	0a9b      	lsrs	r3, r3, #10
 8006742:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	08db      	lsrs	r3, r3, #3
 8006748:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	02db      	lsls	r3, r3, #11
 8006752:	4313      	orrs	r3, r2
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
 800675a:	e032      	b.n	80067c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	2b03      	cmp	r3, #3
 8006762:	d117      	bne.n	8006794 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	0fdb      	lsrs	r3, r3, #31
 8006768:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	0cdb      	lsrs	r3, r3, #19
 800676e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	0adb      	lsrs	r3, r3, #11
 8006774:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	08db      	lsrs	r3, r3, #3
 800677a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	029b      	lsls	r3, r3, #10
 8006784:	431a      	orrs	r2, r3
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	03db      	lsls	r3, r3, #15
 800678a:	4313      	orrs	r3, r2
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	4313      	orrs	r3, r2
 8006790:	627b      	str	r3, [r7, #36]	; 0x24
 8006792:	e016      	b.n	80067c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	0f1b      	lsrs	r3, r3, #28
 8006798:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	0d1b      	lsrs	r3, r3, #20
 800679e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	0b1b      	lsrs	r3, r3, #12
 80067a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	091b      	lsrs	r3, r3, #4
 80067aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	011a      	lsls	r2, r3, #4
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	431a      	orrs	r2, r3
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	031b      	lsls	r3, r3, #12
 80067ba:	4313      	orrs	r3, r2
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80067ca:	e003      	b.n	80067d4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	60da      	str	r2, [r3, #12]
}
 80067d4:	bf00      	nop
 80067d6:	372c      	adds	r7, #44	; 0x2c
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b089      	sub	sp, #36	; 0x24
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80067ee:	2300      	movs	r3, #0
 80067f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067f6:	2300      	movs	r3, #0
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	e177      	b.n	8006aec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80067fc:	2201      	movs	r2, #1
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4013      	ands	r3, r2
 800680e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	429a      	cmp	r2, r3
 8006816:	f040 8166 	bne.w	8006ae6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d00b      	beq.n	800683a <HAL_GPIO_Init+0x5a>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d007      	beq.n	800683a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800682e:	2b11      	cmp	r3, #17
 8006830:	d003      	beq.n	800683a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2b12      	cmp	r3, #18
 8006838:	d130      	bne.n	800689c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	2203      	movs	r2, #3
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	43db      	mvns	r3, r3
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	4013      	ands	r3, r2
 8006850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	4313      	orrs	r3, r2
 8006862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69ba      	ldr	r2, [r7, #24]
 8006868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006870:	2201      	movs	r2, #1
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	fa02 f303 	lsl.w	r3, r2, r3
 8006878:	43db      	mvns	r3, r3
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	4013      	ands	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	091b      	lsrs	r3, r3, #4
 8006886:	f003 0201 	and.w	r2, r3, #1
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	fa02 f303 	lsl.w	r3, r2, r3
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	4313      	orrs	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	2203      	movs	r2, #3
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	43db      	mvns	r3, r3
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	4013      	ands	r3, r2
 80068b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	fa02 f303 	lsl.w	r3, r2, r3
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	2b02      	cmp	r3, #2
 80068d2:	d003      	beq.n	80068dc <HAL_GPIO_Init+0xfc>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2b12      	cmp	r3, #18
 80068da:	d123      	bne.n	8006924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	08da      	lsrs	r2, r3, #3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3208      	adds	r2, #8
 80068e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	f003 0307 	and.w	r3, r3, #7
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	220f      	movs	r2, #15
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	43db      	mvns	r3, r3
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	4013      	ands	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	691a      	ldr	r2, [r3, #16]
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f003 0307 	and.w	r3, r3, #7
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	4313      	orrs	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	08da      	lsrs	r2, r3, #3
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3208      	adds	r2, #8
 800691e:	69b9      	ldr	r1, [r7, #24]
 8006920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	2203      	movs	r2, #3
 8006930:	fa02 f303 	lsl.w	r3, r2, r3
 8006934:	43db      	mvns	r3, r3
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	4013      	ands	r3, r2
 800693a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f003 0203 	and.w	r2, r3, #3
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	fa02 f303 	lsl.w	r3, r2, r3
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	4313      	orrs	r3, r2
 8006950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 80c0 	beq.w	8006ae6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006966:	2300      	movs	r3, #0
 8006968:	60fb      	str	r3, [r7, #12]
 800696a:	4b65      	ldr	r3, [pc, #404]	; (8006b00 <HAL_GPIO_Init+0x320>)
 800696c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696e:	4a64      	ldr	r2, [pc, #400]	; (8006b00 <HAL_GPIO_Init+0x320>)
 8006970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006974:	6453      	str	r3, [r2, #68]	; 0x44
 8006976:	4b62      	ldr	r3, [pc, #392]	; (8006b00 <HAL_GPIO_Init+0x320>)
 8006978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800697a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006982:	4a60      	ldr	r2, [pc, #384]	; (8006b04 <HAL_GPIO_Init+0x324>)
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	089b      	lsrs	r3, r3, #2
 8006988:	3302      	adds	r3, #2
 800698a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800698e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	f003 0303 	and.w	r3, r3, #3
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	220f      	movs	r2, #15
 800699a:	fa02 f303 	lsl.w	r3, r2, r3
 800699e:	43db      	mvns	r3, r3
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	4013      	ands	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a57      	ldr	r2, [pc, #348]	; (8006b08 <HAL_GPIO_Init+0x328>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d037      	beq.n	8006a1e <HAL_GPIO_Init+0x23e>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a56      	ldr	r2, [pc, #344]	; (8006b0c <HAL_GPIO_Init+0x32c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d031      	beq.n	8006a1a <HAL_GPIO_Init+0x23a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a55      	ldr	r2, [pc, #340]	; (8006b10 <HAL_GPIO_Init+0x330>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d02b      	beq.n	8006a16 <HAL_GPIO_Init+0x236>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a54      	ldr	r2, [pc, #336]	; (8006b14 <HAL_GPIO_Init+0x334>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d025      	beq.n	8006a12 <HAL_GPIO_Init+0x232>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a53      	ldr	r2, [pc, #332]	; (8006b18 <HAL_GPIO_Init+0x338>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d01f      	beq.n	8006a0e <HAL_GPIO_Init+0x22e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a52      	ldr	r2, [pc, #328]	; (8006b1c <HAL_GPIO_Init+0x33c>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d019      	beq.n	8006a0a <HAL_GPIO_Init+0x22a>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a51      	ldr	r2, [pc, #324]	; (8006b20 <HAL_GPIO_Init+0x340>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <HAL_GPIO_Init+0x226>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a50      	ldr	r2, [pc, #320]	; (8006b24 <HAL_GPIO_Init+0x344>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00d      	beq.n	8006a02 <HAL_GPIO_Init+0x222>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a4f      	ldr	r2, [pc, #316]	; (8006b28 <HAL_GPIO_Init+0x348>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d007      	beq.n	80069fe <HAL_GPIO_Init+0x21e>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a4e      	ldr	r2, [pc, #312]	; (8006b2c <HAL_GPIO_Init+0x34c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d101      	bne.n	80069fa <HAL_GPIO_Init+0x21a>
 80069f6:	2309      	movs	r3, #9
 80069f8:	e012      	b.n	8006a20 <HAL_GPIO_Init+0x240>
 80069fa:	230a      	movs	r3, #10
 80069fc:	e010      	b.n	8006a20 <HAL_GPIO_Init+0x240>
 80069fe:	2308      	movs	r3, #8
 8006a00:	e00e      	b.n	8006a20 <HAL_GPIO_Init+0x240>
 8006a02:	2307      	movs	r3, #7
 8006a04:	e00c      	b.n	8006a20 <HAL_GPIO_Init+0x240>
 8006a06:	2306      	movs	r3, #6
 8006a08:	e00a      	b.n	8006a20 <HAL_GPIO_Init+0x240>
 8006a0a:	2305      	movs	r3, #5
 8006a0c:	e008      	b.n	8006a20 <HAL_GPIO_Init+0x240>
 8006a0e:	2304      	movs	r3, #4
 8006a10:	e006      	b.n	8006a20 <HAL_GPIO_Init+0x240>
 8006a12:	2303      	movs	r3, #3
 8006a14:	e004      	b.n	8006a20 <HAL_GPIO_Init+0x240>
 8006a16:	2302      	movs	r3, #2
 8006a18:	e002      	b.n	8006a20 <HAL_GPIO_Init+0x240>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <HAL_GPIO_Init+0x240>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	f002 0203 	and.w	r2, r2, #3
 8006a26:	0092      	lsls	r2, r2, #2
 8006a28:	4093      	lsls	r3, r2
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a30:	4934      	ldr	r1, [pc, #208]	; (8006b04 <HAL_GPIO_Init+0x324>)
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	089b      	lsrs	r3, r3, #2
 8006a36:	3302      	adds	r3, #2
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a3e:	4b3c      	ldr	r3, [pc, #240]	; (8006b30 <HAL_GPIO_Init+0x350>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	43db      	mvns	r3, r3
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d003      	beq.n	8006a62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a62:	4a33      	ldr	r2, [pc, #204]	; (8006b30 <HAL_GPIO_Init+0x350>)
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006a68:	4b31      	ldr	r3, [pc, #196]	; (8006b30 <HAL_GPIO_Init+0x350>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	43db      	mvns	r3, r3
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	4013      	ands	r3, r2
 8006a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a8c:	4a28      	ldr	r2, [pc, #160]	; (8006b30 <HAL_GPIO_Init+0x350>)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006a92:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <HAL_GPIO_Init+0x350>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	43db      	mvns	r3, r3
 8006a9c:	69ba      	ldr	r2, [r7, #24]
 8006a9e:	4013      	ands	r3, r2
 8006aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006aae:	69ba      	ldr	r2, [r7, #24]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ab6:	4a1e      	ldr	r2, [pc, #120]	; (8006b30 <HAL_GPIO_Init+0x350>)
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006abc:	4b1c      	ldr	r3, [pc, #112]	; (8006b30 <HAL_GPIO_Init+0x350>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ae0:	4a13      	ldr	r2, [pc, #76]	; (8006b30 <HAL_GPIO_Init+0x350>)
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	61fb      	str	r3, [r7, #28]
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	f67f ae84 	bls.w	80067fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006af4:	bf00      	nop
 8006af6:	3724      	adds	r7, #36	; 0x24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40023800 	.word	0x40023800
 8006b04:	40013800 	.word	0x40013800
 8006b08:	40020000 	.word	0x40020000
 8006b0c:	40020400 	.word	0x40020400
 8006b10:	40020800 	.word	0x40020800
 8006b14:	40020c00 	.word	0x40020c00
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	40021400 	.word	0x40021400
 8006b20:	40021800 	.word	0x40021800
 8006b24:	40021c00 	.word	0x40021c00
 8006b28:	40022000 	.word	0x40022000
 8006b2c:	40022400 	.word	0x40022400
 8006b30:	40013c00 	.word	0x40013c00

08006b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	807b      	strh	r3, [r7, #2]
 8006b40:	4613      	mov	r3, r2
 8006b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006b44:	787b      	ldrb	r3, [r7, #1]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d003      	beq.n	8006b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006b4a:	887a      	ldrh	r2, [r7, #2]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006b50:	e003      	b.n	8006b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006b52:	887b      	ldrh	r3, [r7, #2]
 8006b54:	041a      	lsls	r2, r3, #16
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	619a      	str	r2, [r3, #24]
}
 8006b5a:	bf00      	nop
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
	...

08006b68 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e0bf      	b.n	8006cfa <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d106      	bne.n	8006b94 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f8ba 	bl	8006d08 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	699a      	ldr	r2, [r3, #24]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006baa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6999      	ldr	r1, [r3, #24]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006bc0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6899      	ldr	r1, [r3, #8]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b4a      	ldr	r3, [pc, #296]	; (8006d04 <HAL_LTDC_Init+0x19c>)
 8006bdc:	400b      	ands	r3, r1
 8006bde:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	695b      	ldr	r3, [r3, #20]
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6899      	ldr	r1, [r3, #8]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	699a      	ldr	r2, [r3, #24]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68d9      	ldr	r1, [r3, #12]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	4b3e      	ldr	r3, [pc, #248]	; (8006d04 <HAL_LTDC_Init+0x19c>)
 8006c0a:	400b      	ands	r3, r1
 8006c0c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	69db      	ldr	r3, [r3, #28]
 8006c12:	041b      	lsls	r3, r3, #16
 8006c14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68d9      	ldr	r1, [r3, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	6919      	ldr	r1, [r3, #16]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	4b33      	ldr	r3, [pc, #204]	; (8006d04 <HAL_LTDC_Init+0x19c>)
 8006c38:	400b      	ands	r3, r1
 8006c3a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	041b      	lsls	r3, r3, #16
 8006c42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6919      	ldr	r1, [r3, #16]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	6959      	ldr	r1, [r3, #20]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <HAL_LTDC_Init+0x19c>)
 8006c66:	400b      	ands	r3, r1
 8006c68:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6959      	ldr	r1, [r3, #20]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c8e:	021b      	lsls	r3, r3, #8
 8006c90:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006c98:	041b      	lsls	r3, r3, #16
 8006c9a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0206 	orr.w	r2, r2, #6
 8006cd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0201 	orr.w	r2, r2, #1
 8006ce6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	f000f800 	.word	0xf000f800

08006d08 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d32:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d023      	beq.n	8006d86 <HAL_LTDC_IRQHandler+0x6a>
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01e      	beq.n	8006d86 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0204 	bic.w	r2, r2, #4
 8006d56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006d66:	f043 0201 	orr.w	r2, r3, #1
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2204      	movs	r2, #4
 8006d74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f86f 	bl	8006e64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f003 0302 	and.w	r3, r3, #2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d023      	beq.n	8006dd8 <HAL_LTDC_IRQHandler+0xbc>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d01e      	beq.n	8006dd8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0202 	bic.w	r2, r2, #2
 8006da8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2202      	movs	r2, #2
 8006db0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006db8:	f043 0202 	orr.w	r2, r3, #2
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2204      	movs	r2, #4
 8006dc6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f846 	bl	8006e64 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d01b      	beq.n	8006e1a <HAL_LTDC_IRQHandler+0xfe>
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	f003 0301 	and.w	r3, r3, #1
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d016      	beq.n	8006e1a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0201 	bic.w	r2, r2, #1
 8006dfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2201      	movs	r2, #1
 8006e02:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f82f 	bl	8006e78 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01b      	beq.n	8006e5c <HAL_LTDC_IRQHandler+0x140>
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 0308 	and.w	r3, r3, #8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d016      	beq.n	8006e5c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0208 	bic.w	r2, r2, #8
 8006e3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2208      	movs	r2, #8
 8006e44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f818 	bl	8006e8c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006e5c:	bf00      	nop
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ea0:	b5b0      	push	{r4, r5, r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d101      	bne.n	8006eba <HAL_LTDC_ConfigLayer+0x1a>
 8006eb6:	2302      	movs	r3, #2
 8006eb8:	e02c      	b.n	8006f14 <HAL_LTDC_ConfigLayer+0x74>
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2134      	movs	r1, #52	; 0x34
 8006ed0:	fb01 f303 	mul.w	r3, r1, r3
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	4614      	mov	r4, r2
 8006ede:	461d      	mov	r5, r3
 8006ee0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eec:	682b      	ldr	r3, [r5, #0]
 8006eee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 f87f 	bl	8006ff8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2201      	movs	r2, #1
 8006f00:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bdb0      	pop	{r4, r5, r7, pc}

08006f1c <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d101      	bne.n	8006f36 <HAL_LTDC_SetAlpha+0x1a>
 8006f32:	2302      	movs	r3, #2
 8006f34:	e024      	b.n	8006f80 <HAL_LTDC_SetAlpha+0x64>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2202      	movs	r2, #2
 8006f42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2234      	movs	r2, #52	; 0x34
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	3338      	adds	r3, #56	; 0x38
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	6979      	ldr	r1, [r7, #20]
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 f849 	bl	8006ff8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d101      	bne.n	8006fa0 <HAL_LTDC_ProgramLineEvent+0x18>
 8006f9c:	2302      	movs	r3, #2
 8006f9e:	e023      	b.n	8006fe8 <HAL_LTDC_ProgramLineEvent+0x60>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0201 	bic.w	r2, r2, #1
 8006fbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006fc0:	4a0c      	ldr	r2, [pc, #48]	; (8006ff4 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f042 0201 	orr.w	r2, r2, #1
 8006fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	40016800 	.word	0x40016800

08006ff8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b089      	sub	sp, #36	; 0x24
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	685a      	ldr	r2, [r3, #4]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	0c1b      	lsrs	r3, r3, #16
 8007010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007014:	4413      	add	r3, r2
 8007016:	041b      	lsls	r3, r3, #16
 8007018:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	01db      	lsls	r3, r3, #7
 8007024:	4413      	add	r3, r2
 8007026:	3384      	adds	r3, #132	; 0x84
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	4611      	mov	r1, r2
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	01d2      	lsls	r2, r2, #7
 8007034:	440a      	add	r2, r1
 8007036:	3284      	adds	r2, #132	; 0x84
 8007038:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800703c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	0c1b      	lsrs	r3, r3, #16
 800704a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800704e:	4413      	add	r3, r2
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4619      	mov	r1, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	01db      	lsls	r3, r3, #7
 800705c:	440b      	add	r3, r1
 800705e:	3384      	adds	r3, #132	; 0x84
 8007060:	4619      	mov	r1, r3
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	4313      	orrs	r3, r2
 8007066:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007076:	4413      	add	r3, r2
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	01db      	lsls	r3, r3, #7
 8007086:	4413      	add	r3, r2
 8007088:	3384      	adds	r3, #132	; 0x84
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	6812      	ldr	r2, [r2, #0]
 8007090:	4611      	mov	r1, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	01d2      	lsls	r2, r2, #7
 8007096:	440a      	add	r2, r1
 8007098:	3284      	adds	r2, #132	; 0x84
 800709a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800709e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070ae:	4413      	add	r3, r2
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4619      	mov	r1, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	01db      	lsls	r3, r3, #7
 80070bc:	440b      	add	r3, r1
 80070be:	3384      	adds	r3, #132	; 0x84
 80070c0:	4619      	mov	r1, r3
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	461a      	mov	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	01db      	lsls	r3, r3, #7
 80070d2:	4413      	add	r3, r2
 80070d4:	3384      	adds	r3, #132	; 0x84
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	6812      	ldr	r2, [r2, #0]
 80070dc:	4611      	mov	r1, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	01d2      	lsls	r2, r2, #7
 80070e2:	440a      	add	r2, r1
 80070e4:	3284      	adds	r2, #132	; 0x84
 80070e6:	f023 0307 	bic.w	r3, r3, #7
 80070ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	461a      	mov	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	01db      	lsls	r3, r3, #7
 80070f6:	4413      	add	r3, r2
 80070f8:	3384      	adds	r3, #132	; 0x84
 80070fa:	461a      	mov	r2, r3
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007108:	021b      	lsls	r3, r3, #8
 800710a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007112:	041b      	lsls	r3, r3, #16
 8007114:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	061b      	lsls	r3, r3, #24
 800711c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	461a      	mov	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	01db      	lsls	r3, r3, #7
 8007128:	4413      	add	r3, r2
 800712a:	3384      	adds	r3, #132	; 0x84
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	01db      	lsls	r3, r3, #7
 8007138:	4413      	add	r3, r2
 800713a:	3384      	adds	r3, #132	; 0x84
 800713c:	461a      	mov	r2, r3
 800713e:	2300      	movs	r3, #0
 8007140:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007148:	461a      	mov	r2, r3
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	431a      	orrs	r2, r3
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	431a      	orrs	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4619      	mov	r1, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	01db      	lsls	r3, r3, #7
 800715c:	440b      	add	r3, r1
 800715e:	3384      	adds	r3, #132	; 0x84
 8007160:	4619      	mov	r1, r3
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	01db      	lsls	r3, r3, #7
 8007172:	4413      	add	r3, r2
 8007174:	3384      	adds	r3, #132	; 0x84
 8007176:	695b      	ldr	r3, [r3, #20]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	4611      	mov	r1, r2
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	01d2      	lsls	r2, r2, #7
 8007182:	440a      	add	r2, r1
 8007184:	3284      	adds	r2, #132	; 0x84
 8007186:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800718a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	461a      	mov	r2, r3
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	01db      	lsls	r3, r3, #7
 8007196:	4413      	add	r3, r2
 8007198:	3384      	adds	r3, #132	; 0x84
 800719a:	461a      	mov	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	01db      	lsls	r3, r3, #7
 80071ac:	4413      	add	r3, r2
 80071ae:	3384      	adds	r3, #132	; 0x84
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	6812      	ldr	r2, [r2, #0]
 80071b6:	4611      	mov	r1, r2
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	01d2      	lsls	r2, r2, #7
 80071bc:	440a      	add	r2, r1
 80071be:	3284      	adds	r2, #132	; 0x84
 80071c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80071c4:	f023 0307 	bic.w	r3, r3, #7
 80071c8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	69da      	ldr	r2, [r3, #28]
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	68f9      	ldr	r1, [r7, #12]
 80071d4:	6809      	ldr	r1, [r1, #0]
 80071d6:	4608      	mov	r0, r1
 80071d8:	6879      	ldr	r1, [r7, #4]
 80071da:	01c9      	lsls	r1, r1, #7
 80071dc:	4401      	add	r1, r0
 80071de:	3184      	adds	r1, #132	; 0x84
 80071e0:	4313      	orrs	r3, r2
 80071e2:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	01db      	lsls	r3, r3, #7
 80071ee:	4413      	add	r3, r2
 80071f0:	3384      	adds	r3, #132	; 0x84
 80071f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	461a      	mov	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	01db      	lsls	r3, r3, #7
 80071fe:	4413      	add	r3, r2
 8007200:	3384      	adds	r3, #132	; 0x84
 8007202:	461a      	mov	r2, r3
 8007204:	2300      	movs	r3, #0
 8007206:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	01db      	lsls	r3, r3, #7
 8007212:	4413      	add	r3, r2
 8007214:	3384      	adds	r3, #132	; 0x84
 8007216:	461a      	mov	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d102      	bne.n	800722c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8007226:	2304      	movs	r3, #4
 8007228:	61fb      	str	r3, [r7, #28]
 800722a:	e01b      	b.n	8007264 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d102      	bne.n	800723a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8007234:	2303      	movs	r3, #3
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	e014      	b.n	8007264 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	691b      	ldr	r3, [r3, #16]
 800723e:	2b04      	cmp	r3, #4
 8007240:	d00b      	beq.n	800725a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007246:	2b02      	cmp	r3, #2
 8007248:	d007      	beq.n	800725a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800724e:	2b03      	cmp	r3, #3
 8007250:	d003      	beq.n	800725a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007256:	2b07      	cmp	r3, #7
 8007258:	d102      	bne.n	8007260 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800725a:	2302      	movs	r3, #2
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	e001      	b.n	8007264 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007260:	2301      	movs	r3, #1
 8007262:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	01db      	lsls	r3, r3, #7
 800726e:	4413      	add	r3, r2
 8007270:	3384      	adds	r3, #132	; 0x84
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	6812      	ldr	r2, [r2, #0]
 8007278:	4611      	mov	r1, r2
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	01d2      	lsls	r2, r2, #7
 800727e:	440a      	add	r2, r1
 8007280:	3284      	adds	r2, #132	; 0x84
 8007282:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007286:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	69fa      	ldr	r2, [r7, #28]
 800728e:	fb02 f303 	mul.w	r3, r2, r3
 8007292:	041a      	lsls	r2, r3, #16
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	6859      	ldr	r1, [r3, #4]
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	1acb      	subs	r3, r1, r3
 800729e:	69f9      	ldr	r1, [r7, #28]
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	3303      	adds	r3, #3
 80072a6:	68f9      	ldr	r1, [r7, #12]
 80072a8:	6809      	ldr	r1, [r1, #0]
 80072aa:	4608      	mov	r0, r1
 80072ac:	6879      	ldr	r1, [r7, #4]
 80072ae:	01c9      	lsls	r1, r1, #7
 80072b0:	4401      	add	r1, r0
 80072b2:	3184      	adds	r1, #132	; 0x84
 80072b4:	4313      	orrs	r3, r2
 80072b6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	461a      	mov	r2, r3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	01db      	lsls	r3, r3, #7
 80072c2:	4413      	add	r3, r2
 80072c4:	3384      	adds	r3, #132	; 0x84
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	6812      	ldr	r2, [r2, #0]
 80072cc:	4611      	mov	r1, r2
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	01d2      	lsls	r2, r2, #7
 80072d2:	440a      	add	r2, r1
 80072d4:	3284      	adds	r2, #132	; 0x84
 80072d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80072da:	f023 0307 	bic.w	r3, r3, #7
 80072de:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	01db      	lsls	r3, r3, #7
 80072ea:	4413      	add	r3, r2
 80072ec:	3384      	adds	r3, #132	; 0x84
 80072ee:	461a      	mov	r2, r3
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	01db      	lsls	r3, r3, #7
 8007300:	4413      	add	r3, r2
 8007302:	3384      	adds	r3, #132	; 0x84
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	4611      	mov	r1, r2
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	01d2      	lsls	r2, r2, #7
 8007310:	440a      	add	r2, r1
 8007312:	3284      	adds	r2, #132	; 0x84
 8007314:	f043 0301 	orr.w	r3, r3, #1
 8007318:	6013      	str	r3, [r2, #0]
}
 800731a:	bf00      	nop
 800731c:	3724      	adds	r7, #36	; 0x24
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
	...

08007328 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800732e:	2300      	movs	r3, #0
 8007330:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007332:	2300      	movs	r3, #0
 8007334:	603b      	str	r3, [r7, #0]
 8007336:	4b20      	ldr	r3, [pc, #128]	; (80073b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	4a1f      	ldr	r2, [pc, #124]	; (80073b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800733c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007340:	6413      	str	r3, [r2, #64]	; 0x40
 8007342:	4b1d      	ldr	r3, [pc, #116]	; (80073b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800734e:	4b1b      	ldr	r3, [pc, #108]	; (80073bc <HAL_PWREx_EnableOverDrive+0x94>)
 8007350:	2201      	movs	r2, #1
 8007352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007354:	f002 fad8 	bl	8009908 <HAL_GetTick>
 8007358:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800735a:	e009      	b.n	8007370 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800735c:	f002 fad4 	bl	8009908 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800736a:	d901      	bls.n	8007370 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e01f      	b.n	80073b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007370:	4b13      	ldr	r3, [pc, #76]	; (80073c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800737c:	d1ee      	bne.n	800735c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800737e:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007380:	2201      	movs	r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007384:	f002 fac0 	bl	8009908 <HAL_GetTick>
 8007388:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800738a:	e009      	b.n	80073a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800738c:	f002 fabc 	bl	8009908 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739a:	d901      	bls.n	80073a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e007      	b.n	80073b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ac:	d1ee      	bne.n	800738c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40023800 	.word	0x40023800
 80073bc:	420e0040 	.word	0x420e0040
 80073c0:	40007000 	.word	0x40007000
 80073c4:	420e0044 	.word	0x420e0044

080073c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b086      	sub	sp, #24
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e25b      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d075      	beq.n	80074d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80073e6:	4ba3      	ldr	r3, [pc, #652]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 030c 	and.w	r3, r3, #12
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d00c      	beq.n	800740c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073f2:	4ba0      	ldr	r3, [pc, #640]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80073fa:	2b08      	cmp	r3, #8
 80073fc:	d112      	bne.n	8007424 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073fe:	4b9d      	ldr	r3, [pc, #628]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800740a:	d10b      	bne.n	8007424 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800740c:	4b99      	ldr	r3, [pc, #612]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d05b      	beq.n	80074d0 <HAL_RCC_OscConfig+0x108>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d157      	bne.n	80074d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e236      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800742c:	d106      	bne.n	800743c <HAL_RCC_OscConfig+0x74>
 800742e:	4b91      	ldr	r3, [pc, #580]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a90      	ldr	r2, [pc, #576]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007438:	6013      	str	r3, [r2, #0]
 800743a:	e01d      	b.n	8007478 <HAL_RCC_OscConfig+0xb0>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007444:	d10c      	bne.n	8007460 <HAL_RCC_OscConfig+0x98>
 8007446:	4b8b      	ldr	r3, [pc, #556]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a8a      	ldr	r2, [pc, #552]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 800744c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	4b88      	ldr	r3, [pc, #544]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a87      	ldr	r2, [pc, #540]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007458:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800745c:	6013      	str	r3, [r2, #0]
 800745e:	e00b      	b.n	8007478 <HAL_RCC_OscConfig+0xb0>
 8007460:	4b84      	ldr	r3, [pc, #528]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a83      	ldr	r2, [pc, #524]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	4b81      	ldr	r3, [pc, #516]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a80      	ldr	r2, [pc, #512]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007472:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d013      	beq.n	80074a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007480:	f002 fa42 	bl	8009908 <HAL_GetTick>
 8007484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007488:	f002 fa3e 	bl	8009908 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b64      	cmp	r3, #100	; 0x64
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e1fb      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800749a:	4b76      	ldr	r3, [pc, #472]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d0f0      	beq.n	8007488 <HAL_RCC_OscConfig+0xc0>
 80074a6:	e014      	b.n	80074d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074a8:	f002 fa2e 	bl	8009908 <HAL_GetTick>
 80074ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074b0:	f002 fa2a 	bl	8009908 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b64      	cmp	r3, #100	; 0x64
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e1e7      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074c2:	4b6c      	ldr	r3, [pc, #432]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1f0      	bne.n	80074b0 <HAL_RCC_OscConfig+0xe8>
 80074ce:	e000      	b.n	80074d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d063      	beq.n	80075a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80074de:	4b65      	ldr	r3, [pc, #404]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f003 030c 	and.w	r3, r3, #12
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00b      	beq.n	8007502 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074ea:	4b62      	ldr	r3, [pc, #392]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80074f2:	2b08      	cmp	r3, #8
 80074f4:	d11c      	bne.n	8007530 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074f6:	4b5f      	ldr	r3, [pc, #380]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d116      	bne.n	8007530 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007502:	4b5c      	ldr	r3, [pc, #368]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <HAL_RCC_OscConfig+0x152>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d001      	beq.n	800751a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e1bb      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800751a:	4b56      	ldr	r3, [pc, #344]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	00db      	lsls	r3, r3, #3
 8007528:	4952      	ldr	r1, [pc, #328]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 800752a:	4313      	orrs	r3, r2
 800752c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800752e:	e03a      	b.n	80075a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d020      	beq.n	800757a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007538:	4b4f      	ldr	r3, [pc, #316]	; (8007678 <HAL_RCC_OscConfig+0x2b0>)
 800753a:	2201      	movs	r2, #1
 800753c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753e:	f002 f9e3 	bl	8009908 <HAL_GetTick>
 8007542:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007544:	e008      	b.n	8007558 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007546:	f002 f9df 	bl	8009908 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d901      	bls.n	8007558 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e19c      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007558:	4b46      	ldr	r3, [pc, #280]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0f0      	beq.n	8007546 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007564:	4b43      	ldr	r3, [pc, #268]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	4940      	ldr	r1, [pc, #256]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007574:	4313      	orrs	r3, r2
 8007576:	600b      	str	r3, [r1, #0]
 8007578:	e015      	b.n	80075a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800757a:	4b3f      	ldr	r3, [pc, #252]	; (8007678 <HAL_RCC_OscConfig+0x2b0>)
 800757c:	2200      	movs	r2, #0
 800757e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007580:	f002 f9c2 	bl	8009908 <HAL_GetTick>
 8007584:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007586:	e008      	b.n	800759a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007588:	f002 f9be 	bl	8009908 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	2b02      	cmp	r3, #2
 8007594:	d901      	bls.n	800759a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007596:	2303      	movs	r3, #3
 8007598:	e17b      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800759a:	4b36      	ldr	r3, [pc, #216]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1f0      	bne.n	8007588 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0308 	and.w	r3, r3, #8
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d030      	beq.n	8007614 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	695b      	ldr	r3, [r3, #20]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d016      	beq.n	80075e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075ba:	4b30      	ldr	r3, [pc, #192]	; (800767c <HAL_RCC_OscConfig+0x2b4>)
 80075bc:	2201      	movs	r2, #1
 80075be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075c0:	f002 f9a2 	bl	8009908 <HAL_GetTick>
 80075c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075c6:	e008      	b.n	80075da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075c8:	f002 f99e 	bl	8009908 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e15b      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075da:	4b26      	ldr	r3, [pc, #152]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 80075dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0f0      	beq.n	80075c8 <HAL_RCC_OscConfig+0x200>
 80075e6:	e015      	b.n	8007614 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075e8:	4b24      	ldr	r3, [pc, #144]	; (800767c <HAL_RCC_OscConfig+0x2b4>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075ee:	f002 f98b 	bl	8009908 <HAL_GetTick>
 80075f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075f4:	e008      	b.n	8007608 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075f6:	f002 f987 	bl	8009908 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d901      	bls.n	8007608 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e144      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007608:	4b1a      	ldr	r3, [pc, #104]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 800760a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760c:	f003 0302 	and.w	r3, r3, #2
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1f0      	bne.n	80075f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0304 	and.w	r3, r3, #4
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 80a0 	beq.w	8007762 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007622:	2300      	movs	r3, #0
 8007624:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007626:	4b13      	ldr	r3, [pc, #76]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10f      	bne.n	8007652 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]
 8007636:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	4a0e      	ldr	r2, [pc, #56]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 800763c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007640:	6413      	str	r3, [r2, #64]	; 0x40
 8007642:	4b0c      	ldr	r3, [pc, #48]	; (8007674 <HAL_RCC_OscConfig+0x2ac>)
 8007644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800764a:	60bb      	str	r3, [r7, #8]
 800764c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800764e:	2301      	movs	r3, #1
 8007650:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007652:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <HAL_RCC_OscConfig+0x2b8>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800765a:	2b00      	cmp	r3, #0
 800765c:	d121      	bne.n	80076a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800765e:	4b08      	ldr	r3, [pc, #32]	; (8007680 <HAL_RCC_OscConfig+0x2b8>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a07      	ldr	r2, [pc, #28]	; (8007680 <HAL_RCC_OscConfig+0x2b8>)
 8007664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800766a:	f002 f94d 	bl	8009908 <HAL_GetTick>
 800766e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007670:	e011      	b.n	8007696 <HAL_RCC_OscConfig+0x2ce>
 8007672:	bf00      	nop
 8007674:	40023800 	.word	0x40023800
 8007678:	42470000 	.word	0x42470000
 800767c:	42470e80 	.word	0x42470e80
 8007680:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007684:	f002 f940 	bl	8009908 <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	2b02      	cmp	r3, #2
 8007690:	d901      	bls.n	8007696 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e0fd      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007696:	4b81      	ldr	r3, [pc, #516]	; (800789c <HAL_RCC_OscConfig+0x4d4>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d0f0      	beq.n	8007684 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d106      	bne.n	80076b8 <HAL_RCC_OscConfig+0x2f0>
 80076aa:	4b7d      	ldr	r3, [pc, #500]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80076ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ae:	4a7c      	ldr	r2, [pc, #496]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80076b0:	f043 0301 	orr.w	r3, r3, #1
 80076b4:	6713      	str	r3, [r2, #112]	; 0x70
 80076b6:	e01c      	b.n	80076f2 <HAL_RCC_OscConfig+0x32a>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	2b05      	cmp	r3, #5
 80076be:	d10c      	bne.n	80076da <HAL_RCC_OscConfig+0x312>
 80076c0:	4b77      	ldr	r3, [pc, #476]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80076c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c4:	4a76      	ldr	r2, [pc, #472]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80076c6:	f043 0304 	orr.w	r3, r3, #4
 80076ca:	6713      	str	r3, [r2, #112]	; 0x70
 80076cc:	4b74      	ldr	r3, [pc, #464]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80076ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d0:	4a73      	ldr	r2, [pc, #460]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80076d2:	f043 0301 	orr.w	r3, r3, #1
 80076d6:	6713      	str	r3, [r2, #112]	; 0x70
 80076d8:	e00b      	b.n	80076f2 <HAL_RCC_OscConfig+0x32a>
 80076da:	4b71      	ldr	r3, [pc, #452]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80076dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076de:	4a70      	ldr	r2, [pc, #448]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80076e0:	f023 0301 	bic.w	r3, r3, #1
 80076e4:	6713      	str	r3, [r2, #112]	; 0x70
 80076e6:	4b6e      	ldr	r3, [pc, #440]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80076e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ea:	4a6d      	ldr	r2, [pc, #436]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80076ec:	f023 0304 	bic.w	r3, r3, #4
 80076f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d015      	beq.n	8007726 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076fa:	f002 f905 	bl	8009908 <HAL_GetTick>
 80076fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007700:	e00a      	b.n	8007718 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007702:	f002 f901 	bl	8009908 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007710:	4293      	cmp	r3, r2
 8007712:	d901      	bls.n	8007718 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007714:	2303      	movs	r3, #3
 8007716:	e0bc      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007718:	4b61      	ldr	r3, [pc, #388]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 800771a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0ee      	beq.n	8007702 <HAL_RCC_OscConfig+0x33a>
 8007724:	e014      	b.n	8007750 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007726:	f002 f8ef 	bl	8009908 <HAL_GetTick>
 800772a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800772c:	e00a      	b.n	8007744 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800772e:	f002 f8eb 	bl	8009908 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	f241 3288 	movw	r2, #5000	; 0x1388
 800773c:	4293      	cmp	r3, r2
 800773e:	d901      	bls.n	8007744 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e0a6      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007744:	4b56      	ldr	r3, [pc, #344]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 8007746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1ee      	bne.n	800772e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007750:	7dfb      	ldrb	r3, [r7, #23]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d105      	bne.n	8007762 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007756:	4b52      	ldr	r3, [pc, #328]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	4a51      	ldr	r2, [pc, #324]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 800775c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007760:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 8092 	beq.w	8007890 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800776c:	4b4c      	ldr	r3, [pc, #304]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 030c 	and.w	r3, r3, #12
 8007774:	2b08      	cmp	r3, #8
 8007776:	d05c      	beq.n	8007832 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	2b02      	cmp	r3, #2
 800777e:	d141      	bne.n	8007804 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007780:	4b48      	ldr	r3, [pc, #288]	; (80078a4 <HAL_RCC_OscConfig+0x4dc>)
 8007782:	2200      	movs	r2, #0
 8007784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007786:	f002 f8bf 	bl	8009908 <HAL_GetTick>
 800778a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800778c:	e008      	b.n	80077a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800778e:	f002 f8bb 	bl	8009908 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e078      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077a0:	4b3f      	ldr	r3, [pc, #252]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1f0      	bne.n	800778e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	69da      	ldr	r2, [r3, #28]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a1b      	ldr	r3, [r3, #32]
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	019b      	lsls	r3, r3, #6
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c2:	085b      	lsrs	r3, r3, #1
 80077c4:	3b01      	subs	r3, #1
 80077c6:	041b      	lsls	r3, r3, #16
 80077c8:	431a      	orrs	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ce:	061b      	lsls	r3, r3, #24
 80077d0:	4933      	ldr	r1, [pc, #204]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077d6:	4b33      	ldr	r3, [pc, #204]	; (80078a4 <HAL_RCC_OscConfig+0x4dc>)
 80077d8:	2201      	movs	r2, #1
 80077da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077dc:	f002 f894 	bl	8009908 <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077e4:	f002 f890 	bl	8009908 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e04d      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077f6:	4b2a      	ldr	r3, [pc, #168]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f0      	beq.n	80077e4 <HAL_RCC_OscConfig+0x41c>
 8007802:	e045      	b.n	8007890 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007804:	4b27      	ldr	r3, [pc, #156]	; (80078a4 <HAL_RCC_OscConfig+0x4dc>)
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800780a:	f002 f87d 	bl	8009908 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007810:	e008      	b.n	8007824 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007812:	f002 f879 	bl	8009908 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d901      	bls.n	8007824 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e036      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007824:	4b1e      	ldr	r3, [pc, #120]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f0      	bne.n	8007812 <HAL_RCC_OscConfig+0x44a>
 8007830:	e02e      	b.n	8007890 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d101      	bne.n	800783e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e029      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800783e:	4b18      	ldr	r3, [pc, #96]	; (80078a0 <HAL_RCC_OscConfig+0x4d8>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	429a      	cmp	r2, r3
 8007850:	d11c      	bne.n	800788c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800785c:	429a      	cmp	r2, r3
 800785e:	d115      	bne.n	800788c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007866:	4013      	ands	r3, r2
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800786c:	4293      	cmp	r3, r2
 800786e:	d10d      	bne.n	800788c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800787a:	429a      	cmp	r2, r3
 800787c:	d106      	bne.n	800788c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007888:	429a      	cmp	r2, r3
 800788a:	d001      	beq.n	8007890 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e000      	b.n	8007892 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	40007000 	.word	0x40007000
 80078a0:	40023800 	.word	0x40023800
 80078a4:	42470060 	.word	0x42470060

080078a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0cc      	b.n	8007a56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078bc:	4b68      	ldr	r3, [pc, #416]	; (8007a60 <HAL_RCC_ClockConfig+0x1b8>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 030f 	and.w	r3, r3, #15
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d90c      	bls.n	80078e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078ca:	4b65      	ldr	r3, [pc, #404]	; (8007a60 <HAL_RCC_ClockConfig+0x1b8>)
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078d2:	4b63      	ldr	r3, [pc, #396]	; (8007a60 <HAL_RCC_ClockConfig+0x1b8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d001      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e0b8      	b.n	8007a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d020      	beq.n	8007932 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078fc:	4b59      	ldr	r3, [pc, #356]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	4a58      	ldr	r2, [pc, #352]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007902:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007906:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f003 0308 	and.w	r3, r3, #8
 8007910:	2b00      	cmp	r3, #0
 8007912:	d005      	beq.n	8007920 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007914:	4b53      	ldr	r3, [pc, #332]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	4a52      	ldr	r2, [pc, #328]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 800791a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800791e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007920:	4b50      	ldr	r3, [pc, #320]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	494d      	ldr	r1, [pc, #308]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 800792e:	4313      	orrs	r3, r2
 8007930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d044      	beq.n	80079c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d107      	bne.n	8007956 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007946:	4b47      	ldr	r3, [pc, #284]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800794e:	2b00      	cmp	r3, #0
 8007950:	d119      	bne.n	8007986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e07f      	b.n	8007a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d003      	beq.n	8007966 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007962:	2b03      	cmp	r3, #3
 8007964:	d107      	bne.n	8007976 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007966:	4b3f      	ldr	r3, [pc, #252]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e06f      	b.n	8007a56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007976:	4b3b      	ldr	r3, [pc, #236]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e067      	b.n	8007a56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007986:	4b37      	ldr	r3, [pc, #220]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f023 0203 	bic.w	r2, r3, #3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	4934      	ldr	r1, [pc, #208]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007994:	4313      	orrs	r3, r2
 8007996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007998:	f001 ffb6 	bl	8009908 <HAL_GetTick>
 800799c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800799e:	e00a      	b.n	80079b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079a0:	f001 ffb2 	bl	8009908 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e04f      	b.n	8007a56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079b6:	4b2b      	ldr	r3, [pc, #172]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 020c 	and.w	r2, r3, #12
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d1eb      	bne.n	80079a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079c8:	4b25      	ldr	r3, [pc, #148]	; (8007a60 <HAL_RCC_ClockConfig+0x1b8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 030f 	and.w	r3, r3, #15
 80079d0:	683a      	ldr	r2, [r7, #0]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d20c      	bcs.n	80079f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079d6:	4b22      	ldr	r3, [pc, #136]	; (8007a60 <HAL_RCC_ClockConfig+0x1b8>)
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	b2d2      	uxtb	r2, r2
 80079dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079de:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <HAL_RCC_ClockConfig+0x1b8>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 030f 	and.w	r3, r3, #15
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d001      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e032      	b.n	8007a56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 0304 	and.w	r3, r3, #4
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d008      	beq.n	8007a0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079fc:	4b19      	ldr	r3, [pc, #100]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	4916      	ldr	r1, [pc, #88]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a1a:	4b12      	ldr	r3, [pc, #72]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	490e      	ldr	r1, [pc, #56]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a2e:	f000 f821 	bl	8007a74 <HAL_RCC_GetSysClockFreq>
 8007a32:	4601      	mov	r1, r0
 8007a34:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <HAL_RCC_ClockConfig+0x1bc>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	091b      	lsrs	r3, r3, #4
 8007a3a:	f003 030f 	and.w	r3, r3, #15
 8007a3e:	4a0a      	ldr	r2, [pc, #40]	; (8007a68 <HAL_RCC_ClockConfig+0x1c0>)
 8007a40:	5cd3      	ldrb	r3, [r2, r3]
 8007a42:	fa21 f303 	lsr.w	r3, r1, r3
 8007a46:	4a09      	ldr	r2, [pc, #36]	; (8007a6c <HAL_RCC_ClockConfig+0x1c4>)
 8007a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007a4a:	4b09      	ldr	r3, [pc, #36]	; (8007a70 <HAL_RCC_ClockConfig+0x1c8>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fd f820 	bl	8004a94 <HAL_InitTick>

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	40023c00 	.word	0x40023c00
 8007a64:	40023800 	.word	0x40023800
 8007a68:	0801099c 	.word	0x0801099c
 8007a6c:	20000968 	.word	0x20000968
 8007a70:	2000096c 	.word	0x2000096c

08007a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	607b      	str	r3, [r7, #4]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	2300      	movs	r3, #0
 8007a84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a8a:	4b63      	ldr	r3, [pc, #396]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f003 030c 	and.w	r3, r3, #12
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d007      	beq.n	8007aa6 <HAL_RCC_GetSysClockFreq+0x32>
 8007a96:	2b08      	cmp	r3, #8
 8007a98:	d008      	beq.n	8007aac <HAL_RCC_GetSysClockFreq+0x38>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f040 80b4 	bne.w	8007c08 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007aa0:	4b5e      	ldr	r3, [pc, #376]	; (8007c1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007aa2:	60bb      	str	r3, [r7, #8]
       break;
 8007aa4:	e0b3      	b.n	8007c0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007aa6:	4b5e      	ldr	r3, [pc, #376]	; (8007c20 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007aa8:	60bb      	str	r3, [r7, #8]
      break;
 8007aaa:	e0b0      	b.n	8007c0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007aac:	4b5a      	ldr	r3, [pc, #360]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ab4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ab6:	4b58      	ldr	r3, [pc, #352]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d04a      	beq.n	8007b58 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ac2:	4b55      	ldr	r3, [pc, #340]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	099b      	lsrs	r3, r3, #6
 8007ac8:	f04f 0400 	mov.w	r4, #0
 8007acc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ad0:	f04f 0200 	mov.w	r2, #0
 8007ad4:	ea03 0501 	and.w	r5, r3, r1
 8007ad8:	ea04 0602 	and.w	r6, r4, r2
 8007adc:	4629      	mov	r1, r5
 8007ade:	4632      	mov	r2, r6
 8007ae0:	f04f 0300 	mov.w	r3, #0
 8007ae4:	f04f 0400 	mov.w	r4, #0
 8007ae8:	0154      	lsls	r4, r2, #5
 8007aea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007aee:	014b      	lsls	r3, r1, #5
 8007af0:	4619      	mov	r1, r3
 8007af2:	4622      	mov	r2, r4
 8007af4:	1b49      	subs	r1, r1, r5
 8007af6:	eb62 0206 	sbc.w	r2, r2, r6
 8007afa:	f04f 0300 	mov.w	r3, #0
 8007afe:	f04f 0400 	mov.w	r4, #0
 8007b02:	0194      	lsls	r4, r2, #6
 8007b04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007b08:	018b      	lsls	r3, r1, #6
 8007b0a:	1a5b      	subs	r3, r3, r1
 8007b0c:	eb64 0402 	sbc.w	r4, r4, r2
 8007b10:	f04f 0100 	mov.w	r1, #0
 8007b14:	f04f 0200 	mov.w	r2, #0
 8007b18:	00e2      	lsls	r2, r4, #3
 8007b1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007b1e:	00d9      	lsls	r1, r3, #3
 8007b20:	460b      	mov	r3, r1
 8007b22:	4614      	mov	r4, r2
 8007b24:	195b      	adds	r3, r3, r5
 8007b26:	eb44 0406 	adc.w	r4, r4, r6
 8007b2a:	f04f 0100 	mov.w	r1, #0
 8007b2e:	f04f 0200 	mov.w	r2, #0
 8007b32:	0262      	lsls	r2, r4, #9
 8007b34:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007b38:	0259      	lsls	r1, r3, #9
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	4614      	mov	r4, r2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	4621      	mov	r1, r4
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f04f 0400 	mov.w	r4, #0
 8007b48:	461a      	mov	r2, r3
 8007b4a:	4623      	mov	r3, r4
 8007b4c:	f7f9 f8ac 	bl	8000ca8 <__aeabi_uldivmod>
 8007b50:	4603      	mov	r3, r0
 8007b52:	460c      	mov	r4, r1
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	e049      	b.n	8007bec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b58:	4b2f      	ldr	r3, [pc, #188]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	099b      	lsrs	r3, r3, #6
 8007b5e:	f04f 0400 	mov.w	r4, #0
 8007b62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007b66:	f04f 0200 	mov.w	r2, #0
 8007b6a:	ea03 0501 	and.w	r5, r3, r1
 8007b6e:	ea04 0602 	and.w	r6, r4, r2
 8007b72:	4629      	mov	r1, r5
 8007b74:	4632      	mov	r2, r6
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	f04f 0400 	mov.w	r4, #0
 8007b7e:	0154      	lsls	r4, r2, #5
 8007b80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007b84:	014b      	lsls	r3, r1, #5
 8007b86:	4619      	mov	r1, r3
 8007b88:	4622      	mov	r2, r4
 8007b8a:	1b49      	subs	r1, r1, r5
 8007b8c:	eb62 0206 	sbc.w	r2, r2, r6
 8007b90:	f04f 0300 	mov.w	r3, #0
 8007b94:	f04f 0400 	mov.w	r4, #0
 8007b98:	0194      	lsls	r4, r2, #6
 8007b9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007b9e:	018b      	lsls	r3, r1, #6
 8007ba0:	1a5b      	subs	r3, r3, r1
 8007ba2:	eb64 0402 	sbc.w	r4, r4, r2
 8007ba6:	f04f 0100 	mov.w	r1, #0
 8007baa:	f04f 0200 	mov.w	r2, #0
 8007bae:	00e2      	lsls	r2, r4, #3
 8007bb0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007bb4:	00d9      	lsls	r1, r3, #3
 8007bb6:	460b      	mov	r3, r1
 8007bb8:	4614      	mov	r4, r2
 8007bba:	195b      	adds	r3, r3, r5
 8007bbc:	eb44 0406 	adc.w	r4, r4, r6
 8007bc0:	f04f 0100 	mov.w	r1, #0
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	02a2      	lsls	r2, r4, #10
 8007bca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007bce:	0299      	lsls	r1, r3, #10
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	4614      	mov	r4, r2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f04f 0400 	mov.w	r4, #0
 8007bde:	461a      	mov	r2, r3
 8007be0:	4623      	mov	r3, r4
 8007be2:	f7f9 f861 	bl	8000ca8 <__aeabi_uldivmod>
 8007be6:	4603      	mov	r3, r0
 8007be8:	460c      	mov	r4, r1
 8007bea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007bec:	4b0a      	ldr	r3, [pc, #40]	; (8007c18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	0c1b      	lsrs	r3, r3, #16
 8007bf2:	f003 0303 	and.w	r3, r3, #3
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	005b      	lsls	r3, r3, #1
 8007bfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c04:	60bb      	str	r3, [r7, #8]
      break;
 8007c06:	e002      	b.n	8007c0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c08:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007c0a:	60bb      	str	r3, [r7, #8]
      break;
 8007c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c18:	40023800 	.word	0x40023800
 8007c1c:	00f42400 	.word	0x00f42400
 8007c20:	007a1200 	.word	0x007a1200

08007c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c28:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	20000968 	.word	0x20000968

08007c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007c40:	f7ff fff0 	bl	8007c24 <HAL_RCC_GetHCLKFreq>
 8007c44:	4601      	mov	r1, r0
 8007c46:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	0a9b      	lsrs	r3, r3, #10
 8007c4c:	f003 0307 	and.w	r3, r3, #7
 8007c50:	4a03      	ldr	r2, [pc, #12]	; (8007c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c52:	5cd3      	ldrb	r3, [r2, r3]
 8007c54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	40023800 	.word	0x40023800
 8007c60:	080109ac 	.word	0x080109ac

08007c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007c68:	f7ff ffdc 	bl	8007c24 <HAL_RCC_GetHCLKFreq>
 8007c6c:	4601      	mov	r1, r0
 8007c6e:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	0b5b      	lsrs	r3, r3, #13
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	4a03      	ldr	r2, [pc, #12]	; (8007c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c7a:	5cd3      	ldrb	r3, [r2, r3]
 8007c7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	40023800 	.word	0x40023800
 8007c88:	080109ac 	.word	0x080109ac

08007c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10b      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d105      	bne.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d075      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007cc0:	4bad      	ldr	r3, [pc, #692]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cc6:	f001 fe1f 	bl	8009908 <HAL_GetTick>
 8007cca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ccc:	e008      	b.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007cce:	f001 fe1b 	bl	8009908 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e18b      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ce0:	4ba6      	ldr	r3, [pc, #664]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1f0      	bne.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d009      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	019a      	lsls	r2, r3, #6
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	071b      	lsls	r3, r3, #28
 8007d04:	499d      	ldr	r1, [pc, #628]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0302 	and.w	r3, r3, #2
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01f      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d18:	4b98      	ldr	r3, [pc, #608]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d1e:	0f1b      	lsrs	r3, r3, #28
 8007d20:	f003 0307 	and.w	r3, r3, #7
 8007d24:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	019a      	lsls	r2, r3, #6
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	061b      	lsls	r3, r3, #24
 8007d32:	431a      	orrs	r2, r3
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	071b      	lsls	r3, r3, #28
 8007d38:	4990      	ldr	r1, [pc, #576]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d40:	4b8e      	ldr	r3, [pc, #568]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d46:	f023 021f 	bic.w	r2, r3, #31
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	69db      	ldr	r3, [r3, #28]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	498a      	ldr	r1, [pc, #552]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00d      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	019a      	lsls	r2, r3, #6
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	061b      	lsls	r3, r3, #24
 8007d70:	431a      	orrs	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	071b      	lsls	r3, r3, #28
 8007d78:	4980      	ldr	r1, [pc, #512]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d80:	4b7d      	ldr	r3, [pc, #500]	; (8007f78 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8007d82:	2201      	movs	r2, #1
 8007d84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d86:	f001 fdbf 	bl	8009908 <HAL_GetTick>
 8007d8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d8c:	e008      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007d8e:	f001 fdbb 	bl	8009908 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d901      	bls.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e12b      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007da0:	4b76      	ldr	r3, [pc, #472]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0f0      	beq.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d079      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007dc4:	4b6e      	ldr	r3, [pc, #440]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007dca:	f001 fd9d 	bl	8009908 <HAL_GetTick>
 8007dce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007dd0:	e008      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007dd2:	f001 fd99 	bl	8009908 <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e109      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007de4:	4b65      	ldr	r3, [pc, #404]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df0:	d0ef      	beq.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d020      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007dfe:	4b5f      	ldr	r3, [pc, #380]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e04:	0f1b      	lsrs	r3, r3, #28
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	019a      	lsls	r2, r3, #6
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	695b      	ldr	r3, [r3, #20]
 8007e16:	061b      	lsls	r3, r3, #24
 8007e18:	431a      	orrs	r2, r3
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	071b      	lsls	r3, r3, #28
 8007e1e:	4957      	ldr	r1, [pc, #348]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e20:	4313      	orrs	r3, r2
 8007e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007e26:	4b55      	ldr	r3, [pc, #340]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	021b      	lsls	r3, r3, #8
 8007e38:	4950      	ldr	r1, [pc, #320]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0308 	and.w	r3, r3, #8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d01e      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e4c:	4b4b      	ldr	r3, [pc, #300]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e52:	0e1b      	lsrs	r3, r3, #24
 8007e54:	f003 030f 	and.w	r3, r3, #15
 8007e58:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	019a      	lsls	r2, r3, #6
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	061b      	lsls	r3, r3, #24
 8007e64:	431a      	orrs	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	071b      	lsls	r3, r3, #28
 8007e6c:	4943      	ldr	r1, [pc, #268]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007e74:	4b41      	ldr	r3, [pc, #260]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	493e      	ldr	r1, [pc, #248]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007e8a:	4b3d      	ldr	r3, [pc, #244]	; (8007f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e90:	f001 fd3a 	bl	8009908 <HAL_GetTick>
 8007e94:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e96:	e008      	b.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007e98:	f001 fd36 	bl	8009908 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e0a6      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007eaa:	4b34      	ldr	r3, [pc, #208]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007eb6:	d1ef      	bne.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 808d 	beq.w	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	4b2c      	ldr	r3, [pc, #176]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ece:	4a2b      	ldr	r2, [pc, #172]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ed6:	4b29      	ldr	r3, [pc, #164]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007ee2:	4b28      	ldr	r3, [pc, #160]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a27      	ldr	r2, [pc, #156]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007eee:	f001 fd0b 	bl	8009908 <HAL_GetTick>
 8007ef2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007ef4:	e008      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007ef6:	f001 fd07 	bl	8009908 <HAL_GetTick>
 8007efa:	4602      	mov	r2, r0
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d901      	bls.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e077      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f08:	4b1e      	ldr	r3, [pc, #120]	; (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0f0      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f14:	4b19      	ldr	r3, [pc, #100]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f1c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d039      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d032      	beq.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f32:	4b12      	ldr	r3, [pc, #72]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f3a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f3c:	4b12      	ldr	r3, [pc, #72]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007f3e:	2201      	movs	r2, #1
 8007f40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f42:	4b11      	ldr	r3, [pc, #68]	; (8007f88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007f44:	2200      	movs	r2, #0
 8007f46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007f48:	4a0c      	ldr	r2, [pc, #48]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007f4e:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d11e      	bne.n	8007f98 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007f5a:	f001 fcd5 	bl	8009908 <HAL_GetTick>
 8007f5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f60:	e014      	b.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f62:	f001 fcd1 	bl	8009908 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d90b      	bls.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e03f      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007f78:	42470068 	.word	0x42470068
 8007f7c:	40023800 	.word	0x40023800
 8007f80:	42470070 	.word	0x42470070
 8007f84:	40007000 	.word	0x40007000
 8007f88:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f8c:	4b1c      	ldr	r3, [pc, #112]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0e4      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fa4:	d10d      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007fa6:	4b16      	ldr	r3, [pc, #88]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fba:	4911      	ldr	r1, [pc, #68]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	608b      	str	r3, [r1, #8]
 8007fc0:	e005      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007fc2:	4b0f      	ldr	r3, [pc, #60]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	4a0e      	ldr	r2, [pc, #56]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fc8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007fcc:	6093      	str	r3, [r2, #8]
 8007fce:	4b0c      	ldr	r3, [pc, #48]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fda:	4909      	ldr	r1, [pc, #36]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 0310 	and.w	r3, r3, #16
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d004      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007ff2:	4b04      	ldr	r3, [pc, #16]	; (8008004 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007ff4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3718      	adds	r7, #24
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}
 8008000:	40023800 	.word	0x40023800
 8008004:	424711e0 	.word	0x424711e0

08008008 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008018:	2301      	movs	r3, #1
 800801a:	e025      	b.n	8008068 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	d106      	bne.n	8008036 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7fa ff35 	bl	8002ea0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2202      	movs	r2, #2
 800803a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	3304      	adds	r3, #4
 8008046:	4619      	mov	r1, r3
 8008048:	4610      	mov	r0, r2
 800804a:	f001 fa65 	bl	8009518 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6818      	ldr	r0, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	461a      	mov	r2, r3
 8008058:	6839      	ldr	r1, [r7, #0]
 800805a:	f001 fad0 	bl	80095fe <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d101      	bne.n	800808c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008088:	2302      	movs	r3, #2
 800808a:	e018      	b.n	80080be <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2202      	movs	r2, #2
 8008090:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	4618      	mov	r0, r3
 800809e:	f001 fb2d 	bl	80096fc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d104      	bne.n	80080b4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2205      	movs	r2, #5
 80080ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80080b2:	e003      	b.n	80080bc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b082      	sub	sp, #8
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d101      	bne.n	80080e0 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80080dc:	2302      	movs	r3, #2
 80080de:	e00e      	b.n	80080fe <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6839      	ldr	r1, [r7, #0]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 fb40 	bl	8009774 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b082      	sub	sp, #8
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d101      	bne.n	8008118 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e056      	b.n	80081c6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d106      	bne.n	8008138 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fc f9ac 	bl	8004490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800814e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	431a      	orrs	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	431a      	orrs	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008174:	431a      	orrs	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a1b      	ldr	r3, [r3, #32]
 8008180:	ea42 0103 	orr.w	r1, r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	0c1b      	lsrs	r3, r3, #16
 8008196:	f003 0104 	and.w	r1, r3, #4
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	69da      	ldr	r2, [r3, #28]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b082      	sub	sp, #8
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d101      	bne.n	80081e0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e01d      	b.n	800821c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d106      	bne.n	80081fa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7fc fab3 	bl	8004760 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2202      	movs	r2, #2
 80081fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	3304      	adds	r3, #4
 800820a:	4619      	mov	r1, r3
 800820c:	4610      	mov	r0, r2
 800820e:	f000 f967 	bl	80084e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f042 0201 	orr.w	r2, r2, #1
 800823a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 0307 	and.w	r3, r3, #7
 8008246:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b06      	cmp	r3, #6
 800824c:	d007      	beq.n	800825e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f042 0201 	orr.w	r2, r2, #1
 800825c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f003 0302 	and.w	r3, r3, #2
 800827e:	2b02      	cmp	r3, #2
 8008280:	d122      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b02      	cmp	r3, #2
 800828e:	d11b      	bne.n	80082c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f06f 0202 	mvn.w	r2, #2
 8008298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	699b      	ldr	r3, [r3, #24]
 80082a6:	f003 0303 	and.w	r3, r3, #3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f8f8 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 80082b4:	e005      	b.n	80082c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f8ea 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f8fb 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d122      	bne.n	800831c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	f003 0304 	and.w	r3, r3, #4
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d11b      	bne.n	800831c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f06f 0204 	mvn.w	r2, #4
 80082ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2202      	movs	r2, #2
 80082f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f8ce 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 8008308:	e005      	b.n	8008316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f8c0 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f8d1 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	f003 0308 	and.w	r3, r3, #8
 8008326:	2b08      	cmp	r3, #8
 8008328:	d122      	bne.n	8008370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f003 0308 	and.w	r3, r3, #8
 8008334:	2b08      	cmp	r3, #8
 8008336:	d11b      	bne.n	8008370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f06f 0208 	mvn.w	r2, #8
 8008340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2204      	movs	r2, #4
 8008346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	f003 0303 	and.w	r3, r3, #3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d003      	beq.n	800835e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f8a4 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 800835c:	e005      	b.n	800836a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f896 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f8a7 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	691b      	ldr	r3, [r3, #16]
 8008376:	f003 0310 	and.w	r3, r3, #16
 800837a:	2b10      	cmp	r3, #16
 800837c:	d122      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f003 0310 	and.w	r3, r3, #16
 8008388:	2b10      	cmp	r3, #16
 800838a:	d11b      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f06f 0210 	mvn.w	r2, #16
 8008394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2208      	movs	r2, #8
 800839a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f87a 	bl	80084a4 <HAL_TIM_IC_CaptureCallback>
 80083b0:	e005      	b.n	80083be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 f86c 	bl	8008490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f87d 	bl	80084b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2200      	movs	r2, #0
 80083c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0301 	and.w	r3, r3, #1
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d10e      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d107      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f06f 0201 	mvn.w	r2, #1
 80083e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f846 	bl	800847c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fa:	2b80      	cmp	r3, #128	; 0x80
 80083fc:	d10e      	bne.n	800841c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008408:	2b80      	cmp	r3, #128	; 0x80
 800840a:	d107      	bne.n	800841c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f988 	bl	800872c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d10e      	bne.n	8008448 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008434:	2b40      	cmp	r3, #64	; 0x40
 8008436:	d107      	bne.n	8008448 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f842 	bl	80084cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	f003 0320 	and.w	r3, r3, #32
 8008452:	2b20      	cmp	r3, #32
 8008454:	d10e      	bne.n	8008474 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f003 0320 	and.w	r3, r3, #32
 8008460:	2b20      	cmp	r3, #32
 8008462:	d107      	bne.n	8008474 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f06f 0220 	mvn.w	r2, #32
 800846c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f952 	bl	8008718 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008474:	bf00      	nop
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	4a40      	ldr	r2, [pc, #256]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d013      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fe:	d00f      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a3d      	ldr	r2, [pc, #244]	; (80085f8 <TIM_Base_SetConfig+0x118>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00b      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a3c      	ldr	r2, [pc, #240]	; (80085fc <TIM_Base_SetConfig+0x11c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d007      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a3b      	ldr	r2, [pc, #236]	; (8008600 <TIM_Base_SetConfig+0x120>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_Base_SetConfig+0x40>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a3a      	ldr	r2, [pc, #232]	; (8008604 <TIM_Base_SetConfig+0x124>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d108      	bne.n	8008532 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	68fa      	ldr	r2, [r7, #12]
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	4a2f      	ldr	r2, [pc, #188]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d02b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008540:	d027      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a2c      	ldr	r2, [pc, #176]	; (80085f8 <TIM_Base_SetConfig+0x118>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d023      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a2b      	ldr	r2, [pc, #172]	; (80085fc <TIM_Base_SetConfig+0x11c>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d01f      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a2a      	ldr	r2, [pc, #168]	; (8008600 <TIM_Base_SetConfig+0x120>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d01b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a29      	ldr	r2, [pc, #164]	; (8008604 <TIM_Base_SetConfig+0x124>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d017      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a28      	ldr	r2, [pc, #160]	; (8008608 <TIM_Base_SetConfig+0x128>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d013      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a27      	ldr	r2, [pc, #156]	; (800860c <TIM_Base_SetConfig+0x12c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d00f      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a26      	ldr	r2, [pc, #152]	; (8008610 <TIM_Base_SetConfig+0x130>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d00b      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a25      	ldr	r2, [pc, #148]	; (8008614 <TIM_Base_SetConfig+0x134>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d007      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4a24      	ldr	r2, [pc, #144]	; (8008618 <TIM_Base_SetConfig+0x138>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d003      	beq.n	8008592 <TIM_Base_SetConfig+0xb2>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a23      	ldr	r2, [pc, #140]	; (800861c <TIM_Base_SetConfig+0x13c>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d108      	bne.n	80085a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a0a      	ldr	r2, [pc, #40]	; (80085f4 <TIM_Base_SetConfig+0x114>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d003      	beq.n	80085d8 <TIM_Base_SetConfig+0xf8>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a0c      	ldr	r2, [pc, #48]	; (8008604 <TIM_Base_SetConfig+0x124>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d103      	bne.n	80085e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	615a      	str	r2, [r3, #20]
}
 80085e6:	bf00      	nop
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40010000 	.word	0x40010000
 80085f8:	40000400 	.word	0x40000400
 80085fc:	40000800 	.word	0x40000800
 8008600:	40000c00 	.word	0x40000c00
 8008604:	40010400 	.word	0x40010400
 8008608:	40014000 	.word	0x40014000
 800860c:	40014400 	.word	0x40014400
 8008610:	40014800 	.word	0x40014800
 8008614:	40001800 	.word	0x40001800
 8008618:	40001c00 	.word	0x40001c00
 800861c:	40002000 	.word	0x40002000

08008620 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008630:	2b01      	cmp	r3, #1
 8008632:	d101      	bne.n	8008638 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008634:	2302      	movs	r3, #2
 8008636:	e05a      	b.n	80086ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a21      	ldr	r2, [pc, #132]	; (80086fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d022      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008684:	d01d      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a1d      	ldr	r2, [pc, #116]	; (8008700 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d018      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a1b      	ldr	r2, [pc, #108]	; (8008704 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d013      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a1a      	ldr	r2, [pc, #104]	; (8008708 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d00e      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a18      	ldr	r2, [pc, #96]	; (800870c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d009      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a17      	ldr	r2, [pc, #92]	; (8008710 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d004      	beq.n	80086c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a15      	ldr	r2, [pc, #84]	; (8008714 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d10c      	bne.n	80086dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	40010000 	.word	0x40010000
 8008700:	40000400 	.word	0x40000400
 8008704:	40000800 	.word	0x40000800
 8008708:	40000c00 	.word	0x40000c00
 800870c:	40010400 	.word	0x40010400
 8008710:	40014000 	.word	0x40014000
 8008714:	40001800 	.word	0x40001800

08008718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d101      	bne.n	8008752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e03f      	b.n	80087d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008758:	b2db      	uxtb	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	d106      	bne.n	800876c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7fc f856 	bl	8004818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2224      	movs	r2, #36	; 0x24
 8008770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb4b 	bl	8008e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	691a      	ldr	r2, [r3, #16]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	695a      	ldr	r2, [r3, #20]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68da      	ldr	r2, [r3, #12]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b088      	sub	sp, #32
 80087de:	af02      	add	r7, sp, #8
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	60b9      	str	r1, [r7, #8]
 80087e4:	603b      	str	r3, [r7, #0]
 80087e6:	4613      	mov	r3, r2
 80087e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	f040 8083 	bne.w	8008902 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <HAL_UART_Transmit+0x2e>
 8008802:	88fb      	ldrh	r3, [r7, #6]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	e07b      	b.n	8008904 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008812:	2b01      	cmp	r3, #1
 8008814:	d101      	bne.n	800881a <HAL_UART_Transmit+0x40>
 8008816:	2302      	movs	r3, #2
 8008818:	e074      	b.n	8008904 <HAL_UART_Transmit+0x12a>
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2200      	movs	r2, #0
 8008826:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2221      	movs	r2, #33	; 0x21
 800882c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008830:	f001 f86a 	bl	8009908 <HAL_GetTick>
 8008834:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	88fa      	ldrh	r2, [r7, #6]
 800883a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	88fa      	ldrh	r2, [r7, #6]
 8008840:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800884a:	e042      	b.n	80088d2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008850:	b29b      	uxth	r3, r3
 8008852:	3b01      	subs	r3, #1
 8008854:	b29a      	uxth	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008862:	d122      	bne.n	80088aa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2200      	movs	r2, #0
 800886c:	2180      	movs	r1, #128	; 0x80
 800886e:	68f8      	ldr	r0, [r7, #12]
 8008870:	f000 f96a 	bl	8008b48 <UART_WaitOnFlagUntilTimeout>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800887a:	2303      	movs	r3, #3
 800887c:	e042      	b.n	8008904 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	461a      	mov	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008890:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d103      	bne.n	80088a2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	3302      	adds	r3, #2
 800889e:	60bb      	str	r3, [r7, #8]
 80088a0:	e017      	b.n	80088d2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	3301      	adds	r3, #1
 80088a6:	60bb      	str	r3, [r7, #8]
 80088a8:	e013      	b.n	80088d2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	9300      	str	r3, [sp, #0]
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	2200      	movs	r2, #0
 80088b2:	2180      	movs	r1, #128	; 0x80
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f947 	bl	8008b48 <UART_WaitOnFlagUntilTimeout>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d001      	beq.n	80088c4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e01f      	b.n	8008904 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	1c5a      	adds	r2, r3, #1
 80088c8:	60ba      	str	r2, [r7, #8]
 80088ca:	781a      	ldrb	r2, [r3, #0]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1b7      	bne.n	800884c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	2200      	movs	r2, #0
 80088e4:	2140      	movs	r1, #64	; 0x40
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 f92e 	bl	8008b48 <UART_WaitOnFlagUntilTimeout>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e006      	b.n	8008904 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80088fe:	2300      	movs	r3, #0
 8008900:	e000      	b.n	8008904 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008902:	2302      	movs	r3, #2
  }
}
 8008904:	4618      	mov	r0, r3
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b088      	sub	sp, #32
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	695b      	ldr	r3, [r3, #20]
 800892a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800892c:	2300      	movs	r3, #0
 800892e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	f003 030f 	and.w	r3, r3, #15
 800893a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10d      	bne.n	800895e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	f003 0320 	and.w	r3, r3, #32
 8008948:	2b00      	cmp	r3, #0
 800894a:	d008      	beq.n	800895e <HAL_UART_IRQHandler+0x52>
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	f003 0320 	and.w	r3, r3, #32
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f9e0 	bl	8008d1c <UART_Receive_IT>
      return;
 800895c:	e0d1      	b.n	8008b02 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 80b0 	beq.w	8008ac6 <HAL_UART_IRQHandler+0x1ba>
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d105      	bne.n	800897c <HAL_UART_IRQHandler+0x70>
 8008970:	69bb      	ldr	r3, [r7, #24]
 8008972:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 80a5 	beq.w	8008ac6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <HAL_UART_IRQHandler+0x90>
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898c:	2b00      	cmp	r3, #0
 800898e:	d005      	beq.n	800899c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008994:	f043 0201 	orr.w	r2, r3, #1
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	f003 0304 	and.w	r3, r3, #4
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00a      	beq.n	80089bc <HAL_UART_IRQHandler+0xb0>
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	f003 0301 	and.w	r3, r3, #1
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b4:	f043 0202 	orr.w	r2, r3, #2
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00a      	beq.n	80089dc <HAL_UART_IRQHandler+0xd0>
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f003 0301 	and.w	r3, r3, #1
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d005      	beq.n	80089dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d4:	f043 0204 	orr.w	r2, r3, #4
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	f003 0308 	and.w	r3, r3, #8
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00f      	beq.n	8008a06 <HAL_UART_IRQHandler+0xfa>
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	f003 0320 	and.w	r3, r3, #32
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d104      	bne.n	80089fa <HAL_UART_IRQHandler+0xee>
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d005      	beq.n	8008a06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fe:	f043 0208 	orr.w	r2, r3, #8
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d078      	beq.n	8008b00 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	f003 0320 	and.w	r3, r3, #32
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d007      	beq.n	8008a28 <HAL_UART_IRQHandler+0x11c>
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	f003 0320 	and.w	r3, r3, #32
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d002      	beq.n	8008a28 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f97a 	bl	8008d1c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	695b      	ldr	r3, [r3, #20]
 8008a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a32:	2b40      	cmp	r3, #64	; 0x40
 8008a34:	bf0c      	ite	eq
 8008a36:	2301      	moveq	r3, #1
 8008a38:	2300      	movne	r3, #0
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a42:	f003 0308 	and.w	r3, r3, #8
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d102      	bne.n	8008a50 <HAL_UART_IRQHandler+0x144>
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d031      	beq.n	8008ab4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 f8c3 	bl	8008bdc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a60:	2b40      	cmp	r3, #64	; 0x40
 8008a62:	d123      	bne.n	8008aac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	695a      	ldr	r2, [r3, #20]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a72:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d013      	beq.n	8008aa4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a80:	4a21      	ldr	r2, [pc, #132]	; (8008b08 <HAL_UART_IRQHandler+0x1fc>)
 8008a82:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7fd f993 	bl	8005db4 <HAL_DMA_Abort_IT>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d016      	beq.n	8008ac2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa2:	e00e      	b.n	8008ac2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f845 	bl	8008b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aaa:	e00a      	b.n	8008ac2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 f841 	bl	8008b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ab2:	e006      	b.n	8008ac2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f83d 	bl	8008b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008ac0:	e01e      	b.n	8008b00 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac2:	bf00      	nop
    return;
 8008ac4:	e01c      	b.n	8008b00 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d008      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x1d6>
 8008ad0:	69bb      	ldr	r3, [r7, #24]
 8008ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f8b0 	bl	8008c40 <UART_Transmit_IT>
    return;
 8008ae0:	e00f      	b.n	8008b02 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00a      	beq.n	8008b02 <HAL_UART_IRQHandler+0x1f6>
 8008aec:	69bb      	ldr	r3, [r7, #24]
 8008aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f8f8 	bl	8008cec <UART_EndTransmit_IT>
    return;
 8008afc:	bf00      	nop
 8008afe:	e000      	b.n	8008b02 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008b00:	bf00      	nop
  }
}
 8008b02:	3720      	adds	r7, #32
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	08008c19 	.word	0x08008c19

08008b0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	603b      	str	r3, [r7, #0]
 8008b54:	4613      	mov	r3, r2
 8008b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b58:	e02c      	b.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b60:	d028      	beq.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d007      	beq.n	8008b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b68:	f000 fece 	bl	8009908 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d21d      	bcs.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b86:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695a      	ldr	r2, [r3, #20]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 0201 	bic.w	r2, r2, #1
 8008b96:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2220      	movs	r2, #32
 8008b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e00f      	b.n	8008bd4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	bf0c      	ite	eq
 8008bc4:	2301      	moveq	r3, #1
 8008bc6:	2300      	movne	r3, #0
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	461a      	mov	r2, r3
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d0c3      	beq.n	8008b5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68da      	ldr	r2, [r3, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bf2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	695a      	ldr	r2, [r3, #20]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f022 0201 	bic.w	r2, r2, #1
 8008c02:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	f7ff ff7e 	bl	8008b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c38:	bf00      	nop
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c4e:	b2db      	uxtb	r3, r3
 8008c50:	2b21      	cmp	r3, #33	; 0x21
 8008c52:	d144      	bne.n	8008cde <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c5c:	d11a      	bne.n	8008c94 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	461a      	mov	r2, r3
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c72:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d105      	bne.n	8008c88 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	1c9a      	adds	r2, r3, #2
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	621a      	str	r2, [r3, #32]
 8008c86:	e00e      	b.n	8008ca6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	1c5a      	adds	r2, r3, #1
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	621a      	str	r2, [r3, #32]
 8008c92:	e008      	b.n	8008ca6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a1b      	ldr	r3, [r3, #32]
 8008c98:	1c59      	adds	r1, r3, #1
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	6211      	str	r1, [r2, #32]
 8008c9e:	781a      	ldrb	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	3b01      	subs	r3, #1
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10f      	bne.n	8008cda <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cc8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68da      	ldr	r2, [r3, #12]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cd8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e000      	b.n	8008ce0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008cde:	2302      	movs	r3, #2
  }
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3714      	adds	r7, #20
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d02:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2220      	movs	r2, #32
 8008d08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7ff fefd 	bl	8008b0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b22      	cmp	r3, #34	; 0x22
 8008d2e:	d171      	bne.n	8008e14 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d38:	d123      	bne.n	8008d82 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10e      	bne.n	8008d66 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5e:	1c9a      	adds	r2, r3, #2
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	629a      	str	r2, [r3, #40]	; 0x28
 8008d64:	e029      	b.n	8008dba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	1c5a      	adds	r2, r3, #1
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	629a      	str	r2, [r3, #40]	; 0x28
 8008d80:	e01b      	b.n	8008dba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10a      	bne.n	8008da0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	6858      	ldr	r0, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d94:	1c59      	adds	r1, r3, #1
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	6291      	str	r1, [r2, #40]	; 0x28
 8008d9a:	b2c2      	uxtb	r2, r0
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	e00c      	b.n	8008dba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dac:	1c58      	adds	r0, r3, #1
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	6288      	str	r0, [r1, #40]	; 0x28
 8008db2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008db6:	b2d2      	uxtb	r2, r2
 8008db8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d120      	bne.n	8008e10 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	68da      	ldr	r2, [r3, #12]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f022 0220 	bic.w	r2, r2, #32
 8008ddc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68da      	ldr	r2, [r3, #12]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	695a      	ldr	r2, [r3, #20]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f022 0201 	bic.w	r2, r2, #1
 8008dfc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2220      	movs	r2, #32
 8008e02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff fe8a 	bl	8008b20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	e002      	b.n	8008e16 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	e000      	b.n	8008e16 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008e14:	2302      	movs	r3, #2
  }
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	b085      	sub	sp, #20
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	68da      	ldr	r2, [r3, #12]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	689a      	ldr	r2, [r3, #8]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008e62:	f023 030c 	bic.w	r3, r3, #12
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	68f9      	ldr	r1, [r7, #12]
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	699a      	ldr	r2, [r3, #24]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e8e:	f040 818b 	bne.w	80091a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4ac1      	ldr	r2, [pc, #772]	; (800919c <UART_SetConfig+0x37c>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d005      	beq.n	8008ea8 <UART_SetConfig+0x88>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4abf      	ldr	r2, [pc, #764]	; (80091a0 <UART_SetConfig+0x380>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	f040 80bd 	bne.w	8009022 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ea8:	f7fe fedc 	bl	8007c64 <HAL_RCC_GetPCLK2Freq>
 8008eac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	461d      	mov	r5, r3
 8008eb2:	f04f 0600 	mov.w	r6, #0
 8008eb6:	46a8      	mov	r8, r5
 8008eb8:	46b1      	mov	r9, r6
 8008eba:	eb18 0308 	adds.w	r3, r8, r8
 8008ebe:	eb49 0409 	adc.w	r4, r9, r9
 8008ec2:	4698      	mov	r8, r3
 8008ec4:	46a1      	mov	r9, r4
 8008ec6:	eb18 0805 	adds.w	r8, r8, r5
 8008eca:	eb49 0906 	adc.w	r9, r9, r6
 8008ece:	f04f 0100 	mov.w	r1, #0
 8008ed2:	f04f 0200 	mov.w	r2, #0
 8008ed6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008eda:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008ede:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008ee2:	4688      	mov	r8, r1
 8008ee4:	4691      	mov	r9, r2
 8008ee6:	eb18 0005 	adds.w	r0, r8, r5
 8008eea:	eb49 0106 	adc.w	r1, r9, r6
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	461d      	mov	r5, r3
 8008ef4:	f04f 0600 	mov.w	r6, #0
 8008ef8:	196b      	adds	r3, r5, r5
 8008efa:	eb46 0406 	adc.w	r4, r6, r6
 8008efe:	461a      	mov	r2, r3
 8008f00:	4623      	mov	r3, r4
 8008f02:	f7f7 fed1 	bl	8000ca8 <__aeabi_uldivmod>
 8008f06:	4603      	mov	r3, r0
 8008f08:	460c      	mov	r4, r1
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	4ba5      	ldr	r3, [pc, #660]	; (80091a4 <UART_SetConfig+0x384>)
 8008f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	461d      	mov	r5, r3
 8008f1c:	f04f 0600 	mov.w	r6, #0
 8008f20:	46a9      	mov	r9, r5
 8008f22:	46b2      	mov	sl, r6
 8008f24:	eb19 0309 	adds.w	r3, r9, r9
 8008f28:	eb4a 040a 	adc.w	r4, sl, sl
 8008f2c:	4699      	mov	r9, r3
 8008f2e:	46a2      	mov	sl, r4
 8008f30:	eb19 0905 	adds.w	r9, r9, r5
 8008f34:	eb4a 0a06 	adc.w	sl, sl, r6
 8008f38:	f04f 0100 	mov.w	r1, #0
 8008f3c:	f04f 0200 	mov.w	r2, #0
 8008f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008f44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008f48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008f4c:	4689      	mov	r9, r1
 8008f4e:	4692      	mov	sl, r2
 8008f50:	eb19 0005 	adds.w	r0, r9, r5
 8008f54:	eb4a 0106 	adc.w	r1, sl, r6
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	461d      	mov	r5, r3
 8008f5e:	f04f 0600 	mov.w	r6, #0
 8008f62:	196b      	adds	r3, r5, r5
 8008f64:	eb46 0406 	adc.w	r4, r6, r6
 8008f68:	461a      	mov	r2, r3
 8008f6a:	4623      	mov	r3, r4
 8008f6c:	f7f7 fe9c 	bl	8000ca8 <__aeabi_uldivmod>
 8008f70:	4603      	mov	r3, r0
 8008f72:	460c      	mov	r4, r1
 8008f74:	461a      	mov	r2, r3
 8008f76:	4b8b      	ldr	r3, [pc, #556]	; (80091a4 <UART_SetConfig+0x384>)
 8008f78:	fba3 1302 	umull	r1, r3, r3, r2
 8008f7c:	095b      	lsrs	r3, r3, #5
 8008f7e:	2164      	movs	r1, #100	; 0x64
 8008f80:	fb01 f303 	mul.w	r3, r1, r3
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	00db      	lsls	r3, r3, #3
 8008f88:	3332      	adds	r3, #50	; 0x32
 8008f8a:	4a86      	ldr	r2, [pc, #536]	; (80091a4 <UART_SetConfig+0x384>)
 8008f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f90:	095b      	lsrs	r3, r3, #5
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f98:	4498      	add	r8, r3
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	461d      	mov	r5, r3
 8008f9e:	f04f 0600 	mov.w	r6, #0
 8008fa2:	46a9      	mov	r9, r5
 8008fa4:	46b2      	mov	sl, r6
 8008fa6:	eb19 0309 	adds.w	r3, r9, r9
 8008faa:	eb4a 040a 	adc.w	r4, sl, sl
 8008fae:	4699      	mov	r9, r3
 8008fb0:	46a2      	mov	sl, r4
 8008fb2:	eb19 0905 	adds.w	r9, r9, r5
 8008fb6:	eb4a 0a06 	adc.w	sl, sl, r6
 8008fba:	f04f 0100 	mov.w	r1, #0
 8008fbe:	f04f 0200 	mov.w	r2, #0
 8008fc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008fc6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008fca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008fce:	4689      	mov	r9, r1
 8008fd0:	4692      	mov	sl, r2
 8008fd2:	eb19 0005 	adds.w	r0, r9, r5
 8008fd6:	eb4a 0106 	adc.w	r1, sl, r6
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	461d      	mov	r5, r3
 8008fe0:	f04f 0600 	mov.w	r6, #0
 8008fe4:	196b      	adds	r3, r5, r5
 8008fe6:	eb46 0406 	adc.w	r4, r6, r6
 8008fea:	461a      	mov	r2, r3
 8008fec:	4623      	mov	r3, r4
 8008fee:	f7f7 fe5b 	bl	8000ca8 <__aeabi_uldivmod>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	4b6a      	ldr	r3, [pc, #424]	; (80091a4 <UART_SetConfig+0x384>)
 8008ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8008ffe:	095b      	lsrs	r3, r3, #5
 8009000:	2164      	movs	r1, #100	; 0x64
 8009002:	fb01 f303 	mul.w	r3, r1, r3
 8009006:	1ad3      	subs	r3, r2, r3
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	3332      	adds	r3, #50	; 0x32
 800900c:	4a65      	ldr	r2, [pc, #404]	; (80091a4 <UART_SetConfig+0x384>)
 800900e:	fba2 2303 	umull	r2, r3, r2, r3
 8009012:	095b      	lsrs	r3, r3, #5
 8009014:	f003 0207 	and.w	r2, r3, #7
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4442      	add	r2, r8
 800901e:	609a      	str	r2, [r3, #8]
 8009020:	e26f      	b.n	8009502 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009022:	f7fe fe0b 	bl	8007c3c <HAL_RCC_GetPCLK1Freq>
 8009026:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	461d      	mov	r5, r3
 800902c:	f04f 0600 	mov.w	r6, #0
 8009030:	46a8      	mov	r8, r5
 8009032:	46b1      	mov	r9, r6
 8009034:	eb18 0308 	adds.w	r3, r8, r8
 8009038:	eb49 0409 	adc.w	r4, r9, r9
 800903c:	4698      	mov	r8, r3
 800903e:	46a1      	mov	r9, r4
 8009040:	eb18 0805 	adds.w	r8, r8, r5
 8009044:	eb49 0906 	adc.w	r9, r9, r6
 8009048:	f04f 0100 	mov.w	r1, #0
 800904c:	f04f 0200 	mov.w	r2, #0
 8009050:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009054:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009058:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800905c:	4688      	mov	r8, r1
 800905e:	4691      	mov	r9, r2
 8009060:	eb18 0005 	adds.w	r0, r8, r5
 8009064:	eb49 0106 	adc.w	r1, r9, r6
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	461d      	mov	r5, r3
 800906e:	f04f 0600 	mov.w	r6, #0
 8009072:	196b      	adds	r3, r5, r5
 8009074:	eb46 0406 	adc.w	r4, r6, r6
 8009078:	461a      	mov	r2, r3
 800907a:	4623      	mov	r3, r4
 800907c:	f7f7 fe14 	bl	8000ca8 <__aeabi_uldivmod>
 8009080:	4603      	mov	r3, r0
 8009082:	460c      	mov	r4, r1
 8009084:	461a      	mov	r2, r3
 8009086:	4b47      	ldr	r3, [pc, #284]	; (80091a4 <UART_SetConfig+0x384>)
 8009088:	fba3 2302 	umull	r2, r3, r3, r2
 800908c:	095b      	lsrs	r3, r3, #5
 800908e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	461d      	mov	r5, r3
 8009096:	f04f 0600 	mov.w	r6, #0
 800909a:	46a9      	mov	r9, r5
 800909c:	46b2      	mov	sl, r6
 800909e:	eb19 0309 	adds.w	r3, r9, r9
 80090a2:	eb4a 040a 	adc.w	r4, sl, sl
 80090a6:	4699      	mov	r9, r3
 80090a8:	46a2      	mov	sl, r4
 80090aa:	eb19 0905 	adds.w	r9, r9, r5
 80090ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80090b2:	f04f 0100 	mov.w	r1, #0
 80090b6:	f04f 0200 	mov.w	r2, #0
 80090ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090c6:	4689      	mov	r9, r1
 80090c8:	4692      	mov	sl, r2
 80090ca:	eb19 0005 	adds.w	r0, r9, r5
 80090ce:	eb4a 0106 	adc.w	r1, sl, r6
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	461d      	mov	r5, r3
 80090d8:	f04f 0600 	mov.w	r6, #0
 80090dc:	196b      	adds	r3, r5, r5
 80090de:	eb46 0406 	adc.w	r4, r6, r6
 80090e2:	461a      	mov	r2, r3
 80090e4:	4623      	mov	r3, r4
 80090e6:	f7f7 fddf 	bl	8000ca8 <__aeabi_uldivmod>
 80090ea:	4603      	mov	r3, r0
 80090ec:	460c      	mov	r4, r1
 80090ee:	461a      	mov	r2, r3
 80090f0:	4b2c      	ldr	r3, [pc, #176]	; (80091a4 <UART_SetConfig+0x384>)
 80090f2:	fba3 1302 	umull	r1, r3, r3, r2
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	2164      	movs	r1, #100	; 0x64
 80090fa:	fb01 f303 	mul.w	r3, r1, r3
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	00db      	lsls	r3, r3, #3
 8009102:	3332      	adds	r3, #50	; 0x32
 8009104:	4a27      	ldr	r2, [pc, #156]	; (80091a4 <UART_SetConfig+0x384>)
 8009106:	fba2 2303 	umull	r2, r3, r2, r3
 800910a:	095b      	lsrs	r3, r3, #5
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009112:	4498      	add	r8, r3
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	461d      	mov	r5, r3
 8009118:	f04f 0600 	mov.w	r6, #0
 800911c:	46a9      	mov	r9, r5
 800911e:	46b2      	mov	sl, r6
 8009120:	eb19 0309 	adds.w	r3, r9, r9
 8009124:	eb4a 040a 	adc.w	r4, sl, sl
 8009128:	4699      	mov	r9, r3
 800912a:	46a2      	mov	sl, r4
 800912c:	eb19 0905 	adds.w	r9, r9, r5
 8009130:	eb4a 0a06 	adc.w	sl, sl, r6
 8009134:	f04f 0100 	mov.w	r1, #0
 8009138:	f04f 0200 	mov.w	r2, #0
 800913c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009140:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009144:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009148:	4689      	mov	r9, r1
 800914a:	4692      	mov	sl, r2
 800914c:	eb19 0005 	adds.w	r0, r9, r5
 8009150:	eb4a 0106 	adc.w	r1, sl, r6
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	461d      	mov	r5, r3
 800915a:	f04f 0600 	mov.w	r6, #0
 800915e:	196b      	adds	r3, r5, r5
 8009160:	eb46 0406 	adc.w	r4, r6, r6
 8009164:	461a      	mov	r2, r3
 8009166:	4623      	mov	r3, r4
 8009168:	f7f7 fd9e 	bl	8000ca8 <__aeabi_uldivmod>
 800916c:	4603      	mov	r3, r0
 800916e:	460c      	mov	r4, r1
 8009170:	461a      	mov	r2, r3
 8009172:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <UART_SetConfig+0x384>)
 8009174:	fba3 1302 	umull	r1, r3, r3, r2
 8009178:	095b      	lsrs	r3, r3, #5
 800917a:	2164      	movs	r1, #100	; 0x64
 800917c:	fb01 f303 	mul.w	r3, r1, r3
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	00db      	lsls	r3, r3, #3
 8009184:	3332      	adds	r3, #50	; 0x32
 8009186:	4a07      	ldr	r2, [pc, #28]	; (80091a4 <UART_SetConfig+0x384>)
 8009188:	fba2 2303 	umull	r2, r3, r2, r3
 800918c:	095b      	lsrs	r3, r3, #5
 800918e:	f003 0207 	and.w	r2, r3, #7
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4442      	add	r2, r8
 8009198:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800919a:	e1b2      	b.n	8009502 <UART_SetConfig+0x6e2>
 800919c:	40011000 	.word	0x40011000
 80091a0:	40011400 	.word	0x40011400
 80091a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4ad7      	ldr	r2, [pc, #860]	; (800950c <UART_SetConfig+0x6ec>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d005      	beq.n	80091be <UART_SetConfig+0x39e>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4ad6      	ldr	r2, [pc, #856]	; (8009510 <UART_SetConfig+0x6f0>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	f040 80d1 	bne.w	8009360 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80091be:	f7fe fd51 	bl	8007c64 <HAL_RCC_GetPCLK2Freq>
 80091c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	469a      	mov	sl, r3
 80091c8:	f04f 0b00 	mov.w	fp, #0
 80091cc:	46d0      	mov	r8, sl
 80091ce:	46d9      	mov	r9, fp
 80091d0:	eb18 0308 	adds.w	r3, r8, r8
 80091d4:	eb49 0409 	adc.w	r4, r9, r9
 80091d8:	4698      	mov	r8, r3
 80091da:	46a1      	mov	r9, r4
 80091dc:	eb18 080a 	adds.w	r8, r8, sl
 80091e0:	eb49 090b 	adc.w	r9, r9, fp
 80091e4:	f04f 0100 	mov.w	r1, #0
 80091e8:	f04f 0200 	mov.w	r2, #0
 80091ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80091f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80091f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80091f8:	4688      	mov	r8, r1
 80091fa:	4691      	mov	r9, r2
 80091fc:	eb1a 0508 	adds.w	r5, sl, r8
 8009200:	eb4b 0609 	adc.w	r6, fp, r9
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	4619      	mov	r1, r3
 800920a:	f04f 0200 	mov.w	r2, #0
 800920e:	f04f 0300 	mov.w	r3, #0
 8009212:	f04f 0400 	mov.w	r4, #0
 8009216:	0094      	lsls	r4, r2, #2
 8009218:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800921c:	008b      	lsls	r3, r1, #2
 800921e:	461a      	mov	r2, r3
 8009220:	4623      	mov	r3, r4
 8009222:	4628      	mov	r0, r5
 8009224:	4631      	mov	r1, r6
 8009226:	f7f7 fd3f 	bl	8000ca8 <__aeabi_uldivmod>
 800922a:	4603      	mov	r3, r0
 800922c:	460c      	mov	r4, r1
 800922e:	461a      	mov	r2, r3
 8009230:	4bb8      	ldr	r3, [pc, #736]	; (8009514 <UART_SetConfig+0x6f4>)
 8009232:	fba3 2302 	umull	r2, r3, r3, r2
 8009236:	095b      	lsrs	r3, r3, #5
 8009238:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	469b      	mov	fp, r3
 8009240:	f04f 0c00 	mov.w	ip, #0
 8009244:	46d9      	mov	r9, fp
 8009246:	46e2      	mov	sl, ip
 8009248:	eb19 0309 	adds.w	r3, r9, r9
 800924c:	eb4a 040a 	adc.w	r4, sl, sl
 8009250:	4699      	mov	r9, r3
 8009252:	46a2      	mov	sl, r4
 8009254:	eb19 090b 	adds.w	r9, r9, fp
 8009258:	eb4a 0a0c 	adc.w	sl, sl, ip
 800925c:	f04f 0100 	mov.w	r1, #0
 8009260:	f04f 0200 	mov.w	r2, #0
 8009264:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009268:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800926c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009270:	4689      	mov	r9, r1
 8009272:	4692      	mov	sl, r2
 8009274:	eb1b 0509 	adds.w	r5, fp, r9
 8009278:	eb4c 060a 	adc.w	r6, ip, sl
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	4619      	mov	r1, r3
 8009282:	f04f 0200 	mov.w	r2, #0
 8009286:	f04f 0300 	mov.w	r3, #0
 800928a:	f04f 0400 	mov.w	r4, #0
 800928e:	0094      	lsls	r4, r2, #2
 8009290:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009294:	008b      	lsls	r3, r1, #2
 8009296:	461a      	mov	r2, r3
 8009298:	4623      	mov	r3, r4
 800929a:	4628      	mov	r0, r5
 800929c:	4631      	mov	r1, r6
 800929e:	f7f7 fd03 	bl	8000ca8 <__aeabi_uldivmod>
 80092a2:	4603      	mov	r3, r0
 80092a4:	460c      	mov	r4, r1
 80092a6:	461a      	mov	r2, r3
 80092a8:	4b9a      	ldr	r3, [pc, #616]	; (8009514 <UART_SetConfig+0x6f4>)
 80092aa:	fba3 1302 	umull	r1, r3, r3, r2
 80092ae:	095b      	lsrs	r3, r3, #5
 80092b0:	2164      	movs	r1, #100	; 0x64
 80092b2:	fb01 f303 	mul.w	r3, r1, r3
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	011b      	lsls	r3, r3, #4
 80092ba:	3332      	adds	r3, #50	; 0x32
 80092bc:	4a95      	ldr	r2, [pc, #596]	; (8009514 <UART_SetConfig+0x6f4>)
 80092be:	fba2 2303 	umull	r2, r3, r2, r3
 80092c2:	095b      	lsrs	r3, r3, #5
 80092c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092c8:	4498      	add	r8, r3
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	469b      	mov	fp, r3
 80092ce:	f04f 0c00 	mov.w	ip, #0
 80092d2:	46d9      	mov	r9, fp
 80092d4:	46e2      	mov	sl, ip
 80092d6:	eb19 0309 	adds.w	r3, r9, r9
 80092da:	eb4a 040a 	adc.w	r4, sl, sl
 80092de:	4699      	mov	r9, r3
 80092e0:	46a2      	mov	sl, r4
 80092e2:	eb19 090b 	adds.w	r9, r9, fp
 80092e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80092ea:	f04f 0100 	mov.w	r1, #0
 80092ee:	f04f 0200 	mov.w	r2, #0
 80092f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80092fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80092fe:	4689      	mov	r9, r1
 8009300:	4692      	mov	sl, r2
 8009302:	eb1b 0509 	adds.w	r5, fp, r9
 8009306:	eb4c 060a 	adc.w	r6, ip, sl
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	4619      	mov	r1, r3
 8009310:	f04f 0200 	mov.w	r2, #0
 8009314:	f04f 0300 	mov.w	r3, #0
 8009318:	f04f 0400 	mov.w	r4, #0
 800931c:	0094      	lsls	r4, r2, #2
 800931e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009322:	008b      	lsls	r3, r1, #2
 8009324:	461a      	mov	r2, r3
 8009326:	4623      	mov	r3, r4
 8009328:	4628      	mov	r0, r5
 800932a:	4631      	mov	r1, r6
 800932c:	f7f7 fcbc 	bl	8000ca8 <__aeabi_uldivmod>
 8009330:	4603      	mov	r3, r0
 8009332:	460c      	mov	r4, r1
 8009334:	461a      	mov	r2, r3
 8009336:	4b77      	ldr	r3, [pc, #476]	; (8009514 <UART_SetConfig+0x6f4>)
 8009338:	fba3 1302 	umull	r1, r3, r3, r2
 800933c:	095b      	lsrs	r3, r3, #5
 800933e:	2164      	movs	r1, #100	; 0x64
 8009340:	fb01 f303 	mul.w	r3, r1, r3
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	011b      	lsls	r3, r3, #4
 8009348:	3332      	adds	r3, #50	; 0x32
 800934a:	4a72      	ldr	r2, [pc, #456]	; (8009514 <UART_SetConfig+0x6f4>)
 800934c:	fba2 2303 	umull	r2, r3, r2, r3
 8009350:	095b      	lsrs	r3, r3, #5
 8009352:	f003 020f 	and.w	r2, r3, #15
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4442      	add	r2, r8
 800935c:	609a      	str	r2, [r3, #8]
 800935e:	e0d0      	b.n	8009502 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009360:	f7fe fc6c 	bl	8007c3c <HAL_RCC_GetPCLK1Freq>
 8009364:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	469a      	mov	sl, r3
 800936a:	f04f 0b00 	mov.w	fp, #0
 800936e:	46d0      	mov	r8, sl
 8009370:	46d9      	mov	r9, fp
 8009372:	eb18 0308 	adds.w	r3, r8, r8
 8009376:	eb49 0409 	adc.w	r4, r9, r9
 800937a:	4698      	mov	r8, r3
 800937c:	46a1      	mov	r9, r4
 800937e:	eb18 080a 	adds.w	r8, r8, sl
 8009382:	eb49 090b 	adc.w	r9, r9, fp
 8009386:	f04f 0100 	mov.w	r1, #0
 800938a:	f04f 0200 	mov.w	r2, #0
 800938e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009392:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009396:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800939a:	4688      	mov	r8, r1
 800939c:	4691      	mov	r9, r2
 800939e:	eb1a 0508 	adds.w	r5, sl, r8
 80093a2:	eb4b 0609 	adc.w	r6, fp, r9
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	4619      	mov	r1, r3
 80093ac:	f04f 0200 	mov.w	r2, #0
 80093b0:	f04f 0300 	mov.w	r3, #0
 80093b4:	f04f 0400 	mov.w	r4, #0
 80093b8:	0094      	lsls	r4, r2, #2
 80093ba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80093be:	008b      	lsls	r3, r1, #2
 80093c0:	461a      	mov	r2, r3
 80093c2:	4623      	mov	r3, r4
 80093c4:	4628      	mov	r0, r5
 80093c6:	4631      	mov	r1, r6
 80093c8:	f7f7 fc6e 	bl	8000ca8 <__aeabi_uldivmod>
 80093cc:	4603      	mov	r3, r0
 80093ce:	460c      	mov	r4, r1
 80093d0:	461a      	mov	r2, r3
 80093d2:	4b50      	ldr	r3, [pc, #320]	; (8009514 <UART_SetConfig+0x6f4>)
 80093d4:	fba3 2302 	umull	r2, r3, r3, r2
 80093d8:	095b      	lsrs	r3, r3, #5
 80093da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	469b      	mov	fp, r3
 80093e2:	f04f 0c00 	mov.w	ip, #0
 80093e6:	46d9      	mov	r9, fp
 80093e8:	46e2      	mov	sl, ip
 80093ea:	eb19 0309 	adds.w	r3, r9, r9
 80093ee:	eb4a 040a 	adc.w	r4, sl, sl
 80093f2:	4699      	mov	r9, r3
 80093f4:	46a2      	mov	sl, r4
 80093f6:	eb19 090b 	adds.w	r9, r9, fp
 80093fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80093fe:	f04f 0100 	mov.w	r1, #0
 8009402:	f04f 0200 	mov.w	r2, #0
 8009406:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800940a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800940e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009412:	4689      	mov	r9, r1
 8009414:	4692      	mov	sl, r2
 8009416:	eb1b 0509 	adds.w	r5, fp, r9
 800941a:	eb4c 060a 	adc.w	r6, ip, sl
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	685b      	ldr	r3, [r3, #4]
 8009422:	4619      	mov	r1, r3
 8009424:	f04f 0200 	mov.w	r2, #0
 8009428:	f04f 0300 	mov.w	r3, #0
 800942c:	f04f 0400 	mov.w	r4, #0
 8009430:	0094      	lsls	r4, r2, #2
 8009432:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009436:	008b      	lsls	r3, r1, #2
 8009438:	461a      	mov	r2, r3
 800943a:	4623      	mov	r3, r4
 800943c:	4628      	mov	r0, r5
 800943e:	4631      	mov	r1, r6
 8009440:	f7f7 fc32 	bl	8000ca8 <__aeabi_uldivmod>
 8009444:	4603      	mov	r3, r0
 8009446:	460c      	mov	r4, r1
 8009448:	461a      	mov	r2, r3
 800944a:	4b32      	ldr	r3, [pc, #200]	; (8009514 <UART_SetConfig+0x6f4>)
 800944c:	fba3 1302 	umull	r1, r3, r3, r2
 8009450:	095b      	lsrs	r3, r3, #5
 8009452:	2164      	movs	r1, #100	; 0x64
 8009454:	fb01 f303 	mul.w	r3, r1, r3
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	011b      	lsls	r3, r3, #4
 800945c:	3332      	adds	r3, #50	; 0x32
 800945e:	4a2d      	ldr	r2, [pc, #180]	; (8009514 <UART_SetConfig+0x6f4>)
 8009460:	fba2 2303 	umull	r2, r3, r2, r3
 8009464:	095b      	lsrs	r3, r3, #5
 8009466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800946a:	4498      	add	r8, r3
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	469b      	mov	fp, r3
 8009470:	f04f 0c00 	mov.w	ip, #0
 8009474:	46d9      	mov	r9, fp
 8009476:	46e2      	mov	sl, ip
 8009478:	eb19 0309 	adds.w	r3, r9, r9
 800947c:	eb4a 040a 	adc.w	r4, sl, sl
 8009480:	4699      	mov	r9, r3
 8009482:	46a2      	mov	sl, r4
 8009484:	eb19 090b 	adds.w	r9, r9, fp
 8009488:	eb4a 0a0c 	adc.w	sl, sl, ip
 800948c:	f04f 0100 	mov.w	r1, #0
 8009490:	f04f 0200 	mov.w	r2, #0
 8009494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009498:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800949c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094a0:	4689      	mov	r9, r1
 80094a2:	4692      	mov	sl, r2
 80094a4:	eb1b 0509 	adds.w	r5, fp, r9
 80094a8:	eb4c 060a 	adc.w	r6, ip, sl
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	4619      	mov	r1, r3
 80094b2:	f04f 0200 	mov.w	r2, #0
 80094b6:	f04f 0300 	mov.w	r3, #0
 80094ba:	f04f 0400 	mov.w	r4, #0
 80094be:	0094      	lsls	r4, r2, #2
 80094c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80094c4:	008b      	lsls	r3, r1, #2
 80094c6:	461a      	mov	r2, r3
 80094c8:	4623      	mov	r3, r4
 80094ca:	4628      	mov	r0, r5
 80094cc:	4631      	mov	r1, r6
 80094ce:	f7f7 fbeb 	bl	8000ca8 <__aeabi_uldivmod>
 80094d2:	4603      	mov	r3, r0
 80094d4:	460c      	mov	r4, r1
 80094d6:	461a      	mov	r2, r3
 80094d8:	4b0e      	ldr	r3, [pc, #56]	; (8009514 <UART_SetConfig+0x6f4>)
 80094da:	fba3 1302 	umull	r1, r3, r3, r2
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	2164      	movs	r1, #100	; 0x64
 80094e2:	fb01 f303 	mul.w	r3, r1, r3
 80094e6:	1ad3      	subs	r3, r2, r3
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	3332      	adds	r3, #50	; 0x32
 80094ec:	4a09      	ldr	r2, [pc, #36]	; (8009514 <UART_SetConfig+0x6f4>)
 80094ee:	fba2 2303 	umull	r2, r3, r2, r3
 80094f2:	095b      	lsrs	r3, r3, #5
 80094f4:	f003 020f 	and.w	r2, r3, #15
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4442      	add	r2, r8
 80094fe:	609a      	str	r2, [r3, #8]
}
 8009500:	e7ff      	b.n	8009502 <UART_SetConfig+0x6e2>
 8009502:	bf00      	nop
 8009504:	3714      	adds	r7, #20
 8009506:	46bd      	mov	sp, r7
 8009508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950c:	40011000 	.word	0x40011000
 8009510:	40011400 	.word	0x40011400
 8009514:	51eb851f 	.word	0x51eb851f

08009518 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009522:	2300      	movs	r3, #0
 8009524:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b01      	cmp	r3, #1
 8009530:	d029      	beq.n	8009586 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800953e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009542:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800954c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009552:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8009558:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800955e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8009564:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800956a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009570:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8009576:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	4313      	orrs	r3, r2
 800957c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	e034      	b.n	80095f0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009592:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800959c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80095a2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80095b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095ba:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80095c4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80095ca:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80095d0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80095d6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80095dc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80095fe:	b480      	push	{r7}
 8009600:	b087      	sub	sp, #28
 8009602:	af00      	add	r7, sp, #0
 8009604:	60f8      	str	r0, [r7, #12]
 8009606:	60b9      	str	r1, [r7, #8]
 8009608:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d02e      	beq.n	8009676 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009624:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	3b01      	subs	r3, #1
 8009632:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009634:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	3b01      	subs	r3, #1
 800963c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800963e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	3b01      	subs	r3, #1
 8009646:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009648:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	3b01      	subs	r3, #1
 8009650:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009652:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	3b01      	subs	r3, #1
 800965a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800965c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	699b      	ldr	r3, [r3, #24]
 8009662:	3b01      	subs	r3, #1
 8009664:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009666:	4313      	orrs	r3, r2
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	4313      	orrs	r3, r2
 800966c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	609a      	str	r2, [r3, #8]
 8009674:	e03b      	b.n	80096ee <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009686:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	3b01      	subs	r3, #1
 800968e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	3b01      	subs	r3, #1
 8009696:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009698:	4313      	orrs	r3, r2
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	4313      	orrs	r3, r2
 800969e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80096ac:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80096bc:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	3b01      	subs	r3, #1
 80096c4:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 80096c6:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80096d0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	3b01      	subs	r3, #1
 80096d8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80096da:	4313      	orrs	r3, r2
 80096dc:	693a      	ldr	r2, [r7, #16]
 80096de:	4313      	orrs	r3, r2
 80096e0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	697a      	ldr	r2, [r7, #20]
 80096e6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	371c      	adds	r7, #28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b086      	sub	sp, #24
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009708:	2300      	movs	r3, #0
 800970a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800970c:	2300      	movs	r3, #0
 800970e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009718:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	3b01      	subs	r3, #1
 8009720:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009722:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800972a:	4313      	orrs	r3, r2
 800972c:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 800972e:	693a      	ldr	r2, [r7, #16]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009734:	f000 f8e8 	bl	8009908 <HAL_GetTick>
 8009738:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800973a:	e010      	b.n	800975e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009742:	d00c      	beq.n	800975e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d007      	beq.n	800975a <FMC_SDRAM_SendCommand+0x5e>
 800974a:	f000 f8dd 	bl	8009908 <HAL_GetTick>
 800974e:	4602      	mov	r2, r0
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	1ad3      	subs	r3, r2, r3
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	429a      	cmp	r2, r3
 8009758:	d201      	bcs.n	800975e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800975a:	2303      	movs	r3, #3
 800975c:	e006      	b.n	800976c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	f003 0320 	and.w	r3, r3, #32
 8009766:	2b20      	cmp	r3, #32
 8009768:	d0e8      	beq.n	800973c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695a      	ldr	r2, [r3, #20]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	005b      	lsls	r3, r3, #1
 8009786:	431a      	orrs	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 800979a:	b480      	push	{r7}
 800979c:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 800979e:	bf00      	nop
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr

080097a8 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 80097ae:	4b3e      	ldr	r3, [pc, #248]	; (80098a8 <HAL_IncTick+0x100>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3301      	adds	r3, #1
 80097b4:	4a3c      	ldr	r2, [pc, #240]	; (80098a8 <HAL_IncTick+0x100>)
 80097b6:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 80097b8:	4b3c      	ldr	r3, [pc, #240]	; (80098ac <HAL_IncTick+0x104>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <HAL_IncTick+0x22>
		TM_Time2--;
 80097c0:	4b3a      	ldr	r3, [pc, #232]	; (80098ac <HAL_IncTick+0x104>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	3b01      	subs	r3, #1
 80097c6:	4a39      	ldr	r2, [pc, #228]	; (80098ac <HAL_IncTick+0x104>)
 80097c8:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80097ca:	2300      	movs	r3, #0
 80097cc:	71fb      	strb	r3, [r7, #7]
 80097ce:	e05f      	b.n	8009890 <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80097d0:	79fb      	ldrb	r3, [r7, #7]
 80097d2:	4a37      	ldr	r2, [pc, #220]	; (80098b0 <HAL_IncTick+0x108>)
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	685b      	ldr	r3, [r3, #4]
		if (
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d055      	beq.n	800988a <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 80097de:	79fb      	ldrb	r3, [r7, #7]
 80097e0:	4a33      	ldr	r2, [pc, #204]	; (80098b0 <HAL_IncTick+0x108>)
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 80097e8:	781b      	ldrb	r3, [r3, #0]
 80097ea:	f003 0302 	and.w	r3, r3, #2
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d04a      	beq.n	800988a <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 80097f4:	79fb      	ldrb	r3, [r7, #7]
 80097f6:	4a2e      	ldr	r2, [pc, #184]	; (80098b0 <HAL_IncTick+0x108>)
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d007      	beq.n	8009814 <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	4a2a      	ldr	r2, [pc, #168]	; (80098b0 <HAL_IncTick+0x108>)
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	689a      	ldr	r2, [r3, #8]
 8009810:	3a01      	subs	r2, #1
 8009812:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	4a26      	ldr	r2, [pc, #152]	; (80098b0 <HAL_IncTick+0x108>)
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d132      	bne.n	800988a <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	4a22      	ldr	r2, [pc, #136]	; (80098b0 <HAL_IncTick+0x108>)
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	68da      	ldr	r2, [r3, #12]
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	491f      	ldr	r1, [pc, #124]	; (80098b0 <HAL_IncTick+0x108>)
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	440b      	add	r3, r1
 8009838:	6858      	ldr	r0, [r3, #4]
 800983a:	79fb      	ldrb	r3, [r7, #7]
 800983c:	491c      	ldr	r1, [pc, #112]	; (80098b0 <HAL_IncTick+0x108>)
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	440b      	add	r3, r1
 8009842:	685b      	ldr	r3, [r3, #4]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	4619      	mov	r1, r3
 8009848:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	4a18      	ldr	r2, [pc, #96]	; (80098b0 <HAL_IncTick+0x108>)
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	79fb      	ldrb	r3, [r7, #7]
 8009856:	4916      	ldr	r1, [pc, #88]	; (80098b0 <HAL_IncTick+0x108>)
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	440b      	add	r3, r1
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	6852      	ldr	r2, [r2, #4]
 8009860:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 8009862:	79fb      	ldrb	r3, [r7, #7]
 8009864:	4a12      	ldr	r2, [pc, #72]	; (80098b0 <HAL_IncTick+0x108>)
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d108      	bne.n	800988a <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	4a0d      	ldr	r2, [pc, #52]	; (80098b0 <HAL_IncTick+0x108>)
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	7813      	ldrb	r3, [r2, #0]
 8009884:	f36f 0341 	bfc	r3, #1, #1
 8009888:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 800988a:	79fb      	ldrb	r3, [r7, #7]
 800988c:	3301      	adds	r3, #1
 800988e:	71fb      	strb	r3, [r7, #7]
 8009890:	4b07      	ldr	r3, [pc, #28]	; (80098b0 <HAL_IncTick+0x108>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	79fa      	ldrb	r2, [r7, #7]
 8009896:	429a      	cmp	r2, r3
 8009898:	d39a      	bcc.n	80097d0 <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 800989a:	f7ff ff7e 	bl	800979a <TM_DELAY_1msHandler>
}
 800989e:	bf00      	nop
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000b8c 	.word	0x20000b8c
 80098ac:	20000b88 	.word	0x20000b88
 80098b0:	20000b90 	.word	0x20000b90

080098b4 <HAL_Delay>:

void HAL_Delay(uint32_t Delay) {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098bc:	f3ef 8305 	mrs	r3, IPSR
 80098c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80098c2:	68bb      	ldr	r3, [r7, #8]
	/* Delay for amount of milliseconds */
	/* Check if we are called from ISR */
	if (__get_IPSR() == 0) {
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d115      	bne.n	80098f4 <HAL_Delay+0x40>
		/* Called from thread mode */
		uint32_t tickstart = HAL_GetTick();
 80098c8:	f000 f81e 	bl	8009908 <HAL_GetTick>
 80098cc:	60f8      	str	r0, [r7, #12]
		
		/* Count interrupts */
		while ((HAL_GetTick() - tickstart) < Delay) {
 80098ce:	bf00      	nop
 80098d0:	f000 f81a 	bl	8009908 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	429a      	cmp	r2, r3
 80098de:	d8f7      	bhi.n	80098d0 <HAL_Delay+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				Delay--;
			}
		}
	}
}
 80098e0:	e00b      	b.n	80098fa <HAL_Delay+0x46>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 80098e2:	4b08      	ldr	r3, [pc, #32]	; (8009904 <HAL_Delay+0x50>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d002      	beq.n	80098f4 <HAL_Delay+0x40>
				Delay--;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	3b01      	subs	r3, #1
 80098f2:	607b      	str	r3, [r7, #4]
		while (Delay) {
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1f3      	bne.n	80098e2 <HAL_Delay+0x2e>
}
 80098fa:	bf00      	nop
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	e000e010 	.word	0xe000e010

08009908 <HAL_GetTick>:

uint32_t HAL_GetTick(void) {
 8009908:	b480      	push	{r7}
 800990a:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 800990c:	4b03      	ldr	r3, [pc, #12]	; (800991c <HAL_GetTick+0x14>)
 800990e:	681b      	ldr	r3, [r3, #0]
}
 8009910:	4618      	mov	r0, r3
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	20000b8c 	.word	0x20000b8c

08009920 <DMA2D_Convert565ToARGB8888>:
static DMA2D_HandleTypeDef DMA2DHandle;
//static DMA2D_FG_InitTypeDef GRAPHIC_DMA2D_FG_InitStruct;
volatile TM_INT_DMA2D_t DIS;

/* Convert function */
static void DMA2D_Convert565ToARGB8888(uint32_t color) {
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
	/* Input color: RRRRR GGGGGG BBBBB */
	/* Output color: RRRRR000 GGGGGG00 BBBBB000 */
    DMA2D_Color = color;
 8009928:	4a04      	ldr	r2, [pc, #16]	; (800993c <DMA2D_Convert565ToARGB8888+0x1c>)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6013      	str	r3, [r2, #0]
}
 800992e:	bf00      	nop
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	20000974 	.word	0x20000974

08009940 <TM_DMA2DGRAPHIC_Init>:
void TM_INT_DMA2DGRAPHIC_InitAndTransfer(void);
void TM_INT_DMA2DGRAPHIC_SetMemory(uint32_t MemoryAddress, uint32_t Offset, uint32_t NumberOfLine, uint32_t PixelPerLine);
void TM_INT_DMA2DGRAPHIC_DrawCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color);
void TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color);

void TM_DMA2DGRAPHIC_Init(void) {
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
	/* Internal settings */
	DIS.StartAddress = DMA2D_GRAPHIC_RAM_ADDR;
 8009946:	4b23      	ldr	r3, [pc, #140]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8009948:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 800994c:	609a      	str	r2, [r3, #8]
	DIS.Offset = 0;
 800994e:	4b21      	ldr	r3, [pc, #132]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8009950:	2200      	movs	r2, #0
 8009952:	615a      	str	r2, [r3, #20]
	DIS.Width = DMA2D_GRAPHIC_LCD_WIDTH;
 8009954:	4b1f      	ldr	r3, [pc, #124]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8009956:	22f0      	movs	r2, #240	; 0xf0
 8009958:	801a      	strh	r2, [r3, #0]
	DIS.Height = DMA2D_GRAPHIC_LCD_HEIGHT;
 800995a:	4b1e      	ldr	r3, [pc, #120]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 800995c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009960:	805a      	strh	r2, [r3, #2]
	DIS.Pixels = DMA2D_GRAPHIC_PIXELS;
 8009962:	4b1c      	ldr	r3, [pc, #112]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8009964:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8009968:	619a      	str	r2, [r3, #24]
	DIS.CurrentHeight = DMA2D_GRAPHIC_LCD_WIDTH;
 800996a:	4b1a      	ldr	r3, [pc, #104]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 800996c:	22f0      	movs	r2, #240	; 0xf0
 800996e:	80da      	strh	r2, [r3, #6]
	DIS.CurrentWidth = DMA2D_GRAPHIC_LCD_HEIGHT;
 8009970:	4b18      	ldr	r3, [pc, #96]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8009972:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8009976:	809a      	strh	r2, [r3, #4]
	DIS.Orientation = 0;
 8009978:	4b16      	ldr	r3, [pc, #88]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 800997a:	2200      	movs	r2, #0
 800997c:	775a      	strb	r2, [r3, #29]
	DIS.PixelSize = 2;
 800997e:	4b15      	ldr	r3, [pc, #84]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8009980:	2202      	movs	r2, #2
 8009982:	779a      	strb	r2, [r3, #30]
	DIS.LayerOffset = DMA2D_GRAPHIC_LCD_WIDTH * DMA2D_GRAPHIC_LCD_HEIGHT * DIS.PixelSize;
 8009984:	4b13      	ldr	r3, [pc, #76]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8009986:	7f9b      	ldrb	r3, [r3, #30]
 8009988:	b2db      	uxtb	r3, r3
 800998a:	461a      	mov	r2, r3
 800998c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8009990:	fb03 f302 	mul.w	r3, r3, r2
 8009994:	461a      	mov	r2, r3
 8009996:	4b0f      	ldr	r3, [pc, #60]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8009998:	60da      	str	r2, [r3, #12]
	DIS.LayerNumber = 0;
 800999a:	4b0e      	ldr	r3, [pc, #56]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 800999c:	2200      	movs	r2, #0
 800999e:	741a      	strb	r2, [r3, #16]
	
	/* Set DMA2D instance value */
	DMA2DHandle.Instance = DMA2D;
 80099a0:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <TM_DMA2DGRAPHIC_Init+0x98>)
 80099a2:	4a0e      	ldr	r2, [pc, #56]	; (80099dc <TM_DMA2DGRAPHIC_Init+0x9c>)
 80099a4:	601a      	str	r2, [r3, #0]
	
	/* Enable DMA2D clock */
	__HAL_RCC_DMA2D_CLK_ENABLE();
 80099a6:	2300      	movs	r3, #0
 80099a8:	607b      	str	r3, [r7, #4]
 80099aa:	4b0d      	ldr	r3, [pc, #52]	; (80099e0 <TM_DMA2DGRAPHIC_Init+0xa0>)
 80099ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ae:	4a0c      	ldr	r2, [pc, #48]	; (80099e0 <TM_DMA2DGRAPHIC_Init+0xa0>)
 80099b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80099b4:	6313      	str	r3, [r2, #48]	; 0x30
 80099b6:	4b0a      	ldr	r3, [pc, #40]	; (80099e0 <TM_DMA2DGRAPHIC_Init+0xa0>)
 80099b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099be:	607b      	str	r3, [r7, #4]
 80099c0:	687b      	ldr	r3, [r7, #4]
	
	/* Initialized */
	DIS.Initialized = 1;
 80099c2:	4b04      	ldr	r3, [pc, #16]	; (80099d4 <TM_DMA2DGRAPHIC_Init+0x94>)
 80099c4:	2201      	movs	r2, #1
 80099c6:	771a      	strb	r2, [r3, #28]
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	2000369c 	.word	0x2000369c
 80099d8:	20000ba8 	.word	0x20000ba8
 80099dc:	4002b000 	.word	0x4002b000
 80099e0:	40023800 	.word	0x40023800

080099e4 <TM_DMA2DGRAPHIC_SetLayer>:

void TM_DMA2DGRAPHIC_SetLayer(uint8_t layer_number) {
 80099e4:	b480      	push	{r7}
 80099e6:	b083      	sub	sp, #12
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	71fb      	strb	r3, [r7, #7]
	/* Set offset */
	DIS.Offset = (layer_number) * DIS.LayerOffset;
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	4a07      	ldr	r2, [pc, #28]	; (8009a10 <TM_DMA2DGRAPHIC_SetLayer+0x2c>)
 80099f2:	68d2      	ldr	r2, [r2, #12]
 80099f4:	fb02 f303 	mul.w	r3, r2, r3
 80099f8:	4a05      	ldr	r2, [pc, #20]	; (8009a10 <TM_DMA2DGRAPHIC_SetLayer+0x2c>)
 80099fa:	6153      	str	r3, [r2, #20]
	DIS.LayerNumber = layer_number;
 80099fc:	4a04      	ldr	r2, [pc, #16]	; (8009a10 <TM_DMA2DGRAPHIC_SetLayer+0x2c>)
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	7413      	strb	r3, [r2, #16]
}
 8009a02:	bf00      	nop
 8009a04:	370c      	adds	r7, #12
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
 8009a0e:	bf00      	nop
 8009a10:	2000369c 	.word	0x2000369c

08009a14 <TM_DMA2DGRAPHIC_DrawPixel>:

void TM_DMA2DGRAPHIC_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 8009a14:	b490      	push	{r4, r7}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	603a      	str	r2, [r7, #0]
 8009a1e:	80fb      	strh	r3, [r7, #6]
 8009a20:	460b      	mov	r3, r1
 8009a22:	80bb      	strh	r3, [r7, #4]
	if (DIS.Orientation == 1) { /* Normal */
 8009a24:	4b47      	ldr	r3, [pc, #284]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a26:	7f5b      	ldrb	r3, [r3, #29]
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d117      	bne.n	8009a5e <TM_DMA2DGRAPHIC_DrawPixel+0x4a>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * (y * DIS.Width + x)) = color;
 8009a2e:	4b45      	ldr	r3, [pc, #276]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a30:	689a      	ldr	r2, [r3, #8]
 8009a32:	4b44      	ldr	r3, [pc, #272]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	4413      	add	r3, r2
 8009a38:	4a42      	ldr	r2, [pc, #264]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a3a:	7f92      	ldrb	r2, [r2, #30]
 8009a3c:	b2d2      	uxtb	r2, r2
 8009a3e:	4610      	mov	r0, r2
 8009a40:	88ba      	ldrh	r2, [r7, #4]
 8009a42:	4940      	ldr	r1, [pc, #256]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a44:	8809      	ldrh	r1, [r1, #0]
 8009a46:	b289      	uxth	r1, r1
 8009a48:	fb01 f102 	mul.w	r1, r1, r2
 8009a4c:	88fa      	ldrh	r2, [r7, #6]
 8009a4e:	440a      	add	r2, r1
 8009a50:	fb02 f200 	mul.w	r2, r2, r0
 8009a54:	4413      	add	r3, r2
 8009a56:	461a      	mov	r2, r3
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	6013      	str	r3, [r2, #0]
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1)) = color;
	} else if (DIS.Orientation == 2) { /* 270 */
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y)) = color;
	}
}
 8009a5c:	e06c      	b.n	8009b38 <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 0) { /* 180 */
 8009a5e:	4b39      	ldr	r3, [pc, #228]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a60:	7f5b      	ldrb	r3, [r3, #29]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d123      	bne.n	8009ab0 <TM_DMA2DGRAPHIC_DrawPixel+0x9c>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - y - 1) * DIS.Width + (DIS.Width - x - 1))) = color;
 8009a68:	4b36      	ldr	r3, [pc, #216]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	4b35      	ldr	r3, [pc, #212]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a6e:	695b      	ldr	r3, [r3, #20]
 8009a70:	4413      	add	r3, r2
 8009a72:	4a34      	ldr	r2, [pc, #208]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a74:	7f92      	ldrb	r2, [r2, #30]
 8009a76:	b2d2      	uxtb	r2, r2
 8009a78:	4610      	mov	r0, r2
 8009a7a:	4a32      	ldr	r2, [pc, #200]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a7c:	8852      	ldrh	r2, [r2, #2]
 8009a7e:	b292      	uxth	r2, r2
 8009a80:	4611      	mov	r1, r2
 8009a82:	88ba      	ldrh	r2, [r7, #4]
 8009a84:	1a8a      	subs	r2, r1, r2
 8009a86:	3a01      	subs	r2, #1
 8009a88:	492e      	ldr	r1, [pc, #184]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a8a:	8809      	ldrh	r1, [r1, #0]
 8009a8c:	b289      	uxth	r1, r1
 8009a8e:	fb01 f102 	mul.w	r1, r1, r2
 8009a92:	4a2c      	ldr	r2, [pc, #176]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009a94:	8812      	ldrh	r2, [r2, #0]
 8009a96:	b292      	uxth	r2, r2
 8009a98:	4614      	mov	r4, r2
 8009a9a:	88fa      	ldrh	r2, [r7, #6]
 8009a9c:	1aa2      	subs	r2, r4, r2
 8009a9e:	3a01      	subs	r2, #1
 8009aa0:	440a      	add	r2, r1
 8009aa2:	fb02 f200 	mul.w	r2, r2, r0
 8009aa6:	4413      	add	r3, r2
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	6013      	str	r3, [r2, #0]
}
 8009aae:	e043      	b.n	8009b38 <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
 8009ab0:	4b24      	ldr	r3, [pc, #144]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009ab2:	7f5b      	ldrb	r3, [r3, #29]
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b03      	cmp	r3, #3
 8009ab8:	d11c      	bne.n	8009af4 <TM_DMA2DGRAPHIC_DrawPixel+0xe0>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1)) = color;
 8009aba:	4b22      	ldr	r3, [pc, #136]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009abc:	689a      	ldr	r2, [r3, #8]
 8009abe:	4b21      	ldr	r3, [pc, #132]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	4a1f      	ldr	r2, [pc, #124]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009ac6:	7f92      	ldrb	r2, [r2, #30]
 8009ac8:	b2d2      	uxtb	r2, r2
 8009aca:	4610      	mov	r0, r2
 8009acc:	88fa      	ldrh	r2, [r7, #6]
 8009ace:	491d      	ldr	r1, [pc, #116]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009ad0:	8809      	ldrh	r1, [r1, #0]
 8009ad2:	b289      	uxth	r1, r1
 8009ad4:	fb01 f202 	mul.w	r2, r1, r2
 8009ad8:	491a      	ldr	r1, [pc, #104]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009ada:	8809      	ldrh	r1, [r1, #0]
 8009adc:	b289      	uxth	r1, r1
 8009ade:	4411      	add	r1, r2
 8009ae0:	88ba      	ldrh	r2, [r7, #4]
 8009ae2:	1a8a      	subs	r2, r1, r2
 8009ae4:	3a01      	subs	r2, #1
 8009ae6:	fb02 f200 	mul.w	r2, r2, r0
 8009aea:	4413      	add	r3, r2
 8009aec:	461a      	mov	r2, r3
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	6013      	str	r3, [r2, #0]
}
 8009af2:	e021      	b.n	8009b38 <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 2) { /* 270 */
 8009af4:	4b13      	ldr	r3, [pc, #76]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009af6:	7f5b      	ldrb	r3, [r3, #29]
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	2b02      	cmp	r3, #2
 8009afc:	d11c      	bne.n	8009b38 <TM_DMA2DGRAPHIC_DrawPixel+0x124>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y)) = color;
 8009afe:	4b11      	ldr	r3, [pc, #68]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009b00:	689a      	ldr	r2, [r3, #8]
 8009b02:	4b10      	ldr	r3, [pc, #64]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	4413      	add	r3, r2
 8009b08:	4a0e      	ldr	r2, [pc, #56]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009b0a:	7f92      	ldrb	r2, [r2, #30]
 8009b0c:	b2d2      	uxtb	r2, r2
 8009b0e:	4610      	mov	r0, r2
 8009b10:	4a0c      	ldr	r2, [pc, #48]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009b12:	8852      	ldrh	r2, [r2, #2]
 8009b14:	b292      	uxth	r2, r2
 8009b16:	4611      	mov	r1, r2
 8009b18:	88fa      	ldrh	r2, [r7, #6]
 8009b1a:	1a8a      	subs	r2, r1, r2
 8009b1c:	3a01      	subs	r2, #1
 8009b1e:	4909      	ldr	r1, [pc, #36]	; (8009b44 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8009b20:	8809      	ldrh	r1, [r1, #0]
 8009b22:	b289      	uxth	r1, r1
 8009b24:	fb01 f102 	mul.w	r1, r1, r2
 8009b28:	88ba      	ldrh	r2, [r7, #4]
 8009b2a:	440a      	add	r2, r1
 8009b2c:	fb02 f200 	mul.w	r2, r2, r0
 8009b30:	4413      	add	r3, r2
 8009b32:	461a      	mov	r2, r3
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6013      	str	r3, [r2, #0]
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bc90      	pop	{r4, r7}
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	2000369c 	.word	0x2000369c

08009b48 <TM_DMA2DGRAPHIC_GetPixel>:

uint32_t TM_DMA2DGRAPHIC_GetPixel(uint16_t x, uint16_t y) {
 8009b48:	b490      	push	{r4, r7}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	4603      	mov	r3, r0
 8009b50:	460a      	mov	r2, r1
 8009b52:	80fb      	strh	r3, [r7, #6]
 8009b54:	4613      	mov	r3, r2
 8009b56:	80bb      	strh	r3, [r7, #4]
	if (DIS.Orientation == 1) { /* Normal */
 8009b58:	4b44      	ldr	r3, [pc, #272]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009b5a:	7f5b      	ldrb	r3, [r3, #29]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d115      	bne.n	8009b8e <TM_DMA2DGRAPHIC_GetPixel+0x46>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * (y * DIS.Width + x));
 8009b62:	4b42      	ldr	r3, [pc, #264]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009b64:	689a      	ldr	r2, [r3, #8]
 8009b66:	4b41      	ldr	r3, [pc, #260]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	4413      	add	r3, r2
 8009b6c:	4a3f      	ldr	r2, [pc, #252]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009b6e:	7f92      	ldrb	r2, [r2, #30]
 8009b70:	b2d2      	uxtb	r2, r2
 8009b72:	4610      	mov	r0, r2
 8009b74:	88ba      	ldrh	r2, [r7, #4]
 8009b76:	493d      	ldr	r1, [pc, #244]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009b78:	8809      	ldrh	r1, [r1, #0]
 8009b7a:	b289      	uxth	r1, r1
 8009b7c:	fb01 f102 	mul.w	r1, r1, r2
 8009b80:	88fa      	ldrh	r2, [r7, #6]
 8009b82:	440a      	add	r2, r1
 8009b84:	fb02 f200 	mul.w	r2, r2, r0
 8009b88:	4413      	add	r3, r2
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	e068      	b.n	8009c60 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 0) { /* 180 */
 8009b8e:	4b37      	ldr	r3, [pc, #220]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009b90:	7f5b      	ldrb	r3, [r3, #29]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d121      	bne.n	8009bdc <TM_DMA2DGRAPHIC_GetPixel+0x94>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - y - 1) * DIS.Width + (DIS.Width - x - 1)));
 8009b98:	4b34      	ldr	r3, [pc, #208]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009b9a:	689a      	ldr	r2, [r3, #8]
 8009b9c:	4b33      	ldr	r3, [pc, #204]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009b9e:	695b      	ldr	r3, [r3, #20]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	4a32      	ldr	r2, [pc, #200]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009ba4:	7f92      	ldrb	r2, [r2, #30]
 8009ba6:	b2d2      	uxtb	r2, r2
 8009ba8:	4610      	mov	r0, r2
 8009baa:	4a30      	ldr	r2, [pc, #192]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009bac:	8852      	ldrh	r2, [r2, #2]
 8009bae:	b292      	uxth	r2, r2
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	88ba      	ldrh	r2, [r7, #4]
 8009bb4:	1a8a      	subs	r2, r1, r2
 8009bb6:	3a01      	subs	r2, #1
 8009bb8:	492c      	ldr	r1, [pc, #176]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009bba:	8809      	ldrh	r1, [r1, #0]
 8009bbc:	b289      	uxth	r1, r1
 8009bbe:	fb01 f102 	mul.w	r1, r1, r2
 8009bc2:	4a2a      	ldr	r2, [pc, #168]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009bc4:	8812      	ldrh	r2, [r2, #0]
 8009bc6:	b292      	uxth	r2, r2
 8009bc8:	4614      	mov	r4, r2
 8009bca:	88fa      	ldrh	r2, [r7, #6]
 8009bcc:	1aa2      	subs	r2, r4, r2
 8009bce:	3a01      	subs	r2, #1
 8009bd0:	440a      	add	r2, r1
 8009bd2:	fb02 f200 	mul.w	r2, r2, r0
 8009bd6:	4413      	add	r3, r2
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	e041      	b.n	8009c60 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
 8009bdc:	4b23      	ldr	r3, [pc, #140]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009bde:	7f5b      	ldrb	r3, [r3, #29]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d11a      	bne.n	8009c1c <TM_DMA2DGRAPHIC_GetPixel+0xd4>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1));
 8009be6:	4b21      	ldr	r3, [pc, #132]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009be8:	689a      	ldr	r2, [r3, #8]
 8009bea:	4b20      	ldr	r3, [pc, #128]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009bec:	695b      	ldr	r3, [r3, #20]
 8009bee:	4413      	add	r3, r2
 8009bf0:	4a1e      	ldr	r2, [pc, #120]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009bf2:	7f92      	ldrb	r2, [r2, #30]
 8009bf4:	b2d2      	uxtb	r2, r2
 8009bf6:	4610      	mov	r0, r2
 8009bf8:	88fa      	ldrh	r2, [r7, #6]
 8009bfa:	491c      	ldr	r1, [pc, #112]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009bfc:	8809      	ldrh	r1, [r1, #0]
 8009bfe:	b289      	uxth	r1, r1
 8009c00:	fb01 f202 	mul.w	r2, r1, r2
 8009c04:	4919      	ldr	r1, [pc, #100]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009c06:	8809      	ldrh	r1, [r1, #0]
 8009c08:	b289      	uxth	r1, r1
 8009c0a:	4411      	add	r1, r2
 8009c0c:	88ba      	ldrh	r2, [r7, #4]
 8009c0e:	1a8a      	subs	r2, r1, r2
 8009c10:	3a01      	subs	r2, #1
 8009c12:	fb02 f200 	mul.w	r2, r2, r0
 8009c16:	4413      	add	r3, r2
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	e021      	b.n	8009c60 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 2) { /* 270 */
 8009c1c:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009c1e:	7f5b      	ldrb	r3, [r3, #29]
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d11b      	bne.n	8009c5e <TM_DMA2DGRAPHIC_GetPixel+0x116>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y));
 8009c26:	4b11      	ldr	r3, [pc, #68]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009c28:	689a      	ldr	r2, [r3, #8]
 8009c2a:	4b10      	ldr	r3, [pc, #64]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	4413      	add	r3, r2
 8009c30:	4a0e      	ldr	r2, [pc, #56]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009c32:	7f92      	ldrb	r2, [r2, #30]
 8009c34:	b2d2      	uxtb	r2, r2
 8009c36:	4610      	mov	r0, r2
 8009c38:	4a0c      	ldr	r2, [pc, #48]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009c3a:	8852      	ldrh	r2, [r2, #2]
 8009c3c:	b292      	uxth	r2, r2
 8009c3e:	4611      	mov	r1, r2
 8009c40:	88fa      	ldrh	r2, [r7, #6]
 8009c42:	1a8a      	subs	r2, r1, r2
 8009c44:	3a01      	subs	r2, #1
 8009c46:	4909      	ldr	r1, [pc, #36]	; (8009c6c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8009c48:	8809      	ldrh	r1, [r1, #0]
 8009c4a:	b289      	uxth	r1, r1
 8009c4c:	fb01 f102 	mul.w	r1, r1, r2
 8009c50:	88ba      	ldrh	r2, [r7, #4]
 8009c52:	440a      	add	r2, r1
 8009c54:	fb02 f200 	mul.w	r2, r2, r0
 8009c58:	4413      	add	r3, r2
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	e000      	b.n	8009c60 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	}
	return 0;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bc90      	pop	{r4, r7}
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	2000369c 	.word	0x2000369c

08009c70 <TM_DMA2DGRAPHIC_SetOrientation>:

void TM_DMA2DGRAPHIC_SetOrientation(uint8_t orientation) {
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	71fb      	strb	r3, [r7, #7]
	/* Filter */
	if (orientation > 3) {
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d81e      	bhi.n	8009cbe <TM_DMA2DGRAPHIC_SetOrientation+0x4e>
		return;
	}
	
	/* Save new orientation */
	DIS.Orientation = orientation;
 8009c80:	4a12      	ldr	r2, [pc, #72]	; (8009ccc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	7753      	strb	r3, [r2, #29]
	
	if (
 8009c86:	79fb      	ldrb	r3, [r7, #7]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <TM_DMA2DGRAPHIC_SetOrientation+0x22>
		orientation == 0 ||
 8009c8c:	79fb      	ldrb	r3, [r7, #7]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d10a      	bne.n	8009ca8 <TM_DMA2DGRAPHIC_SetOrientation+0x38>
		orientation == 1
	) {
		DIS.CurrentHeight = DIS.Height;
 8009c92:	4b0e      	ldr	r3, [pc, #56]	; (8009ccc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8009c94:	885b      	ldrh	r3, [r3, #2]
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8009c9a:	80da      	strh	r2, [r3, #6]
		DIS.CurrentWidth = DIS.Width;
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ccc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8009c9e:	881b      	ldrh	r3, [r3, #0]
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8009ca4:	809a      	strh	r2, [r3, #4]
 8009ca6:	e00b      	b.n	8009cc0 <TM_DMA2DGRAPHIC_SetOrientation+0x50>
	} else {
		DIS.CurrentHeight = DIS.Width;
 8009ca8:	4b08      	ldr	r3, [pc, #32]	; (8009ccc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	4b07      	ldr	r3, [pc, #28]	; (8009ccc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8009cb0:	80da      	strh	r2, [r3, #6]
		DIS.CurrentWidth = DIS.Height;
 8009cb2:	4b06      	ldr	r3, [pc, #24]	; (8009ccc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8009cb4:	885b      	ldrh	r3, [r3, #2]
 8009cb6:	b29a      	uxth	r2, r3
 8009cb8:	4b04      	ldr	r3, [pc, #16]	; (8009ccc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8009cba:	809a      	strh	r2, [r3, #4]
 8009cbc:	e000      	b.n	8009cc0 <TM_DMA2DGRAPHIC_SetOrientation+0x50>
		return;
 8009cbe:	bf00      	nop
	}
}
 8009cc0:	370c      	adds	r7, #12
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	2000369c 	.word	0x2000369c

08009cd0 <TM_DMA2DGRAPHIC_Fill>:

void TM_DMA2DGRAPHIC_Fill(uint32_t color) {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af02      	add	r7, sp, #8
 8009cd6:	6078      	str	r0, [r7, #4]
	/* Set parameters */
	DMA2DHandle.Init.Mode = DMA2D_R2M;
 8009cd8:	4b1d      	ldr	r3, [pc, #116]	; (8009d50 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8009cda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009cde:	605a      	str	r2, [r3, #4]
	DMA2DHandle.Init.ColorMode = DMA2D_ARGB8888;
 8009ce0:	4b1b      	ldr	r3, [pc, #108]	; (8009d50 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	609a      	str	r2, [r3, #8]
	DMA2DHandle.Init.OutputOffset = 0;
 8009ce6:	4b1a      	ldr	r3, [pc, #104]	; (8009d50 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8009ce8:	2200      	movs	r2, #0
 8009cea:	60da      	str	r2, [r3, #12]

	/* Convert color */
	DMA2D_Convert565ToARGB8888(color);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f7ff fe17 	bl	8009920 <DMA2D_Convert565ToARGB8888>

	/* Init DMA2D and start transfer */
	if (HAL_DMA2D_Init(&DMA2DHandle) == HAL_OK) {
 8009cf2:	4817      	ldr	r0, [pc, #92]	; (8009d50 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8009cf4:	f7fc fae8 	bl	80062c8 <HAL_DMA2D_Init>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d123      	bne.n	8009d46 <TM_DMA2DGRAPHIC_Fill+0x76>
		if (HAL_DMA2D_ConfigLayer(&DMA2DHandle, DIS.LayerNumber) == HAL_OK) {
 8009cfe:	4b15      	ldr	r3, [pc, #84]	; (8009d54 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8009d00:	7c1b      	ldrb	r3, [r3, #16]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	4619      	mov	r1, r3
 8009d06:	4812      	ldr	r0, [pc, #72]	; (8009d50 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8009d08:	f7fc fc3c 	bl	8006584 <HAL_DMA2D_ConfigLayer>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d119      	bne.n	8009d46 <TM_DMA2DGRAPHIC_Fill+0x76>
			if (HAL_DMA2D_Start(&DMA2DHandle, DMA2D_Color, (uint32_t)(DIS.StartAddress + DIS.Offset), DIS.Width, DIS.Height) == HAL_OK) {        
 8009d12:	4b11      	ldr	r3, [pc, #68]	; (8009d58 <TM_DMA2DGRAPHIC_Fill+0x88>)
 8009d14:	6819      	ldr	r1, [r3, #0]
 8009d16:	4b0f      	ldr	r3, [pc, #60]	; (8009d54 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8009d18:	689a      	ldr	r2, [r3, #8]
 8009d1a:	4b0e      	ldr	r3, [pc, #56]	; (8009d54 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8009d1c:	695b      	ldr	r3, [r3, #20]
 8009d1e:	441a      	add	r2, r3
 8009d20:	4b0c      	ldr	r3, [pc, #48]	; (8009d54 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8009d22:	881b      	ldrh	r3, [r3, #0]
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	4618      	mov	r0, r3
 8009d28:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8009d2a:	885b      	ldrh	r3, [r3, #2]
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	4603      	mov	r3, r0
 8009d32:	4807      	ldr	r0, [pc, #28]	; (8009d50 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8009d34:	f7fc fb11 	bl	800635a <HAL_DMA2D_Start>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d103      	bne.n	8009d46 <TM_DMA2DGRAPHIC_Fill+0x76>
				HAL_DMA2D_PollForTransfer(&DMA2DHandle, 20);
 8009d3e:	2114      	movs	r1, #20
 8009d40:	4803      	ldr	r0, [pc, #12]	; (8009d50 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8009d42:	f7fc fb35 	bl	80063b0 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8009d46:	bf00      	nop
 8009d48:	3708      	adds	r7, #8
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20000ba8 	.word	0x20000ba8
 8009d54:	2000369c 	.word	0x2000369c
 8009d58:	20000974 	.word	0x20000974

08009d5c <TM_INT_DMA2DGRAPHIC_SetConf>:
	/* Start DMA2D */
	DMA2D->CR |= DMA2D_CR_START; 
}

/* Private functions */
void TM_INT_DMA2DGRAPHIC_SetConf(TM_DMA2DGRAPHIC_INT_Conf_t* Conf) {
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
	/* Fill settings for DMA2D */
	DIS.Width = Conf->Width;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	881a      	ldrh	r2, [r3, #0]
 8009d68:	4b1a      	ldr	r3, [pc, #104]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009d6a:	801a      	strh	r2, [r3, #0]
	DIS.Height = Conf->Height;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	885a      	ldrh	r2, [r3, #2]
 8009d70:	4b18      	ldr	r3, [pc, #96]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009d72:	805a      	strh	r2, [r3, #2]
	DIS.StartAddress = Conf->BufferStart;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	689b      	ldr	r3, [r3, #8]
 8009d78:	4a16      	ldr	r2, [pc, #88]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009d7a:	6093      	str	r3, [r2, #8]
	DIS.LayerOffset = Conf->BufferOffset;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	4a14      	ldr	r2, [pc, #80]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009d82:	60d3      	str	r3, [r2, #12]
	DIS.PixelSize = Conf->BytesPerPixel;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	791a      	ldrb	r2, [r3, #4]
 8009d88:	4b12      	ldr	r3, [pc, #72]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009d8a:	779a      	strb	r2, [r3, #30]
	DIS.Pixels = DIS.Width * DIS.Height;
 8009d8c:	4b11      	ldr	r3, [pc, #68]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	461a      	mov	r2, r3
 8009d94:	4b0f      	ldr	r3, [pc, #60]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009d96:	885b      	ldrh	r3, [r3, #2]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	fb03 f302 	mul.w	r3, r3, r2
 8009d9e:	461a      	mov	r2, r3
 8009da0:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009da2:	619a      	str	r2, [r3, #24]
	DIS.Orientation = Conf->Orientation;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	7c1a      	ldrb	r2, [r3, #16]
 8009da8:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009daa:	775a      	strb	r2, [r3, #29]
	DIS.CurrentWidth = DIS.Width;
 8009dac:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	b29a      	uxth	r2, r3
 8009db2:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009db4:	809a      	strh	r2, [r3, #4]
	DIS.CurrentHeight = DIS.Height;
 8009db6:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009db8:	885b      	ldrh	r3, [r3, #2]
 8009dba:	b29a      	uxth	r2, r3
 8009dbc:	4b05      	ldr	r3, [pc, #20]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009dbe:	80da      	strh	r2, [r3, #6]
	
	/* Set DMA2D orientation */
	TM_DMA2DGRAPHIC_SetOrientation(DIS.Orientation);
 8009dc0:	4b04      	ldr	r3, [pc, #16]	; (8009dd4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8009dc2:	7f5b      	ldrb	r3, [r3, #29]
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff ff52 	bl	8009c70 <TM_DMA2DGRAPHIC_SetOrientation>
}
 8009dcc:	bf00      	nop
 8009dce:	3708      	adds	r7, #8
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	2000369c 	.word	0x2000369c

08009dd8 <TM_EXTI_Handler>:
	EXTI->FTSR &= 0xFFFF0000;
	EXTI->RTSR &= 0xFFFF0000;
	EXTI->PR &= 0xFFFF0000;
}

__weak void TM_EXTI_Handler(uint16_t GPIO_Pin) {
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	4603      	mov	r3, r0
 8009de0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the TM_EXTI_Handler could be implemented in the user file
   */ 
}
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
	...

08009df0 <EXTI0_IRQHandler>:
/******************************************************************/

#if defined(STM32F4xx) || defined(STM32F7xx)

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_0
void EXTI0_IRQHandler(void) {
 8009df0:	b580      	push	{r7, lr}
 8009df2:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR0)) {
 8009df4:	4b06      	ldr	r3, [pc, #24]	; (8009e10 <EXTI0_IRQHandler+0x20>)
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d005      	beq.n	8009e0c <EXTI0_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR0;
 8009e00:	4b03      	ldr	r3, [pc, #12]	; (8009e10 <EXTI0_IRQHandler+0x20>)
 8009e02:	2201      	movs	r2, #1
 8009e04:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_0);
 8009e06:	2001      	movs	r0, #1
 8009e08:	f7ff ffe6 	bl	8009dd8 <TM_EXTI_Handler>
	}
}
 8009e0c:	bf00      	nop
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	40013c00 	.word	0x40013c00

08009e14 <EXTI1_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_1
void EXTI1_IRQHandler(void) {
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR1)) {
 8009e18:	4b06      	ldr	r3, [pc, #24]	; (8009e34 <EXTI1_IRQHandler+0x20>)
 8009e1a:	695b      	ldr	r3, [r3, #20]
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <EXTI1_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR1;
 8009e24:	4b03      	ldr	r3, [pc, #12]	; (8009e34 <EXTI1_IRQHandler+0x20>)
 8009e26:	2202      	movs	r2, #2
 8009e28:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_1);
 8009e2a:	2002      	movs	r0, #2
 8009e2c:	f7ff ffd4 	bl	8009dd8 <TM_EXTI_Handler>
	}
}
 8009e30:	bf00      	nop
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	40013c00 	.word	0x40013c00

08009e38 <EXTI2_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_2
void EXTI2_IRQHandler(void) {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR2)) {
 8009e3c:	4b06      	ldr	r3, [pc, #24]	; (8009e58 <EXTI2_IRQHandler+0x20>)
 8009e3e:	695b      	ldr	r3, [r3, #20]
 8009e40:	f003 0304 	and.w	r3, r3, #4
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d005      	beq.n	8009e54 <EXTI2_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR2;
 8009e48:	4b03      	ldr	r3, [pc, #12]	; (8009e58 <EXTI2_IRQHandler+0x20>)
 8009e4a:	2204      	movs	r2, #4
 8009e4c:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_2);
 8009e4e:	2004      	movs	r0, #4
 8009e50:	f7ff ffc2 	bl	8009dd8 <TM_EXTI_Handler>
	}
}
 8009e54:	bf00      	nop
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40013c00 	.word	0x40013c00

08009e5c <EXTI3_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_3
void EXTI3_IRQHandler(void) {
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR3)) {
 8009e60:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <EXTI3_IRQHandler+0x20>)
 8009e62:	695b      	ldr	r3, [r3, #20]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d005      	beq.n	8009e78 <EXTI3_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR3;
 8009e6c:	4b03      	ldr	r3, [pc, #12]	; (8009e7c <EXTI3_IRQHandler+0x20>)
 8009e6e:	2208      	movs	r2, #8
 8009e70:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_3);
 8009e72:	2008      	movs	r0, #8
 8009e74:	f7ff ffb0 	bl	8009dd8 <TM_EXTI_Handler>
	}
}
 8009e78:	bf00      	nop
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	40013c00 	.word	0x40013c00

08009e80 <EXTI4_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_4
void EXTI4_IRQHandler(void) {
 8009e80:	b580      	push	{r7, lr}
 8009e82:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR4)) {
 8009e84:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <EXTI4_IRQHandler+0x20>)
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	f003 0310 	and.w	r3, r3, #16
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d005      	beq.n	8009e9c <EXTI4_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR4;
 8009e90:	4b03      	ldr	r3, [pc, #12]	; (8009ea0 <EXTI4_IRQHandler+0x20>)
 8009e92:	2210      	movs	r2, #16
 8009e94:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_4);
 8009e96:	2010      	movs	r0, #16
 8009e98:	f7ff ff9e 	bl	8009dd8 <TM_EXTI_Handler>
	}
}
 8009e9c:	bf00      	nop
 8009e9e:	bd80      	pop	{r7, pc}
 8009ea0:	40013c00 	.word	0x40013c00

08009ea4 <EXTI9_5_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_9_5
void EXTI9_5_IRQHandler(void) {
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR5)) {
 8009ea8:	4b20      	ldr	r3, [pc, #128]	; (8009f2c <EXTI9_5_IRQHandler+0x88>)
 8009eaa:	695b      	ldr	r3, [r3, #20]
 8009eac:	f003 0320 	and.w	r3, r3, #32
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d005      	beq.n	8009ec0 <EXTI9_5_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR5;
 8009eb4:	4b1d      	ldr	r3, [pc, #116]	; (8009f2c <EXTI9_5_IRQHandler+0x88>)
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_5);
 8009eba:	2020      	movs	r0, #32
 8009ebc:	f7ff ff8c 	bl	8009dd8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR6)) {
 8009ec0:	4b1a      	ldr	r3, [pc, #104]	; (8009f2c <EXTI9_5_IRQHandler+0x88>)
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d005      	beq.n	8009ed8 <EXTI9_5_IRQHandler+0x34>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR6;
 8009ecc:	4b17      	ldr	r3, [pc, #92]	; (8009f2c <EXTI9_5_IRQHandler+0x88>)
 8009ece:	2240      	movs	r2, #64	; 0x40
 8009ed0:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_6);
 8009ed2:	2040      	movs	r0, #64	; 0x40
 8009ed4:	f7ff ff80 	bl	8009dd8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR7)) {
 8009ed8:	4b14      	ldr	r3, [pc, #80]	; (8009f2c <EXTI9_5_IRQHandler+0x88>)
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d005      	beq.n	8009ef0 <EXTI9_5_IRQHandler+0x4c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR7;
 8009ee4:	4b11      	ldr	r3, [pc, #68]	; (8009f2c <EXTI9_5_IRQHandler+0x88>)
 8009ee6:	2280      	movs	r2, #128	; 0x80
 8009ee8:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_7);
 8009eea:	2080      	movs	r0, #128	; 0x80
 8009eec:	f7ff ff74 	bl	8009dd8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR8)) {
 8009ef0:	4b0e      	ldr	r3, [pc, #56]	; (8009f2c <EXTI9_5_IRQHandler+0x88>)
 8009ef2:	695b      	ldr	r3, [r3, #20]
 8009ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d007      	beq.n	8009f0c <EXTI9_5_IRQHandler+0x68>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR8;
 8009efc:	4b0b      	ldr	r3, [pc, #44]	; (8009f2c <EXTI9_5_IRQHandler+0x88>)
 8009efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f02:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_8);
 8009f04:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009f08:	f7ff ff66 	bl	8009dd8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR9)) {
 8009f0c:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <EXTI9_5_IRQHandler+0x88>)
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d007      	beq.n	8009f28 <EXTI9_5_IRQHandler+0x84>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR9;
 8009f18:	4b04      	ldr	r3, [pc, #16]	; (8009f2c <EXTI9_5_IRQHandler+0x88>)
 8009f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f1e:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_9);
 8009f20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009f24:	f7ff ff58 	bl	8009dd8 <TM_EXTI_Handler>
	}
}
 8009f28:	bf00      	nop
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	40013c00 	.word	0x40013c00

08009f30 <EXTI15_10_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_15_10
void EXTI15_10_IRQHandler(void) {
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR10)) {
 8009f34:	4b2a      	ldr	r3, [pc, #168]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d007      	beq.n	8009f50 <EXTI15_10_IRQHandler+0x20>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR10;
 8009f40:	4b27      	ldr	r3, [pc, #156]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f46:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_10);
 8009f48:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009f4c:	f7ff ff44 	bl	8009dd8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR11)) {
 8009f50:	4b23      	ldr	r3, [pc, #140]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d007      	beq.n	8009f6c <EXTI15_10_IRQHandler+0x3c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR11;
 8009f5c:	4b20      	ldr	r3, [pc, #128]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f62:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_11);
 8009f64:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009f68:	f7ff ff36 	bl	8009dd8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR12)) {
 8009f6c:	4b1c      	ldr	r3, [pc, #112]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d007      	beq.n	8009f88 <EXTI15_10_IRQHandler+0x58>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR12;
 8009f78:	4b19      	ldr	r3, [pc, #100]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009f7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009f7e:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_12);
 8009f80:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8009f84:	f7ff ff28 	bl	8009dd8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR13)) {
 8009f88:	4b15      	ldr	r3, [pc, #84]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d007      	beq.n	8009fa4 <EXTI15_10_IRQHandler+0x74>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR13;
 8009f94:	4b12      	ldr	r3, [pc, #72]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009f96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009f9a:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_13);
 8009f9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8009fa0:	f7ff ff1a 	bl	8009dd8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR14)) {
 8009fa4:	4b0e      	ldr	r3, [pc, #56]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d007      	beq.n	8009fc0 <EXTI15_10_IRQHandler+0x90>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR14;
 8009fb0:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009fb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009fb6:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_14);
 8009fb8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8009fbc:	f7ff ff0c 	bl	8009dd8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR15)) {
 8009fc0:	4b07      	ldr	r3, [pc, #28]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009fc2:	695b      	ldr	r3, [r3, #20]
 8009fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d007      	beq.n	8009fdc <EXTI15_10_IRQHandler+0xac>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR15;
 8009fcc:	4b04      	ldr	r3, [pc, #16]	; (8009fe0 <EXTI15_10_IRQHandler+0xb0>)
 8009fce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009fd2:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_15);
 8009fd4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009fd8:	f7ff fefe 	bl	8009dd8 <TM_EXTI_Handler>
	}
}
 8009fdc:	bf00      	nop
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	40013c00 	.word	0x40013c00

08009fe4 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af02      	add	r7, sp, #8
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	4608      	mov	r0, r1
 8009fee:	4611      	mov	r1, r2
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	807b      	strh	r3, [r7, #2]
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	707b      	strb	r3, [r7, #1]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8009ffe:	887b      	ldrh	r3, [r7, #2]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d00e      	beq.n	800a022 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 f875 	bl	800a0f4 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800a00a:	7838      	ldrb	r0, [r7, #0]
 800a00c:	787a      	ldrb	r2, [r7, #1]
 800a00e:	8879      	ldrh	r1, [r7, #2]
 800a010:	7d3b      	ldrb	r3, [r7, #20]
 800a012:	9301      	str	r3, [sp, #4]
 800a014:	7c3b      	ldrb	r3, [r7, #16]
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	4603      	mov	r3, r0
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f882 	bl	800a124 <TM_GPIO_INT_Init>
 800a020:	e000      	b.n	800a024 <TM_GPIO_Init+0x40>
		return;
 800a022:	bf00      	nop
}
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b086      	sub	sp, #24
 800a02e:	af02      	add	r7, sp, #8
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	4608      	mov	r0, r1
 800a034:	4611      	mov	r1, r2
 800a036:	461a      	mov	r2, r3
 800a038:	4603      	mov	r3, r0
 800a03a:	807b      	strh	r3, [r7, #2]
 800a03c:	460b      	mov	r3, r1
 800a03e:	707b      	strb	r3, [r7, #1]
 800a040:	4613      	mov	r3, r2
 800a042:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 800a044:	887b      	ldrh	r3, [r7, #2]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d03f      	beq.n	800a0ca <TM_GPIO_InitAlternate+0xa0>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f852 	bl	800a0f4 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800a050:	2300      	movs	r3, #0
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	e02a      	b.n	800a0ac <TM_GPIO_InitAlternate+0x82>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800a056:	887a      	ldrh	r2, [r7, #2]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	fa42 f303 	asr.w	r3, r2, r3
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	2b00      	cmp	r3, #0
 800a064:	d01e      	beq.n	800a0a4 <TM_GPIO_InitAlternate+0x7a>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	08da      	lsrs	r2, r3, #3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3208      	adds	r2, #8
 800a06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	f002 0207 	and.w	r2, r2, #7
 800a078:	0092      	lsls	r2, r2, #2
 800a07a:	210f      	movs	r1, #15
 800a07c:	fa01 f202 	lsl.w	r2, r1, r2
 800a080:	43d2      	mvns	r2, r2
 800a082:	4013      	ands	r3, r2
 800a084:	7f39      	ldrb	r1, [r7, #28]
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	f002 0207 	and.w	r2, r2, #7
 800a08c:	0092      	lsls	r2, r2, #2
 800a08e:	fa01 f202 	lsl.w	r2, r1, r2
 800a092:	4611      	mov	r1, r2
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	08d2      	lsrs	r2, r2, #3
 800a098:	4319      	orrs	r1, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3208      	adds	r2, #8
 800a09e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a0a2:	e000      	b.n	800a0a6 <TM_GPIO_InitAlternate+0x7c>
			continue;
 800a0a4:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2b0f      	cmp	r3, #15
 800a0b0:	d9d1      	bls.n	800a056 <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800a0b2:	787a      	ldrb	r2, [r7, #1]
 800a0b4:	8879      	ldrh	r1, [r7, #2]
 800a0b6:	7e3b      	ldrb	r3, [r7, #24]
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	783b      	ldrb	r3, [r7, #0]
 800a0bc:	9300      	str	r3, [sp, #0]
 800a0be:	4613      	mov	r3, r2
 800a0c0:	2202      	movs	r2, #2
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f82e 	bl	800a124 <TM_GPIO_INT_Init>
 800a0c8:	e000      	b.n	800a0cc <TM_GPIO_InitAlternate+0xa2>
		return;
 800a0ca:	bf00      	nop
}
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 800a0d2:	b480      	push	{r7}
 800a0d4:	b083      	sub	sp, #12
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 800a0e0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800a0e4:	0a9b      	lsrs	r3, r3, #10
 800a0e6:	b29b      	uxth	r3, r3
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f7ff ffe8 	bl	800a0d2 <TM_GPIO_GetPortSource>
 800a102:	4603      	mov	r3, r0
 800a104:	461a      	mov	r2, r3
 800a106:	2301      	movs	r3, #1
 800a108:	fa03 f202 	lsl.w	r2, r3, r2
 800a10c:	4b04      	ldr	r3, [pc, #16]	; (800a120 <TM_GPIO_INT_EnableClock+0x2c>)
 800a10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a110:	4611      	mov	r1, r2
 800a112:	4a03      	ldr	r2, [pc, #12]	; (800a120 <TM_GPIO_INT_EnableClock+0x2c>)
 800a114:	430b      	orrs	r3, r1
 800a116:	6313      	str	r3, [r2, #48]	; 0x30
#endif
}
 800a118:	bf00      	nop
 800a11a:	3708      	adds	r7, #8
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}
 800a120:	40023800 	.word	0x40023800

0800a124 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	4608      	mov	r0, r1
 800a12e:	4611      	mov	r1, r2
 800a130:	461a      	mov	r2, r3
 800a132:	4603      	mov	r3, r0
 800a134:	807b      	strh	r3, [r7, #2]
 800a136:	460b      	mov	r3, r1
 800a138:	707b      	strb	r3, [r7, #1]
 800a13a:	4613      	mov	r3, r2
 800a13c:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7ff ffc7 	bl	800a0d2 <TM_GPIO_GetPortSource>
 800a144:	4603      	mov	r3, r0
 800a146:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800a148:	2300      	movs	r3, #0
 800a14a:	73fb      	strb	r3, [r7, #15]
 800a14c:	e067      	b.n	800a21e <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800a14e:	887a      	ldrh	r2, [r7, #2]
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	fa42 f303 	asr.w	r3, r2, r3
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d05b      	beq.n	800a216 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800a15e:	7bbb      	ldrb	r3, [r7, #14]
 800a160:	4a32      	ldr	r2, [pc, #200]	; (800a22c <TM_GPIO_INT_Init+0x108>)
 800a162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a166:	b21a      	sxth	r2, r3
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	2101      	movs	r1, #1
 800a16c:	fa01 f303 	lsl.w	r3, r1, r3
 800a170:	b21b      	sxth	r3, r3
 800a172:	4313      	orrs	r3, r2
 800a174:	b21a      	sxth	r2, r3
 800a176:	7bbb      	ldrb	r3, [r7, #14]
 800a178:	b291      	uxth	r1, r2
 800a17a:	4a2c      	ldr	r2, [pc, #176]	; (800a22c <TM_GPIO_INT_Init+0x108>)
 800a17c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	7bfa      	ldrb	r2, [r7, #15]
 800a186:	0052      	lsls	r2, r2, #1
 800a188:	2103      	movs	r1, #3
 800a18a:	fa01 f202 	lsl.w	r2, r1, r2
 800a18e:	43d2      	mvns	r2, r2
 800a190:	4013      	ands	r3, r2
 800a192:	7e39      	ldrb	r1, [r7, #24]
 800a194:	7bfa      	ldrb	r2, [r7, #15]
 800a196:	0052      	lsls	r2, r2, #1
 800a198:	fa01 f202 	lsl.w	r2, r1, r2
 800a19c:	431a      	orrs	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
 800a1a8:	005b      	lsls	r3, r3, #1
 800a1aa:	2103      	movs	r1, #3
 800a1ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b0:	43db      	mvns	r3, r3
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	7879      	ldrb	r1, [r7, #1]
 800a1b6:	7bfa      	ldrb	r2, [r7, #15]
 800a1b8:	0052      	lsls	r2, r2, #1
 800a1ba:	fa01 f202 	lsl.w	r2, r1, r2
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 800a1c4:	787b      	ldrb	r3, [r7, #1]
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d002      	beq.n	800a1d0 <TM_GPIO_INT_Init+0xac>
 800a1ca:	787b      	ldrb	r3, [r7, #1]
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d123      	bne.n	800a218 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	7bfa      	ldrb	r2, [r7, #15]
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	fa01 f202 	lsl.w	r2, r1, r2
 800a1dc:	b292      	uxth	r2, r2
 800a1de:	43d2      	mvns	r2, r2
 800a1e0:	4013      	ands	r3, r2
 800a1e2:	7839      	ldrb	r1, [r7, #0]
 800a1e4:	7bfa      	ldrb	r2, [r7, #15]
 800a1e6:	fa01 f202 	lsl.w	r2, r1, r2
 800a1ea:	b292      	uxth	r2, r2
 800a1ec:	431a      	orrs	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	689a      	ldr	r2, [r3, #8]
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	2103      	movs	r1, #3
 800a1fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a200:	43db      	mvns	r3, r3
 800a202:	4013      	ands	r3, r2
 800a204:	7f39      	ldrb	r1, [r7, #28]
 800a206:	7bfa      	ldrb	r2, [r7, #15]
 800a208:	0052      	lsls	r2, r2, #1
 800a20a:	fa01 f202 	lsl.w	r2, r1, r2
 800a20e:	431a      	orrs	r2, r3
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	609a      	str	r2, [r3, #8]
 800a214:	e000      	b.n	800a218 <TM_GPIO_INT_Init+0xf4>
			continue;
 800a216:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 800a218:	7bfb      	ldrb	r3, [r7, #15]
 800a21a:	3301      	adds	r3, #1
 800a21c:	73fb      	strb	r3, [r7, #15]
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
 800a220:	2b0f      	cmp	r3, #15
 800a222:	d994      	bls.n	800a14e <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 800a224:	bf00      	nop
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20000be8 	.word	0x20000be8

0800a230 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
 800a238:	460b      	mov	r3, r1
 800a23a:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <TM_SPI_Send+0x1c>
 800a248:	2300      	movs	r3, #0
 800a24a:	e01f      	b.n	800a28c <TM_SPI_Send+0x5c>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT_TX(SPIx);
 800a24c:	bf00      	nop
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	f003 0302 	and.w	r3, r3, #2
 800a256:	2b00      	cmp	r3, #0
 800a258:	d0f9      	beq.n	800a24e <TM_SPI_Send+0x1e>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1f3      	bne.n	800a24e <TM_SPI_Send+0x1e>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 800a266:	78fa      	ldrb	r2, [r7, #3]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	60da      	str	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT_RX(SPIx);
 800a26c:	bf00      	nop
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	f003 0301 	and.w	r3, r3, #1
 800a276:	2b00      	cmp	r3, #0
 800a278:	d0f9      	beq.n	800a26e <TM_SPI_Send+0x3e>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1f3      	bne.n	800a26e <TM_SPI_Send+0x3e>
	
	/* Return data from buffer */
	return SPIx->DR;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	b2db      	uxtb	r3, r3
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <TM_LCD_Init>:
	uint16_t StartX;
	uint16_t CurrentY;
} TM_LCD_INT_t;
static TM_LCD_INT_t LCD;

TM_LCD_Result_t TM_LCD_Init(void) {
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
	TM_DMA2DGRAPHIC_INT_Conf_t DMA2DConf;
	
	/* Init SDRAM */
	if (!TM_SDRAM_Init()) {
 800a29e:	f000 fd6f 	bl	800ad80 <TM_SDRAM_Init>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <TM_LCD_Init+0x14>
		/* Return error */
		return TM_LCD_Result_SDRAM_Error;
 800a2a8:	2302      	movs	r3, #2
 800a2aa:	e058      	b.n	800a35e <TM_LCD_Init+0xc6>
	}
	
	/* Fill default structure */
	LCD.Width = LCD_PIXEL_WIDTH;
 800a2ac:	4b2e      	ldr	r3, [pc, #184]	; (800a368 <TM_LCD_Init+0xd0>)
 800a2ae:	22f0      	movs	r2, #240	; 0xf0
 800a2b0:	801a      	strh	r2, [r3, #0]
	LCD.Height = LCD_PIXEL_HEIGHT;
 800a2b2:	4b2d      	ldr	r3, [pc, #180]	; (800a368 <TM_LCD_Init+0xd0>)
 800a2b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a2b8:	805a      	strh	r2, [r3, #2]
	LCD.CurrentFrameBuffer = LCD_FRAME_BUFFER;
 800a2ba:	4b2b      	ldr	r3, [pc, #172]	; (800a368 <TM_LCD_Init+0xd0>)
 800a2bc:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 800a2c0:	60da      	str	r2, [r3, #12]
	LCD.FrameStart = LCD_FRAME_BUFFER;
 800a2c2:	4b29      	ldr	r3, [pc, #164]	; (800a368 <TM_LCD_Init+0xd0>)
 800a2c4:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 800a2c8:	611a      	str	r2, [r3, #16]
	LCD.FrameOffset = LCD_BUFFER_OFFSET;
 800a2ca:	4b27      	ldr	r3, [pc, #156]	; (800a368 <TM_LCD_Init+0xd0>)
 800a2cc:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 800a2d0:	615a      	str	r2, [r3, #20]
	LCD.CurrentFont = &TM_Font_11x18;
 800a2d2:	4b25      	ldr	r3, [pc, #148]	; (800a368 <TM_LCD_Init+0xd0>)
 800a2d4:	4a25      	ldr	r2, [pc, #148]	; (800a36c <TM_LCD_Init+0xd4>)
 800a2d6:	625a      	str	r2, [r3, #36]	; 0x24
	LCD.ForegroundColor = LCD_COLOR_BLACK;
 800a2d8:	4b23      	ldr	r3, [pc, #140]	; (800a368 <TM_LCD_Init+0xd0>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	61da      	str	r2, [r3, #28]
	LCD.BackgroundColor = LCD_COLOR_WHITE;
 800a2de:	4b22      	ldr	r3, [pc, #136]	; (800a368 <TM_LCD_Init+0xd0>)
 800a2e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2e4:	621a      	str	r2, [r3, #32]
	LCD.Orientation = 1;
 800a2e6:	4b20      	ldr	r3, [pc, #128]	; (800a368 <TM_LCD_Init+0xd0>)
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	721a      	strb	r2, [r3, #8]
	
	/* Set orientation */
	TM_LCD_SetOrientation(LCD.Orientation);
 800a2ec:	4b1e      	ldr	r3, [pc, #120]	; (800a368 <TM_LCD_Init+0xd0>)
 800a2ee:	7a1b      	ldrb	r3, [r3, #8]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 f849 	bl	800a388 <TM_LCD_SetOrientation>
	
	/* Set configrations for DMA2D */
	DMA2DConf.BufferStart = LCD_FRAME_BUFFER;
 800a2f6:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800a2fa:	60fb      	str	r3, [r7, #12]
	DMA2DConf.BufferOffset = LCD_BUFFER_OFFSET;
 800a2fc:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 800a300:	613b      	str	r3, [r7, #16]
	DMA2DConf.BytesPerPixel = LCD_PIXEL_SIZE;
 800a302:	2302      	movs	r3, #2
 800a304:	723b      	strb	r3, [r7, #8]
	DMA2DConf.Width = LCD_PIXEL_WIDTH;
 800a306:	23f0      	movs	r3, #240	; 0xf0
 800a308:	80bb      	strh	r3, [r7, #4]
	DMA2DConf.Height = LCD_PIXEL_HEIGHT;
 800a30a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a30e:	80fb      	strh	r3, [r7, #6]
	DMA2DConf.Orientation = 1;
 800a310:	2301      	movs	r3, #1
 800a312:	753b      	strb	r3, [r7, #20]
	
	/* Init LCD pins */
	TM_LCD_INT_InitPins();
 800a314:	f000 fc82 	bl	800ac1c <TM_LCD_INT_InitPins>
	
	/* Init LCD dependant settings */
	TM_LCD_INT_InitLCD();
 800a318:	f000 fb2a 	bl	800a970 <TM_LCD_INT_InitLCD>
	
	/* Init LTDC peripheral */
	TM_LCD_INT_InitLTDC();
 800a31c:	f000 f9e8 	bl	800a6f0 <TM_LCD_INT_InitLTDC>
	
	/* Init LTDC layers */
	TM_LCD_INT_InitLayers();
 800a320:	f000 fa64 	bl	800a7ec <TM_LCD_INT_InitLayers>
	
	/* Init DMA2D GRAPHICS */
	TM_DMA2DGRAPHIC_Init();
 800a324:	f7ff fb0c 	bl	8009940 <TM_DMA2DGRAPHIC_Init>
	
	/* Set settings */
	TM_INT_DMA2DGRAPHIC_SetConf(&DMA2DConf);
 800a328:	1d3b      	adds	r3, r7, #4
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff fd16 	bl	8009d5c <TM_INT_DMA2DGRAPHIC_SetConf>
	
	/* Enable LCD */
	TM_LCD_DisplayOn();
 800a330:	f000 f85a 	bl	800a3e8 <TM_LCD_DisplayOn>
	
	/* Set layer 1 as active layer */
	TM_LCD_SetLayer1();
 800a334:	f000 f982 	bl	800a63c <TM_LCD_SetLayer1>
	TM_LCD_Fill(LCD_COLOR_WHITE);
 800a338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a33c:	f000 f818 	bl	800a370 <TM_LCD_Fill>
	TM_LCD_SetLayer2();
 800a340:	f000 f990 	bl	800a664 <TM_LCD_SetLayer2>
	TM_LCD_Fill(LCD_COLOR_WHITE);
 800a344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a348:	f000 f812 	bl	800a370 <TM_LCD_Fill>
	TM_LCD_SetLayer1();
 800a34c:	f000 f976 	bl	800a63c <TM_LCD_SetLayer1>
	
	/* Set layer 1 as active layer */
	TM_LCD_SetLayer1Opacity(255);
 800a350:	20ff      	movs	r0, #255	; 0xff
 800a352:	f000 f99d 	bl	800a690 <TM_LCD_SetLayer1Opacity>
	TM_LCD_SetLayer2Opacity(0);
 800a356:	2000      	movs	r0, #0
 800a358:	f000 f9ac 	bl	800a6b4 <TM_LCD_SetLayer2Opacity>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	20000cac 	.word	0x20000cac
 800a36c:	20000980 	.word	0x20000980

0800a370 <TM_LCD_Fill>:

TM_LCD_Result_t TM_LCD_Fill(uint32_t color) {
 800a370:	b580      	push	{r7, lr}
 800a372:	b082      	sub	sp, #8
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	/* Erase memory */
	TM_DMA2DGRAPHIC_Fill(color);
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f7ff fca9 	bl	8009cd0 <TM_DMA2DGRAPHIC_Fill>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <TM_LCD_SetOrientation>:

TM_LCD_Result_t TM_LCD_SetOrientation(uint8_t orientation) {
 800a388:	b580      	push	{r7, lr}
 800a38a:	b082      	sub	sp, #8
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	71fb      	strb	r3, [r7, #7]
	/* Check input */
	if (orientation > 3) {
 800a392:	79fb      	ldrb	r3, [r7, #7]
 800a394:	2b03      	cmp	r3, #3
 800a396:	d901      	bls.n	800a39c <TM_LCD_SetOrientation+0x14>
		return TM_LCD_Result_Error;
 800a398:	2301      	movs	r3, #1
 800a39a:	e01e      	b.n	800a3da <TM_LCD_SetOrientation+0x52>
	}
	
	/* Save rotation */
	LCD.Orientation = orientation;
 800a39c:	4a11      	ldr	r2, [pc, #68]	; (800a3e4 <TM_LCD_SetOrientation+0x5c>)
 800a39e:	79fb      	ldrb	r3, [r7, #7]
 800a3a0:	7213      	strb	r3, [r2, #8]
	
	/* Check X and Y values */
	if (
 800a3a2:	79fb      	ldrb	r3, [r7, #7]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <TM_LCD_SetOrientation+0x26>
		orientation == 0 ||
 800a3a8:	79fb      	ldrb	r3, [r7, #7]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d108      	bne.n	800a3c0 <TM_LCD_SetOrientation+0x38>
		orientation == 1
	) {
		LCD.CurrentHeight = LCD.Height;
 800a3ae:	4b0d      	ldr	r3, [pc, #52]	; (800a3e4 <TM_LCD_SetOrientation+0x5c>)
 800a3b0:	885a      	ldrh	r2, [r3, #2]
 800a3b2:	4b0c      	ldr	r3, [pc, #48]	; (800a3e4 <TM_LCD_SetOrientation+0x5c>)
 800a3b4:	80da      	strh	r2, [r3, #6]
		LCD.CurrentWidth = LCD.Width;
 800a3b6:	4b0b      	ldr	r3, [pc, #44]	; (800a3e4 <TM_LCD_SetOrientation+0x5c>)
 800a3b8:	881a      	ldrh	r2, [r3, #0]
 800a3ba:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <TM_LCD_SetOrientation+0x5c>)
 800a3bc:	809a      	strh	r2, [r3, #4]
 800a3be:	e007      	b.n	800a3d0 <TM_LCD_SetOrientation+0x48>
	} else {
		LCD.CurrentHeight = LCD.Width;
 800a3c0:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <TM_LCD_SetOrientation+0x5c>)
 800a3c2:	881a      	ldrh	r2, [r3, #0]
 800a3c4:	4b07      	ldr	r3, [pc, #28]	; (800a3e4 <TM_LCD_SetOrientation+0x5c>)
 800a3c6:	80da      	strh	r2, [r3, #6]
		LCD.CurrentWidth = LCD.Height;
 800a3c8:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <TM_LCD_SetOrientation+0x5c>)
 800a3ca:	885a      	ldrh	r2, [r3, #2]
 800a3cc:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <TM_LCD_SetOrientation+0x5c>)
 800a3ce:	809a      	strh	r2, [r3, #4]
	}
	
	/* Rotate DMA2D graphic library */
	TM_DMA2DGRAPHIC_SetOrientation(orientation);
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff fc4c 	bl	8009c70 <TM_DMA2DGRAPHIC_SetOrientation>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	20000cac 	.word	0x20000cac

0800a3e8 <TM_LCD_DisplayOn>:

TM_LCD_Result_t TM_LCD_DisplayOn(void) {
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	af00      	add	r7, sp, #0
	/* Enable LTDC */
	LTDC->GCR |= LTDC_GCR_LTDCEN;
 800a3ec:	4b05      	ldr	r3, [pc, #20]	; (800a404 <TM_LCD_DisplayOn+0x1c>)
 800a3ee:	699b      	ldr	r3, [r3, #24]
 800a3f0:	4a04      	ldr	r2, [pc, #16]	; (800a404 <TM_LCD_DisplayOn+0x1c>)
 800a3f2:	f043 0301 	orr.w	r3, r3, #1
 800a3f6:	6193      	str	r3, [r2, #24]
	TM_GPIO_SetPinHigh(GPIOI, GPIO_PIN_12);	
    TM_GPIO_SetPinHigh(GPIOK, GPIO_PIN_3);
#endif
#if defined(LCD_USE_STM32F429_DISCOVERY)
	/* Send command to display on */
	TM_ILI9341_SendCommand(0x29);
 800a3f8:	2029      	movs	r0, #41	; 0x29
 800a3fa:	f000 fa67 	bl	800a8cc <TM_ILI9341_SendCommand>
#endif
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	bd80      	pop	{r7, pc}
 800a404:	40016800 	.word	0x40016800

0800a408 <TM_LCD_SetXY>:
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_SetXY(uint16_t X, uint16_t Y) {
 800a408:	b480      	push	{r7}
 800a40a:	b083      	sub	sp, #12
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	4603      	mov	r3, r0
 800a410:	460a      	mov	r2, r1
 800a412:	80fb      	strh	r3, [r7, #6]
 800a414:	4613      	mov	r3, r2
 800a416:	80bb      	strh	r3, [r7, #4]
	/* Check if we are inside LCD */
	if (X >= LCD.CurrentWidth || Y >= LCD.CurrentHeight) {
 800a418:	4b0d      	ldr	r3, [pc, #52]	; (800a450 <TM_LCD_SetXY+0x48>)
 800a41a:	889b      	ldrh	r3, [r3, #4]
 800a41c:	88fa      	ldrh	r2, [r7, #6]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d204      	bcs.n	800a42c <TM_LCD_SetXY+0x24>
 800a422:	4b0b      	ldr	r3, [pc, #44]	; (800a450 <TM_LCD_SetXY+0x48>)
 800a424:	88db      	ldrh	r3, [r3, #6]
 800a426:	88ba      	ldrh	r2, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d301      	bcc.n	800a430 <TM_LCD_SetXY+0x28>
		return TM_LCD_Result_Error;
 800a42c:	2301      	movs	r3, #1
 800a42e:	e009      	b.n	800a444 <TM_LCD_SetXY+0x3c>
	}
	
	/* Set new values */
	LCD.CurrentX = X;
 800a430:	4a07      	ldr	r2, [pc, #28]	; (800a450 <TM_LCD_SetXY+0x48>)
 800a432:	88fb      	ldrh	r3, [r7, #6]
 800a434:	8513      	strh	r3, [r2, #40]	; 0x28
	LCD.CurrentY = Y;
 800a436:	4a06      	ldr	r2, [pc, #24]	; (800a450 <TM_LCD_SetXY+0x48>)
 800a438:	88bb      	ldrh	r3, [r7, #4]
 800a43a:	8593      	strh	r3, [r2, #44]	; 0x2c
	LCD.StartX = X;
 800a43c:	4a04      	ldr	r2, [pc, #16]	; (800a450 <TM_LCD_SetXY+0x48>)
 800a43e:	88fb      	ldrh	r3, [r7, #6]
 800a440:	8553      	strh	r3, [r2, #42]	; 0x2a
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	20000cac 	.word	0x20000cac

0800a454 <TM_LCD_SetFont>:
uint16_t TM_LCD_GetCurrentY(void) {
	/* Return current Y location for strings */
	return LCD.CurrentY;
}

TM_LCD_Result_t TM_LCD_SetFont(TM_FONT_t* Font) {
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
	/* Set new font used for drawing */
	LCD.CurrentFont = Font;
 800a45c:	4a04      	ldr	r2, [pc, #16]	; (800a470 <TM_LCD_SetFont+0x1c>)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6253      	str	r3, [r2, #36]	; 0x24
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	20000cac 	.word	0x20000cac

0800a474 <TM_LCD_Putc>:
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_Putc(char c) {
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	4603      	mov	r3, r0
 800a47c:	71fb      	strb	r3, [r7, #7]
	uint32_t i, b, j;
	
	/* Check current coordinates */
	if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth || c == '\n') {
 800a47e:	4b4d      	ldr	r3, [pc, #308]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a482:	461a      	mov	r2, r3
 800a484:	4b4b      	ldr	r3, [pc, #300]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	4413      	add	r3, r2
 800a48c:	4a49      	ldr	r2, [pc, #292]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a48e:	8892      	ldrh	r2, [r2, #4]
 800a490:	4293      	cmp	r3, r2
 800a492:	da02      	bge.n	800a49a <TM_LCD_Putc+0x26>
 800a494:	79fb      	ldrb	r3, [r7, #7]
 800a496:	2b0a      	cmp	r3, #10
 800a498:	d123      	bne.n	800a4e2 <TM_LCD_Putc+0x6e>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		LCD.CurrentY += LCD.CurrentFont->FontHeight;
 800a49a:	4b46      	ldr	r3, [pc, #280]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a49c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a49e:	4b45      	ldr	r3, [pc, #276]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a2:	785b      	ldrb	r3, [r3, #1]
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	4413      	add	r3, r2
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	4b42      	ldr	r3, [pc, #264]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4ac:	859a      	strh	r2, [r3, #44]	; 0x2c
		LCD.CurrentX = LCD.StartX;
 800a4ae:	4b41      	ldr	r3, [pc, #260]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a4b2:	4b40      	ldr	r3, [pc, #256]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4b4:	851a      	strh	r2, [r3, #40]	; 0x28
		
		/* Check X */
		if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth) {
 800a4b6:	4b3f      	ldr	r3, [pc, #252]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	4b3d      	ldr	r3, [pc, #244]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	4a3b      	ldr	r2, [pc, #236]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4c6:	8892      	ldrh	r2, [r2, #4]
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	db02      	blt.n	800a4d2 <TM_LCD_Putc+0x5e>
			LCD.CurrentX = 0;
 800a4cc:	4b39      	ldr	r3, [pc, #228]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		
		/* Check for Y position */
		if (LCD.CurrentY >= LCD.CurrentHeight) {
 800a4d2:	4b38      	ldr	r3, [pc, #224]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a4d6:	4b37      	ldr	r3, [pc, #220]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4d8:	88db      	ldrh	r3, [r3, #6]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d301      	bcc.n	800a4e2 <TM_LCD_Putc+0x6e>
			/* Return error */
			return TM_LCD_Result_Error;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e063      	b.n	800a5aa <TM_LCD_Putc+0x136>
		}
	}
	
	/* Draw character */
	if (c != '\n') {
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	2b0a      	cmp	r3, #10
 800a4e6:	d05f      	beq.n	800a5a8 <TM_LCD_Putc+0x134>
		/* Draw all pixels */
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	617b      	str	r3, [r7, #20]
 800a4ec:	e04b      	b.n	800a586 <TM_LCD_Putc+0x112>
			b = LCD.CurrentFont->data[(c - 32) * LCD.CurrentFont->FontHeight + i];
 800a4ee:	4b31      	ldr	r3, [pc, #196]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
 800a4f6:	3b20      	subs	r3, #32
 800a4f8:	492e      	ldr	r1, [pc, #184]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a4fa:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800a4fc:	7849      	ldrb	r1, [r1, #1]
 800a4fe:	fb01 f303 	mul.w	r3, r1, r3
 800a502:	4619      	mov	r1, r3
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	440b      	add	r3, r1
 800a508:	005b      	lsls	r3, r3, #1
 800a50a:	4413      	add	r3, r2
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	60fb      	str	r3, [r7, #12]
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 800a510:	2300      	movs	r3, #0
 800a512:	613b      	str	r3, [r7, #16]
 800a514:	e02d      	b.n	800a572 <TM_LCD_Putc+0xfe>
				if ((b << j) & 0x8000) {
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	fa02 f303 	lsl.w	r3, r2, r3
 800a51e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d011      	beq.n	800a54a <TM_LCD_Putc+0xd6>
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.ForegroundColor);
 800a526:	4b23      	ldr	r3, [pc, #140]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a528:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	4413      	add	r3, r2
 800a530:	b298      	uxth	r0, r3
 800a532:	4b20      	ldr	r3, [pc, #128]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a534:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a536:	697b      	ldr	r3, [r7, #20]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	4413      	add	r3, r2
 800a53c:	b299      	uxth	r1, r3
 800a53e:	4b1d      	ldr	r3, [pc, #116]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a540:	69db      	ldr	r3, [r3, #28]
 800a542:	461a      	mov	r2, r3
 800a544:	f7ff fa66 	bl	8009a14 <TM_DMA2DGRAPHIC_DrawPixel>
 800a548:	e010      	b.n	800a56c <TM_LCD_Putc+0xf8>
				} else {
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.BackgroundColor);
 800a54a:	4b1a      	ldr	r3, [pc, #104]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a54c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	b29b      	uxth	r3, r3
 800a552:	4413      	add	r3, r2
 800a554:	b298      	uxth	r0, r3
 800a556:	4b17      	ldr	r3, [pc, #92]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a558:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	4413      	add	r3, r2
 800a560:	b299      	uxth	r1, r3
 800a562:	4b14      	ldr	r3, [pc, #80]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a564:	6a1b      	ldr	r3, [r3, #32]
 800a566:	461a      	mov	r2, r3
 800a568:	f7ff fa54 	bl	8009a14 <TM_DMA2DGRAPHIC_DrawPixel>
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	3301      	adds	r3, #1
 800a570:	613b      	str	r3, [r7, #16]
 800a572:	4b10      	ldr	r3, [pc, #64]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	461a      	mov	r2, r3
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d3ca      	bcc.n	800a516 <TM_LCD_Putc+0xa2>
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	3301      	adds	r3, #1
 800a584:	617b      	str	r3, [r7, #20]
 800a586:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a58a:	785b      	ldrb	r3, [r3, #1]
 800a58c:	461a      	mov	r2, r3
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	4293      	cmp	r3, r2
 800a592:	d3ac      	bcc.n	800a4ee <TM_LCD_Putc+0x7a>
				}
			}
		}
	
		/* Set new current X location */
		LCD.CurrentX += LCD.CurrentFont->FontWidth;
 800a594:	4b07      	ldr	r3, [pc, #28]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a596:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a598:	4b06      	ldr	r3, [pc, #24]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	781b      	ldrb	r3, [r3, #0]
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	4413      	add	r3, r2
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	4b03      	ldr	r3, [pc, #12]	; (800a5b4 <TM_LCD_Putc+0x140>)
 800a5a6:	851a      	strh	r2, [r3, #40]	; 0x28
	}
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20000cac 	.word	0x20000cac

0800a5b8 <TM_LCD_DrawPixel>:

TM_LCD_Result_t TM_LCD_DrawPixel(uint16_t X, uint16_t Y, uint32_t color) {
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b082      	sub	sp, #8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	4603      	mov	r3, r0
 800a5c0:	603a      	str	r2, [r7, #0]
 800a5c2:	80fb      	strh	r3, [r7, #6]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	80bb      	strh	r3, [r7, #4]
	/* Draw pixel at desired location */
	TM_DMA2DGRAPHIC_DrawPixel(X, Y, color);
 800a5c8:	88b9      	ldrh	r1, [r7, #4]
 800a5ca:	88fb      	ldrh	r3, [r7, #6]
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f7ff fa20 	bl	8009a14 <TM_DMA2DGRAPHIC_DrawPixel>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3708      	adds	r7, #8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}

0800a5de <TM_LCD_GetPixel>:

uint32_t TM_LCD_GetPixel(uint16_t X, uint16_t Y) {
 800a5de:	b580      	push	{r7, lr}
 800a5e0:	b082      	sub	sp, #8
 800a5e2:	af00      	add	r7, sp, #0
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	460a      	mov	r2, r1
 800a5e8:	80fb      	strh	r3, [r7, #6]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	80bb      	strh	r3, [r7, #4]
	/* Get pixel at desired location */
	return TM_DMA2DGRAPHIC_GetPixel(X, Y);
 800a5ee:	88ba      	ldrh	r2, [r7, #4]
 800a5f0:	88fb      	ldrh	r3, [r7, #6]
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7ff faa7 	bl	8009b48 <TM_DMA2DGRAPHIC_GetPixel>
 800a5fa:	4603      	mov	r3, r0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <TM_LCD_Puts>:

TM_LCD_Result_t TM_LCD_Puts(char* str) {
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
	/* Send till string ends or error returned */
	while (*str) {
 800a60c:	e00c      	b.n	800a628 <TM_LCD_Puts+0x24>
		/* Check if string OK */
		if (TM_LCD_Putc(*str) != TM_LCD_Result_Ok) {
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff ff2e 	bl	800a474 <TM_LCD_Putc>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <TM_LCD_Puts+0x1e>
			/* Return error */
			return TM_LCD_Result_Error;
 800a61e:	2301      	movs	r3, #1
 800a620:	e007      	b.n	800a632 <TM_LCD_Puts+0x2e>
		}
		
		/* Increase pointer */
		str++;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	3301      	adds	r3, #1
 800a626:	607b      	str	r3, [r7, #4]
	while (*str) {
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1ee      	bne.n	800a60e <TM_LCD_Puts+0xa>
	}
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
	...

0800a63c <TM_LCD_SetLayer1>:

TM_LCD_Result_t TM_LCD_SetLayer1(void) {
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart;
 800a640:	4b07      	ldr	r3, [pc, #28]	; (800a660 <TM_LCD_SetLayer1+0x24>)
 800a642:	691b      	ldr	r3, [r3, #16]
 800a644:	4a06      	ldr	r2, [pc, #24]	; (800a660 <TM_LCD_SetLayer1+0x24>)
 800a646:	60d3      	str	r3, [r2, #12]
	LCD.CurrentLayer = 0;
 800a648:	4b05      	ldr	r3, [pc, #20]	; (800a660 <TM_LCD_SetLayer1+0x24>)
 800a64a:	2200      	movs	r2, #0
 800a64c:	761a      	strb	r2, [r3, #24]
	
	/* Set layer for DMA2D */
	TM_DMA2DGRAPHIC_SetLayer(LCD.CurrentLayer);
 800a64e:	4b04      	ldr	r3, [pc, #16]	; (800a660 <TM_LCD_SetLayer1+0x24>)
 800a650:	7e1b      	ldrb	r3, [r3, #24]
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff f9c6 	bl	80099e4 <TM_DMA2DGRAPHIC_SetLayer>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a658:	2300      	movs	r3, #0

}
 800a65a:	4618      	mov	r0, r3
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	20000cac 	.word	0x20000cac

0800a664 <TM_LCD_SetLayer2>:

TM_LCD_Result_t TM_LCD_SetLayer2(void) {
 800a664:	b580      	push	{r7, lr}
 800a666:	af00      	add	r7, sp, #0
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart + LCD.FrameOffset;
 800a668:	4b08      	ldr	r3, [pc, #32]	; (800a68c <TM_LCD_SetLayer2+0x28>)
 800a66a:	691a      	ldr	r2, [r3, #16]
 800a66c:	4b07      	ldr	r3, [pc, #28]	; (800a68c <TM_LCD_SetLayer2+0x28>)
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	4413      	add	r3, r2
 800a672:	4a06      	ldr	r2, [pc, #24]	; (800a68c <TM_LCD_SetLayer2+0x28>)
 800a674:	60d3      	str	r3, [r2, #12]
	LCD.CurrentLayer = 1;
 800a676:	4b05      	ldr	r3, [pc, #20]	; (800a68c <TM_LCD_SetLayer2+0x28>)
 800a678:	2201      	movs	r2, #1
 800a67a:	761a      	strb	r2, [r3, #24]
	
	/* Set layer for DMA2D also */
	TM_DMA2DGRAPHIC_SetLayer(LCD.CurrentLayer);
 800a67c:	4b03      	ldr	r3, [pc, #12]	; (800a68c <TM_LCD_SetLayer2+0x28>)
 800a67e:	7e1b      	ldrb	r3, [r3, #24]
 800a680:	4618      	mov	r0, r3
 800a682:	f7ff f9af 	bl	80099e4 <TM_DMA2DGRAPHIC_SetLayer>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	20000cac 	.word	0x20000cac

0800a690 <TM_LCD_SetLayer1Opacity>:

TM_LCD_Result_t TM_LCD_SetLayer1Opacity(uint8_t opacity) {
 800a690:	b580      	push	{r7, lr}
 800a692:	b082      	sub	sp, #8
 800a694:	af00      	add	r7, sp, #0
 800a696:	4603      	mov	r3, r0
 800a698:	71fb      	strb	r3, [r7, #7]
	/* Set opacity */
	HAL_LTDC_SetAlpha(&LTDCHandle, opacity, 0);
 800a69a:	79fb      	ldrb	r3, [r7, #7]
 800a69c:	2200      	movs	r2, #0
 800a69e:	4619      	mov	r1, r3
 800a6a0:	4803      	ldr	r0, [pc, #12]	; (800a6b0 <TM_LCD_SetLayer1Opacity+0x20>)
 800a6a2:	f7fc fc3b 	bl	8006f1c <HAL_LTDC_SetAlpha>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a6a6:	2300      	movs	r3, #0
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20000c04 	.word	0x20000c04

0800a6b4 <TM_LCD_SetLayer2Opacity>:

TM_LCD_Result_t TM_LCD_SetLayer2Opacity(uint8_t opacity) {
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	71fb      	strb	r3, [r7, #7]
	/* Set opacity */
	HAL_LTDC_SetAlpha(&LTDCHandle, opacity, 1);
 800a6be:	79fb      	ldrb	r3, [r7, #7]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	4803      	ldr	r0, [pc, #12]	; (800a6d4 <TM_LCD_SetLayer2Opacity+0x20>)
 800a6c6:	f7fc fc29 	bl	8006f1c <HAL_LTDC_SetAlpha>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	20000c04 	.word	0x20000c04

0800a6d8 <TM_LCD_GetHeight>:

uint16_t TM_LCD_GetWidth(void) {
	return LCD.CurrentWidth;
}

uint16_t TM_LCD_GetHeight(void) {
 800a6d8:	b480      	push	{r7}
 800a6da:	af00      	add	r7, sp, #0
	return LCD.CurrentHeight;
 800a6dc:	4b03      	ldr	r3, [pc, #12]	; (800a6ec <TM_LCD_GetHeight+0x14>)
 800a6de:	88db      	ldrh	r3, [r3, #6]
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	20000cac 	.word	0x20000cac

0800a6f0 <TM_LCD_INT_InitLTDC>:
uint8_t TM_LCD_GetOrientation(void) {
	return LCD.Orientation;
}

/* Private functions */
static void TM_LCD_INT_InitLTDC(void) {
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08e      	sub	sp, #56	; 0x38
 800a6f4:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef  periph_clk_init_struct;
	
	/* Enable LTDC and DMA2D clocks */
	__HAL_RCC_DMA2D_CLK_ENABLE();
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	607b      	str	r3, [r7, #4]
 800a6fa:	4b39      	ldr	r3, [pc, #228]	; (800a7e0 <TM_LCD_INT_InitLTDC+0xf0>)
 800a6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fe:	4a38      	ldr	r2, [pc, #224]	; (800a7e0 <TM_LCD_INT_InitLTDC+0xf0>)
 800a700:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a704:	6313      	str	r3, [r2, #48]	; 0x30
 800a706:	4b36      	ldr	r3, [pc, #216]	; (800a7e0 <TM_LCD_INT_InitLTDC+0xf0>)
 800a708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a70e:	607b      	str	r3, [r7, #4]
 800a710:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_LTDC_CLK_ENABLE();
 800a712:	2300      	movs	r3, #0
 800a714:	603b      	str	r3, [r7, #0]
 800a716:	4b32      	ldr	r3, [pc, #200]	; (800a7e0 <TM_LCD_INT_InitLTDC+0xf0>)
 800a718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a71a:	4a31      	ldr	r2, [pc, #196]	; (800a7e0 <TM_LCD_INT_InitLTDC+0xf0>)
 800a71c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a720:	6453      	str	r3, [r2, #68]	; 0x44
 800a722:	4b2f      	ldr	r3, [pc, #188]	; (800a7e0 <TM_LCD_INT_InitLTDC+0xf0>)
 800a724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a726:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a72a:	603b      	str	r3, [r7, #0]
 800a72c:	683b      	ldr	r3, [r7, #0]
	
	/* Disable LTDC */
	LTDC->GCR &= ~LTDC_GCR_LTDCEN;
 800a72e:	4b2d      	ldr	r3, [pc, #180]	; (800a7e4 <TM_LCD_INT_InitLTDC+0xf4>)
 800a730:	699b      	ldr	r3, [r3, #24]
 800a732:	4a2c      	ldr	r2, [pc, #176]	; (800a7e4 <TM_LCD_INT_InitLTDC+0xf4>)
 800a734:	f023 0301 	bic.w	r3, r3, #1
 800a738:	6193      	str	r3, [r2, #24]

    /* Timing configuration */     
    LTDCHandle.Init.HorizontalSync = LCD_HSYNC - 1;
 800a73a:	4b2b      	ldr	r3, [pc, #172]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a73c:	2208      	movs	r2, #8
 800a73e:	615a      	str	r2, [r3, #20]
    LTDCHandle.Init.VerticalSync = LCD_VSYNC - 1;
 800a740:	4b29      	ldr	r3, [pc, #164]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a742:	2200      	movs	r2, #0
 800a744:	619a      	str	r2, [r3, #24]
    LTDCHandle.Init.AccumulatedHBP = LCD_HSYNC + LCD_HBP - 1;
 800a746:	4b28      	ldr	r3, [pc, #160]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a748:	2225      	movs	r2, #37	; 0x25
 800a74a:	61da      	str	r2, [r3, #28]
    LTDCHandle.Init.AccumulatedVBP = LCD_VSYNC + LCD_VBP - 1;  
 800a74c:	4b26      	ldr	r3, [pc, #152]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a74e:	2203      	movs	r2, #3
 800a750:	621a      	str	r2, [r3, #32]
    LTDCHandle.Init.AccumulatedActiveH = LCD_PIXEL_HEIGHT + LCD_VSYNC + LCD_VBP - 1;
 800a752:	4b25      	ldr	r3, [pc, #148]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a754:	f240 1243 	movw	r2, #323	; 0x143
 800a758:	629a      	str	r2, [r3, #40]	; 0x28
    LTDCHandle.Init.AccumulatedActiveW = LCD_PIXEL_WIDTH + LCD_HSYNC + LCD_HBP - 1;
 800a75a:	4b23      	ldr	r3, [pc, #140]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a75c:	f240 1215 	movw	r2, #277	; 0x115
 800a760:	625a      	str	r2, [r3, #36]	; 0x24
    LTDCHandle.Init.TotalWidth = LCD_PIXEL_WIDTH + LCD_HSYNC + LCD_HBP + LCD_HFP - 1; 
 800a762:	4b21      	ldr	r3, [pc, #132]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a764:	f240 1217 	movw	r2, #279	; 0x117
 800a768:	62da      	str	r2, [r3, #44]	; 0x2c
    LTDCHandle.Init.TotalHeigh = LCD_PIXEL_HEIGHT + LCD_VSYNC + LCD_VBP + LCD_VFP - 1;
 800a76a:	4b1f      	ldr	r3, [pc, #124]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a76c:	f240 1245 	movw	r2, #325	; 0x145
 800a770:	631a      	str	r2, [r3, #48]	; 0x30
    /* Enable Pixel Clock */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/2 = 96 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 96/4 = 24 Mhz */
	periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800a772:	2308      	movs	r3, #8
 800a774:	60bb      	str	r3, [r7, #8]
	periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800a776:	23c0      	movs	r3, #192	; 0xc0
 800a778:	61bb      	str	r3, [r7, #24]
	periph_clk_init_struct.PLLSAI.PLLSAIR = LCD_FREQUENCY_DIV;
 800a77a:	2305      	movs	r3, #5
 800a77c:	623b      	str	r3, [r7, #32]
	periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800a77e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a782:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800a784:	f107 0308 	add.w	r3, r7, #8
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fd fa7f 	bl	8007c8c <HAL_RCCEx_PeriphCLKConfig>

	/* Initialize the LCD pixel width and pixel height */
	LTDCHandle.LayerCfg->ImageWidth  = LCD_PIXEL_WIDTH;
 800a78e:	4b16      	ldr	r3, [pc, #88]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a790:	22f0      	movs	r2, #240	; 0xf0
 800a792:	661a      	str	r2, [r3, #96]	; 0x60
	LTDCHandle.LayerCfg->ImageHeight = LCD_PIXEL_HEIGHT;
 800a794:	4b14      	ldr	r3, [pc, #80]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a796:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a79a:	665a      	str	r2, [r3, #100]	; 0x64

	/* Background value */
	LTDCHandle.Init.Backcolor.Blue = 0;
 800a79c:	4b12      	ldr	r3, [pc, #72]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LTDCHandle.Init.Backcolor.Green = 0;
 800a7a4:	4b10      	ldr	r3, [pc, #64]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	LTDCHandle.Init.Backcolor.Red = 0;
 800a7ac:	4b0e      	ldr	r3, [pc, #56]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	/* Polarity */
	LTDCHandle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	605a      	str	r2, [r3, #4]
	LTDCHandle.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800a7ba:	4b0b      	ldr	r3, [pc, #44]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	609a      	str	r2, [r3, #8]
	LTDCHandle.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800a7c0:	4b09      	ldr	r3, [pc, #36]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	60da      	str	r2, [r3, #12]
	LTDCHandle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800a7c6:	4b08      	ldr	r3, [pc, #32]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	611a      	str	r2, [r3, #16]
	LTDCHandle.Instance = LTDC;
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a7ce:	4a05      	ldr	r2, [pc, #20]	; (800a7e4 <TM_LCD_INT_InitLTDC+0xf4>)
 800a7d0:	601a      	str	r2, [r3, #0]

	/* Init LTDC */
	HAL_LTDC_Init(&LTDCHandle);
 800a7d2:	4805      	ldr	r0, [pc, #20]	; (800a7e8 <TM_LCD_INT_InitLTDC+0xf8>)
 800a7d4:	f7fc f9c8 	bl	8006b68 <HAL_LTDC_Init>
}
 800a7d8:	bf00      	nop
 800a7da:	3738      	adds	r7, #56	; 0x38
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	40023800 	.word	0x40023800
 800a7e4:	40016800 	.word	0x40016800
 800a7e8:	20000c04 	.word	0x20000c04

0800a7ec <TM_LCD_INT_InitLayers>:

static void TM_LCD_INT_InitLayers(void) {
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b09a      	sub	sp, #104	; 0x68
 800a7f0:	af00      	add	r7, sp, #0
	LTDC_LayerCfgTypeDef layer_cfg;
	LTDC_LayerCfgTypeDef layer_cfg2;
	
	/* Layer Init */
	layer_cfg.WindowX0 = 0;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	637b      	str	r3, [r7, #52]	; 0x34
	layer_cfg.WindowX1 = LCD_PIXEL_WIDTH;
 800a7f6:	23f0      	movs	r3, #240	; 0xf0
 800a7f8:	63bb      	str	r3, [r7, #56]	; 0x38
	layer_cfg.WindowY0 = 0;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	layer_cfg.WindowY1 = LCD_PIXEL_HEIGHT; 
 800a7fe:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a802:	643b      	str	r3, [r7, #64]	; 0x40
#if LCD_PIXEL_SIZE == 2
	layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800a804:	2302      	movs	r3, #2
 800a806:	647b      	str	r3, [r7, #68]	; 0x44
#else
	layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
#endif
	layer_cfg.FBStartAdress = SDRAM_START_ADR;
 800a808:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800a80c:	65bb      	str	r3, [r7, #88]	; 0x58
	layer_cfg.Alpha = 255;
 800a80e:	23ff      	movs	r3, #255	; 0xff
 800a810:	64bb      	str	r3, [r7, #72]	; 0x48
	layer_cfg.Alpha0 = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	64fb      	str	r3, [r7, #76]	; 0x4c
	layer_cfg.Backcolor.Blue = 0;
 800a816:	2300      	movs	r3, #0
 800a818:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	layer_cfg.Backcolor.Green = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	layer_cfg.Backcolor.Red = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800a828:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a82c:	653b      	str	r3, [r7, #80]	; 0x50
	layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800a82e:	2307      	movs	r3, #7
 800a830:	657b      	str	r3, [r7, #84]	; 0x54
	layer_cfg.ImageWidth = LCD_PIXEL_WIDTH;
 800a832:	23f0      	movs	r3, #240	; 0xf0
 800a834:	65fb      	str	r3, [r7, #92]	; 0x5c
	layer_cfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800a836:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a83a:	663b      	str	r3, [r7, #96]	; 0x60

	layer_cfg2.WindowX0 = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	603b      	str	r3, [r7, #0]
		layer_cfg2.WindowX1 = 182;
 800a840:	23b6      	movs	r3, #182	; 0xb6
 800a842:	607b      	str	r3, [r7, #4]
		layer_cfg2.WindowY0 = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	60bb      	str	r3, [r7, #8]
		layer_cfg2.WindowY1 = 320;
 800a848:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a84c:	60fb      	str	r3, [r7, #12]
	#if LCD_PIXEL_SIZE == 2
		layer_cfg2.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800a84e:	2302      	movs	r3, #2
 800a850:	613b      	str	r3, [r7, #16]
	#else
		layer_cfg2.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
	#endif

		layer_cfg2.Alpha = 255;
 800a852:	23ff      	movs	r3, #255	; 0xff
 800a854:	617b      	str	r3, [r7, #20]
		layer_cfg2.Alpha0 = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	61bb      	str	r3, [r7, #24]
		layer_cfg2.Backcolor.Blue = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		layer_cfg2.Backcolor.Green = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		layer_cfg2.Backcolor.Red = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		layer_cfg2.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800a86c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a870:	61fb      	str	r3, [r7, #28]
		layer_cfg2.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800a872:	2307      	movs	r3, #7
 800a874:	623b      	str	r3, [r7, #32]
		layer_cfg2.ImageWidth = LCD_PIXEL_WIDTH;
 800a876:	23f0      	movs	r3, #240	; 0xf0
 800a878:	62bb      	str	r3, [r7, #40]	; 0x28
		layer_cfg2.ImageHeight = LCD_PIXEL_HEIGHT;
 800a87a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800a87e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Init layer 1 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg, 0);
 800a880:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a884:	2200      	movs	r2, #0
 800a886:	4619      	mov	r1, r3
 800a888:	480e      	ldr	r0, [pc, #56]	; (800a8c4 <TM_LCD_INT_InitLayers+0xd8>)
 800a88a:	f7fc fb09 	bl	8006ea0 <HAL_LTDC_ConfigLayer>
	
	/* Config layer 2 */
	layer_cfg.Alpha = 255;
 800a88e:	23ff      	movs	r3, #255	; 0xff
 800a890:	64bb      	str	r3, [r7, #72]	; 0x48
	layer_cfg2.FBStartAdress = SDRAM_START_ADR + LCD_PIXEL_SIZE * LCD_PIXEL_HEIGHT * LCD_PIXEL_WIDTH;
 800a892:	4b0d      	ldr	r3, [pc, #52]	; (800a8c8 <TM_LCD_INT_InitLayers+0xdc>)
 800a894:	627b      	str	r3, [r7, #36]	; 0x24

	/* Init layer 2 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg2, 1);
 800a896:	463b      	mov	r3, r7
 800a898:	2201      	movs	r2, #1
 800a89a:	4619      	mov	r1, r3
 800a89c:	4809      	ldr	r0, [pc, #36]	; (800a8c4 <TM_LCD_INT_InitLayers+0xd8>)
 800a89e:	f7fc faff 	bl	8006ea0 <HAL_LTDC_ConfigLayer>
    
    /* Init line event interrupt */
    HAL_LTDC_ProgramLineEvent(&LTDCHandle, 0); 
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	4807      	ldr	r0, [pc, #28]	; (800a8c4 <TM_LCD_INT_InitLayers+0xd8>)
 800a8a6:	f7fc fb6f 	bl	8006f88 <HAL_LTDC_ProgramLineEvent>
  
    /* Set LTDC Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0xE, 0);   
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	210e      	movs	r1, #14
 800a8ae:	2058      	movs	r0, #88	; 0x58
 800a8b0:	f7fa fe61 	bl	8005576 <HAL_NVIC_SetPriority>

    /* Enable LTDC Interrupt */
    HAL_NVIC_EnableIRQ(LTDC_IRQn);  
 800a8b4:	2058      	movs	r0, #88	; 0x58
 800a8b6:	f7fa fe7a 	bl	80055ae <HAL_NVIC_EnableIRQ>
}
 800a8ba:	bf00      	nop
 800a8bc:	3768      	adds	r7, #104	; 0x68
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20000c04 	.word	0x20000c04
 800a8c8:	d0025800 	.word	0xd0025800

0800a8cc <TM_ILI9341_SendCommand>:

/* ILI9341 related functions */
#if defined(LCD_USE_STM32F429_DISCOVERY)
static void TM_ILI9341_SendCommand(uint8_t data) {
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 800a8d6:	4b0a      	ldr	r3, [pc, #40]	; (800a900 <TM_ILI9341_SendCommand+0x34>)
 800a8d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800a8dc:	619a      	str	r2, [r3, #24]
	ILI9341_CS_RESET;
 800a8de:	4b09      	ldr	r3, [pc, #36]	; (800a904 <TM_ILI9341_SendCommand+0x38>)
 800a8e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a8e4:	619a      	str	r2, [r3, #24]
	TM_SPI_Send(ILI9341_SPI, data);
 800a8e6:	79fb      	ldrb	r3, [r7, #7]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4807      	ldr	r0, [pc, #28]	; (800a908 <TM_ILI9341_SendCommand+0x3c>)
 800a8ec:	f7ff fca0 	bl	800a230 <TM_SPI_Send>
	ILI9341_CS_SET;
 800a8f0:	4b04      	ldr	r3, [pc, #16]	; (800a904 <TM_ILI9341_SendCommand+0x38>)
 800a8f2:	2204      	movs	r2, #4
 800a8f4:	619a      	str	r2, [r3, #24]
}
 800a8f6:	bf00      	nop
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	40020c00 	.word	0x40020c00
 800a904:	40020800 	.word	0x40020800
 800a908:	40015000 	.word	0x40015000

0800a90c <TM_ILI9341_SendData>:

static void TM_ILI9341_SendData(uint8_t data) {
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b082      	sub	sp, #8
 800a910:	af00      	add	r7, sp, #0
 800a912:	4603      	mov	r3, r0
 800a914:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 800a916:	4b0a      	ldr	r3, [pc, #40]	; (800a940 <TM_ILI9341_SendData+0x34>)
 800a918:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a91c:	619a      	str	r2, [r3, #24]
	ILI9341_CS_RESET;
 800a91e:	4b09      	ldr	r3, [pc, #36]	; (800a944 <TM_ILI9341_SendData+0x38>)
 800a920:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a924:	619a      	str	r2, [r3, #24]
	TM_SPI_Send(ILI9341_SPI, data);
 800a926:	79fb      	ldrb	r3, [r7, #7]
 800a928:	4619      	mov	r1, r3
 800a92a:	4807      	ldr	r0, [pc, #28]	; (800a948 <TM_ILI9341_SendData+0x3c>)
 800a92c:	f7ff fc80 	bl	800a230 <TM_SPI_Send>
	ILI9341_CS_SET;
 800a930:	4b04      	ldr	r3, [pc, #16]	; (800a944 <TM_ILI9341_SendData+0x38>)
 800a932:	2204      	movs	r2, #4
 800a934:	619a      	str	r2, [r3, #24]
}
 800a936:	bf00      	nop
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}
 800a93e:	bf00      	nop
 800a940:	40020c00 	.word	0x40020c00
 800a944:	40020800 	.word	0x40020800
 800a948:	40015000 	.word	0x40015000

0800a94c <TM_ILI9341_Delay>:

static void TM_ILI9341_Delay(__IO uint32_t delay) {
 800a94c:	b480      	push	{r7}
 800a94e:	b083      	sub	sp, #12
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 800a954:	e002      	b.n	800a95c <TM_ILI9341_Delay+0x10>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	3b01      	subs	r3, #1
 800a95a:	607b      	str	r3, [r7, #4]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1f9      	bne.n	800a956 <TM_ILI9341_Delay+0xa>
}
 800a962:	bf00      	nop
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
	...

0800a970 <TM_LCD_INT_InitLCD>:
#endif

static void TM_LCD_INT_InitLCD(void) {
 800a970:	b580      	push	{r7, lr}
 800a972:	af00      	add	r7, sp, #0
#if defined(LCD_USE_STM32F429_DISCOVERY)
	/* CS high */
	ILI9341_CS_SET;
 800a974:	4ba6      	ldr	r3, [pc, #664]	; (800ac10 <TM_LCD_INT_InitLCD+0x2a0>)
 800a976:	2204      	movs	r2, #4
 800a978:	619a      	str	r2, [r3, #24]
	
	/* Init SPI */
	TM_SPI_Init(ILI9341_SPI, ILI9341_SPI_PINS);
 800a97a:	2100      	movs	r1, #0
 800a97c:	48a5      	ldr	r0, [pc, #660]	; (800ac14 <TM_LCD_INT_InitLCD+0x2a4>)
 800a97e:	f000 fb2b 	bl	800afd8 <TM_SPI_Init>
	
	/* Initialization sequence */
	TM_ILI9341_SendCommand(0xCA);
 800a982:	20ca      	movs	r0, #202	; 0xca
 800a984:	f7ff ffa2 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC3);
 800a988:	20c3      	movs	r0, #195	; 0xc3
 800a98a:	f7ff ffbf 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 800a98e:	2008      	movs	r0, #8
 800a990:	f7ff ffbc 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x50);
 800a994:	2050      	movs	r0, #80	; 0x50
 800a996:	f7ff ffb9 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 800a99a:	20cf      	movs	r0, #207	; 0xcf
 800a99c:	f7ff ff96 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	f7ff ffb3 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 800a9a6:	20c1      	movs	r0, #193	; 0xc1
 800a9a8:	f7ff ffb0 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 800a9ac:	2030      	movs	r0, #48	; 0x30
 800a9ae:	f7ff ffad 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 800a9b2:	20ed      	movs	r0, #237	; 0xed
 800a9b4:	f7ff ff8a 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 800a9b8:	2064      	movs	r0, #100	; 0x64
 800a9ba:	f7ff ffa7 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 800a9be:	2003      	movs	r0, #3
 800a9c0:	f7ff ffa4 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 800a9c4:	2012      	movs	r0, #18
 800a9c6:	f7ff ffa1 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 800a9ca:	2081      	movs	r0, #129	; 0x81
 800a9cc:	f7ff ff9e 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 800a9d0:	20e8      	movs	r0, #232	; 0xe8
 800a9d2:	f7ff ff7b 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 800a9d6:	2085      	movs	r0, #133	; 0x85
 800a9d8:	f7ff ff98 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800a9dc:	2000      	movs	r0, #0
 800a9de:	f7ff ff95 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 800a9e2:	2078      	movs	r0, #120	; 0x78
 800a9e4:	f7ff ff92 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 800a9e8:	20cb      	movs	r0, #203	; 0xcb
 800a9ea:	f7ff ff6f 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 800a9ee:	2039      	movs	r0, #57	; 0x39
 800a9f0:	f7ff ff8c 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 800a9f4:	202c      	movs	r0, #44	; 0x2c
 800a9f6:	f7ff ff89 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800a9fa:	2000      	movs	r0, #0
 800a9fc:	f7ff ff86 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 800aa00:	2034      	movs	r0, #52	; 0x34
 800aa02:	f7ff ff83 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 800aa06:	2002      	movs	r0, #2
 800aa08:	f7ff ff80 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 800aa0c:	20f7      	movs	r0, #247	; 0xf7
 800aa0e:	f7ff ff5d 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 800aa12:	2020      	movs	r0, #32
 800aa14:	f7ff ff7a 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 800aa18:	20ea      	movs	r0, #234	; 0xea
 800aa1a:	f7ff ff57 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800aa1e:	2000      	movs	r0, #0
 800aa20:	f7ff ff74 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800aa24:	2000      	movs	r0, #0
 800aa26:	f7ff ff71 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 800aa2a:	20b1      	movs	r0, #177	; 0xb1
 800aa2c:	f7ff ff4e 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800aa30:	2000      	movs	r0, #0
 800aa32:	f7ff ff6b 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x1B);
 800aa36:	201b      	movs	r0, #27
 800aa38:	f7ff ff68 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 800aa3c:	20b6      	movs	r0, #182	; 0xb6
 800aa3e:	f7ff ff45 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0A);
 800aa42:	200a      	movs	r0, #10
 800aa44:	f7ff ff62 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xA2);
 800aa48:	20a2      	movs	r0, #162	; 0xa2
 800aa4a:	f7ff ff5f 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 800aa4e:	20c0      	movs	r0, #192	; 0xc0
 800aa50:	f7ff ff3c 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 800aa54:	2010      	movs	r0, #16
 800aa56:	f7ff ff59 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 800aa5a:	20c1      	movs	r0, #193	; 0xc1
 800aa5c:	f7ff ff36 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 800aa60:	2010      	movs	r0, #16
 800aa62:	f7ff ff53 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 800aa66:	20c5      	movs	r0, #197	; 0xc5
 800aa68:	f7ff ff30 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x45);
 800aa6c:	2045      	movs	r0, #69	; 0x45
 800aa6e:	f7ff ff4d 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x15);
 800aa72:	2015      	movs	r0, #21
 800aa74:	f7ff ff4a 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 800aa78:	20c7      	movs	r0, #199	; 0xc7
 800aa7a:	f7ff ff27 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x90);
 800aa7e:	2090      	movs	r0, #144	; 0x90
 800aa80:	f7ff ff44 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 800aa84:	2036      	movs	r0, #54	; 0x36
 800aa86:	f7ff ff21 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC8);
 800aa8a:	20c8      	movs	r0, #200	; 0xc8
 800aa8c:	f7ff ff3e 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 800aa90:	20f2      	movs	r0, #242	; 0xf2
 800aa92:	f7ff ff1b 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800aa96:	2000      	movs	r0, #0
 800aa98:	f7ff ff38 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_RGB_INTERFACE);
 800aa9c:	20b0      	movs	r0, #176	; 0xb0
 800aa9e:	f7ff ff15 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC2);
 800aaa2:	20c2      	movs	r0, #194	; 0xc2
 800aaa4:	f7ff ff32 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 800aaa8:	20b6      	movs	r0, #182	; 0xb6
 800aaaa:	f7ff ff0f 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0A);
 800aaae:	200a      	movs	r0, #10
 800aab0:	f7ff ff2c 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xA7);
 800aab4:	20a7      	movs	r0, #167	; 0xa7
 800aab6:	f7ff ff29 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 800aaba:	2027      	movs	r0, #39	; 0x27
 800aabc:	f7ff ff26 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x04);
 800aac0:	2004      	movs	r0, #4
 800aac2:	f7ff ff23 	bl	800a90c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 800aac6:	202a      	movs	r0, #42	; 0x2a
 800aac8:	f7ff ff00 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800aacc:	2000      	movs	r0, #0
 800aace:	f7ff ff1d 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800aad2:	2000      	movs	r0, #0
 800aad4:	f7ff ff1a 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800aad8:	2000      	movs	r0, #0
 800aada:	f7ff ff17 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 800aade:	20ef      	movs	r0, #239	; 0xef
 800aae0:	f7ff ff14 	bl	800a90c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 800aae4:	202b      	movs	r0, #43	; 0x2b
 800aae6:	f7ff fef1 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800aaea:	2000      	movs	r0, #0
 800aaec:	f7ff ff0e 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800aaf0:	2000      	movs	r0, #0
 800aaf2:	f7ff ff0b 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 800aaf6:	2001      	movs	r0, #1
 800aaf8:	f7ff ff08 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 800aafc:	203f      	movs	r0, #63	; 0x3f
 800aafe:	f7ff ff05 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_INTERFACE);
 800ab02:	20f6      	movs	r0, #246	; 0xf6
 800ab04:	f7ff fee2 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 800ab08:	2001      	movs	r0, #1
 800ab0a:	f7ff feff 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800ab0e:	2000      	movs	r0, #0
 800ab10:	f7ff fefc 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x06);
 800ab14:	2006      	movs	r0, #6
 800ab16:	f7ff fef9 	bl	800a90c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 800ab1a:	202c      	movs	r0, #44	; 0x2c
 800ab1c:	f7ff fed6 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(1000000);
 800ab20:	483d      	ldr	r0, [pc, #244]	; (800ac18 <TM_LCD_INT_InitLCD+0x2a8>)
 800ab22:	f7ff ff13 	bl	800a94c <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 800ab26:	2026      	movs	r0, #38	; 0x26
 800ab28:	f7ff fed0 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	f7ff feed 	bl	800a90c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 800ab32:	20e0      	movs	r0, #224	; 0xe0
 800ab34:	f7ff feca 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 800ab38:	200f      	movs	r0, #15
 800ab3a:	f7ff fee7 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x29);
 800ab3e:	2029      	movs	r0, #41	; 0x29
 800ab40:	f7ff fee4 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x24);
 800ab44:	2024      	movs	r0, #36	; 0x24
 800ab46:	f7ff fee1 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 800ab4a:	200c      	movs	r0, #12
 800ab4c:	f7ff fede 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 800ab50:	200e      	movs	r0, #14
 800ab52:	f7ff fedb 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 800ab56:	2009      	movs	r0, #9
 800ab58:	f7ff fed8 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 800ab5c:	204e      	movs	r0, #78	; 0x4e
 800ab5e:	f7ff fed5 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 800ab62:	2078      	movs	r0, #120	; 0x78
 800ab64:	f7ff fed2 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3C);
 800ab68:	203c      	movs	r0, #60	; 0x3c
 800ab6a:	f7ff fecf 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 800ab6e:	2009      	movs	r0, #9
 800ab70:	f7ff fecc 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x13);
 800ab74:	2013      	movs	r0, #19
 800ab76:	f7ff fec9 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x05);
 800ab7a:	2005      	movs	r0, #5
 800ab7c:	f7ff fec6 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x17);
 800ab80:	2017      	movs	r0, #23
 800ab82:	f7ff fec3 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 800ab86:	2011      	movs	r0, #17
 800ab88:	f7ff fec0 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800ab8c:	2000      	movs	r0, #0
 800ab8e:	f7ff febd 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 800ab92:	20e1      	movs	r0, #225	; 0xe1
 800ab94:	f7ff fe9a 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800ab98:	2000      	movs	r0, #0
 800ab9a:	f7ff feb7 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x16);
 800ab9e:	2016      	movs	r0, #22
 800aba0:	f7ff feb4 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x1B);
 800aba4:	201b      	movs	r0, #27
 800aba6:	f7ff feb1 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x04);
 800abaa:	2004      	movs	r0, #4
 800abac:	f7ff feae 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 800abb0:	2011      	movs	r0, #17
 800abb2:	f7ff feab 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 800abb6:	2007      	movs	r0, #7
 800abb8:	f7ff fea8 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 800abbc:	2031      	movs	r0, #49	; 0x31
 800abbe:	f7ff fea5 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x33);
 800abc2:	2033      	movs	r0, #51	; 0x33
 800abc4:	f7ff fea2 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x42);
 800abc8:	2042      	movs	r0, #66	; 0x42
 800abca:	f7ff fe9f 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x05);
 800abce:	2005      	movs	r0, #5
 800abd0:	f7ff fe9c 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 800abd4:	200c      	movs	r0, #12
 800abd6:	f7ff fe99 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0A);
 800abda:	200a      	movs	r0, #10
 800abdc:	f7ff fe96 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 800abe0:	2028      	movs	r0, #40	; 0x28
 800abe2:	f7ff fe93 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2F);
 800abe6:	202f      	movs	r0, #47	; 0x2f
 800abe8:	f7ff fe90 	bl	800a90c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 800abec:	200f      	movs	r0, #15
 800abee:	f7ff fe8d 	bl	800a90c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 800abf2:	2011      	movs	r0, #17
 800abf4:	f7ff fe6a 	bl	800a8cc <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(1000000);
 800abf8:	4807      	ldr	r0, [pc, #28]	; (800ac18 <TM_LCD_INT_InitLCD+0x2a8>)
 800abfa:	f7ff fea7 	bl	800a94c <TM_ILI9341_Delay>
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 800abfe:	2029      	movs	r0, #41	; 0x29
 800ac00:	f7ff fe64 	bl	800a8cc <TM_ILI9341_SendCommand>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 800ac04:	202c      	movs	r0, #44	; 0x2c
 800ac06:	f7ff fe61 	bl	800a8cc <TM_ILI9341_SendCommand>
#endif
}
 800ac0a:	bf00      	nop
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	40020800 	.word	0x40020800
 800ac14:	40015000 	.word	0x40015000
 800ac18:	000f4240 	.word	0x000f4240

0800ac1c <TM_LCD_INT_InitPins>:

static void TM_LCD_INT_InitPins(void) {
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af02      	add	r7, sp, #8
	/* LCD pins */
	TM_GPIO_InitAlternate(GPIOI, 0xF000, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, 0x0E);
	TM_GPIO_InitAlternate(GPIOJ, 0xFFFF, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, 0x0E);
	TM_GPIO_InitAlternate(GPIOK, 0x00FF, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, 0x0E);	
#elif defined(LCD_USE_STM32F429_DISCOVERY)
	TM_GPIO_Init(ILI9341_WRX_PORT, ILI9341_WRX_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
 800ac22:	2301      	movs	r3, #1
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	2300      	movs	r3, #0
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ac32:	4833      	ldr	r0, [pc, #204]	; (800ad00 <TM_LCD_INT_InitPins+0xe4>)
 800ac34:	f7ff f9d6 	bl	8009fe4 <TM_GPIO_Init>
	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
 800ac38:	2301      	movs	r3, #1
 800ac3a:	9301      	str	r3, [sp, #4]
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	9300      	str	r3, [sp, #0]
 800ac40:	2300      	movs	r3, #0
 800ac42:	2201      	movs	r2, #1
 800ac44:	2104      	movs	r1, #4
 800ac46:	482f      	ldr	r0, [pc, #188]	; (800ad04 <TM_LCD_INT_InitPins+0xe8>)
 800ac48:	f7ff f9cc 	bl	8009fe4 <TM_GPIO_Init>
	TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 800ac4c:	230e      	movs	r3, #14
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	2303      	movs	r3, #3
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	2300      	movs	r3, #0
 800ac56:	2200      	movs	r2, #0
 800ac58:	f641 0158 	movw	r1, #6232	; 0x1858
 800ac5c:	482a      	ldr	r0, [pc, #168]	; (800ad08 <TM_LCD_INT_InitPins+0xec>)
 800ac5e:	f7ff f9e4 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 800ac62:	230e      	movs	r3, #14
 800ac64:	9301      	str	r3, [sp, #4]
 800ac66:	2303      	movs	r3, #3
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800ac72:	4826      	ldr	r0, [pc, #152]	; (800ad0c <TM_LCD_INT_InitPins+0xf0>)
 800ac74:	f7ff f9d9 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF9_LTDC);
 800ac78:	2309      	movs	r3, #9
 800ac7a:	9301      	str	r3, [sp, #4]
 800ac7c:	2303      	movs	r3, #3
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	2300      	movs	r3, #0
 800ac82:	2200      	movs	r2, #0
 800ac84:	2103      	movs	r1, #3
 800ac86:	4821      	ldr	r0, [pc, #132]	; (800ad0c <TM_LCD_INT_InitPins+0xf0>)
 800ac88:	f7ff f9cf 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 800ac8c:	230e      	movs	r3, #14
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	2303      	movs	r3, #3
 800ac92:	9300      	str	r3, [sp, #0]
 800ac94:	2300      	movs	r3, #0
 800ac96:	2200      	movs	r2, #0
 800ac98:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 800ac9c:	4819      	ldr	r0, [pc, #100]	; (800ad04 <TM_LCD_INT_InitPins+0xe8>)
 800ac9e:	f7ff f9c4 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_3 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 800aca2:	230e      	movs	r3, #14
 800aca4:	9301      	str	r3, [sp, #4]
 800aca6:	2303      	movs	r3, #3
 800aca8:	9300      	str	r3, [sp, #0]
 800acaa:	2300      	movs	r3, #0
 800acac:	2200      	movs	r2, #0
 800acae:	2148      	movs	r1, #72	; 0x48
 800acb0:	4813      	ldr	r0, [pc, #76]	; (800ad00 <TM_LCD_INT_InitPins+0xe4>)
 800acb2:	f7ff f9ba 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 800acb6:	230e      	movs	r3, #14
 800acb8:	9301      	str	r3, [sp, #4]
 800acba:	2303      	movs	r3, #3
 800acbc:	9300      	str	r3, [sp, #0]
 800acbe:	2300      	movs	r3, #0
 800acc0:	2200      	movs	r2, #0
 800acc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800acc6:	4812      	ldr	r0, [pc, #72]	; (800ad10 <TM_LCD_INT_InitPins+0xf4>)
 800acc8:	f7ff f9af 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 800accc:	230e      	movs	r3, #14
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	2303      	movs	r3, #3
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	2300      	movs	r3, #0
 800acd6:	2200      	movs	r2, #0
 800acd8:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
 800acdc:	480d      	ldr	r0, [pc, #52]	; (800ad14 <TM_LCD_INT_InitPins+0xf8>)
 800acde:	f7ff f9a4 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_10 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF9_LTDC);
 800ace2:	2309      	movs	r3, #9
 800ace4:	9301      	str	r3, [sp, #4]
 800ace6:	2303      	movs	r3, #3
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	2300      	movs	r3, #0
 800acec:	2200      	movs	r2, #0
 800acee:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800acf2:	4808      	ldr	r0, [pc, #32]	; (800ad14 <TM_LCD_INT_InitPins+0xf8>)
 800acf4:	f7ff f999 	bl	800a02a <TM_GPIO_InitAlternate>
#endif
}
 800acf8:	bf00      	nop
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	40020c00 	.word	0x40020c00
 800ad04:	40020800 	.word	0x40020800
 800ad08:	40020000 	.word	0x40020000
 800ad0c:	40020400 	.word	0x40020400
 800ad10:	40021400 	.word	0x40021400
 800ad14:	40021800 	.word	0x40021800

0800ad18 <LTDC_IRQHandler>:

/* Interrupt handler */
void LTDC_IRQHandler(void) {
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	af00      	add	r7, sp, #0
    HAL_LTDC_IRQHandler(&LTDCHandle);
 800ad1c:	4802      	ldr	r0, [pc, #8]	; (800ad28 <LTDC_IRQHandler+0x10>)
 800ad1e:	f7fb fffd 	bl	8006d1c <HAL_LTDC_IRQHandler>
}
 800ad22:	bf00      	nop
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20000c04 	.word	0x20000c04

0800ad2c <TM_PVD_Handler>:
}

/*****************************************************************/
/*                 PVD INTERRUPT USER CALLBACK                   */
/*****************************************************************/
__weak void TM_PVD_Handler(uint8_t status) {
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	4603      	mov	r3, r0
 800ad34:	71fb      	strb	r3, [r7, #7]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_PVD_Handler could be implemented in the user file
	*/
}
 800ad36:	bf00      	nop
 800ad38:	370c      	adds	r7, #12
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
	...

0800ad44 <PVD_IRQHandler>:

/*****************************************************************/
/*                    PVD INTERRUPT HANDLER                      */
/*****************************************************************/
void PVD_IRQHandler(void) {
 800ad44:	b580      	push	{r7, lr}
 800ad46:	af00      	add	r7, sp, #0
	/* Call user function if needed */
	if (__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET) {
 800ad48:	4b0b      	ldr	r3, [pc, #44]	; (800ad78 <PVD_IRQHandler+0x34>)
 800ad4a:	695b      	ldr	r3, [r3, #20]
 800ad4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00f      	beq.n	800ad74 <PVD_IRQHandler+0x30>
#if defined(PWR_CSR_PVDO)	
		/* Call user function with status */
		TM_PVD_Handler((PWR->CSR & PWR_CSR_PVDO) ? 1 : 0);
 800ad54:	4b09      	ldr	r3, [pc, #36]	; (800ad7c <PVD_IRQHandler+0x38>)
 800ad56:	685b      	ldr	r3, [r3, #4]
 800ad58:	f003 0304 	and.w	r3, r3, #4
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	bf14      	ite	ne
 800ad60:	2301      	movne	r3, #1
 800ad62:	2300      	moveq	r3, #0
 800ad64:	b2db      	uxtb	r3, r3
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff ffe0 	bl	800ad2c <TM_PVD_Handler>
#if defined(PWR_CSR1_PVDO)
		/* Call user function with status */
		TM_PVD_Handler((PWR->CSR1 & PWR_CSR1_PVDO) ? 1 : 0);
#endif
		/* Clear PWR EXTI pending bit */
		__HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800ad6c:	4b02      	ldr	r3, [pc, #8]	; (800ad78 <PVD_IRQHandler+0x34>)
 800ad6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ad72:	615a      	str	r2, [r3, #20]
	}
}
 800ad74:	bf00      	nop
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	40013c00 	.word	0x40013c00
 800ad7c:	40007000 	.word	0x40007000

0800ad80 <TM_SDRAM_Init>:
#include "tm_stm32_sdram.h"

/* Internal functions */
static void TM_SDRAM_InitPins(void);

uint8_t TM_SDRAM_Init(void) {
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b09a      	sub	sp, #104	; 0x68
 800ad84:	af00      	add	r7, sp, #0
	SDRAM_HandleTypeDef SDRAMHandle;
	FMC_SDRAM_TimingTypeDef Timing;
	FMC_SDRAM_CommandTypeDef Command;

	volatile uint32_t timeout = SDRAM_TIMEOUT;
 800ad86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad8a:	607b      	str	r3, [r7, #4]
	static uint8_t initialized = 0;
	
	/* Already initialized */
	if (initialized) {
 800ad8c:	4b5a      	ldr	r3, [pc, #360]	; (800aef8 <TM_SDRAM_Init+0x178>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <TM_SDRAM_Init+0x18>
		return 1;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e0aa      	b.n	800aeee <TM_SDRAM_Init+0x16e>
	}
	
	/* Set instance */
	SDRAMHandle.Instance = FMC_SDRAM_DEVICE;
 800ad98:	4b58      	ldr	r3, [pc, #352]	; (800aefc <TM_SDRAM_Init+0x17c>)
 800ad9a:	637b      	str	r3, [r7, #52]	; 0x34
	
	/* Initialize FMC pins */
	TM_SDRAM_InitPins();
 800ad9c:	f000 f8c2 	bl	800af24 <TM_SDRAM_InitPins>
	
	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 800ada0:	2300      	movs	r3, #0
 800ada2:	603b      	str	r3, [r7, #0]
 800ada4:	4b56      	ldr	r3, [pc, #344]	; (800af00 <TM_SDRAM_Init+0x180>)
 800ada6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada8:	4a55      	ldr	r2, [pc, #340]	; (800af00 <TM_SDRAM_Init+0x180>)
 800adaa:	f043 0301 	orr.w	r3, r3, #1
 800adae:	6393      	str	r3, [r2, #56]	; 0x38
 800adb0:	4b53      	ldr	r3, [pc, #332]	; (800af00 <TM_SDRAM_Init+0x180>)
 800adb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adb4:	f003 0301 	and.w	r3, r3, #1
 800adb8:	603b      	str	r3, [r7, #0]
 800adba:	683b      	ldr	r3, [r7, #0]
	/* FMC SDRAM device initialization sequence --------------------------------*/ 
	/* Step 1 ----------------------------------------------------*/ 
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	Timing.LoadToActiveDelay    = 2;
 800adbc:	2302      	movs	r3, #2
 800adbe:	61bb      	str	r3, [r7, #24]
	Timing.ExitSelfRefreshDelay = 7;
 800adc0:	2307      	movs	r3, #7
 800adc2:	61fb      	str	r3, [r7, #28]
	Timing.SelfRefreshTime      = 4;
 800adc4:	2304      	movs	r3, #4
 800adc6:	623b      	str	r3, [r7, #32]
	Timing.RowCycleDelay        = 7;
 800adc8:	2307      	movs	r3, #7
 800adca:	627b      	str	r3, [r7, #36]	; 0x24
	Timing.WriteRecoveryTime    = 2;
 800adcc:	2302      	movs	r3, #2
 800adce:	62bb      	str	r3, [r7, #40]	; 0x28
	Timing.RPDelay              = 2;
 800add0:	2302      	movs	r3, #2
 800add2:	62fb      	str	r3, [r7, #44]	; 0x2c
	Timing.RCDDelay             = 2;
 800add4:	2302      	movs	r3, #2
 800add6:	633b      	str	r3, [r7, #48]	; 0x30
	
	
	/* FMC SDRAM control configuration */
	SDRAMHandle.Init.SDBank             = SDRAM_BANK;
 800add8:	2301      	movs	r3, #1
 800adda:	63bb      	str	r3, [r7, #56]	; 0x38
	SDRAMHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800addc:	2300      	movs	r3, #0
 800adde:	63fb      	str	r3, [r7, #60]	; 0x3c
	SDRAMHandle.Init.RowBitsNumber      = SDRAM_ROWBITS_NUMBER;
 800ade0:	2304      	movs	r3, #4
 800ade2:	643b      	str	r3, [r7, #64]	; 0x40
	SDRAMHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800ade4:	2310      	movs	r3, #16
 800ade6:	647b      	str	r3, [r7, #68]	; 0x44
	SDRAMHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800ade8:	2340      	movs	r3, #64	; 0x40
 800adea:	64bb      	str	r3, [r7, #72]	; 0x48
	SDRAMHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800adec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800adf0:	64fb      	str	r3, [r7, #76]	; 0x4c
	SDRAMHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800adf2:	2300      	movs	r3, #0
 800adf4:	653b      	str	r3, [r7, #80]	; 0x50
	SDRAMHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800adf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800adfa:	657b      	str	r3, [r7, #84]	; 0x54
	SDRAMHandle.Init.ReadBurst          = SDRAM_READ_BURST_STATE;
 800adfc:	2300      	movs	r3, #0
 800adfe:	65bb      	str	r3, [r7, #88]	; 0x58
	SDRAMHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800ae00:	2300      	movs	r3, #0
 800ae02:	65fb      	str	r3, [r7, #92]	; 0x5c
	
	/* FMC SDRAM bank initialization */
	HAL_SDRAM_Init(&SDRAMHandle, &Timing);
 800ae04:	f107 0218 	add.w	r2, r7, #24
 800ae08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fd f8fa 	bl	8008008 <HAL_SDRAM_Init>
	
	/* SDRAM Init sequence */
	
	/* Configure a clock configuration enable command */
	Command.CommandMode				= FMC_SDRAM_CMD_CLK_ENABLE;
 800ae14:	2301      	movs	r3, #1
 800ae16:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget 			= SDRAM_COMMAND_TARGET_BANK;
 800ae18:	2308      	movs	r3, #8
 800ae1a:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber 		= 1;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= 0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	617b      	str	r3, [r7, #20]
	
	/* Send command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 800ae24:	f107 0108 	add.w	r1, r7, #8
 800ae28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ae2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae30:	4618      	mov	r0, r3
 800ae32:	f7fd f91d 	bl	8008070 <HAL_SDRAM_SendCommand>
	
	/* Little delay */
	timeout = SDRAM_TIMEOUT * 0xF;
 800ae36:	4b33      	ldr	r3, [pc, #204]	; (800af04 <TM_SDRAM_Init+0x184>)
 800ae38:	607b      	str	r3, [r7, #4]
	while (timeout--);
 800ae3a:	bf00      	nop
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	1e5a      	subs	r2, r3, #1
 800ae40:	607a      	str	r2, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1fa      	bne.n	800ae3c <TM_SDRAM_Init+0xbc>
	
	/* Configure a PALL (precharge all) command */ 
	Command.CommandMode          	= FMC_SDRAM_CMD_PALL;
 800ae46:	2302      	movs	r3, #2
 800ae48:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 800ae4a:	2308      	movs	r3, #8
 800ae4c:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber      	= 1;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= 0;
 800ae52:	2300      	movs	r3, #0
 800ae54:	617b      	str	r3, [r7, #20]
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 800ae56:	f107 0108 	add.w	r1, r7, #8
 800ae5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ae5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7fd f904 	bl	8008070 <HAL_SDRAM_SendCommand>

	/* Configure a Auto-Refresh command */ 
	Command.CommandMode            	= FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 800ae6c:	2308      	movs	r3, #8
 800ae6e:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber      	= 8;
 800ae70:	2308      	movs	r3, #8
 800ae72:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= 0;
 800ae74:	2300      	movs	r3, #0
 800ae76:	617b      	str	r3, [r7, #20]
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 800ae78:	f107 0108 	add.w	r1, r7, #8
 800ae7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ae80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fd f8f3 	bl	8008070 <HAL_SDRAM_SendCommand>
	
	/* Configure a load Mode register command */
	Command.CommandMode            	= FMC_SDRAM_CMD_LOAD_MODE;
 800ae8a:	2304      	movs	r3, #4
 800ae8c:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 800ae8e:	2308      	movs	r3, #8
 800ae90:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber      	= 1;
 800ae92:	2301      	movs	r3, #1
 800ae94:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= (uint32_t)SDRAM_REG_VALUE;
 800ae96:	f240 2331 	movw	r3, #561	; 0x231
 800ae9a:	617b      	str	r3, [r7, #20]
	
	/* Wait until the SDRAM controller is ready */
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 800ae9c:	f107 0108 	add.w	r1, r7, #8
 800aea0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fd f8e1 	bl	8008070 <HAL_SDRAM_SendCommand>
  
	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(&SDRAMHandle, SDRAM_REFRESH_COUNT); 
 800aeae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800aeb2:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7fd f905 	bl	80080c6 <HAL_SDRAM_ProgramRefreshRate>
	
	/* Little delay */
	timeout = SDRAM_TIMEOUT * 0xF;
 800aebc:	4b11      	ldr	r3, [pc, #68]	; (800af04 <TM_SDRAM_Init+0x184>)
 800aebe:	607b      	str	r3, [r7, #4]
	while (timeout--);
 800aec0:	bf00      	nop
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	1e5a      	subs	r2, r3, #1
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1fa      	bne.n	800aec2 <TM_SDRAM_Init+0x142>
	
	/* Check if everything goes right */
	/* Write 0x45 at location 0x50 and check if result is the same on read operation */
	TM_SDRAM_Write8(0x50, 0x45);
 800aecc:	4b0e      	ldr	r3, [pc, #56]	; (800af08 <TM_SDRAM_Init+0x188>)
 800aece:	2245      	movs	r2, #69	; 0x45
 800aed0:	701a      	strb	r2, [r3, #0]
	
	/* Read and check */
	if (TM_SDRAM_Read8(0x50) == 0x45) {
 800aed2:	4b0d      	ldr	r3, [pc, #52]	; (800af08 <TM_SDRAM_Init+0x188>)
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	2b45      	cmp	r3, #69	; 0x45
 800aeda:	d104      	bne.n	800aee6 <TM_SDRAM_Init+0x166>
		/* Initialized OK */
		initialized = 1;
 800aedc:	4b06      	ldr	r3, [pc, #24]	; (800aef8 <TM_SDRAM_Init+0x178>)
 800aede:	2201      	movs	r2, #1
 800aee0:	701a      	strb	r2, [r3, #0]
		/* Initialized OK */
		return 1;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e003      	b.n	800aeee <TM_SDRAM_Init+0x16e>
	}
	
	/* Not initialized OK */
	initialized = 0;
 800aee6:	4b04      	ldr	r3, [pc, #16]	; (800aef8 <TM_SDRAM_Init+0x178>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	701a      	strb	r2, [r3, #0]
	
	/* Not ok */
	return 0;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3768      	adds	r7, #104	; 0x68
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	20000cdc 	.word	0x20000cdc
 800aefc:	a0000140 	.word	0xa0000140
 800af00:	40023800 	.word	0x40023800
 800af04:	000efff1 	.word	0x000efff1
 800af08:	d0000050 	.word	0xd0000050

0800af0c <TM_SDRAM_InitCustomPinsCallback>:

__weak uint8_t TM_SDRAM_InitCustomPinsCallback(uint16_t AlternateFunction) {
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	4603      	mov	r3, r0
 800af14:	80fb      	strh	r3, [r7, #6]
	/* NOTE: This function Should not be modified, when the callback is needed,
             the TM_SDRAM_InitCustomPinsCallback could be implemented in the user file
	*/
	
	/* Return 0, use pins already supported from library */
	return 0;
 800af16:	2300      	movs	r3, #0
}
 800af18:	4618      	mov	r0, r3
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr

0800af24 <TM_SDRAM_InitPins>:

/* Private functions */
static void TM_SDRAM_InitPins(void) {
 800af24:	b580      	push	{r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af02      	add	r7, sp, #8
	/* Try to initialize from user */
	if (TM_SDRAM_InitCustomPinsCallback(GPIO_AF12_FMC)) {
 800af2a:	200c      	movs	r0, #12
 800af2c:	f7ff ffee 	bl	800af0c <TM_SDRAM_InitCustomPinsCallback>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d140      	bne.n	800afb8 <TM_SDRAM_InitPins+0x94>
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
#elif defined(SDRAM_USE_STM32F429_DISCOVERY)
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 800af36:	230c      	movs	r3, #12
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	2303      	movs	r3, #3
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	2300      	movs	r3, #0
 800af40:	2200      	movs	r2, #0
 800af42:	2160      	movs	r1, #96	; 0x60
 800af44:	481e      	ldr	r0, [pc, #120]	; (800afc0 <TM_SDRAM_InitPins+0x9c>)
 800af46:	f7ff f870 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_0, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 800af4a:	230c      	movs	r3, #12
 800af4c:	9301      	str	r3, [sp, #4]
 800af4e:	2303      	movs	r3, #3
 800af50:	9300      	str	r3, [sp, #0]
 800af52:	2300      	movs	r3, #0
 800af54:	2200      	movs	r2, #0
 800af56:	2101      	movs	r1, #1
 800af58:	481a      	ldr	r0, [pc, #104]	; (800afc4 <TM_SDRAM_InitPins+0xa0>)
 800af5a:	f7ff f866 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 800af5e:	230c      	movs	r3, #12
 800af60:	9301      	str	r3, [sp, #4]
 800af62:	2303      	movs	r3, #3
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	2300      	movs	r3, #0
 800af68:	2200      	movs	r2, #0
 800af6a:	f24c 7103 	movw	r1, #50947	; 0xc703
 800af6e:	4816      	ldr	r0, [pc, #88]	; (800afc8 <TM_SDRAM_InitPins+0xa4>)
 800af70:	f7ff f85b 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 800af74:	230c      	movs	r3, #12
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	2303      	movs	r3, #3
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	2300      	movs	r3, #0
 800af7e:	2200      	movs	r2, #0
 800af80:	f64f 7183 	movw	r1, #65411	; 0xff83
 800af84:	4811      	ldr	r0, [pc, #68]	; (800afcc <TM_SDRAM_InitPins+0xa8>)
 800af86:	f7ff f850 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 800af8a:	230c      	movs	r3, #12
 800af8c:	9301      	str	r3, [sp, #4]
 800af8e:	2303      	movs	r3, #3
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	2300      	movs	r3, #0
 800af94:	2200      	movs	r2, #0
 800af96:	f64f 013f 	movw	r1, #63551	; 0xf83f
 800af9a:	480d      	ldr	r0, [pc, #52]	; (800afd0 <TM_SDRAM_InitPins+0xac>)
 800af9c:	f7ff f845 	bl	800a02a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 800afa0:	230c      	movs	r3, #12
 800afa2:	9301      	str	r3, [sp, #4]
 800afa4:	2303      	movs	r3, #3
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	2300      	movs	r3, #0
 800afaa:	2200      	movs	r2, #0
 800afac:	f248 1133 	movw	r1, #33075	; 0x8133
 800afb0:	4808      	ldr	r0, [pc, #32]	; (800afd4 <TM_SDRAM_InitPins+0xb0>)
 800afb2:	f7ff f83a 	bl	800a02a <TM_GPIO_InitAlternate>
 800afb6:	e000      	b.n	800afba <TM_SDRAM_InitPins+0x96>
		return;
 800afb8:	bf00      	nop
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
#endif
}
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	40020400 	.word	0x40020400
 800afc4:	40020800 	.word	0x40020800
 800afc8:	40020c00 	.word	0x40020c00
 800afcc:	40021000 	.word	0x40021000
 800afd0:	40021400 	.word	0x40021400
 800afd4:	40021800 	.word	0x40021800

0800afd8 <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af02      	add	r7, sp, #8
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef SPI1
	if (SPIx == SPI1) {
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a2e      	ldr	r2, [pc, #184]	; (800b0a0 <TM_SPI_Init+0xc8>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d10a      	bne.n	800b002 <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 800afec:	78f9      	ldrb	r1, [r7, #3]
 800afee:	2300      	movs	r3, #0
 800aff0:	9301      	str	r3, [sp, #4]
 800aff2:	f44f 7382 	mov.w	r3, #260	; 0x104
 800aff6:	9300      	str	r3, [sp, #0]
 800aff8:	2320      	movs	r3, #32
 800affa:	2200      	movs	r2, #0
 800affc:	4828      	ldr	r0, [pc, #160]	; (800b0a0 <TM_SPI_Init+0xc8>)
 800affe:	f000 f867 	bl	800b0d0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI2
	if (SPIx == SPI2) {
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a27      	ldr	r2, [pc, #156]	; (800b0a4 <TM_SPI_Init+0xcc>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d10a      	bne.n	800b020 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 800b00a:	78f9      	ldrb	r1, [r7, #3]
 800b00c:	2300      	movs	r3, #0
 800b00e:	9301      	str	r3, [sp, #4]
 800b010:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	2320      	movs	r3, #32
 800b018:	2200      	movs	r2, #0
 800b01a:	4822      	ldr	r0, [pc, #136]	; (800b0a4 <TM_SPI_Init+0xcc>)
 800b01c:	f000 f858 	bl	800b0d0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI3
	if (SPIx == SPI3) {
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a21      	ldr	r2, [pc, #132]	; (800b0a8 <TM_SPI_Init+0xd0>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d10a      	bne.n	800b03e <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 800b028:	78f9      	ldrb	r1, [r7, #3]
 800b02a:	2300      	movs	r3, #0
 800b02c:	9301      	str	r3, [sp, #4]
 800b02e:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b032:	9300      	str	r3, [sp, #0]
 800b034:	2320      	movs	r3, #32
 800b036:	2200      	movs	r2, #0
 800b038:	481b      	ldr	r0, [pc, #108]	; (800b0a8 <TM_SPI_Init+0xd0>)
 800b03a:	f000 f849 	bl	800b0d0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI4
	if (SPIx == SPI4) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a1a      	ldr	r2, [pc, #104]	; (800b0ac <TM_SPI_Init+0xd4>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d10a      	bne.n	800b05c <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 800b046:	78f9      	ldrb	r1, [r7, #3]
 800b048:	2300      	movs	r3, #0
 800b04a:	9301      	str	r3, [sp, #4]
 800b04c:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b050:	9300      	str	r3, [sp, #0]
 800b052:	2320      	movs	r3, #32
 800b054:	2200      	movs	r2, #0
 800b056:	4815      	ldr	r0, [pc, #84]	; (800b0ac <TM_SPI_Init+0xd4>)
 800b058:	f000 f83a 	bl	800b0d0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI5
	if (SPIx == SPI5) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a14      	ldr	r2, [pc, #80]	; (800b0b0 <TM_SPI_Init+0xd8>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d10a      	bne.n	800b07a <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 800b064:	78f9      	ldrb	r1, [r7, #3]
 800b066:	2300      	movs	r3, #0
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	2320      	movs	r3, #32
 800b072:	2200      	movs	r2, #0
 800b074:	480e      	ldr	r0, [pc, #56]	; (800b0b0 <TM_SPI_Init+0xd8>)
 800b076:	f000 f82b 	bl	800b0d0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI6
	if (SPIx == SPI6) {
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	4a0d      	ldr	r2, [pc, #52]	; (800b0b4 <TM_SPI_Init+0xdc>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d10a      	bne.n	800b098 <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 800b082:	78f9      	ldrb	r1, [r7, #3]
 800b084:	2300      	movs	r3, #0
 800b086:	9301      	str	r3, [sp, #4]
 800b088:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	2320      	movs	r3, #32
 800b090:	2200      	movs	r2, #0
 800b092:	4808      	ldr	r0, [pc, #32]	; (800b0b4 <TM_SPI_Init+0xdc>)
 800b094:	f000 f81c 	bl	800b0d0 <TM_SPIx_Init>
	}
#endif
}
 800b098:	bf00      	nop
 800b09a:	3708      	adds	r7, #8
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd80      	pop	{r7, pc}
 800b0a0:	40013000 	.word	0x40013000
 800b0a4:	40003800 	.word	0x40003800
 800b0a8:	40003c00 	.word	0x40003c00
 800b0ac:	40013400 	.word	0x40013400
 800b0b0:	40015000 	.word	0x40015000
 800b0b4:	40015400 	.word	0x40015400

0800b0b8 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		*dataIn++ = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) { 
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	807b      	strh	r3, [r7, #2]
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_SPI_InitCustomPinsCallback could be implemented in the user file
   */
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b09e      	sub	sp, #120	; 0x78
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	4608      	mov	r0, r1
 800b0da:	4611      	mov	r1, r2
 800b0dc:	461a      	mov	r2, r3
 800b0de:	4603      	mov	r3, r0
 800b0e0:	70fb      	strb	r3, [r7, #3]
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	70bb      	strb	r3, [r7, #2]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	803b      	strh	r3, [r7, #0]
	SPI_HandleTypeDef SPIHandle;
	
	/* Save instance */
	SPIHandle.Instance = SPIx;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	623b      	str	r3, [r7, #32]
	
#ifdef SPI1	
	if (SPIx == SPI1) {
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a6a      	ldr	r2, [pc, #424]	; (800b29c <TM_SPIx_Init+0x1cc>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d113      	bne.n	800b11e <TM_SPIx_Init+0x4e>
		/* Enable SPI clock */
		__HAL_RCC_SPI1_CLK_ENABLE();
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	61fb      	str	r3, [r7, #28]
 800b0fa:	4b69      	ldr	r3, [pc, #420]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0fe:	4a68      	ldr	r2, [pc, #416]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b100:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b104:	6453      	str	r3, [r2, #68]	; 0x44
 800b106:	4b66      	ldr	r3, [pc, #408]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b10e:	61fb      	str	r3, [r7, #28]
 800b110:	69fb      	ldr	r3, [r7, #28]
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 800b112:	78fb      	ldrb	r3, [r7, #3]
 800b114:	4618      	mov	r0, r3
 800b116:	f000 f8cf 	bl	800b2b8 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI1_DATASIZE;
 800b11a:	2300      	movs	r3, #0
 800b11c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI2
	if (SPIx == SPI2) {
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4a60      	ldr	r2, [pc, #384]	; (800b2a4 <TM_SPIx_Init+0x1d4>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d113      	bne.n	800b14e <TM_SPIx_Init+0x7e>
		/* Enable SPI clock */
		__HAL_RCC_SPI2_CLK_ENABLE();
 800b126:	2300      	movs	r3, #0
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	4b5d      	ldr	r3, [pc, #372]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	4a5c      	ldr	r2, [pc, #368]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b134:	6413      	str	r3, [r2, #64]	; 0x40
 800b136:	4b5a      	ldr	r3, [pc, #360]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b13a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b13e:	61bb      	str	r3, [r7, #24]
 800b140:	69bb      	ldr	r3, [r7, #24]
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 800b142:	78fb      	ldrb	r3, [r7, #3]
 800b144:	4618      	mov	r0, r3
 800b146:	f000 f8e7 	bl	800b318 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI2_DATASIZE;
 800b14a:	2300      	movs	r3, #0
 800b14c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI3
	if (SPIx == SPI3) {
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a55      	ldr	r2, [pc, #340]	; (800b2a8 <TM_SPIx_Init+0x1d8>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d113      	bne.n	800b17e <TM_SPIx_Init+0xae>
		/* Enable SPI clock */
		__HAL_RCC_SPI3_CLK_ENABLE();
 800b156:	2300      	movs	r3, #0
 800b158:	617b      	str	r3, [r7, #20]
 800b15a:	4b51      	ldr	r3, [pc, #324]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15e:	4a50      	ldr	r2, [pc, #320]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b164:	6413      	str	r3, [r2, #64]	; 0x40
 800b166:	4b4e      	ldr	r3, [pc, #312]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b16e:	617b      	str	r3, [r7, #20]
 800b170:	697b      	ldr	r3, [r7, #20]
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 800b172:	78fb      	ldrb	r3, [r7, #3]
 800b174:	4618      	mov	r0, r3
 800b176:	f000 f933 	bl	800b3e0 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI3_DATASIZE;
 800b17a:	2300      	movs	r3, #0
 800b17c:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	}
#endif
#ifdef SPI4
	if (SPIx == SPI4) {
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4a4a      	ldr	r2, [pc, #296]	; (800b2ac <TM_SPIx_Init+0x1dc>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d113      	bne.n	800b1ae <TM_SPIx_Init+0xde>
		/* Enable SPI clock */
		__HAL_RCC_SPI4_CLK_ENABLE();
 800b186:	2300      	movs	r3, #0
 800b188:	613b      	str	r3, [r7, #16]
 800b18a:	4b45      	ldr	r3, [pc, #276]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18e:	4a44      	ldr	r2, [pc, #272]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b190:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b194:	6453      	str	r3, [r2, #68]	; 0x44
 800b196:	4b42      	ldr	r3, [pc, #264]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b19a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b19e:	613b      	str	r3, [r7, #16]
 800b1a0:	693b      	ldr	r3, [r7, #16]
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 800b1a2:	78fb      	ldrb	r3, [r7, #3]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f000 f94d 	bl	800b444 <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI4_DATASIZE;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI5
	if (SPIx == SPI5) {
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a3f      	ldr	r2, [pc, #252]	; (800b2b0 <TM_SPIx_Init+0x1e0>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d113      	bne.n	800b1de <TM_SPIx_Init+0x10e>
		/* Enable SPI clock */
		__HAL_RCC_SPI5_CLK_ENABLE();
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	4b39      	ldr	r3, [pc, #228]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b1bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1be:	4a38      	ldr	r2, [pc, #224]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b1c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1c4:	6453      	str	r3, [r2, #68]	; 0x44
 800b1c6:	4b36      	ldr	r3, [pc, #216]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1ce:	60fb      	str	r3, [r7, #12]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 800b1d2:	78fb      	ldrb	r3, [r7, #3]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 f965 	bl	800b4a4 <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI5_DATASIZE;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI6
	if (SPIx == SPI6) {
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a34      	ldr	r2, [pc, #208]	; (800b2b4 <TM_SPIx_Init+0x1e4>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d113      	bne.n	800b20e <TM_SPIx_Init+0x13e>
		/* Enable SPI clock */
		__HAL_RCC_SPI6_CLK_ENABLE();
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	60bb      	str	r3, [r7, #8]
 800b1ea:	4b2d      	ldr	r3, [pc, #180]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ee:	4a2c      	ldr	r2, [pc, #176]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b1f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1f4:	6453      	str	r3, [r2, #68]	; 0x44
 800b1f6:	4b2a      	ldr	r3, [pc, #168]	; (800b2a0 <TM_SPIx_Init+0x1d0>)
 800b1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1fe:	60bb      	str	r3, [r7, #8]
 800b200:	68bb      	ldr	r3, [r7, #8]
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 800b202:	78fb      	ldrb	r3, [r7, #3]
 800b204:	4618      	mov	r0, r3
 800b206:	f000 f989 	bl	800b51c <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI6_DATASIZE;
 800b20a:	2300      	movs	r3, #0
 800b20c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif

	/* Fill SPI settings */
	SPIHandle.Init.BaudRatePrescaler = SPI_BaudRatePrescaler;
 800b20e:	883b      	ldrh	r3, [r7, #0]
 800b210:	63fb      	str	r3, [r7, #60]	; 0x3c
	SPIHandle.Init.FirstBit = SPI_FirstBit;
 800b212:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800b216:	643b      	str	r3, [r7, #64]	; 0x40
	SPIHandle.Init.Mode = SPI_MasterSlave;
 800b218:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 800b21c:	627b      	str	r3, [r7, #36]	; 0x24
	
	SPIHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b21e:	2300      	movs	r3, #0
 800b220:	64bb      	str	r3, [r7, #72]	; 0x48
	SPIHandle.Init.CRCPolynomial = 7;
 800b222:	2307      	movs	r3, #7
 800b224:	64fb      	str	r3, [r7, #76]	; 0x4c
	SPIHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 800b226:	2300      	movs	r3, #0
 800b228:	647b      	str	r3, [r7, #68]	; 0x44
	SPIHandle.Init.NSS = SPI_NSS_SOFT;
 800b22a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b22e:	63bb      	str	r3, [r7, #56]	; 0x38
	SPIHandle.Init.Direction = SPI_DIRECTION_2LINES;
 800b230:	2300      	movs	r3, #0
 800b232:	62bb      	str	r3, [r7, #40]	; 0x28
    SPIHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SPIHandle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
#endif
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 800b234:	78bb      	ldrb	r3, [r7, #2]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d104      	bne.n	800b244 <TM_SPIx_Init+0x174>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b23a:	2300      	movs	r3, #0
 800b23c:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b23e:	2300      	movs	r3, #0
 800b240:	637b      	str	r3, [r7, #52]	; 0x34
 800b242:	e016      	b.n	800b272 <TM_SPIx_Init+0x1a2>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 800b244:	78bb      	ldrb	r3, [r7, #2]
 800b246:	2b01      	cmp	r3, #1
 800b248:	d104      	bne.n	800b254 <TM_SPIx_Init+0x184>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b24a:	2300      	movs	r3, #0
 800b24c:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_2EDGE;
 800b24e:	2301      	movs	r3, #1
 800b250:	637b      	str	r3, [r7, #52]	; 0x34
 800b252:	e00e      	b.n	800b272 <TM_SPIx_Init+0x1a2>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 800b254:	78bb      	ldrb	r3, [r7, #2]
 800b256:	2b02      	cmp	r3, #2
 800b258:	d104      	bne.n	800b264 <TM_SPIx_Init+0x194>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800b25a:	2302      	movs	r3, #2
 800b25c:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b25e:	2300      	movs	r3, #0
 800b260:	637b      	str	r3, [r7, #52]	; 0x34
 800b262:	e006      	b.n	800b272 <TM_SPIx_Init+0x1a2>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 800b264:	78bb      	ldrb	r3, [r7, #2]
 800b266:	2b03      	cmp	r3, #3
 800b268:	d103      	bne.n	800b272 <TM_SPIx_Init+0x1a2>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800b26a:	2302      	movs	r3, #2
 800b26c:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_2EDGE;
 800b26e:	2301      	movs	r3, #1
 800b270:	637b      	str	r3, [r7, #52]	; 0x34
	}
	
	/* Disable first */
	__HAL_SPI_DISABLE(&SPIHandle);
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b27c:	601a      	str	r2, [r3, #0]
	
	/* Init SPI */
	HAL_SPI_Init(&SPIHandle);
 800b27e:	f107 0320 	add.w	r3, r7, #32
 800b282:	4618      	mov	r0, r3
 800b284:	f7fc ff3f 	bl	8008106 <HAL_SPI_Init>
	
	/* Enable SPI */
	__HAL_SPI_ENABLE(&SPIHandle);
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b292:	601a      	str	r2, [r3, #0]
}
 800b294:	bf00      	nop
 800b296:	3778      	adds	r7, #120	; 0x78
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	40013000 	.word	0x40013000
 800b2a0:	40023800 	.word	0x40023800
 800b2a4:	40003800 	.word	0x40003800
 800b2a8:	40003c00 	.word	0x40003c00
 800b2ac:	40013400 	.word	0x40013400
 800b2b0:	40015000 	.word	0x40015000
 800b2b4:	40015400 	.word	0x40015400

0800b2b8 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af02      	add	r7, sp, #8
 800b2be:	4603      	mov	r3, r0
 800b2c0:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 800b2c2:	79fb      	ldrb	r3, [r7, #7]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d109      	bne.n	800b2dc <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI1);
 800b2c8:	2305      	movs	r3, #5
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	21e0      	movs	r1, #224	; 0xe0
 800b2d6:	480d      	ldr	r0, [pc, #52]	; (800b30c <TM_SPI1_INT_InitPins+0x54>)
 800b2d8:	f7fe fea7 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 800b2dc:	79fb      	ldrb	r3, [r7, #7]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d109      	bne.n	800b2f6 <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI1);
 800b2e2:	2305      	movs	r3, #5
 800b2e4:	9301      	str	r3, [sp, #4]
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	2138      	movs	r1, #56	; 0x38
 800b2f0:	4807      	ldr	r0, [pc, #28]	; (800b310 <TM_SPI1_INT_InitPins+0x58>)
 800b2f2:	f7fe fe9a 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800b2f6:	79fb      	ldrb	r3, [r7, #7]
 800b2f8:	2b04      	cmp	r3, #4
 800b2fa:	d103      	bne.n	800b304 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AFx_SPI1);
 800b2fc:	2105      	movs	r1, #5
 800b2fe:	4805      	ldr	r0, [pc, #20]	; (800b314 <TM_SPI1_INT_InitPins+0x5c>)
 800b300:	f7ff feda 	bl	800b0b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 800b304:	bf00      	nop
 800b306:	3708      	adds	r7, #8
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	40020000 	.word	0x40020000
 800b310:	40020400 	.word	0x40020400
 800b314:	40013000 	.word	0x40013000

0800b318 <TM_SPI2_INT_InitPins>:
#endif

#ifdef SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af02      	add	r7, sp, #8
 800b31e:	4603      	mov	r3, r0
 800b320:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 800b322:	79fb      	ldrb	r3, [r7, #7]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d114      	bne.n	800b352 <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800b328:	2305      	movs	r3, #5
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	2303      	movs	r3, #3
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	2300      	movs	r3, #0
 800b332:	2200      	movs	r2, #0
 800b334:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b338:	4825      	ldr	r0, [pc, #148]	; (800b3d0 <TM_SPI2_INT_InitPins+0xb8>)
 800b33a:	f7fe fe76 	bl	800a02a <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800b33e:	2305      	movs	r3, #5
 800b340:	9301      	str	r3, [sp, #4]
 800b342:	2303      	movs	r3, #3
 800b344:	9300      	str	r3, [sp, #0]
 800b346:	2300      	movs	r3, #0
 800b348:	2200      	movs	r2, #0
 800b34a:	210c      	movs	r1, #12
 800b34c:	4821      	ldr	r0, [pc, #132]	; (800b3d4 <TM_SPI2_INT_InitPins+0xbc>)
 800b34e:	f7fe fe6c 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 800b352:	79fb      	ldrb	r3, [r7, #7]
 800b354:	2b01      	cmp	r3, #1
 800b356:	d10a      	bne.n	800b36e <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800b358:	2305      	movs	r3, #5
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	2303      	movs	r3, #3
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	2300      	movs	r3, #0
 800b362:	2200      	movs	r2, #0
 800b364:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800b368:	4819      	ldr	r0, [pc, #100]	; (800b3d0 <TM_SPI2_INT_InitPins+0xb8>)
 800b36a:	f7fe fe5e 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 800b36e:	79fb      	ldrb	r3, [r7, #7]
 800b370:	2b02      	cmp	r3, #2
 800b372:	d109      	bne.n	800b388 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800b374:	2305      	movs	r3, #5
 800b376:	9301      	str	r3, [sp, #4]
 800b378:	2303      	movs	r3, #3
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	2300      	movs	r3, #0
 800b37e:	2200      	movs	r2, #0
 800b380:	210d      	movs	r1, #13
 800b382:	4815      	ldr	r0, [pc, #84]	; (800b3d8 <TM_SPI2_INT_InitPins+0xc0>)
 800b384:	f7fe fe51 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB) && defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_4) {
 800b388:	79fb      	ldrb	r3, [r7, #7]
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	d114      	bne.n	800b3b8 <TM_SPI2_INT_InitPins+0xa0>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800b38e:	2305      	movs	r3, #5
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	2303      	movs	r3, #3
 800b394:	9300      	str	r3, [sp, #0]
 800b396:	2300      	movs	r3, #0
 800b398:	2200      	movs	r2, #0
 800b39a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800b39e:	480c      	ldr	r0, [pc, #48]	; (800b3d0 <TM_SPI2_INT_InitPins+0xb8>)
 800b3a0:	f7fe fe43 	bl	800a02a <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800b3a4:	2305      	movs	r3, #5
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	2102      	movs	r1, #2
 800b3b2:	4809      	ldr	r0, [pc, #36]	; (800b3d8 <TM_SPI2_INT_InitPins+0xc0>)
 800b3b4:	f7fe fe39 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800b3b8:	79fb      	ldrb	r3, [r7, #7]
 800b3ba:	2b04      	cmp	r3, #4
 800b3bc:	d103      	bne.n	800b3c6 <TM_SPI2_INT_InitPins+0xae>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AFx_SPI2);
 800b3be:	2105      	movs	r1, #5
 800b3c0:	4806      	ldr	r0, [pc, #24]	; (800b3dc <TM_SPI2_INT_InitPins+0xc4>)
 800b3c2:	f7ff fe79 	bl	800b0b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 800b3c6:	bf00      	nop
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	40020400 	.word	0x40020400
 800b3d4:	40020800 	.word	0x40020800
 800b3d8:	40022000 	.word	0x40022000
 800b3dc:	40003800 	.word	0x40003800

0800b3e0 <TM_SPI3_INT_InitPins>:
#endif

#ifdef SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af02      	add	r7, sp, #8
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 800b3ea:	79fb      	ldrb	r3, [r7, #7]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d109      	bne.n	800b404 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI3);
 800b3f0:	2306      	movs	r3, #6
 800b3f2:	9301      	str	r3, [sp, #4]
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	2138      	movs	r1, #56	; 0x38
 800b3fe:	480e      	ldr	r0, [pc, #56]	; (800b438 <TM_SPI3_INT_InitPins+0x58>)
 800b400:	f7fe fe13 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 800b404:	79fb      	ldrb	r3, [r7, #7]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d10a      	bne.n	800b420 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI3);
 800b40a:	2306      	movs	r3, #6
 800b40c:	9301      	str	r3, [sp, #4]
 800b40e:	2303      	movs	r3, #3
 800b410:	9300      	str	r3, [sp, #0]
 800b412:	2300      	movs	r3, #0
 800b414:	2200      	movs	r2, #0
 800b416:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800b41a:	4808      	ldr	r0, [pc, #32]	; (800b43c <TM_SPI3_INT_InitPins+0x5c>)
 800b41c:	f7fe fe05 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800b420:	79fb      	ldrb	r3, [r7, #7]
 800b422:	2b04      	cmp	r3, #4
 800b424:	d103      	bne.n	800b42e <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AFx_SPI3);
 800b426:	2106      	movs	r1, #6
 800b428:	4805      	ldr	r0, [pc, #20]	; (800b440 <TM_SPI3_INT_InitPins+0x60>)
 800b42a:	f7ff fe45 	bl	800b0b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 800b42e:	bf00      	nop
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	40020400 	.word	0x40020400
 800b43c:	40020800 	.word	0x40020800
 800b440:	40003c00 	.word	0x40003c00

0800b444 <TM_SPI4_INT_InitPins>:
#endif

#ifdef SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af02      	add	r7, sp, #8
 800b44a:	4603      	mov	r3, r0
 800b44c:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 800b44e:	79fb      	ldrb	r3, [r7, #7]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d109      	bne.n	800b468 <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI4);
 800b454:	2305      	movs	r3, #5
 800b456:	9301      	str	r3, [sp, #4]
 800b458:	2303      	movs	r3, #3
 800b45a:	9300      	str	r3, [sp, #0]
 800b45c:	2300      	movs	r3, #0
 800b45e:	2200      	movs	r2, #0
 800b460:	2164      	movs	r1, #100	; 0x64
 800b462:	480e      	ldr	r0, [pc, #56]	; (800b49c <TM_SPI4_INT_InitPins+0x58>)
 800b464:	f7fe fde1 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 800b468:	79fb      	ldrb	r3, [r7, #7]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d10a      	bne.n	800b484 <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI4);
 800b46e:	2305      	movs	r3, #5
 800b470:	9301      	str	r3, [sp, #4]
 800b472:	2303      	movs	r3, #3
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	2300      	movs	r3, #0
 800b478:	2200      	movs	r2, #0
 800b47a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800b47e:	4807      	ldr	r0, [pc, #28]	; (800b49c <TM_SPI4_INT_InitPins+0x58>)
 800b480:	f7fe fdd3 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800b484:	79fb      	ldrb	r3, [r7, #7]
 800b486:	2b04      	cmp	r3, #4
 800b488:	d103      	bne.n	800b492 <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AFx_SPI4);
 800b48a:	2105      	movs	r1, #5
 800b48c:	4804      	ldr	r0, [pc, #16]	; (800b4a0 <TM_SPI4_INT_InitPins+0x5c>)
 800b48e:	f7ff fe13 	bl	800b0b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 800b492:	bf00      	nop
 800b494:	3708      	adds	r7, #8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	40021000 	.word	0x40021000
 800b4a0:	40013400 	.word	0x40013400

0800b4a4 <TM_SPI5_INT_InitPins>:
#endif

#ifdef SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af02      	add	r7, sp, #8
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 800b4ae:	79fb      	ldrb	r3, [r7, #7]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d10a      	bne.n	800b4ca <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI5);
 800b4b4:	2305      	movs	r3, #5
 800b4b6:	9301      	str	r3, [sp, #4]
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	2300      	movs	r3, #0
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f44f 7160 	mov.w	r1, #896	; 0x380
 800b4c4:	4812      	ldr	r0, [pc, #72]	; (800b510 <TM_SPI5_INT_InitPins+0x6c>)
 800b4c6:	f7fe fdb0 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 800b4ca:	79fb      	ldrb	r3, [r7, #7]
 800b4cc:	2b01      	cmp	r3, #1
 800b4ce:	d114      	bne.n	800b4fa <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI5);
 800b4d0:	2305      	movs	r3, #5
 800b4d2:	9301      	str	r3, [sp, #4]
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b4e0:	480b      	ldr	r0, [pc, #44]	; (800b510 <TM_SPI5_INT_InitPins+0x6c>)
 800b4e2:	f7fe fda2 	bl	800a02a <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI5);
 800b4e6:	2305      	movs	r3, #5
 800b4e8:	9301      	str	r3, [sp, #4]
 800b4ea:	2303      	movs	r3, #3
 800b4ec:	9300      	str	r3, [sp, #0]
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	21c0      	movs	r1, #192	; 0xc0
 800b4f4:	4807      	ldr	r0, [pc, #28]	; (800b514 <TM_SPI5_INT_InitPins+0x70>)
 800b4f6:	f7fe fd98 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800b4fa:	79fb      	ldrb	r3, [r7, #7]
 800b4fc:	2b04      	cmp	r3, #4
 800b4fe:	d103      	bne.n	800b508 <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AFx_SPI5);
 800b500:	2105      	movs	r1, #5
 800b502:	4805      	ldr	r0, [pc, #20]	; (800b518 <TM_SPI5_INT_InitPins+0x74>)
 800b504:	f7ff fdd8 	bl	800b0b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 800b508:	bf00      	nop
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	40021400 	.word	0x40021400
 800b514:	40021c00 	.word	0x40021c00
 800b518:	40015000 	.word	0x40015000

0800b51c <TM_SPI6_INT_InitPins>:
#endif

#ifdef SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af02      	add	r7, sp, #8
 800b522:	4603      	mov	r3, r0
 800b524:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 800b526:	79fb      	ldrb	r3, [r7, #7]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10a      	bne.n	800b542 <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI6);
 800b52c:	2305      	movs	r3, #5
 800b52e:	9301      	str	r3, [sp, #4]
 800b530:	2303      	movs	r3, #3
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	2300      	movs	r3, #0
 800b536:	2200      	movs	r2, #0
 800b538:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800b53c:	4806      	ldr	r0, [pc, #24]	; (800b558 <TM_SPI6_INT_InitPins+0x3c>)
 800b53e:	f7fe fd74 	bl	800a02a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800b542:	79fb      	ldrb	r3, [r7, #7]
 800b544:	2b04      	cmp	r3, #4
 800b546:	d103      	bne.n	800b550 <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AFx_SPI6);
 800b548:	2105      	movs	r1, #5
 800b54a:	4804      	ldr	r0, [pc, #16]	; (800b55c <TM_SPI6_INT_InitPins+0x40>)
 800b54c:	f7ff fdb4 	bl	800b0b8 <TM_SPI_InitCustomPinsCallback>
	}
}
 800b550:	bf00      	nop
 800b552:	3708      	adds	r7, #8
 800b554:	46bd      	mov	sp, r7
 800b556:	bd80      	pop	{r7, pc}
 800b558:	40021800 	.word	0x40021800
 800b55c:	40015400 	.word	0x40015400

0800b560 <__errno>:
 800b560:	4b01      	ldr	r3, [pc, #4]	; (800b568 <__errno+0x8>)
 800b562:	6818      	ldr	r0, [r3, #0]
 800b564:	4770      	bx	lr
 800b566:	bf00      	nop
 800b568:	20000988 	.word	0x20000988

0800b56c <__libc_init_array>:
 800b56c:	b570      	push	{r4, r5, r6, lr}
 800b56e:	4e0d      	ldr	r6, [pc, #52]	; (800b5a4 <__libc_init_array+0x38>)
 800b570:	4c0d      	ldr	r4, [pc, #52]	; (800b5a8 <__libc_init_array+0x3c>)
 800b572:	1ba4      	subs	r4, r4, r6
 800b574:	10a4      	asrs	r4, r4, #2
 800b576:	2500      	movs	r5, #0
 800b578:	42a5      	cmp	r5, r4
 800b57a:	d109      	bne.n	800b590 <__libc_init_array+0x24>
 800b57c:	4e0b      	ldr	r6, [pc, #44]	; (800b5ac <__libc_init_array+0x40>)
 800b57e:	4c0c      	ldr	r4, [pc, #48]	; (800b5b0 <__libc_init_array+0x44>)
 800b580:	f005 f966 	bl	8010850 <_init>
 800b584:	1ba4      	subs	r4, r4, r6
 800b586:	10a4      	asrs	r4, r4, #2
 800b588:	2500      	movs	r5, #0
 800b58a:	42a5      	cmp	r5, r4
 800b58c:	d105      	bne.n	800b59a <__libc_init_array+0x2e>
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b594:	4798      	blx	r3
 800b596:	3501      	adds	r5, #1
 800b598:	e7ee      	b.n	800b578 <__libc_init_array+0xc>
 800b59a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b59e:	4798      	blx	r3
 800b5a0:	3501      	adds	r5, #1
 800b5a2:	e7f2      	b.n	800b58a <__libc_init_array+0x1e>
 800b5a4:	08012358 	.word	0x08012358
 800b5a8:	08012358 	.word	0x08012358
 800b5ac:	08012358 	.word	0x08012358
 800b5b0:	0801235c 	.word	0x0801235c

0800b5b4 <malloc>:
 800b5b4:	4b02      	ldr	r3, [pc, #8]	; (800b5c0 <malloc+0xc>)
 800b5b6:	4601      	mov	r1, r0
 800b5b8:	6818      	ldr	r0, [r3, #0]
 800b5ba:	f000 b885 	b.w	800b6c8 <_malloc_r>
 800b5be:	bf00      	nop
 800b5c0:	20000988 	.word	0x20000988

0800b5c4 <free>:
 800b5c4:	4b02      	ldr	r3, [pc, #8]	; (800b5d0 <free+0xc>)
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	f000 b82f 	b.w	800b62c <_free_r>
 800b5ce:	bf00      	nop
 800b5d0:	20000988 	.word	0x20000988

0800b5d4 <memcpy>:
 800b5d4:	b510      	push	{r4, lr}
 800b5d6:	1e43      	subs	r3, r0, #1
 800b5d8:	440a      	add	r2, r1
 800b5da:	4291      	cmp	r1, r2
 800b5dc:	d100      	bne.n	800b5e0 <memcpy+0xc>
 800b5de:	bd10      	pop	{r4, pc}
 800b5e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5e8:	e7f7      	b.n	800b5da <memcpy+0x6>

0800b5ea <memmove>:
 800b5ea:	4288      	cmp	r0, r1
 800b5ec:	b510      	push	{r4, lr}
 800b5ee:	eb01 0302 	add.w	r3, r1, r2
 800b5f2:	d807      	bhi.n	800b604 <memmove+0x1a>
 800b5f4:	1e42      	subs	r2, r0, #1
 800b5f6:	4299      	cmp	r1, r3
 800b5f8:	d00a      	beq.n	800b610 <memmove+0x26>
 800b5fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b602:	e7f8      	b.n	800b5f6 <memmove+0xc>
 800b604:	4283      	cmp	r3, r0
 800b606:	d9f5      	bls.n	800b5f4 <memmove+0xa>
 800b608:	1881      	adds	r1, r0, r2
 800b60a:	1ad2      	subs	r2, r2, r3
 800b60c:	42d3      	cmn	r3, r2
 800b60e:	d100      	bne.n	800b612 <memmove+0x28>
 800b610:	bd10      	pop	{r4, pc}
 800b612:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b616:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b61a:	e7f7      	b.n	800b60c <memmove+0x22>

0800b61c <memset>:
 800b61c:	4402      	add	r2, r0
 800b61e:	4603      	mov	r3, r0
 800b620:	4293      	cmp	r3, r2
 800b622:	d100      	bne.n	800b626 <memset+0xa>
 800b624:	4770      	bx	lr
 800b626:	f803 1b01 	strb.w	r1, [r3], #1
 800b62a:	e7f9      	b.n	800b620 <memset+0x4>

0800b62c <_free_r>:
 800b62c:	b538      	push	{r3, r4, r5, lr}
 800b62e:	4605      	mov	r5, r0
 800b630:	2900      	cmp	r1, #0
 800b632:	d045      	beq.n	800b6c0 <_free_r+0x94>
 800b634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b638:	1f0c      	subs	r4, r1, #4
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	bfb8      	it	lt
 800b63e:	18e4      	addlt	r4, r4, r3
 800b640:	f002 ff9a 	bl	800e578 <__malloc_lock>
 800b644:	4a1f      	ldr	r2, [pc, #124]	; (800b6c4 <_free_r+0x98>)
 800b646:	6813      	ldr	r3, [r2, #0]
 800b648:	4610      	mov	r0, r2
 800b64a:	b933      	cbnz	r3, 800b65a <_free_r+0x2e>
 800b64c:	6063      	str	r3, [r4, #4]
 800b64e:	6014      	str	r4, [r2, #0]
 800b650:	4628      	mov	r0, r5
 800b652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b656:	f002 bf90 	b.w	800e57a <__malloc_unlock>
 800b65a:	42a3      	cmp	r3, r4
 800b65c:	d90c      	bls.n	800b678 <_free_r+0x4c>
 800b65e:	6821      	ldr	r1, [r4, #0]
 800b660:	1862      	adds	r2, r4, r1
 800b662:	4293      	cmp	r3, r2
 800b664:	bf04      	itt	eq
 800b666:	681a      	ldreq	r2, [r3, #0]
 800b668:	685b      	ldreq	r3, [r3, #4]
 800b66a:	6063      	str	r3, [r4, #4]
 800b66c:	bf04      	itt	eq
 800b66e:	1852      	addeq	r2, r2, r1
 800b670:	6022      	streq	r2, [r4, #0]
 800b672:	6004      	str	r4, [r0, #0]
 800b674:	e7ec      	b.n	800b650 <_free_r+0x24>
 800b676:	4613      	mov	r3, r2
 800b678:	685a      	ldr	r2, [r3, #4]
 800b67a:	b10a      	cbz	r2, 800b680 <_free_r+0x54>
 800b67c:	42a2      	cmp	r2, r4
 800b67e:	d9fa      	bls.n	800b676 <_free_r+0x4a>
 800b680:	6819      	ldr	r1, [r3, #0]
 800b682:	1858      	adds	r0, r3, r1
 800b684:	42a0      	cmp	r0, r4
 800b686:	d10b      	bne.n	800b6a0 <_free_r+0x74>
 800b688:	6820      	ldr	r0, [r4, #0]
 800b68a:	4401      	add	r1, r0
 800b68c:	1858      	adds	r0, r3, r1
 800b68e:	4282      	cmp	r2, r0
 800b690:	6019      	str	r1, [r3, #0]
 800b692:	d1dd      	bne.n	800b650 <_free_r+0x24>
 800b694:	6810      	ldr	r0, [r2, #0]
 800b696:	6852      	ldr	r2, [r2, #4]
 800b698:	605a      	str	r2, [r3, #4]
 800b69a:	4401      	add	r1, r0
 800b69c:	6019      	str	r1, [r3, #0]
 800b69e:	e7d7      	b.n	800b650 <_free_r+0x24>
 800b6a0:	d902      	bls.n	800b6a8 <_free_r+0x7c>
 800b6a2:	230c      	movs	r3, #12
 800b6a4:	602b      	str	r3, [r5, #0]
 800b6a6:	e7d3      	b.n	800b650 <_free_r+0x24>
 800b6a8:	6820      	ldr	r0, [r4, #0]
 800b6aa:	1821      	adds	r1, r4, r0
 800b6ac:	428a      	cmp	r2, r1
 800b6ae:	bf04      	itt	eq
 800b6b0:	6811      	ldreq	r1, [r2, #0]
 800b6b2:	6852      	ldreq	r2, [r2, #4]
 800b6b4:	6062      	str	r2, [r4, #4]
 800b6b6:	bf04      	itt	eq
 800b6b8:	1809      	addeq	r1, r1, r0
 800b6ba:	6021      	streq	r1, [r4, #0]
 800b6bc:	605c      	str	r4, [r3, #4]
 800b6be:	e7c7      	b.n	800b650 <_free_r+0x24>
 800b6c0:	bd38      	pop	{r3, r4, r5, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20000ce0 	.word	0x20000ce0

0800b6c8 <_malloc_r>:
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	1ccd      	adds	r5, r1, #3
 800b6cc:	f025 0503 	bic.w	r5, r5, #3
 800b6d0:	3508      	adds	r5, #8
 800b6d2:	2d0c      	cmp	r5, #12
 800b6d4:	bf38      	it	cc
 800b6d6:	250c      	movcc	r5, #12
 800b6d8:	2d00      	cmp	r5, #0
 800b6da:	4606      	mov	r6, r0
 800b6dc:	db01      	blt.n	800b6e2 <_malloc_r+0x1a>
 800b6de:	42a9      	cmp	r1, r5
 800b6e0:	d903      	bls.n	800b6ea <_malloc_r+0x22>
 800b6e2:	230c      	movs	r3, #12
 800b6e4:	6033      	str	r3, [r6, #0]
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	bd70      	pop	{r4, r5, r6, pc}
 800b6ea:	f002 ff45 	bl	800e578 <__malloc_lock>
 800b6ee:	4a21      	ldr	r2, [pc, #132]	; (800b774 <_malloc_r+0xac>)
 800b6f0:	6814      	ldr	r4, [r2, #0]
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	b991      	cbnz	r1, 800b71c <_malloc_r+0x54>
 800b6f6:	4c20      	ldr	r4, [pc, #128]	; (800b778 <_malloc_r+0xb0>)
 800b6f8:	6823      	ldr	r3, [r4, #0]
 800b6fa:	b91b      	cbnz	r3, 800b704 <_malloc_r+0x3c>
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f000 fe7b 	bl	800c3f8 <_sbrk_r>
 800b702:	6020      	str	r0, [r4, #0]
 800b704:	4629      	mov	r1, r5
 800b706:	4630      	mov	r0, r6
 800b708:	f000 fe76 	bl	800c3f8 <_sbrk_r>
 800b70c:	1c43      	adds	r3, r0, #1
 800b70e:	d124      	bne.n	800b75a <_malloc_r+0x92>
 800b710:	230c      	movs	r3, #12
 800b712:	6033      	str	r3, [r6, #0]
 800b714:	4630      	mov	r0, r6
 800b716:	f002 ff30 	bl	800e57a <__malloc_unlock>
 800b71a:	e7e4      	b.n	800b6e6 <_malloc_r+0x1e>
 800b71c:	680b      	ldr	r3, [r1, #0]
 800b71e:	1b5b      	subs	r3, r3, r5
 800b720:	d418      	bmi.n	800b754 <_malloc_r+0x8c>
 800b722:	2b0b      	cmp	r3, #11
 800b724:	d90f      	bls.n	800b746 <_malloc_r+0x7e>
 800b726:	600b      	str	r3, [r1, #0]
 800b728:	50cd      	str	r5, [r1, r3]
 800b72a:	18cc      	adds	r4, r1, r3
 800b72c:	4630      	mov	r0, r6
 800b72e:	f002 ff24 	bl	800e57a <__malloc_unlock>
 800b732:	f104 000b 	add.w	r0, r4, #11
 800b736:	1d23      	adds	r3, r4, #4
 800b738:	f020 0007 	bic.w	r0, r0, #7
 800b73c:	1ac3      	subs	r3, r0, r3
 800b73e:	d0d3      	beq.n	800b6e8 <_malloc_r+0x20>
 800b740:	425a      	negs	r2, r3
 800b742:	50e2      	str	r2, [r4, r3]
 800b744:	e7d0      	b.n	800b6e8 <_malloc_r+0x20>
 800b746:	428c      	cmp	r4, r1
 800b748:	684b      	ldr	r3, [r1, #4]
 800b74a:	bf16      	itet	ne
 800b74c:	6063      	strne	r3, [r4, #4]
 800b74e:	6013      	streq	r3, [r2, #0]
 800b750:	460c      	movne	r4, r1
 800b752:	e7eb      	b.n	800b72c <_malloc_r+0x64>
 800b754:	460c      	mov	r4, r1
 800b756:	6849      	ldr	r1, [r1, #4]
 800b758:	e7cc      	b.n	800b6f4 <_malloc_r+0x2c>
 800b75a:	1cc4      	adds	r4, r0, #3
 800b75c:	f024 0403 	bic.w	r4, r4, #3
 800b760:	42a0      	cmp	r0, r4
 800b762:	d005      	beq.n	800b770 <_malloc_r+0xa8>
 800b764:	1a21      	subs	r1, r4, r0
 800b766:	4630      	mov	r0, r6
 800b768:	f000 fe46 	bl	800c3f8 <_sbrk_r>
 800b76c:	3001      	adds	r0, #1
 800b76e:	d0cf      	beq.n	800b710 <_malloc_r+0x48>
 800b770:	6025      	str	r5, [r4, #0]
 800b772:	e7db      	b.n	800b72c <_malloc_r+0x64>
 800b774:	20000ce0 	.word	0x20000ce0
 800b778:	20000ce4 	.word	0x20000ce4

0800b77c <__cvt>:
 800b77c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	ec55 4b10 	vmov	r4, r5, d0
 800b784:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b786:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b78a:	2d00      	cmp	r5, #0
 800b78c:	460e      	mov	r6, r1
 800b78e:	4691      	mov	r9, r2
 800b790:	4619      	mov	r1, r3
 800b792:	bfb8      	it	lt
 800b794:	4622      	movlt	r2, r4
 800b796:	462b      	mov	r3, r5
 800b798:	f027 0720 	bic.w	r7, r7, #32
 800b79c:	bfbb      	ittet	lt
 800b79e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b7a2:	461d      	movlt	r5, r3
 800b7a4:	2300      	movge	r3, #0
 800b7a6:	232d      	movlt	r3, #45	; 0x2d
 800b7a8:	bfb8      	it	lt
 800b7aa:	4614      	movlt	r4, r2
 800b7ac:	2f46      	cmp	r7, #70	; 0x46
 800b7ae:	700b      	strb	r3, [r1, #0]
 800b7b0:	d004      	beq.n	800b7bc <__cvt+0x40>
 800b7b2:	2f45      	cmp	r7, #69	; 0x45
 800b7b4:	d100      	bne.n	800b7b8 <__cvt+0x3c>
 800b7b6:	3601      	adds	r6, #1
 800b7b8:	2102      	movs	r1, #2
 800b7ba:	e000      	b.n	800b7be <__cvt+0x42>
 800b7bc:	2103      	movs	r1, #3
 800b7be:	ab03      	add	r3, sp, #12
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	ab02      	add	r3, sp, #8
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	4632      	mov	r2, r6
 800b7c8:	4653      	mov	r3, sl
 800b7ca:	ec45 4b10 	vmov	d0, r4, r5
 800b7ce:	f001 fdcf 	bl	800d370 <_dtoa_r>
 800b7d2:	2f47      	cmp	r7, #71	; 0x47
 800b7d4:	4680      	mov	r8, r0
 800b7d6:	d102      	bne.n	800b7de <__cvt+0x62>
 800b7d8:	f019 0f01 	tst.w	r9, #1
 800b7dc:	d026      	beq.n	800b82c <__cvt+0xb0>
 800b7de:	2f46      	cmp	r7, #70	; 0x46
 800b7e0:	eb08 0906 	add.w	r9, r8, r6
 800b7e4:	d111      	bne.n	800b80a <__cvt+0x8e>
 800b7e6:	f898 3000 	ldrb.w	r3, [r8]
 800b7ea:	2b30      	cmp	r3, #48	; 0x30
 800b7ec:	d10a      	bne.n	800b804 <__cvt+0x88>
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	f7f5 f977 	bl	8000ae8 <__aeabi_dcmpeq>
 800b7fa:	b918      	cbnz	r0, 800b804 <__cvt+0x88>
 800b7fc:	f1c6 0601 	rsb	r6, r6, #1
 800b800:	f8ca 6000 	str.w	r6, [sl]
 800b804:	f8da 3000 	ldr.w	r3, [sl]
 800b808:	4499      	add	r9, r3
 800b80a:	2200      	movs	r2, #0
 800b80c:	2300      	movs	r3, #0
 800b80e:	4620      	mov	r0, r4
 800b810:	4629      	mov	r1, r5
 800b812:	f7f5 f969 	bl	8000ae8 <__aeabi_dcmpeq>
 800b816:	b938      	cbnz	r0, 800b828 <__cvt+0xac>
 800b818:	2230      	movs	r2, #48	; 0x30
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	454b      	cmp	r3, r9
 800b81e:	d205      	bcs.n	800b82c <__cvt+0xb0>
 800b820:	1c59      	adds	r1, r3, #1
 800b822:	9103      	str	r1, [sp, #12]
 800b824:	701a      	strb	r2, [r3, #0]
 800b826:	e7f8      	b.n	800b81a <__cvt+0x9e>
 800b828:	f8cd 900c 	str.w	r9, [sp, #12]
 800b82c:	9b03      	ldr	r3, [sp, #12]
 800b82e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b830:	eba3 0308 	sub.w	r3, r3, r8
 800b834:	4640      	mov	r0, r8
 800b836:	6013      	str	r3, [r2, #0]
 800b838:	b004      	add	sp, #16
 800b83a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b83e <__exponent>:
 800b83e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b840:	2900      	cmp	r1, #0
 800b842:	4604      	mov	r4, r0
 800b844:	bfba      	itte	lt
 800b846:	4249      	neglt	r1, r1
 800b848:	232d      	movlt	r3, #45	; 0x2d
 800b84a:	232b      	movge	r3, #43	; 0x2b
 800b84c:	2909      	cmp	r1, #9
 800b84e:	f804 2b02 	strb.w	r2, [r4], #2
 800b852:	7043      	strb	r3, [r0, #1]
 800b854:	dd20      	ble.n	800b898 <__exponent+0x5a>
 800b856:	f10d 0307 	add.w	r3, sp, #7
 800b85a:	461f      	mov	r7, r3
 800b85c:	260a      	movs	r6, #10
 800b85e:	fb91 f5f6 	sdiv	r5, r1, r6
 800b862:	fb06 1115 	mls	r1, r6, r5, r1
 800b866:	3130      	adds	r1, #48	; 0x30
 800b868:	2d09      	cmp	r5, #9
 800b86a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b86e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800b872:	4629      	mov	r1, r5
 800b874:	dc09      	bgt.n	800b88a <__exponent+0x4c>
 800b876:	3130      	adds	r1, #48	; 0x30
 800b878:	3b02      	subs	r3, #2
 800b87a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b87e:	42bb      	cmp	r3, r7
 800b880:	4622      	mov	r2, r4
 800b882:	d304      	bcc.n	800b88e <__exponent+0x50>
 800b884:	1a10      	subs	r0, r2, r0
 800b886:	b003      	add	sp, #12
 800b888:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b88a:	4613      	mov	r3, r2
 800b88c:	e7e7      	b.n	800b85e <__exponent+0x20>
 800b88e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b892:	f804 2b01 	strb.w	r2, [r4], #1
 800b896:	e7f2      	b.n	800b87e <__exponent+0x40>
 800b898:	2330      	movs	r3, #48	; 0x30
 800b89a:	4419      	add	r1, r3
 800b89c:	7083      	strb	r3, [r0, #2]
 800b89e:	1d02      	adds	r2, r0, #4
 800b8a0:	70c1      	strb	r1, [r0, #3]
 800b8a2:	e7ef      	b.n	800b884 <__exponent+0x46>

0800b8a4 <_printf_float>:
 800b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a8:	b08d      	sub	sp, #52	; 0x34
 800b8aa:	460c      	mov	r4, r1
 800b8ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b8b0:	4616      	mov	r6, r2
 800b8b2:	461f      	mov	r7, r3
 800b8b4:	4605      	mov	r5, r0
 800b8b6:	f002 fe3f 	bl	800e538 <_localeconv_r>
 800b8ba:	6803      	ldr	r3, [r0, #0]
 800b8bc:	9304      	str	r3, [sp, #16]
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7f4 fc96 	bl	80001f0 <strlen>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	930a      	str	r3, [sp, #40]	; 0x28
 800b8c8:	f8d8 3000 	ldr.w	r3, [r8]
 800b8cc:	9005      	str	r0, [sp, #20]
 800b8ce:	3307      	adds	r3, #7
 800b8d0:	f023 0307 	bic.w	r3, r3, #7
 800b8d4:	f103 0208 	add.w	r2, r3, #8
 800b8d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b8dc:	f8d4 b000 	ldr.w	fp, [r4]
 800b8e0:	f8c8 2000 	str.w	r2, [r8]
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b8ec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b8f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8f4:	9307      	str	r3, [sp, #28]
 800b8f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800b8fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8fe:	4ba7      	ldr	r3, [pc, #668]	; (800bb9c <_printf_float+0x2f8>)
 800b900:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b904:	f7f5 f922 	bl	8000b4c <__aeabi_dcmpun>
 800b908:	bb70      	cbnz	r0, 800b968 <_printf_float+0xc4>
 800b90a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b90e:	4ba3      	ldr	r3, [pc, #652]	; (800bb9c <_printf_float+0x2f8>)
 800b910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b914:	f7f5 f8fc 	bl	8000b10 <__aeabi_dcmple>
 800b918:	bb30      	cbnz	r0, 800b968 <_printf_float+0xc4>
 800b91a:	2200      	movs	r2, #0
 800b91c:	2300      	movs	r3, #0
 800b91e:	4640      	mov	r0, r8
 800b920:	4649      	mov	r1, r9
 800b922:	f7f5 f8eb 	bl	8000afc <__aeabi_dcmplt>
 800b926:	b110      	cbz	r0, 800b92e <_printf_float+0x8a>
 800b928:	232d      	movs	r3, #45	; 0x2d
 800b92a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b92e:	4a9c      	ldr	r2, [pc, #624]	; (800bba0 <_printf_float+0x2fc>)
 800b930:	4b9c      	ldr	r3, [pc, #624]	; (800bba4 <_printf_float+0x300>)
 800b932:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b936:	bf8c      	ite	hi
 800b938:	4690      	movhi	r8, r2
 800b93a:	4698      	movls	r8, r3
 800b93c:	2303      	movs	r3, #3
 800b93e:	f02b 0204 	bic.w	r2, fp, #4
 800b942:	6123      	str	r3, [r4, #16]
 800b944:	6022      	str	r2, [r4, #0]
 800b946:	f04f 0900 	mov.w	r9, #0
 800b94a:	9700      	str	r7, [sp, #0]
 800b94c:	4633      	mov	r3, r6
 800b94e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b950:	4621      	mov	r1, r4
 800b952:	4628      	mov	r0, r5
 800b954:	f000 f9e6 	bl	800bd24 <_printf_common>
 800b958:	3001      	adds	r0, #1
 800b95a:	f040 808d 	bne.w	800ba78 <_printf_float+0x1d4>
 800b95e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b962:	b00d      	add	sp, #52	; 0x34
 800b964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b968:	4642      	mov	r2, r8
 800b96a:	464b      	mov	r3, r9
 800b96c:	4640      	mov	r0, r8
 800b96e:	4649      	mov	r1, r9
 800b970:	f7f5 f8ec 	bl	8000b4c <__aeabi_dcmpun>
 800b974:	b110      	cbz	r0, 800b97c <_printf_float+0xd8>
 800b976:	4a8c      	ldr	r2, [pc, #560]	; (800bba8 <_printf_float+0x304>)
 800b978:	4b8c      	ldr	r3, [pc, #560]	; (800bbac <_printf_float+0x308>)
 800b97a:	e7da      	b.n	800b932 <_printf_float+0x8e>
 800b97c:	6861      	ldr	r1, [r4, #4]
 800b97e:	1c4b      	adds	r3, r1, #1
 800b980:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b984:	a80a      	add	r0, sp, #40	; 0x28
 800b986:	d13e      	bne.n	800ba06 <_printf_float+0x162>
 800b988:	2306      	movs	r3, #6
 800b98a:	6063      	str	r3, [r4, #4]
 800b98c:	2300      	movs	r3, #0
 800b98e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b992:	ab09      	add	r3, sp, #36	; 0x24
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	ec49 8b10 	vmov	d0, r8, r9
 800b99a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b99e:	6022      	str	r2, [r4, #0]
 800b9a0:	f8cd a004 	str.w	sl, [sp, #4]
 800b9a4:	6861      	ldr	r1, [r4, #4]
 800b9a6:	4628      	mov	r0, r5
 800b9a8:	f7ff fee8 	bl	800b77c <__cvt>
 800b9ac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b9b0:	2b47      	cmp	r3, #71	; 0x47
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	d109      	bne.n	800b9ca <_printf_float+0x126>
 800b9b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b8:	1cd8      	adds	r0, r3, #3
 800b9ba:	db02      	blt.n	800b9c2 <_printf_float+0x11e>
 800b9bc:	6862      	ldr	r2, [r4, #4]
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	dd47      	ble.n	800ba52 <_printf_float+0x1ae>
 800b9c2:	f1aa 0a02 	sub.w	sl, sl, #2
 800b9c6:	fa5f fa8a 	uxtb.w	sl, sl
 800b9ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b9ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9d0:	d824      	bhi.n	800ba1c <_printf_float+0x178>
 800b9d2:	3901      	subs	r1, #1
 800b9d4:	4652      	mov	r2, sl
 800b9d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b9da:	9109      	str	r1, [sp, #36]	; 0x24
 800b9dc:	f7ff ff2f 	bl	800b83e <__exponent>
 800b9e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9e2:	1813      	adds	r3, r2, r0
 800b9e4:	2a01      	cmp	r2, #1
 800b9e6:	4681      	mov	r9, r0
 800b9e8:	6123      	str	r3, [r4, #16]
 800b9ea:	dc02      	bgt.n	800b9f2 <_printf_float+0x14e>
 800b9ec:	6822      	ldr	r2, [r4, #0]
 800b9ee:	07d1      	lsls	r1, r2, #31
 800b9f0:	d501      	bpl.n	800b9f6 <_printf_float+0x152>
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	6123      	str	r3, [r4, #16]
 800b9f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d0a5      	beq.n	800b94a <_printf_float+0xa6>
 800b9fe:	232d      	movs	r3, #45	; 0x2d
 800ba00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba04:	e7a1      	b.n	800b94a <_printf_float+0xa6>
 800ba06:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ba0a:	f000 8177 	beq.w	800bcfc <_printf_float+0x458>
 800ba0e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ba12:	d1bb      	bne.n	800b98c <_printf_float+0xe8>
 800ba14:	2900      	cmp	r1, #0
 800ba16:	d1b9      	bne.n	800b98c <_printf_float+0xe8>
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e7b6      	b.n	800b98a <_printf_float+0xe6>
 800ba1c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ba20:	d119      	bne.n	800ba56 <_printf_float+0x1b2>
 800ba22:	2900      	cmp	r1, #0
 800ba24:	6863      	ldr	r3, [r4, #4]
 800ba26:	dd0c      	ble.n	800ba42 <_printf_float+0x19e>
 800ba28:	6121      	str	r1, [r4, #16]
 800ba2a:	b913      	cbnz	r3, 800ba32 <_printf_float+0x18e>
 800ba2c:	6822      	ldr	r2, [r4, #0]
 800ba2e:	07d2      	lsls	r2, r2, #31
 800ba30:	d502      	bpl.n	800ba38 <_printf_float+0x194>
 800ba32:	3301      	adds	r3, #1
 800ba34:	440b      	add	r3, r1
 800ba36:	6123      	str	r3, [r4, #16]
 800ba38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba3a:	65a3      	str	r3, [r4, #88]	; 0x58
 800ba3c:	f04f 0900 	mov.w	r9, #0
 800ba40:	e7d9      	b.n	800b9f6 <_printf_float+0x152>
 800ba42:	b913      	cbnz	r3, 800ba4a <_printf_float+0x1a6>
 800ba44:	6822      	ldr	r2, [r4, #0]
 800ba46:	07d0      	lsls	r0, r2, #31
 800ba48:	d501      	bpl.n	800ba4e <_printf_float+0x1aa>
 800ba4a:	3302      	adds	r3, #2
 800ba4c:	e7f3      	b.n	800ba36 <_printf_float+0x192>
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e7f1      	b.n	800ba36 <_printf_float+0x192>
 800ba52:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800ba56:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	db05      	blt.n	800ba6a <_printf_float+0x1c6>
 800ba5e:	6822      	ldr	r2, [r4, #0]
 800ba60:	6123      	str	r3, [r4, #16]
 800ba62:	07d1      	lsls	r1, r2, #31
 800ba64:	d5e8      	bpl.n	800ba38 <_printf_float+0x194>
 800ba66:	3301      	adds	r3, #1
 800ba68:	e7e5      	b.n	800ba36 <_printf_float+0x192>
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	bfd4      	ite	le
 800ba6e:	f1c3 0302 	rsble	r3, r3, #2
 800ba72:	2301      	movgt	r3, #1
 800ba74:	4413      	add	r3, r2
 800ba76:	e7de      	b.n	800ba36 <_printf_float+0x192>
 800ba78:	6823      	ldr	r3, [r4, #0]
 800ba7a:	055a      	lsls	r2, r3, #21
 800ba7c:	d407      	bmi.n	800ba8e <_printf_float+0x1ea>
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	4642      	mov	r2, r8
 800ba82:	4631      	mov	r1, r6
 800ba84:	4628      	mov	r0, r5
 800ba86:	47b8      	blx	r7
 800ba88:	3001      	adds	r0, #1
 800ba8a:	d12b      	bne.n	800bae4 <_printf_float+0x240>
 800ba8c:	e767      	b.n	800b95e <_printf_float+0xba>
 800ba8e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ba92:	f240 80dc 	bls.w	800bc4e <_printf_float+0x3aa>
 800ba96:	2200      	movs	r2, #0
 800ba98:	2300      	movs	r3, #0
 800ba9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba9e:	f7f5 f823 	bl	8000ae8 <__aeabi_dcmpeq>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	d033      	beq.n	800bb0e <_printf_float+0x26a>
 800baa6:	2301      	movs	r3, #1
 800baa8:	4a41      	ldr	r2, [pc, #260]	; (800bbb0 <_printf_float+0x30c>)
 800baaa:	4631      	mov	r1, r6
 800baac:	4628      	mov	r0, r5
 800baae:	47b8      	blx	r7
 800bab0:	3001      	adds	r0, #1
 800bab2:	f43f af54 	beq.w	800b95e <_printf_float+0xba>
 800bab6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800baba:	429a      	cmp	r2, r3
 800babc:	db02      	blt.n	800bac4 <_printf_float+0x220>
 800babe:	6823      	ldr	r3, [r4, #0]
 800bac0:	07d8      	lsls	r0, r3, #31
 800bac2:	d50f      	bpl.n	800bae4 <_printf_float+0x240>
 800bac4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bac8:	4631      	mov	r1, r6
 800baca:	4628      	mov	r0, r5
 800bacc:	47b8      	blx	r7
 800bace:	3001      	adds	r0, #1
 800bad0:	f43f af45 	beq.w	800b95e <_printf_float+0xba>
 800bad4:	f04f 0800 	mov.w	r8, #0
 800bad8:	f104 091a 	add.w	r9, r4, #26
 800badc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bade:	3b01      	subs	r3, #1
 800bae0:	4543      	cmp	r3, r8
 800bae2:	dc09      	bgt.n	800baf8 <_printf_float+0x254>
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	079b      	lsls	r3, r3, #30
 800bae8:	f100 8103 	bmi.w	800bcf2 <_printf_float+0x44e>
 800baec:	68e0      	ldr	r0, [r4, #12]
 800baee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baf0:	4298      	cmp	r0, r3
 800baf2:	bfb8      	it	lt
 800baf4:	4618      	movlt	r0, r3
 800baf6:	e734      	b.n	800b962 <_printf_float+0xbe>
 800baf8:	2301      	movs	r3, #1
 800bafa:	464a      	mov	r2, r9
 800bafc:	4631      	mov	r1, r6
 800bafe:	4628      	mov	r0, r5
 800bb00:	47b8      	blx	r7
 800bb02:	3001      	adds	r0, #1
 800bb04:	f43f af2b 	beq.w	800b95e <_printf_float+0xba>
 800bb08:	f108 0801 	add.w	r8, r8, #1
 800bb0c:	e7e6      	b.n	800badc <_printf_float+0x238>
 800bb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	dc2b      	bgt.n	800bb6c <_printf_float+0x2c8>
 800bb14:	2301      	movs	r3, #1
 800bb16:	4a26      	ldr	r2, [pc, #152]	; (800bbb0 <_printf_float+0x30c>)
 800bb18:	4631      	mov	r1, r6
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	47b8      	blx	r7
 800bb1e:	3001      	adds	r0, #1
 800bb20:	f43f af1d 	beq.w	800b95e <_printf_float+0xba>
 800bb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb26:	b923      	cbnz	r3, 800bb32 <_printf_float+0x28e>
 800bb28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb2a:	b913      	cbnz	r3, 800bb32 <_printf_float+0x28e>
 800bb2c:	6823      	ldr	r3, [r4, #0]
 800bb2e:	07d9      	lsls	r1, r3, #31
 800bb30:	d5d8      	bpl.n	800bae4 <_printf_float+0x240>
 800bb32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb36:	4631      	mov	r1, r6
 800bb38:	4628      	mov	r0, r5
 800bb3a:	47b8      	blx	r7
 800bb3c:	3001      	adds	r0, #1
 800bb3e:	f43f af0e 	beq.w	800b95e <_printf_float+0xba>
 800bb42:	f04f 0900 	mov.w	r9, #0
 800bb46:	f104 0a1a 	add.w	sl, r4, #26
 800bb4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb4c:	425b      	negs	r3, r3
 800bb4e:	454b      	cmp	r3, r9
 800bb50:	dc01      	bgt.n	800bb56 <_printf_float+0x2b2>
 800bb52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb54:	e794      	b.n	800ba80 <_printf_float+0x1dc>
 800bb56:	2301      	movs	r3, #1
 800bb58:	4652      	mov	r2, sl
 800bb5a:	4631      	mov	r1, r6
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	47b8      	blx	r7
 800bb60:	3001      	adds	r0, #1
 800bb62:	f43f aefc 	beq.w	800b95e <_printf_float+0xba>
 800bb66:	f109 0901 	add.w	r9, r9, #1
 800bb6a:	e7ee      	b.n	800bb4a <_printf_float+0x2a6>
 800bb6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb70:	429a      	cmp	r2, r3
 800bb72:	bfa8      	it	ge
 800bb74:	461a      	movge	r2, r3
 800bb76:	2a00      	cmp	r2, #0
 800bb78:	4691      	mov	r9, r2
 800bb7a:	dd07      	ble.n	800bb8c <_printf_float+0x2e8>
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	4631      	mov	r1, r6
 800bb80:	4642      	mov	r2, r8
 800bb82:	4628      	mov	r0, r5
 800bb84:	47b8      	blx	r7
 800bb86:	3001      	adds	r0, #1
 800bb88:	f43f aee9 	beq.w	800b95e <_printf_float+0xba>
 800bb8c:	f104 031a 	add.w	r3, r4, #26
 800bb90:	f04f 0b00 	mov.w	fp, #0
 800bb94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb98:	9306      	str	r3, [sp, #24]
 800bb9a:	e015      	b.n	800bbc8 <_printf_float+0x324>
 800bb9c:	7fefffff 	.word	0x7fefffff
 800bba0:	08011e88 	.word	0x08011e88
 800bba4:	08011e84 	.word	0x08011e84
 800bba8:	08011e90 	.word	0x08011e90
 800bbac:	08011e8c 	.word	0x08011e8c
 800bbb0:	08011e94 	.word	0x08011e94
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	9a06      	ldr	r2, [sp, #24]
 800bbb8:	4631      	mov	r1, r6
 800bbba:	4628      	mov	r0, r5
 800bbbc:	47b8      	blx	r7
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	f43f aecd 	beq.w	800b95e <_printf_float+0xba>
 800bbc4:	f10b 0b01 	add.w	fp, fp, #1
 800bbc8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bbcc:	ebaa 0309 	sub.w	r3, sl, r9
 800bbd0:	455b      	cmp	r3, fp
 800bbd2:	dcef      	bgt.n	800bbb4 <_printf_float+0x310>
 800bbd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	44d0      	add	r8, sl
 800bbdc:	db15      	blt.n	800bc0a <_printf_float+0x366>
 800bbde:	6823      	ldr	r3, [r4, #0]
 800bbe0:	07da      	lsls	r2, r3, #31
 800bbe2:	d412      	bmi.n	800bc0a <_printf_float+0x366>
 800bbe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bbe8:	eba3 020a 	sub.w	r2, r3, sl
 800bbec:	eba3 0a01 	sub.w	sl, r3, r1
 800bbf0:	4592      	cmp	sl, r2
 800bbf2:	bfa8      	it	ge
 800bbf4:	4692      	movge	sl, r2
 800bbf6:	f1ba 0f00 	cmp.w	sl, #0
 800bbfa:	dc0e      	bgt.n	800bc1a <_printf_float+0x376>
 800bbfc:	f04f 0800 	mov.w	r8, #0
 800bc00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc04:	f104 091a 	add.w	r9, r4, #26
 800bc08:	e019      	b.n	800bc3e <_printf_float+0x39a>
 800bc0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc0e:	4631      	mov	r1, r6
 800bc10:	4628      	mov	r0, r5
 800bc12:	47b8      	blx	r7
 800bc14:	3001      	adds	r0, #1
 800bc16:	d1e5      	bne.n	800bbe4 <_printf_float+0x340>
 800bc18:	e6a1      	b.n	800b95e <_printf_float+0xba>
 800bc1a:	4653      	mov	r3, sl
 800bc1c:	4642      	mov	r2, r8
 800bc1e:	4631      	mov	r1, r6
 800bc20:	4628      	mov	r0, r5
 800bc22:	47b8      	blx	r7
 800bc24:	3001      	adds	r0, #1
 800bc26:	d1e9      	bne.n	800bbfc <_printf_float+0x358>
 800bc28:	e699      	b.n	800b95e <_printf_float+0xba>
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	464a      	mov	r2, r9
 800bc2e:	4631      	mov	r1, r6
 800bc30:	4628      	mov	r0, r5
 800bc32:	47b8      	blx	r7
 800bc34:	3001      	adds	r0, #1
 800bc36:	f43f ae92 	beq.w	800b95e <_printf_float+0xba>
 800bc3a:	f108 0801 	add.w	r8, r8, #1
 800bc3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc42:	1a9b      	subs	r3, r3, r2
 800bc44:	eba3 030a 	sub.w	r3, r3, sl
 800bc48:	4543      	cmp	r3, r8
 800bc4a:	dcee      	bgt.n	800bc2a <_printf_float+0x386>
 800bc4c:	e74a      	b.n	800bae4 <_printf_float+0x240>
 800bc4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc50:	2a01      	cmp	r2, #1
 800bc52:	dc01      	bgt.n	800bc58 <_printf_float+0x3b4>
 800bc54:	07db      	lsls	r3, r3, #31
 800bc56:	d53a      	bpl.n	800bcce <_printf_float+0x42a>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	4642      	mov	r2, r8
 800bc5c:	4631      	mov	r1, r6
 800bc5e:	4628      	mov	r0, r5
 800bc60:	47b8      	blx	r7
 800bc62:	3001      	adds	r0, #1
 800bc64:	f43f ae7b 	beq.w	800b95e <_printf_float+0xba>
 800bc68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4628      	mov	r0, r5
 800bc70:	47b8      	blx	r7
 800bc72:	3001      	adds	r0, #1
 800bc74:	f108 0801 	add.w	r8, r8, #1
 800bc78:	f43f ae71 	beq.w	800b95e <_printf_float+0xba>
 800bc7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800bc84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f7f4 ff2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc8e:	b9c8      	cbnz	r0, 800bcc4 <_printf_float+0x420>
 800bc90:	4653      	mov	r3, sl
 800bc92:	4642      	mov	r2, r8
 800bc94:	4631      	mov	r1, r6
 800bc96:	4628      	mov	r0, r5
 800bc98:	47b8      	blx	r7
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	d10e      	bne.n	800bcbc <_printf_float+0x418>
 800bc9e:	e65e      	b.n	800b95e <_printf_float+0xba>
 800bca0:	2301      	movs	r3, #1
 800bca2:	4652      	mov	r2, sl
 800bca4:	4631      	mov	r1, r6
 800bca6:	4628      	mov	r0, r5
 800bca8:	47b8      	blx	r7
 800bcaa:	3001      	adds	r0, #1
 800bcac:	f43f ae57 	beq.w	800b95e <_printf_float+0xba>
 800bcb0:	f108 0801 	add.w	r8, r8, #1
 800bcb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	4543      	cmp	r3, r8
 800bcba:	dcf1      	bgt.n	800bca0 <_printf_float+0x3fc>
 800bcbc:	464b      	mov	r3, r9
 800bcbe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bcc2:	e6de      	b.n	800ba82 <_printf_float+0x1de>
 800bcc4:	f04f 0800 	mov.w	r8, #0
 800bcc8:	f104 0a1a 	add.w	sl, r4, #26
 800bccc:	e7f2      	b.n	800bcb4 <_printf_float+0x410>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e7df      	b.n	800bc92 <_printf_float+0x3ee>
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	464a      	mov	r2, r9
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	4628      	mov	r0, r5
 800bcda:	47b8      	blx	r7
 800bcdc:	3001      	adds	r0, #1
 800bcde:	f43f ae3e 	beq.w	800b95e <_printf_float+0xba>
 800bce2:	f108 0801 	add.w	r8, r8, #1
 800bce6:	68e3      	ldr	r3, [r4, #12]
 800bce8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bcea:	1a9b      	subs	r3, r3, r2
 800bcec:	4543      	cmp	r3, r8
 800bcee:	dcf0      	bgt.n	800bcd2 <_printf_float+0x42e>
 800bcf0:	e6fc      	b.n	800baec <_printf_float+0x248>
 800bcf2:	f04f 0800 	mov.w	r8, #0
 800bcf6:	f104 0919 	add.w	r9, r4, #25
 800bcfa:	e7f4      	b.n	800bce6 <_printf_float+0x442>
 800bcfc:	2900      	cmp	r1, #0
 800bcfe:	f43f ae8b 	beq.w	800ba18 <_printf_float+0x174>
 800bd02:	2300      	movs	r3, #0
 800bd04:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bd08:	ab09      	add	r3, sp, #36	; 0x24
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	ec49 8b10 	vmov	d0, r8, r9
 800bd10:	6022      	str	r2, [r4, #0]
 800bd12:	f8cd a004 	str.w	sl, [sp, #4]
 800bd16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	f7ff fd2e 	bl	800b77c <__cvt>
 800bd20:	4680      	mov	r8, r0
 800bd22:	e648      	b.n	800b9b6 <_printf_float+0x112>

0800bd24 <_printf_common>:
 800bd24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd28:	4691      	mov	r9, r2
 800bd2a:	461f      	mov	r7, r3
 800bd2c:	688a      	ldr	r2, [r1, #8]
 800bd2e:	690b      	ldr	r3, [r1, #16]
 800bd30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd34:	4293      	cmp	r3, r2
 800bd36:	bfb8      	it	lt
 800bd38:	4613      	movlt	r3, r2
 800bd3a:	f8c9 3000 	str.w	r3, [r9]
 800bd3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd42:	4606      	mov	r6, r0
 800bd44:	460c      	mov	r4, r1
 800bd46:	b112      	cbz	r2, 800bd4e <_printf_common+0x2a>
 800bd48:	3301      	adds	r3, #1
 800bd4a:	f8c9 3000 	str.w	r3, [r9]
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	0699      	lsls	r1, r3, #26
 800bd52:	bf42      	ittt	mi
 800bd54:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bd58:	3302      	addmi	r3, #2
 800bd5a:	f8c9 3000 	strmi.w	r3, [r9]
 800bd5e:	6825      	ldr	r5, [r4, #0]
 800bd60:	f015 0506 	ands.w	r5, r5, #6
 800bd64:	d107      	bne.n	800bd76 <_printf_common+0x52>
 800bd66:	f104 0a19 	add.w	sl, r4, #25
 800bd6a:	68e3      	ldr	r3, [r4, #12]
 800bd6c:	f8d9 2000 	ldr.w	r2, [r9]
 800bd70:	1a9b      	subs	r3, r3, r2
 800bd72:	42ab      	cmp	r3, r5
 800bd74:	dc28      	bgt.n	800bdc8 <_printf_common+0xa4>
 800bd76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bd7a:	6822      	ldr	r2, [r4, #0]
 800bd7c:	3300      	adds	r3, #0
 800bd7e:	bf18      	it	ne
 800bd80:	2301      	movne	r3, #1
 800bd82:	0692      	lsls	r2, r2, #26
 800bd84:	d42d      	bmi.n	800bde2 <_printf_common+0xbe>
 800bd86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd8a:	4639      	mov	r1, r7
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	47c0      	blx	r8
 800bd90:	3001      	adds	r0, #1
 800bd92:	d020      	beq.n	800bdd6 <_printf_common+0xb2>
 800bd94:	6823      	ldr	r3, [r4, #0]
 800bd96:	68e5      	ldr	r5, [r4, #12]
 800bd98:	f8d9 2000 	ldr.w	r2, [r9]
 800bd9c:	f003 0306 	and.w	r3, r3, #6
 800bda0:	2b04      	cmp	r3, #4
 800bda2:	bf08      	it	eq
 800bda4:	1aad      	subeq	r5, r5, r2
 800bda6:	68a3      	ldr	r3, [r4, #8]
 800bda8:	6922      	ldr	r2, [r4, #16]
 800bdaa:	bf0c      	ite	eq
 800bdac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bdb0:	2500      	movne	r5, #0
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	bfc4      	itt	gt
 800bdb6:	1a9b      	subgt	r3, r3, r2
 800bdb8:	18ed      	addgt	r5, r5, r3
 800bdba:	f04f 0900 	mov.w	r9, #0
 800bdbe:	341a      	adds	r4, #26
 800bdc0:	454d      	cmp	r5, r9
 800bdc2:	d11a      	bne.n	800bdfa <_printf_common+0xd6>
 800bdc4:	2000      	movs	r0, #0
 800bdc6:	e008      	b.n	800bdda <_printf_common+0xb6>
 800bdc8:	2301      	movs	r3, #1
 800bdca:	4652      	mov	r2, sl
 800bdcc:	4639      	mov	r1, r7
 800bdce:	4630      	mov	r0, r6
 800bdd0:	47c0      	blx	r8
 800bdd2:	3001      	adds	r0, #1
 800bdd4:	d103      	bne.n	800bdde <_printf_common+0xba>
 800bdd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bdda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdde:	3501      	adds	r5, #1
 800bde0:	e7c3      	b.n	800bd6a <_printf_common+0x46>
 800bde2:	18e1      	adds	r1, r4, r3
 800bde4:	1c5a      	adds	r2, r3, #1
 800bde6:	2030      	movs	r0, #48	; 0x30
 800bde8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bdec:	4422      	add	r2, r4
 800bdee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bdf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bdf6:	3302      	adds	r3, #2
 800bdf8:	e7c5      	b.n	800bd86 <_printf_common+0x62>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	4622      	mov	r2, r4
 800bdfe:	4639      	mov	r1, r7
 800be00:	4630      	mov	r0, r6
 800be02:	47c0      	blx	r8
 800be04:	3001      	adds	r0, #1
 800be06:	d0e6      	beq.n	800bdd6 <_printf_common+0xb2>
 800be08:	f109 0901 	add.w	r9, r9, #1
 800be0c:	e7d8      	b.n	800bdc0 <_printf_common+0x9c>
	...

0800be10 <_printf_i>:
 800be10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800be18:	460c      	mov	r4, r1
 800be1a:	7e09      	ldrb	r1, [r1, #24]
 800be1c:	b085      	sub	sp, #20
 800be1e:	296e      	cmp	r1, #110	; 0x6e
 800be20:	4617      	mov	r7, r2
 800be22:	4606      	mov	r6, r0
 800be24:	4698      	mov	r8, r3
 800be26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be28:	f000 80b3 	beq.w	800bf92 <_printf_i+0x182>
 800be2c:	d822      	bhi.n	800be74 <_printf_i+0x64>
 800be2e:	2963      	cmp	r1, #99	; 0x63
 800be30:	d036      	beq.n	800bea0 <_printf_i+0x90>
 800be32:	d80a      	bhi.n	800be4a <_printf_i+0x3a>
 800be34:	2900      	cmp	r1, #0
 800be36:	f000 80b9 	beq.w	800bfac <_printf_i+0x19c>
 800be3a:	2958      	cmp	r1, #88	; 0x58
 800be3c:	f000 8083 	beq.w	800bf46 <_printf_i+0x136>
 800be40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800be48:	e032      	b.n	800beb0 <_printf_i+0xa0>
 800be4a:	2964      	cmp	r1, #100	; 0x64
 800be4c:	d001      	beq.n	800be52 <_printf_i+0x42>
 800be4e:	2969      	cmp	r1, #105	; 0x69
 800be50:	d1f6      	bne.n	800be40 <_printf_i+0x30>
 800be52:	6820      	ldr	r0, [r4, #0]
 800be54:	6813      	ldr	r3, [r2, #0]
 800be56:	0605      	lsls	r5, r0, #24
 800be58:	f103 0104 	add.w	r1, r3, #4
 800be5c:	d52a      	bpl.n	800beb4 <_printf_i+0xa4>
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	6011      	str	r1, [r2, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	da03      	bge.n	800be6e <_printf_i+0x5e>
 800be66:	222d      	movs	r2, #45	; 0x2d
 800be68:	425b      	negs	r3, r3
 800be6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800be6e:	486f      	ldr	r0, [pc, #444]	; (800c02c <_printf_i+0x21c>)
 800be70:	220a      	movs	r2, #10
 800be72:	e039      	b.n	800bee8 <_printf_i+0xd8>
 800be74:	2973      	cmp	r1, #115	; 0x73
 800be76:	f000 809d 	beq.w	800bfb4 <_printf_i+0x1a4>
 800be7a:	d808      	bhi.n	800be8e <_printf_i+0x7e>
 800be7c:	296f      	cmp	r1, #111	; 0x6f
 800be7e:	d020      	beq.n	800bec2 <_printf_i+0xb2>
 800be80:	2970      	cmp	r1, #112	; 0x70
 800be82:	d1dd      	bne.n	800be40 <_printf_i+0x30>
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	f043 0320 	orr.w	r3, r3, #32
 800be8a:	6023      	str	r3, [r4, #0]
 800be8c:	e003      	b.n	800be96 <_printf_i+0x86>
 800be8e:	2975      	cmp	r1, #117	; 0x75
 800be90:	d017      	beq.n	800bec2 <_printf_i+0xb2>
 800be92:	2978      	cmp	r1, #120	; 0x78
 800be94:	d1d4      	bne.n	800be40 <_printf_i+0x30>
 800be96:	2378      	movs	r3, #120	; 0x78
 800be98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800be9c:	4864      	ldr	r0, [pc, #400]	; (800c030 <_printf_i+0x220>)
 800be9e:	e055      	b.n	800bf4c <_printf_i+0x13c>
 800bea0:	6813      	ldr	r3, [r2, #0]
 800bea2:	1d19      	adds	r1, r3, #4
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	6011      	str	r1, [r2, #0]
 800bea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800beac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800beb0:	2301      	movs	r3, #1
 800beb2:	e08c      	b.n	800bfce <_printf_i+0x1be>
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	6011      	str	r1, [r2, #0]
 800beb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bebc:	bf18      	it	ne
 800bebe:	b21b      	sxthne	r3, r3
 800bec0:	e7cf      	b.n	800be62 <_printf_i+0x52>
 800bec2:	6813      	ldr	r3, [r2, #0]
 800bec4:	6825      	ldr	r5, [r4, #0]
 800bec6:	1d18      	adds	r0, r3, #4
 800bec8:	6010      	str	r0, [r2, #0]
 800beca:	0628      	lsls	r0, r5, #24
 800becc:	d501      	bpl.n	800bed2 <_printf_i+0xc2>
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	e002      	b.n	800bed8 <_printf_i+0xc8>
 800bed2:	0668      	lsls	r0, r5, #25
 800bed4:	d5fb      	bpl.n	800bece <_printf_i+0xbe>
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	4854      	ldr	r0, [pc, #336]	; (800c02c <_printf_i+0x21c>)
 800beda:	296f      	cmp	r1, #111	; 0x6f
 800bedc:	bf14      	ite	ne
 800bede:	220a      	movne	r2, #10
 800bee0:	2208      	moveq	r2, #8
 800bee2:	2100      	movs	r1, #0
 800bee4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bee8:	6865      	ldr	r5, [r4, #4]
 800beea:	60a5      	str	r5, [r4, #8]
 800beec:	2d00      	cmp	r5, #0
 800beee:	f2c0 8095 	blt.w	800c01c <_printf_i+0x20c>
 800bef2:	6821      	ldr	r1, [r4, #0]
 800bef4:	f021 0104 	bic.w	r1, r1, #4
 800bef8:	6021      	str	r1, [r4, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d13d      	bne.n	800bf7a <_printf_i+0x16a>
 800befe:	2d00      	cmp	r5, #0
 800bf00:	f040 808e 	bne.w	800c020 <_printf_i+0x210>
 800bf04:	4665      	mov	r5, ip
 800bf06:	2a08      	cmp	r2, #8
 800bf08:	d10b      	bne.n	800bf22 <_printf_i+0x112>
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	07db      	lsls	r3, r3, #31
 800bf0e:	d508      	bpl.n	800bf22 <_printf_i+0x112>
 800bf10:	6923      	ldr	r3, [r4, #16]
 800bf12:	6862      	ldr	r2, [r4, #4]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	bfde      	ittt	le
 800bf18:	2330      	movle	r3, #48	; 0x30
 800bf1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf1e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bf22:	ebac 0305 	sub.w	r3, ip, r5
 800bf26:	6123      	str	r3, [r4, #16]
 800bf28:	f8cd 8000 	str.w	r8, [sp]
 800bf2c:	463b      	mov	r3, r7
 800bf2e:	aa03      	add	r2, sp, #12
 800bf30:	4621      	mov	r1, r4
 800bf32:	4630      	mov	r0, r6
 800bf34:	f7ff fef6 	bl	800bd24 <_printf_common>
 800bf38:	3001      	adds	r0, #1
 800bf3a:	d14d      	bne.n	800bfd8 <_printf_i+0x1c8>
 800bf3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf40:	b005      	add	sp, #20
 800bf42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf46:	4839      	ldr	r0, [pc, #228]	; (800c02c <_printf_i+0x21c>)
 800bf48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bf4c:	6813      	ldr	r3, [r2, #0]
 800bf4e:	6821      	ldr	r1, [r4, #0]
 800bf50:	1d1d      	adds	r5, r3, #4
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	6015      	str	r5, [r2, #0]
 800bf56:	060a      	lsls	r2, r1, #24
 800bf58:	d50b      	bpl.n	800bf72 <_printf_i+0x162>
 800bf5a:	07ca      	lsls	r2, r1, #31
 800bf5c:	bf44      	itt	mi
 800bf5e:	f041 0120 	orrmi.w	r1, r1, #32
 800bf62:	6021      	strmi	r1, [r4, #0]
 800bf64:	b91b      	cbnz	r3, 800bf6e <_printf_i+0x15e>
 800bf66:	6822      	ldr	r2, [r4, #0]
 800bf68:	f022 0220 	bic.w	r2, r2, #32
 800bf6c:	6022      	str	r2, [r4, #0]
 800bf6e:	2210      	movs	r2, #16
 800bf70:	e7b7      	b.n	800bee2 <_printf_i+0xd2>
 800bf72:	064d      	lsls	r5, r1, #25
 800bf74:	bf48      	it	mi
 800bf76:	b29b      	uxthmi	r3, r3
 800bf78:	e7ef      	b.n	800bf5a <_printf_i+0x14a>
 800bf7a:	4665      	mov	r5, ip
 800bf7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bf80:	fb02 3311 	mls	r3, r2, r1, r3
 800bf84:	5cc3      	ldrb	r3, [r0, r3]
 800bf86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	d1f5      	bne.n	800bf7c <_printf_i+0x16c>
 800bf90:	e7b9      	b.n	800bf06 <_printf_i+0xf6>
 800bf92:	6813      	ldr	r3, [r2, #0]
 800bf94:	6825      	ldr	r5, [r4, #0]
 800bf96:	6961      	ldr	r1, [r4, #20]
 800bf98:	1d18      	adds	r0, r3, #4
 800bf9a:	6010      	str	r0, [r2, #0]
 800bf9c:	0628      	lsls	r0, r5, #24
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	d501      	bpl.n	800bfa6 <_printf_i+0x196>
 800bfa2:	6019      	str	r1, [r3, #0]
 800bfa4:	e002      	b.n	800bfac <_printf_i+0x19c>
 800bfa6:	066a      	lsls	r2, r5, #25
 800bfa8:	d5fb      	bpl.n	800bfa2 <_printf_i+0x192>
 800bfaa:	8019      	strh	r1, [r3, #0]
 800bfac:	2300      	movs	r3, #0
 800bfae:	6123      	str	r3, [r4, #16]
 800bfb0:	4665      	mov	r5, ip
 800bfb2:	e7b9      	b.n	800bf28 <_printf_i+0x118>
 800bfb4:	6813      	ldr	r3, [r2, #0]
 800bfb6:	1d19      	adds	r1, r3, #4
 800bfb8:	6011      	str	r1, [r2, #0]
 800bfba:	681d      	ldr	r5, [r3, #0]
 800bfbc:	6862      	ldr	r2, [r4, #4]
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	4628      	mov	r0, r5
 800bfc2:	f7f4 f91d 	bl	8000200 <memchr>
 800bfc6:	b108      	cbz	r0, 800bfcc <_printf_i+0x1bc>
 800bfc8:	1b40      	subs	r0, r0, r5
 800bfca:	6060      	str	r0, [r4, #4]
 800bfcc:	6863      	ldr	r3, [r4, #4]
 800bfce:	6123      	str	r3, [r4, #16]
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfd6:	e7a7      	b.n	800bf28 <_printf_i+0x118>
 800bfd8:	6923      	ldr	r3, [r4, #16]
 800bfda:	462a      	mov	r2, r5
 800bfdc:	4639      	mov	r1, r7
 800bfde:	4630      	mov	r0, r6
 800bfe0:	47c0      	blx	r8
 800bfe2:	3001      	adds	r0, #1
 800bfe4:	d0aa      	beq.n	800bf3c <_printf_i+0x12c>
 800bfe6:	6823      	ldr	r3, [r4, #0]
 800bfe8:	079b      	lsls	r3, r3, #30
 800bfea:	d413      	bmi.n	800c014 <_printf_i+0x204>
 800bfec:	68e0      	ldr	r0, [r4, #12]
 800bfee:	9b03      	ldr	r3, [sp, #12]
 800bff0:	4298      	cmp	r0, r3
 800bff2:	bfb8      	it	lt
 800bff4:	4618      	movlt	r0, r3
 800bff6:	e7a3      	b.n	800bf40 <_printf_i+0x130>
 800bff8:	2301      	movs	r3, #1
 800bffa:	464a      	mov	r2, r9
 800bffc:	4639      	mov	r1, r7
 800bffe:	4630      	mov	r0, r6
 800c000:	47c0      	blx	r8
 800c002:	3001      	adds	r0, #1
 800c004:	d09a      	beq.n	800bf3c <_printf_i+0x12c>
 800c006:	3501      	adds	r5, #1
 800c008:	68e3      	ldr	r3, [r4, #12]
 800c00a:	9a03      	ldr	r2, [sp, #12]
 800c00c:	1a9b      	subs	r3, r3, r2
 800c00e:	42ab      	cmp	r3, r5
 800c010:	dcf2      	bgt.n	800bff8 <_printf_i+0x1e8>
 800c012:	e7eb      	b.n	800bfec <_printf_i+0x1dc>
 800c014:	2500      	movs	r5, #0
 800c016:	f104 0919 	add.w	r9, r4, #25
 800c01a:	e7f5      	b.n	800c008 <_printf_i+0x1f8>
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d1ac      	bne.n	800bf7a <_printf_i+0x16a>
 800c020:	7803      	ldrb	r3, [r0, #0]
 800c022:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c026:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c02a:	e76c      	b.n	800bf06 <_printf_i+0xf6>
 800c02c:	08011e96 	.word	0x08011e96
 800c030:	08011ea7 	.word	0x08011ea7

0800c034 <_scanf_float>:
 800c034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c038:	469a      	mov	sl, r3
 800c03a:	688b      	ldr	r3, [r1, #8]
 800c03c:	4616      	mov	r6, r2
 800c03e:	1e5a      	subs	r2, r3, #1
 800c040:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c044:	b087      	sub	sp, #28
 800c046:	bf83      	ittte	hi
 800c048:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800c04c:	189b      	addhi	r3, r3, r2
 800c04e:	9301      	strhi	r3, [sp, #4]
 800c050:	2300      	movls	r3, #0
 800c052:	bf86      	itte	hi
 800c054:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c058:	608b      	strhi	r3, [r1, #8]
 800c05a:	9301      	strls	r3, [sp, #4]
 800c05c:	680b      	ldr	r3, [r1, #0]
 800c05e:	4688      	mov	r8, r1
 800c060:	f04f 0b00 	mov.w	fp, #0
 800c064:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c068:	f848 3b1c 	str.w	r3, [r8], #28
 800c06c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800c070:	4607      	mov	r7, r0
 800c072:	460c      	mov	r4, r1
 800c074:	4645      	mov	r5, r8
 800c076:	465a      	mov	r2, fp
 800c078:	46d9      	mov	r9, fp
 800c07a:	f8cd b008 	str.w	fp, [sp, #8]
 800c07e:	68a1      	ldr	r1, [r4, #8]
 800c080:	b181      	cbz	r1, 800c0a4 <_scanf_float+0x70>
 800c082:	6833      	ldr	r3, [r6, #0]
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	2b49      	cmp	r3, #73	; 0x49
 800c088:	d071      	beq.n	800c16e <_scanf_float+0x13a>
 800c08a:	d84d      	bhi.n	800c128 <_scanf_float+0xf4>
 800c08c:	2b39      	cmp	r3, #57	; 0x39
 800c08e:	d840      	bhi.n	800c112 <_scanf_float+0xde>
 800c090:	2b31      	cmp	r3, #49	; 0x31
 800c092:	f080 8088 	bcs.w	800c1a6 <_scanf_float+0x172>
 800c096:	2b2d      	cmp	r3, #45	; 0x2d
 800c098:	f000 8090 	beq.w	800c1bc <_scanf_float+0x188>
 800c09c:	d815      	bhi.n	800c0ca <_scanf_float+0x96>
 800c09e:	2b2b      	cmp	r3, #43	; 0x2b
 800c0a0:	f000 808c 	beq.w	800c1bc <_scanf_float+0x188>
 800c0a4:	f1b9 0f00 	cmp.w	r9, #0
 800c0a8:	d003      	beq.n	800c0b2 <_scanf_float+0x7e>
 800c0aa:	6823      	ldr	r3, [r4, #0]
 800c0ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	3a01      	subs	r2, #1
 800c0b4:	2a01      	cmp	r2, #1
 800c0b6:	f200 80ea 	bhi.w	800c28e <_scanf_float+0x25a>
 800c0ba:	4545      	cmp	r5, r8
 800c0bc:	f200 80dc 	bhi.w	800c278 <_scanf_float+0x244>
 800c0c0:	2601      	movs	r6, #1
 800c0c2:	4630      	mov	r0, r6
 800c0c4:	b007      	add	sp, #28
 800c0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c0cc:	f000 809f 	beq.w	800c20e <_scanf_float+0x1da>
 800c0d0:	2b30      	cmp	r3, #48	; 0x30
 800c0d2:	d1e7      	bne.n	800c0a4 <_scanf_float+0x70>
 800c0d4:	6820      	ldr	r0, [r4, #0]
 800c0d6:	f410 7f80 	tst.w	r0, #256	; 0x100
 800c0da:	d064      	beq.n	800c1a6 <_scanf_float+0x172>
 800c0dc:	9b01      	ldr	r3, [sp, #4]
 800c0de:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800c0e2:	6020      	str	r0, [r4, #0]
 800c0e4:	f109 0901 	add.w	r9, r9, #1
 800c0e8:	b11b      	cbz	r3, 800c0f2 <_scanf_float+0xbe>
 800c0ea:	3b01      	subs	r3, #1
 800c0ec:	3101      	adds	r1, #1
 800c0ee:	9301      	str	r3, [sp, #4]
 800c0f0:	60a1      	str	r1, [r4, #8]
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	60a3      	str	r3, [r4, #8]
 800c0f8:	6923      	ldr	r3, [r4, #16]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	6123      	str	r3, [r4, #16]
 800c0fe:	6873      	ldr	r3, [r6, #4]
 800c100:	3b01      	subs	r3, #1
 800c102:	2b00      	cmp	r3, #0
 800c104:	6073      	str	r3, [r6, #4]
 800c106:	f340 80ac 	ble.w	800c262 <_scanf_float+0x22e>
 800c10a:	6833      	ldr	r3, [r6, #0]
 800c10c:	3301      	adds	r3, #1
 800c10e:	6033      	str	r3, [r6, #0]
 800c110:	e7b5      	b.n	800c07e <_scanf_float+0x4a>
 800c112:	2b45      	cmp	r3, #69	; 0x45
 800c114:	f000 8085 	beq.w	800c222 <_scanf_float+0x1ee>
 800c118:	2b46      	cmp	r3, #70	; 0x46
 800c11a:	d06a      	beq.n	800c1f2 <_scanf_float+0x1be>
 800c11c:	2b41      	cmp	r3, #65	; 0x41
 800c11e:	d1c1      	bne.n	800c0a4 <_scanf_float+0x70>
 800c120:	2a01      	cmp	r2, #1
 800c122:	d1bf      	bne.n	800c0a4 <_scanf_float+0x70>
 800c124:	2202      	movs	r2, #2
 800c126:	e046      	b.n	800c1b6 <_scanf_float+0x182>
 800c128:	2b65      	cmp	r3, #101	; 0x65
 800c12a:	d07a      	beq.n	800c222 <_scanf_float+0x1ee>
 800c12c:	d818      	bhi.n	800c160 <_scanf_float+0x12c>
 800c12e:	2b54      	cmp	r3, #84	; 0x54
 800c130:	d066      	beq.n	800c200 <_scanf_float+0x1cc>
 800c132:	d811      	bhi.n	800c158 <_scanf_float+0x124>
 800c134:	2b4e      	cmp	r3, #78	; 0x4e
 800c136:	d1b5      	bne.n	800c0a4 <_scanf_float+0x70>
 800c138:	2a00      	cmp	r2, #0
 800c13a:	d146      	bne.n	800c1ca <_scanf_float+0x196>
 800c13c:	f1b9 0f00 	cmp.w	r9, #0
 800c140:	d145      	bne.n	800c1ce <_scanf_float+0x19a>
 800c142:	6821      	ldr	r1, [r4, #0]
 800c144:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c148:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c14c:	d13f      	bne.n	800c1ce <_scanf_float+0x19a>
 800c14e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c152:	6021      	str	r1, [r4, #0]
 800c154:	2201      	movs	r2, #1
 800c156:	e02e      	b.n	800c1b6 <_scanf_float+0x182>
 800c158:	2b59      	cmp	r3, #89	; 0x59
 800c15a:	d01e      	beq.n	800c19a <_scanf_float+0x166>
 800c15c:	2b61      	cmp	r3, #97	; 0x61
 800c15e:	e7de      	b.n	800c11e <_scanf_float+0xea>
 800c160:	2b6e      	cmp	r3, #110	; 0x6e
 800c162:	d0e9      	beq.n	800c138 <_scanf_float+0x104>
 800c164:	d815      	bhi.n	800c192 <_scanf_float+0x15e>
 800c166:	2b66      	cmp	r3, #102	; 0x66
 800c168:	d043      	beq.n	800c1f2 <_scanf_float+0x1be>
 800c16a:	2b69      	cmp	r3, #105	; 0x69
 800c16c:	d19a      	bne.n	800c0a4 <_scanf_float+0x70>
 800c16e:	f1bb 0f00 	cmp.w	fp, #0
 800c172:	d138      	bne.n	800c1e6 <_scanf_float+0x1b2>
 800c174:	f1b9 0f00 	cmp.w	r9, #0
 800c178:	d197      	bne.n	800c0aa <_scanf_float+0x76>
 800c17a:	6821      	ldr	r1, [r4, #0]
 800c17c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800c180:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800c184:	d195      	bne.n	800c0b2 <_scanf_float+0x7e>
 800c186:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c18a:	6021      	str	r1, [r4, #0]
 800c18c:	f04f 0b01 	mov.w	fp, #1
 800c190:	e011      	b.n	800c1b6 <_scanf_float+0x182>
 800c192:	2b74      	cmp	r3, #116	; 0x74
 800c194:	d034      	beq.n	800c200 <_scanf_float+0x1cc>
 800c196:	2b79      	cmp	r3, #121	; 0x79
 800c198:	d184      	bne.n	800c0a4 <_scanf_float+0x70>
 800c19a:	f1bb 0f07 	cmp.w	fp, #7
 800c19e:	d181      	bne.n	800c0a4 <_scanf_float+0x70>
 800c1a0:	f04f 0b08 	mov.w	fp, #8
 800c1a4:	e007      	b.n	800c1b6 <_scanf_float+0x182>
 800c1a6:	eb12 0f0b 	cmn.w	r2, fp
 800c1aa:	f47f af7b 	bne.w	800c0a4 <_scanf_float+0x70>
 800c1ae:	6821      	ldr	r1, [r4, #0]
 800c1b0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800c1b4:	6021      	str	r1, [r4, #0]
 800c1b6:	702b      	strb	r3, [r5, #0]
 800c1b8:	3501      	adds	r5, #1
 800c1ba:	e79a      	b.n	800c0f2 <_scanf_float+0xbe>
 800c1bc:	6821      	ldr	r1, [r4, #0]
 800c1be:	0608      	lsls	r0, r1, #24
 800c1c0:	f57f af70 	bpl.w	800c0a4 <_scanf_float+0x70>
 800c1c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c1c8:	e7f4      	b.n	800c1b4 <_scanf_float+0x180>
 800c1ca:	2a02      	cmp	r2, #2
 800c1cc:	d047      	beq.n	800c25e <_scanf_float+0x22a>
 800c1ce:	f1bb 0f01 	cmp.w	fp, #1
 800c1d2:	d003      	beq.n	800c1dc <_scanf_float+0x1a8>
 800c1d4:	f1bb 0f04 	cmp.w	fp, #4
 800c1d8:	f47f af64 	bne.w	800c0a4 <_scanf_float+0x70>
 800c1dc:	f10b 0b01 	add.w	fp, fp, #1
 800c1e0:	fa5f fb8b 	uxtb.w	fp, fp
 800c1e4:	e7e7      	b.n	800c1b6 <_scanf_float+0x182>
 800c1e6:	f1bb 0f03 	cmp.w	fp, #3
 800c1ea:	d0f7      	beq.n	800c1dc <_scanf_float+0x1a8>
 800c1ec:	f1bb 0f05 	cmp.w	fp, #5
 800c1f0:	e7f2      	b.n	800c1d8 <_scanf_float+0x1a4>
 800c1f2:	f1bb 0f02 	cmp.w	fp, #2
 800c1f6:	f47f af55 	bne.w	800c0a4 <_scanf_float+0x70>
 800c1fa:	f04f 0b03 	mov.w	fp, #3
 800c1fe:	e7da      	b.n	800c1b6 <_scanf_float+0x182>
 800c200:	f1bb 0f06 	cmp.w	fp, #6
 800c204:	f47f af4e 	bne.w	800c0a4 <_scanf_float+0x70>
 800c208:	f04f 0b07 	mov.w	fp, #7
 800c20c:	e7d3      	b.n	800c1b6 <_scanf_float+0x182>
 800c20e:	6821      	ldr	r1, [r4, #0]
 800c210:	0588      	lsls	r0, r1, #22
 800c212:	f57f af47 	bpl.w	800c0a4 <_scanf_float+0x70>
 800c216:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800c21a:	6021      	str	r1, [r4, #0]
 800c21c:	f8cd 9008 	str.w	r9, [sp, #8]
 800c220:	e7c9      	b.n	800c1b6 <_scanf_float+0x182>
 800c222:	6821      	ldr	r1, [r4, #0]
 800c224:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800c228:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800c22c:	d006      	beq.n	800c23c <_scanf_float+0x208>
 800c22e:	0548      	lsls	r0, r1, #21
 800c230:	f57f af38 	bpl.w	800c0a4 <_scanf_float+0x70>
 800c234:	f1b9 0f00 	cmp.w	r9, #0
 800c238:	f43f af3b 	beq.w	800c0b2 <_scanf_float+0x7e>
 800c23c:	0588      	lsls	r0, r1, #22
 800c23e:	bf58      	it	pl
 800c240:	9802      	ldrpl	r0, [sp, #8]
 800c242:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800c246:	bf58      	it	pl
 800c248:	eba9 0000 	subpl.w	r0, r9, r0
 800c24c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800c250:	bf58      	it	pl
 800c252:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800c256:	6021      	str	r1, [r4, #0]
 800c258:	f04f 0900 	mov.w	r9, #0
 800c25c:	e7ab      	b.n	800c1b6 <_scanf_float+0x182>
 800c25e:	2203      	movs	r2, #3
 800c260:	e7a9      	b.n	800c1b6 <_scanf_float+0x182>
 800c262:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c266:	9205      	str	r2, [sp, #20]
 800c268:	4631      	mov	r1, r6
 800c26a:	4638      	mov	r0, r7
 800c26c:	4798      	blx	r3
 800c26e:	9a05      	ldr	r2, [sp, #20]
 800c270:	2800      	cmp	r0, #0
 800c272:	f43f af04 	beq.w	800c07e <_scanf_float+0x4a>
 800c276:	e715      	b.n	800c0a4 <_scanf_float+0x70>
 800c278:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c27c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c280:	4632      	mov	r2, r6
 800c282:	4638      	mov	r0, r7
 800c284:	4798      	blx	r3
 800c286:	6923      	ldr	r3, [r4, #16]
 800c288:	3b01      	subs	r3, #1
 800c28a:	6123      	str	r3, [r4, #16]
 800c28c:	e715      	b.n	800c0ba <_scanf_float+0x86>
 800c28e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800c292:	2b06      	cmp	r3, #6
 800c294:	d80a      	bhi.n	800c2ac <_scanf_float+0x278>
 800c296:	f1bb 0f02 	cmp.w	fp, #2
 800c29a:	d968      	bls.n	800c36e <_scanf_float+0x33a>
 800c29c:	f1ab 0b03 	sub.w	fp, fp, #3
 800c2a0:	fa5f fb8b 	uxtb.w	fp, fp
 800c2a4:	eba5 0b0b 	sub.w	fp, r5, fp
 800c2a8:	455d      	cmp	r5, fp
 800c2aa:	d14b      	bne.n	800c344 <_scanf_float+0x310>
 800c2ac:	6823      	ldr	r3, [r4, #0]
 800c2ae:	05da      	lsls	r2, r3, #23
 800c2b0:	d51f      	bpl.n	800c2f2 <_scanf_float+0x2be>
 800c2b2:	055b      	lsls	r3, r3, #21
 800c2b4:	d468      	bmi.n	800c388 <_scanf_float+0x354>
 800c2b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c2ba:	6923      	ldr	r3, [r4, #16]
 800c2bc:	2965      	cmp	r1, #101	; 0x65
 800c2be:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c2c2:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800c2c6:	6123      	str	r3, [r4, #16]
 800c2c8:	d00d      	beq.n	800c2e6 <_scanf_float+0x2b2>
 800c2ca:	2945      	cmp	r1, #69	; 0x45
 800c2cc:	d00b      	beq.n	800c2e6 <_scanf_float+0x2b2>
 800c2ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c2d2:	4632      	mov	r2, r6
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	4798      	blx	r3
 800c2d8:	6923      	ldr	r3, [r4, #16]
 800c2da:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	f1a5 0b02 	sub.w	fp, r5, #2
 800c2e4:	6123      	str	r3, [r4, #16]
 800c2e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c2ea:	4632      	mov	r2, r6
 800c2ec:	4638      	mov	r0, r7
 800c2ee:	4798      	blx	r3
 800c2f0:	465d      	mov	r5, fp
 800c2f2:	6826      	ldr	r6, [r4, #0]
 800c2f4:	f016 0610 	ands.w	r6, r6, #16
 800c2f8:	d17a      	bne.n	800c3f0 <_scanf_float+0x3bc>
 800c2fa:	702e      	strb	r6, [r5, #0]
 800c2fc:	6823      	ldr	r3, [r4, #0]
 800c2fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c306:	d142      	bne.n	800c38e <_scanf_float+0x35a>
 800c308:	9b02      	ldr	r3, [sp, #8]
 800c30a:	eba9 0303 	sub.w	r3, r9, r3
 800c30e:	425a      	negs	r2, r3
 800c310:	2b00      	cmp	r3, #0
 800c312:	d149      	bne.n	800c3a8 <_scanf_float+0x374>
 800c314:	2200      	movs	r2, #0
 800c316:	4641      	mov	r1, r8
 800c318:	4638      	mov	r0, r7
 800c31a:	f000 fee9 	bl	800d0f0 <_strtod_r>
 800c31e:	6825      	ldr	r5, [r4, #0]
 800c320:	f8da 3000 	ldr.w	r3, [sl]
 800c324:	f015 0f02 	tst.w	r5, #2
 800c328:	f103 0204 	add.w	r2, r3, #4
 800c32c:	ec59 8b10 	vmov	r8, r9, d0
 800c330:	f8ca 2000 	str.w	r2, [sl]
 800c334:	d043      	beq.n	800c3be <_scanf_float+0x38a>
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	e9c3 8900 	strd	r8, r9, [r3]
 800c33c:	68e3      	ldr	r3, [r4, #12]
 800c33e:	3301      	adds	r3, #1
 800c340:	60e3      	str	r3, [r4, #12]
 800c342:	e6be      	b.n	800c0c2 <_scanf_float+0x8e>
 800c344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c348:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c34c:	4632      	mov	r2, r6
 800c34e:	4638      	mov	r0, r7
 800c350:	4798      	blx	r3
 800c352:	6923      	ldr	r3, [r4, #16]
 800c354:	3b01      	subs	r3, #1
 800c356:	6123      	str	r3, [r4, #16]
 800c358:	e7a6      	b.n	800c2a8 <_scanf_float+0x274>
 800c35a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c35e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c362:	4632      	mov	r2, r6
 800c364:	4638      	mov	r0, r7
 800c366:	4798      	blx	r3
 800c368:	6923      	ldr	r3, [r4, #16]
 800c36a:	3b01      	subs	r3, #1
 800c36c:	6123      	str	r3, [r4, #16]
 800c36e:	4545      	cmp	r5, r8
 800c370:	d8f3      	bhi.n	800c35a <_scanf_float+0x326>
 800c372:	e6a5      	b.n	800c0c0 <_scanf_float+0x8c>
 800c374:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c378:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800c37c:	4632      	mov	r2, r6
 800c37e:	4638      	mov	r0, r7
 800c380:	4798      	blx	r3
 800c382:	6923      	ldr	r3, [r4, #16]
 800c384:	3b01      	subs	r3, #1
 800c386:	6123      	str	r3, [r4, #16]
 800c388:	4545      	cmp	r5, r8
 800c38a:	d8f3      	bhi.n	800c374 <_scanf_float+0x340>
 800c38c:	e698      	b.n	800c0c0 <_scanf_float+0x8c>
 800c38e:	9b03      	ldr	r3, [sp, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d0bf      	beq.n	800c314 <_scanf_float+0x2e0>
 800c394:	9904      	ldr	r1, [sp, #16]
 800c396:	230a      	movs	r3, #10
 800c398:	4632      	mov	r2, r6
 800c39a:	3101      	adds	r1, #1
 800c39c:	4638      	mov	r0, r7
 800c39e:	f000 ff33 	bl	800d208 <_strtol_r>
 800c3a2:	9b03      	ldr	r3, [sp, #12]
 800c3a4:	9d04      	ldr	r5, [sp, #16]
 800c3a6:	1ac2      	subs	r2, r0, r3
 800c3a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c3ac:	429d      	cmp	r5, r3
 800c3ae:	bf28      	it	cs
 800c3b0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800c3b4:	490f      	ldr	r1, [pc, #60]	; (800c3f4 <_scanf_float+0x3c0>)
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f000 f834 	bl	800c424 <siprintf>
 800c3bc:	e7aa      	b.n	800c314 <_scanf_float+0x2e0>
 800c3be:	f015 0504 	ands.w	r5, r5, #4
 800c3c2:	d1b8      	bne.n	800c336 <_scanf_float+0x302>
 800c3c4:	681f      	ldr	r7, [r3, #0]
 800c3c6:	ee10 2a10 	vmov	r2, s0
 800c3ca:	464b      	mov	r3, r9
 800c3cc:	ee10 0a10 	vmov	r0, s0
 800c3d0:	4649      	mov	r1, r9
 800c3d2:	f7f4 fbbb 	bl	8000b4c <__aeabi_dcmpun>
 800c3d6:	b128      	cbz	r0, 800c3e4 <_scanf_float+0x3b0>
 800c3d8:	4628      	mov	r0, r5
 800c3da:	f000 f81d 	bl	800c418 <nanf>
 800c3de:	ed87 0a00 	vstr	s0, [r7]
 800c3e2:	e7ab      	b.n	800c33c <_scanf_float+0x308>
 800c3e4:	4640      	mov	r0, r8
 800c3e6:	4649      	mov	r1, r9
 800c3e8:	f7f4 fc0e 	bl	8000c08 <__aeabi_d2f>
 800c3ec:	6038      	str	r0, [r7, #0]
 800c3ee:	e7a5      	b.n	800c33c <_scanf_float+0x308>
 800c3f0:	2600      	movs	r6, #0
 800c3f2:	e666      	b.n	800c0c2 <_scanf_float+0x8e>
 800c3f4:	08011eb8 	.word	0x08011eb8

0800c3f8 <_sbrk_r>:
 800c3f8:	b538      	push	{r3, r4, r5, lr}
 800c3fa:	4c06      	ldr	r4, [pc, #24]	; (800c414 <_sbrk_r+0x1c>)
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4605      	mov	r5, r0
 800c400:	4608      	mov	r0, r1
 800c402:	6023      	str	r3, [r4, #0]
 800c404:	f7f8 f92c 	bl	8004660 <_sbrk>
 800c408:	1c43      	adds	r3, r0, #1
 800c40a:	d102      	bne.n	800c412 <_sbrk_r+0x1a>
 800c40c:	6823      	ldr	r3, [r4, #0]
 800c40e:	b103      	cbz	r3, 800c412 <_sbrk_r+0x1a>
 800c410:	602b      	str	r3, [r5, #0]
 800c412:	bd38      	pop	{r3, r4, r5, pc}
 800c414:	200036c4 	.word	0x200036c4

0800c418 <nanf>:
 800c418:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c420 <nanf+0x8>
 800c41c:	4770      	bx	lr
 800c41e:	bf00      	nop
 800c420:	7fc00000 	.word	0x7fc00000

0800c424 <siprintf>:
 800c424:	b40e      	push	{r1, r2, r3}
 800c426:	b500      	push	{lr}
 800c428:	b09c      	sub	sp, #112	; 0x70
 800c42a:	ab1d      	add	r3, sp, #116	; 0x74
 800c42c:	9002      	str	r0, [sp, #8]
 800c42e:	9006      	str	r0, [sp, #24]
 800c430:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c434:	4809      	ldr	r0, [pc, #36]	; (800c45c <siprintf+0x38>)
 800c436:	9107      	str	r1, [sp, #28]
 800c438:	9104      	str	r1, [sp, #16]
 800c43a:	4909      	ldr	r1, [pc, #36]	; (800c460 <siprintf+0x3c>)
 800c43c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c440:	9105      	str	r1, [sp, #20]
 800c442:	6800      	ldr	r0, [r0, #0]
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	a902      	add	r1, sp, #8
 800c448:	f002 fd00 	bl	800ee4c <_svfiprintf_r>
 800c44c:	9b02      	ldr	r3, [sp, #8]
 800c44e:	2200      	movs	r2, #0
 800c450:	701a      	strb	r2, [r3, #0]
 800c452:	b01c      	add	sp, #112	; 0x70
 800c454:	f85d eb04 	ldr.w	lr, [sp], #4
 800c458:	b003      	add	sp, #12
 800c45a:	4770      	bx	lr
 800c45c:	20000988 	.word	0x20000988
 800c460:	ffff0208 	.word	0xffff0208

0800c464 <strchr>:
 800c464:	b2c9      	uxtb	r1, r1
 800c466:	4603      	mov	r3, r0
 800c468:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c46c:	b11a      	cbz	r2, 800c476 <strchr+0x12>
 800c46e:	428a      	cmp	r2, r1
 800c470:	d1f9      	bne.n	800c466 <strchr+0x2>
 800c472:	4618      	mov	r0, r3
 800c474:	4770      	bx	lr
 800c476:	2900      	cmp	r1, #0
 800c478:	bf18      	it	ne
 800c47a:	2300      	movne	r3, #0
 800c47c:	e7f9      	b.n	800c472 <strchr+0xe>

0800c47e <strncat>:
 800c47e:	b530      	push	{r4, r5, lr}
 800c480:	4603      	mov	r3, r0
 800c482:	781c      	ldrb	r4, [r3, #0]
 800c484:	1c5d      	adds	r5, r3, #1
 800c486:	b944      	cbnz	r4, 800c49a <strncat+0x1c>
 800c488:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800c48c:	d304      	bcc.n	800c498 <strncat+0x1a>
 800c48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c492:	f803 4b01 	strb.w	r4, [r3], #1
 800c496:	b914      	cbnz	r4, 800c49e <strncat+0x20>
 800c498:	bd30      	pop	{r4, r5, pc}
 800c49a:	462b      	mov	r3, r5
 800c49c:	e7f1      	b.n	800c482 <strncat+0x4>
 800c49e:	2a00      	cmp	r2, #0
 800c4a0:	d1f2      	bne.n	800c488 <strncat+0xa>
 800c4a2:	701a      	strb	r2, [r3, #0]
 800c4a4:	e7f0      	b.n	800c488 <strncat+0xa>

0800c4a6 <strncmp>:
 800c4a6:	b510      	push	{r4, lr}
 800c4a8:	b16a      	cbz	r2, 800c4c6 <strncmp+0x20>
 800c4aa:	3901      	subs	r1, #1
 800c4ac:	1884      	adds	r4, r0, r2
 800c4ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c4b2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d103      	bne.n	800c4c2 <strncmp+0x1c>
 800c4ba:	42a0      	cmp	r0, r4
 800c4bc:	d001      	beq.n	800c4c2 <strncmp+0x1c>
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1f5      	bne.n	800c4ae <strncmp+0x8>
 800c4c2:	1a98      	subs	r0, r3, r2
 800c4c4:	bd10      	pop	{r4, pc}
 800c4c6:	4610      	mov	r0, r2
 800c4c8:	e7fc      	b.n	800c4c4 <strncmp+0x1e>

0800c4ca <sulp>:
 800c4ca:	b570      	push	{r4, r5, r6, lr}
 800c4cc:	4604      	mov	r4, r0
 800c4ce:	460d      	mov	r5, r1
 800c4d0:	ec45 4b10 	vmov	d0, r4, r5
 800c4d4:	4616      	mov	r6, r2
 800c4d6:	f002 fb1d 	bl	800eb14 <__ulp>
 800c4da:	ec51 0b10 	vmov	r0, r1, d0
 800c4de:	b17e      	cbz	r6, 800c500 <sulp+0x36>
 800c4e0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c4e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	dd09      	ble.n	800c500 <sulp+0x36>
 800c4ec:	051b      	lsls	r3, r3, #20
 800c4ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c4f2:	2400      	movs	r4, #0
 800c4f4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c4f8:	4622      	mov	r2, r4
 800c4fa:	462b      	mov	r3, r5
 800c4fc:	f7f4 f88c 	bl	8000618 <__aeabi_dmul>
 800c500:	bd70      	pop	{r4, r5, r6, pc}
 800c502:	0000      	movs	r0, r0
 800c504:	0000      	movs	r0, r0
	...

0800c508 <_strtod_l>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	461f      	mov	r7, r3
 800c50e:	b0a1      	sub	sp, #132	; 0x84
 800c510:	2300      	movs	r3, #0
 800c512:	4681      	mov	r9, r0
 800c514:	4638      	mov	r0, r7
 800c516:	460e      	mov	r6, r1
 800c518:	9217      	str	r2, [sp, #92]	; 0x5c
 800c51a:	931c      	str	r3, [sp, #112]	; 0x70
 800c51c:	f002 f809 	bl	800e532 <__localeconv_l>
 800c520:	4680      	mov	r8, r0
 800c522:	6800      	ldr	r0, [r0, #0]
 800c524:	f7f3 fe64 	bl	80001f0 <strlen>
 800c528:	f04f 0a00 	mov.w	sl, #0
 800c52c:	4604      	mov	r4, r0
 800c52e:	f04f 0b00 	mov.w	fp, #0
 800c532:	961b      	str	r6, [sp, #108]	; 0x6c
 800c534:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c536:	781a      	ldrb	r2, [r3, #0]
 800c538:	2a0d      	cmp	r2, #13
 800c53a:	d832      	bhi.n	800c5a2 <_strtod_l+0x9a>
 800c53c:	2a09      	cmp	r2, #9
 800c53e:	d236      	bcs.n	800c5ae <_strtod_l+0xa6>
 800c540:	2a00      	cmp	r2, #0
 800c542:	d03e      	beq.n	800c5c2 <_strtod_l+0xba>
 800c544:	2300      	movs	r3, #0
 800c546:	930d      	str	r3, [sp, #52]	; 0x34
 800c548:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c54a:	782b      	ldrb	r3, [r5, #0]
 800c54c:	2b30      	cmp	r3, #48	; 0x30
 800c54e:	f040 80ac 	bne.w	800c6aa <_strtod_l+0x1a2>
 800c552:	786b      	ldrb	r3, [r5, #1]
 800c554:	2b58      	cmp	r3, #88	; 0x58
 800c556:	d001      	beq.n	800c55c <_strtod_l+0x54>
 800c558:	2b78      	cmp	r3, #120	; 0x78
 800c55a:	d167      	bne.n	800c62c <_strtod_l+0x124>
 800c55c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c55e:	9301      	str	r3, [sp, #4]
 800c560:	ab1c      	add	r3, sp, #112	; 0x70
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	9702      	str	r7, [sp, #8]
 800c566:	ab1d      	add	r3, sp, #116	; 0x74
 800c568:	4a88      	ldr	r2, [pc, #544]	; (800c78c <_strtod_l+0x284>)
 800c56a:	a91b      	add	r1, sp, #108	; 0x6c
 800c56c:	4648      	mov	r0, r9
 800c56e:	f001 fd06 	bl	800df7e <__gethex>
 800c572:	f010 0407 	ands.w	r4, r0, #7
 800c576:	4606      	mov	r6, r0
 800c578:	d005      	beq.n	800c586 <_strtod_l+0x7e>
 800c57a:	2c06      	cmp	r4, #6
 800c57c:	d12b      	bne.n	800c5d6 <_strtod_l+0xce>
 800c57e:	3501      	adds	r5, #1
 800c580:	2300      	movs	r3, #0
 800c582:	951b      	str	r5, [sp, #108]	; 0x6c
 800c584:	930d      	str	r3, [sp, #52]	; 0x34
 800c586:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f040 859a 	bne.w	800d0c2 <_strtod_l+0xbba>
 800c58e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c590:	b1e3      	cbz	r3, 800c5cc <_strtod_l+0xc4>
 800c592:	4652      	mov	r2, sl
 800c594:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c598:	ec43 2b10 	vmov	d0, r2, r3
 800c59c:	b021      	add	sp, #132	; 0x84
 800c59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a2:	2a2b      	cmp	r2, #43	; 0x2b
 800c5a4:	d015      	beq.n	800c5d2 <_strtod_l+0xca>
 800c5a6:	2a2d      	cmp	r2, #45	; 0x2d
 800c5a8:	d004      	beq.n	800c5b4 <_strtod_l+0xac>
 800c5aa:	2a20      	cmp	r2, #32
 800c5ac:	d1ca      	bne.n	800c544 <_strtod_l+0x3c>
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800c5b2:	e7bf      	b.n	800c534 <_strtod_l+0x2c>
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	920d      	str	r2, [sp, #52]	; 0x34
 800c5b8:	1c5a      	adds	r2, r3, #1
 800c5ba:	921b      	str	r2, [sp, #108]	; 0x6c
 800c5bc:	785b      	ldrb	r3, [r3, #1]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1c2      	bne.n	800c548 <_strtod_l+0x40>
 800c5c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5c4:	961b      	str	r6, [sp, #108]	; 0x6c
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	f040 8579 	bne.w	800d0be <_strtod_l+0xbb6>
 800c5cc:	4652      	mov	r2, sl
 800c5ce:	465b      	mov	r3, fp
 800c5d0:	e7e2      	b.n	800c598 <_strtod_l+0x90>
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	e7ef      	b.n	800c5b6 <_strtod_l+0xae>
 800c5d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c5d8:	b13a      	cbz	r2, 800c5ea <_strtod_l+0xe2>
 800c5da:	2135      	movs	r1, #53	; 0x35
 800c5dc:	a81e      	add	r0, sp, #120	; 0x78
 800c5de:	f002 fb91 	bl	800ed04 <__copybits>
 800c5e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c5e4:	4648      	mov	r0, r9
 800c5e6:	f001 fffd 	bl	800e5e4 <_Bfree>
 800c5ea:	3c01      	subs	r4, #1
 800c5ec:	2c04      	cmp	r4, #4
 800c5ee:	d806      	bhi.n	800c5fe <_strtod_l+0xf6>
 800c5f0:	e8df f004 	tbb	[pc, r4]
 800c5f4:	1714030a 	.word	0x1714030a
 800c5f8:	0a          	.byte	0x0a
 800c5f9:	00          	.byte	0x00
 800c5fa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800c5fe:	0730      	lsls	r0, r6, #28
 800c600:	d5c1      	bpl.n	800c586 <_strtod_l+0x7e>
 800c602:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c606:	e7be      	b.n	800c586 <_strtod_l+0x7e>
 800c608:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800c60c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c60e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c612:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c616:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c61a:	e7f0      	b.n	800c5fe <_strtod_l+0xf6>
 800c61c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800c790 <_strtod_l+0x288>
 800c620:	e7ed      	b.n	800c5fe <_strtod_l+0xf6>
 800c622:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c626:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800c62a:	e7e8      	b.n	800c5fe <_strtod_l+0xf6>
 800c62c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c62e:	1c5a      	adds	r2, r3, #1
 800c630:	921b      	str	r2, [sp, #108]	; 0x6c
 800c632:	785b      	ldrb	r3, [r3, #1]
 800c634:	2b30      	cmp	r3, #48	; 0x30
 800c636:	d0f9      	beq.n	800c62c <_strtod_l+0x124>
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d0a4      	beq.n	800c586 <_strtod_l+0x7e>
 800c63c:	2301      	movs	r3, #1
 800c63e:	2500      	movs	r5, #0
 800c640:	9306      	str	r3, [sp, #24]
 800c642:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c644:	9308      	str	r3, [sp, #32]
 800c646:	9507      	str	r5, [sp, #28]
 800c648:	9505      	str	r5, [sp, #20]
 800c64a:	220a      	movs	r2, #10
 800c64c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c64e:	7807      	ldrb	r7, [r0, #0]
 800c650:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c654:	b2d9      	uxtb	r1, r3
 800c656:	2909      	cmp	r1, #9
 800c658:	d929      	bls.n	800c6ae <_strtod_l+0x1a6>
 800c65a:	4622      	mov	r2, r4
 800c65c:	f8d8 1000 	ldr.w	r1, [r8]
 800c660:	f7ff ff21 	bl	800c4a6 <strncmp>
 800c664:	2800      	cmp	r0, #0
 800c666:	d031      	beq.n	800c6cc <_strtod_l+0x1c4>
 800c668:	2000      	movs	r0, #0
 800c66a:	9c05      	ldr	r4, [sp, #20]
 800c66c:	9004      	str	r0, [sp, #16]
 800c66e:	463b      	mov	r3, r7
 800c670:	4602      	mov	r2, r0
 800c672:	2b65      	cmp	r3, #101	; 0x65
 800c674:	d001      	beq.n	800c67a <_strtod_l+0x172>
 800c676:	2b45      	cmp	r3, #69	; 0x45
 800c678:	d114      	bne.n	800c6a4 <_strtod_l+0x19c>
 800c67a:	b924      	cbnz	r4, 800c686 <_strtod_l+0x17e>
 800c67c:	b910      	cbnz	r0, 800c684 <_strtod_l+0x17c>
 800c67e:	9b06      	ldr	r3, [sp, #24]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d09e      	beq.n	800c5c2 <_strtod_l+0xba>
 800c684:	2400      	movs	r4, #0
 800c686:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c688:	1c73      	adds	r3, r6, #1
 800c68a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c68c:	7873      	ldrb	r3, [r6, #1]
 800c68e:	2b2b      	cmp	r3, #43	; 0x2b
 800c690:	d078      	beq.n	800c784 <_strtod_l+0x27c>
 800c692:	2b2d      	cmp	r3, #45	; 0x2d
 800c694:	d070      	beq.n	800c778 <_strtod_l+0x270>
 800c696:	f04f 0c00 	mov.w	ip, #0
 800c69a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800c69e:	2f09      	cmp	r7, #9
 800c6a0:	d97c      	bls.n	800c79c <_strtod_l+0x294>
 800c6a2:	961b      	str	r6, [sp, #108]	; 0x6c
 800c6a4:	f04f 0e00 	mov.w	lr, #0
 800c6a8:	e09a      	b.n	800c7e0 <_strtod_l+0x2d8>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	e7c7      	b.n	800c63e <_strtod_l+0x136>
 800c6ae:	9905      	ldr	r1, [sp, #20]
 800c6b0:	2908      	cmp	r1, #8
 800c6b2:	bfdd      	ittte	le
 800c6b4:	9907      	ldrle	r1, [sp, #28]
 800c6b6:	fb02 3301 	mlale	r3, r2, r1, r3
 800c6ba:	9307      	strle	r3, [sp, #28]
 800c6bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 800c6c0:	9b05      	ldr	r3, [sp, #20]
 800c6c2:	3001      	adds	r0, #1
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	9305      	str	r3, [sp, #20]
 800c6c8:	901b      	str	r0, [sp, #108]	; 0x6c
 800c6ca:	e7bf      	b.n	800c64c <_strtod_l+0x144>
 800c6cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6ce:	191a      	adds	r2, r3, r4
 800c6d0:	921b      	str	r2, [sp, #108]	; 0x6c
 800c6d2:	9a05      	ldr	r2, [sp, #20]
 800c6d4:	5d1b      	ldrb	r3, [r3, r4]
 800c6d6:	2a00      	cmp	r2, #0
 800c6d8:	d037      	beq.n	800c74a <_strtod_l+0x242>
 800c6da:	9c05      	ldr	r4, [sp, #20]
 800c6dc:	4602      	mov	r2, r0
 800c6de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c6e2:	2909      	cmp	r1, #9
 800c6e4:	d913      	bls.n	800c70e <_strtod_l+0x206>
 800c6e6:	2101      	movs	r1, #1
 800c6e8:	9104      	str	r1, [sp, #16]
 800c6ea:	e7c2      	b.n	800c672 <_strtod_l+0x16a>
 800c6ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6ee:	1c5a      	adds	r2, r3, #1
 800c6f0:	921b      	str	r2, [sp, #108]	; 0x6c
 800c6f2:	785b      	ldrb	r3, [r3, #1]
 800c6f4:	3001      	adds	r0, #1
 800c6f6:	2b30      	cmp	r3, #48	; 0x30
 800c6f8:	d0f8      	beq.n	800c6ec <_strtod_l+0x1e4>
 800c6fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c6fe:	2a08      	cmp	r2, #8
 800c700:	f200 84e4 	bhi.w	800d0cc <_strtod_l+0xbc4>
 800c704:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c706:	9208      	str	r2, [sp, #32]
 800c708:	4602      	mov	r2, r0
 800c70a:	2000      	movs	r0, #0
 800c70c:	4604      	mov	r4, r0
 800c70e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c712:	f100 0101 	add.w	r1, r0, #1
 800c716:	d012      	beq.n	800c73e <_strtod_l+0x236>
 800c718:	440a      	add	r2, r1
 800c71a:	eb00 0c04 	add.w	ip, r0, r4
 800c71e:	4621      	mov	r1, r4
 800c720:	270a      	movs	r7, #10
 800c722:	458c      	cmp	ip, r1
 800c724:	d113      	bne.n	800c74e <_strtod_l+0x246>
 800c726:	1821      	adds	r1, r4, r0
 800c728:	2908      	cmp	r1, #8
 800c72a:	f104 0401 	add.w	r4, r4, #1
 800c72e:	4404      	add	r4, r0
 800c730:	dc19      	bgt.n	800c766 <_strtod_l+0x25e>
 800c732:	9b07      	ldr	r3, [sp, #28]
 800c734:	210a      	movs	r1, #10
 800c736:	fb01 e303 	mla	r3, r1, r3, lr
 800c73a:	9307      	str	r3, [sp, #28]
 800c73c:	2100      	movs	r1, #0
 800c73e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c740:	1c58      	adds	r0, r3, #1
 800c742:	901b      	str	r0, [sp, #108]	; 0x6c
 800c744:	785b      	ldrb	r3, [r3, #1]
 800c746:	4608      	mov	r0, r1
 800c748:	e7c9      	b.n	800c6de <_strtod_l+0x1d6>
 800c74a:	9805      	ldr	r0, [sp, #20]
 800c74c:	e7d3      	b.n	800c6f6 <_strtod_l+0x1ee>
 800c74e:	2908      	cmp	r1, #8
 800c750:	f101 0101 	add.w	r1, r1, #1
 800c754:	dc03      	bgt.n	800c75e <_strtod_l+0x256>
 800c756:	9b07      	ldr	r3, [sp, #28]
 800c758:	437b      	muls	r3, r7
 800c75a:	9307      	str	r3, [sp, #28]
 800c75c:	e7e1      	b.n	800c722 <_strtod_l+0x21a>
 800c75e:	2910      	cmp	r1, #16
 800c760:	bfd8      	it	le
 800c762:	437d      	mulle	r5, r7
 800c764:	e7dd      	b.n	800c722 <_strtod_l+0x21a>
 800c766:	2c10      	cmp	r4, #16
 800c768:	bfdc      	itt	le
 800c76a:	210a      	movle	r1, #10
 800c76c:	fb01 e505 	mlale	r5, r1, r5, lr
 800c770:	e7e4      	b.n	800c73c <_strtod_l+0x234>
 800c772:	2301      	movs	r3, #1
 800c774:	9304      	str	r3, [sp, #16]
 800c776:	e781      	b.n	800c67c <_strtod_l+0x174>
 800c778:	f04f 0c01 	mov.w	ip, #1
 800c77c:	1cb3      	adds	r3, r6, #2
 800c77e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c780:	78b3      	ldrb	r3, [r6, #2]
 800c782:	e78a      	b.n	800c69a <_strtod_l+0x192>
 800c784:	f04f 0c00 	mov.w	ip, #0
 800c788:	e7f8      	b.n	800c77c <_strtod_l+0x274>
 800c78a:	bf00      	nop
 800c78c:	08011ec0 	.word	0x08011ec0
 800c790:	7ff00000 	.word	0x7ff00000
 800c794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c796:	1c5f      	adds	r7, r3, #1
 800c798:	971b      	str	r7, [sp, #108]	; 0x6c
 800c79a:	785b      	ldrb	r3, [r3, #1]
 800c79c:	2b30      	cmp	r3, #48	; 0x30
 800c79e:	d0f9      	beq.n	800c794 <_strtod_l+0x28c>
 800c7a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c7a4:	2f08      	cmp	r7, #8
 800c7a6:	f63f af7d 	bhi.w	800c6a4 <_strtod_l+0x19c>
 800c7aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c7ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7b0:	930a      	str	r3, [sp, #40]	; 0x28
 800c7b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7b4:	1c5f      	adds	r7, r3, #1
 800c7b6:	971b      	str	r7, [sp, #108]	; 0x6c
 800c7b8:	785b      	ldrb	r3, [r3, #1]
 800c7ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c7be:	f1b8 0f09 	cmp.w	r8, #9
 800c7c2:	d937      	bls.n	800c834 <_strtod_l+0x32c>
 800c7c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c7c6:	1a7f      	subs	r7, r7, r1
 800c7c8:	2f08      	cmp	r7, #8
 800c7ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c7ce:	dc37      	bgt.n	800c840 <_strtod_l+0x338>
 800c7d0:	45be      	cmp	lr, r7
 800c7d2:	bfa8      	it	ge
 800c7d4:	46be      	movge	lr, r7
 800c7d6:	f1bc 0f00 	cmp.w	ip, #0
 800c7da:	d001      	beq.n	800c7e0 <_strtod_l+0x2d8>
 800c7dc:	f1ce 0e00 	rsb	lr, lr, #0
 800c7e0:	2c00      	cmp	r4, #0
 800c7e2:	d151      	bne.n	800c888 <_strtod_l+0x380>
 800c7e4:	2800      	cmp	r0, #0
 800c7e6:	f47f aece 	bne.w	800c586 <_strtod_l+0x7e>
 800c7ea:	9a06      	ldr	r2, [sp, #24]
 800c7ec:	2a00      	cmp	r2, #0
 800c7ee:	f47f aeca 	bne.w	800c586 <_strtod_l+0x7e>
 800c7f2:	9a04      	ldr	r2, [sp, #16]
 800c7f4:	2a00      	cmp	r2, #0
 800c7f6:	f47f aee4 	bne.w	800c5c2 <_strtod_l+0xba>
 800c7fa:	2b4e      	cmp	r3, #78	; 0x4e
 800c7fc:	d027      	beq.n	800c84e <_strtod_l+0x346>
 800c7fe:	dc21      	bgt.n	800c844 <_strtod_l+0x33c>
 800c800:	2b49      	cmp	r3, #73	; 0x49
 800c802:	f47f aede 	bne.w	800c5c2 <_strtod_l+0xba>
 800c806:	49a0      	ldr	r1, [pc, #640]	; (800ca88 <_strtod_l+0x580>)
 800c808:	a81b      	add	r0, sp, #108	; 0x6c
 800c80a:	f001 fdeb 	bl	800e3e4 <__match>
 800c80e:	2800      	cmp	r0, #0
 800c810:	f43f aed7 	beq.w	800c5c2 <_strtod_l+0xba>
 800c814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c816:	499d      	ldr	r1, [pc, #628]	; (800ca8c <_strtod_l+0x584>)
 800c818:	3b01      	subs	r3, #1
 800c81a:	a81b      	add	r0, sp, #108	; 0x6c
 800c81c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c81e:	f001 fde1 	bl	800e3e4 <__match>
 800c822:	b910      	cbnz	r0, 800c82a <_strtod_l+0x322>
 800c824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c826:	3301      	adds	r3, #1
 800c828:	931b      	str	r3, [sp, #108]	; 0x6c
 800c82a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800caa0 <_strtod_l+0x598>
 800c82e:	f04f 0a00 	mov.w	sl, #0
 800c832:	e6a8      	b.n	800c586 <_strtod_l+0x7e>
 800c834:	210a      	movs	r1, #10
 800c836:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c83a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c83e:	e7b8      	b.n	800c7b2 <_strtod_l+0x2aa>
 800c840:	46be      	mov	lr, r7
 800c842:	e7c8      	b.n	800c7d6 <_strtod_l+0x2ce>
 800c844:	2b69      	cmp	r3, #105	; 0x69
 800c846:	d0de      	beq.n	800c806 <_strtod_l+0x2fe>
 800c848:	2b6e      	cmp	r3, #110	; 0x6e
 800c84a:	f47f aeba 	bne.w	800c5c2 <_strtod_l+0xba>
 800c84e:	4990      	ldr	r1, [pc, #576]	; (800ca90 <_strtod_l+0x588>)
 800c850:	a81b      	add	r0, sp, #108	; 0x6c
 800c852:	f001 fdc7 	bl	800e3e4 <__match>
 800c856:	2800      	cmp	r0, #0
 800c858:	f43f aeb3 	beq.w	800c5c2 <_strtod_l+0xba>
 800c85c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	2b28      	cmp	r3, #40	; 0x28
 800c862:	d10e      	bne.n	800c882 <_strtod_l+0x37a>
 800c864:	aa1e      	add	r2, sp, #120	; 0x78
 800c866:	498b      	ldr	r1, [pc, #556]	; (800ca94 <_strtod_l+0x58c>)
 800c868:	a81b      	add	r0, sp, #108	; 0x6c
 800c86a:	f001 fdcf 	bl	800e40c <__hexnan>
 800c86e:	2805      	cmp	r0, #5
 800c870:	d107      	bne.n	800c882 <_strtod_l+0x37a>
 800c872:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c874:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800c878:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c87c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c880:	e681      	b.n	800c586 <_strtod_l+0x7e>
 800c882:	f8df b224 	ldr.w	fp, [pc, #548]	; 800caa8 <_strtod_l+0x5a0>
 800c886:	e7d2      	b.n	800c82e <_strtod_l+0x326>
 800c888:	ebae 0302 	sub.w	r3, lr, r2
 800c88c:	9306      	str	r3, [sp, #24]
 800c88e:	9b05      	ldr	r3, [sp, #20]
 800c890:	9807      	ldr	r0, [sp, #28]
 800c892:	2b00      	cmp	r3, #0
 800c894:	bf08      	it	eq
 800c896:	4623      	moveq	r3, r4
 800c898:	2c10      	cmp	r4, #16
 800c89a:	9305      	str	r3, [sp, #20]
 800c89c:	46a0      	mov	r8, r4
 800c89e:	bfa8      	it	ge
 800c8a0:	f04f 0810 	movge.w	r8, #16
 800c8a4:	f7f3 fe3e 	bl	8000524 <__aeabi_ui2d>
 800c8a8:	2c09      	cmp	r4, #9
 800c8aa:	4682      	mov	sl, r0
 800c8ac:	468b      	mov	fp, r1
 800c8ae:	dc13      	bgt.n	800c8d8 <_strtod_l+0x3d0>
 800c8b0:	9b06      	ldr	r3, [sp, #24]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f43f ae67 	beq.w	800c586 <_strtod_l+0x7e>
 800c8b8:	9b06      	ldr	r3, [sp, #24]
 800c8ba:	dd7a      	ble.n	800c9b2 <_strtod_l+0x4aa>
 800c8bc:	2b16      	cmp	r3, #22
 800c8be:	dc61      	bgt.n	800c984 <_strtod_l+0x47c>
 800c8c0:	4a75      	ldr	r2, [pc, #468]	; (800ca98 <_strtod_l+0x590>)
 800c8c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c8c6:	e9de 0100 	ldrd	r0, r1, [lr]
 800c8ca:	4652      	mov	r2, sl
 800c8cc:	465b      	mov	r3, fp
 800c8ce:	f7f3 fea3 	bl	8000618 <__aeabi_dmul>
 800c8d2:	4682      	mov	sl, r0
 800c8d4:	468b      	mov	fp, r1
 800c8d6:	e656      	b.n	800c586 <_strtod_l+0x7e>
 800c8d8:	4b6f      	ldr	r3, [pc, #444]	; (800ca98 <_strtod_l+0x590>)
 800c8da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c8de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c8e2:	f7f3 fe99 	bl	8000618 <__aeabi_dmul>
 800c8e6:	4606      	mov	r6, r0
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	460f      	mov	r7, r1
 800c8ec:	f7f3 fe1a 	bl	8000524 <__aeabi_ui2d>
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4630      	mov	r0, r6
 800c8f6:	4639      	mov	r1, r7
 800c8f8:	f7f3 fcd8 	bl	80002ac <__adddf3>
 800c8fc:	2c0f      	cmp	r4, #15
 800c8fe:	4682      	mov	sl, r0
 800c900:	468b      	mov	fp, r1
 800c902:	ddd5      	ble.n	800c8b0 <_strtod_l+0x3a8>
 800c904:	9b06      	ldr	r3, [sp, #24]
 800c906:	eba4 0808 	sub.w	r8, r4, r8
 800c90a:	4498      	add	r8, r3
 800c90c:	f1b8 0f00 	cmp.w	r8, #0
 800c910:	f340 8096 	ble.w	800ca40 <_strtod_l+0x538>
 800c914:	f018 030f 	ands.w	r3, r8, #15
 800c918:	d00a      	beq.n	800c930 <_strtod_l+0x428>
 800c91a:	495f      	ldr	r1, [pc, #380]	; (800ca98 <_strtod_l+0x590>)
 800c91c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c920:	4652      	mov	r2, sl
 800c922:	465b      	mov	r3, fp
 800c924:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c928:	f7f3 fe76 	bl	8000618 <__aeabi_dmul>
 800c92c:	4682      	mov	sl, r0
 800c92e:	468b      	mov	fp, r1
 800c930:	f038 080f 	bics.w	r8, r8, #15
 800c934:	d073      	beq.n	800ca1e <_strtod_l+0x516>
 800c936:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c93a:	dd47      	ble.n	800c9cc <_strtod_l+0x4c4>
 800c93c:	2400      	movs	r4, #0
 800c93e:	46a0      	mov	r8, r4
 800c940:	9407      	str	r4, [sp, #28]
 800c942:	9405      	str	r4, [sp, #20]
 800c944:	2322      	movs	r3, #34	; 0x22
 800c946:	f8df b158 	ldr.w	fp, [pc, #344]	; 800caa0 <_strtod_l+0x598>
 800c94a:	f8c9 3000 	str.w	r3, [r9]
 800c94e:	f04f 0a00 	mov.w	sl, #0
 800c952:	9b07      	ldr	r3, [sp, #28]
 800c954:	2b00      	cmp	r3, #0
 800c956:	f43f ae16 	beq.w	800c586 <_strtod_l+0x7e>
 800c95a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c95c:	4648      	mov	r0, r9
 800c95e:	f001 fe41 	bl	800e5e4 <_Bfree>
 800c962:	9905      	ldr	r1, [sp, #20]
 800c964:	4648      	mov	r0, r9
 800c966:	f001 fe3d 	bl	800e5e4 <_Bfree>
 800c96a:	4641      	mov	r1, r8
 800c96c:	4648      	mov	r0, r9
 800c96e:	f001 fe39 	bl	800e5e4 <_Bfree>
 800c972:	9907      	ldr	r1, [sp, #28]
 800c974:	4648      	mov	r0, r9
 800c976:	f001 fe35 	bl	800e5e4 <_Bfree>
 800c97a:	4621      	mov	r1, r4
 800c97c:	4648      	mov	r0, r9
 800c97e:	f001 fe31 	bl	800e5e4 <_Bfree>
 800c982:	e600      	b.n	800c586 <_strtod_l+0x7e>
 800c984:	9a06      	ldr	r2, [sp, #24]
 800c986:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c98a:	4293      	cmp	r3, r2
 800c98c:	dbba      	blt.n	800c904 <_strtod_l+0x3fc>
 800c98e:	4d42      	ldr	r5, [pc, #264]	; (800ca98 <_strtod_l+0x590>)
 800c990:	f1c4 040f 	rsb	r4, r4, #15
 800c994:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c998:	4652      	mov	r2, sl
 800c99a:	465b      	mov	r3, fp
 800c99c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9a0:	f7f3 fe3a 	bl	8000618 <__aeabi_dmul>
 800c9a4:	9b06      	ldr	r3, [sp, #24]
 800c9a6:	1b1c      	subs	r4, r3, r4
 800c9a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c9ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9b0:	e78d      	b.n	800c8ce <_strtod_l+0x3c6>
 800c9b2:	f113 0f16 	cmn.w	r3, #22
 800c9b6:	dba5      	blt.n	800c904 <_strtod_l+0x3fc>
 800c9b8:	4a37      	ldr	r2, [pc, #220]	; (800ca98 <_strtod_l+0x590>)
 800c9ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c9be:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c9c2:	4650      	mov	r0, sl
 800c9c4:	4659      	mov	r1, fp
 800c9c6:	f7f3 ff51 	bl	800086c <__aeabi_ddiv>
 800c9ca:	e782      	b.n	800c8d2 <_strtod_l+0x3ca>
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	4e33      	ldr	r6, [pc, #204]	; (800ca9c <_strtod_l+0x594>)
 800c9d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c9d4:	4650      	mov	r0, sl
 800c9d6:	4659      	mov	r1, fp
 800c9d8:	461d      	mov	r5, r3
 800c9da:	f1b8 0f01 	cmp.w	r8, #1
 800c9de:	dc21      	bgt.n	800ca24 <_strtod_l+0x51c>
 800c9e0:	b10b      	cbz	r3, 800c9e6 <_strtod_l+0x4de>
 800c9e2:	4682      	mov	sl, r0
 800c9e4:	468b      	mov	fp, r1
 800c9e6:	4b2d      	ldr	r3, [pc, #180]	; (800ca9c <_strtod_l+0x594>)
 800c9e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c9ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c9f0:	4652      	mov	r2, sl
 800c9f2:	465b      	mov	r3, fp
 800c9f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c9f8:	f7f3 fe0e 	bl	8000618 <__aeabi_dmul>
 800c9fc:	4b28      	ldr	r3, [pc, #160]	; (800caa0 <_strtod_l+0x598>)
 800c9fe:	460a      	mov	r2, r1
 800ca00:	400b      	ands	r3, r1
 800ca02:	4928      	ldr	r1, [pc, #160]	; (800caa4 <_strtod_l+0x59c>)
 800ca04:	428b      	cmp	r3, r1
 800ca06:	4682      	mov	sl, r0
 800ca08:	d898      	bhi.n	800c93c <_strtod_l+0x434>
 800ca0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ca0e:	428b      	cmp	r3, r1
 800ca10:	bf86      	itte	hi
 800ca12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800caac <_strtod_l+0x5a4>
 800ca16:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800ca1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ca1e:	2300      	movs	r3, #0
 800ca20:	9304      	str	r3, [sp, #16]
 800ca22:	e077      	b.n	800cb14 <_strtod_l+0x60c>
 800ca24:	f018 0f01 	tst.w	r8, #1
 800ca28:	d006      	beq.n	800ca38 <_strtod_l+0x530>
 800ca2a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	f7f3 fdf1 	bl	8000618 <__aeabi_dmul>
 800ca36:	2301      	movs	r3, #1
 800ca38:	3501      	adds	r5, #1
 800ca3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ca3e:	e7cc      	b.n	800c9da <_strtod_l+0x4d2>
 800ca40:	d0ed      	beq.n	800ca1e <_strtod_l+0x516>
 800ca42:	f1c8 0800 	rsb	r8, r8, #0
 800ca46:	f018 020f 	ands.w	r2, r8, #15
 800ca4a:	d00a      	beq.n	800ca62 <_strtod_l+0x55a>
 800ca4c:	4b12      	ldr	r3, [pc, #72]	; (800ca98 <_strtod_l+0x590>)
 800ca4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca52:	4650      	mov	r0, sl
 800ca54:	4659      	mov	r1, fp
 800ca56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5a:	f7f3 ff07 	bl	800086c <__aeabi_ddiv>
 800ca5e:	4682      	mov	sl, r0
 800ca60:	468b      	mov	fp, r1
 800ca62:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ca66:	d0da      	beq.n	800ca1e <_strtod_l+0x516>
 800ca68:	f1b8 0f1f 	cmp.w	r8, #31
 800ca6c:	dd20      	ble.n	800cab0 <_strtod_l+0x5a8>
 800ca6e:	2400      	movs	r4, #0
 800ca70:	46a0      	mov	r8, r4
 800ca72:	9407      	str	r4, [sp, #28]
 800ca74:	9405      	str	r4, [sp, #20]
 800ca76:	2322      	movs	r3, #34	; 0x22
 800ca78:	f04f 0a00 	mov.w	sl, #0
 800ca7c:	f04f 0b00 	mov.w	fp, #0
 800ca80:	f8c9 3000 	str.w	r3, [r9]
 800ca84:	e765      	b.n	800c952 <_strtod_l+0x44a>
 800ca86:	bf00      	nop
 800ca88:	08011e89 	.word	0x08011e89
 800ca8c:	08011f13 	.word	0x08011f13
 800ca90:	08011e91 	.word	0x08011e91
 800ca94:	08011ed4 	.word	0x08011ed4
 800ca98:	08011f50 	.word	0x08011f50
 800ca9c:	08011f28 	.word	0x08011f28
 800caa0:	7ff00000 	.word	0x7ff00000
 800caa4:	7ca00000 	.word	0x7ca00000
 800caa8:	fff80000 	.word	0xfff80000
 800caac:	7fefffff 	.word	0x7fefffff
 800cab0:	f018 0310 	ands.w	r3, r8, #16
 800cab4:	bf18      	it	ne
 800cab6:	236a      	movne	r3, #106	; 0x6a
 800cab8:	4da0      	ldr	r5, [pc, #640]	; (800cd3c <_strtod_l+0x834>)
 800caba:	9304      	str	r3, [sp, #16]
 800cabc:	4650      	mov	r0, sl
 800cabe:	4659      	mov	r1, fp
 800cac0:	2300      	movs	r3, #0
 800cac2:	f1b8 0f00 	cmp.w	r8, #0
 800cac6:	f300 810a 	bgt.w	800ccde <_strtod_l+0x7d6>
 800caca:	b10b      	cbz	r3, 800cad0 <_strtod_l+0x5c8>
 800cacc:	4682      	mov	sl, r0
 800cace:	468b      	mov	fp, r1
 800cad0:	9b04      	ldr	r3, [sp, #16]
 800cad2:	b1bb      	cbz	r3, 800cb04 <_strtod_l+0x5fc>
 800cad4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800cad8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cadc:	2b00      	cmp	r3, #0
 800cade:	4659      	mov	r1, fp
 800cae0:	dd10      	ble.n	800cb04 <_strtod_l+0x5fc>
 800cae2:	2b1f      	cmp	r3, #31
 800cae4:	f340 8107 	ble.w	800ccf6 <_strtod_l+0x7ee>
 800cae8:	2b34      	cmp	r3, #52	; 0x34
 800caea:	bfde      	ittt	le
 800caec:	3b20      	suble	r3, #32
 800caee:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800caf2:	fa02 f303 	lslle.w	r3, r2, r3
 800caf6:	f04f 0a00 	mov.w	sl, #0
 800cafa:	bfcc      	ite	gt
 800cafc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cb00:	ea03 0b01 	andle.w	fp, r3, r1
 800cb04:	2200      	movs	r2, #0
 800cb06:	2300      	movs	r3, #0
 800cb08:	4650      	mov	r0, sl
 800cb0a:	4659      	mov	r1, fp
 800cb0c:	f7f3 ffec 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb10:	2800      	cmp	r0, #0
 800cb12:	d1ac      	bne.n	800ca6e <_strtod_l+0x566>
 800cb14:	9b07      	ldr	r3, [sp, #28]
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	9a05      	ldr	r2, [sp, #20]
 800cb1a:	9908      	ldr	r1, [sp, #32]
 800cb1c:	4623      	mov	r3, r4
 800cb1e:	4648      	mov	r0, r9
 800cb20:	f001 fdb2 	bl	800e688 <__s2b>
 800cb24:	9007      	str	r0, [sp, #28]
 800cb26:	2800      	cmp	r0, #0
 800cb28:	f43f af08 	beq.w	800c93c <_strtod_l+0x434>
 800cb2c:	9a06      	ldr	r2, [sp, #24]
 800cb2e:	9b06      	ldr	r3, [sp, #24]
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	f1c3 0300 	rsb	r3, r3, #0
 800cb36:	bfa8      	it	ge
 800cb38:	2300      	movge	r3, #0
 800cb3a:	930e      	str	r3, [sp, #56]	; 0x38
 800cb3c:	2400      	movs	r4, #0
 800cb3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cb42:	9316      	str	r3, [sp, #88]	; 0x58
 800cb44:	46a0      	mov	r8, r4
 800cb46:	9b07      	ldr	r3, [sp, #28]
 800cb48:	4648      	mov	r0, r9
 800cb4a:	6859      	ldr	r1, [r3, #4]
 800cb4c:	f001 fd16 	bl	800e57c <_Balloc>
 800cb50:	9005      	str	r0, [sp, #20]
 800cb52:	2800      	cmp	r0, #0
 800cb54:	f43f aef6 	beq.w	800c944 <_strtod_l+0x43c>
 800cb58:	9b07      	ldr	r3, [sp, #28]
 800cb5a:	691a      	ldr	r2, [r3, #16]
 800cb5c:	3202      	adds	r2, #2
 800cb5e:	f103 010c 	add.w	r1, r3, #12
 800cb62:	0092      	lsls	r2, r2, #2
 800cb64:	300c      	adds	r0, #12
 800cb66:	f7fe fd35 	bl	800b5d4 <memcpy>
 800cb6a:	aa1e      	add	r2, sp, #120	; 0x78
 800cb6c:	a91d      	add	r1, sp, #116	; 0x74
 800cb6e:	ec4b ab10 	vmov	d0, sl, fp
 800cb72:	4648      	mov	r0, r9
 800cb74:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800cb78:	f002 f842 	bl	800ec00 <__d2b>
 800cb7c:	901c      	str	r0, [sp, #112]	; 0x70
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	f43f aee0 	beq.w	800c944 <_strtod_l+0x43c>
 800cb84:	2101      	movs	r1, #1
 800cb86:	4648      	mov	r0, r9
 800cb88:	f001 fe0a 	bl	800e7a0 <__i2b>
 800cb8c:	4680      	mov	r8, r0
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	f43f aed8 	beq.w	800c944 <_strtod_l+0x43c>
 800cb94:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800cb96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cb98:	2e00      	cmp	r6, #0
 800cb9a:	bfab      	itete	ge
 800cb9c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800cb9e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800cba0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800cba2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800cba4:	bfac      	ite	ge
 800cba6:	18f7      	addge	r7, r6, r3
 800cba8:	1b9d      	sublt	r5, r3, r6
 800cbaa:	9b04      	ldr	r3, [sp, #16]
 800cbac:	1af6      	subs	r6, r6, r3
 800cbae:	4416      	add	r6, r2
 800cbb0:	4b63      	ldr	r3, [pc, #396]	; (800cd40 <_strtod_l+0x838>)
 800cbb2:	3e01      	subs	r6, #1
 800cbb4:	429e      	cmp	r6, r3
 800cbb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cbba:	f280 80af 	bge.w	800cd1c <_strtod_l+0x814>
 800cbbe:	1b9b      	subs	r3, r3, r6
 800cbc0:	2b1f      	cmp	r3, #31
 800cbc2:	eba2 0203 	sub.w	r2, r2, r3
 800cbc6:	f04f 0101 	mov.w	r1, #1
 800cbca:	f300 809b 	bgt.w	800cd04 <_strtod_l+0x7fc>
 800cbce:	fa01 f303 	lsl.w	r3, r1, r3
 800cbd2:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	930a      	str	r3, [sp, #40]	; 0x28
 800cbd8:	18be      	adds	r6, r7, r2
 800cbda:	9b04      	ldr	r3, [sp, #16]
 800cbdc:	42b7      	cmp	r7, r6
 800cbde:	4415      	add	r5, r2
 800cbe0:	441d      	add	r5, r3
 800cbe2:	463b      	mov	r3, r7
 800cbe4:	bfa8      	it	ge
 800cbe6:	4633      	movge	r3, r6
 800cbe8:	42ab      	cmp	r3, r5
 800cbea:	bfa8      	it	ge
 800cbec:	462b      	movge	r3, r5
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	bfc2      	ittt	gt
 800cbf2:	1af6      	subgt	r6, r6, r3
 800cbf4:	1aed      	subgt	r5, r5, r3
 800cbf6:	1aff      	subgt	r7, r7, r3
 800cbf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbfa:	b1bb      	cbz	r3, 800cc2c <_strtod_l+0x724>
 800cbfc:	4641      	mov	r1, r8
 800cbfe:	461a      	mov	r2, r3
 800cc00:	4648      	mov	r0, r9
 800cc02:	f001 fe6d 	bl	800e8e0 <__pow5mult>
 800cc06:	4680      	mov	r8, r0
 800cc08:	2800      	cmp	r0, #0
 800cc0a:	f43f ae9b 	beq.w	800c944 <_strtod_l+0x43c>
 800cc0e:	4601      	mov	r1, r0
 800cc10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cc12:	4648      	mov	r0, r9
 800cc14:	f001 fdcd 	bl	800e7b2 <__multiply>
 800cc18:	900c      	str	r0, [sp, #48]	; 0x30
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	f43f ae92 	beq.w	800c944 <_strtod_l+0x43c>
 800cc20:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc22:	4648      	mov	r0, r9
 800cc24:	f001 fcde 	bl	800e5e4 <_Bfree>
 800cc28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc2a:	931c      	str	r3, [sp, #112]	; 0x70
 800cc2c:	2e00      	cmp	r6, #0
 800cc2e:	dc7a      	bgt.n	800cd26 <_strtod_l+0x81e>
 800cc30:	9b06      	ldr	r3, [sp, #24]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	dd08      	ble.n	800cc48 <_strtod_l+0x740>
 800cc36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800cc38:	9905      	ldr	r1, [sp, #20]
 800cc3a:	4648      	mov	r0, r9
 800cc3c:	f001 fe50 	bl	800e8e0 <__pow5mult>
 800cc40:	9005      	str	r0, [sp, #20]
 800cc42:	2800      	cmp	r0, #0
 800cc44:	f43f ae7e 	beq.w	800c944 <_strtod_l+0x43c>
 800cc48:	2d00      	cmp	r5, #0
 800cc4a:	dd08      	ble.n	800cc5e <_strtod_l+0x756>
 800cc4c:	462a      	mov	r2, r5
 800cc4e:	9905      	ldr	r1, [sp, #20]
 800cc50:	4648      	mov	r0, r9
 800cc52:	f001 fe93 	bl	800e97c <__lshift>
 800cc56:	9005      	str	r0, [sp, #20]
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	f43f ae73 	beq.w	800c944 <_strtod_l+0x43c>
 800cc5e:	2f00      	cmp	r7, #0
 800cc60:	dd08      	ble.n	800cc74 <_strtod_l+0x76c>
 800cc62:	4641      	mov	r1, r8
 800cc64:	463a      	mov	r2, r7
 800cc66:	4648      	mov	r0, r9
 800cc68:	f001 fe88 	bl	800e97c <__lshift>
 800cc6c:	4680      	mov	r8, r0
 800cc6e:	2800      	cmp	r0, #0
 800cc70:	f43f ae68 	beq.w	800c944 <_strtod_l+0x43c>
 800cc74:	9a05      	ldr	r2, [sp, #20]
 800cc76:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc78:	4648      	mov	r0, r9
 800cc7a:	f001 feed 	bl	800ea58 <__mdiff>
 800cc7e:	4604      	mov	r4, r0
 800cc80:	2800      	cmp	r0, #0
 800cc82:	f43f ae5f 	beq.w	800c944 <_strtod_l+0x43c>
 800cc86:	68c3      	ldr	r3, [r0, #12]
 800cc88:	930c      	str	r3, [sp, #48]	; 0x30
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	60c3      	str	r3, [r0, #12]
 800cc8e:	4641      	mov	r1, r8
 800cc90:	f001 fec8 	bl	800ea24 <__mcmp>
 800cc94:	2800      	cmp	r0, #0
 800cc96:	da55      	bge.n	800cd44 <_strtod_l+0x83c>
 800cc98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc9a:	b9e3      	cbnz	r3, 800ccd6 <_strtod_l+0x7ce>
 800cc9c:	f1ba 0f00 	cmp.w	sl, #0
 800cca0:	d119      	bne.n	800ccd6 <_strtod_l+0x7ce>
 800cca2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cca6:	b9b3      	cbnz	r3, 800ccd6 <_strtod_l+0x7ce>
 800cca8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ccac:	0d1b      	lsrs	r3, r3, #20
 800ccae:	051b      	lsls	r3, r3, #20
 800ccb0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ccb4:	d90f      	bls.n	800ccd6 <_strtod_l+0x7ce>
 800ccb6:	6963      	ldr	r3, [r4, #20]
 800ccb8:	b913      	cbnz	r3, 800ccc0 <_strtod_l+0x7b8>
 800ccba:	6923      	ldr	r3, [r4, #16]
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	dd0a      	ble.n	800ccd6 <_strtod_l+0x7ce>
 800ccc0:	4621      	mov	r1, r4
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	4648      	mov	r0, r9
 800ccc6:	f001 fe59 	bl	800e97c <__lshift>
 800ccca:	4641      	mov	r1, r8
 800cccc:	4604      	mov	r4, r0
 800ccce:	f001 fea9 	bl	800ea24 <__mcmp>
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	dc67      	bgt.n	800cda6 <_strtod_l+0x89e>
 800ccd6:	9b04      	ldr	r3, [sp, #16]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d171      	bne.n	800cdc0 <_strtod_l+0x8b8>
 800ccdc:	e63d      	b.n	800c95a <_strtod_l+0x452>
 800ccde:	f018 0f01 	tst.w	r8, #1
 800cce2:	d004      	beq.n	800ccee <_strtod_l+0x7e6>
 800cce4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cce8:	f7f3 fc96 	bl	8000618 <__aeabi_dmul>
 800ccec:	2301      	movs	r3, #1
 800ccee:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ccf2:	3508      	adds	r5, #8
 800ccf4:	e6e5      	b.n	800cac2 <_strtod_l+0x5ba>
 800ccf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccfa:	fa02 f303 	lsl.w	r3, r2, r3
 800ccfe:	ea03 0a0a 	and.w	sl, r3, sl
 800cd02:	e6ff      	b.n	800cb04 <_strtod_l+0x5fc>
 800cd04:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800cd08:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800cd0c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800cd10:	36e2      	adds	r6, #226	; 0xe2
 800cd12:	fa01 f306 	lsl.w	r3, r1, r6
 800cd16:	930a      	str	r3, [sp, #40]	; 0x28
 800cd18:	910f      	str	r1, [sp, #60]	; 0x3c
 800cd1a:	e75d      	b.n	800cbd8 <_strtod_l+0x6d0>
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	930a      	str	r3, [sp, #40]	; 0x28
 800cd20:	2301      	movs	r3, #1
 800cd22:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd24:	e758      	b.n	800cbd8 <_strtod_l+0x6d0>
 800cd26:	4632      	mov	r2, r6
 800cd28:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd2a:	4648      	mov	r0, r9
 800cd2c:	f001 fe26 	bl	800e97c <__lshift>
 800cd30:	901c      	str	r0, [sp, #112]	; 0x70
 800cd32:	2800      	cmp	r0, #0
 800cd34:	f47f af7c 	bne.w	800cc30 <_strtod_l+0x728>
 800cd38:	e604      	b.n	800c944 <_strtod_l+0x43c>
 800cd3a:	bf00      	nop
 800cd3c:	08011ee8 	.word	0x08011ee8
 800cd40:	fffffc02 	.word	0xfffffc02
 800cd44:	465d      	mov	r5, fp
 800cd46:	f040 8086 	bne.w	800ce56 <_strtod_l+0x94e>
 800cd4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cd50:	b32a      	cbz	r2, 800cd9e <_strtod_l+0x896>
 800cd52:	4aaf      	ldr	r2, [pc, #700]	; (800d010 <_strtod_l+0xb08>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d153      	bne.n	800ce00 <_strtod_l+0x8f8>
 800cd58:	9b04      	ldr	r3, [sp, #16]
 800cd5a:	4650      	mov	r0, sl
 800cd5c:	b1d3      	cbz	r3, 800cd94 <_strtod_l+0x88c>
 800cd5e:	4aad      	ldr	r2, [pc, #692]	; (800d014 <_strtod_l+0xb0c>)
 800cd60:	402a      	ands	r2, r5
 800cd62:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800cd66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800cd6a:	d816      	bhi.n	800cd9a <_strtod_l+0x892>
 800cd6c:	0d12      	lsrs	r2, r2, #20
 800cd6e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800cd72:	fa01 f303 	lsl.w	r3, r1, r3
 800cd76:	4298      	cmp	r0, r3
 800cd78:	d142      	bne.n	800ce00 <_strtod_l+0x8f8>
 800cd7a:	4ba7      	ldr	r3, [pc, #668]	; (800d018 <_strtod_l+0xb10>)
 800cd7c:	429d      	cmp	r5, r3
 800cd7e:	d102      	bne.n	800cd86 <_strtod_l+0x87e>
 800cd80:	3001      	adds	r0, #1
 800cd82:	f43f addf 	beq.w	800c944 <_strtod_l+0x43c>
 800cd86:	4ba3      	ldr	r3, [pc, #652]	; (800d014 <_strtod_l+0xb0c>)
 800cd88:	402b      	ands	r3, r5
 800cd8a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cd8e:	f04f 0a00 	mov.w	sl, #0
 800cd92:	e7a0      	b.n	800ccd6 <_strtod_l+0x7ce>
 800cd94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd98:	e7ed      	b.n	800cd76 <_strtod_l+0x86e>
 800cd9a:	460b      	mov	r3, r1
 800cd9c:	e7eb      	b.n	800cd76 <_strtod_l+0x86e>
 800cd9e:	bb7b      	cbnz	r3, 800ce00 <_strtod_l+0x8f8>
 800cda0:	f1ba 0f00 	cmp.w	sl, #0
 800cda4:	d12c      	bne.n	800ce00 <_strtod_l+0x8f8>
 800cda6:	9904      	ldr	r1, [sp, #16]
 800cda8:	4a9a      	ldr	r2, [pc, #616]	; (800d014 <_strtod_l+0xb0c>)
 800cdaa:	465b      	mov	r3, fp
 800cdac:	b1f1      	cbz	r1, 800cdec <_strtod_l+0x8e4>
 800cdae:	ea02 010b 	and.w	r1, r2, fp
 800cdb2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cdb6:	dc19      	bgt.n	800cdec <_strtod_l+0x8e4>
 800cdb8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cdbc:	f77f ae5b 	ble.w	800ca76 <_strtod_l+0x56e>
 800cdc0:	4a96      	ldr	r2, [pc, #600]	; (800d01c <_strtod_l+0xb14>)
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800cdc8:	4650      	mov	r0, sl
 800cdca:	4659      	mov	r1, fp
 800cdcc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cdd0:	f7f3 fc22 	bl	8000618 <__aeabi_dmul>
 800cdd4:	4682      	mov	sl, r0
 800cdd6:	468b      	mov	fp, r1
 800cdd8:	2900      	cmp	r1, #0
 800cdda:	f47f adbe 	bne.w	800c95a <_strtod_l+0x452>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	f47f adbb 	bne.w	800c95a <_strtod_l+0x452>
 800cde4:	2322      	movs	r3, #34	; 0x22
 800cde6:	f8c9 3000 	str.w	r3, [r9]
 800cdea:	e5b6      	b.n	800c95a <_strtod_l+0x452>
 800cdec:	4013      	ands	r3, r2
 800cdee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cdf2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cdf6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cdfa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cdfe:	e76a      	b.n	800ccd6 <_strtod_l+0x7ce>
 800ce00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce02:	b193      	cbz	r3, 800ce2a <_strtod_l+0x922>
 800ce04:	422b      	tst	r3, r5
 800ce06:	f43f af66 	beq.w	800ccd6 <_strtod_l+0x7ce>
 800ce0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce0c:	9a04      	ldr	r2, [sp, #16]
 800ce0e:	4650      	mov	r0, sl
 800ce10:	4659      	mov	r1, fp
 800ce12:	b173      	cbz	r3, 800ce32 <_strtod_l+0x92a>
 800ce14:	f7ff fb59 	bl	800c4ca <sulp>
 800ce18:	4602      	mov	r2, r0
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ce20:	f7f3 fa44 	bl	80002ac <__adddf3>
 800ce24:	4682      	mov	sl, r0
 800ce26:	468b      	mov	fp, r1
 800ce28:	e755      	b.n	800ccd6 <_strtod_l+0x7ce>
 800ce2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce2c:	ea13 0f0a 	tst.w	r3, sl
 800ce30:	e7e9      	b.n	800ce06 <_strtod_l+0x8fe>
 800ce32:	f7ff fb4a 	bl	800c4ca <sulp>
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ce3e:	f7f3 fa33 	bl	80002a8 <__aeabi_dsub>
 800ce42:	2200      	movs	r2, #0
 800ce44:	2300      	movs	r3, #0
 800ce46:	4682      	mov	sl, r0
 800ce48:	468b      	mov	fp, r1
 800ce4a:	f7f3 fe4d 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	f47f ae11 	bne.w	800ca76 <_strtod_l+0x56e>
 800ce54:	e73f      	b.n	800ccd6 <_strtod_l+0x7ce>
 800ce56:	4641      	mov	r1, r8
 800ce58:	4620      	mov	r0, r4
 800ce5a:	f001 ff20 	bl	800ec9e <__ratio>
 800ce5e:	ec57 6b10 	vmov	r6, r7, d0
 800ce62:	2200      	movs	r2, #0
 800ce64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ce68:	ee10 0a10 	vmov	r0, s0
 800ce6c:	4639      	mov	r1, r7
 800ce6e:	f7f3 fe4f 	bl	8000b10 <__aeabi_dcmple>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d077      	beq.n	800cf66 <_strtod_l+0xa5e>
 800ce76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d04a      	beq.n	800cf12 <_strtod_l+0xa0a>
 800ce7c:	4b68      	ldr	r3, [pc, #416]	; (800d020 <_strtod_l+0xb18>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ce84:	4f66      	ldr	r7, [pc, #408]	; (800d020 <_strtod_l+0xb18>)
 800ce86:	2600      	movs	r6, #0
 800ce88:	4b62      	ldr	r3, [pc, #392]	; (800d014 <_strtod_l+0xb0c>)
 800ce8a:	402b      	ands	r3, r5
 800ce8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ce90:	4b64      	ldr	r3, [pc, #400]	; (800d024 <_strtod_l+0xb1c>)
 800ce92:	429a      	cmp	r2, r3
 800ce94:	f040 80ce 	bne.w	800d034 <_strtod_l+0xb2c>
 800ce98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ce9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cea0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800cea4:	ec4b ab10 	vmov	d0, sl, fp
 800cea8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ceac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ceb0:	f001 fe30 	bl	800eb14 <__ulp>
 800ceb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ceb8:	ec53 2b10 	vmov	r2, r3, d0
 800cebc:	f7f3 fbac 	bl	8000618 <__aeabi_dmul>
 800cec0:	4652      	mov	r2, sl
 800cec2:	465b      	mov	r3, fp
 800cec4:	f7f3 f9f2 	bl	80002ac <__adddf3>
 800cec8:	460b      	mov	r3, r1
 800ceca:	4952      	ldr	r1, [pc, #328]	; (800d014 <_strtod_l+0xb0c>)
 800cecc:	4a56      	ldr	r2, [pc, #344]	; (800d028 <_strtod_l+0xb20>)
 800cece:	4019      	ands	r1, r3
 800ced0:	4291      	cmp	r1, r2
 800ced2:	4682      	mov	sl, r0
 800ced4:	d95b      	bls.n	800cf8e <_strtod_l+0xa86>
 800ced6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ced8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cedc:	4293      	cmp	r3, r2
 800cede:	d103      	bne.n	800cee8 <_strtod_l+0x9e0>
 800cee0:	9b08      	ldr	r3, [sp, #32]
 800cee2:	3301      	adds	r3, #1
 800cee4:	f43f ad2e 	beq.w	800c944 <_strtod_l+0x43c>
 800cee8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800d018 <_strtod_l+0xb10>
 800ceec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800cef0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cef2:	4648      	mov	r0, r9
 800cef4:	f001 fb76 	bl	800e5e4 <_Bfree>
 800cef8:	9905      	ldr	r1, [sp, #20]
 800cefa:	4648      	mov	r0, r9
 800cefc:	f001 fb72 	bl	800e5e4 <_Bfree>
 800cf00:	4641      	mov	r1, r8
 800cf02:	4648      	mov	r0, r9
 800cf04:	f001 fb6e 	bl	800e5e4 <_Bfree>
 800cf08:	4621      	mov	r1, r4
 800cf0a:	4648      	mov	r0, r9
 800cf0c:	f001 fb6a 	bl	800e5e4 <_Bfree>
 800cf10:	e619      	b.n	800cb46 <_strtod_l+0x63e>
 800cf12:	f1ba 0f00 	cmp.w	sl, #0
 800cf16:	d11a      	bne.n	800cf4e <_strtod_l+0xa46>
 800cf18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf1c:	b9eb      	cbnz	r3, 800cf5a <_strtod_l+0xa52>
 800cf1e:	2200      	movs	r2, #0
 800cf20:	4b3f      	ldr	r3, [pc, #252]	; (800d020 <_strtod_l+0xb18>)
 800cf22:	4630      	mov	r0, r6
 800cf24:	4639      	mov	r1, r7
 800cf26:	f7f3 fde9 	bl	8000afc <__aeabi_dcmplt>
 800cf2a:	b9c8      	cbnz	r0, 800cf60 <_strtod_l+0xa58>
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	4639      	mov	r1, r7
 800cf30:	2200      	movs	r2, #0
 800cf32:	4b3e      	ldr	r3, [pc, #248]	; (800d02c <_strtod_l+0xb24>)
 800cf34:	f7f3 fb70 	bl	8000618 <__aeabi_dmul>
 800cf38:	4606      	mov	r6, r0
 800cf3a:	460f      	mov	r7, r1
 800cf3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cf40:	9618      	str	r6, [sp, #96]	; 0x60
 800cf42:	9319      	str	r3, [sp, #100]	; 0x64
 800cf44:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800cf48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cf4c:	e79c      	b.n	800ce88 <_strtod_l+0x980>
 800cf4e:	f1ba 0f01 	cmp.w	sl, #1
 800cf52:	d102      	bne.n	800cf5a <_strtod_l+0xa52>
 800cf54:	2d00      	cmp	r5, #0
 800cf56:	f43f ad8e 	beq.w	800ca76 <_strtod_l+0x56e>
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	4b34      	ldr	r3, [pc, #208]	; (800d030 <_strtod_l+0xb28>)
 800cf5e:	e78f      	b.n	800ce80 <_strtod_l+0x978>
 800cf60:	2600      	movs	r6, #0
 800cf62:	4f32      	ldr	r7, [pc, #200]	; (800d02c <_strtod_l+0xb24>)
 800cf64:	e7ea      	b.n	800cf3c <_strtod_l+0xa34>
 800cf66:	4b31      	ldr	r3, [pc, #196]	; (800d02c <_strtod_l+0xb24>)
 800cf68:	4630      	mov	r0, r6
 800cf6a:	4639      	mov	r1, r7
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f7f3 fb53 	bl	8000618 <__aeabi_dmul>
 800cf72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf74:	4606      	mov	r6, r0
 800cf76:	460f      	mov	r7, r1
 800cf78:	b933      	cbnz	r3, 800cf88 <_strtod_l+0xa80>
 800cf7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cf7e:	9010      	str	r0, [sp, #64]	; 0x40
 800cf80:	9311      	str	r3, [sp, #68]	; 0x44
 800cf82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cf86:	e7df      	b.n	800cf48 <_strtod_l+0xa40>
 800cf88:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800cf8c:	e7f9      	b.n	800cf82 <_strtod_l+0xa7a>
 800cf8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cf92:	9b04      	ldr	r3, [sp, #16]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d1ab      	bne.n	800cef0 <_strtod_l+0x9e8>
 800cf98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf9c:	0d1b      	lsrs	r3, r3, #20
 800cf9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cfa0:	051b      	lsls	r3, r3, #20
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	465d      	mov	r5, fp
 800cfa6:	d1a3      	bne.n	800cef0 <_strtod_l+0x9e8>
 800cfa8:	4639      	mov	r1, r7
 800cfaa:	4630      	mov	r0, r6
 800cfac:	f7f3 fde4 	bl	8000b78 <__aeabi_d2iz>
 800cfb0:	f7f3 fac8 	bl	8000544 <__aeabi_i2d>
 800cfb4:	460b      	mov	r3, r1
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	4639      	mov	r1, r7
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f7f3 f974 	bl	80002a8 <__aeabi_dsub>
 800cfc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfc2:	4606      	mov	r6, r0
 800cfc4:	460f      	mov	r7, r1
 800cfc6:	b933      	cbnz	r3, 800cfd6 <_strtod_l+0xace>
 800cfc8:	f1ba 0f00 	cmp.w	sl, #0
 800cfcc:	d103      	bne.n	800cfd6 <_strtod_l+0xace>
 800cfce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800cfd2:	2d00      	cmp	r5, #0
 800cfd4:	d06d      	beq.n	800d0b2 <_strtod_l+0xbaa>
 800cfd6:	a30a      	add	r3, pc, #40	; (adr r3, 800d000 <_strtod_l+0xaf8>)
 800cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfdc:	4630      	mov	r0, r6
 800cfde:	4639      	mov	r1, r7
 800cfe0:	f7f3 fd8c 	bl	8000afc <__aeabi_dcmplt>
 800cfe4:	2800      	cmp	r0, #0
 800cfe6:	f47f acb8 	bne.w	800c95a <_strtod_l+0x452>
 800cfea:	a307      	add	r3, pc, #28	; (adr r3, 800d008 <_strtod_l+0xb00>)
 800cfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff0:	4630      	mov	r0, r6
 800cff2:	4639      	mov	r1, r7
 800cff4:	f7f3 fda0 	bl	8000b38 <__aeabi_dcmpgt>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	f43f af79 	beq.w	800cef0 <_strtod_l+0x9e8>
 800cffe:	e4ac      	b.n	800c95a <_strtod_l+0x452>
 800d000:	94a03595 	.word	0x94a03595
 800d004:	3fdfffff 	.word	0x3fdfffff
 800d008:	35afe535 	.word	0x35afe535
 800d00c:	3fe00000 	.word	0x3fe00000
 800d010:	000fffff 	.word	0x000fffff
 800d014:	7ff00000 	.word	0x7ff00000
 800d018:	7fefffff 	.word	0x7fefffff
 800d01c:	39500000 	.word	0x39500000
 800d020:	3ff00000 	.word	0x3ff00000
 800d024:	7fe00000 	.word	0x7fe00000
 800d028:	7c9fffff 	.word	0x7c9fffff
 800d02c:	3fe00000 	.word	0x3fe00000
 800d030:	bff00000 	.word	0xbff00000
 800d034:	9b04      	ldr	r3, [sp, #16]
 800d036:	b333      	cbz	r3, 800d086 <_strtod_l+0xb7e>
 800d038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d03a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d03e:	d822      	bhi.n	800d086 <_strtod_l+0xb7e>
 800d040:	a327      	add	r3, pc, #156	; (adr r3, 800d0e0 <_strtod_l+0xbd8>)
 800d042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d046:	4630      	mov	r0, r6
 800d048:	4639      	mov	r1, r7
 800d04a:	f7f3 fd61 	bl	8000b10 <__aeabi_dcmple>
 800d04e:	b1a0      	cbz	r0, 800d07a <_strtod_l+0xb72>
 800d050:	4639      	mov	r1, r7
 800d052:	4630      	mov	r0, r6
 800d054:	f7f3 fdb8 	bl	8000bc8 <__aeabi_d2uiz>
 800d058:	2800      	cmp	r0, #0
 800d05a:	bf08      	it	eq
 800d05c:	2001      	moveq	r0, #1
 800d05e:	f7f3 fa61 	bl	8000524 <__aeabi_ui2d>
 800d062:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d064:	4606      	mov	r6, r0
 800d066:	460f      	mov	r7, r1
 800d068:	bb03      	cbnz	r3, 800d0ac <_strtod_l+0xba4>
 800d06a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d06e:	9012      	str	r0, [sp, #72]	; 0x48
 800d070:	9313      	str	r3, [sp, #76]	; 0x4c
 800d072:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d076:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d07a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d07c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d07e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d082:	1a9b      	subs	r3, r3, r2
 800d084:	930b      	str	r3, [sp, #44]	; 0x2c
 800d086:	ed9d 0b08 	vldr	d0, [sp, #32]
 800d08a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800d08e:	f001 fd41 	bl	800eb14 <__ulp>
 800d092:	4650      	mov	r0, sl
 800d094:	ec53 2b10 	vmov	r2, r3, d0
 800d098:	4659      	mov	r1, fp
 800d09a:	f7f3 fabd 	bl	8000618 <__aeabi_dmul>
 800d09e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d0a2:	f7f3 f903 	bl	80002ac <__adddf3>
 800d0a6:	4682      	mov	sl, r0
 800d0a8:	468b      	mov	fp, r1
 800d0aa:	e772      	b.n	800cf92 <_strtod_l+0xa8a>
 800d0ac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800d0b0:	e7df      	b.n	800d072 <_strtod_l+0xb6a>
 800d0b2:	a30d      	add	r3, pc, #52	; (adr r3, 800d0e8 <_strtod_l+0xbe0>)
 800d0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b8:	f7f3 fd20 	bl	8000afc <__aeabi_dcmplt>
 800d0bc:	e79c      	b.n	800cff8 <_strtod_l+0xaf0>
 800d0be:	2300      	movs	r3, #0
 800d0c0:	930d      	str	r3, [sp, #52]	; 0x34
 800d0c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d0c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0c6:	6013      	str	r3, [r2, #0]
 800d0c8:	f7ff ba61 	b.w	800c58e <_strtod_l+0x86>
 800d0cc:	2b65      	cmp	r3, #101	; 0x65
 800d0ce:	f04f 0200 	mov.w	r2, #0
 800d0d2:	f43f ab4e 	beq.w	800c772 <_strtod_l+0x26a>
 800d0d6:	2101      	movs	r1, #1
 800d0d8:	4614      	mov	r4, r2
 800d0da:	9104      	str	r1, [sp, #16]
 800d0dc:	f7ff bacb 	b.w	800c676 <_strtod_l+0x16e>
 800d0e0:	ffc00000 	.word	0xffc00000
 800d0e4:	41dfffff 	.word	0x41dfffff
 800d0e8:	94a03595 	.word	0x94a03595
 800d0ec:	3fcfffff 	.word	0x3fcfffff

0800d0f0 <_strtod_r>:
 800d0f0:	4b05      	ldr	r3, [pc, #20]	; (800d108 <_strtod_r+0x18>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	b410      	push	{r4}
 800d0f6:	6a1b      	ldr	r3, [r3, #32]
 800d0f8:	4c04      	ldr	r4, [pc, #16]	; (800d10c <_strtod_r+0x1c>)
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	bf08      	it	eq
 800d0fe:	4623      	moveq	r3, r4
 800d100:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d104:	f7ff ba00 	b.w	800c508 <_strtod_l>
 800d108:	20000988 	.word	0x20000988
 800d10c:	200009ec 	.word	0x200009ec

0800d110 <_strtol_l.isra.0>:
 800d110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d114:	4680      	mov	r8, r0
 800d116:	4689      	mov	r9, r1
 800d118:	4692      	mov	sl, r2
 800d11a:	461e      	mov	r6, r3
 800d11c:	460f      	mov	r7, r1
 800d11e:	463d      	mov	r5, r7
 800d120:	9808      	ldr	r0, [sp, #32]
 800d122:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d126:	f001 fa01 	bl	800e52c <__locale_ctype_ptr_l>
 800d12a:	4420      	add	r0, r4
 800d12c:	7843      	ldrb	r3, [r0, #1]
 800d12e:	f013 0308 	ands.w	r3, r3, #8
 800d132:	d132      	bne.n	800d19a <_strtol_l.isra.0+0x8a>
 800d134:	2c2d      	cmp	r4, #45	; 0x2d
 800d136:	d132      	bne.n	800d19e <_strtol_l.isra.0+0x8e>
 800d138:	787c      	ldrb	r4, [r7, #1]
 800d13a:	1cbd      	adds	r5, r7, #2
 800d13c:	2201      	movs	r2, #1
 800d13e:	2e00      	cmp	r6, #0
 800d140:	d05d      	beq.n	800d1fe <_strtol_l.isra.0+0xee>
 800d142:	2e10      	cmp	r6, #16
 800d144:	d109      	bne.n	800d15a <_strtol_l.isra.0+0x4a>
 800d146:	2c30      	cmp	r4, #48	; 0x30
 800d148:	d107      	bne.n	800d15a <_strtol_l.isra.0+0x4a>
 800d14a:	782b      	ldrb	r3, [r5, #0]
 800d14c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d150:	2b58      	cmp	r3, #88	; 0x58
 800d152:	d14f      	bne.n	800d1f4 <_strtol_l.isra.0+0xe4>
 800d154:	786c      	ldrb	r4, [r5, #1]
 800d156:	2610      	movs	r6, #16
 800d158:	3502      	adds	r5, #2
 800d15a:	2a00      	cmp	r2, #0
 800d15c:	bf14      	ite	ne
 800d15e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800d162:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800d166:	2700      	movs	r7, #0
 800d168:	fbb1 fcf6 	udiv	ip, r1, r6
 800d16c:	4638      	mov	r0, r7
 800d16e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800d172:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800d176:	2b09      	cmp	r3, #9
 800d178:	d817      	bhi.n	800d1aa <_strtol_l.isra.0+0x9a>
 800d17a:	461c      	mov	r4, r3
 800d17c:	42a6      	cmp	r6, r4
 800d17e:	dd23      	ble.n	800d1c8 <_strtol_l.isra.0+0xb8>
 800d180:	1c7b      	adds	r3, r7, #1
 800d182:	d007      	beq.n	800d194 <_strtol_l.isra.0+0x84>
 800d184:	4584      	cmp	ip, r0
 800d186:	d31c      	bcc.n	800d1c2 <_strtol_l.isra.0+0xb2>
 800d188:	d101      	bne.n	800d18e <_strtol_l.isra.0+0x7e>
 800d18a:	45a6      	cmp	lr, r4
 800d18c:	db19      	blt.n	800d1c2 <_strtol_l.isra.0+0xb2>
 800d18e:	fb00 4006 	mla	r0, r0, r6, r4
 800d192:	2701      	movs	r7, #1
 800d194:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d198:	e7eb      	b.n	800d172 <_strtol_l.isra.0+0x62>
 800d19a:	462f      	mov	r7, r5
 800d19c:	e7bf      	b.n	800d11e <_strtol_l.isra.0+0xe>
 800d19e:	2c2b      	cmp	r4, #43	; 0x2b
 800d1a0:	bf04      	itt	eq
 800d1a2:	1cbd      	addeq	r5, r7, #2
 800d1a4:	787c      	ldrbeq	r4, [r7, #1]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	e7c9      	b.n	800d13e <_strtol_l.isra.0+0x2e>
 800d1aa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800d1ae:	2b19      	cmp	r3, #25
 800d1b0:	d801      	bhi.n	800d1b6 <_strtol_l.isra.0+0xa6>
 800d1b2:	3c37      	subs	r4, #55	; 0x37
 800d1b4:	e7e2      	b.n	800d17c <_strtol_l.isra.0+0x6c>
 800d1b6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800d1ba:	2b19      	cmp	r3, #25
 800d1bc:	d804      	bhi.n	800d1c8 <_strtol_l.isra.0+0xb8>
 800d1be:	3c57      	subs	r4, #87	; 0x57
 800d1c0:	e7dc      	b.n	800d17c <_strtol_l.isra.0+0x6c>
 800d1c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d1c6:	e7e5      	b.n	800d194 <_strtol_l.isra.0+0x84>
 800d1c8:	1c7b      	adds	r3, r7, #1
 800d1ca:	d108      	bne.n	800d1de <_strtol_l.isra.0+0xce>
 800d1cc:	2322      	movs	r3, #34	; 0x22
 800d1ce:	f8c8 3000 	str.w	r3, [r8]
 800d1d2:	4608      	mov	r0, r1
 800d1d4:	f1ba 0f00 	cmp.w	sl, #0
 800d1d8:	d107      	bne.n	800d1ea <_strtol_l.isra.0+0xda>
 800d1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1de:	b102      	cbz	r2, 800d1e2 <_strtol_l.isra.0+0xd2>
 800d1e0:	4240      	negs	r0, r0
 800d1e2:	f1ba 0f00 	cmp.w	sl, #0
 800d1e6:	d0f8      	beq.n	800d1da <_strtol_l.isra.0+0xca>
 800d1e8:	b10f      	cbz	r7, 800d1ee <_strtol_l.isra.0+0xde>
 800d1ea:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800d1ee:	f8ca 9000 	str.w	r9, [sl]
 800d1f2:	e7f2      	b.n	800d1da <_strtol_l.isra.0+0xca>
 800d1f4:	2430      	movs	r4, #48	; 0x30
 800d1f6:	2e00      	cmp	r6, #0
 800d1f8:	d1af      	bne.n	800d15a <_strtol_l.isra.0+0x4a>
 800d1fa:	2608      	movs	r6, #8
 800d1fc:	e7ad      	b.n	800d15a <_strtol_l.isra.0+0x4a>
 800d1fe:	2c30      	cmp	r4, #48	; 0x30
 800d200:	d0a3      	beq.n	800d14a <_strtol_l.isra.0+0x3a>
 800d202:	260a      	movs	r6, #10
 800d204:	e7a9      	b.n	800d15a <_strtol_l.isra.0+0x4a>
	...

0800d208 <_strtol_r>:
 800d208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d20a:	4c06      	ldr	r4, [pc, #24]	; (800d224 <_strtol_r+0x1c>)
 800d20c:	4d06      	ldr	r5, [pc, #24]	; (800d228 <_strtol_r+0x20>)
 800d20e:	6824      	ldr	r4, [r4, #0]
 800d210:	6a24      	ldr	r4, [r4, #32]
 800d212:	2c00      	cmp	r4, #0
 800d214:	bf08      	it	eq
 800d216:	462c      	moveq	r4, r5
 800d218:	9400      	str	r4, [sp, #0]
 800d21a:	f7ff ff79 	bl	800d110 <_strtol_l.isra.0>
 800d21e:	b003      	add	sp, #12
 800d220:	bd30      	pop	{r4, r5, pc}
 800d222:	bf00      	nop
 800d224:	20000988 	.word	0x20000988
 800d228:	200009ec 	.word	0x200009ec

0800d22c <strtol>:
 800d22c:	4b08      	ldr	r3, [pc, #32]	; (800d250 <strtol+0x24>)
 800d22e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d230:	681c      	ldr	r4, [r3, #0]
 800d232:	4d08      	ldr	r5, [pc, #32]	; (800d254 <strtol+0x28>)
 800d234:	6a23      	ldr	r3, [r4, #32]
 800d236:	2b00      	cmp	r3, #0
 800d238:	bf08      	it	eq
 800d23a:	462b      	moveq	r3, r5
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	4613      	mov	r3, r2
 800d240:	460a      	mov	r2, r1
 800d242:	4601      	mov	r1, r0
 800d244:	4620      	mov	r0, r4
 800d246:	f7ff ff63 	bl	800d110 <_strtol_l.isra.0>
 800d24a:	b003      	add	sp, #12
 800d24c:	bd30      	pop	{r4, r5, pc}
 800d24e:	bf00      	nop
 800d250:	20000988 	.word	0x20000988
 800d254:	200009ec 	.word	0x200009ec

0800d258 <quorem>:
 800d258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d25c:	6903      	ldr	r3, [r0, #16]
 800d25e:	690c      	ldr	r4, [r1, #16]
 800d260:	42a3      	cmp	r3, r4
 800d262:	4680      	mov	r8, r0
 800d264:	f2c0 8082 	blt.w	800d36c <quorem+0x114>
 800d268:	3c01      	subs	r4, #1
 800d26a:	f101 0714 	add.w	r7, r1, #20
 800d26e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d272:	f100 0614 	add.w	r6, r0, #20
 800d276:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d27a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d27e:	eb06 030c 	add.w	r3, r6, ip
 800d282:	3501      	adds	r5, #1
 800d284:	eb07 090c 	add.w	r9, r7, ip
 800d288:	9301      	str	r3, [sp, #4]
 800d28a:	fbb0 f5f5 	udiv	r5, r0, r5
 800d28e:	b395      	cbz	r5, 800d2f6 <quorem+0x9e>
 800d290:	f04f 0a00 	mov.w	sl, #0
 800d294:	4638      	mov	r0, r7
 800d296:	46b6      	mov	lr, r6
 800d298:	46d3      	mov	fp, sl
 800d29a:	f850 2b04 	ldr.w	r2, [r0], #4
 800d29e:	b293      	uxth	r3, r2
 800d2a0:	fb05 a303 	mla	r3, r5, r3, sl
 800d2a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	ebab 0303 	sub.w	r3, fp, r3
 800d2ae:	0c12      	lsrs	r2, r2, #16
 800d2b0:	f8de b000 	ldr.w	fp, [lr]
 800d2b4:	fb05 a202 	mla	r2, r5, r2, sl
 800d2b8:	fa13 f38b 	uxtah	r3, r3, fp
 800d2bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d2c0:	fa1f fb82 	uxth.w	fp, r2
 800d2c4:	f8de 2000 	ldr.w	r2, [lr]
 800d2c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d2cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d2d6:	4581      	cmp	r9, r0
 800d2d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d2dc:	f84e 3b04 	str.w	r3, [lr], #4
 800d2e0:	d2db      	bcs.n	800d29a <quorem+0x42>
 800d2e2:	f856 300c 	ldr.w	r3, [r6, ip]
 800d2e6:	b933      	cbnz	r3, 800d2f6 <quorem+0x9e>
 800d2e8:	9b01      	ldr	r3, [sp, #4]
 800d2ea:	3b04      	subs	r3, #4
 800d2ec:	429e      	cmp	r6, r3
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	d330      	bcc.n	800d354 <quorem+0xfc>
 800d2f2:	f8c8 4010 	str.w	r4, [r8, #16]
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	f001 fb94 	bl	800ea24 <__mcmp>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	db25      	blt.n	800d34c <quorem+0xf4>
 800d300:	3501      	adds	r5, #1
 800d302:	4630      	mov	r0, r6
 800d304:	f04f 0c00 	mov.w	ip, #0
 800d308:	f857 2b04 	ldr.w	r2, [r7], #4
 800d30c:	f8d0 e000 	ldr.w	lr, [r0]
 800d310:	b293      	uxth	r3, r2
 800d312:	ebac 0303 	sub.w	r3, ip, r3
 800d316:	0c12      	lsrs	r2, r2, #16
 800d318:	fa13 f38e 	uxtah	r3, r3, lr
 800d31c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d320:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d324:	b29b      	uxth	r3, r3
 800d326:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d32a:	45b9      	cmp	r9, r7
 800d32c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d330:	f840 3b04 	str.w	r3, [r0], #4
 800d334:	d2e8      	bcs.n	800d308 <quorem+0xb0>
 800d336:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d33a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d33e:	b92a      	cbnz	r2, 800d34c <quorem+0xf4>
 800d340:	3b04      	subs	r3, #4
 800d342:	429e      	cmp	r6, r3
 800d344:	461a      	mov	r2, r3
 800d346:	d30b      	bcc.n	800d360 <quorem+0x108>
 800d348:	f8c8 4010 	str.w	r4, [r8, #16]
 800d34c:	4628      	mov	r0, r5
 800d34e:	b003      	add	sp, #12
 800d350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d354:	6812      	ldr	r2, [r2, #0]
 800d356:	3b04      	subs	r3, #4
 800d358:	2a00      	cmp	r2, #0
 800d35a:	d1ca      	bne.n	800d2f2 <quorem+0x9a>
 800d35c:	3c01      	subs	r4, #1
 800d35e:	e7c5      	b.n	800d2ec <quorem+0x94>
 800d360:	6812      	ldr	r2, [r2, #0]
 800d362:	3b04      	subs	r3, #4
 800d364:	2a00      	cmp	r2, #0
 800d366:	d1ef      	bne.n	800d348 <quorem+0xf0>
 800d368:	3c01      	subs	r4, #1
 800d36a:	e7ea      	b.n	800d342 <quorem+0xea>
 800d36c:	2000      	movs	r0, #0
 800d36e:	e7ee      	b.n	800d34e <quorem+0xf6>

0800d370 <_dtoa_r>:
 800d370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d374:	ec57 6b10 	vmov	r6, r7, d0
 800d378:	b097      	sub	sp, #92	; 0x5c
 800d37a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d37c:	9106      	str	r1, [sp, #24]
 800d37e:	4604      	mov	r4, r0
 800d380:	920b      	str	r2, [sp, #44]	; 0x2c
 800d382:	9312      	str	r3, [sp, #72]	; 0x48
 800d384:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d388:	e9cd 6700 	strd	r6, r7, [sp]
 800d38c:	b93d      	cbnz	r5, 800d39e <_dtoa_r+0x2e>
 800d38e:	2010      	movs	r0, #16
 800d390:	f7fe f910 	bl	800b5b4 <malloc>
 800d394:	6260      	str	r0, [r4, #36]	; 0x24
 800d396:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d39a:	6005      	str	r5, [r0, #0]
 800d39c:	60c5      	str	r5, [r0, #12]
 800d39e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3a0:	6819      	ldr	r1, [r3, #0]
 800d3a2:	b151      	cbz	r1, 800d3ba <_dtoa_r+0x4a>
 800d3a4:	685a      	ldr	r2, [r3, #4]
 800d3a6:	604a      	str	r2, [r1, #4]
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	4093      	lsls	r3, r2
 800d3ac:	608b      	str	r3, [r1, #8]
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f001 f918 	bl	800e5e4 <_Bfree>
 800d3b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	601a      	str	r2, [r3, #0]
 800d3ba:	1e3b      	subs	r3, r7, #0
 800d3bc:	bfbb      	ittet	lt
 800d3be:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d3c2:	9301      	strlt	r3, [sp, #4]
 800d3c4:	2300      	movge	r3, #0
 800d3c6:	2201      	movlt	r2, #1
 800d3c8:	bfac      	ite	ge
 800d3ca:	f8c8 3000 	strge.w	r3, [r8]
 800d3ce:	f8c8 2000 	strlt.w	r2, [r8]
 800d3d2:	4baf      	ldr	r3, [pc, #700]	; (800d690 <_dtoa_r+0x320>)
 800d3d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d3d8:	ea33 0308 	bics.w	r3, r3, r8
 800d3dc:	d114      	bne.n	800d408 <_dtoa_r+0x98>
 800d3de:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3e0:	f242 730f 	movw	r3, #9999	; 0x270f
 800d3e4:	6013      	str	r3, [r2, #0]
 800d3e6:	9b00      	ldr	r3, [sp, #0]
 800d3e8:	b923      	cbnz	r3, 800d3f4 <_dtoa_r+0x84>
 800d3ea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	f000 8542 	beq.w	800de78 <_dtoa_r+0xb08>
 800d3f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3f6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d6a4 <_dtoa_r+0x334>
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f000 8544 	beq.w	800de88 <_dtoa_r+0xb18>
 800d400:	f10b 0303 	add.w	r3, fp, #3
 800d404:	f000 bd3e 	b.w	800de84 <_dtoa_r+0xb14>
 800d408:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d40c:	2200      	movs	r2, #0
 800d40e:	2300      	movs	r3, #0
 800d410:	4630      	mov	r0, r6
 800d412:	4639      	mov	r1, r7
 800d414:	f7f3 fb68 	bl	8000ae8 <__aeabi_dcmpeq>
 800d418:	4681      	mov	r9, r0
 800d41a:	b168      	cbz	r0, 800d438 <_dtoa_r+0xc8>
 800d41c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d41e:	2301      	movs	r3, #1
 800d420:	6013      	str	r3, [r2, #0]
 800d422:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 8524 	beq.w	800de72 <_dtoa_r+0xb02>
 800d42a:	4b9a      	ldr	r3, [pc, #616]	; (800d694 <_dtoa_r+0x324>)
 800d42c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d42e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d432:	6013      	str	r3, [r2, #0]
 800d434:	f000 bd28 	b.w	800de88 <_dtoa_r+0xb18>
 800d438:	aa14      	add	r2, sp, #80	; 0x50
 800d43a:	a915      	add	r1, sp, #84	; 0x54
 800d43c:	ec47 6b10 	vmov	d0, r6, r7
 800d440:	4620      	mov	r0, r4
 800d442:	f001 fbdd 	bl	800ec00 <__d2b>
 800d446:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d44a:	9004      	str	r0, [sp, #16]
 800d44c:	2d00      	cmp	r5, #0
 800d44e:	d07c      	beq.n	800d54a <_dtoa_r+0x1da>
 800d450:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d454:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d458:	46b2      	mov	sl, r6
 800d45a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d45e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d462:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d466:	2200      	movs	r2, #0
 800d468:	4b8b      	ldr	r3, [pc, #556]	; (800d698 <_dtoa_r+0x328>)
 800d46a:	4650      	mov	r0, sl
 800d46c:	4659      	mov	r1, fp
 800d46e:	f7f2 ff1b 	bl	80002a8 <__aeabi_dsub>
 800d472:	a381      	add	r3, pc, #516	; (adr r3, 800d678 <_dtoa_r+0x308>)
 800d474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d478:	f7f3 f8ce 	bl	8000618 <__aeabi_dmul>
 800d47c:	a380      	add	r3, pc, #512	; (adr r3, 800d680 <_dtoa_r+0x310>)
 800d47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d482:	f7f2 ff13 	bl	80002ac <__adddf3>
 800d486:	4606      	mov	r6, r0
 800d488:	4628      	mov	r0, r5
 800d48a:	460f      	mov	r7, r1
 800d48c:	f7f3 f85a 	bl	8000544 <__aeabi_i2d>
 800d490:	a37d      	add	r3, pc, #500	; (adr r3, 800d688 <_dtoa_r+0x318>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f3 f8bf 	bl	8000618 <__aeabi_dmul>
 800d49a:	4602      	mov	r2, r0
 800d49c:	460b      	mov	r3, r1
 800d49e:	4630      	mov	r0, r6
 800d4a0:	4639      	mov	r1, r7
 800d4a2:	f7f2 ff03 	bl	80002ac <__adddf3>
 800d4a6:	4606      	mov	r6, r0
 800d4a8:	460f      	mov	r7, r1
 800d4aa:	f7f3 fb65 	bl	8000b78 <__aeabi_d2iz>
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	4682      	mov	sl, r0
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	4630      	mov	r0, r6
 800d4b6:	4639      	mov	r1, r7
 800d4b8:	f7f3 fb20 	bl	8000afc <__aeabi_dcmplt>
 800d4bc:	b148      	cbz	r0, 800d4d2 <_dtoa_r+0x162>
 800d4be:	4650      	mov	r0, sl
 800d4c0:	f7f3 f840 	bl	8000544 <__aeabi_i2d>
 800d4c4:	4632      	mov	r2, r6
 800d4c6:	463b      	mov	r3, r7
 800d4c8:	f7f3 fb0e 	bl	8000ae8 <__aeabi_dcmpeq>
 800d4cc:	b908      	cbnz	r0, 800d4d2 <_dtoa_r+0x162>
 800d4ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d4d2:	f1ba 0f16 	cmp.w	sl, #22
 800d4d6:	d859      	bhi.n	800d58c <_dtoa_r+0x21c>
 800d4d8:	4970      	ldr	r1, [pc, #448]	; (800d69c <_dtoa_r+0x32c>)
 800d4da:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d4de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4e6:	f7f3 fb27 	bl	8000b38 <__aeabi_dcmpgt>
 800d4ea:	2800      	cmp	r0, #0
 800d4ec:	d050      	beq.n	800d590 <_dtoa_r+0x220>
 800d4ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d4f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4f8:	1b5d      	subs	r5, r3, r5
 800d4fa:	f1b5 0801 	subs.w	r8, r5, #1
 800d4fe:	bf49      	itett	mi
 800d500:	f1c5 0301 	rsbmi	r3, r5, #1
 800d504:	2300      	movpl	r3, #0
 800d506:	9305      	strmi	r3, [sp, #20]
 800d508:	f04f 0800 	movmi.w	r8, #0
 800d50c:	bf58      	it	pl
 800d50e:	9305      	strpl	r3, [sp, #20]
 800d510:	f1ba 0f00 	cmp.w	sl, #0
 800d514:	db3e      	blt.n	800d594 <_dtoa_r+0x224>
 800d516:	2300      	movs	r3, #0
 800d518:	44d0      	add	r8, sl
 800d51a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d51e:	9307      	str	r3, [sp, #28]
 800d520:	9b06      	ldr	r3, [sp, #24]
 800d522:	2b09      	cmp	r3, #9
 800d524:	f200 8090 	bhi.w	800d648 <_dtoa_r+0x2d8>
 800d528:	2b05      	cmp	r3, #5
 800d52a:	bfc4      	itt	gt
 800d52c:	3b04      	subgt	r3, #4
 800d52e:	9306      	strgt	r3, [sp, #24]
 800d530:	9b06      	ldr	r3, [sp, #24]
 800d532:	f1a3 0302 	sub.w	r3, r3, #2
 800d536:	bfcc      	ite	gt
 800d538:	2500      	movgt	r5, #0
 800d53a:	2501      	movle	r5, #1
 800d53c:	2b03      	cmp	r3, #3
 800d53e:	f200 808f 	bhi.w	800d660 <_dtoa_r+0x2f0>
 800d542:	e8df f003 	tbb	[pc, r3]
 800d546:	7f7d      	.short	0x7f7d
 800d548:	7131      	.short	0x7131
 800d54a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d54e:	441d      	add	r5, r3
 800d550:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d554:	2820      	cmp	r0, #32
 800d556:	dd13      	ble.n	800d580 <_dtoa_r+0x210>
 800d558:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d55c:	9b00      	ldr	r3, [sp, #0]
 800d55e:	fa08 f800 	lsl.w	r8, r8, r0
 800d562:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d566:	fa23 f000 	lsr.w	r0, r3, r0
 800d56a:	ea48 0000 	orr.w	r0, r8, r0
 800d56e:	f7f2 ffd9 	bl	8000524 <__aeabi_ui2d>
 800d572:	2301      	movs	r3, #1
 800d574:	4682      	mov	sl, r0
 800d576:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d57a:	3d01      	subs	r5, #1
 800d57c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d57e:	e772      	b.n	800d466 <_dtoa_r+0xf6>
 800d580:	9b00      	ldr	r3, [sp, #0]
 800d582:	f1c0 0020 	rsb	r0, r0, #32
 800d586:	fa03 f000 	lsl.w	r0, r3, r0
 800d58a:	e7f0      	b.n	800d56e <_dtoa_r+0x1fe>
 800d58c:	2301      	movs	r3, #1
 800d58e:	e7b1      	b.n	800d4f4 <_dtoa_r+0x184>
 800d590:	900f      	str	r0, [sp, #60]	; 0x3c
 800d592:	e7b0      	b.n	800d4f6 <_dtoa_r+0x186>
 800d594:	9b05      	ldr	r3, [sp, #20]
 800d596:	eba3 030a 	sub.w	r3, r3, sl
 800d59a:	9305      	str	r3, [sp, #20]
 800d59c:	f1ca 0300 	rsb	r3, sl, #0
 800d5a0:	9307      	str	r3, [sp, #28]
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	930e      	str	r3, [sp, #56]	; 0x38
 800d5a6:	e7bb      	b.n	800d520 <_dtoa_r+0x1b0>
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	930a      	str	r3, [sp, #40]	; 0x28
 800d5ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	dd59      	ble.n	800d666 <_dtoa_r+0x2f6>
 800d5b2:	9302      	str	r3, [sp, #8]
 800d5b4:	4699      	mov	r9, r3
 800d5b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	6072      	str	r2, [r6, #4]
 800d5bc:	2204      	movs	r2, #4
 800d5be:	f102 0014 	add.w	r0, r2, #20
 800d5c2:	4298      	cmp	r0, r3
 800d5c4:	6871      	ldr	r1, [r6, #4]
 800d5c6:	d953      	bls.n	800d670 <_dtoa_r+0x300>
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f000 ffd7 	bl	800e57c <_Balloc>
 800d5ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5d0:	6030      	str	r0, [r6, #0]
 800d5d2:	f1b9 0f0e 	cmp.w	r9, #14
 800d5d6:	f8d3 b000 	ldr.w	fp, [r3]
 800d5da:	f200 80e6 	bhi.w	800d7aa <_dtoa_r+0x43a>
 800d5de:	2d00      	cmp	r5, #0
 800d5e0:	f000 80e3 	beq.w	800d7aa <_dtoa_r+0x43a>
 800d5e4:	ed9d 7b00 	vldr	d7, [sp]
 800d5e8:	f1ba 0f00 	cmp.w	sl, #0
 800d5ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d5f0:	dd74      	ble.n	800d6dc <_dtoa_r+0x36c>
 800d5f2:	4a2a      	ldr	r2, [pc, #168]	; (800d69c <_dtoa_r+0x32c>)
 800d5f4:	f00a 030f 	and.w	r3, sl, #15
 800d5f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5fc:	ed93 7b00 	vldr	d7, [r3]
 800d600:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d604:	06f0      	lsls	r0, r6, #27
 800d606:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d60a:	d565      	bpl.n	800d6d8 <_dtoa_r+0x368>
 800d60c:	4b24      	ldr	r3, [pc, #144]	; (800d6a0 <_dtoa_r+0x330>)
 800d60e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d612:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d616:	f7f3 f929 	bl	800086c <__aeabi_ddiv>
 800d61a:	e9cd 0100 	strd	r0, r1, [sp]
 800d61e:	f006 060f 	and.w	r6, r6, #15
 800d622:	2503      	movs	r5, #3
 800d624:	4f1e      	ldr	r7, [pc, #120]	; (800d6a0 <_dtoa_r+0x330>)
 800d626:	e04c      	b.n	800d6c2 <_dtoa_r+0x352>
 800d628:	2301      	movs	r3, #1
 800d62a:	930a      	str	r3, [sp, #40]	; 0x28
 800d62c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d62e:	4453      	add	r3, sl
 800d630:	f103 0901 	add.w	r9, r3, #1
 800d634:	9302      	str	r3, [sp, #8]
 800d636:	464b      	mov	r3, r9
 800d638:	2b01      	cmp	r3, #1
 800d63a:	bfb8      	it	lt
 800d63c:	2301      	movlt	r3, #1
 800d63e:	e7ba      	b.n	800d5b6 <_dtoa_r+0x246>
 800d640:	2300      	movs	r3, #0
 800d642:	e7b2      	b.n	800d5aa <_dtoa_r+0x23a>
 800d644:	2300      	movs	r3, #0
 800d646:	e7f0      	b.n	800d62a <_dtoa_r+0x2ba>
 800d648:	2501      	movs	r5, #1
 800d64a:	2300      	movs	r3, #0
 800d64c:	9306      	str	r3, [sp, #24]
 800d64e:	950a      	str	r5, [sp, #40]	; 0x28
 800d650:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d654:	9302      	str	r3, [sp, #8]
 800d656:	4699      	mov	r9, r3
 800d658:	2200      	movs	r2, #0
 800d65a:	2312      	movs	r3, #18
 800d65c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d65e:	e7aa      	b.n	800d5b6 <_dtoa_r+0x246>
 800d660:	2301      	movs	r3, #1
 800d662:	930a      	str	r3, [sp, #40]	; 0x28
 800d664:	e7f4      	b.n	800d650 <_dtoa_r+0x2e0>
 800d666:	2301      	movs	r3, #1
 800d668:	9302      	str	r3, [sp, #8]
 800d66a:	4699      	mov	r9, r3
 800d66c:	461a      	mov	r2, r3
 800d66e:	e7f5      	b.n	800d65c <_dtoa_r+0x2ec>
 800d670:	3101      	adds	r1, #1
 800d672:	6071      	str	r1, [r6, #4]
 800d674:	0052      	lsls	r2, r2, #1
 800d676:	e7a2      	b.n	800d5be <_dtoa_r+0x24e>
 800d678:	636f4361 	.word	0x636f4361
 800d67c:	3fd287a7 	.word	0x3fd287a7
 800d680:	8b60c8b3 	.word	0x8b60c8b3
 800d684:	3fc68a28 	.word	0x3fc68a28
 800d688:	509f79fb 	.word	0x509f79fb
 800d68c:	3fd34413 	.word	0x3fd34413
 800d690:	7ff00000 	.word	0x7ff00000
 800d694:	08011e95 	.word	0x08011e95
 800d698:	3ff80000 	.word	0x3ff80000
 800d69c:	08011f50 	.word	0x08011f50
 800d6a0:	08011f28 	.word	0x08011f28
 800d6a4:	08011f19 	.word	0x08011f19
 800d6a8:	07f1      	lsls	r1, r6, #31
 800d6aa:	d508      	bpl.n	800d6be <_dtoa_r+0x34e>
 800d6ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d6b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6b4:	f7f2 ffb0 	bl	8000618 <__aeabi_dmul>
 800d6b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d6bc:	3501      	adds	r5, #1
 800d6be:	1076      	asrs	r6, r6, #1
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	2e00      	cmp	r6, #0
 800d6c4:	d1f0      	bne.n	800d6a8 <_dtoa_r+0x338>
 800d6c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d6ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6ce:	f7f3 f8cd 	bl	800086c <__aeabi_ddiv>
 800d6d2:	e9cd 0100 	strd	r0, r1, [sp]
 800d6d6:	e01a      	b.n	800d70e <_dtoa_r+0x39e>
 800d6d8:	2502      	movs	r5, #2
 800d6da:	e7a3      	b.n	800d624 <_dtoa_r+0x2b4>
 800d6dc:	f000 80a0 	beq.w	800d820 <_dtoa_r+0x4b0>
 800d6e0:	f1ca 0600 	rsb	r6, sl, #0
 800d6e4:	4b9f      	ldr	r3, [pc, #636]	; (800d964 <_dtoa_r+0x5f4>)
 800d6e6:	4fa0      	ldr	r7, [pc, #640]	; (800d968 <_dtoa_r+0x5f8>)
 800d6e8:	f006 020f 	and.w	r2, r6, #15
 800d6ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d6f8:	f7f2 ff8e 	bl	8000618 <__aeabi_dmul>
 800d6fc:	e9cd 0100 	strd	r0, r1, [sp]
 800d700:	1136      	asrs	r6, r6, #4
 800d702:	2300      	movs	r3, #0
 800d704:	2502      	movs	r5, #2
 800d706:	2e00      	cmp	r6, #0
 800d708:	d17f      	bne.n	800d80a <_dtoa_r+0x49a>
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1e1      	bne.n	800d6d2 <_dtoa_r+0x362>
 800d70e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d710:	2b00      	cmp	r3, #0
 800d712:	f000 8087 	beq.w	800d824 <_dtoa_r+0x4b4>
 800d716:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d71a:	2200      	movs	r2, #0
 800d71c:	4b93      	ldr	r3, [pc, #588]	; (800d96c <_dtoa_r+0x5fc>)
 800d71e:	4630      	mov	r0, r6
 800d720:	4639      	mov	r1, r7
 800d722:	f7f3 f9eb 	bl	8000afc <__aeabi_dcmplt>
 800d726:	2800      	cmp	r0, #0
 800d728:	d07c      	beq.n	800d824 <_dtoa_r+0x4b4>
 800d72a:	f1b9 0f00 	cmp.w	r9, #0
 800d72e:	d079      	beq.n	800d824 <_dtoa_r+0x4b4>
 800d730:	9b02      	ldr	r3, [sp, #8]
 800d732:	2b00      	cmp	r3, #0
 800d734:	dd35      	ble.n	800d7a2 <_dtoa_r+0x432>
 800d736:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d73a:	9308      	str	r3, [sp, #32]
 800d73c:	4639      	mov	r1, r7
 800d73e:	2200      	movs	r2, #0
 800d740:	4b8b      	ldr	r3, [pc, #556]	; (800d970 <_dtoa_r+0x600>)
 800d742:	4630      	mov	r0, r6
 800d744:	f7f2 ff68 	bl	8000618 <__aeabi_dmul>
 800d748:	e9cd 0100 	strd	r0, r1, [sp]
 800d74c:	9f02      	ldr	r7, [sp, #8]
 800d74e:	3501      	adds	r5, #1
 800d750:	4628      	mov	r0, r5
 800d752:	f7f2 fef7 	bl	8000544 <__aeabi_i2d>
 800d756:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d75a:	f7f2 ff5d 	bl	8000618 <__aeabi_dmul>
 800d75e:	2200      	movs	r2, #0
 800d760:	4b84      	ldr	r3, [pc, #528]	; (800d974 <_dtoa_r+0x604>)
 800d762:	f7f2 fda3 	bl	80002ac <__adddf3>
 800d766:	4605      	mov	r5, r0
 800d768:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d76c:	2f00      	cmp	r7, #0
 800d76e:	d15d      	bne.n	800d82c <_dtoa_r+0x4bc>
 800d770:	2200      	movs	r2, #0
 800d772:	4b81      	ldr	r3, [pc, #516]	; (800d978 <_dtoa_r+0x608>)
 800d774:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d778:	f7f2 fd96 	bl	80002a8 <__aeabi_dsub>
 800d77c:	462a      	mov	r2, r5
 800d77e:	4633      	mov	r3, r6
 800d780:	e9cd 0100 	strd	r0, r1, [sp]
 800d784:	f7f3 f9d8 	bl	8000b38 <__aeabi_dcmpgt>
 800d788:	2800      	cmp	r0, #0
 800d78a:	f040 8288 	bne.w	800dc9e <_dtoa_r+0x92e>
 800d78e:	462a      	mov	r2, r5
 800d790:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d794:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d798:	f7f3 f9b0 	bl	8000afc <__aeabi_dcmplt>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	f040 827c 	bne.w	800dc9a <_dtoa_r+0x92a>
 800d7a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d7a6:	e9cd 2300 	strd	r2, r3, [sp]
 800d7aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f2c0 8150 	blt.w	800da52 <_dtoa_r+0x6e2>
 800d7b2:	f1ba 0f0e 	cmp.w	sl, #14
 800d7b6:	f300 814c 	bgt.w	800da52 <_dtoa_r+0x6e2>
 800d7ba:	4b6a      	ldr	r3, [pc, #424]	; (800d964 <_dtoa_r+0x5f4>)
 800d7bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d7c0:	ed93 7b00 	vldr	d7, [r3]
 800d7c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d7cc:	f280 80d8 	bge.w	800d980 <_dtoa_r+0x610>
 800d7d0:	f1b9 0f00 	cmp.w	r9, #0
 800d7d4:	f300 80d4 	bgt.w	800d980 <_dtoa_r+0x610>
 800d7d8:	f040 825e 	bne.w	800dc98 <_dtoa_r+0x928>
 800d7dc:	2200      	movs	r2, #0
 800d7de:	4b66      	ldr	r3, [pc, #408]	; (800d978 <_dtoa_r+0x608>)
 800d7e0:	ec51 0b17 	vmov	r0, r1, d7
 800d7e4:	f7f2 ff18 	bl	8000618 <__aeabi_dmul>
 800d7e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7ec:	f7f3 f99a 	bl	8000b24 <__aeabi_dcmpge>
 800d7f0:	464f      	mov	r7, r9
 800d7f2:	464e      	mov	r6, r9
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	f040 8234 	bne.w	800dc62 <_dtoa_r+0x8f2>
 800d7fa:	2331      	movs	r3, #49	; 0x31
 800d7fc:	f10b 0501 	add.w	r5, fp, #1
 800d800:	f88b 3000 	strb.w	r3, [fp]
 800d804:	f10a 0a01 	add.w	sl, sl, #1
 800d808:	e22f      	b.n	800dc6a <_dtoa_r+0x8fa>
 800d80a:	07f2      	lsls	r2, r6, #31
 800d80c:	d505      	bpl.n	800d81a <_dtoa_r+0x4aa>
 800d80e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d812:	f7f2 ff01 	bl	8000618 <__aeabi_dmul>
 800d816:	3501      	adds	r5, #1
 800d818:	2301      	movs	r3, #1
 800d81a:	1076      	asrs	r6, r6, #1
 800d81c:	3708      	adds	r7, #8
 800d81e:	e772      	b.n	800d706 <_dtoa_r+0x396>
 800d820:	2502      	movs	r5, #2
 800d822:	e774      	b.n	800d70e <_dtoa_r+0x39e>
 800d824:	f8cd a020 	str.w	sl, [sp, #32]
 800d828:	464f      	mov	r7, r9
 800d82a:	e791      	b.n	800d750 <_dtoa_r+0x3e0>
 800d82c:	4b4d      	ldr	r3, [pc, #308]	; (800d964 <_dtoa_r+0x5f4>)
 800d82e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d832:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d047      	beq.n	800d8cc <_dtoa_r+0x55c>
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	2000      	movs	r0, #0
 800d842:	494e      	ldr	r1, [pc, #312]	; (800d97c <_dtoa_r+0x60c>)
 800d844:	f7f3 f812 	bl	800086c <__aeabi_ddiv>
 800d848:	462a      	mov	r2, r5
 800d84a:	4633      	mov	r3, r6
 800d84c:	f7f2 fd2c 	bl	80002a8 <__aeabi_dsub>
 800d850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d854:	465d      	mov	r5, fp
 800d856:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d85a:	f7f3 f98d 	bl	8000b78 <__aeabi_d2iz>
 800d85e:	4606      	mov	r6, r0
 800d860:	f7f2 fe70 	bl	8000544 <__aeabi_i2d>
 800d864:	4602      	mov	r2, r0
 800d866:	460b      	mov	r3, r1
 800d868:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d86c:	f7f2 fd1c 	bl	80002a8 <__aeabi_dsub>
 800d870:	3630      	adds	r6, #48	; 0x30
 800d872:	f805 6b01 	strb.w	r6, [r5], #1
 800d876:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d87a:	e9cd 0100 	strd	r0, r1, [sp]
 800d87e:	f7f3 f93d 	bl	8000afc <__aeabi_dcmplt>
 800d882:	2800      	cmp	r0, #0
 800d884:	d163      	bne.n	800d94e <_dtoa_r+0x5de>
 800d886:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d88a:	2000      	movs	r0, #0
 800d88c:	4937      	ldr	r1, [pc, #220]	; (800d96c <_dtoa_r+0x5fc>)
 800d88e:	f7f2 fd0b 	bl	80002a8 <__aeabi_dsub>
 800d892:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d896:	f7f3 f931 	bl	8000afc <__aeabi_dcmplt>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	f040 80b7 	bne.w	800da0e <_dtoa_r+0x69e>
 800d8a0:	eba5 030b 	sub.w	r3, r5, fp
 800d8a4:	429f      	cmp	r7, r3
 800d8a6:	f77f af7c 	ble.w	800d7a2 <_dtoa_r+0x432>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	4b30      	ldr	r3, [pc, #192]	; (800d970 <_dtoa_r+0x600>)
 800d8ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d8b2:	f7f2 feb1 	bl	8000618 <__aeabi_dmul>
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d8bc:	4b2c      	ldr	r3, [pc, #176]	; (800d970 <_dtoa_r+0x600>)
 800d8be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8c2:	f7f2 fea9 	bl	8000618 <__aeabi_dmul>
 800d8c6:	e9cd 0100 	strd	r0, r1, [sp]
 800d8ca:	e7c4      	b.n	800d856 <_dtoa_r+0x4e6>
 800d8cc:	462a      	mov	r2, r5
 800d8ce:	4633      	mov	r3, r6
 800d8d0:	f7f2 fea2 	bl	8000618 <__aeabi_dmul>
 800d8d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d8d8:	eb0b 0507 	add.w	r5, fp, r7
 800d8dc:	465e      	mov	r6, fp
 800d8de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8e2:	f7f3 f949 	bl	8000b78 <__aeabi_d2iz>
 800d8e6:	4607      	mov	r7, r0
 800d8e8:	f7f2 fe2c 	bl	8000544 <__aeabi_i2d>
 800d8ec:	3730      	adds	r7, #48	; 0x30
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d8f6:	f7f2 fcd7 	bl	80002a8 <__aeabi_dsub>
 800d8fa:	f806 7b01 	strb.w	r7, [r6], #1
 800d8fe:	42ae      	cmp	r6, r5
 800d900:	e9cd 0100 	strd	r0, r1, [sp]
 800d904:	f04f 0200 	mov.w	r2, #0
 800d908:	d126      	bne.n	800d958 <_dtoa_r+0x5e8>
 800d90a:	4b1c      	ldr	r3, [pc, #112]	; (800d97c <_dtoa_r+0x60c>)
 800d90c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d910:	f7f2 fccc 	bl	80002ac <__adddf3>
 800d914:	4602      	mov	r2, r0
 800d916:	460b      	mov	r3, r1
 800d918:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d91c:	f7f3 f90c 	bl	8000b38 <__aeabi_dcmpgt>
 800d920:	2800      	cmp	r0, #0
 800d922:	d174      	bne.n	800da0e <_dtoa_r+0x69e>
 800d924:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d928:	2000      	movs	r0, #0
 800d92a:	4914      	ldr	r1, [pc, #80]	; (800d97c <_dtoa_r+0x60c>)
 800d92c:	f7f2 fcbc 	bl	80002a8 <__aeabi_dsub>
 800d930:	4602      	mov	r2, r0
 800d932:	460b      	mov	r3, r1
 800d934:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d938:	f7f3 f8e0 	bl	8000afc <__aeabi_dcmplt>
 800d93c:	2800      	cmp	r0, #0
 800d93e:	f43f af30 	beq.w	800d7a2 <_dtoa_r+0x432>
 800d942:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d946:	2b30      	cmp	r3, #48	; 0x30
 800d948:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d94c:	d002      	beq.n	800d954 <_dtoa_r+0x5e4>
 800d94e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d952:	e04a      	b.n	800d9ea <_dtoa_r+0x67a>
 800d954:	4615      	mov	r5, r2
 800d956:	e7f4      	b.n	800d942 <_dtoa_r+0x5d2>
 800d958:	4b05      	ldr	r3, [pc, #20]	; (800d970 <_dtoa_r+0x600>)
 800d95a:	f7f2 fe5d 	bl	8000618 <__aeabi_dmul>
 800d95e:	e9cd 0100 	strd	r0, r1, [sp]
 800d962:	e7bc      	b.n	800d8de <_dtoa_r+0x56e>
 800d964:	08011f50 	.word	0x08011f50
 800d968:	08011f28 	.word	0x08011f28
 800d96c:	3ff00000 	.word	0x3ff00000
 800d970:	40240000 	.word	0x40240000
 800d974:	401c0000 	.word	0x401c0000
 800d978:	40140000 	.word	0x40140000
 800d97c:	3fe00000 	.word	0x3fe00000
 800d980:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d984:	465d      	mov	r5, fp
 800d986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d98a:	4630      	mov	r0, r6
 800d98c:	4639      	mov	r1, r7
 800d98e:	f7f2 ff6d 	bl	800086c <__aeabi_ddiv>
 800d992:	f7f3 f8f1 	bl	8000b78 <__aeabi_d2iz>
 800d996:	4680      	mov	r8, r0
 800d998:	f7f2 fdd4 	bl	8000544 <__aeabi_i2d>
 800d99c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9a0:	f7f2 fe3a 	bl	8000618 <__aeabi_dmul>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d9b0:	f7f2 fc7a 	bl	80002a8 <__aeabi_dsub>
 800d9b4:	f805 6b01 	strb.w	r6, [r5], #1
 800d9b8:	eba5 060b 	sub.w	r6, r5, fp
 800d9bc:	45b1      	cmp	r9, r6
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	d139      	bne.n	800da38 <_dtoa_r+0x6c8>
 800d9c4:	f7f2 fc72 	bl	80002ac <__adddf3>
 800d9c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9cc:	4606      	mov	r6, r0
 800d9ce:	460f      	mov	r7, r1
 800d9d0:	f7f3 f8b2 	bl	8000b38 <__aeabi_dcmpgt>
 800d9d4:	b9c8      	cbnz	r0, 800da0a <_dtoa_r+0x69a>
 800d9d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9da:	4630      	mov	r0, r6
 800d9dc:	4639      	mov	r1, r7
 800d9de:	f7f3 f883 	bl	8000ae8 <__aeabi_dcmpeq>
 800d9e2:	b110      	cbz	r0, 800d9ea <_dtoa_r+0x67a>
 800d9e4:	f018 0f01 	tst.w	r8, #1
 800d9e8:	d10f      	bne.n	800da0a <_dtoa_r+0x69a>
 800d9ea:	9904      	ldr	r1, [sp, #16]
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	f000 fdf9 	bl	800e5e4 <_Bfree>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d9f6:	702b      	strb	r3, [r5, #0]
 800d9f8:	f10a 0301 	add.w	r3, sl, #1
 800d9fc:	6013      	str	r3, [r2, #0]
 800d9fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da00:	2b00      	cmp	r3, #0
 800da02:	f000 8241 	beq.w	800de88 <_dtoa_r+0xb18>
 800da06:	601d      	str	r5, [r3, #0]
 800da08:	e23e      	b.n	800de88 <_dtoa_r+0xb18>
 800da0a:	f8cd a020 	str.w	sl, [sp, #32]
 800da0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800da12:	2a39      	cmp	r2, #57	; 0x39
 800da14:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800da18:	d108      	bne.n	800da2c <_dtoa_r+0x6bc>
 800da1a:	459b      	cmp	fp, r3
 800da1c:	d10a      	bne.n	800da34 <_dtoa_r+0x6c4>
 800da1e:	9b08      	ldr	r3, [sp, #32]
 800da20:	3301      	adds	r3, #1
 800da22:	9308      	str	r3, [sp, #32]
 800da24:	2330      	movs	r3, #48	; 0x30
 800da26:	f88b 3000 	strb.w	r3, [fp]
 800da2a:	465b      	mov	r3, fp
 800da2c:	781a      	ldrb	r2, [r3, #0]
 800da2e:	3201      	adds	r2, #1
 800da30:	701a      	strb	r2, [r3, #0]
 800da32:	e78c      	b.n	800d94e <_dtoa_r+0x5de>
 800da34:	461d      	mov	r5, r3
 800da36:	e7ea      	b.n	800da0e <_dtoa_r+0x69e>
 800da38:	2200      	movs	r2, #0
 800da3a:	4b9b      	ldr	r3, [pc, #620]	; (800dca8 <_dtoa_r+0x938>)
 800da3c:	f7f2 fdec 	bl	8000618 <__aeabi_dmul>
 800da40:	2200      	movs	r2, #0
 800da42:	2300      	movs	r3, #0
 800da44:	4606      	mov	r6, r0
 800da46:	460f      	mov	r7, r1
 800da48:	f7f3 f84e 	bl	8000ae8 <__aeabi_dcmpeq>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	d09a      	beq.n	800d986 <_dtoa_r+0x616>
 800da50:	e7cb      	b.n	800d9ea <_dtoa_r+0x67a>
 800da52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800da54:	2a00      	cmp	r2, #0
 800da56:	f000 808b 	beq.w	800db70 <_dtoa_r+0x800>
 800da5a:	9a06      	ldr	r2, [sp, #24]
 800da5c:	2a01      	cmp	r2, #1
 800da5e:	dc6e      	bgt.n	800db3e <_dtoa_r+0x7ce>
 800da60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800da62:	2a00      	cmp	r2, #0
 800da64:	d067      	beq.n	800db36 <_dtoa_r+0x7c6>
 800da66:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800da6a:	9f07      	ldr	r7, [sp, #28]
 800da6c:	9d05      	ldr	r5, [sp, #20]
 800da6e:	9a05      	ldr	r2, [sp, #20]
 800da70:	2101      	movs	r1, #1
 800da72:	441a      	add	r2, r3
 800da74:	4620      	mov	r0, r4
 800da76:	9205      	str	r2, [sp, #20]
 800da78:	4498      	add	r8, r3
 800da7a:	f000 fe91 	bl	800e7a0 <__i2b>
 800da7e:	4606      	mov	r6, r0
 800da80:	2d00      	cmp	r5, #0
 800da82:	dd0c      	ble.n	800da9e <_dtoa_r+0x72e>
 800da84:	f1b8 0f00 	cmp.w	r8, #0
 800da88:	dd09      	ble.n	800da9e <_dtoa_r+0x72e>
 800da8a:	4545      	cmp	r5, r8
 800da8c:	9a05      	ldr	r2, [sp, #20]
 800da8e:	462b      	mov	r3, r5
 800da90:	bfa8      	it	ge
 800da92:	4643      	movge	r3, r8
 800da94:	1ad2      	subs	r2, r2, r3
 800da96:	9205      	str	r2, [sp, #20]
 800da98:	1aed      	subs	r5, r5, r3
 800da9a:	eba8 0803 	sub.w	r8, r8, r3
 800da9e:	9b07      	ldr	r3, [sp, #28]
 800daa0:	b1eb      	cbz	r3, 800dade <_dtoa_r+0x76e>
 800daa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d067      	beq.n	800db78 <_dtoa_r+0x808>
 800daa8:	b18f      	cbz	r7, 800dace <_dtoa_r+0x75e>
 800daaa:	4631      	mov	r1, r6
 800daac:	463a      	mov	r2, r7
 800daae:	4620      	mov	r0, r4
 800dab0:	f000 ff16 	bl	800e8e0 <__pow5mult>
 800dab4:	9a04      	ldr	r2, [sp, #16]
 800dab6:	4601      	mov	r1, r0
 800dab8:	4606      	mov	r6, r0
 800daba:	4620      	mov	r0, r4
 800dabc:	f000 fe79 	bl	800e7b2 <__multiply>
 800dac0:	9904      	ldr	r1, [sp, #16]
 800dac2:	9008      	str	r0, [sp, #32]
 800dac4:	4620      	mov	r0, r4
 800dac6:	f000 fd8d 	bl	800e5e4 <_Bfree>
 800daca:	9b08      	ldr	r3, [sp, #32]
 800dacc:	9304      	str	r3, [sp, #16]
 800dace:	9b07      	ldr	r3, [sp, #28]
 800dad0:	1bda      	subs	r2, r3, r7
 800dad2:	d004      	beq.n	800dade <_dtoa_r+0x76e>
 800dad4:	9904      	ldr	r1, [sp, #16]
 800dad6:	4620      	mov	r0, r4
 800dad8:	f000 ff02 	bl	800e8e0 <__pow5mult>
 800dadc:	9004      	str	r0, [sp, #16]
 800dade:	2101      	movs	r1, #1
 800dae0:	4620      	mov	r0, r4
 800dae2:	f000 fe5d 	bl	800e7a0 <__i2b>
 800dae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dae8:	4607      	mov	r7, r0
 800daea:	2b00      	cmp	r3, #0
 800daec:	f000 81d0 	beq.w	800de90 <_dtoa_r+0xb20>
 800daf0:	461a      	mov	r2, r3
 800daf2:	4601      	mov	r1, r0
 800daf4:	4620      	mov	r0, r4
 800daf6:	f000 fef3 	bl	800e8e0 <__pow5mult>
 800dafa:	9b06      	ldr	r3, [sp, #24]
 800dafc:	2b01      	cmp	r3, #1
 800dafe:	4607      	mov	r7, r0
 800db00:	dc40      	bgt.n	800db84 <_dtoa_r+0x814>
 800db02:	9b00      	ldr	r3, [sp, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d139      	bne.n	800db7c <_dtoa_r+0x80c>
 800db08:	9b01      	ldr	r3, [sp, #4]
 800db0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d136      	bne.n	800db80 <_dtoa_r+0x810>
 800db12:	9b01      	ldr	r3, [sp, #4]
 800db14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800db18:	0d1b      	lsrs	r3, r3, #20
 800db1a:	051b      	lsls	r3, r3, #20
 800db1c:	b12b      	cbz	r3, 800db2a <_dtoa_r+0x7ba>
 800db1e:	9b05      	ldr	r3, [sp, #20]
 800db20:	3301      	adds	r3, #1
 800db22:	9305      	str	r3, [sp, #20]
 800db24:	f108 0801 	add.w	r8, r8, #1
 800db28:	2301      	movs	r3, #1
 800db2a:	9307      	str	r3, [sp, #28]
 800db2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d12a      	bne.n	800db88 <_dtoa_r+0x818>
 800db32:	2001      	movs	r0, #1
 800db34:	e030      	b.n	800db98 <_dtoa_r+0x828>
 800db36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800db38:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800db3c:	e795      	b.n	800da6a <_dtoa_r+0x6fa>
 800db3e:	9b07      	ldr	r3, [sp, #28]
 800db40:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800db44:	42bb      	cmp	r3, r7
 800db46:	bfbf      	itttt	lt
 800db48:	9b07      	ldrlt	r3, [sp, #28]
 800db4a:	9707      	strlt	r7, [sp, #28]
 800db4c:	1afa      	sublt	r2, r7, r3
 800db4e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800db50:	bfbb      	ittet	lt
 800db52:	189b      	addlt	r3, r3, r2
 800db54:	930e      	strlt	r3, [sp, #56]	; 0x38
 800db56:	1bdf      	subge	r7, r3, r7
 800db58:	2700      	movlt	r7, #0
 800db5a:	f1b9 0f00 	cmp.w	r9, #0
 800db5e:	bfb5      	itete	lt
 800db60:	9b05      	ldrlt	r3, [sp, #20]
 800db62:	9d05      	ldrge	r5, [sp, #20]
 800db64:	eba3 0509 	sublt.w	r5, r3, r9
 800db68:	464b      	movge	r3, r9
 800db6a:	bfb8      	it	lt
 800db6c:	2300      	movlt	r3, #0
 800db6e:	e77e      	b.n	800da6e <_dtoa_r+0x6fe>
 800db70:	9f07      	ldr	r7, [sp, #28]
 800db72:	9d05      	ldr	r5, [sp, #20]
 800db74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800db76:	e783      	b.n	800da80 <_dtoa_r+0x710>
 800db78:	9a07      	ldr	r2, [sp, #28]
 800db7a:	e7ab      	b.n	800dad4 <_dtoa_r+0x764>
 800db7c:	2300      	movs	r3, #0
 800db7e:	e7d4      	b.n	800db2a <_dtoa_r+0x7ba>
 800db80:	9b00      	ldr	r3, [sp, #0]
 800db82:	e7d2      	b.n	800db2a <_dtoa_r+0x7ba>
 800db84:	2300      	movs	r3, #0
 800db86:	9307      	str	r3, [sp, #28]
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800db8e:	6918      	ldr	r0, [r3, #16]
 800db90:	f000 fdb8 	bl	800e704 <__hi0bits>
 800db94:	f1c0 0020 	rsb	r0, r0, #32
 800db98:	4440      	add	r0, r8
 800db9a:	f010 001f 	ands.w	r0, r0, #31
 800db9e:	d047      	beq.n	800dc30 <_dtoa_r+0x8c0>
 800dba0:	f1c0 0320 	rsb	r3, r0, #32
 800dba4:	2b04      	cmp	r3, #4
 800dba6:	dd3b      	ble.n	800dc20 <_dtoa_r+0x8b0>
 800dba8:	9b05      	ldr	r3, [sp, #20]
 800dbaa:	f1c0 001c 	rsb	r0, r0, #28
 800dbae:	4403      	add	r3, r0
 800dbb0:	9305      	str	r3, [sp, #20]
 800dbb2:	4405      	add	r5, r0
 800dbb4:	4480      	add	r8, r0
 800dbb6:	9b05      	ldr	r3, [sp, #20]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	dd05      	ble.n	800dbc8 <_dtoa_r+0x858>
 800dbbc:	461a      	mov	r2, r3
 800dbbe:	9904      	ldr	r1, [sp, #16]
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f000 fedb 	bl	800e97c <__lshift>
 800dbc6:	9004      	str	r0, [sp, #16]
 800dbc8:	f1b8 0f00 	cmp.w	r8, #0
 800dbcc:	dd05      	ble.n	800dbda <_dtoa_r+0x86a>
 800dbce:	4639      	mov	r1, r7
 800dbd0:	4642      	mov	r2, r8
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f000 fed2 	bl	800e97c <__lshift>
 800dbd8:	4607      	mov	r7, r0
 800dbda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbdc:	b353      	cbz	r3, 800dc34 <_dtoa_r+0x8c4>
 800dbde:	4639      	mov	r1, r7
 800dbe0:	9804      	ldr	r0, [sp, #16]
 800dbe2:	f000 ff1f 	bl	800ea24 <__mcmp>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	da24      	bge.n	800dc34 <_dtoa_r+0x8c4>
 800dbea:	2300      	movs	r3, #0
 800dbec:	220a      	movs	r2, #10
 800dbee:	9904      	ldr	r1, [sp, #16]
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f000 fd0e 	bl	800e612 <__multadd>
 800dbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dbf8:	9004      	str	r0, [sp, #16]
 800dbfa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	f000 814d 	beq.w	800de9e <_dtoa_r+0xb2e>
 800dc04:	2300      	movs	r3, #0
 800dc06:	4631      	mov	r1, r6
 800dc08:	220a      	movs	r2, #10
 800dc0a:	4620      	mov	r0, r4
 800dc0c:	f000 fd01 	bl	800e612 <__multadd>
 800dc10:	9b02      	ldr	r3, [sp, #8]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	4606      	mov	r6, r0
 800dc16:	dc4f      	bgt.n	800dcb8 <_dtoa_r+0x948>
 800dc18:	9b06      	ldr	r3, [sp, #24]
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	dd4c      	ble.n	800dcb8 <_dtoa_r+0x948>
 800dc1e:	e011      	b.n	800dc44 <_dtoa_r+0x8d4>
 800dc20:	d0c9      	beq.n	800dbb6 <_dtoa_r+0x846>
 800dc22:	9a05      	ldr	r2, [sp, #20]
 800dc24:	331c      	adds	r3, #28
 800dc26:	441a      	add	r2, r3
 800dc28:	9205      	str	r2, [sp, #20]
 800dc2a:	441d      	add	r5, r3
 800dc2c:	4498      	add	r8, r3
 800dc2e:	e7c2      	b.n	800dbb6 <_dtoa_r+0x846>
 800dc30:	4603      	mov	r3, r0
 800dc32:	e7f6      	b.n	800dc22 <_dtoa_r+0x8b2>
 800dc34:	f1b9 0f00 	cmp.w	r9, #0
 800dc38:	dc38      	bgt.n	800dcac <_dtoa_r+0x93c>
 800dc3a:	9b06      	ldr	r3, [sp, #24]
 800dc3c:	2b02      	cmp	r3, #2
 800dc3e:	dd35      	ble.n	800dcac <_dtoa_r+0x93c>
 800dc40:	f8cd 9008 	str.w	r9, [sp, #8]
 800dc44:	9b02      	ldr	r3, [sp, #8]
 800dc46:	b963      	cbnz	r3, 800dc62 <_dtoa_r+0x8f2>
 800dc48:	4639      	mov	r1, r7
 800dc4a:	2205      	movs	r2, #5
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	f000 fce0 	bl	800e612 <__multadd>
 800dc52:	4601      	mov	r1, r0
 800dc54:	4607      	mov	r7, r0
 800dc56:	9804      	ldr	r0, [sp, #16]
 800dc58:	f000 fee4 	bl	800ea24 <__mcmp>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	f73f adcc 	bgt.w	800d7fa <_dtoa_r+0x48a>
 800dc62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc64:	465d      	mov	r5, fp
 800dc66:	ea6f 0a03 	mvn.w	sl, r3
 800dc6a:	f04f 0900 	mov.w	r9, #0
 800dc6e:	4639      	mov	r1, r7
 800dc70:	4620      	mov	r0, r4
 800dc72:	f000 fcb7 	bl	800e5e4 <_Bfree>
 800dc76:	2e00      	cmp	r6, #0
 800dc78:	f43f aeb7 	beq.w	800d9ea <_dtoa_r+0x67a>
 800dc7c:	f1b9 0f00 	cmp.w	r9, #0
 800dc80:	d005      	beq.n	800dc8e <_dtoa_r+0x91e>
 800dc82:	45b1      	cmp	r9, r6
 800dc84:	d003      	beq.n	800dc8e <_dtoa_r+0x91e>
 800dc86:	4649      	mov	r1, r9
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f000 fcab 	bl	800e5e4 <_Bfree>
 800dc8e:	4631      	mov	r1, r6
 800dc90:	4620      	mov	r0, r4
 800dc92:	f000 fca7 	bl	800e5e4 <_Bfree>
 800dc96:	e6a8      	b.n	800d9ea <_dtoa_r+0x67a>
 800dc98:	2700      	movs	r7, #0
 800dc9a:	463e      	mov	r6, r7
 800dc9c:	e7e1      	b.n	800dc62 <_dtoa_r+0x8f2>
 800dc9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dca2:	463e      	mov	r6, r7
 800dca4:	e5a9      	b.n	800d7fa <_dtoa_r+0x48a>
 800dca6:	bf00      	nop
 800dca8:	40240000 	.word	0x40240000
 800dcac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcae:	f8cd 9008 	str.w	r9, [sp, #8]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f000 80fa 	beq.w	800deac <_dtoa_r+0xb3c>
 800dcb8:	2d00      	cmp	r5, #0
 800dcba:	dd05      	ble.n	800dcc8 <_dtoa_r+0x958>
 800dcbc:	4631      	mov	r1, r6
 800dcbe:	462a      	mov	r2, r5
 800dcc0:	4620      	mov	r0, r4
 800dcc2:	f000 fe5b 	bl	800e97c <__lshift>
 800dcc6:	4606      	mov	r6, r0
 800dcc8:	9b07      	ldr	r3, [sp, #28]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d04c      	beq.n	800dd68 <_dtoa_r+0x9f8>
 800dcce:	6871      	ldr	r1, [r6, #4]
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f000 fc53 	bl	800e57c <_Balloc>
 800dcd6:	6932      	ldr	r2, [r6, #16]
 800dcd8:	3202      	adds	r2, #2
 800dcda:	4605      	mov	r5, r0
 800dcdc:	0092      	lsls	r2, r2, #2
 800dcde:	f106 010c 	add.w	r1, r6, #12
 800dce2:	300c      	adds	r0, #12
 800dce4:	f7fd fc76 	bl	800b5d4 <memcpy>
 800dce8:	2201      	movs	r2, #1
 800dcea:	4629      	mov	r1, r5
 800dcec:	4620      	mov	r0, r4
 800dcee:	f000 fe45 	bl	800e97c <__lshift>
 800dcf2:	9b00      	ldr	r3, [sp, #0]
 800dcf4:	f8cd b014 	str.w	fp, [sp, #20]
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	46b1      	mov	r9, r6
 800dcfe:	9307      	str	r3, [sp, #28]
 800dd00:	4606      	mov	r6, r0
 800dd02:	4639      	mov	r1, r7
 800dd04:	9804      	ldr	r0, [sp, #16]
 800dd06:	f7ff faa7 	bl	800d258 <quorem>
 800dd0a:	4649      	mov	r1, r9
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dd12:	9804      	ldr	r0, [sp, #16]
 800dd14:	f000 fe86 	bl	800ea24 <__mcmp>
 800dd18:	4632      	mov	r2, r6
 800dd1a:	9000      	str	r0, [sp, #0]
 800dd1c:	4639      	mov	r1, r7
 800dd1e:	4620      	mov	r0, r4
 800dd20:	f000 fe9a 	bl	800ea58 <__mdiff>
 800dd24:	68c3      	ldr	r3, [r0, #12]
 800dd26:	4602      	mov	r2, r0
 800dd28:	bb03      	cbnz	r3, 800dd6c <_dtoa_r+0x9fc>
 800dd2a:	4601      	mov	r1, r0
 800dd2c:	9008      	str	r0, [sp, #32]
 800dd2e:	9804      	ldr	r0, [sp, #16]
 800dd30:	f000 fe78 	bl	800ea24 <__mcmp>
 800dd34:	9a08      	ldr	r2, [sp, #32]
 800dd36:	4603      	mov	r3, r0
 800dd38:	4611      	mov	r1, r2
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	9308      	str	r3, [sp, #32]
 800dd3e:	f000 fc51 	bl	800e5e4 <_Bfree>
 800dd42:	9b08      	ldr	r3, [sp, #32]
 800dd44:	b9a3      	cbnz	r3, 800dd70 <_dtoa_r+0xa00>
 800dd46:	9a06      	ldr	r2, [sp, #24]
 800dd48:	b992      	cbnz	r2, 800dd70 <_dtoa_r+0xa00>
 800dd4a:	9a07      	ldr	r2, [sp, #28]
 800dd4c:	b982      	cbnz	r2, 800dd70 <_dtoa_r+0xa00>
 800dd4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dd52:	d029      	beq.n	800dda8 <_dtoa_r+0xa38>
 800dd54:	9b00      	ldr	r3, [sp, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	dd01      	ble.n	800dd5e <_dtoa_r+0x9ee>
 800dd5a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800dd5e:	9b05      	ldr	r3, [sp, #20]
 800dd60:	1c5d      	adds	r5, r3, #1
 800dd62:	f883 8000 	strb.w	r8, [r3]
 800dd66:	e782      	b.n	800dc6e <_dtoa_r+0x8fe>
 800dd68:	4630      	mov	r0, r6
 800dd6a:	e7c2      	b.n	800dcf2 <_dtoa_r+0x982>
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	e7e3      	b.n	800dd38 <_dtoa_r+0x9c8>
 800dd70:	9a00      	ldr	r2, [sp, #0]
 800dd72:	2a00      	cmp	r2, #0
 800dd74:	db04      	blt.n	800dd80 <_dtoa_r+0xa10>
 800dd76:	d125      	bne.n	800ddc4 <_dtoa_r+0xa54>
 800dd78:	9a06      	ldr	r2, [sp, #24]
 800dd7a:	bb1a      	cbnz	r2, 800ddc4 <_dtoa_r+0xa54>
 800dd7c:	9a07      	ldr	r2, [sp, #28]
 800dd7e:	bb0a      	cbnz	r2, 800ddc4 <_dtoa_r+0xa54>
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	ddec      	ble.n	800dd5e <_dtoa_r+0x9ee>
 800dd84:	2201      	movs	r2, #1
 800dd86:	9904      	ldr	r1, [sp, #16]
 800dd88:	4620      	mov	r0, r4
 800dd8a:	f000 fdf7 	bl	800e97c <__lshift>
 800dd8e:	4639      	mov	r1, r7
 800dd90:	9004      	str	r0, [sp, #16]
 800dd92:	f000 fe47 	bl	800ea24 <__mcmp>
 800dd96:	2800      	cmp	r0, #0
 800dd98:	dc03      	bgt.n	800dda2 <_dtoa_r+0xa32>
 800dd9a:	d1e0      	bne.n	800dd5e <_dtoa_r+0x9ee>
 800dd9c:	f018 0f01 	tst.w	r8, #1
 800dda0:	d0dd      	beq.n	800dd5e <_dtoa_r+0x9ee>
 800dda2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dda6:	d1d8      	bne.n	800dd5a <_dtoa_r+0x9ea>
 800dda8:	9b05      	ldr	r3, [sp, #20]
 800ddaa:	9a05      	ldr	r2, [sp, #20]
 800ddac:	1c5d      	adds	r5, r3, #1
 800ddae:	2339      	movs	r3, #57	; 0x39
 800ddb0:	7013      	strb	r3, [r2, #0]
 800ddb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ddb6:	2b39      	cmp	r3, #57	; 0x39
 800ddb8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ddbc:	d04f      	beq.n	800de5e <_dtoa_r+0xaee>
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	7013      	strb	r3, [r2, #0]
 800ddc2:	e754      	b.n	800dc6e <_dtoa_r+0x8fe>
 800ddc4:	9a05      	ldr	r2, [sp, #20]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f102 0501 	add.w	r5, r2, #1
 800ddcc:	dd06      	ble.n	800dddc <_dtoa_r+0xa6c>
 800ddce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ddd2:	d0e9      	beq.n	800dda8 <_dtoa_r+0xa38>
 800ddd4:	f108 0801 	add.w	r8, r8, #1
 800ddd8:	9b05      	ldr	r3, [sp, #20]
 800ddda:	e7c2      	b.n	800dd62 <_dtoa_r+0x9f2>
 800dddc:	9a02      	ldr	r2, [sp, #8]
 800ddde:	f805 8c01 	strb.w	r8, [r5, #-1]
 800dde2:	eba5 030b 	sub.w	r3, r5, fp
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d021      	beq.n	800de2e <_dtoa_r+0xabe>
 800ddea:	2300      	movs	r3, #0
 800ddec:	220a      	movs	r2, #10
 800ddee:	9904      	ldr	r1, [sp, #16]
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	f000 fc0e 	bl	800e612 <__multadd>
 800ddf6:	45b1      	cmp	r9, r6
 800ddf8:	9004      	str	r0, [sp, #16]
 800ddfa:	f04f 0300 	mov.w	r3, #0
 800ddfe:	f04f 020a 	mov.w	r2, #10
 800de02:	4649      	mov	r1, r9
 800de04:	4620      	mov	r0, r4
 800de06:	d105      	bne.n	800de14 <_dtoa_r+0xaa4>
 800de08:	f000 fc03 	bl	800e612 <__multadd>
 800de0c:	4681      	mov	r9, r0
 800de0e:	4606      	mov	r6, r0
 800de10:	9505      	str	r5, [sp, #20]
 800de12:	e776      	b.n	800dd02 <_dtoa_r+0x992>
 800de14:	f000 fbfd 	bl	800e612 <__multadd>
 800de18:	4631      	mov	r1, r6
 800de1a:	4681      	mov	r9, r0
 800de1c:	2300      	movs	r3, #0
 800de1e:	220a      	movs	r2, #10
 800de20:	4620      	mov	r0, r4
 800de22:	f000 fbf6 	bl	800e612 <__multadd>
 800de26:	4606      	mov	r6, r0
 800de28:	e7f2      	b.n	800de10 <_dtoa_r+0xaa0>
 800de2a:	f04f 0900 	mov.w	r9, #0
 800de2e:	2201      	movs	r2, #1
 800de30:	9904      	ldr	r1, [sp, #16]
 800de32:	4620      	mov	r0, r4
 800de34:	f000 fda2 	bl	800e97c <__lshift>
 800de38:	4639      	mov	r1, r7
 800de3a:	9004      	str	r0, [sp, #16]
 800de3c:	f000 fdf2 	bl	800ea24 <__mcmp>
 800de40:	2800      	cmp	r0, #0
 800de42:	dcb6      	bgt.n	800ddb2 <_dtoa_r+0xa42>
 800de44:	d102      	bne.n	800de4c <_dtoa_r+0xadc>
 800de46:	f018 0f01 	tst.w	r8, #1
 800de4a:	d1b2      	bne.n	800ddb2 <_dtoa_r+0xa42>
 800de4c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de50:	2b30      	cmp	r3, #48	; 0x30
 800de52:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800de56:	f47f af0a 	bne.w	800dc6e <_dtoa_r+0x8fe>
 800de5a:	4615      	mov	r5, r2
 800de5c:	e7f6      	b.n	800de4c <_dtoa_r+0xadc>
 800de5e:	4593      	cmp	fp, r2
 800de60:	d105      	bne.n	800de6e <_dtoa_r+0xafe>
 800de62:	2331      	movs	r3, #49	; 0x31
 800de64:	f10a 0a01 	add.w	sl, sl, #1
 800de68:	f88b 3000 	strb.w	r3, [fp]
 800de6c:	e6ff      	b.n	800dc6e <_dtoa_r+0x8fe>
 800de6e:	4615      	mov	r5, r2
 800de70:	e79f      	b.n	800ddb2 <_dtoa_r+0xa42>
 800de72:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ded8 <_dtoa_r+0xb68>
 800de76:	e007      	b.n	800de88 <_dtoa_r+0xb18>
 800de78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de7a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dedc <_dtoa_r+0xb6c>
 800de7e:	b11b      	cbz	r3, 800de88 <_dtoa_r+0xb18>
 800de80:	f10b 0308 	add.w	r3, fp, #8
 800de84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de86:	6013      	str	r3, [r2, #0]
 800de88:	4658      	mov	r0, fp
 800de8a:	b017      	add	sp, #92	; 0x5c
 800de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de90:	9b06      	ldr	r3, [sp, #24]
 800de92:	2b01      	cmp	r3, #1
 800de94:	f77f ae35 	ble.w	800db02 <_dtoa_r+0x792>
 800de98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de9a:	9307      	str	r3, [sp, #28]
 800de9c:	e649      	b.n	800db32 <_dtoa_r+0x7c2>
 800de9e:	9b02      	ldr	r3, [sp, #8]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	dc03      	bgt.n	800deac <_dtoa_r+0xb3c>
 800dea4:	9b06      	ldr	r3, [sp, #24]
 800dea6:	2b02      	cmp	r3, #2
 800dea8:	f73f aecc 	bgt.w	800dc44 <_dtoa_r+0x8d4>
 800deac:	465d      	mov	r5, fp
 800deae:	4639      	mov	r1, r7
 800deb0:	9804      	ldr	r0, [sp, #16]
 800deb2:	f7ff f9d1 	bl	800d258 <quorem>
 800deb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800deba:	f805 8b01 	strb.w	r8, [r5], #1
 800debe:	9a02      	ldr	r2, [sp, #8]
 800dec0:	eba5 030b 	sub.w	r3, r5, fp
 800dec4:	429a      	cmp	r2, r3
 800dec6:	ddb0      	ble.n	800de2a <_dtoa_r+0xaba>
 800dec8:	2300      	movs	r3, #0
 800deca:	220a      	movs	r2, #10
 800decc:	9904      	ldr	r1, [sp, #16]
 800dece:	4620      	mov	r0, r4
 800ded0:	f000 fb9f 	bl	800e612 <__multadd>
 800ded4:	9004      	str	r0, [sp, #16]
 800ded6:	e7ea      	b.n	800deae <_dtoa_r+0xb3e>
 800ded8:	08011e94 	.word	0x08011e94
 800dedc:	08011f10 	.word	0x08011f10

0800dee0 <rshift>:
 800dee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dee2:	6906      	ldr	r6, [r0, #16]
 800dee4:	114b      	asrs	r3, r1, #5
 800dee6:	429e      	cmp	r6, r3
 800dee8:	f100 0414 	add.w	r4, r0, #20
 800deec:	dd30      	ble.n	800df50 <rshift+0x70>
 800deee:	f011 011f 	ands.w	r1, r1, #31
 800def2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800def6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800defa:	d108      	bne.n	800df0e <rshift+0x2e>
 800defc:	4621      	mov	r1, r4
 800defe:	42b2      	cmp	r2, r6
 800df00:	460b      	mov	r3, r1
 800df02:	d211      	bcs.n	800df28 <rshift+0x48>
 800df04:	f852 3b04 	ldr.w	r3, [r2], #4
 800df08:	f841 3b04 	str.w	r3, [r1], #4
 800df0c:	e7f7      	b.n	800defe <rshift+0x1e>
 800df0e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800df12:	f1c1 0c20 	rsb	ip, r1, #32
 800df16:	40cd      	lsrs	r5, r1
 800df18:	3204      	adds	r2, #4
 800df1a:	4623      	mov	r3, r4
 800df1c:	42b2      	cmp	r2, r6
 800df1e:	4617      	mov	r7, r2
 800df20:	d30c      	bcc.n	800df3c <rshift+0x5c>
 800df22:	601d      	str	r5, [r3, #0]
 800df24:	b105      	cbz	r5, 800df28 <rshift+0x48>
 800df26:	3304      	adds	r3, #4
 800df28:	1b1a      	subs	r2, r3, r4
 800df2a:	42a3      	cmp	r3, r4
 800df2c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800df30:	bf08      	it	eq
 800df32:	2300      	moveq	r3, #0
 800df34:	6102      	str	r2, [r0, #16]
 800df36:	bf08      	it	eq
 800df38:	6143      	streq	r3, [r0, #20]
 800df3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df3c:	683f      	ldr	r7, [r7, #0]
 800df3e:	fa07 f70c 	lsl.w	r7, r7, ip
 800df42:	433d      	orrs	r5, r7
 800df44:	f843 5b04 	str.w	r5, [r3], #4
 800df48:	f852 5b04 	ldr.w	r5, [r2], #4
 800df4c:	40cd      	lsrs	r5, r1
 800df4e:	e7e5      	b.n	800df1c <rshift+0x3c>
 800df50:	4623      	mov	r3, r4
 800df52:	e7e9      	b.n	800df28 <rshift+0x48>

0800df54 <__hexdig_fun>:
 800df54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800df58:	2b09      	cmp	r3, #9
 800df5a:	d802      	bhi.n	800df62 <__hexdig_fun+0xe>
 800df5c:	3820      	subs	r0, #32
 800df5e:	b2c0      	uxtb	r0, r0
 800df60:	4770      	bx	lr
 800df62:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800df66:	2b05      	cmp	r3, #5
 800df68:	d801      	bhi.n	800df6e <__hexdig_fun+0x1a>
 800df6a:	3847      	subs	r0, #71	; 0x47
 800df6c:	e7f7      	b.n	800df5e <__hexdig_fun+0xa>
 800df6e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800df72:	2b05      	cmp	r3, #5
 800df74:	d801      	bhi.n	800df7a <__hexdig_fun+0x26>
 800df76:	3827      	subs	r0, #39	; 0x27
 800df78:	e7f1      	b.n	800df5e <__hexdig_fun+0xa>
 800df7a:	2000      	movs	r0, #0
 800df7c:	4770      	bx	lr

0800df7e <__gethex>:
 800df7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df82:	b08b      	sub	sp, #44	; 0x2c
 800df84:	468a      	mov	sl, r1
 800df86:	9002      	str	r0, [sp, #8]
 800df88:	9816      	ldr	r0, [sp, #88]	; 0x58
 800df8a:	9306      	str	r3, [sp, #24]
 800df8c:	4690      	mov	r8, r2
 800df8e:	f000 fad0 	bl	800e532 <__localeconv_l>
 800df92:	6803      	ldr	r3, [r0, #0]
 800df94:	9303      	str	r3, [sp, #12]
 800df96:	4618      	mov	r0, r3
 800df98:	f7f2 f92a 	bl	80001f0 <strlen>
 800df9c:	9b03      	ldr	r3, [sp, #12]
 800df9e:	9001      	str	r0, [sp, #4]
 800dfa0:	4403      	add	r3, r0
 800dfa2:	f04f 0b00 	mov.w	fp, #0
 800dfa6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dfaa:	9307      	str	r3, [sp, #28]
 800dfac:	f8da 3000 	ldr.w	r3, [sl]
 800dfb0:	3302      	adds	r3, #2
 800dfb2:	461f      	mov	r7, r3
 800dfb4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dfb8:	2830      	cmp	r0, #48	; 0x30
 800dfba:	d06c      	beq.n	800e096 <__gethex+0x118>
 800dfbc:	f7ff ffca 	bl	800df54 <__hexdig_fun>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	2800      	cmp	r0, #0
 800dfc4:	d16a      	bne.n	800e09c <__gethex+0x11e>
 800dfc6:	9a01      	ldr	r2, [sp, #4]
 800dfc8:	9903      	ldr	r1, [sp, #12]
 800dfca:	4638      	mov	r0, r7
 800dfcc:	f7fe fa6b 	bl	800c4a6 <strncmp>
 800dfd0:	2800      	cmp	r0, #0
 800dfd2:	d166      	bne.n	800e0a2 <__gethex+0x124>
 800dfd4:	9b01      	ldr	r3, [sp, #4]
 800dfd6:	5cf8      	ldrb	r0, [r7, r3]
 800dfd8:	18fe      	adds	r6, r7, r3
 800dfda:	f7ff ffbb 	bl	800df54 <__hexdig_fun>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d062      	beq.n	800e0a8 <__gethex+0x12a>
 800dfe2:	4633      	mov	r3, r6
 800dfe4:	7818      	ldrb	r0, [r3, #0]
 800dfe6:	2830      	cmp	r0, #48	; 0x30
 800dfe8:	461f      	mov	r7, r3
 800dfea:	f103 0301 	add.w	r3, r3, #1
 800dfee:	d0f9      	beq.n	800dfe4 <__gethex+0x66>
 800dff0:	f7ff ffb0 	bl	800df54 <__hexdig_fun>
 800dff4:	fab0 f580 	clz	r5, r0
 800dff8:	096d      	lsrs	r5, r5, #5
 800dffa:	4634      	mov	r4, r6
 800dffc:	f04f 0b01 	mov.w	fp, #1
 800e000:	463a      	mov	r2, r7
 800e002:	4616      	mov	r6, r2
 800e004:	3201      	adds	r2, #1
 800e006:	7830      	ldrb	r0, [r6, #0]
 800e008:	f7ff ffa4 	bl	800df54 <__hexdig_fun>
 800e00c:	2800      	cmp	r0, #0
 800e00e:	d1f8      	bne.n	800e002 <__gethex+0x84>
 800e010:	9a01      	ldr	r2, [sp, #4]
 800e012:	9903      	ldr	r1, [sp, #12]
 800e014:	4630      	mov	r0, r6
 800e016:	f7fe fa46 	bl	800c4a6 <strncmp>
 800e01a:	b950      	cbnz	r0, 800e032 <__gethex+0xb4>
 800e01c:	b954      	cbnz	r4, 800e034 <__gethex+0xb6>
 800e01e:	9b01      	ldr	r3, [sp, #4]
 800e020:	18f4      	adds	r4, r6, r3
 800e022:	4622      	mov	r2, r4
 800e024:	4616      	mov	r6, r2
 800e026:	3201      	adds	r2, #1
 800e028:	7830      	ldrb	r0, [r6, #0]
 800e02a:	f7ff ff93 	bl	800df54 <__hexdig_fun>
 800e02e:	2800      	cmp	r0, #0
 800e030:	d1f8      	bne.n	800e024 <__gethex+0xa6>
 800e032:	b10c      	cbz	r4, 800e038 <__gethex+0xba>
 800e034:	1ba4      	subs	r4, r4, r6
 800e036:	00a4      	lsls	r4, r4, #2
 800e038:	7833      	ldrb	r3, [r6, #0]
 800e03a:	2b50      	cmp	r3, #80	; 0x50
 800e03c:	d001      	beq.n	800e042 <__gethex+0xc4>
 800e03e:	2b70      	cmp	r3, #112	; 0x70
 800e040:	d140      	bne.n	800e0c4 <__gethex+0x146>
 800e042:	7873      	ldrb	r3, [r6, #1]
 800e044:	2b2b      	cmp	r3, #43	; 0x2b
 800e046:	d031      	beq.n	800e0ac <__gethex+0x12e>
 800e048:	2b2d      	cmp	r3, #45	; 0x2d
 800e04a:	d033      	beq.n	800e0b4 <__gethex+0x136>
 800e04c:	1c71      	adds	r1, r6, #1
 800e04e:	f04f 0900 	mov.w	r9, #0
 800e052:	7808      	ldrb	r0, [r1, #0]
 800e054:	f7ff ff7e 	bl	800df54 <__hexdig_fun>
 800e058:	1e43      	subs	r3, r0, #1
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	2b18      	cmp	r3, #24
 800e05e:	d831      	bhi.n	800e0c4 <__gethex+0x146>
 800e060:	f1a0 0210 	sub.w	r2, r0, #16
 800e064:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e068:	f7ff ff74 	bl	800df54 <__hexdig_fun>
 800e06c:	1e43      	subs	r3, r0, #1
 800e06e:	b2db      	uxtb	r3, r3
 800e070:	2b18      	cmp	r3, #24
 800e072:	d922      	bls.n	800e0ba <__gethex+0x13c>
 800e074:	f1b9 0f00 	cmp.w	r9, #0
 800e078:	d000      	beq.n	800e07c <__gethex+0xfe>
 800e07a:	4252      	negs	r2, r2
 800e07c:	4414      	add	r4, r2
 800e07e:	f8ca 1000 	str.w	r1, [sl]
 800e082:	b30d      	cbz	r5, 800e0c8 <__gethex+0x14a>
 800e084:	f1bb 0f00 	cmp.w	fp, #0
 800e088:	bf0c      	ite	eq
 800e08a:	2706      	moveq	r7, #6
 800e08c:	2700      	movne	r7, #0
 800e08e:	4638      	mov	r0, r7
 800e090:	b00b      	add	sp, #44	; 0x2c
 800e092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e096:	f10b 0b01 	add.w	fp, fp, #1
 800e09a:	e78a      	b.n	800dfb2 <__gethex+0x34>
 800e09c:	2500      	movs	r5, #0
 800e09e:	462c      	mov	r4, r5
 800e0a0:	e7ae      	b.n	800e000 <__gethex+0x82>
 800e0a2:	463e      	mov	r6, r7
 800e0a4:	2501      	movs	r5, #1
 800e0a6:	e7c7      	b.n	800e038 <__gethex+0xba>
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	e7fb      	b.n	800e0a4 <__gethex+0x126>
 800e0ac:	f04f 0900 	mov.w	r9, #0
 800e0b0:	1cb1      	adds	r1, r6, #2
 800e0b2:	e7ce      	b.n	800e052 <__gethex+0xd4>
 800e0b4:	f04f 0901 	mov.w	r9, #1
 800e0b8:	e7fa      	b.n	800e0b0 <__gethex+0x132>
 800e0ba:	230a      	movs	r3, #10
 800e0bc:	fb03 0202 	mla	r2, r3, r2, r0
 800e0c0:	3a10      	subs	r2, #16
 800e0c2:	e7cf      	b.n	800e064 <__gethex+0xe6>
 800e0c4:	4631      	mov	r1, r6
 800e0c6:	e7da      	b.n	800e07e <__gethex+0x100>
 800e0c8:	1bf3      	subs	r3, r6, r7
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	4629      	mov	r1, r5
 800e0ce:	2b07      	cmp	r3, #7
 800e0d0:	dc49      	bgt.n	800e166 <__gethex+0x1e8>
 800e0d2:	9802      	ldr	r0, [sp, #8]
 800e0d4:	f000 fa52 	bl	800e57c <_Balloc>
 800e0d8:	9b01      	ldr	r3, [sp, #4]
 800e0da:	f100 0914 	add.w	r9, r0, #20
 800e0de:	f04f 0b00 	mov.w	fp, #0
 800e0e2:	f1c3 0301 	rsb	r3, r3, #1
 800e0e6:	4605      	mov	r5, r0
 800e0e8:	f8cd 9010 	str.w	r9, [sp, #16]
 800e0ec:	46da      	mov	sl, fp
 800e0ee:	9308      	str	r3, [sp, #32]
 800e0f0:	42b7      	cmp	r7, r6
 800e0f2:	d33b      	bcc.n	800e16c <__gethex+0x1ee>
 800e0f4:	9804      	ldr	r0, [sp, #16]
 800e0f6:	f840 ab04 	str.w	sl, [r0], #4
 800e0fa:	eba0 0009 	sub.w	r0, r0, r9
 800e0fe:	1080      	asrs	r0, r0, #2
 800e100:	6128      	str	r0, [r5, #16]
 800e102:	0147      	lsls	r7, r0, #5
 800e104:	4650      	mov	r0, sl
 800e106:	f000 fafd 	bl	800e704 <__hi0bits>
 800e10a:	f8d8 6000 	ldr.w	r6, [r8]
 800e10e:	1a3f      	subs	r7, r7, r0
 800e110:	42b7      	cmp	r7, r6
 800e112:	dd64      	ble.n	800e1de <__gethex+0x260>
 800e114:	1bbf      	subs	r7, r7, r6
 800e116:	4639      	mov	r1, r7
 800e118:	4628      	mov	r0, r5
 800e11a:	f000 fe0d 	bl	800ed38 <__any_on>
 800e11e:	4682      	mov	sl, r0
 800e120:	b178      	cbz	r0, 800e142 <__gethex+0x1c4>
 800e122:	1e7b      	subs	r3, r7, #1
 800e124:	1159      	asrs	r1, r3, #5
 800e126:	f003 021f 	and.w	r2, r3, #31
 800e12a:	f04f 0a01 	mov.w	sl, #1
 800e12e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e132:	fa0a f202 	lsl.w	r2, sl, r2
 800e136:	420a      	tst	r2, r1
 800e138:	d003      	beq.n	800e142 <__gethex+0x1c4>
 800e13a:	4553      	cmp	r3, sl
 800e13c:	dc46      	bgt.n	800e1cc <__gethex+0x24e>
 800e13e:	f04f 0a02 	mov.w	sl, #2
 800e142:	4639      	mov	r1, r7
 800e144:	4628      	mov	r0, r5
 800e146:	f7ff fecb 	bl	800dee0 <rshift>
 800e14a:	443c      	add	r4, r7
 800e14c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e150:	42a3      	cmp	r3, r4
 800e152:	da52      	bge.n	800e1fa <__gethex+0x27c>
 800e154:	4629      	mov	r1, r5
 800e156:	9802      	ldr	r0, [sp, #8]
 800e158:	f000 fa44 	bl	800e5e4 <_Bfree>
 800e15c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e15e:	2300      	movs	r3, #0
 800e160:	6013      	str	r3, [r2, #0]
 800e162:	27a3      	movs	r7, #163	; 0xa3
 800e164:	e793      	b.n	800e08e <__gethex+0x110>
 800e166:	3101      	adds	r1, #1
 800e168:	105b      	asrs	r3, r3, #1
 800e16a:	e7b0      	b.n	800e0ce <__gethex+0x150>
 800e16c:	1e73      	subs	r3, r6, #1
 800e16e:	9305      	str	r3, [sp, #20]
 800e170:	9a07      	ldr	r2, [sp, #28]
 800e172:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e176:	4293      	cmp	r3, r2
 800e178:	d018      	beq.n	800e1ac <__gethex+0x22e>
 800e17a:	f1bb 0f20 	cmp.w	fp, #32
 800e17e:	d107      	bne.n	800e190 <__gethex+0x212>
 800e180:	9b04      	ldr	r3, [sp, #16]
 800e182:	f8c3 a000 	str.w	sl, [r3]
 800e186:	3304      	adds	r3, #4
 800e188:	f04f 0a00 	mov.w	sl, #0
 800e18c:	9304      	str	r3, [sp, #16]
 800e18e:	46d3      	mov	fp, sl
 800e190:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e194:	f7ff fede 	bl	800df54 <__hexdig_fun>
 800e198:	f000 000f 	and.w	r0, r0, #15
 800e19c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e1a0:	ea4a 0a00 	orr.w	sl, sl, r0
 800e1a4:	f10b 0b04 	add.w	fp, fp, #4
 800e1a8:	9b05      	ldr	r3, [sp, #20]
 800e1aa:	e00d      	b.n	800e1c8 <__gethex+0x24a>
 800e1ac:	9b05      	ldr	r3, [sp, #20]
 800e1ae:	9a08      	ldr	r2, [sp, #32]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	42bb      	cmp	r3, r7
 800e1b4:	d3e1      	bcc.n	800e17a <__gethex+0x1fc>
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	9a01      	ldr	r2, [sp, #4]
 800e1ba:	9903      	ldr	r1, [sp, #12]
 800e1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e1be:	f7fe f972 	bl	800c4a6 <strncmp>
 800e1c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d1d8      	bne.n	800e17a <__gethex+0x1fc>
 800e1c8:	461e      	mov	r6, r3
 800e1ca:	e791      	b.n	800e0f0 <__gethex+0x172>
 800e1cc:	1eb9      	subs	r1, r7, #2
 800e1ce:	4628      	mov	r0, r5
 800e1d0:	f000 fdb2 	bl	800ed38 <__any_on>
 800e1d4:	2800      	cmp	r0, #0
 800e1d6:	d0b2      	beq.n	800e13e <__gethex+0x1c0>
 800e1d8:	f04f 0a03 	mov.w	sl, #3
 800e1dc:	e7b1      	b.n	800e142 <__gethex+0x1c4>
 800e1de:	da09      	bge.n	800e1f4 <__gethex+0x276>
 800e1e0:	1bf7      	subs	r7, r6, r7
 800e1e2:	4629      	mov	r1, r5
 800e1e4:	463a      	mov	r2, r7
 800e1e6:	9802      	ldr	r0, [sp, #8]
 800e1e8:	f000 fbc8 	bl	800e97c <__lshift>
 800e1ec:	1be4      	subs	r4, r4, r7
 800e1ee:	4605      	mov	r5, r0
 800e1f0:	f100 0914 	add.w	r9, r0, #20
 800e1f4:	f04f 0a00 	mov.w	sl, #0
 800e1f8:	e7a8      	b.n	800e14c <__gethex+0x1ce>
 800e1fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e1fe:	42a0      	cmp	r0, r4
 800e200:	dd6a      	ble.n	800e2d8 <__gethex+0x35a>
 800e202:	1b04      	subs	r4, r0, r4
 800e204:	42a6      	cmp	r6, r4
 800e206:	dc2e      	bgt.n	800e266 <__gethex+0x2e8>
 800e208:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e20c:	2b02      	cmp	r3, #2
 800e20e:	d022      	beq.n	800e256 <__gethex+0x2d8>
 800e210:	2b03      	cmp	r3, #3
 800e212:	d024      	beq.n	800e25e <__gethex+0x2e0>
 800e214:	2b01      	cmp	r3, #1
 800e216:	d115      	bne.n	800e244 <__gethex+0x2c6>
 800e218:	42a6      	cmp	r6, r4
 800e21a:	d113      	bne.n	800e244 <__gethex+0x2c6>
 800e21c:	2e01      	cmp	r6, #1
 800e21e:	dc0b      	bgt.n	800e238 <__gethex+0x2ba>
 800e220:	9a06      	ldr	r2, [sp, #24]
 800e222:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e226:	6013      	str	r3, [r2, #0]
 800e228:	2301      	movs	r3, #1
 800e22a:	612b      	str	r3, [r5, #16]
 800e22c:	f8c9 3000 	str.w	r3, [r9]
 800e230:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e232:	2762      	movs	r7, #98	; 0x62
 800e234:	601d      	str	r5, [r3, #0]
 800e236:	e72a      	b.n	800e08e <__gethex+0x110>
 800e238:	1e71      	subs	r1, r6, #1
 800e23a:	4628      	mov	r0, r5
 800e23c:	f000 fd7c 	bl	800ed38 <__any_on>
 800e240:	2800      	cmp	r0, #0
 800e242:	d1ed      	bne.n	800e220 <__gethex+0x2a2>
 800e244:	4629      	mov	r1, r5
 800e246:	9802      	ldr	r0, [sp, #8]
 800e248:	f000 f9cc 	bl	800e5e4 <_Bfree>
 800e24c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e24e:	2300      	movs	r3, #0
 800e250:	6013      	str	r3, [r2, #0]
 800e252:	2750      	movs	r7, #80	; 0x50
 800e254:	e71b      	b.n	800e08e <__gethex+0x110>
 800e256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d0e1      	beq.n	800e220 <__gethex+0x2a2>
 800e25c:	e7f2      	b.n	800e244 <__gethex+0x2c6>
 800e25e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e260:	2b00      	cmp	r3, #0
 800e262:	d1dd      	bne.n	800e220 <__gethex+0x2a2>
 800e264:	e7ee      	b.n	800e244 <__gethex+0x2c6>
 800e266:	1e67      	subs	r7, r4, #1
 800e268:	f1ba 0f00 	cmp.w	sl, #0
 800e26c:	d131      	bne.n	800e2d2 <__gethex+0x354>
 800e26e:	b127      	cbz	r7, 800e27a <__gethex+0x2fc>
 800e270:	4639      	mov	r1, r7
 800e272:	4628      	mov	r0, r5
 800e274:	f000 fd60 	bl	800ed38 <__any_on>
 800e278:	4682      	mov	sl, r0
 800e27a:	117a      	asrs	r2, r7, #5
 800e27c:	2301      	movs	r3, #1
 800e27e:	f007 071f 	and.w	r7, r7, #31
 800e282:	fa03 f707 	lsl.w	r7, r3, r7
 800e286:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e28a:	4621      	mov	r1, r4
 800e28c:	421f      	tst	r7, r3
 800e28e:	4628      	mov	r0, r5
 800e290:	bf18      	it	ne
 800e292:	f04a 0a02 	orrne.w	sl, sl, #2
 800e296:	1b36      	subs	r6, r6, r4
 800e298:	f7ff fe22 	bl	800dee0 <rshift>
 800e29c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e2a0:	2702      	movs	r7, #2
 800e2a2:	f1ba 0f00 	cmp.w	sl, #0
 800e2a6:	d048      	beq.n	800e33a <__gethex+0x3bc>
 800e2a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e2ac:	2b02      	cmp	r3, #2
 800e2ae:	d015      	beq.n	800e2dc <__gethex+0x35e>
 800e2b0:	2b03      	cmp	r3, #3
 800e2b2:	d017      	beq.n	800e2e4 <__gethex+0x366>
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d109      	bne.n	800e2cc <__gethex+0x34e>
 800e2b8:	f01a 0f02 	tst.w	sl, #2
 800e2bc:	d006      	beq.n	800e2cc <__gethex+0x34e>
 800e2be:	f8d9 3000 	ldr.w	r3, [r9]
 800e2c2:	ea4a 0a03 	orr.w	sl, sl, r3
 800e2c6:	f01a 0f01 	tst.w	sl, #1
 800e2ca:	d10e      	bne.n	800e2ea <__gethex+0x36c>
 800e2cc:	f047 0710 	orr.w	r7, r7, #16
 800e2d0:	e033      	b.n	800e33a <__gethex+0x3bc>
 800e2d2:	f04f 0a01 	mov.w	sl, #1
 800e2d6:	e7d0      	b.n	800e27a <__gethex+0x2fc>
 800e2d8:	2701      	movs	r7, #1
 800e2da:	e7e2      	b.n	800e2a2 <__gethex+0x324>
 800e2dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2de:	f1c3 0301 	rsb	r3, r3, #1
 800e2e2:	9315      	str	r3, [sp, #84]	; 0x54
 800e2e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d0f0      	beq.n	800e2cc <__gethex+0x34e>
 800e2ea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e2ee:	f105 0314 	add.w	r3, r5, #20
 800e2f2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e2f6:	eb03 010a 	add.w	r1, r3, sl
 800e2fa:	f04f 0c00 	mov.w	ip, #0
 800e2fe:	4618      	mov	r0, r3
 800e300:	f853 2b04 	ldr.w	r2, [r3], #4
 800e304:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800e308:	d01c      	beq.n	800e344 <__gethex+0x3c6>
 800e30a:	3201      	adds	r2, #1
 800e30c:	6002      	str	r2, [r0, #0]
 800e30e:	2f02      	cmp	r7, #2
 800e310:	f105 0314 	add.w	r3, r5, #20
 800e314:	d138      	bne.n	800e388 <__gethex+0x40a>
 800e316:	f8d8 2000 	ldr.w	r2, [r8]
 800e31a:	3a01      	subs	r2, #1
 800e31c:	42b2      	cmp	r2, r6
 800e31e:	d10a      	bne.n	800e336 <__gethex+0x3b8>
 800e320:	1171      	asrs	r1, r6, #5
 800e322:	2201      	movs	r2, #1
 800e324:	f006 061f 	and.w	r6, r6, #31
 800e328:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e32c:	fa02 f606 	lsl.w	r6, r2, r6
 800e330:	421e      	tst	r6, r3
 800e332:	bf18      	it	ne
 800e334:	4617      	movne	r7, r2
 800e336:	f047 0720 	orr.w	r7, r7, #32
 800e33a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e33c:	601d      	str	r5, [r3, #0]
 800e33e:	9b06      	ldr	r3, [sp, #24]
 800e340:	601c      	str	r4, [r3, #0]
 800e342:	e6a4      	b.n	800e08e <__gethex+0x110>
 800e344:	4299      	cmp	r1, r3
 800e346:	f843 cc04 	str.w	ip, [r3, #-4]
 800e34a:	d8d8      	bhi.n	800e2fe <__gethex+0x380>
 800e34c:	68ab      	ldr	r3, [r5, #8]
 800e34e:	4599      	cmp	r9, r3
 800e350:	db12      	blt.n	800e378 <__gethex+0x3fa>
 800e352:	6869      	ldr	r1, [r5, #4]
 800e354:	9802      	ldr	r0, [sp, #8]
 800e356:	3101      	adds	r1, #1
 800e358:	f000 f910 	bl	800e57c <_Balloc>
 800e35c:	692a      	ldr	r2, [r5, #16]
 800e35e:	3202      	adds	r2, #2
 800e360:	f105 010c 	add.w	r1, r5, #12
 800e364:	4683      	mov	fp, r0
 800e366:	0092      	lsls	r2, r2, #2
 800e368:	300c      	adds	r0, #12
 800e36a:	f7fd f933 	bl	800b5d4 <memcpy>
 800e36e:	4629      	mov	r1, r5
 800e370:	9802      	ldr	r0, [sp, #8]
 800e372:	f000 f937 	bl	800e5e4 <_Bfree>
 800e376:	465d      	mov	r5, fp
 800e378:	692b      	ldr	r3, [r5, #16]
 800e37a:	1c5a      	adds	r2, r3, #1
 800e37c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e380:	612a      	str	r2, [r5, #16]
 800e382:	2201      	movs	r2, #1
 800e384:	615a      	str	r2, [r3, #20]
 800e386:	e7c2      	b.n	800e30e <__gethex+0x390>
 800e388:	692a      	ldr	r2, [r5, #16]
 800e38a:	454a      	cmp	r2, r9
 800e38c:	dd0b      	ble.n	800e3a6 <__gethex+0x428>
 800e38e:	2101      	movs	r1, #1
 800e390:	4628      	mov	r0, r5
 800e392:	f7ff fda5 	bl	800dee0 <rshift>
 800e396:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e39a:	3401      	adds	r4, #1
 800e39c:	42a3      	cmp	r3, r4
 800e39e:	f6ff aed9 	blt.w	800e154 <__gethex+0x1d6>
 800e3a2:	2701      	movs	r7, #1
 800e3a4:	e7c7      	b.n	800e336 <__gethex+0x3b8>
 800e3a6:	f016 061f 	ands.w	r6, r6, #31
 800e3aa:	d0fa      	beq.n	800e3a2 <__gethex+0x424>
 800e3ac:	449a      	add	sl, r3
 800e3ae:	f1c6 0620 	rsb	r6, r6, #32
 800e3b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e3b6:	f000 f9a5 	bl	800e704 <__hi0bits>
 800e3ba:	42b0      	cmp	r0, r6
 800e3bc:	dbe7      	blt.n	800e38e <__gethex+0x410>
 800e3be:	e7f0      	b.n	800e3a2 <__gethex+0x424>

0800e3c0 <L_shift>:
 800e3c0:	f1c2 0208 	rsb	r2, r2, #8
 800e3c4:	0092      	lsls	r2, r2, #2
 800e3c6:	b570      	push	{r4, r5, r6, lr}
 800e3c8:	f1c2 0620 	rsb	r6, r2, #32
 800e3cc:	6843      	ldr	r3, [r0, #4]
 800e3ce:	6804      	ldr	r4, [r0, #0]
 800e3d0:	fa03 f506 	lsl.w	r5, r3, r6
 800e3d4:	432c      	orrs	r4, r5
 800e3d6:	40d3      	lsrs	r3, r2
 800e3d8:	6004      	str	r4, [r0, #0]
 800e3da:	f840 3f04 	str.w	r3, [r0, #4]!
 800e3de:	4288      	cmp	r0, r1
 800e3e0:	d3f4      	bcc.n	800e3cc <L_shift+0xc>
 800e3e2:	bd70      	pop	{r4, r5, r6, pc}

0800e3e4 <__match>:
 800e3e4:	b530      	push	{r4, r5, lr}
 800e3e6:	6803      	ldr	r3, [r0, #0]
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3ee:	b914      	cbnz	r4, 800e3f6 <__match+0x12>
 800e3f0:	6003      	str	r3, [r0, #0]
 800e3f2:	2001      	movs	r0, #1
 800e3f4:	bd30      	pop	{r4, r5, pc}
 800e3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e3fe:	2d19      	cmp	r5, #25
 800e400:	bf98      	it	ls
 800e402:	3220      	addls	r2, #32
 800e404:	42a2      	cmp	r2, r4
 800e406:	d0f0      	beq.n	800e3ea <__match+0x6>
 800e408:	2000      	movs	r0, #0
 800e40a:	e7f3      	b.n	800e3f4 <__match+0x10>

0800e40c <__hexnan>:
 800e40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e410:	680b      	ldr	r3, [r1, #0]
 800e412:	6801      	ldr	r1, [r0, #0]
 800e414:	115f      	asrs	r7, r3, #5
 800e416:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e41a:	f013 031f 	ands.w	r3, r3, #31
 800e41e:	b087      	sub	sp, #28
 800e420:	bf18      	it	ne
 800e422:	3704      	addne	r7, #4
 800e424:	2500      	movs	r5, #0
 800e426:	1f3e      	subs	r6, r7, #4
 800e428:	4682      	mov	sl, r0
 800e42a:	4690      	mov	r8, r2
 800e42c:	9301      	str	r3, [sp, #4]
 800e42e:	f847 5c04 	str.w	r5, [r7, #-4]
 800e432:	46b1      	mov	r9, r6
 800e434:	4634      	mov	r4, r6
 800e436:	9502      	str	r5, [sp, #8]
 800e438:	46ab      	mov	fp, r5
 800e43a:	784a      	ldrb	r2, [r1, #1]
 800e43c:	1c4b      	adds	r3, r1, #1
 800e43e:	9303      	str	r3, [sp, #12]
 800e440:	b342      	cbz	r2, 800e494 <__hexnan+0x88>
 800e442:	4610      	mov	r0, r2
 800e444:	9105      	str	r1, [sp, #20]
 800e446:	9204      	str	r2, [sp, #16]
 800e448:	f7ff fd84 	bl	800df54 <__hexdig_fun>
 800e44c:	2800      	cmp	r0, #0
 800e44e:	d143      	bne.n	800e4d8 <__hexnan+0xcc>
 800e450:	9a04      	ldr	r2, [sp, #16]
 800e452:	9905      	ldr	r1, [sp, #20]
 800e454:	2a20      	cmp	r2, #32
 800e456:	d818      	bhi.n	800e48a <__hexnan+0x7e>
 800e458:	9b02      	ldr	r3, [sp, #8]
 800e45a:	459b      	cmp	fp, r3
 800e45c:	dd13      	ble.n	800e486 <__hexnan+0x7a>
 800e45e:	454c      	cmp	r4, r9
 800e460:	d206      	bcs.n	800e470 <__hexnan+0x64>
 800e462:	2d07      	cmp	r5, #7
 800e464:	dc04      	bgt.n	800e470 <__hexnan+0x64>
 800e466:	462a      	mov	r2, r5
 800e468:	4649      	mov	r1, r9
 800e46a:	4620      	mov	r0, r4
 800e46c:	f7ff ffa8 	bl	800e3c0 <L_shift>
 800e470:	4544      	cmp	r4, r8
 800e472:	d944      	bls.n	800e4fe <__hexnan+0xf2>
 800e474:	2300      	movs	r3, #0
 800e476:	f1a4 0904 	sub.w	r9, r4, #4
 800e47a:	f844 3c04 	str.w	r3, [r4, #-4]
 800e47e:	f8cd b008 	str.w	fp, [sp, #8]
 800e482:	464c      	mov	r4, r9
 800e484:	461d      	mov	r5, r3
 800e486:	9903      	ldr	r1, [sp, #12]
 800e488:	e7d7      	b.n	800e43a <__hexnan+0x2e>
 800e48a:	2a29      	cmp	r2, #41	; 0x29
 800e48c:	d14a      	bne.n	800e524 <__hexnan+0x118>
 800e48e:	3102      	adds	r1, #2
 800e490:	f8ca 1000 	str.w	r1, [sl]
 800e494:	f1bb 0f00 	cmp.w	fp, #0
 800e498:	d044      	beq.n	800e524 <__hexnan+0x118>
 800e49a:	454c      	cmp	r4, r9
 800e49c:	d206      	bcs.n	800e4ac <__hexnan+0xa0>
 800e49e:	2d07      	cmp	r5, #7
 800e4a0:	dc04      	bgt.n	800e4ac <__hexnan+0xa0>
 800e4a2:	462a      	mov	r2, r5
 800e4a4:	4649      	mov	r1, r9
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f7ff ff8a 	bl	800e3c0 <L_shift>
 800e4ac:	4544      	cmp	r4, r8
 800e4ae:	d928      	bls.n	800e502 <__hexnan+0xf6>
 800e4b0:	4643      	mov	r3, r8
 800e4b2:	f854 2b04 	ldr.w	r2, [r4], #4
 800e4b6:	f843 2b04 	str.w	r2, [r3], #4
 800e4ba:	42a6      	cmp	r6, r4
 800e4bc:	d2f9      	bcs.n	800e4b2 <__hexnan+0xa6>
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f843 2b04 	str.w	r2, [r3], #4
 800e4c4:	429e      	cmp	r6, r3
 800e4c6:	d2fb      	bcs.n	800e4c0 <__hexnan+0xb4>
 800e4c8:	6833      	ldr	r3, [r6, #0]
 800e4ca:	b91b      	cbnz	r3, 800e4d4 <__hexnan+0xc8>
 800e4cc:	4546      	cmp	r6, r8
 800e4ce:	d127      	bne.n	800e520 <__hexnan+0x114>
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	6033      	str	r3, [r6, #0]
 800e4d4:	2005      	movs	r0, #5
 800e4d6:	e026      	b.n	800e526 <__hexnan+0x11a>
 800e4d8:	3501      	adds	r5, #1
 800e4da:	2d08      	cmp	r5, #8
 800e4dc:	f10b 0b01 	add.w	fp, fp, #1
 800e4e0:	dd06      	ble.n	800e4f0 <__hexnan+0xe4>
 800e4e2:	4544      	cmp	r4, r8
 800e4e4:	d9cf      	bls.n	800e486 <__hexnan+0x7a>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e4ec:	2501      	movs	r5, #1
 800e4ee:	3c04      	subs	r4, #4
 800e4f0:	6822      	ldr	r2, [r4, #0]
 800e4f2:	f000 000f 	and.w	r0, r0, #15
 800e4f6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e4fa:	6020      	str	r0, [r4, #0]
 800e4fc:	e7c3      	b.n	800e486 <__hexnan+0x7a>
 800e4fe:	2508      	movs	r5, #8
 800e500:	e7c1      	b.n	800e486 <__hexnan+0x7a>
 800e502:	9b01      	ldr	r3, [sp, #4]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d0df      	beq.n	800e4c8 <__hexnan+0xbc>
 800e508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e50c:	f1c3 0320 	rsb	r3, r3, #32
 800e510:	fa22 f303 	lsr.w	r3, r2, r3
 800e514:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e518:	401a      	ands	r2, r3
 800e51a:	f847 2c04 	str.w	r2, [r7, #-4]
 800e51e:	e7d3      	b.n	800e4c8 <__hexnan+0xbc>
 800e520:	3e04      	subs	r6, #4
 800e522:	e7d1      	b.n	800e4c8 <__hexnan+0xbc>
 800e524:	2004      	movs	r0, #4
 800e526:	b007      	add	sp, #28
 800e528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e52c <__locale_ctype_ptr_l>:
 800e52c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e530:	4770      	bx	lr

0800e532 <__localeconv_l>:
 800e532:	30f0      	adds	r0, #240	; 0xf0
 800e534:	4770      	bx	lr
	...

0800e538 <_localeconv_r>:
 800e538:	4b04      	ldr	r3, [pc, #16]	; (800e54c <_localeconv_r+0x14>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	6a18      	ldr	r0, [r3, #32]
 800e53e:	4b04      	ldr	r3, [pc, #16]	; (800e550 <_localeconv_r+0x18>)
 800e540:	2800      	cmp	r0, #0
 800e542:	bf08      	it	eq
 800e544:	4618      	moveq	r0, r3
 800e546:	30f0      	adds	r0, #240	; 0xf0
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop
 800e54c:	20000988 	.word	0x20000988
 800e550:	200009ec 	.word	0x200009ec

0800e554 <__ascii_mbtowc>:
 800e554:	b082      	sub	sp, #8
 800e556:	b901      	cbnz	r1, 800e55a <__ascii_mbtowc+0x6>
 800e558:	a901      	add	r1, sp, #4
 800e55a:	b142      	cbz	r2, 800e56e <__ascii_mbtowc+0x1a>
 800e55c:	b14b      	cbz	r3, 800e572 <__ascii_mbtowc+0x1e>
 800e55e:	7813      	ldrb	r3, [r2, #0]
 800e560:	600b      	str	r3, [r1, #0]
 800e562:	7812      	ldrb	r2, [r2, #0]
 800e564:	1c10      	adds	r0, r2, #0
 800e566:	bf18      	it	ne
 800e568:	2001      	movne	r0, #1
 800e56a:	b002      	add	sp, #8
 800e56c:	4770      	bx	lr
 800e56e:	4610      	mov	r0, r2
 800e570:	e7fb      	b.n	800e56a <__ascii_mbtowc+0x16>
 800e572:	f06f 0001 	mvn.w	r0, #1
 800e576:	e7f8      	b.n	800e56a <__ascii_mbtowc+0x16>

0800e578 <__malloc_lock>:
 800e578:	4770      	bx	lr

0800e57a <__malloc_unlock>:
 800e57a:	4770      	bx	lr

0800e57c <_Balloc>:
 800e57c:	b570      	push	{r4, r5, r6, lr}
 800e57e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e580:	4604      	mov	r4, r0
 800e582:	460e      	mov	r6, r1
 800e584:	b93d      	cbnz	r5, 800e596 <_Balloc+0x1a>
 800e586:	2010      	movs	r0, #16
 800e588:	f7fd f814 	bl	800b5b4 <malloc>
 800e58c:	6260      	str	r0, [r4, #36]	; 0x24
 800e58e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e592:	6005      	str	r5, [r0, #0]
 800e594:	60c5      	str	r5, [r0, #12]
 800e596:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e598:	68eb      	ldr	r3, [r5, #12]
 800e59a:	b183      	cbz	r3, 800e5be <_Balloc+0x42>
 800e59c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e59e:	68db      	ldr	r3, [r3, #12]
 800e5a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e5a4:	b9b8      	cbnz	r0, 800e5d6 <_Balloc+0x5a>
 800e5a6:	2101      	movs	r1, #1
 800e5a8:	fa01 f506 	lsl.w	r5, r1, r6
 800e5ac:	1d6a      	adds	r2, r5, #5
 800e5ae:	0092      	lsls	r2, r2, #2
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	f000 fbe2 	bl	800ed7a <_calloc_r>
 800e5b6:	b160      	cbz	r0, 800e5d2 <_Balloc+0x56>
 800e5b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e5bc:	e00e      	b.n	800e5dc <_Balloc+0x60>
 800e5be:	2221      	movs	r2, #33	; 0x21
 800e5c0:	2104      	movs	r1, #4
 800e5c2:	4620      	mov	r0, r4
 800e5c4:	f000 fbd9 	bl	800ed7a <_calloc_r>
 800e5c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5ca:	60e8      	str	r0, [r5, #12]
 800e5cc:	68db      	ldr	r3, [r3, #12]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d1e4      	bne.n	800e59c <_Balloc+0x20>
 800e5d2:	2000      	movs	r0, #0
 800e5d4:	bd70      	pop	{r4, r5, r6, pc}
 800e5d6:	6802      	ldr	r2, [r0, #0]
 800e5d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e5dc:	2300      	movs	r3, #0
 800e5de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e5e2:	e7f7      	b.n	800e5d4 <_Balloc+0x58>

0800e5e4 <_Bfree>:
 800e5e4:	b570      	push	{r4, r5, r6, lr}
 800e5e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e5e8:	4606      	mov	r6, r0
 800e5ea:	460d      	mov	r5, r1
 800e5ec:	b93c      	cbnz	r4, 800e5fe <_Bfree+0x1a>
 800e5ee:	2010      	movs	r0, #16
 800e5f0:	f7fc ffe0 	bl	800b5b4 <malloc>
 800e5f4:	6270      	str	r0, [r6, #36]	; 0x24
 800e5f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5fa:	6004      	str	r4, [r0, #0]
 800e5fc:	60c4      	str	r4, [r0, #12]
 800e5fe:	b13d      	cbz	r5, 800e610 <_Bfree+0x2c>
 800e600:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e602:	686a      	ldr	r2, [r5, #4]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e60a:	6029      	str	r1, [r5, #0]
 800e60c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e610:	bd70      	pop	{r4, r5, r6, pc}

0800e612 <__multadd>:
 800e612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e616:	690d      	ldr	r5, [r1, #16]
 800e618:	461f      	mov	r7, r3
 800e61a:	4606      	mov	r6, r0
 800e61c:	460c      	mov	r4, r1
 800e61e:	f101 0c14 	add.w	ip, r1, #20
 800e622:	2300      	movs	r3, #0
 800e624:	f8dc 0000 	ldr.w	r0, [ip]
 800e628:	b281      	uxth	r1, r0
 800e62a:	fb02 7101 	mla	r1, r2, r1, r7
 800e62e:	0c0f      	lsrs	r7, r1, #16
 800e630:	0c00      	lsrs	r0, r0, #16
 800e632:	fb02 7000 	mla	r0, r2, r0, r7
 800e636:	b289      	uxth	r1, r1
 800e638:	3301      	adds	r3, #1
 800e63a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e63e:	429d      	cmp	r5, r3
 800e640:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e644:	f84c 1b04 	str.w	r1, [ip], #4
 800e648:	dcec      	bgt.n	800e624 <__multadd+0x12>
 800e64a:	b1d7      	cbz	r7, 800e682 <__multadd+0x70>
 800e64c:	68a3      	ldr	r3, [r4, #8]
 800e64e:	42ab      	cmp	r3, r5
 800e650:	dc12      	bgt.n	800e678 <__multadd+0x66>
 800e652:	6861      	ldr	r1, [r4, #4]
 800e654:	4630      	mov	r0, r6
 800e656:	3101      	adds	r1, #1
 800e658:	f7ff ff90 	bl	800e57c <_Balloc>
 800e65c:	6922      	ldr	r2, [r4, #16]
 800e65e:	3202      	adds	r2, #2
 800e660:	f104 010c 	add.w	r1, r4, #12
 800e664:	4680      	mov	r8, r0
 800e666:	0092      	lsls	r2, r2, #2
 800e668:	300c      	adds	r0, #12
 800e66a:	f7fc ffb3 	bl	800b5d4 <memcpy>
 800e66e:	4621      	mov	r1, r4
 800e670:	4630      	mov	r0, r6
 800e672:	f7ff ffb7 	bl	800e5e4 <_Bfree>
 800e676:	4644      	mov	r4, r8
 800e678:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e67c:	3501      	adds	r5, #1
 800e67e:	615f      	str	r7, [r3, #20]
 800e680:	6125      	str	r5, [r4, #16]
 800e682:	4620      	mov	r0, r4
 800e684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e688 <__s2b>:
 800e688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e68c:	460c      	mov	r4, r1
 800e68e:	4615      	mov	r5, r2
 800e690:	461f      	mov	r7, r3
 800e692:	2209      	movs	r2, #9
 800e694:	3308      	adds	r3, #8
 800e696:	4606      	mov	r6, r0
 800e698:	fb93 f3f2 	sdiv	r3, r3, r2
 800e69c:	2100      	movs	r1, #0
 800e69e:	2201      	movs	r2, #1
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	db20      	blt.n	800e6e6 <__s2b+0x5e>
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	f7ff ff69 	bl	800e57c <_Balloc>
 800e6aa:	9b08      	ldr	r3, [sp, #32]
 800e6ac:	6143      	str	r3, [r0, #20]
 800e6ae:	2d09      	cmp	r5, #9
 800e6b0:	f04f 0301 	mov.w	r3, #1
 800e6b4:	6103      	str	r3, [r0, #16]
 800e6b6:	dd19      	ble.n	800e6ec <__s2b+0x64>
 800e6b8:	f104 0809 	add.w	r8, r4, #9
 800e6bc:	46c1      	mov	r9, r8
 800e6be:	442c      	add	r4, r5
 800e6c0:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e6c4:	4601      	mov	r1, r0
 800e6c6:	3b30      	subs	r3, #48	; 0x30
 800e6c8:	220a      	movs	r2, #10
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f7ff ffa1 	bl	800e612 <__multadd>
 800e6d0:	45a1      	cmp	r9, r4
 800e6d2:	d1f5      	bne.n	800e6c0 <__s2b+0x38>
 800e6d4:	eb08 0405 	add.w	r4, r8, r5
 800e6d8:	3c08      	subs	r4, #8
 800e6da:	1b2d      	subs	r5, r5, r4
 800e6dc:	1963      	adds	r3, r4, r5
 800e6de:	42bb      	cmp	r3, r7
 800e6e0:	db07      	blt.n	800e6f2 <__s2b+0x6a>
 800e6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6e6:	0052      	lsls	r2, r2, #1
 800e6e8:	3101      	adds	r1, #1
 800e6ea:	e7d9      	b.n	800e6a0 <__s2b+0x18>
 800e6ec:	340a      	adds	r4, #10
 800e6ee:	2509      	movs	r5, #9
 800e6f0:	e7f3      	b.n	800e6da <__s2b+0x52>
 800e6f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e6f6:	4601      	mov	r1, r0
 800e6f8:	3b30      	subs	r3, #48	; 0x30
 800e6fa:	220a      	movs	r2, #10
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	f7ff ff88 	bl	800e612 <__multadd>
 800e702:	e7eb      	b.n	800e6dc <__s2b+0x54>

0800e704 <__hi0bits>:
 800e704:	0c02      	lsrs	r2, r0, #16
 800e706:	0412      	lsls	r2, r2, #16
 800e708:	4603      	mov	r3, r0
 800e70a:	b9b2      	cbnz	r2, 800e73a <__hi0bits+0x36>
 800e70c:	0403      	lsls	r3, r0, #16
 800e70e:	2010      	movs	r0, #16
 800e710:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e714:	bf04      	itt	eq
 800e716:	021b      	lsleq	r3, r3, #8
 800e718:	3008      	addeq	r0, #8
 800e71a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e71e:	bf04      	itt	eq
 800e720:	011b      	lsleq	r3, r3, #4
 800e722:	3004      	addeq	r0, #4
 800e724:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e728:	bf04      	itt	eq
 800e72a:	009b      	lsleq	r3, r3, #2
 800e72c:	3002      	addeq	r0, #2
 800e72e:	2b00      	cmp	r3, #0
 800e730:	db06      	blt.n	800e740 <__hi0bits+0x3c>
 800e732:	005b      	lsls	r3, r3, #1
 800e734:	d503      	bpl.n	800e73e <__hi0bits+0x3a>
 800e736:	3001      	adds	r0, #1
 800e738:	4770      	bx	lr
 800e73a:	2000      	movs	r0, #0
 800e73c:	e7e8      	b.n	800e710 <__hi0bits+0xc>
 800e73e:	2020      	movs	r0, #32
 800e740:	4770      	bx	lr

0800e742 <__lo0bits>:
 800e742:	6803      	ldr	r3, [r0, #0]
 800e744:	f013 0207 	ands.w	r2, r3, #7
 800e748:	4601      	mov	r1, r0
 800e74a:	d00b      	beq.n	800e764 <__lo0bits+0x22>
 800e74c:	07da      	lsls	r2, r3, #31
 800e74e:	d423      	bmi.n	800e798 <__lo0bits+0x56>
 800e750:	0798      	lsls	r0, r3, #30
 800e752:	bf49      	itett	mi
 800e754:	085b      	lsrmi	r3, r3, #1
 800e756:	089b      	lsrpl	r3, r3, #2
 800e758:	2001      	movmi	r0, #1
 800e75a:	600b      	strmi	r3, [r1, #0]
 800e75c:	bf5c      	itt	pl
 800e75e:	600b      	strpl	r3, [r1, #0]
 800e760:	2002      	movpl	r0, #2
 800e762:	4770      	bx	lr
 800e764:	b298      	uxth	r0, r3
 800e766:	b9a8      	cbnz	r0, 800e794 <__lo0bits+0x52>
 800e768:	0c1b      	lsrs	r3, r3, #16
 800e76a:	2010      	movs	r0, #16
 800e76c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e770:	bf04      	itt	eq
 800e772:	0a1b      	lsreq	r3, r3, #8
 800e774:	3008      	addeq	r0, #8
 800e776:	071a      	lsls	r2, r3, #28
 800e778:	bf04      	itt	eq
 800e77a:	091b      	lsreq	r3, r3, #4
 800e77c:	3004      	addeq	r0, #4
 800e77e:	079a      	lsls	r2, r3, #30
 800e780:	bf04      	itt	eq
 800e782:	089b      	lsreq	r3, r3, #2
 800e784:	3002      	addeq	r0, #2
 800e786:	07da      	lsls	r2, r3, #31
 800e788:	d402      	bmi.n	800e790 <__lo0bits+0x4e>
 800e78a:	085b      	lsrs	r3, r3, #1
 800e78c:	d006      	beq.n	800e79c <__lo0bits+0x5a>
 800e78e:	3001      	adds	r0, #1
 800e790:	600b      	str	r3, [r1, #0]
 800e792:	4770      	bx	lr
 800e794:	4610      	mov	r0, r2
 800e796:	e7e9      	b.n	800e76c <__lo0bits+0x2a>
 800e798:	2000      	movs	r0, #0
 800e79a:	4770      	bx	lr
 800e79c:	2020      	movs	r0, #32
 800e79e:	4770      	bx	lr

0800e7a0 <__i2b>:
 800e7a0:	b510      	push	{r4, lr}
 800e7a2:	460c      	mov	r4, r1
 800e7a4:	2101      	movs	r1, #1
 800e7a6:	f7ff fee9 	bl	800e57c <_Balloc>
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	6144      	str	r4, [r0, #20]
 800e7ae:	6102      	str	r2, [r0, #16]
 800e7b0:	bd10      	pop	{r4, pc}

0800e7b2 <__multiply>:
 800e7b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7b6:	4614      	mov	r4, r2
 800e7b8:	690a      	ldr	r2, [r1, #16]
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	bfb8      	it	lt
 800e7c0:	460b      	movlt	r3, r1
 800e7c2:	4688      	mov	r8, r1
 800e7c4:	bfbc      	itt	lt
 800e7c6:	46a0      	movlt	r8, r4
 800e7c8:	461c      	movlt	r4, r3
 800e7ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e7ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e7d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e7d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e7da:	eb07 0609 	add.w	r6, r7, r9
 800e7de:	42b3      	cmp	r3, r6
 800e7e0:	bfb8      	it	lt
 800e7e2:	3101      	addlt	r1, #1
 800e7e4:	f7ff feca 	bl	800e57c <_Balloc>
 800e7e8:	f100 0514 	add.w	r5, r0, #20
 800e7ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e7f0:	462b      	mov	r3, r5
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	4573      	cmp	r3, lr
 800e7f6:	d316      	bcc.n	800e826 <__multiply+0x74>
 800e7f8:	f104 0214 	add.w	r2, r4, #20
 800e7fc:	f108 0114 	add.w	r1, r8, #20
 800e800:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e804:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	9b00      	ldr	r3, [sp, #0]
 800e80c:	9201      	str	r2, [sp, #4]
 800e80e:	4293      	cmp	r3, r2
 800e810:	d80c      	bhi.n	800e82c <__multiply+0x7a>
 800e812:	2e00      	cmp	r6, #0
 800e814:	dd03      	ble.n	800e81e <__multiply+0x6c>
 800e816:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d05d      	beq.n	800e8da <__multiply+0x128>
 800e81e:	6106      	str	r6, [r0, #16]
 800e820:	b003      	add	sp, #12
 800e822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e826:	f843 2b04 	str.w	r2, [r3], #4
 800e82a:	e7e3      	b.n	800e7f4 <__multiply+0x42>
 800e82c:	f8b2 b000 	ldrh.w	fp, [r2]
 800e830:	f1bb 0f00 	cmp.w	fp, #0
 800e834:	d023      	beq.n	800e87e <__multiply+0xcc>
 800e836:	4689      	mov	r9, r1
 800e838:	46ac      	mov	ip, r5
 800e83a:	f04f 0800 	mov.w	r8, #0
 800e83e:	f859 4b04 	ldr.w	r4, [r9], #4
 800e842:	f8dc a000 	ldr.w	sl, [ip]
 800e846:	b2a3      	uxth	r3, r4
 800e848:	fa1f fa8a 	uxth.w	sl, sl
 800e84c:	fb0b a303 	mla	r3, fp, r3, sl
 800e850:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e854:	f8dc 4000 	ldr.w	r4, [ip]
 800e858:	4443      	add	r3, r8
 800e85a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e85e:	fb0b 840a 	mla	r4, fp, sl, r8
 800e862:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e866:	46e2      	mov	sl, ip
 800e868:	b29b      	uxth	r3, r3
 800e86a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e86e:	454f      	cmp	r7, r9
 800e870:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e874:	f84a 3b04 	str.w	r3, [sl], #4
 800e878:	d82b      	bhi.n	800e8d2 <__multiply+0x120>
 800e87a:	f8cc 8004 	str.w	r8, [ip, #4]
 800e87e:	9b01      	ldr	r3, [sp, #4]
 800e880:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e884:	3204      	adds	r2, #4
 800e886:	f1ba 0f00 	cmp.w	sl, #0
 800e88a:	d020      	beq.n	800e8ce <__multiply+0x11c>
 800e88c:	682b      	ldr	r3, [r5, #0]
 800e88e:	4689      	mov	r9, r1
 800e890:	46a8      	mov	r8, r5
 800e892:	f04f 0b00 	mov.w	fp, #0
 800e896:	f8b9 c000 	ldrh.w	ip, [r9]
 800e89a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e89e:	fb0a 440c 	mla	r4, sl, ip, r4
 800e8a2:	445c      	add	r4, fp
 800e8a4:	46c4      	mov	ip, r8
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e8ac:	f84c 3b04 	str.w	r3, [ip], #4
 800e8b0:	f859 3b04 	ldr.w	r3, [r9], #4
 800e8b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e8b8:	0c1b      	lsrs	r3, r3, #16
 800e8ba:	fb0a b303 	mla	r3, sl, r3, fp
 800e8be:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e8c2:	454f      	cmp	r7, r9
 800e8c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e8c8:	d805      	bhi.n	800e8d6 <__multiply+0x124>
 800e8ca:	f8c8 3004 	str.w	r3, [r8, #4]
 800e8ce:	3504      	adds	r5, #4
 800e8d0:	e79b      	b.n	800e80a <__multiply+0x58>
 800e8d2:	46d4      	mov	ip, sl
 800e8d4:	e7b3      	b.n	800e83e <__multiply+0x8c>
 800e8d6:	46e0      	mov	r8, ip
 800e8d8:	e7dd      	b.n	800e896 <__multiply+0xe4>
 800e8da:	3e01      	subs	r6, #1
 800e8dc:	e799      	b.n	800e812 <__multiply+0x60>
	...

0800e8e0 <__pow5mult>:
 800e8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8e4:	4615      	mov	r5, r2
 800e8e6:	f012 0203 	ands.w	r2, r2, #3
 800e8ea:	4606      	mov	r6, r0
 800e8ec:	460f      	mov	r7, r1
 800e8ee:	d007      	beq.n	800e900 <__pow5mult+0x20>
 800e8f0:	3a01      	subs	r2, #1
 800e8f2:	4c21      	ldr	r4, [pc, #132]	; (800e978 <__pow5mult+0x98>)
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e8fa:	f7ff fe8a 	bl	800e612 <__multadd>
 800e8fe:	4607      	mov	r7, r0
 800e900:	10ad      	asrs	r5, r5, #2
 800e902:	d035      	beq.n	800e970 <__pow5mult+0x90>
 800e904:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e906:	b93c      	cbnz	r4, 800e918 <__pow5mult+0x38>
 800e908:	2010      	movs	r0, #16
 800e90a:	f7fc fe53 	bl	800b5b4 <malloc>
 800e90e:	6270      	str	r0, [r6, #36]	; 0x24
 800e910:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e914:	6004      	str	r4, [r0, #0]
 800e916:	60c4      	str	r4, [r0, #12]
 800e918:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e91c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e920:	b94c      	cbnz	r4, 800e936 <__pow5mult+0x56>
 800e922:	f240 2171 	movw	r1, #625	; 0x271
 800e926:	4630      	mov	r0, r6
 800e928:	f7ff ff3a 	bl	800e7a0 <__i2b>
 800e92c:	2300      	movs	r3, #0
 800e92e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e932:	4604      	mov	r4, r0
 800e934:	6003      	str	r3, [r0, #0]
 800e936:	f04f 0800 	mov.w	r8, #0
 800e93a:	07eb      	lsls	r3, r5, #31
 800e93c:	d50a      	bpl.n	800e954 <__pow5mult+0x74>
 800e93e:	4639      	mov	r1, r7
 800e940:	4622      	mov	r2, r4
 800e942:	4630      	mov	r0, r6
 800e944:	f7ff ff35 	bl	800e7b2 <__multiply>
 800e948:	4639      	mov	r1, r7
 800e94a:	4681      	mov	r9, r0
 800e94c:	4630      	mov	r0, r6
 800e94e:	f7ff fe49 	bl	800e5e4 <_Bfree>
 800e952:	464f      	mov	r7, r9
 800e954:	106d      	asrs	r5, r5, #1
 800e956:	d00b      	beq.n	800e970 <__pow5mult+0x90>
 800e958:	6820      	ldr	r0, [r4, #0]
 800e95a:	b938      	cbnz	r0, 800e96c <__pow5mult+0x8c>
 800e95c:	4622      	mov	r2, r4
 800e95e:	4621      	mov	r1, r4
 800e960:	4630      	mov	r0, r6
 800e962:	f7ff ff26 	bl	800e7b2 <__multiply>
 800e966:	6020      	str	r0, [r4, #0]
 800e968:	f8c0 8000 	str.w	r8, [r0]
 800e96c:	4604      	mov	r4, r0
 800e96e:	e7e4      	b.n	800e93a <__pow5mult+0x5a>
 800e970:	4638      	mov	r0, r7
 800e972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e976:	bf00      	nop
 800e978:	08012018 	.word	0x08012018

0800e97c <__lshift>:
 800e97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e980:	460c      	mov	r4, r1
 800e982:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e986:	6923      	ldr	r3, [r4, #16]
 800e988:	6849      	ldr	r1, [r1, #4]
 800e98a:	eb0a 0903 	add.w	r9, sl, r3
 800e98e:	68a3      	ldr	r3, [r4, #8]
 800e990:	4607      	mov	r7, r0
 800e992:	4616      	mov	r6, r2
 800e994:	f109 0501 	add.w	r5, r9, #1
 800e998:	42ab      	cmp	r3, r5
 800e99a:	db32      	blt.n	800ea02 <__lshift+0x86>
 800e99c:	4638      	mov	r0, r7
 800e99e:	f7ff fded 	bl	800e57c <_Balloc>
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	4680      	mov	r8, r0
 800e9a6:	f100 0114 	add.w	r1, r0, #20
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	4553      	cmp	r3, sl
 800e9ae:	db2b      	blt.n	800ea08 <__lshift+0x8c>
 800e9b0:	6920      	ldr	r0, [r4, #16]
 800e9b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e9b6:	f104 0314 	add.w	r3, r4, #20
 800e9ba:	f016 021f 	ands.w	r2, r6, #31
 800e9be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e9c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e9c6:	d025      	beq.n	800ea14 <__lshift+0x98>
 800e9c8:	f1c2 0e20 	rsb	lr, r2, #32
 800e9cc:	2000      	movs	r0, #0
 800e9ce:	681e      	ldr	r6, [r3, #0]
 800e9d0:	468a      	mov	sl, r1
 800e9d2:	4096      	lsls	r6, r2
 800e9d4:	4330      	orrs	r0, r6
 800e9d6:	f84a 0b04 	str.w	r0, [sl], #4
 800e9da:	f853 0b04 	ldr.w	r0, [r3], #4
 800e9de:	459c      	cmp	ip, r3
 800e9e0:	fa20 f00e 	lsr.w	r0, r0, lr
 800e9e4:	d814      	bhi.n	800ea10 <__lshift+0x94>
 800e9e6:	6048      	str	r0, [r1, #4]
 800e9e8:	b108      	cbz	r0, 800e9ee <__lshift+0x72>
 800e9ea:	f109 0502 	add.w	r5, r9, #2
 800e9ee:	3d01      	subs	r5, #1
 800e9f0:	4638      	mov	r0, r7
 800e9f2:	f8c8 5010 	str.w	r5, [r8, #16]
 800e9f6:	4621      	mov	r1, r4
 800e9f8:	f7ff fdf4 	bl	800e5e4 <_Bfree>
 800e9fc:	4640      	mov	r0, r8
 800e9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea02:	3101      	adds	r1, #1
 800ea04:	005b      	lsls	r3, r3, #1
 800ea06:	e7c7      	b.n	800e998 <__lshift+0x1c>
 800ea08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	e7cd      	b.n	800e9ac <__lshift+0x30>
 800ea10:	4651      	mov	r1, sl
 800ea12:	e7dc      	b.n	800e9ce <__lshift+0x52>
 800ea14:	3904      	subs	r1, #4
 800ea16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea1a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ea1e:	459c      	cmp	ip, r3
 800ea20:	d8f9      	bhi.n	800ea16 <__lshift+0x9a>
 800ea22:	e7e4      	b.n	800e9ee <__lshift+0x72>

0800ea24 <__mcmp>:
 800ea24:	6903      	ldr	r3, [r0, #16]
 800ea26:	690a      	ldr	r2, [r1, #16]
 800ea28:	1a9b      	subs	r3, r3, r2
 800ea2a:	b530      	push	{r4, r5, lr}
 800ea2c:	d10c      	bne.n	800ea48 <__mcmp+0x24>
 800ea2e:	0092      	lsls	r2, r2, #2
 800ea30:	3014      	adds	r0, #20
 800ea32:	3114      	adds	r1, #20
 800ea34:	1884      	adds	r4, r0, r2
 800ea36:	4411      	add	r1, r2
 800ea38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ea3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ea40:	4295      	cmp	r5, r2
 800ea42:	d003      	beq.n	800ea4c <__mcmp+0x28>
 800ea44:	d305      	bcc.n	800ea52 <__mcmp+0x2e>
 800ea46:	2301      	movs	r3, #1
 800ea48:	4618      	mov	r0, r3
 800ea4a:	bd30      	pop	{r4, r5, pc}
 800ea4c:	42a0      	cmp	r0, r4
 800ea4e:	d3f3      	bcc.n	800ea38 <__mcmp+0x14>
 800ea50:	e7fa      	b.n	800ea48 <__mcmp+0x24>
 800ea52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea56:	e7f7      	b.n	800ea48 <__mcmp+0x24>

0800ea58 <__mdiff>:
 800ea58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea5c:	460d      	mov	r5, r1
 800ea5e:	4607      	mov	r7, r0
 800ea60:	4611      	mov	r1, r2
 800ea62:	4628      	mov	r0, r5
 800ea64:	4614      	mov	r4, r2
 800ea66:	f7ff ffdd 	bl	800ea24 <__mcmp>
 800ea6a:	1e06      	subs	r6, r0, #0
 800ea6c:	d108      	bne.n	800ea80 <__mdiff+0x28>
 800ea6e:	4631      	mov	r1, r6
 800ea70:	4638      	mov	r0, r7
 800ea72:	f7ff fd83 	bl	800e57c <_Balloc>
 800ea76:	2301      	movs	r3, #1
 800ea78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ea7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea80:	bfa4      	itt	ge
 800ea82:	4623      	movge	r3, r4
 800ea84:	462c      	movge	r4, r5
 800ea86:	4638      	mov	r0, r7
 800ea88:	6861      	ldr	r1, [r4, #4]
 800ea8a:	bfa6      	itte	ge
 800ea8c:	461d      	movge	r5, r3
 800ea8e:	2600      	movge	r6, #0
 800ea90:	2601      	movlt	r6, #1
 800ea92:	f7ff fd73 	bl	800e57c <_Balloc>
 800ea96:	692b      	ldr	r3, [r5, #16]
 800ea98:	60c6      	str	r6, [r0, #12]
 800ea9a:	6926      	ldr	r6, [r4, #16]
 800ea9c:	f105 0914 	add.w	r9, r5, #20
 800eaa0:	f104 0214 	add.w	r2, r4, #20
 800eaa4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800eaa8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800eaac:	f100 0514 	add.w	r5, r0, #20
 800eab0:	f04f 0e00 	mov.w	lr, #0
 800eab4:	f852 ab04 	ldr.w	sl, [r2], #4
 800eab8:	f859 4b04 	ldr.w	r4, [r9], #4
 800eabc:	fa1e f18a 	uxtah	r1, lr, sl
 800eac0:	b2a3      	uxth	r3, r4
 800eac2:	1ac9      	subs	r1, r1, r3
 800eac4:	0c23      	lsrs	r3, r4, #16
 800eac6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800eaca:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800eace:	b289      	uxth	r1, r1
 800ead0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ead4:	45c8      	cmp	r8, r9
 800ead6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800eada:	4694      	mov	ip, r2
 800eadc:	f845 3b04 	str.w	r3, [r5], #4
 800eae0:	d8e8      	bhi.n	800eab4 <__mdiff+0x5c>
 800eae2:	45bc      	cmp	ip, r7
 800eae4:	d304      	bcc.n	800eaf0 <__mdiff+0x98>
 800eae6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800eaea:	b183      	cbz	r3, 800eb0e <__mdiff+0xb6>
 800eaec:	6106      	str	r6, [r0, #16]
 800eaee:	e7c5      	b.n	800ea7c <__mdiff+0x24>
 800eaf0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800eaf4:	fa1e f381 	uxtah	r3, lr, r1
 800eaf8:	141a      	asrs	r2, r3, #16
 800eafa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eb04:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800eb08:	f845 3b04 	str.w	r3, [r5], #4
 800eb0c:	e7e9      	b.n	800eae2 <__mdiff+0x8a>
 800eb0e:	3e01      	subs	r6, #1
 800eb10:	e7e9      	b.n	800eae6 <__mdiff+0x8e>
	...

0800eb14 <__ulp>:
 800eb14:	4b12      	ldr	r3, [pc, #72]	; (800eb60 <__ulp+0x4c>)
 800eb16:	ee10 2a90 	vmov	r2, s1
 800eb1a:	401a      	ands	r2, r3
 800eb1c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	dd04      	ble.n	800eb2e <__ulp+0x1a>
 800eb24:	2000      	movs	r0, #0
 800eb26:	4619      	mov	r1, r3
 800eb28:	ec41 0b10 	vmov	d0, r0, r1
 800eb2c:	4770      	bx	lr
 800eb2e:	425b      	negs	r3, r3
 800eb30:	151b      	asrs	r3, r3, #20
 800eb32:	2b13      	cmp	r3, #19
 800eb34:	f04f 0000 	mov.w	r0, #0
 800eb38:	f04f 0100 	mov.w	r1, #0
 800eb3c:	dc04      	bgt.n	800eb48 <__ulp+0x34>
 800eb3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800eb42:	fa42 f103 	asr.w	r1, r2, r3
 800eb46:	e7ef      	b.n	800eb28 <__ulp+0x14>
 800eb48:	3b14      	subs	r3, #20
 800eb4a:	2b1e      	cmp	r3, #30
 800eb4c:	f04f 0201 	mov.w	r2, #1
 800eb50:	bfda      	itte	le
 800eb52:	f1c3 031f 	rsble	r3, r3, #31
 800eb56:	fa02 f303 	lslle.w	r3, r2, r3
 800eb5a:	4613      	movgt	r3, r2
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	e7e3      	b.n	800eb28 <__ulp+0x14>
 800eb60:	7ff00000 	.word	0x7ff00000

0800eb64 <__b2d>:
 800eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb66:	6905      	ldr	r5, [r0, #16]
 800eb68:	f100 0714 	add.w	r7, r0, #20
 800eb6c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800eb70:	1f2e      	subs	r6, r5, #4
 800eb72:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800eb76:	4620      	mov	r0, r4
 800eb78:	f7ff fdc4 	bl	800e704 <__hi0bits>
 800eb7c:	f1c0 0320 	rsb	r3, r0, #32
 800eb80:	280a      	cmp	r0, #10
 800eb82:	600b      	str	r3, [r1, #0]
 800eb84:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ebfc <__b2d+0x98>
 800eb88:	dc14      	bgt.n	800ebb4 <__b2d+0x50>
 800eb8a:	f1c0 0e0b 	rsb	lr, r0, #11
 800eb8e:	fa24 f10e 	lsr.w	r1, r4, lr
 800eb92:	42b7      	cmp	r7, r6
 800eb94:	ea41 030c 	orr.w	r3, r1, ip
 800eb98:	bf34      	ite	cc
 800eb9a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eb9e:	2100      	movcs	r1, #0
 800eba0:	3015      	adds	r0, #21
 800eba2:	fa04 f000 	lsl.w	r0, r4, r0
 800eba6:	fa21 f10e 	lsr.w	r1, r1, lr
 800ebaa:	ea40 0201 	orr.w	r2, r0, r1
 800ebae:	ec43 2b10 	vmov	d0, r2, r3
 800ebb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebb4:	42b7      	cmp	r7, r6
 800ebb6:	bf3a      	itte	cc
 800ebb8:	f1a5 0608 	subcc.w	r6, r5, #8
 800ebbc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ebc0:	2100      	movcs	r1, #0
 800ebc2:	380b      	subs	r0, #11
 800ebc4:	d015      	beq.n	800ebf2 <__b2d+0x8e>
 800ebc6:	4084      	lsls	r4, r0
 800ebc8:	f1c0 0520 	rsb	r5, r0, #32
 800ebcc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ebd0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800ebd4:	42be      	cmp	r6, r7
 800ebd6:	fa21 fc05 	lsr.w	ip, r1, r5
 800ebda:	ea44 030c 	orr.w	r3, r4, ip
 800ebde:	bf8c      	ite	hi
 800ebe0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ebe4:	2400      	movls	r4, #0
 800ebe6:	fa01 f000 	lsl.w	r0, r1, r0
 800ebea:	40ec      	lsrs	r4, r5
 800ebec:	ea40 0204 	orr.w	r2, r0, r4
 800ebf0:	e7dd      	b.n	800ebae <__b2d+0x4a>
 800ebf2:	ea44 030c 	orr.w	r3, r4, ip
 800ebf6:	460a      	mov	r2, r1
 800ebf8:	e7d9      	b.n	800ebae <__b2d+0x4a>
 800ebfa:	bf00      	nop
 800ebfc:	3ff00000 	.word	0x3ff00000

0800ec00 <__d2b>:
 800ec00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec04:	460e      	mov	r6, r1
 800ec06:	2101      	movs	r1, #1
 800ec08:	ec59 8b10 	vmov	r8, r9, d0
 800ec0c:	4615      	mov	r5, r2
 800ec0e:	f7ff fcb5 	bl	800e57c <_Balloc>
 800ec12:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ec16:	4607      	mov	r7, r0
 800ec18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec1c:	bb34      	cbnz	r4, 800ec6c <__d2b+0x6c>
 800ec1e:	9301      	str	r3, [sp, #4]
 800ec20:	f1b8 0300 	subs.w	r3, r8, #0
 800ec24:	d027      	beq.n	800ec76 <__d2b+0x76>
 800ec26:	a802      	add	r0, sp, #8
 800ec28:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ec2c:	f7ff fd89 	bl	800e742 <__lo0bits>
 800ec30:	9900      	ldr	r1, [sp, #0]
 800ec32:	b1f0      	cbz	r0, 800ec72 <__d2b+0x72>
 800ec34:	9a01      	ldr	r2, [sp, #4]
 800ec36:	f1c0 0320 	rsb	r3, r0, #32
 800ec3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ec3e:	430b      	orrs	r3, r1
 800ec40:	40c2      	lsrs	r2, r0
 800ec42:	617b      	str	r3, [r7, #20]
 800ec44:	9201      	str	r2, [sp, #4]
 800ec46:	9b01      	ldr	r3, [sp, #4]
 800ec48:	61bb      	str	r3, [r7, #24]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	bf14      	ite	ne
 800ec4e:	2102      	movne	r1, #2
 800ec50:	2101      	moveq	r1, #1
 800ec52:	6139      	str	r1, [r7, #16]
 800ec54:	b1c4      	cbz	r4, 800ec88 <__d2b+0x88>
 800ec56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ec5a:	4404      	add	r4, r0
 800ec5c:	6034      	str	r4, [r6, #0]
 800ec5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec62:	6028      	str	r0, [r5, #0]
 800ec64:	4638      	mov	r0, r7
 800ec66:	b003      	add	sp, #12
 800ec68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec70:	e7d5      	b.n	800ec1e <__d2b+0x1e>
 800ec72:	6179      	str	r1, [r7, #20]
 800ec74:	e7e7      	b.n	800ec46 <__d2b+0x46>
 800ec76:	a801      	add	r0, sp, #4
 800ec78:	f7ff fd63 	bl	800e742 <__lo0bits>
 800ec7c:	9b01      	ldr	r3, [sp, #4]
 800ec7e:	617b      	str	r3, [r7, #20]
 800ec80:	2101      	movs	r1, #1
 800ec82:	6139      	str	r1, [r7, #16]
 800ec84:	3020      	adds	r0, #32
 800ec86:	e7e5      	b.n	800ec54 <__d2b+0x54>
 800ec88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ec8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec90:	6030      	str	r0, [r6, #0]
 800ec92:	6918      	ldr	r0, [r3, #16]
 800ec94:	f7ff fd36 	bl	800e704 <__hi0bits>
 800ec98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ec9c:	e7e1      	b.n	800ec62 <__d2b+0x62>

0800ec9e <__ratio>:
 800ec9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca2:	4688      	mov	r8, r1
 800eca4:	4669      	mov	r1, sp
 800eca6:	4681      	mov	r9, r0
 800eca8:	f7ff ff5c 	bl	800eb64 <__b2d>
 800ecac:	a901      	add	r1, sp, #4
 800ecae:	4640      	mov	r0, r8
 800ecb0:	ec57 6b10 	vmov	r6, r7, d0
 800ecb4:	f7ff ff56 	bl	800eb64 <__b2d>
 800ecb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ecbc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ecc0:	eba3 0c02 	sub.w	ip, r3, r2
 800ecc4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ecc8:	1a9b      	subs	r3, r3, r2
 800ecca:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ecce:	ec5b ab10 	vmov	sl, fp, d0
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	bfce      	itee	gt
 800ecd6:	463a      	movgt	r2, r7
 800ecd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ecdc:	465a      	movle	r2, fp
 800ecde:	4659      	mov	r1, fp
 800ece0:	463d      	mov	r5, r7
 800ece2:	bfd4      	ite	le
 800ece4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800ece8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800ecec:	4630      	mov	r0, r6
 800ecee:	ee10 2a10 	vmov	r2, s0
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	4629      	mov	r1, r5
 800ecf6:	f7f1 fdb9 	bl	800086c <__aeabi_ddiv>
 800ecfa:	ec41 0b10 	vmov	d0, r0, r1
 800ecfe:	b003      	add	sp, #12
 800ed00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed04 <__copybits>:
 800ed04:	3901      	subs	r1, #1
 800ed06:	b510      	push	{r4, lr}
 800ed08:	1149      	asrs	r1, r1, #5
 800ed0a:	6914      	ldr	r4, [r2, #16]
 800ed0c:	3101      	adds	r1, #1
 800ed0e:	f102 0314 	add.w	r3, r2, #20
 800ed12:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ed16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ed1a:	42a3      	cmp	r3, r4
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	d303      	bcc.n	800ed28 <__copybits+0x24>
 800ed20:	2300      	movs	r3, #0
 800ed22:	428a      	cmp	r2, r1
 800ed24:	d305      	bcc.n	800ed32 <__copybits+0x2e>
 800ed26:	bd10      	pop	{r4, pc}
 800ed28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed2c:	f840 2b04 	str.w	r2, [r0], #4
 800ed30:	e7f3      	b.n	800ed1a <__copybits+0x16>
 800ed32:	f842 3b04 	str.w	r3, [r2], #4
 800ed36:	e7f4      	b.n	800ed22 <__copybits+0x1e>

0800ed38 <__any_on>:
 800ed38:	f100 0214 	add.w	r2, r0, #20
 800ed3c:	6900      	ldr	r0, [r0, #16]
 800ed3e:	114b      	asrs	r3, r1, #5
 800ed40:	4298      	cmp	r0, r3
 800ed42:	b510      	push	{r4, lr}
 800ed44:	db11      	blt.n	800ed6a <__any_on+0x32>
 800ed46:	dd0a      	ble.n	800ed5e <__any_on+0x26>
 800ed48:	f011 011f 	ands.w	r1, r1, #31
 800ed4c:	d007      	beq.n	800ed5e <__any_on+0x26>
 800ed4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ed52:	fa24 f001 	lsr.w	r0, r4, r1
 800ed56:	fa00 f101 	lsl.w	r1, r0, r1
 800ed5a:	428c      	cmp	r4, r1
 800ed5c:	d10b      	bne.n	800ed76 <__any_on+0x3e>
 800ed5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d803      	bhi.n	800ed6e <__any_on+0x36>
 800ed66:	2000      	movs	r0, #0
 800ed68:	bd10      	pop	{r4, pc}
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	e7f7      	b.n	800ed5e <__any_on+0x26>
 800ed6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed72:	2900      	cmp	r1, #0
 800ed74:	d0f5      	beq.n	800ed62 <__any_on+0x2a>
 800ed76:	2001      	movs	r0, #1
 800ed78:	e7f6      	b.n	800ed68 <__any_on+0x30>

0800ed7a <_calloc_r>:
 800ed7a:	b538      	push	{r3, r4, r5, lr}
 800ed7c:	fb02 f401 	mul.w	r4, r2, r1
 800ed80:	4621      	mov	r1, r4
 800ed82:	f7fc fca1 	bl	800b6c8 <_malloc_r>
 800ed86:	4605      	mov	r5, r0
 800ed88:	b118      	cbz	r0, 800ed92 <_calloc_r+0x18>
 800ed8a:	4622      	mov	r2, r4
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	f7fc fc45 	bl	800b61c <memset>
 800ed92:	4628      	mov	r0, r5
 800ed94:	bd38      	pop	{r3, r4, r5, pc}

0800ed96 <__ssputs_r>:
 800ed96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed9a:	688e      	ldr	r6, [r1, #8]
 800ed9c:	429e      	cmp	r6, r3
 800ed9e:	4682      	mov	sl, r0
 800eda0:	460c      	mov	r4, r1
 800eda2:	4690      	mov	r8, r2
 800eda4:	4699      	mov	r9, r3
 800eda6:	d837      	bhi.n	800ee18 <__ssputs_r+0x82>
 800eda8:	898a      	ldrh	r2, [r1, #12]
 800edaa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800edae:	d031      	beq.n	800ee14 <__ssputs_r+0x7e>
 800edb0:	6825      	ldr	r5, [r4, #0]
 800edb2:	6909      	ldr	r1, [r1, #16]
 800edb4:	1a6f      	subs	r7, r5, r1
 800edb6:	6965      	ldr	r5, [r4, #20]
 800edb8:	2302      	movs	r3, #2
 800edba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edbe:	fb95 f5f3 	sdiv	r5, r5, r3
 800edc2:	f109 0301 	add.w	r3, r9, #1
 800edc6:	443b      	add	r3, r7
 800edc8:	429d      	cmp	r5, r3
 800edca:	bf38      	it	cc
 800edcc:	461d      	movcc	r5, r3
 800edce:	0553      	lsls	r3, r2, #21
 800edd0:	d530      	bpl.n	800ee34 <__ssputs_r+0x9e>
 800edd2:	4629      	mov	r1, r5
 800edd4:	f7fc fc78 	bl	800b6c8 <_malloc_r>
 800edd8:	4606      	mov	r6, r0
 800edda:	b950      	cbnz	r0, 800edf2 <__ssputs_r+0x5c>
 800eddc:	230c      	movs	r3, #12
 800edde:	f8ca 3000 	str.w	r3, [sl]
 800ede2:	89a3      	ldrh	r3, [r4, #12]
 800ede4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ede8:	81a3      	strh	r3, [r4, #12]
 800edea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edf2:	463a      	mov	r2, r7
 800edf4:	6921      	ldr	r1, [r4, #16]
 800edf6:	f7fc fbed 	bl	800b5d4 <memcpy>
 800edfa:	89a3      	ldrh	r3, [r4, #12]
 800edfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee04:	81a3      	strh	r3, [r4, #12]
 800ee06:	6126      	str	r6, [r4, #16]
 800ee08:	6165      	str	r5, [r4, #20]
 800ee0a:	443e      	add	r6, r7
 800ee0c:	1bed      	subs	r5, r5, r7
 800ee0e:	6026      	str	r6, [r4, #0]
 800ee10:	60a5      	str	r5, [r4, #8]
 800ee12:	464e      	mov	r6, r9
 800ee14:	454e      	cmp	r6, r9
 800ee16:	d900      	bls.n	800ee1a <__ssputs_r+0x84>
 800ee18:	464e      	mov	r6, r9
 800ee1a:	4632      	mov	r2, r6
 800ee1c:	4641      	mov	r1, r8
 800ee1e:	6820      	ldr	r0, [r4, #0]
 800ee20:	f7fc fbe3 	bl	800b5ea <memmove>
 800ee24:	68a3      	ldr	r3, [r4, #8]
 800ee26:	1b9b      	subs	r3, r3, r6
 800ee28:	60a3      	str	r3, [r4, #8]
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	441e      	add	r6, r3
 800ee2e:	6026      	str	r6, [r4, #0]
 800ee30:	2000      	movs	r0, #0
 800ee32:	e7dc      	b.n	800edee <__ssputs_r+0x58>
 800ee34:	462a      	mov	r2, r5
 800ee36:	f000 f90e 	bl	800f056 <_realloc_r>
 800ee3a:	4606      	mov	r6, r0
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d1e2      	bne.n	800ee06 <__ssputs_r+0x70>
 800ee40:	6921      	ldr	r1, [r4, #16]
 800ee42:	4650      	mov	r0, sl
 800ee44:	f7fc fbf2 	bl	800b62c <_free_r>
 800ee48:	e7c8      	b.n	800eddc <__ssputs_r+0x46>
	...

0800ee4c <_svfiprintf_r>:
 800ee4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee50:	461d      	mov	r5, r3
 800ee52:	898b      	ldrh	r3, [r1, #12]
 800ee54:	061f      	lsls	r7, r3, #24
 800ee56:	b09d      	sub	sp, #116	; 0x74
 800ee58:	4680      	mov	r8, r0
 800ee5a:	460c      	mov	r4, r1
 800ee5c:	4616      	mov	r6, r2
 800ee5e:	d50f      	bpl.n	800ee80 <_svfiprintf_r+0x34>
 800ee60:	690b      	ldr	r3, [r1, #16]
 800ee62:	b96b      	cbnz	r3, 800ee80 <_svfiprintf_r+0x34>
 800ee64:	2140      	movs	r1, #64	; 0x40
 800ee66:	f7fc fc2f 	bl	800b6c8 <_malloc_r>
 800ee6a:	6020      	str	r0, [r4, #0]
 800ee6c:	6120      	str	r0, [r4, #16]
 800ee6e:	b928      	cbnz	r0, 800ee7c <_svfiprintf_r+0x30>
 800ee70:	230c      	movs	r3, #12
 800ee72:	f8c8 3000 	str.w	r3, [r8]
 800ee76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee7a:	e0c8      	b.n	800f00e <_svfiprintf_r+0x1c2>
 800ee7c:	2340      	movs	r3, #64	; 0x40
 800ee7e:	6163      	str	r3, [r4, #20]
 800ee80:	2300      	movs	r3, #0
 800ee82:	9309      	str	r3, [sp, #36]	; 0x24
 800ee84:	2320      	movs	r3, #32
 800ee86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee8a:	2330      	movs	r3, #48	; 0x30
 800ee8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee90:	9503      	str	r5, [sp, #12]
 800ee92:	f04f 0b01 	mov.w	fp, #1
 800ee96:	4637      	mov	r7, r6
 800ee98:	463d      	mov	r5, r7
 800ee9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ee9e:	b10b      	cbz	r3, 800eea4 <_svfiprintf_r+0x58>
 800eea0:	2b25      	cmp	r3, #37	; 0x25
 800eea2:	d13e      	bne.n	800ef22 <_svfiprintf_r+0xd6>
 800eea4:	ebb7 0a06 	subs.w	sl, r7, r6
 800eea8:	d00b      	beq.n	800eec2 <_svfiprintf_r+0x76>
 800eeaa:	4653      	mov	r3, sl
 800eeac:	4632      	mov	r2, r6
 800eeae:	4621      	mov	r1, r4
 800eeb0:	4640      	mov	r0, r8
 800eeb2:	f7ff ff70 	bl	800ed96 <__ssputs_r>
 800eeb6:	3001      	adds	r0, #1
 800eeb8:	f000 80a4 	beq.w	800f004 <_svfiprintf_r+0x1b8>
 800eebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eebe:	4453      	add	r3, sl
 800eec0:	9309      	str	r3, [sp, #36]	; 0x24
 800eec2:	783b      	ldrb	r3, [r7, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f000 809d 	beq.w	800f004 <_svfiprintf_r+0x1b8>
 800eeca:	2300      	movs	r3, #0
 800eecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eed4:	9304      	str	r3, [sp, #16]
 800eed6:	9307      	str	r3, [sp, #28]
 800eed8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eedc:	931a      	str	r3, [sp, #104]	; 0x68
 800eede:	462f      	mov	r7, r5
 800eee0:	2205      	movs	r2, #5
 800eee2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800eee6:	4850      	ldr	r0, [pc, #320]	; (800f028 <_svfiprintf_r+0x1dc>)
 800eee8:	f7f1 f98a 	bl	8000200 <memchr>
 800eeec:	9b04      	ldr	r3, [sp, #16]
 800eeee:	b9d0      	cbnz	r0, 800ef26 <_svfiprintf_r+0xda>
 800eef0:	06d9      	lsls	r1, r3, #27
 800eef2:	bf44      	itt	mi
 800eef4:	2220      	movmi	r2, #32
 800eef6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eefa:	071a      	lsls	r2, r3, #28
 800eefc:	bf44      	itt	mi
 800eefe:	222b      	movmi	r2, #43	; 0x2b
 800ef00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ef04:	782a      	ldrb	r2, [r5, #0]
 800ef06:	2a2a      	cmp	r2, #42	; 0x2a
 800ef08:	d015      	beq.n	800ef36 <_svfiprintf_r+0xea>
 800ef0a:	9a07      	ldr	r2, [sp, #28]
 800ef0c:	462f      	mov	r7, r5
 800ef0e:	2000      	movs	r0, #0
 800ef10:	250a      	movs	r5, #10
 800ef12:	4639      	mov	r1, r7
 800ef14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef18:	3b30      	subs	r3, #48	; 0x30
 800ef1a:	2b09      	cmp	r3, #9
 800ef1c:	d94d      	bls.n	800efba <_svfiprintf_r+0x16e>
 800ef1e:	b1b8      	cbz	r0, 800ef50 <_svfiprintf_r+0x104>
 800ef20:	e00f      	b.n	800ef42 <_svfiprintf_r+0xf6>
 800ef22:	462f      	mov	r7, r5
 800ef24:	e7b8      	b.n	800ee98 <_svfiprintf_r+0x4c>
 800ef26:	4a40      	ldr	r2, [pc, #256]	; (800f028 <_svfiprintf_r+0x1dc>)
 800ef28:	1a80      	subs	r0, r0, r2
 800ef2a:	fa0b f000 	lsl.w	r0, fp, r0
 800ef2e:	4318      	orrs	r0, r3
 800ef30:	9004      	str	r0, [sp, #16]
 800ef32:	463d      	mov	r5, r7
 800ef34:	e7d3      	b.n	800eede <_svfiprintf_r+0x92>
 800ef36:	9a03      	ldr	r2, [sp, #12]
 800ef38:	1d11      	adds	r1, r2, #4
 800ef3a:	6812      	ldr	r2, [r2, #0]
 800ef3c:	9103      	str	r1, [sp, #12]
 800ef3e:	2a00      	cmp	r2, #0
 800ef40:	db01      	blt.n	800ef46 <_svfiprintf_r+0xfa>
 800ef42:	9207      	str	r2, [sp, #28]
 800ef44:	e004      	b.n	800ef50 <_svfiprintf_r+0x104>
 800ef46:	4252      	negs	r2, r2
 800ef48:	f043 0302 	orr.w	r3, r3, #2
 800ef4c:	9207      	str	r2, [sp, #28]
 800ef4e:	9304      	str	r3, [sp, #16]
 800ef50:	783b      	ldrb	r3, [r7, #0]
 800ef52:	2b2e      	cmp	r3, #46	; 0x2e
 800ef54:	d10c      	bne.n	800ef70 <_svfiprintf_r+0x124>
 800ef56:	787b      	ldrb	r3, [r7, #1]
 800ef58:	2b2a      	cmp	r3, #42	; 0x2a
 800ef5a:	d133      	bne.n	800efc4 <_svfiprintf_r+0x178>
 800ef5c:	9b03      	ldr	r3, [sp, #12]
 800ef5e:	1d1a      	adds	r2, r3, #4
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	9203      	str	r2, [sp, #12]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	bfb8      	it	lt
 800ef68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ef6c:	3702      	adds	r7, #2
 800ef6e:	9305      	str	r3, [sp, #20]
 800ef70:	4d2e      	ldr	r5, [pc, #184]	; (800f02c <_svfiprintf_r+0x1e0>)
 800ef72:	7839      	ldrb	r1, [r7, #0]
 800ef74:	2203      	movs	r2, #3
 800ef76:	4628      	mov	r0, r5
 800ef78:	f7f1 f942 	bl	8000200 <memchr>
 800ef7c:	b138      	cbz	r0, 800ef8e <_svfiprintf_r+0x142>
 800ef7e:	2340      	movs	r3, #64	; 0x40
 800ef80:	1b40      	subs	r0, r0, r5
 800ef82:	fa03 f000 	lsl.w	r0, r3, r0
 800ef86:	9b04      	ldr	r3, [sp, #16]
 800ef88:	4303      	orrs	r3, r0
 800ef8a:	3701      	adds	r7, #1
 800ef8c:	9304      	str	r3, [sp, #16]
 800ef8e:	7839      	ldrb	r1, [r7, #0]
 800ef90:	4827      	ldr	r0, [pc, #156]	; (800f030 <_svfiprintf_r+0x1e4>)
 800ef92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef96:	2206      	movs	r2, #6
 800ef98:	1c7e      	adds	r6, r7, #1
 800ef9a:	f7f1 f931 	bl	8000200 <memchr>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	d038      	beq.n	800f014 <_svfiprintf_r+0x1c8>
 800efa2:	4b24      	ldr	r3, [pc, #144]	; (800f034 <_svfiprintf_r+0x1e8>)
 800efa4:	bb13      	cbnz	r3, 800efec <_svfiprintf_r+0x1a0>
 800efa6:	9b03      	ldr	r3, [sp, #12]
 800efa8:	3307      	adds	r3, #7
 800efaa:	f023 0307 	bic.w	r3, r3, #7
 800efae:	3308      	adds	r3, #8
 800efb0:	9303      	str	r3, [sp, #12]
 800efb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efb4:	444b      	add	r3, r9
 800efb6:	9309      	str	r3, [sp, #36]	; 0x24
 800efb8:	e76d      	b.n	800ee96 <_svfiprintf_r+0x4a>
 800efba:	fb05 3202 	mla	r2, r5, r2, r3
 800efbe:	2001      	movs	r0, #1
 800efc0:	460f      	mov	r7, r1
 800efc2:	e7a6      	b.n	800ef12 <_svfiprintf_r+0xc6>
 800efc4:	2300      	movs	r3, #0
 800efc6:	3701      	adds	r7, #1
 800efc8:	9305      	str	r3, [sp, #20]
 800efca:	4619      	mov	r1, r3
 800efcc:	250a      	movs	r5, #10
 800efce:	4638      	mov	r0, r7
 800efd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efd4:	3a30      	subs	r2, #48	; 0x30
 800efd6:	2a09      	cmp	r2, #9
 800efd8:	d903      	bls.n	800efe2 <_svfiprintf_r+0x196>
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d0c8      	beq.n	800ef70 <_svfiprintf_r+0x124>
 800efde:	9105      	str	r1, [sp, #20]
 800efe0:	e7c6      	b.n	800ef70 <_svfiprintf_r+0x124>
 800efe2:	fb05 2101 	mla	r1, r5, r1, r2
 800efe6:	2301      	movs	r3, #1
 800efe8:	4607      	mov	r7, r0
 800efea:	e7f0      	b.n	800efce <_svfiprintf_r+0x182>
 800efec:	ab03      	add	r3, sp, #12
 800efee:	9300      	str	r3, [sp, #0]
 800eff0:	4622      	mov	r2, r4
 800eff2:	4b11      	ldr	r3, [pc, #68]	; (800f038 <_svfiprintf_r+0x1ec>)
 800eff4:	a904      	add	r1, sp, #16
 800eff6:	4640      	mov	r0, r8
 800eff8:	f7fc fc54 	bl	800b8a4 <_printf_float>
 800effc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f000:	4681      	mov	r9, r0
 800f002:	d1d6      	bne.n	800efb2 <_svfiprintf_r+0x166>
 800f004:	89a3      	ldrh	r3, [r4, #12]
 800f006:	065b      	lsls	r3, r3, #25
 800f008:	f53f af35 	bmi.w	800ee76 <_svfiprintf_r+0x2a>
 800f00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f00e:	b01d      	add	sp, #116	; 0x74
 800f010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f014:	ab03      	add	r3, sp, #12
 800f016:	9300      	str	r3, [sp, #0]
 800f018:	4622      	mov	r2, r4
 800f01a:	4b07      	ldr	r3, [pc, #28]	; (800f038 <_svfiprintf_r+0x1ec>)
 800f01c:	a904      	add	r1, sp, #16
 800f01e:	4640      	mov	r0, r8
 800f020:	f7fc fef6 	bl	800be10 <_printf_i>
 800f024:	e7ea      	b.n	800effc <_svfiprintf_r+0x1b0>
 800f026:	bf00      	nop
 800f028:	08012024 	.word	0x08012024
 800f02c:	0801202a 	.word	0x0801202a
 800f030:	0801202e 	.word	0x0801202e
 800f034:	0800b8a5 	.word	0x0800b8a5
 800f038:	0800ed97 	.word	0x0800ed97

0800f03c <__ascii_wctomb>:
 800f03c:	b149      	cbz	r1, 800f052 <__ascii_wctomb+0x16>
 800f03e:	2aff      	cmp	r2, #255	; 0xff
 800f040:	bf85      	ittet	hi
 800f042:	238a      	movhi	r3, #138	; 0x8a
 800f044:	6003      	strhi	r3, [r0, #0]
 800f046:	700a      	strbls	r2, [r1, #0]
 800f048:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f04c:	bf98      	it	ls
 800f04e:	2001      	movls	r0, #1
 800f050:	4770      	bx	lr
 800f052:	4608      	mov	r0, r1
 800f054:	4770      	bx	lr

0800f056 <_realloc_r>:
 800f056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f058:	4607      	mov	r7, r0
 800f05a:	4614      	mov	r4, r2
 800f05c:	460e      	mov	r6, r1
 800f05e:	b921      	cbnz	r1, 800f06a <_realloc_r+0x14>
 800f060:	4611      	mov	r1, r2
 800f062:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f066:	f7fc bb2f 	b.w	800b6c8 <_malloc_r>
 800f06a:	b922      	cbnz	r2, 800f076 <_realloc_r+0x20>
 800f06c:	f7fc fade 	bl	800b62c <_free_r>
 800f070:	4625      	mov	r5, r4
 800f072:	4628      	mov	r0, r5
 800f074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f076:	f000 f814 	bl	800f0a2 <_malloc_usable_size_r>
 800f07a:	42a0      	cmp	r0, r4
 800f07c:	d20f      	bcs.n	800f09e <_realloc_r+0x48>
 800f07e:	4621      	mov	r1, r4
 800f080:	4638      	mov	r0, r7
 800f082:	f7fc fb21 	bl	800b6c8 <_malloc_r>
 800f086:	4605      	mov	r5, r0
 800f088:	2800      	cmp	r0, #0
 800f08a:	d0f2      	beq.n	800f072 <_realloc_r+0x1c>
 800f08c:	4631      	mov	r1, r6
 800f08e:	4622      	mov	r2, r4
 800f090:	f7fc faa0 	bl	800b5d4 <memcpy>
 800f094:	4631      	mov	r1, r6
 800f096:	4638      	mov	r0, r7
 800f098:	f7fc fac8 	bl	800b62c <_free_r>
 800f09c:	e7e9      	b.n	800f072 <_realloc_r+0x1c>
 800f09e:	4635      	mov	r5, r6
 800f0a0:	e7e7      	b.n	800f072 <_realloc_r+0x1c>

0800f0a2 <_malloc_usable_size_r>:
 800f0a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0a6:	1f18      	subs	r0, r3, #4
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	bfbc      	itt	lt
 800f0ac:	580b      	ldrlt	r3, [r1, r0]
 800f0ae:	18c0      	addlt	r0, r0, r3
 800f0b0:	4770      	bx	lr

0800f0b2 <cabsf>:
 800f0b2:	b508      	push	{r3, lr}
 800f0b4:	ed2d 8b04 	vpush	{d8-d9}
 800f0b8:	eeb0 9a40 	vmov.f32	s18, s0
 800f0bc:	eef0 8a60 	vmov.f32	s17, s1
 800f0c0:	f000 f873 	bl	800f1aa <crealf>
 800f0c4:	eef0 0a68 	vmov.f32	s1, s17
 800f0c8:	eeb0 8a40 	vmov.f32	s16, s0
 800f0cc:	eeb0 0a49 	vmov.f32	s0, s18
 800f0d0:	f000 f867 	bl	800f1a2 <cimagf>
 800f0d4:	eef0 0a40 	vmov.f32	s1, s0
 800f0d8:	eeb0 0a48 	vmov.f32	s0, s16
 800f0dc:	ecbd 8b04 	vpop	{d8-d9}
 800f0e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800f0e4:	f000 b96c 	b.w	800f3c0 <hypotf>

0800f0e8 <cexp>:
 800f0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ec:	ed2d 8b06 	vpush	{d8-d10}
 800f0f0:	eeb0 aa40 	vmov.f32	s20, s0
 800f0f4:	eef0 aa60 	vmov.f32	s21, s1
 800f0f8:	eeb0 8a41 	vmov.f32	s16, s2
 800f0fc:	eef0 8a61 	vmov.f32	s17, s3
 800f100:	f000 f852 	bl	800f1a8 <creal>
 800f104:	eeb0 1a48 	vmov.f32	s2, s16
 800f108:	eef0 1a68 	vmov.f32	s3, s17
 800f10c:	eeb0 9a40 	vmov.f32	s18, s0
 800f110:	eef0 9a60 	vmov.f32	s19, s1
 800f114:	eeb0 0a4a 	vmov.f32	s0, s20
 800f118:	eef0 0a6a 	vmov.f32	s1, s21
 800f11c:	f000 f83c 	bl	800f198 <cimag>
 800f120:	eeb0 8a40 	vmov.f32	s16, s0
 800f124:	eef0 8a60 	vmov.f32	s17, s1
 800f128:	eeb0 0a49 	vmov.f32	s0, s18
 800f12c:	eef0 0a69 	vmov.f32	s1, s19
 800f130:	f000 f8ca 	bl	800f2c8 <exp>
 800f134:	ec57 6b10 	vmov	r6, r7, d0
 800f138:	eeb0 0a48 	vmov.f32	s0, s16
 800f13c:	eef0 0a68 	vmov.f32	s1, s17
 800f140:	f000 f87a 	bl	800f238 <sin>
 800f144:	4632      	mov	r2, r6
 800f146:	463b      	mov	r3, r7
 800f148:	ec51 0b10 	vmov	r0, r1, d0
 800f14c:	f7f1 fa64 	bl	8000618 <__aeabi_dmul>
 800f150:	eeb0 0a48 	vmov.f32	s0, s16
 800f154:	eef0 0a68 	vmov.f32	s1, s17
 800f158:	4604      	mov	r4, r0
 800f15a:	460d      	mov	r5, r1
 800f15c:	f000 f828 	bl	800f1b0 <cos>
 800f160:	4632      	mov	r2, r6
 800f162:	ec51 0b10 	vmov	r0, r1, d0
 800f166:	463b      	mov	r3, r7
 800f168:	f7f1 fa56 	bl	8000618 <__aeabi_dmul>
 800f16c:	2200      	movs	r2, #0
 800f16e:	4606      	mov	r6, r0
 800f170:	460f      	mov	r7, r1
 800f172:	2300      	movs	r3, #0
 800f174:	4620      	mov	r0, r4
 800f176:	4629      	mov	r1, r5
 800f178:	f7f1 fa4e 	bl	8000618 <__aeabi_dmul>
 800f17c:	4602      	mov	r2, r0
 800f17e:	460b      	mov	r3, r1
 800f180:	4630      	mov	r0, r6
 800f182:	4639      	mov	r1, r7
 800f184:	f7f1 f892 	bl	80002ac <__adddf3>
 800f188:	ecbd 8b06 	vpop	{d8-d10}
 800f18c:	ec41 0b10 	vmov	d0, r0, r1
 800f190:	ec45 4b11 	vmov	d1, r4, r5
 800f194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f198 <cimag>:
 800f198:	eeb0 0a41 	vmov.f32	s0, s2
 800f19c:	eef0 0a61 	vmov.f32	s1, s3
 800f1a0:	4770      	bx	lr

0800f1a2 <cimagf>:
 800f1a2:	eeb0 0a60 	vmov.f32	s0, s1
 800f1a6:	4770      	bx	lr

0800f1a8 <creal>:
 800f1a8:	4770      	bx	lr

0800f1aa <crealf>:
 800f1aa:	4770      	bx	lr
 800f1ac:	0000      	movs	r0, r0
	...

0800f1b0 <cos>:
 800f1b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1b2:	ec51 0b10 	vmov	r0, r1, d0
 800f1b6:	4a1e      	ldr	r2, [pc, #120]	; (800f230 <cos+0x80>)
 800f1b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	dc06      	bgt.n	800f1ce <cos+0x1e>
 800f1c0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800f228 <cos+0x78>
 800f1c4:	f000 fd58 	bl	800fc78 <__kernel_cos>
 800f1c8:	ec51 0b10 	vmov	r0, r1, d0
 800f1cc:	e007      	b.n	800f1de <cos+0x2e>
 800f1ce:	4a19      	ldr	r2, [pc, #100]	; (800f234 <cos+0x84>)
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	dd09      	ble.n	800f1e8 <cos+0x38>
 800f1d4:	ee10 2a10 	vmov	r2, s0
 800f1d8:	460b      	mov	r3, r1
 800f1da:	f7f1 f865 	bl	80002a8 <__aeabi_dsub>
 800f1de:	ec41 0b10 	vmov	d0, r0, r1
 800f1e2:	b005      	add	sp, #20
 800f1e4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1e8:	4668      	mov	r0, sp
 800f1ea:	f000 fabd 	bl	800f768 <__ieee754_rem_pio2>
 800f1ee:	f000 0003 	and.w	r0, r0, #3
 800f1f2:	2801      	cmp	r0, #1
 800f1f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f1f8:	ed9d 0b00 	vldr	d0, [sp]
 800f1fc:	d007      	beq.n	800f20e <cos+0x5e>
 800f1fe:	2802      	cmp	r0, #2
 800f200:	d00e      	beq.n	800f220 <cos+0x70>
 800f202:	2800      	cmp	r0, #0
 800f204:	d0de      	beq.n	800f1c4 <cos+0x14>
 800f206:	2001      	movs	r0, #1
 800f208:	f001 f93e 	bl	8010488 <__kernel_sin>
 800f20c:	e7dc      	b.n	800f1c8 <cos+0x18>
 800f20e:	f001 f93b 	bl	8010488 <__kernel_sin>
 800f212:	ec53 2b10 	vmov	r2, r3, d0
 800f216:	ee10 0a10 	vmov	r0, s0
 800f21a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f21e:	e7de      	b.n	800f1de <cos+0x2e>
 800f220:	f000 fd2a 	bl	800fc78 <__kernel_cos>
 800f224:	e7f5      	b.n	800f212 <cos+0x62>
 800f226:	bf00      	nop
	...
 800f230:	3fe921fb 	.word	0x3fe921fb
 800f234:	7fefffff 	.word	0x7fefffff

0800f238 <sin>:
 800f238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f23a:	ec51 0b10 	vmov	r0, r1, d0
 800f23e:	4a20      	ldr	r2, [pc, #128]	; (800f2c0 <sin+0x88>)
 800f240:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f244:	4293      	cmp	r3, r2
 800f246:	dc07      	bgt.n	800f258 <sin+0x20>
 800f248:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800f2b8 <sin+0x80>
 800f24c:	2000      	movs	r0, #0
 800f24e:	f001 f91b 	bl	8010488 <__kernel_sin>
 800f252:	ec51 0b10 	vmov	r0, r1, d0
 800f256:	e007      	b.n	800f268 <sin+0x30>
 800f258:	4a1a      	ldr	r2, [pc, #104]	; (800f2c4 <sin+0x8c>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	dd09      	ble.n	800f272 <sin+0x3a>
 800f25e:	ee10 2a10 	vmov	r2, s0
 800f262:	460b      	mov	r3, r1
 800f264:	f7f1 f820 	bl	80002a8 <__aeabi_dsub>
 800f268:	ec41 0b10 	vmov	d0, r0, r1
 800f26c:	b005      	add	sp, #20
 800f26e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f272:	4668      	mov	r0, sp
 800f274:	f000 fa78 	bl	800f768 <__ieee754_rem_pio2>
 800f278:	f000 0003 	and.w	r0, r0, #3
 800f27c:	2801      	cmp	r0, #1
 800f27e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f282:	ed9d 0b00 	vldr	d0, [sp]
 800f286:	d004      	beq.n	800f292 <sin+0x5a>
 800f288:	2802      	cmp	r0, #2
 800f28a:	d005      	beq.n	800f298 <sin+0x60>
 800f28c:	b970      	cbnz	r0, 800f2ac <sin+0x74>
 800f28e:	2001      	movs	r0, #1
 800f290:	e7dd      	b.n	800f24e <sin+0x16>
 800f292:	f000 fcf1 	bl	800fc78 <__kernel_cos>
 800f296:	e7dc      	b.n	800f252 <sin+0x1a>
 800f298:	2001      	movs	r0, #1
 800f29a:	f001 f8f5 	bl	8010488 <__kernel_sin>
 800f29e:	ec53 2b10 	vmov	r2, r3, d0
 800f2a2:	ee10 0a10 	vmov	r0, s0
 800f2a6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f2aa:	e7dd      	b.n	800f268 <sin+0x30>
 800f2ac:	f000 fce4 	bl	800fc78 <__kernel_cos>
 800f2b0:	e7f5      	b.n	800f29e <sin+0x66>
 800f2b2:	bf00      	nop
 800f2b4:	f3af 8000 	nop.w
	...
 800f2c0:	3fe921fb 	.word	0x3fe921fb
 800f2c4:	7fefffff 	.word	0x7fefffff

0800f2c8 <exp>:
 800f2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2ca:	ed2d 8b02 	vpush	{d8}
 800f2ce:	4e38      	ldr	r6, [pc, #224]	; (800f3b0 <exp+0xe8>)
 800f2d0:	b08b      	sub	sp, #44	; 0x2c
 800f2d2:	ec55 4b10 	vmov	r4, r5, d0
 800f2d6:	f000 f8d7 	bl	800f488 <__ieee754_exp>
 800f2da:	f996 3000 	ldrsb.w	r3, [r6]
 800f2de:	eeb0 8a40 	vmov.f32	s16, s0
 800f2e2:	eef0 8a60 	vmov.f32	s17, s1
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	d02c      	beq.n	800f344 <exp+0x7c>
 800f2ea:	ec45 4b10 	vmov	d0, r4, r5
 800f2ee:	f001 f98e 	bl	801060e <finite>
 800f2f2:	b338      	cbz	r0, 800f344 <exp+0x7c>
 800f2f4:	a32a      	add	r3, pc, #168	; (adr r3, 800f3a0 <exp+0xd8>)
 800f2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	4629      	mov	r1, r5
 800f2fe:	f7f1 fc1b 	bl	8000b38 <__aeabi_dcmpgt>
 800f302:	4607      	mov	r7, r0
 800f304:	2800      	cmp	r0, #0
 800f306:	d030      	beq.n	800f36a <exp+0xa2>
 800f308:	2303      	movs	r3, #3
 800f30a:	9300      	str	r3, [sp, #0]
 800f30c:	4b29      	ldr	r3, [pc, #164]	; (800f3b4 <exp+0xec>)
 800f30e:	9301      	str	r3, [sp, #4]
 800f310:	2300      	movs	r3, #0
 800f312:	9308      	str	r3, [sp, #32]
 800f314:	f996 3000 	ldrsb.w	r3, [r6]
 800f318:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800f31c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f320:	b9c3      	cbnz	r3, 800f354 <exp+0x8c>
 800f322:	4b25      	ldr	r3, [pc, #148]	; (800f3b8 <exp+0xf0>)
 800f324:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f328:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f32c:	4668      	mov	r0, sp
 800f32e:	f001 f9fb 	bl	8010728 <matherr>
 800f332:	b1a8      	cbz	r0, 800f360 <exp+0x98>
 800f334:	9b08      	ldr	r3, [sp, #32]
 800f336:	b11b      	cbz	r3, 800f340 <exp+0x78>
 800f338:	f7fc f912 	bl	800b560 <__errno>
 800f33c:	9b08      	ldr	r3, [sp, #32]
 800f33e:	6003      	str	r3, [r0, #0]
 800f340:	ed9d 8b06 	vldr	d8, [sp, #24]
 800f344:	eeb0 0a48 	vmov.f32	s0, s16
 800f348:	eef0 0a68 	vmov.f32	s1, s17
 800f34c:	b00b      	add	sp, #44	; 0x2c
 800f34e:	ecbd 8b02 	vpop	{d8}
 800f352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f354:	4919      	ldr	r1, [pc, #100]	; (800f3bc <exp+0xf4>)
 800f356:	2000      	movs	r0, #0
 800f358:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f35c:	2b02      	cmp	r3, #2
 800f35e:	d1e5      	bne.n	800f32c <exp+0x64>
 800f360:	f7fc f8fe 	bl	800b560 <__errno>
 800f364:	2322      	movs	r3, #34	; 0x22
 800f366:	6003      	str	r3, [r0, #0]
 800f368:	e7e4      	b.n	800f334 <exp+0x6c>
 800f36a:	a30f      	add	r3, pc, #60	; (adr r3, 800f3a8 <exp+0xe0>)
 800f36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f370:	4620      	mov	r0, r4
 800f372:	4629      	mov	r1, r5
 800f374:	f7f1 fbc2 	bl	8000afc <__aeabi_dcmplt>
 800f378:	2800      	cmp	r0, #0
 800f37a:	d0e3      	beq.n	800f344 <exp+0x7c>
 800f37c:	2304      	movs	r3, #4
 800f37e:	9300      	str	r3, [sp, #0]
 800f380:	4b0c      	ldr	r3, [pc, #48]	; (800f3b4 <exp+0xec>)
 800f382:	9301      	str	r3, [sp, #4]
 800f384:	2200      	movs	r2, #0
 800f386:	2300      	movs	r3, #0
 800f388:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f38c:	9708      	str	r7, [sp, #32]
 800f38e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800f392:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f396:	f996 3000 	ldrsb.w	r3, [r6]
 800f39a:	e7df      	b.n	800f35c <exp+0x94>
 800f39c:	f3af 8000 	nop.w
 800f3a0:	fefa39ef 	.word	0xfefa39ef
 800f3a4:	40862e42 	.word	0x40862e42
 800f3a8:	d52d3051 	.word	0xd52d3051
 800f3ac:	c0874910 	.word	0xc0874910
 800f3b0:	20000b58 	.word	0x20000b58
 800f3b4:	08012136 	.word	0x08012136
 800f3b8:	47efffff 	.word	0x47efffff
 800f3bc:	7ff00000 	.word	0x7ff00000

0800f3c0 <hypotf>:
 800f3c0:	b530      	push	{r4, r5, lr}
 800f3c2:	ed2d 8b04 	vpush	{d8-d9}
 800f3c6:	4c2b      	ldr	r4, [pc, #172]	; (800f474 <hypotf+0xb4>)
 800f3c8:	b08b      	sub	sp, #44	; 0x2c
 800f3ca:	eeb0 9a40 	vmov.f32	s18, s0
 800f3ce:	eef0 8a60 	vmov.f32	s17, s1
 800f3d2:	f000 fbbb 	bl	800fb4c <__ieee754_hypotf>
 800f3d6:	f994 3000 	ldrsb.w	r3, [r4]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	eeb0 8a40 	vmov.f32	s16, s0
 800f3e0:	d037      	beq.n	800f452 <hypotf+0x92>
 800f3e2:	f001 fa1b 	bl	801081c <finitef>
 800f3e6:	4605      	mov	r5, r0
 800f3e8:	2800      	cmp	r0, #0
 800f3ea:	d132      	bne.n	800f452 <hypotf+0x92>
 800f3ec:	eeb0 0a49 	vmov.f32	s0, s18
 800f3f0:	f001 fa14 	bl	801081c <finitef>
 800f3f4:	b368      	cbz	r0, 800f452 <hypotf+0x92>
 800f3f6:	eeb0 0a68 	vmov.f32	s0, s17
 800f3fa:	f001 fa0f 	bl	801081c <finitef>
 800f3fe:	b340      	cbz	r0, 800f452 <hypotf+0x92>
 800f400:	2303      	movs	r3, #3
 800f402:	9300      	str	r3, [sp, #0]
 800f404:	ee19 0a10 	vmov	r0, s18
 800f408:	4b1b      	ldr	r3, [pc, #108]	; (800f478 <hypotf+0xb8>)
 800f40a:	9301      	str	r3, [sp, #4]
 800f40c:	9508      	str	r5, [sp, #32]
 800f40e:	f7f1 f8ab 	bl	8000568 <__aeabi_f2d>
 800f412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f416:	ee18 0a90 	vmov	r0, s17
 800f41a:	f7f1 f8a5 	bl	8000568 <__aeabi_f2d>
 800f41e:	f994 3000 	ldrsb.w	r3, [r4]
 800f422:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f426:	b9d3      	cbnz	r3, 800f45e <hypotf+0x9e>
 800f428:	4b14      	ldr	r3, [pc, #80]	; (800f47c <hypotf+0xbc>)
 800f42a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f42e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f432:	4668      	mov	r0, sp
 800f434:	f001 f978 	bl	8010728 <matherr>
 800f438:	b1b8      	cbz	r0, 800f46a <hypotf+0xaa>
 800f43a:	9b08      	ldr	r3, [sp, #32]
 800f43c:	b11b      	cbz	r3, 800f446 <hypotf+0x86>
 800f43e:	f7fc f88f 	bl	800b560 <__errno>
 800f442:	9b08      	ldr	r3, [sp, #32]
 800f444:	6003      	str	r3, [r0, #0]
 800f446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f44a:	f7f1 fbdd 	bl	8000c08 <__aeabi_d2f>
 800f44e:	ee08 0a10 	vmov	s16, r0
 800f452:	eeb0 0a48 	vmov.f32	s0, s16
 800f456:	b00b      	add	sp, #44	; 0x2c
 800f458:	ecbd 8b04 	vpop	{d8-d9}
 800f45c:	bd30      	pop	{r4, r5, pc}
 800f45e:	4908      	ldr	r1, [pc, #32]	; (800f480 <hypotf+0xc0>)
 800f460:	2000      	movs	r0, #0
 800f462:	2b02      	cmp	r3, #2
 800f464:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f468:	d1e3      	bne.n	800f432 <hypotf+0x72>
 800f46a:	f7fc f879 	bl	800b560 <__errno>
 800f46e:	2322      	movs	r3, #34	; 0x22
 800f470:	6003      	str	r3, [r0, #0]
 800f472:	e7e2      	b.n	800f43a <hypotf+0x7a>
 800f474:	20000b58 	.word	0x20000b58
 800f478:	0801213a 	.word	0x0801213a
 800f47c:	47efffff 	.word	0x47efffff
 800f480:	7ff00000 	.word	0x7ff00000
 800f484:	00000000 	.word	0x00000000

0800f488 <__ieee754_exp>:
 800f488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f48c:	ec55 4b10 	vmov	r4, r5, d0
 800f490:	4aab      	ldr	r2, [pc, #684]	; (800f740 <__ieee754_exp+0x2b8>)
 800f492:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f496:	4296      	cmp	r6, r2
 800f498:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 800f49c:	d932      	bls.n	800f504 <__ieee754_exp+0x7c>
 800f49e:	4aa9      	ldr	r2, [pc, #676]	; (800f744 <__ieee754_exp+0x2bc>)
 800f4a0:	4296      	cmp	r6, r2
 800f4a2:	d913      	bls.n	800f4cc <__ieee754_exp+0x44>
 800f4a4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f4a8:	4323      	orrs	r3, r4
 800f4aa:	ee10 2a10 	vmov	r2, s0
 800f4ae:	d007      	beq.n	800f4c0 <__ieee754_exp+0x38>
 800f4b0:	462b      	mov	r3, r5
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	f7f0 fef9 	bl	80002ac <__adddf3>
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	460d      	mov	r5, r1
 800f4be:	e000      	b.n	800f4c2 <__ieee754_exp+0x3a>
 800f4c0:	b9ef      	cbnz	r7, 800f4fe <__ieee754_exp+0x76>
 800f4c2:	ec45 4b10 	vmov	d0, r4, r5
 800f4c6:	b004      	add	sp, #16
 800f4c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4cc:	a386      	add	r3, pc, #536	; (adr r3, 800f6e8 <__ieee754_exp+0x260>)
 800f4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d2:	ee10 0a10 	vmov	r0, s0
 800f4d6:	4629      	mov	r1, r5
 800f4d8:	f7f1 fb2e 	bl	8000b38 <__aeabi_dcmpgt>
 800f4dc:	b138      	cbz	r0, 800f4ee <__ieee754_exp+0x66>
 800f4de:	a384      	add	r3, pc, #528	; (adr r3, 800f6f0 <__ieee754_exp+0x268>)
 800f4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e4:	4610      	mov	r0, r2
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	f7f1 f896 	bl	8000618 <__aeabi_dmul>
 800f4ec:	e7e5      	b.n	800f4ba <__ieee754_exp+0x32>
 800f4ee:	a382      	add	r3, pc, #520	; (adr r3, 800f6f8 <__ieee754_exp+0x270>)
 800f4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	4629      	mov	r1, r5
 800f4f8:	f7f1 fb00 	bl	8000afc <__aeabi_dcmplt>
 800f4fc:	b130      	cbz	r0, 800f50c <__ieee754_exp+0x84>
 800f4fe:	2400      	movs	r4, #0
 800f500:	2500      	movs	r5, #0
 800f502:	e7de      	b.n	800f4c2 <__ieee754_exp+0x3a>
 800f504:	4b90      	ldr	r3, [pc, #576]	; (800f748 <__ieee754_exp+0x2c0>)
 800f506:	429e      	cmp	r6, r3
 800f508:	f240 80a6 	bls.w	800f658 <__ieee754_exp+0x1d0>
 800f50c:	4b8f      	ldr	r3, [pc, #572]	; (800f74c <__ieee754_exp+0x2c4>)
 800f50e:	429e      	cmp	r6, r3
 800f510:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800f514:	d875      	bhi.n	800f602 <__ieee754_exp+0x17a>
 800f516:	4b8e      	ldr	r3, [pc, #568]	; (800f750 <__ieee754_exp+0x2c8>)
 800f518:	4e8e      	ldr	r6, [pc, #568]	; (800f754 <__ieee754_exp+0x2cc>)
 800f51a:	4443      	add	r3, r8
 800f51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f520:	4620      	mov	r0, r4
 800f522:	4629      	mov	r1, r5
 800f524:	f7f0 fec0 	bl	80002a8 <__aeabi_dsub>
 800f528:	4446      	add	r6, r8
 800f52a:	e9cd 0100 	strd	r0, r1, [sp]
 800f52e:	e9d6 8900 	ldrd	r8, r9, [r6]
 800f532:	f1c7 0a01 	rsb	sl, r7, #1
 800f536:	ebaa 0a07 	sub.w	sl, sl, r7
 800f53a:	4642      	mov	r2, r8
 800f53c:	464b      	mov	r3, r9
 800f53e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f542:	f7f0 feb1 	bl	80002a8 <__aeabi_dsub>
 800f546:	4604      	mov	r4, r0
 800f548:	460d      	mov	r5, r1
 800f54a:	4622      	mov	r2, r4
 800f54c:	462b      	mov	r3, r5
 800f54e:	4620      	mov	r0, r4
 800f550:	4629      	mov	r1, r5
 800f552:	f7f1 f861 	bl	8000618 <__aeabi_dmul>
 800f556:	a36a      	add	r3, pc, #424	; (adr r3, 800f700 <__ieee754_exp+0x278>)
 800f558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55c:	4606      	mov	r6, r0
 800f55e:	460f      	mov	r7, r1
 800f560:	f7f1 f85a 	bl	8000618 <__aeabi_dmul>
 800f564:	a368      	add	r3, pc, #416	; (adr r3, 800f708 <__ieee754_exp+0x280>)
 800f566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56a:	f7f0 fe9d 	bl	80002a8 <__aeabi_dsub>
 800f56e:	4632      	mov	r2, r6
 800f570:	463b      	mov	r3, r7
 800f572:	f7f1 f851 	bl	8000618 <__aeabi_dmul>
 800f576:	a366      	add	r3, pc, #408	; (adr r3, 800f710 <__ieee754_exp+0x288>)
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	f7f0 fe96 	bl	80002ac <__adddf3>
 800f580:	4632      	mov	r2, r6
 800f582:	463b      	mov	r3, r7
 800f584:	f7f1 f848 	bl	8000618 <__aeabi_dmul>
 800f588:	a363      	add	r3, pc, #396	; (adr r3, 800f718 <__ieee754_exp+0x290>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f0 fe8b 	bl	80002a8 <__aeabi_dsub>
 800f592:	4632      	mov	r2, r6
 800f594:	463b      	mov	r3, r7
 800f596:	f7f1 f83f 	bl	8000618 <__aeabi_dmul>
 800f59a:	a361      	add	r3, pc, #388	; (adr r3, 800f720 <__ieee754_exp+0x298>)
 800f59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a0:	f7f0 fe84 	bl	80002ac <__adddf3>
 800f5a4:	4632      	mov	r2, r6
 800f5a6:	463b      	mov	r3, r7
 800f5a8:	f7f1 f836 	bl	8000618 <__aeabi_dmul>
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	460b      	mov	r3, r1
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	4629      	mov	r1, r5
 800f5b4:	f7f0 fe78 	bl	80002a8 <__aeabi_dsub>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	4606      	mov	r6, r0
 800f5be:	460f      	mov	r7, r1
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	4629      	mov	r1, r5
 800f5c4:	f7f1 f828 	bl	8000618 <__aeabi_dmul>
 800f5c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5cc:	f1ba 0f00 	cmp.w	sl, #0
 800f5d0:	d15c      	bne.n	800f68c <__ieee754_exp+0x204>
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f5d8:	4630      	mov	r0, r6
 800f5da:	4639      	mov	r1, r7
 800f5dc:	f7f0 fe64 	bl	80002a8 <__aeabi_dsub>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5e8:	f7f1 f940 	bl	800086c <__aeabi_ddiv>
 800f5ec:	4622      	mov	r2, r4
 800f5ee:	462b      	mov	r3, r5
 800f5f0:	f7f0 fe5a 	bl	80002a8 <__aeabi_dsub>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	4957      	ldr	r1, [pc, #348]	; (800f758 <__ieee754_exp+0x2d0>)
 800f5fc:	f7f0 fe54 	bl	80002a8 <__aeabi_dsub>
 800f600:	e75b      	b.n	800f4ba <__ieee754_exp+0x32>
 800f602:	4e56      	ldr	r6, [pc, #344]	; (800f75c <__ieee754_exp+0x2d4>)
 800f604:	a348      	add	r3, pc, #288	; (adr r3, 800f728 <__ieee754_exp+0x2a0>)
 800f606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f60a:	4446      	add	r6, r8
 800f60c:	4620      	mov	r0, r4
 800f60e:	4629      	mov	r1, r5
 800f610:	f7f1 f802 	bl	8000618 <__aeabi_dmul>
 800f614:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f618:	f7f0 fe48 	bl	80002ac <__adddf3>
 800f61c:	f7f1 faac 	bl	8000b78 <__aeabi_d2iz>
 800f620:	4682      	mov	sl, r0
 800f622:	f7f0 ff8f 	bl	8000544 <__aeabi_i2d>
 800f626:	a342      	add	r3, pc, #264	; (adr r3, 800f730 <__ieee754_exp+0x2a8>)
 800f628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f62c:	4606      	mov	r6, r0
 800f62e:	460f      	mov	r7, r1
 800f630:	f7f0 fff2 	bl	8000618 <__aeabi_dmul>
 800f634:	4602      	mov	r2, r0
 800f636:	460b      	mov	r3, r1
 800f638:	4620      	mov	r0, r4
 800f63a:	4629      	mov	r1, r5
 800f63c:	f7f0 fe34 	bl	80002a8 <__aeabi_dsub>
 800f640:	a33d      	add	r3, pc, #244	; (adr r3, 800f738 <__ieee754_exp+0x2b0>)
 800f642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f646:	e9cd 0100 	strd	r0, r1, [sp]
 800f64a:	4630      	mov	r0, r6
 800f64c:	4639      	mov	r1, r7
 800f64e:	f7f0 ffe3 	bl	8000618 <__aeabi_dmul>
 800f652:	4680      	mov	r8, r0
 800f654:	4689      	mov	r9, r1
 800f656:	e770      	b.n	800f53a <__ieee754_exp+0xb2>
 800f658:	4b41      	ldr	r3, [pc, #260]	; (800f760 <__ieee754_exp+0x2d8>)
 800f65a:	429e      	cmp	r6, r3
 800f65c:	d811      	bhi.n	800f682 <__ieee754_exp+0x1fa>
 800f65e:	a324      	add	r3, pc, #144	; (adr r3, 800f6f0 <__ieee754_exp+0x268>)
 800f660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f664:	ee10 0a10 	vmov	r0, s0
 800f668:	4629      	mov	r1, r5
 800f66a:	f7f0 fe1f 	bl	80002ac <__adddf3>
 800f66e:	2200      	movs	r2, #0
 800f670:	4b39      	ldr	r3, [pc, #228]	; (800f758 <__ieee754_exp+0x2d0>)
 800f672:	f7f1 fa61 	bl	8000b38 <__aeabi_dcmpgt>
 800f676:	b138      	cbz	r0, 800f688 <__ieee754_exp+0x200>
 800f678:	2200      	movs	r2, #0
 800f67a:	4b37      	ldr	r3, [pc, #220]	; (800f758 <__ieee754_exp+0x2d0>)
 800f67c:	4620      	mov	r0, r4
 800f67e:	4629      	mov	r1, r5
 800f680:	e719      	b.n	800f4b6 <__ieee754_exp+0x2e>
 800f682:	f04f 0a00 	mov.w	sl, #0
 800f686:	e760      	b.n	800f54a <__ieee754_exp+0xc2>
 800f688:	4682      	mov	sl, r0
 800f68a:	e75e      	b.n	800f54a <__ieee754_exp+0xc2>
 800f68c:	4632      	mov	r2, r6
 800f68e:	463b      	mov	r3, r7
 800f690:	2000      	movs	r0, #0
 800f692:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f696:	f7f0 fe07 	bl	80002a8 <__aeabi_dsub>
 800f69a:	4602      	mov	r2, r0
 800f69c:	460b      	mov	r3, r1
 800f69e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6a2:	f7f1 f8e3 	bl	800086c <__aeabi_ddiv>
 800f6a6:	4602      	mov	r2, r0
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	4640      	mov	r0, r8
 800f6ac:	4649      	mov	r1, r9
 800f6ae:	f7f0 fdfb 	bl	80002a8 <__aeabi_dsub>
 800f6b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6b6:	f7f0 fdf7 	bl	80002a8 <__aeabi_dsub>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	460b      	mov	r3, r1
 800f6be:	2000      	movs	r0, #0
 800f6c0:	4925      	ldr	r1, [pc, #148]	; (800f758 <__ieee754_exp+0x2d0>)
 800f6c2:	f7f0 fdf1 	bl	80002a8 <__aeabi_dsub>
 800f6c6:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800f6ca:	4592      	cmp	sl, r2
 800f6cc:	db02      	blt.n	800f6d4 <__ieee754_exp+0x24c>
 800f6ce:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f6d2:	e6f2      	b.n	800f4ba <__ieee754_exp+0x32>
 800f6d4:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800f6d8:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800f6dc:	2200      	movs	r2, #0
 800f6de:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800f6e2:	e701      	b.n	800f4e8 <__ieee754_exp+0x60>
 800f6e4:	f3af 8000 	nop.w
 800f6e8:	fefa39ef 	.word	0xfefa39ef
 800f6ec:	40862e42 	.word	0x40862e42
 800f6f0:	8800759c 	.word	0x8800759c
 800f6f4:	7e37e43c 	.word	0x7e37e43c
 800f6f8:	d52d3051 	.word	0xd52d3051
 800f6fc:	c0874910 	.word	0xc0874910
 800f700:	72bea4d0 	.word	0x72bea4d0
 800f704:	3e663769 	.word	0x3e663769
 800f708:	c5d26bf1 	.word	0xc5d26bf1
 800f70c:	3ebbbd41 	.word	0x3ebbbd41
 800f710:	af25de2c 	.word	0xaf25de2c
 800f714:	3f11566a 	.word	0x3f11566a
 800f718:	16bebd93 	.word	0x16bebd93
 800f71c:	3f66c16c 	.word	0x3f66c16c
 800f720:	5555553e 	.word	0x5555553e
 800f724:	3fc55555 	.word	0x3fc55555
 800f728:	652b82fe 	.word	0x652b82fe
 800f72c:	3ff71547 	.word	0x3ff71547
 800f730:	fee00000 	.word	0xfee00000
 800f734:	3fe62e42 	.word	0x3fe62e42
 800f738:	35793c76 	.word	0x35793c76
 800f73c:	3dea39ef 	.word	0x3dea39ef
 800f740:	40862e41 	.word	0x40862e41
 800f744:	7fefffff 	.word	0x7fefffff
 800f748:	3fd62e42 	.word	0x3fd62e42
 800f74c:	3ff0a2b1 	.word	0x3ff0a2b1
 800f750:	08012158 	.word	0x08012158
 800f754:	08012168 	.word	0x08012168
 800f758:	3ff00000 	.word	0x3ff00000
 800f75c:	08012148 	.word	0x08012148
 800f760:	3e2fffff 	.word	0x3e2fffff
 800f764:	00000000 	.word	0x00000000

0800f768 <__ieee754_rem_pio2>:
 800f768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f76c:	ec57 6b10 	vmov	r6, r7, d0
 800f770:	4bc3      	ldr	r3, [pc, #780]	; (800fa80 <__ieee754_rem_pio2+0x318>)
 800f772:	b08d      	sub	sp, #52	; 0x34
 800f774:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f778:	4598      	cmp	r8, r3
 800f77a:	4604      	mov	r4, r0
 800f77c:	9704      	str	r7, [sp, #16]
 800f77e:	dc07      	bgt.n	800f790 <__ieee754_rem_pio2+0x28>
 800f780:	2200      	movs	r2, #0
 800f782:	2300      	movs	r3, #0
 800f784:	ed84 0b00 	vstr	d0, [r4]
 800f788:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f78c:	2500      	movs	r5, #0
 800f78e:	e027      	b.n	800f7e0 <__ieee754_rem_pio2+0x78>
 800f790:	4bbc      	ldr	r3, [pc, #752]	; (800fa84 <__ieee754_rem_pio2+0x31c>)
 800f792:	4598      	cmp	r8, r3
 800f794:	dc75      	bgt.n	800f882 <__ieee754_rem_pio2+0x11a>
 800f796:	9b04      	ldr	r3, [sp, #16]
 800f798:	4dbb      	ldr	r5, [pc, #748]	; (800fa88 <__ieee754_rem_pio2+0x320>)
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	ee10 0a10 	vmov	r0, s0
 800f7a0:	a3a9      	add	r3, pc, #676	; (adr r3, 800fa48 <__ieee754_rem_pio2+0x2e0>)
 800f7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	dd36      	ble.n	800f818 <__ieee754_rem_pio2+0xb0>
 800f7aa:	f7f0 fd7d 	bl	80002a8 <__aeabi_dsub>
 800f7ae:	45a8      	cmp	r8, r5
 800f7b0:	4606      	mov	r6, r0
 800f7b2:	460f      	mov	r7, r1
 800f7b4:	d018      	beq.n	800f7e8 <__ieee754_rem_pio2+0x80>
 800f7b6:	a3a6      	add	r3, pc, #664	; (adr r3, 800fa50 <__ieee754_rem_pio2+0x2e8>)
 800f7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7bc:	f7f0 fd74 	bl	80002a8 <__aeabi_dsub>
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	460b      	mov	r3, r1
 800f7c4:	e9c4 2300 	strd	r2, r3, [r4]
 800f7c8:	4630      	mov	r0, r6
 800f7ca:	4639      	mov	r1, r7
 800f7cc:	f7f0 fd6c 	bl	80002a8 <__aeabi_dsub>
 800f7d0:	a39f      	add	r3, pc, #636	; (adr r3, 800fa50 <__ieee754_rem_pio2+0x2e8>)
 800f7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7d6:	f7f0 fd67 	bl	80002a8 <__aeabi_dsub>
 800f7da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f7de:	2501      	movs	r5, #1
 800f7e0:	4628      	mov	r0, r5
 800f7e2:	b00d      	add	sp, #52	; 0x34
 800f7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e8:	a39b      	add	r3, pc, #620	; (adr r3, 800fa58 <__ieee754_rem_pio2+0x2f0>)
 800f7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ee:	f7f0 fd5b 	bl	80002a8 <__aeabi_dsub>
 800f7f2:	a39b      	add	r3, pc, #620	; (adr r3, 800fa60 <__ieee754_rem_pio2+0x2f8>)
 800f7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f8:	4606      	mov	r6, r0
 800f7fa:	460f      	mov	r7, r1
 800f7fc:	f7f0 fd54 	bl	80002a8 <__aeabi_dsub>
 800f800:	4602      	mov	r2, r0
 800f802:	460b      	mov	r3, r1
 800f804:	e9c4 2300 	strd	r2, r3, [r4]
 800f808:	4630      	mov	r0, r6
 800f80a:	4639      	mov	r1, r7
 800f80c:	f7f0 fd4c 	bl	80002a8 <__aeabi_dsub>
 800f810:	a393      	add	r3, pc, #588	; (adr r3, 800fa60 <__ieee754_rem_pio2+0x2f8>)
 800f812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f816:	e7de      	b.n	800f7d6 <__ieee754_rem_pio2+0x6e>
 800f818:	f7f0 fd48 	bl	80002ac <__adddf3>
 800f81c:	45a8      	cmp	r8, r5
 800f81e:	4606      	mov	r6, r0
 800f820:	460f      	mov	r7, r1
 800f822:	d016      	beq.n	800f852 <__ieee754_rem_pio2+0xea>
 800f824:	a38a      	add	r3, pc, #552	; (adr r3, 800fa50 <__ieee754_rem_pio2+0x2e8>)
 800f826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f82a:	f7f0 fd3f 	bl	80002ac <__adddf3>
 800f82e:	4602      	mov	r2, r0
 800f830:	460b      	mov	r3, r1
 800f832:	e9c4 2300 	strd	r2, r3, [r4]
 800f836:	4630      	mov	r0, r6
 800f838:	4639      	mov	r1, r7
 800f83a:	f7f0 fd35 	bl	80002a8 <__aeabi_dsub>
 800f83e:	a384      	add	r3, pc, #528	; (adr r3, 800fa50 <__ieee754_rem_pio2+0x2e8>)
 800f840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f844:	f7f0 fd32 	bl	80002ac <__adddf3>
 800f848:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f84c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f850:	e7c6      	b.n	800f7e0 <__ieee754_rem_pio2+0x78>
 800f852:	a381      	add	r3, pc, #516	; (adr r3, 800fa58 <__ieee754_rem_pio2+0x2f0>)
 800f854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f858:	f7f0 fd28 	bl	80002ac <__adddf3>
 800f85c:	a380      	add	r3, pc, #512	; (adr r3, 800fa60 <__ieee754_rem_pio2+0x2f8>)
 800f85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f862:	4606      	mov	r6, r0
 800f864:	460f      	mov	r7, r1
 800f866:	f7f0 fd21 	bl	80002ac <__adddf3>
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	e9c4 2300 	strd	r2, r3, [r4]
 800f872:	4630      	mov	r0, r6
 800f874:	4639      	mov	r1, r7
 800f876:	f7f0 fd17 	bl	80002a8 <__aeabi_dsub>
 800f87a:	a379      	add	r3, pc, #484	; (adr r3, 800fa60 <__ieee754_rem_pio2+0x2f8>)
 800f87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f880:	e7e0      	b.n	800f844 <__ieee754_rem_pio2+0xdc>
 800f882:	4b82      	ldr	r3, [pc, #520]	; (800fa8c <__ieee754_rem_pio2+0x324>)
 800f884:	4598      	cmp	r8, r3
 800f886:	f300 80d0 	bgt.w	800fa2a <__ieee754_rem_pio2+0x2c2>
 800f88a:	f000 feb7 	bl	80105fc <fabs>
 800f88e:	ec57 6b10 	vmov	r6, r7, d0
 800f892:	ee10 0a10 	vmov	r0, s0
 800f896:	a374      	add	r3, pc, #464	; (adr r3, 800fa68 <__ieee754_rem_pio2+0x300>)
 800f898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89c:	4639      	mov	r1, r7
 800f89e:	f7f0 febb 	bl	8000618 <__aeabi_dmul>
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	4b7a      	ldr	r3, [pc, #488]	; (800fa90 <__ieee754_rem_pio2+0x328>)
 800f8a6:	f7f0 fd01 	bl	80002ac <__adddf3>
 800f8aa:	f7f1 f965 	bl	8000b78 <__aeabi_d2iz>
 800f8ae:	4605      	mov	r5, r0
 800f8b0:	f7f0 fe48 	bl	8000544 <__aeabi_i2d>
 800f8b4:	a364      	add	r3, pc, #400	; (adr r3, 800fa48 <__ieee754_rem_pio2+0x2e0>)
 800f8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8be:	f7f0 feab 	bl	8000618 <__aeabi_dmul>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	4639      	mov	r1, r7
 800f8ca:	f7f0 fced 	bl	80002a8 <__aeabi_dsub>
 800f8ce:	a360      	add	r3, pc, #384	; (adr r3, 800fa50 <__ieee754_rem_pio2+0x2e8>)
 800f8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d4:	4682      	mov	sl, r0
 800f8d6:	468b      	mov	fp, r1
 800f8d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8dc:	f7f0 fe9c 	bl	8000618 <__aeabi_dmul>
 800f8e0:	2d1f      	cmp	r5, #31
 800f8e2:	4606      	mov	r6, r0
 800f8e4:	460f      	mov	r7, r1
 800f8e6:	dc0c      	bgt.n	800f902 <__ieee754_rem_pio2+0x19a>
 800f8e8:	1e6a      	subs	r2, r5, #1
 800f8ea:	4b6a      	ldr	r3, [pc, #424]	; (800fa94 <__ieee754_rem_pio2+0x32c>)
 800f8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8f0:	4543      	cmp	r3, r8
 800f8f2:	d006      	beq.n	800f902 <__ieee754_rem_pio2+0x19a>
 800f8f4:	4632      	mov	r2, r6
 800f8f6:	463b      	mov	r3, r7
 800f8f8:	4650      	mov	r0, sl
 800f8fa:	4659      	mov	r1, fp
 800f8fc:	f7f0 fcd4 	bl	80002a8 <__aeabi_dsub>
 800f900:	e00e      	b.n	800f920 <__ieee754_rem_pio2+0x1b8>
 800f902:	4632      	mov	r2, r6
 800f904:	463b      	mov	r3, r7
 800f906:	4650      	mov	r0, sl
 800f908:	4659      	mov	r1, fp
 800f90a:	f7f0 fccd 	bl	80002a8 <__aeabi_dsub>
 800f90e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f912:	9305      	str	r3, [sp, #20]
 800f914:	9a05      	ldr	r2, [sp, #20]
 800f916:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f91a:	1ad3      	subs	r3, r2, r3
 800f91c:	2b10      	cmp	r3, #16
 800f91e:	dc02      	bgt.n	800f926 <__ieee754_rem_pio2+0x1be>
 800f920:	e9c4 0100 	strd	r0, r1, [r4]
 800f924:	e039      	b.n	800f99a <__ieee754_rem_pio2+0x232>
 800f926:	a34c      	add	r3, pc, #304	; (adr r3, 800fa58 <__ieee754_rem_pio2+0x2f0>)
 800f928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f930:	f7f0 fe72 	bl	8000618 <__aeabi_dmul>
 800f934:	4606      	mov	r6, r0
 800f936:	460f      	mov	r7, r1
 800f938:	4602      	mov	r2, r0
 800f93a:	460b      	mov	r3, r1
 800f93c:	4650      	mov	r0, sl
 800f93e:	4659      	mov	r1, fp
 800f940:	f7f0 fcb2 	bl	80002a8 <__aeabi_dsub>
 800f944:	4602      	mov	r2, r0
 800f946:	460b      	mov	r3, r1
 800f948:	4680      	mov	r8, r0
 800f94a:	4689      	mov	r9, r1
 800f94c:	4650      	mov	r0, sl
 800f94e:	4659      	mov	r1, fp
 800f950:	f7f0 fcaa 	bl	80002a8 <__aeabi_dsub>
 800f954:	4632      	mov	r2, r6
 800f956:	463b      	mov	r3, r7
 800f958:	f7f0 fca6 	bl	80002a8 <__aeabi_dsub>
 800f95c:	a340      	add	r3, pc, #256	; (adr r3, 800fa60 <__ieee754_rem_pio2+0x2f8>)
 800f95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f962:	4606      	mov	r6, r0
 800f964:	460f      	mov	r7, r1
 800f966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f96a:	f7f0 fe55 	bl	8000618 <__aeabi_dmul>
 800f96e:	4632      	mov	r2, r6
 800f970:	463b      	mov	r3, r7
 800f972:	f7f0 fc99 	bl	80002a8 <__aeabi_dsub>
 800f976:	4602      	mov	r2, r0
 800f978:	460b      	mov	r3, r1
 800f97a:	4606      	mov	r6, r0
 800f97c:	460f      	mov	r7, r1
 800f97e:	4640      	mov	r0, r8
 800f980:	4649      	mov	r1, r9
 800f982:	f7f0 fc91 	bl	80002a8 <__aeabi_dsub>
 800f986:	9a05      	ldr	r2, [sp, #20]
 800f988:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	2b31      	cmp	r3, #49	; 0x31
 800f990:	dc20      	bgt.n	800f9d4 <__ieee754_rem_pio2+0x26c>
 800f992:	e9c4 0100 	strd	r0, r1, [r4]
 800f996:	46c2      	mov	sl, r8
 800f998:	46cb      	mov	fp, r9
 800f99a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f99e:	4650      	mov	r0, sl
 800f9a0:	4642      	mov	r2, r8
 800f9a2:	464b      	mov	r3, r9
 800f9a4:	4659      	mov	r1, fp
 800f9a6:	f7f0 fc7f 	bl	80002a8 <__aeabi_dsub>
 800f9aa:	463b      	mov	r3, r7
 800f9ac:	4632      	mov	r2, r6
 800f9ae:	f7f0 fc7b 	bl	80002a8 <__aeabi_dsub>
 800f9b2:	9b04      	ldr	r3, [sp, #16]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f9ba:	f6bf af11 	bge.w	800f7e0 <__ieee754_rem_pio2+0x78>
 800f9be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f9c2:	6063      	str	r3, [r4, #4]
 800f9c4:	f8c4 8000 	str.w	r8, [r4]
 800f9c8:	60a0      	str	r0, [r4, #8]
 800f9ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9ce:	60e3      	str	r3, [r4, #12]
 800f9d0:	426d      	negs	r5, r5
 800f9d2:	e705      	b.n	800f7e0 <__ieee754_rem_pio2+0x78>
 800f9d4:	a326      	add	r3, pc, #152	; (adr r3, 800fa70 <__ieee754_rem_pio2+0x308>)
 800f9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9de:	f7f0 fe1b 	bl	8000618 <__aeabi_dmul>
 800f9e2:	4606      	mov	r6, r0
 800f9e4:	460f      	mov	r7, r1
 800f9e6:	4602      	mov	r2, r0
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	4640      	mov	r0, r8
 800f9ec:	4649      	mov	r1, r9
 800f9ee:	f7f0 fc5b 	bl	80002a8 <__aeabi_dsub>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	4682      	mov	sl, r0
 800f9f8:	468b      	mov	fp, r1
 800f9fa:	4640      	mov	r0, r8
 800f9fc:	4649      	mov	r1, r9
 800f9fe:	f7f0 fc53 	bl	80002a8 <__aeabi_dsub>
 800fa02:	4632      	mov	r2, r6
 800fa04:	463b      	mov	r3, r7
 800fa06:	f7f0 fc4f 	bl	80002a8 <__aeabi_dsub>
 800fa0a:	a31b      	add	r3, pc, #108	; (adr r3, 800fa78 <__ieee754_rem_pio2+0x310>)
 800fa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa10:	4606      	mov	r6, r0
 800fa12:	460f      	mov	r7, r1
 800fa14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa18:	f7f0 fdfe 	bl	8000618 <__aeabi_dmul>
 800fa1c:	4632      	mov	r2, r6
 800fa1e:	463b      	mov	r3, r7
 800fa20:	f7f0 fc42 	bl	80002a8 <__aeabi_dsub>
 800fa24:	4606      	mov	r6, r0
 800fa26:	460f      	mov	r7, r1
 800fa28:	e764      	b.n	800f8f4 <__ieee754_rem_pio2+0x18c>
 800fa2a:	4b1b      	ldr	r3, [pc, #108]	; (800fa98 <__ieee754_rem_pio2+0x330>)
 800fa2c:	4598      	cmp	r8, r3
 800fa2e:	dd35      	ble.n	800fa9c <__ieee754_rem_pio2+0x334>
 800fa30:	ee10 2a10 	vmov	r2, s0
 800fa34:	463b      	mov	r3, r7
 800fa36:	4630      	mov	r0, r6
 800fa38:	4639      	mov	r1, r7
 800fa3a:	f7f0 fc35 	bl	80002a8 <__aeabi_dsub>
 800fa3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fa42:	e9c4 0100 	strd	r0, r1, [r4]
 800fa46:	e6a1      	b.n	800f78c <__ieee754_rem_pio2+0x24>
 800fa48:	54400000 	.word	0x54400000
 800fa4c:	3ff921fb 	.word	0x3ff921fb
 800fa50:	1a626331 	.word	0x1a626331
 800fa54:	3dd0b461 	.word	0x3dd0b461
 800fa58:	1a600000 	.word	0x1a600000
 800fa5c:	3dd0b461 	.word	0x3dd0b461
 800fa60:	2e037073 	.word	0x2e037073
 800fa64:	3ba3198a 	.word	0x3ba3198a
 800fa68:	6dc9c883 	.word	0x6dc9c883
 800fa6c:	3fe45f30 	.word	0x3fe45f30
 800fa70:	2e000000 	.word	0x2e000000
 800fa74:	3ba3198a 	.word	0x3ba3198a
 800fa78:	252049c1 	.word	0x252049c1
 800fa7c:	397b839a 	.word	0x397b839a
 800fa80:	3fe921fb 	.word	0x3fe921fb
 800fa84:	4002d97b 	.word	0x4002d97b
 800fa88:	3ff921fb 	.word	0x3ff921fb
 800fa8c:	413921fb 	.word	0x413921fb
 800fa90:	3fe00000 	.word	0x3fe00000
 800fa94:	08012178 	.word	0x08012178
 800fa98:	7fefffff 	.word	0x7fefffff
 800fa9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800faa0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800faa4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800faa8:	4630      	mov	r0, r6
 800faaa:	460f      	mov	r7, r1
 800faac:	f7f1 f864 	bl	8000b78 <__aeabi_d2iz>
 800fab0:	f7f0 fd48 	bl	8000544 <__aeabi_i2d>
 800fab4:	4602      	mov	r2, r0
 800fab6:	460b      	mov	r3, r1
 800fab8:	4630      	mov	r0, r6
 800faba:	4639      	mov	r1, r7
 800fabc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fac0:	f7f0 fbf2 	bl	80002a8 <__aeabi_dsub>
 800fac4:	2200      	movs	r2, #0
 800fac6:	4b1f      	ldr	r3, [pc, #124]	; (800fb44 <__ieee754_rem_pio2+0x3dc>)
 800fac8:	f7f0 fda6 	bl	8000618 <__aeabi_dmul>
 800facc:	460f      	mov	r7, r1
 800face:	4606      	mov	r6, r0
 800fad0:	f7f1 f852 	bl	8000b78 <__aeabi_d2iz>
 800fad4:	f7f0 fd36 	bl	8000544 <__aeabi_i2d>
 800fad8:	4602      	mov	r2, r0
 800fada:	460b      	mov	r3, r1
 800fadc:	4630      	mov	r0, r6
 800fade:	4639      	mov	r1, r7
 800fae0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fae4:	f7f0 fbe0 	bl	80002a8 <__aeabi_dsub>
 800fae8:	2200      	movs	r2, #0
 800faea:	4b16      	ldr	r3, [pc, #88]	; (800fb44 <__ieee754_rem_pio2+0x3dc>)
 800faec:	f7f0 fd94 	bl	8000618 <__aeabi_dmul>
 800faf0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800faf4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800faf8:	f04f 0803 	mov.w	r8, #3
 800fafc:	2600      	movs	r6, #0
 800fafe:	2700      	movs	r7, #0
 800fb00:	4632      	mov	r2, r6
 800fb02:	463b      	mov	r3, r7
 800fb04:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800fb08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800fb0c:	f7f0 ffec 	bl	8000ae8 <__aeabi_dcmpeq>
 800fb10:	b9b0      	cbnz	r0, 800fb40 <__ieee754_rem_pio2+0x3d8>
 800fb12:	4b0d      	ldr	r3, [pc, #52]	; (800fb48 <__ieee754_rem_pio2+0x3e0>)
 800fb14:	9301      	str	r3, [sp, #4]
 800fb16:	2302      	movs	r3, #2
 800fb18:	9300      	str	r3, [sp, #0]
 800fb1a:	462a      	mov	r2, r5
 800fb1c:	4643      	mov	r3, r8
 800fb1e:	4621      	mov	r1, r4
 800fb20:	a806      	add	r0, sp, #24
 800fb22:	f000 f971 	bl	800fe08 <__kernel_rem_pio2>
 800fb26:	9b04      	ldr	r3, [sp, #16]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	4605      	mov	r5, r0
 800fb2c:	f6bf ae58 	bge.w	800f7e0 <__ieee754_rem_pio2+0x78>
 800fb30:	6863      	ldr	r3, [r4, #4]
 800fb32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fb36:	6063      	str	r3, [r4, #4]
 800fb38:	68e3      	ldr	r3, [r4, #12]
 800fb3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fb3e:	e746      	b.n	800f9ce <__ieee754_rem_pio2+0x266>
 800fb40:	46d0      	mov	r8, sl
 800fb42:	e7dd      	b.n	800fb00 <__ieee754_rem_pio2+0x398>
 800fb44:	41700000 	.word	0x41700000
 800fb48:	080121f8 	.word	0x080121f8

0800fb4c <__ieee754_hypotf>:
 800fb4c:	ee10 3a10 	vmov	r3, s0
 800fb50:	ee10 2a90 	vmov	r2, s1
 800fb54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb58:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800fb5c:	4293      	cmp	r3, r2
 800fb5e:	bfbe      	ittt	lt
 800fb60:	4619      	movlt	r1, r3
 800fb62:	4613      	movlt	r3, r2
 800fb64:	460a      	movlt	r2, r1
 800fb66:	1a99      	subs	r1, r3, r2
 800fb68:	f1b1 6f70 	cmp.w	r1, #251658240	; 0xf000000
 800fb6c:	b510      	push	{r4, lr}
 800fb6e:	ee00 3a10 	vmov	s0, r3
 800fb72:	ee06 2a90 	vmov	s13, r2
 800fb76:	dd02      	ble.n	800fb7e <__ieee754_hypotf+0x32>
 800fb78:	ee30 0a26 	vadd.f32	s0, s0, s13
 800fb7c:	bd10      	pop	{r4, pc}
 800fb7e:	f1b3 4fb1 	cmp.w	r3, #1484783616	; 0x58800000
 800fb82:	dd48      	ble.n	800fc16 <__ieee754_hypotf+0xca>
 800fb84:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fb88:	db0c      	blt.n	800fba4 <__ieee754_hypotf+0x58>
 800fb8a:	bf14      	ite	ne
 800fb8c:	ee30 0a26 	vaddne.f32	s0, s0, s13
 800fb90:	ed9f 0a33 	vldreq	s0, [pc, #204]	; 800fc60 <__ieee754_hypotf+0x114>
 800fb94:	eddf 7a32 	vldr	s15, [pc, #200]	; 800fc60 <__ieee754_hypotf+0x114>
 800fb98:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fb9c:	bf08      	it	eq
 800fb9e:	eeb0 0a67 	vmoveq.f32	s0, s15
 800fba2:	e7eb      	b.n	800fb7c <__ieee754_hypotf+0x30>
 800fba4:	f103 435e 	add.w	r3, r3, #3724541952	; 0xde000000
 800fba8:	f102 425e 	add.w	r2, r2, #3724541952	; 0xde000000
 800fbac:	ee00 3a10 	vmov	s0, r3
 800fbb0:	ee06 2a90 	vmov	s13, r2
 800fbb4:	2444      	movs	r4, #68	; 0x44
 800fbb6:	f1b2 5f1a 	cmp.w	r2, #645922816	; 0x26800000
 800fbba:	da0b      	bge.n	800fbd4 <__ieee754_hypotf+0x88>
 800fbbc:	2a00      	cmp	r2, #0
 800fbbe:	d0dd      	beq.n	800fb7c <__ieee754_hypotf+0x30>
 800fbc0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800fbc4:	da29      	bge.n	800fc1a <__ieee754_hypotf+0xce>
 800fbc6:	eddf 7a27 	vldr	s15, [pc, #156]	; 800fc64 <__ieee754_hypotf+0x118>
 800fbca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800fbce:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fbd2:	3c7e      	subs	r4, #126	; 0x7e
 800fbd4:	ee30 6a66 	vsub.f32	s12, s0, s13
 800fbd8:	4923      	ldr	r1, [pc, #140]	; (800fc68 <__ieee754_hypotf+0x11c>)
 800fbda:	eef4 6ac6 	vcmpe.f32	s13, s12
 800fbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe2:	d524      	bpl.n	800fc2e <__ieee754_hypotf+0xe2>
 800fbe4:	400b      	ands	r3, r1
 800fbe6:	ee07 3a90 	vmov	s15, r3
 800fbea:	ee30 7a27 	vadd.f32	s14, s0, s15
 800fbee:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fbf2:	ee20 0a47 	vnmul.f32	s0, s0, s14
 800fbf6:	eea6 0ae6 	vfms.f32	s0, s13, s13
 800fbfa:	ee97 0aa7 	vfnms.f32	s0, s15, s15
 800fbfe:	f000 f835 	bl	800fc6c <__ieee754_sqrtf>
 800fc02:	2c00      	cmp	r4, #0
 800fc04:	d0ba      	beq.n	800fb7c <__ieee754_hypotf+0x30>
 800fc06:	05e4      	lsls	r4, r4, #23
 800fc08:	f104 547e 	add.w	r4, r4, #1065353216	; 0x3f800000
 800fc0c:	ee07 4a90 	vmov	s15, r4
 800fc10:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fc14:	e7b2      	b.n	800fb7c <__ieee754_hypotf+0x30>
 800fc16:	2400      	movs	r4, #0
 800fc18:	e7cd      	b.n	800fbb6 <__ieee754_hypotf+0x6a>
 800fc1a:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 800fc1e:	f102 5208 	add.w	r2, r2, #570425344	; 0x22000000
 800fc22:	3c44      	subs	r4, #68	; 0x44
 800fc24:	ee00 3a10 	vmov	s0, r3
 800fc28:	ee06 2a90 	vmov	s13, r2
 800fc2c:	e7d2      	b.n	800fbd4 <__ieee754_hypotf+0x88>
 800fc2e:	f503 0300 	add.w	r3, r3, #8388608	; 0x800000
 800fc32:	ee05 3a10 	vmov	s10, r3
 800fc36:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800fc3a:	ee90 5a25 	vfnms.f32	s10, s0, s11
 800fc3e:	400a      	ands	r2, r1
 800fc40:	ee07 2a10 	vmov	s14, r2
 800fc44:	ee07 3a90 	vmov	s15, r3
 800fc48:	ee25 0a26 	vmul.f32	s0, s10, s13
 800fc4c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800fc50:	eea7 0aa6 	vfma.f32	s0, s15, s13
 800fc54:	ee96 0a46 	vfnma.f32	s0, s12, s12
 800fc58:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800fc5c:	e7cf      	b.n	800fbfe <__ieee754_hypotf+0xb2>
 800fc5e:	bf00      	nop
 800fc60:	7f800000 	.word	0x7f800000
 800fc64:	7e800000 	.word	0x7e800000
 800fc68:	fffff000 	.word	0xfffff000

0800fc6c <__ieee754_sqrtf>:
 800fc6c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fc70:	4770      	bx	lr
 800fc72:	0000      	movs	r0, r0
 800fc74:	0000      	movs	r0, r0
	...

0800fc78 <__kernel_cos>:
 800fc78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc7c:	ec59 8b10 	vmov	r8, r9, d0
 800fc80:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800fc84:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800fc88:	ed2d 8b02 	vpush	{d8}
 800fc8c:	eeb0 8a41 	vmov.f32	s16, s2
 800fc90:	eef0 8a61 	vmov.f32	s17, s3
 800fc94:	da07      	bge.n	800fca6 <__kernel_cos+0x2e>
 800fc96:	ee10 0a10 	vmov	r0, s0
 800fc9a:	4649      	mov	r1, r9
 800fc9c:	f7f0 ff6c 	bl	8000b78 <__aeabi_d2iz>
 800fca0:	2800      	cmp	r0, #0
 800fca2:	f000 8089 	beq.w	800fdb8 <__kernel_cos+0x140>
 800fca6:	4642      	mov	r2, r8
 800fca8:	464b      	mov	r3, r9
 800fcaa:	4640      	mov	r0, r8
 800fcac:	4649      	mov	r1, r9
 800fcae:	f7f0 fcb3 	bl	8000618 <__aeabi_dmul>
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	4b4e      	ldr	r3, [pc, #312]	; (800fdf0 <__kernel_cos+0x178>)
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	460d      	mov	r5, r1
 800fcba:	f7f0 fcad 	bl	8000618 <__aeabi_dmul>
 800fcbe:	a340      	add	r3, pc, #256	; (adr r3, 800fdc0 <__kernel_cos+0x148>)
 800fcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc4:	4682      	mov	sl, r0
 800fcc6:	468b      	mov	fp, r1
 800fcc8:	4620      	mov	r0, r4
 800fcca:	4629      	mov	r1, r5
 800fccc:	f7f0 fca4 	bl	8000618 <__aeabi_dmul>
 800fcd0:	a33d      	add	r3, pc, #244	; (adr r3, 800fdc8 <__kernel_cos+0x150>)
 800fcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcd6:	f7f0 fae9 	bl	80002ac <__adddf3>
 800fcda:	4622      	mov	r2, r4
 800fcdc:	462b      	mov	r3, r5
 800fcde:	f7f0 fc9b 	bl	8000618 <__aeabi_dmul>
 800fce2:	a33b      	add	r3, pc, #236	; (adr r3, 800fdd0 <__kernel_cos+0x158>)
 800fce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce8:	f7f0 fade 	bl	80002a8 <__aeabi_dsub>
 800fcec:	4622      	mov	r2, r4
 800fcee:	462b      	mov	r3, r5
 800fcf0:	f7f0 fc92 	bl	8000618 <__aeabi_dmul>
 800fcf4:	a338      	add	r3, pc, #224	; (adr r3, 800fdd8 <__kernel_cos+0x160>)
 800fcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcfa:	f7f0 fad7 	bl	80002ac <__adddf3>
 800fcfe:	4622      	mov	r2, r4
 800fd00:	462b      	mov	r3, r5
 800fd02:	f7f0 fc89 	bl	8000618 <__aeabi_dmul>
 800fd06:	a336      	add	r3, pc, #216	; (adr r3, 800fde0 <__kernel_cos+0x168>)
 800fd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd0c:	f7f0 facc 	bl	80002a8 <__aeabi_dsub>
 800fd10:	4622      	mov	r2, r4
 800fd12:	462b      	mov	r3, r5
 800fd14:	f7f0 fc80 	bl	8000618 <__aeabi_dmul>
 800fd18:	a333      	add	r3, pc, #204	; (adr r3, 800fde8 <__kernel_cos+0x170>)
 800fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1e:	f7f0 fac5 	bl	80002ac <__adddf3>
 800fd22:	4622      	mov	r2, r4
 800fd24:	462b      	mov	r3, r5
 800fd26:	f7f0 fc77 	bl	8000618 <__aeabi_dmul>
 800fd2a:	4622      	mov	r2, r4
 800fd2c:	462b      	mov	r3, r5
 800fd2e:	f7f0 fc73 	bl	8000618 <__aeabi_dmul>
 800fd32:	ec53 2b18 	vmov	r2, r3, d8
 800fd36:	4604      	mov	r4, r0
 800fd38:	460d      	mov	r5, r1
 800fd3a:	4640      	mov	r0, r8
 800fd3c:	4649      	mov	r1, r9
 800fd3e:	f7f0 fc6b 	bl	8000618 <__aeabi_dmul>
 800fd42:	460b      	mov	r3, r1
 800fd44:	4602      	mov	r2, r0
 800fd46:	4629      	mov	r1, r5
 800fd48:	4620      	mov	r0, r4
 800fd4a:	f7f0 faad 	bl	80002a8 <__aeabi_dsub>
 800fd4e:	4b29      	ldr	r3, [pc, #164]	; (800fdf4 <__kernel_cos+0x17c>)
 800fd50:	429e      	cmp	r6, r3
 800fd52:	4680      	mov	r8, r0
 800fd54:	4689      	mov	r9, r1
 800fd56:	dc11      	bgt.n	800fd7c <__kernel_cos+0x104>
 800fd58:	4602      	mov	r2, r0
 800fd5a:	460b      	mov	r3, r1
 800fd5c:	4650      	mov	r0, sl
 800fd5e:	4659      	mov	r1, fp
 800fd60:	f7f0 faa2 	bl	80002a8 <__aeabi_dsub>
 800fd64:	460b      	mov	r3, r1
 800fd66:	4924      	ldr	r1, [pc, #144]	; (800fdf8 <__kernel_cos+0x180>)
 800fd68:	4602      	mov	r2, r0
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	f7f0 fa9c 	bl	80002a8 <__aeabi_dsub>
 800fd70:	ecbd 8b02 	vpop	{d8}
 800fd74:	ec41 0b10 	vmov	d0, r0, r1
 800fd78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd7c:	4b1f      	ldr	r3, [pc, #124]	; (800fdfc <__kernel_cos+0x184>)
 800fd7e:	491e      	ldr	r1, [pc, #120]	; (800fdf8 <__kernel_cos+0x180>)
 800fd80:	429e      	cmp	r6, r3
 800fd82:	bfcc      	ite	gt
 800fd84:	4d1e      	ldrgt	r5, [pc, #120]	; (800fe00 <__kernel_cos+0x188>)
 800fd86:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800fd8a:	2400      	movs	r4, #0
 800fd8c:	4622      	mov	r2, r4
 800fd8e:	462b      	mov	r3, r5
 800fd90:	2000      	movs	r0, #0
 800fd92:	f7f0 fa89 	bl	80002a8 <__aeabi_dsub>
 800fd96:	4622      	mov	r2, r4
 800fd98:	4606      	mov	r6, r0
 800fd9a:	460f      	mov	r7, r1
 800fd9c:	462b      	mov	r3, r5
 800fd9e:	4650      	mov	r0, sl
 800fda0:	4659      	mov	r1, fp
 800fda2:	f7f0 fa81 	bl	80002a8 <__aeabi_dsub>
 800fda6:	4642      	mov	r2, r8
 800fda8:	464b      	mov	r3, r9
 800fdaa:	f7f0 fa7d 	bl	80002a8 <__aeabi_dsub>
 800fdae:	4602      	mov	r2, r0
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	4630      	mov	r0, r6
 800fdb4:	4639      	mov	r1, r7
 800fdb6:	e7d9      	b.n	800fd6c <__kernel_cos+0xf4>
 800fdb8:	2000      	movs	r0, #0
 800fdba:	490f      	ldr	r1, [pc, #60]	; (800fdf8 <__kernel_cos+0x180>)
 800fdbc:	e7d8      	b.n	800fd70 <__kernel_cos+0xf8>
 800fdbe:	bf00      	nop
 800fdc0:	be8838d4 	.word	0xbe8838d4
 800fdc4:	bda8fae9 	.word	0xbda8fae9
 800fdc8:	bdb4b1c4 	.word	0xbdb4b1c4
 800fdcc:	3e21ee9e 	.word	0x3e21ee9e
 800fdd0:	809c52ad 	.word	0x809c52ad
 800fdd4:	3e927e4f 	.word	0x3e927e4f
 800fdd8:	19cb1590 	.word	0x19cb1590
 800fddc:	3efa01a0 	.word	0x3efa01a0
 800fde0:	16c15177 	.word	0x16c15177
 800fde4:	3f56c16c 	.word	0x3f56c16c
 800fde8:	5555554c 	.word	0x5555554c
 800fdec:	3fa55555 	.word	0x3fa55555
 800fdf0:	3fe00000 	.word	0x3fe00000
 800fdf4:	3fd33332 	.word	0x3fd33332
 800fdf8:	3ff00000 	.word	0x3ff00000
 800fdfc:	3fe90000 	.word	0x3fe90000
 800fe00:	3fd20000 	.word	0x3fd20000
 800fe04:	00000000 	.word	0x00000000

0800fe08 <__kernel_rem_pio2>:
 800fe08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe0c:	ed2d 8b02 	vpush	{d8}
 800fe10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800fe14:	1ed4      	subs	r4, r2, #3
 800fe16:	9308      	str	r3, [sp, #32]
 800fe18:	9101      	str	r1, [sp, #4]
 800fe1a:	4bc5      	ldr	r3, [pc, #788]	; (8010130 <__kernel_rem_pio2+0x328>)
 800fe1c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fe1e:	9009      	str	r0, [sp, #36]	; 0x24
 800fe20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fe24:	9304      	str	r3, [sp, #16]
 800fe26:	9b08      	ldr	r3, [sp, #32]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	9307      	str	r3, [sp, #28]
 800fe2c:	2318      	movs	r3, #24
 800fe2e:	fb94 f4f3 	sdiv	r4, r4, r3
 800fe32:	f06f 0317 	mvn.w	r3, #23
 800fe36:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800fe3a:	fb04 3303 	mla	r3, r4, r3, r3
 800fe3e:	eb03 0a02 	add.w	sl, r3, r2
 800fe42:	9b04      	ldr	r3, [sp, #16]
 800fe44:	9a07      	ldr	r2, [sp, #28]
 800fe46:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010120 <__kernel_rem_pio2+0x318>
 800fe4a:	eb03 0802 	add.w	r8, r3, r2
 800fe4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fe50:	1aa7      	subs	r7, r4, r2
 800fe52:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fe56:	ae22      	add	r6, sp, #136	; 0x88
 800fe58:	2500      	movs	r5, #0
 800fe5a:	4545      	cmp	r5, r8
 800fe5c:	dd13      	ble.n	800fe86 <__kernel_rem_pio2+0x7e>
 800fe5e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8010120 <__kernel_rem_pio2+0x318>
 800fe62:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800fe66:	2600      	movs	r6, #0
 800fe68:	9b04      	ldr	r3, [sp, #16]
 800fe6a:	429e      	cmp	r6, r3
 800fe6c:	dc32      	bgt.n	800fed4 <__kernel_rem_pio2+0xcc>
 800fe6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe70:	9302      	str	r3, [sp, #8]
 800fe72:	9b08      	ldr	r3, [sp, #32]
 800fe74:	199d      	adds	r5, r3, r6
 800fe76:	ab22      	add	r3, sp, #136	; 0x88
 800fe78:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fe7c:	9306      	str	r3, [sp, #24]
 800fe7e:	ec59 8b18 	vmov	r8, r9, d8
 800fe82:	2700      	movs	r7, #0
 800fe84:	e01f      	b.n	800fec6 <__kernel_rem_pio2+0xbe>
 800fe86:	42ef      	cmn	r7, r5
 800fe88:	d407      	bmi.n	800fe9a <__kernel_rem_pio2+0x92>
 800fe8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fe8e:	f7f0 fb59 	bl	8000544 <__aeabi_i2d>
 800fe92:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fe96:	3501      	adds	r5, #1
 800fe98:	e7df      	b.n	800fe5a <__kernel_rem_pio2+0x52>
 800fe9a:	ec51 0b18 	vmov	r0, r1, d8
 800fe9e:	e7f8      	b.n	800fe92 <__kernel_rem_pio2+0x8a>
 800fea0:	9906      	ldr	r1, [sp, #24]
 800fea2:	9d02      	ldr	r5, [sp, #8]
 800fea4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800fea8:	9106      	str	r1, [sp, #24]
 800feaa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800feae:	9502      	str	r5, [sp, #8]
 800feb0:	f7f0 fbb2 	bl	8000618 <__aeabi_dmul>
 800feb4:	4602      	mov	r2, r0
 800feb6:	460b      	mov	r3, r1
 800feb8:	4640      	mov	r0, r8
 800feba:	4649      	mov	r1, r9
 800febc:	f7f0 f9f6 	bl	80002ac <__adddf3>
 800fec0:	3701      	adds	r7, #1
 800fec2:	4680      	mov	r8, r0
 800fec4:	4689      	mov	r9, r1
 800fec6:	9b07      	ldr	r3, [sp, #28]
 800fec8:	429f      	cmp	r7, r3
 800feca:	dde9      	ble.n	800fea0 <__kernel_rem_pio2+0x98>
 800fecc:	e8eb 8902 	strd	r8, r9, [fp], #8
 800fed0:	3601      	adds	r6, #1
 800fed2:	e7c9      	b.n	800fe68 <__kernel_rem_pio2+0x60>
 800fed4:	9b04      	ldr	r3, [sp, #16]
 800fed6:	aa0e      	add	r2, sp, #56	; 0x38
 800fed8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fedc:	930c      	str	r3, [sp, #48]	; 0x30
 800fede:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fee0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fee4:	9c04      	ldr	r4, [sp, #16]
 800fee6:	930b      	str	r3, [sp, #44]	; 0x2c
 800fee8:	ab9a      	add	r3, sp, #616	; 0x268
 800feea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800feee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fef2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800fef6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800fefa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800fefe:	ab9a      	add	r3, sp, #616	; 0x268
 800ff00:	445b      	add	r3, fp
 800ff02:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800ff06:	2500      	movs	r5, #0
 800ff08:	1b63      	subs	r3, r4, r5
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	dc78      	bgt.n	8010000 <__kernel_rem_pio2+0x1f8>
 800ff0e:	4650      	mov	r0, sl
 800ff10:	ec49 8b10 	vmov	d0, r8, r9
 800ff14:	f000 fc0c 	bl	8010730 <scalbn>
 800ff18:	ec57 6b10 	vmov	r6, r7, d0
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ff22:	ee10 0a10 	vmov	r0, s0
 800ff26:	4639      	mov	r1, r7
 800ff28:	f7f0 fb76 	bl	8000618 <__aeabi_dmul>
 800ff2c:	ec41 0b10 	vmov	d0, r0, r1
 800ff30:	f000 fb76 	bl	8010620 <floor>
 800ff34:	2200      	movs	r2, #0
 800ff36:	ec51 0b10 	vmov	r0, r1, d0
 800ff3a:	4b7e      	ldr	r3, [pc, #504]	; (8010134 <__kernel_rem_pio2+0x32c>)
 800ff3c:	f7f0 fb6c 	bl	8000618 <__aeabi_dmul>
 800ff40:	4602      	mov	r2, r0
 800ff42:	460b      	mov	r3, r1
 800ff44:	4630      	mov	r0, r6
 800ff46:	4639      	mov	r1, r7
 800ff48:	f7f0 f9ae 	bl	80002a8 <__aeabi_dsub>
 800ff4c:	460f      	mov	r7, r1
 800ff4e:	4606      	mov	r6, r0
 800ff50:	f7f0 fe12 	bl	8000b78 <__aeabi_d2iz>
 800ff54:	9006      	str	r0, [sp, #24]
 800ff56:	f7f0 faf5 	bl	8000544 <__aeabi_i2d>
 800ff5a:	4602      	mov	r2, r0
 800ff5c:	460b      	mov	r3, r1
 800ff5e:	4630      	mov	r0, r6
 800ff60:	4639      	mov	r1, r7
 800ff62:	f7f0 f9a1 	bl	80002a8 <__aeabi_dsub>
 800ff66:	f1ba 0f00 	cmp.w	sl, #0
 800ff6a:	4606      	mov	r6, r0
 800ff6c:	460f      	mov	r7, r1
 800ff6e:	dd6c      	ble.n	801004a <__kernel_rem_pio2+0x242>
 800ff70:	1e62      	subs	r2, r4, #1
 800ff72:	ab0e      	add	r3, sp, #56	; 0x38
 800ff74:	f1ca 0118 	rsb	r1, sl, #24
 800ff78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ff7c:	9d06      	ldr	r5, [sp, #24]
 800ff7e:	fa40 f301 	asr.w	r3, r0, r1
 800ff82:	441d      	add	r5, r3
 800ff84:	408b      	lsls	r3, r1
 800ff86:	1ac0      	subs	r0, r0, r3
 800ff88:	ab0e      	add	r3, sp, #56	; 0x38
 800ff8a:	9506      	str	r5, [sp, #24]
 800ff8c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ff90:	f1ca 0317 	rsb	r3, sl, #23
 800ff94:	fa40 f303 	asr.w	r3, r0, r3
 800ff98:	9302      	str	r3, [sp, #8]
 800ff9a:	9b02      	ldr	r3, [sp, #8]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	dd62      	ble.n	8010066 <__kernel_rem_pio2+0x25e>
 800ffa0:	9b06      	ldr	r3, [sp, #24]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	9306      	str	r3, [sp, #24]
 800ffa8:	4615      	mov	r5, r2
 800ffaa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ffae:	4294      	cmp	r4, r2
 800ffb0:	f300 8095 	bgt.w	80100de <__kernel_rem_pio2+0x2d6>
 800ffb4:	f1ba 0f00 	cmp.w	sl, #0
 800ffb8:	dd07      	ble.n	800ffca <__kernel_rem_pio2+0x1c2>
 800ffba:	f1ba 0f01 	cmp.w	sl, #1
 800ffbe:	f000 80a2 	beq.w	8010106 <__kernel_rem_pio2+0x2fe>
 800ffc2:	f1ba 0f02 	cmp.w	sl, #2
 800ffc6:	f000 80c1 	beq.w	801014c <__kernel_rem_pio2+0x344>
 800ffca:	9b02      	ldr	r3, [sp, #8]
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d14a      	bne.n	8010066 <__kernel_rem_pio2+0x25e>
 800ffd0:	4632      	mov	r2, r6
 800ffd2:	463b      	mov	r3, r7
 800ffd4:	2000      	movs	r0, #0
 800ffd6:	4958      	ldr	r1, [pc, #352]	; (8010138 <__kernel_rem_pio2+0x330>)
 800ffd8:	f7f0 f966 	bl	80002a8 <__aeabi_dsub>
 800ffdc:	4606      	mov	r6, r0
 800ffde:	460f      	mov	r7, r1
 800ffe0:	2d00      	cmp	r5, #0
 800ffe2:	d040      	beq.n	8010066 <__kernel_rem_pio2+0x25e>
 800ffe4:	4650      	mov	r0, sl
 800ffe6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010128 <__kernel_rem_pio2+0x320>
 800ffea:	f000 fba1 	bl	8010730 <scalbn>
 800ffee:	4630      	mov	r0, r6
 800fff0:	4639      	mov	r1, r7
 800fff2:	ec53 2b10 	vmov	r2, r3, d0
 800fff6:	f7f0 f957 	bl	80002a8 <__aeabi_dsub>
 800fffa:	4606      	mov	r6, r0
 800fffc:	460f      	mov	r7, r1
 800fffe:	e032      	b.n	8010066 <__kernel_rem_pio2+0x25e>
 8010000:	2200      	movs	r2, #0
 8010002:	4b4e      	ldr	r3, [pc, #312]	; (801013c <__kernel_rem_pio2+0x334>)
 8010004:	4640      	mov	r0, r8
 8010006:	4649      	mov	r1, r9
 8010008:	f7f0 fb06 	bl	8000618 <__aeabi_dmul>
 801000c:	f7f0 fdb4 	bl	8000b78 <__aeabi_d2iz>
 8010010:	f7f0 fa98 	bl	8000544 <__aeabi_i2d>
 8010014:	2200      	movs	r2, #0
 8010016:	4b4a      	ldr	r3, [pc, #296]	; (8010140 <__kernel_rem_pio2+0x338>)
 8010018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801001c:	f7f0 fafc 	bl	8000618 <__aeabi_dmul>
 8010020:	4602      	mov	r2, r0
 8010022:	460b      	mov	r3, r1
 8010024:	4640      	mov	r0, r8
 8010026:	4649      	mov	r1, r9
 8010028:	f7f0 f93e 	bl	80002a8 <__aeabi_dsub>
 801002c:	f7f0 fda4 	bl	8000b78 <__aeabi_d2iz>
 8010030:	ab0e      	add	r3, sp, #56	; 0x38
 8010032:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8010036:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801003a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801003e:	f7f0 f935 	bl	80002ac <__adddf3>
 8010042:	3501      	adds	r5, #1
 8010044:	4680      	mov	r8, r0
 8010046:	4689      	mov	r9, r1
 8010048:	e75e      	b.n	800ff08 <__kernel_rem_pio2+0x100>
 801004a:	d105      	bne.n	8010058 <__kernel_rem_pio2+0x250>
 801004c:	1e63      	subs	r3, r4, #1
 801004e:	aa0e      	add	r2, sp, #56	; 0x38
 8010050:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010054:	15c3      	asrs	r3, r0, #23
 8010056:	e79f      	b.n	800ff98 <__kernel_rem_pio2+0x190>
 8010058:	2200      	movs	r2, #0
 801005a:	4b3a      	ldr	r3, [pc, #232]	; (8010144 <__kernel_rem_pio2+0x33c>)
 801005c:	f7f0 fd62 	bl	8000b24 <__aeabi_dcmpge>
 8010060:	2800      	cmp	r0, #0
 8010062:	d139      	bne.n	80100d8 <__kernel_rem_pio2+0x2d0>
 8010064:	9002      	str	r0, [sp, #8]
 8010066:	2200      	movs	r2, #0
 8010068:	2300      	movs	r3, #0
 801006a:	4630      	mov	r0, r6
 801006c:	4639      	mov	r1, r7
 801006e:	f7f0 fd3b 	bl	8000ae8 <__aeabi_dcmpeq>
 8010072:	2800      	cmp	r0, #0
 8010074:	f000 80c7 	beq.w	8010206 <__kernel_rem_pio2+0x3fe>
 8010078:	1e65      	subs	r5, r4, #1
 801007a:	462b      	mov	r3, r5
 801007c:	2200      	movs	r2, #0
 801007e:	9904      	ldr	r1, [sp, #16]
 8010080:	428b      	cmp	r3, r1
 8010082:	da6a      	bge.n	801015a <__kernel_rem_pio2+0x352>
 8010084:	2a00      	cmp	r2, #0
 8010086:	f000 8088 	beq.w	801019a <__kernel_rem_pio2+0x392>
 801008a:	ab0e      	add	r3, sp, #56	; 0x38
 801008c:	f1aa 0a18 	sub.w	sl, sl, #24
 8010090:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010094:	2b00      	cmp	r3, #0
 8010096:	f000 80b4 	beq.w	8010202 <__kernel_rem_pio2+0x3fa>
 801009a:	4650      	mov	r0, sl
 801009c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8010128 <__kernel_rem_pio2+0x320>
 80100a0:	f000 fb46 	bl	8010730 <scalbn>
 80100a4:	00ec      	lsls	r4, r5, #3
 80100a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80100a8:	191e      	adds	r6, r3, r4
 80100aa:	ec59 8b10 	vmov	r8, r9, d0
 80100ae:	f106 0a08 	add.w	sl, r6, #8
 80100b2:	462f      	mov	r7, r5
 80100b4:	2f00      	cmp	r7, #0
 80100b6:	f280 80df 	bge.w	8010278 <__kernel_rem_pio2+0x470>
 80100ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8010120 <__kernel_rem_pio2+0x318>
 80100be:	f04f 0a00 	mov.w	sl, #0
 80100c2:	eba5 030a 	sub.w	r3, r5, sl
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	f2c0 810a 	blt.w	80102e0 <__kernel_rem_pio2+0x4d8>
 80100cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8010148 <__kernel_rem_pio2+0x340>
 80100d0:	ec59 8b18 	vmov	r8, r9, d8
 80100d4:	2700      	movs	r7, #0
 80100d6:	e0f5      	b.n	80102c4 <__kernel_rem_pio2+0x4bc>
 80100d8:	2302      	movs	r3, #2
 80100da:	9302      	str	r3, [sp, #8]
 80100dc:	e760      	b.n	800ffa0 <__kernel_rem_pio2+0x198>
 80100de:	ab0e      	add	r3, sp, #56	; 0x38
 80100e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e4:	b94d      	cbnz	r5, 80100fa <__kernel_rem_pio2+0x2f2>
 80100e6:	b12b      	cbz	r3, 80100f4 <__kernel_rem_pio2+0x2ec>
 80100e8:	a80e      	add	r0, sp, #56	; 0x38
 80100ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80100ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80100f2:	2301      	movs	r3, #1
 80100f4:	3201      	adds	r2, #1
 80100f6:	461d      	mov	r5, r3
 80100f8:	e759      	b.n	800ffae <__kernel_rem_pio2+0x1a6>
 80100fa:	a80e      	add	r0, sp, #56	; 0x38
 80100fc:	1acb      	subs	r3, r1, r3
 80100fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8010102:	462b      	mov	r3, r5
 8010104:	e7f6      	b.n	80100f4 <__kernel_rem_pio2+0x2ec>
 8010106:	1e62      	subs	r2, r4, #1
 8010108:	ab0e      	add	r3, sp, #56	; 0x38
 801010a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801010e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010112:	a90e      	add	r1, sp, #56	; 0x38
 8010114:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010118:	e757      	b.n	800ffca <__kernel_rem_pio2+0x1c2>
 801011a:	bf00      	nop
 801011c:	f3af 8000 	nop.w
	...
 801012c:	3ff00000 	.word	0x3ff00000
 8010130:	08012340 	.word	0x08012340
 8010134:	40200000 	.word	0x40200000
 8010138:	3ff00000 	.word	0x3ff00000
 801013c:	3e700000 	.word	0x3e700000
 8010140:	41700000 	.word	0x41700000
 8010144:	3fe00000 	.word	0x3fe00000
 8010148:	08012300 	.word	0x08012300
 801014c:	1e62      	subs	r2, r4, #1
 801014e:	ab0e      	add	r3, sp, #56	; 0x38
 8010150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010154:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010158:	e7db      	b.n	8010112 <__kernel_rem_pio2+0x30a>
 801015a:	a90e      	add	r1, sp, #56	; 0x38
 801015c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8010160:	3b01      	subs	r3, #1
 8010162:	430a      	orrs	r2, r1
 8010164:	e78b      	b.n	801007e <__kernel_rem_pio2+0x276>
 8010166:	3301      	adds	r3, #1
 8010168:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801016c:	2900      	cmp	r1, #0
 801016e:	d0fa      	beq.n	8010166 <__kernel_rem_pio2+0x35e>
 8010170:	9a08      	ldr	r2, [sp, #32]
 8010172:	4422      	add	r2, r4
 8010174:	00d2      	lsls	r2, r2, #3
 8010176:	a922      	add	r1, sp, #136	; 0x88
 8010178:	18e3      	adds	r3, r4, r3
 801017a:	9206      	str	r2, [sp, #24]
 801017c:	440a      	add	r2, r1
 801017e:	9302      	str	r3, [sp, #8]
 8010180:	f10b 0108 	add.w	r1, fp, #8
 8010184:	f102 0308 	add.w	r3, r2, #8
 8010188:	1c66      	adds	r6, r4, #1
 801018a:	910a      	str	r1, [sp, #40]	; 0x28
 801018c:	2500      	movs	r5, #0
 801018e:	930d      	str	r3, [sp, #52]	; 0x34
 8010190:	9b02      	ldr	r3, [sp, #8]
 8010192:	42b3      	cmp	r3, r6
 8010194:	da04      	bge.n	80101a0 <__kernel_rem_pio2+0x398>
 8010196:	461c      	mov	r4, r3
 8010198:	e6a6      	b.n	800fee8 <__kernel_rem_pio2+0xe0>
 801019a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801019c:	2301      	movs	r3, #1
 801019e:	e7e3      	b.n	8010168 <__kernel_rem_pio2+0x360>
 80101a0:	9b06      	ldr	r3, [sp, #24]
 80101a2:	18ef      	adds	r7, r5, r3
 80101a4:	ab22      	add	r3, sp, #136	; 0x88
 80101a6:	441f      	add	r7, r3
 80101a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80101aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80101ae:	f7f0 f9c9 	bl	8000544 <__aeabi_i2d>
 80101b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101b4:	461c      	mov	r4, r3
 80101b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101b8:	e9c7 0100 	strd	r0, r1, [r7]
 80101bc:	eb03 0b05 	add.w	fp, r3, r5
 80101c0:	2700      	movs	r7, #0
 80101c2:	f04f 0800 	mov.w	r8, #0
 80101c6:	f04f 0900 	mov.w	r9, #0
 80101ca:	9b07      	ldr	r3, [sp, #28]
 80101cc:	429f      	cmp	r7, r3
 80101ce:	dd08      	ble.n	80101e2 <__kernel_rem_pio2+0x3da>
 80101d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101d2:	aa72      	add	r2, sp, #456	; 0x1c8
 80101d4:	18eb      	adds	r3, r5, r3
 80101d6:	4413      	add	r3, r2
 80101d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80101dc:	3601      	adds	r6, #1
 80101de:	3508      	adds	r5, #8
 80101e0:	e7d6      	b.n	8010190 <__kernel_rem_pio2+0x388>
 80101e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80101e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80101ea:	f7f0 fa15 	bl	8000618 <__aeabi_dmul>
 80101ee:	4602      	mov	r2, r0
 80101f0:	460b      	mov	r3, r1
 80101f2:	4640      	mov	r0, r8
 80101f4:	4649      	mov	r1, r9
 80101f6:	f7f0 f859 	bl	80002ac <__adddf3>
 80101fa:	3701      	adds	r7, #1
 80101fc:	4680      	mov	r8, r0
 80101fe:	4689      	mov	r9, r1
 8010200:	e7e3      	b.n	80101ca <__kernel_rem_pio2+0x3c2>
 8010202:	3d01      	subs	r5, #1
 8010204:	e741      	b.n	801008a <__kernel_rem_pio2+0x282>
 8010206:	f1ca 0000 	rsb	r0, sl, #0
 801020a:	ec47 6b10 	vmov	d0, r6, r7
 801020e:	f000 fa8f 	bl	8010730 <scalbn>
 8010212:	ec57 6b10 	vmov	r6, r7, d0
 8010216:	2200      	movs	r2, #0
 8010218:	4b99      	ldr	r3, [pc, #612]	; (8010480 <__kernel_rem_pio2+0x678>)
 801021a:	ee10 0a10 	vmov	r0, s0
 801021e:	4639      	mov	r1, r7
 8010220:	f7f0 fc80 	bl	8000b24 <__aeabi_dcmpge>
 8010224:	b1f8      	cbz	r0, 8010266 <__kernel_rem_pio2+0x45e>
 8010226:	2200      	movs	r2, #0
 8010228:	4b96      	ldr	r3, [pc, #600]	; (8010484 <__kernel_rem_pio2+0x67c>)
 801022a:	4630      	mov	r0, r6
 801022c:	4639      	mov	r1, r7
 801022e:	f7f0 f9f3 	bl	8000618 <__aeabi_dmul>
 8010232:	f7f0 fca1 	bl	8000b78 <__aeabi_d2iz>
 8010236:	4680      	mov	r8, r0
 8010238:	f7f0 f984 	bl	8000544 <__aeabi_i2d>
 801023c:	2200      	movs	r2, #0
 801023e:	4b90      	ldr	r3, [pc, #576]	; (8010480 <__kernel_rem_pio2+0x678>)
 8010240:	f7f0 f9ea 	bl	8000618 <__aeabi_dmul>
 8010244:	460b      	mov	r3, r1
 8010246:	4602      	mov	r2, r0
 8010248:	4639      	mov	r1, r7
 801024a:	4630      	mov	r0, r6
 801024c:	f7f0 f82c 	bl	80002a8 <__aeabi_dsub>
 8010250:	f7f0 fc92 	bl	8000b78 <__aeabi_d2iz>
 8010254:	1c65      	adds	r5, r4, #1
 8010256:	ab0e      	add	r3, sp, #56	; 0x38
 8010258:	f10a 0a18 	add.w	sl, sl, #24
 801025c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010260:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8010264:	e719      	b.n	801009a <__kernel_rem_pio2+0x292>
 8010266:	4630      	mov	r0, r6
 8010268:	4639      	mov	r1, r7
 801026a:	f7f0 fc85 	bl	8000b78 <__aeabi_d2iz>
 801026e:	ab0e      	add	r3, sp, #56	; 0x38
 8010270:	4625      	mov	r5, r4
 8010272:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010276:	e710      	b.n	801009a <__kernel_rem_pio2+0x292>
 8010278:	ab0e      	add	r3, sp, #56	; 0x38
 801027a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801027e:	f7f0 f961 	bl	8000544 <__aeabi_i2d>
 8010282:	4642      	mov	r2, r8
 8010284:	464b      	mov	r3, r9
 8010286:	f7f0 f9c7 	bl	8000618 <__aeabi_dmul>
 801028a:	2200      	movs	r2, #0
 801028c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8010290:	4b7c      	ldr	r3, [pc, #496]	; (8010484 <__kernel_rem_pio2+0x67c>)
 8010292:	4640      	mov	r0, r8
 8010294:	4649      	mov	r1, r9
 8010296:	f7f0 f9bf 	bl	8000618 <__aeabi_dmul>
 801029a:	3f01      	subs	r7, #1
 801029c:	4680      	mov	r8, r0
 801029e:	4689      	mov	r9, r1
 80102a0:	e708      	b.n	80100b4 <__kernel_rem_pio2+0x2ac>
 80102a2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80102a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102aa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80102ae:	f7f0 f9b3 	bl	8000618 <__aeabi_dmul>
 80102b2:	4602      	mov	r2, r0
 80102b4:	460b      	mov	r3, r1
 80102b6:	4640      	mov	r0, r8
 80102b8:	4649      	mov	r1, r9
 80102ba:	f7ef fff7 	bl	80002ac <__adddf3>
 80102be:	3701      	adds	r7, #1
 80102c0:	4680      	mov	r8, r0
 80102c2:	4689      	mov	r9, r1
 80102c4:	9b04      	ldr	r3, [sp, #16]
 80102c6:	429f      	cmp	r7, r3
 80102c8:	dc01      	bgt.n	80102ce <__kernel_rem_pio2+0x4c6>
 80102ca:	45ba      	cmp	sl, r7
 80102cc:	dae9      	bge.n	80102a2 <__kernel_rem_pio2+0x49a>
 80102ce:	ab4a      	add	r3, sp, #296	; 0x128
 80102d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80102d4:	e9c3 8900 	strd	r8, r9, [r3]
 80102d8:	f10a 0a01 	add.w	sl, sl, #1
 80102dc:	3e08      	subs	r6, #8
 80102de:	e6f0      	b.n	80100c2 <__kernel_rem_pio2+0x2ba>
 80102e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80102e2:	2b03      	cmp	r3, #3
 80102e4:	d85b      	bhi.n	801039e <__kernel_rem_pio2+0x596>
 80102e6:	e8df f003 	tbb	[pc, r3]
 80102ea:	264a      	.short	0x264a
 80102ec:	0226      	.short	0x0226
 80102ee:	ab9a      	add	r3, sp, #616	; 0x268
 80102f0:	441c      	add	r4, r3
 80102f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80102f6:	46a2      	mov	sl, r4
 80102f8:	46ab      	mov	fp, r5
 80102fa:	f1bb 0f00 	cmp.w	fp, #0
 80102fe:	dc6c      	bgt.n	80103da <__kernel_rem_pio2+0x5d2>
 8010300:	46a2      	mov	sl, r4
 8010302:	46ab      	mov	fp, r5
 8010304:	f1bb 0f01 	cmp.w	fp, #1
 8010308:	f300 8086 	bgt.w	8010418 <__kernel_rem_pio2+0x610>
 801030c:	2000      	movs	r0, #0
 801030e:	2100      	movs	r1, #0
 8010310:	2d01      	cmp	r5, #1
 8010312:	f300 80a0 	bgt.w	8010456 <__kernel_rem_pio2+0x64e>
 8010316:	9b02      	ldr	r3, [sp, #8]
 8010318:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801031c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8010320:	2b00      	cmp	r3, #0
 8010322:	f040 809e 	bne.w	8010462 <__kernel_rem_pio2+0x65a>
 8010326:	9b01      	ldr	r3, [sp, #4]
 8010328:	e9c3 7800 	strd	r7, r8, [r3]
 801032c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010330:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010334:	e033      	b.n	801039e <__kernel_rem_pio2+0x596>
 8010336:	3408      	adds	r4, #8
 8010338:	ab4a      	add	r3, sp, #296	; 0x128
 801033a:	441c      	add	r4, r3
 801033c:	462e      	mov	r6, r5
 801033e:	2000      	movs	r0, #0
 8010340:	2100      	movs	r1, #0
 8010342:	2e00      	cmp	r6, #0
 8010344:	da3a      	bge.n	80103bc <__kernel_rem_pio2+0x5b4>
 8010346:	9b02      	ldr	r3, [sp, #8]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d03d      	beq.n	80103c8 <__kernel_rem_pio2+0x5c0>
 801034c:	4602      	mov	r2, r0
 801034e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010352:	9c01      	ldr	r4, [sp, #4]
 8010354:	e9c4 2300 	strd	r2, r3, [r4]
 8010358:	4602      	mov	r2, r0
 801035a:	460b      	mov	r3, r1
 801035c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010360:	f7ef ffa2 	bl	80002a8 <__aeabi_dsub>
 8010364:	ae4c      	add	r6, sp, #304	; 0x130
 8010366:	2401      	movs	r4, #1
 8010368:	42a5      	cmp	r5, r4
 801036a:	da30      	bge.n	80103ce <__kernel_rem_pio2+0x5c6>
 801036c:	9b02      	ldr	r3, [sp, #8]
 801036e:	b113      	cbz	r3, 8010376 <__kernel_rem_pio2+0x56e>
 8010370:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010374:	4619      	mov	r1, r3
 8010376:	9b01      	ldr	r3, [sp, #4]
 8010378:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801037c:	e00f      	b.n	801039e <__kernel_rem_pio2+0x596>
 801037e:	ab9a      	add	r3, sp, #616	; 0x268
 8010380:	441c      	add	r4, r3
 8010382:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8010386:	2000      	movs	r0, #0
 8010388:	2100      	movs	r1, #0
 801038a:	2d00      	cmp	r5, #0
 801038c:	da10      	bge.n	80103b0 <__kernel_rem_pio2+0x5a8>
 801038e:	9b02      	ldr	r3, [sp, #8]
 8010390:	b113      	cbz	r3, 8010398 <__kernel_rem_pio2+0x590>
 8010392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010396:	4619      	mov	r1, r3
 8010398:	9b01      	ldr	r3, [sp, #4]
 801039a:	e9c3 0100 	strd	r0, r1, [r3]
 801039e:	9b06      	ldr	r3, [sp, #24]
 80103a0:	f003 0007 	and.w	r0, r3, #7
 80103a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80103a8:	ecbd 8b02 	vpop	{d8}
 80103ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80103b4:	f7ef ff7a 	bl	80002ac <__adddf3>
 80103b8:	3d01      	subs	r5, #1
 80103ba:	e7e6      	b.n	801038a <__kernel_rem_pio2+0x582>
 80103bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80103c0:	f7ef ff74 	bl	80002ac <__adddf3>
 80103c4:	3e01      	subs	r6, #1
 80103c6:	e7bc      	b.n	8010342 <__kernel_rem_pio2+0x53a>
 80103c8:	4602      	mov	r2, r0
 80103ca:	460b      	mov	r3, r1
 80103cc:	e7c1      	b.n	8010352 <__kernel_rem_pio2+0x54a>
 80103ce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80103d2:	f7ef ff6b 	bl	80002ac <__adddf3>
 80103d6:	3401      	adds	r4, #1
 80103d8:	e7c6      	b.n	8010368 <__kernel_rem_pio2+0x560>
 80103da:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80103de:	ed3a 7b02 	vldmdb	sl!, {d7}
 80103e2:	4640      	mov	r0, r8
 80103e4:	ec53 2b17 	vmov	r2, r3, d7
 80103e8:	4649      	mov	r1, r9
 80103ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80103ee:	f7ef ff5d 	bl	80002ac <__adddf3>
 80103f2:	4602      	mov	r2, r0
 80103f4:	460b      	mov	r3, r1
 80103f6:	4606      	mov	r6, r0
 80103f8:	460f      	mov	r7, r1
 80103fa:	4640      	mov	r0, r8
 80103fc:	4649      	mov	r1, r9
 80103fe:	f7ef ff53 	bl	80002a8 <__aeabi_dsub>
 8010402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010406:	f7ef ff51 	bl	80002ac <__adddf3>
 801040a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801040e:	e9ca 0100 	strd	r0, r1, [sl]
 8010412:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8010416:	e770      	b.n	80102fa <__kernel_rem_pio2+0x4f2>
 8010418:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801041c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8010420:	4630      	mov	r0, r6
 8010422:	ec53 2b17 	vmov	r2, r3, d7
 8010426:	4639      	mov	r1, r7
 8010428:	ed8d 7b04 	vstr	d7, [sp, #16]
 801042c:	f7ef ff3e 	bl	80002ac <__adddf3>
 8010430:	4602      	mov	r2, r0
 8010432:	460b      	mov	r3, r1
 8010434:	4680      	mov	r8, r0
 8010436:	4689      	mov	r9, r1
 8010438:	4630      	mov	r0, r6
 801043a:	4639      	mov	r1, r7
 801043c:	f7ef ff34 	bl	80002a8 <__aeabi_dsub>
 8010440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010444:	f7ef ff32 	bl	80002ac <__adddf3>
 8010448:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801044c:	e9ca 0100 	strd	r0, r1, [sl]
 8010450:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8010454:	e756      	b.n	8010304 <__kernel_rem_pio2+0x4fc>
 8010456:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801045a:	f7ef ff27 	bl	80002ac <__adddf3>
 801045e:	3d01      	subs	r5, #1
 8010460:	e756      	b.n	8010310 <__kernel_rem_pio2+0x508>
 8010462:	9b01      	ldr	r3, [sp, #4]
 8010464:	9a01      	ldr	r2, [sp, #4]
 8010466:	601f      	str	r7, [r3, #0]
 8010468:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801046c:	605c      	str	r4, [r3, #4]
 801046e:	609d      	str	r5, [r3, #8]
 8010470:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8010474:	60d3      	str	r3, [r2, #12]
 8010476:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801047a:	6110      	str	r0, [r2, #16]
 801047c:	6153      	str	r3, [r2, #20]
 801047e:	e78e      	b.n	801039e <__kernel_rem_pio2+0x596>
 8010480:	41700000 	.word	0x41700000
 8010484:	3e700000 	.word	0x3e700000

08010488 <__kernel_sin>:
 8010488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801048c:	ec55 4b10 	vmov	r4, r5, d0
 8010490:	b085      	sub	sp, #20
 8010492:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010496:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801049a:	ed8d 1b00 	vstr	d1, [sp]
 801049e:	9002      	str	r0, [sp, #8]
 80104a0:	da06      	bge.n	80104b0 <__kernel_sin+0x28>
 80104a2:	ee10 0a10 	vmov	r0, s0
 80104a6:	4629      	mov	r1, r5
 80104a8:	f7f0 fb66 	bl	8000b78 <__aeabi_d2iz>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d051      	beq.n	8010554 <__kernel_sin+0xcc>
 80104b0:	4622      	mov	r2, r4
 80104b2:	462b      	mov	r3, r5
 80104b4:	4620      	mov	r0, r4
 80104b6:	4629      	mov	r1, r5
 80104b8:	f7f0 f8ae 	bl	8000618 <__aeabi_dmul>
 80104bc:	4682      	mov	sl, r0
 80104be:	468b      	mov	fp, r1
 80104c0:	4602      	mov	r2, r0
 80104c2:	460b      	mov	r3, r1
 80104c4:	4620      	mov	r0, r4
 80104c6:	4629      	mov	r1, r5
 80104c8:	f7f0 f8a6 	bl	8000618 <__aeabi_dmul>
 80104cc:	a341      	add	r3, pc, #260	; (adr r3, 80105d4 <__kernel_sin+0x14c>)
 80104ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d2:	4680      	mov	r8, r0
 80104d4:	4689      	mov	r9, r1
 80104d6:	4650      	mov	r0, sl
 80104d8:	4659      	mov	r1, fp
 80104da:	f7f0 f89d 	bl	8000618 <__aeabi_dmul>
 80104de:	a33f      	add	r3, pc, #252	; (adr r3, 80105dc <__kernel_sin+0x154>)
 80104e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e4:	f7ef fee0 	bl	80002a8 <__aeabi_dsub>
 80104e8:	4652      	mov	r2, sl
 80104ea:	465b      	mov	r3, fp
 80104ec:	f7f0 f894 	bl	8000618 <__aeabi_dmul>
 80104f0:	a33c      	add	r3, pc, #240	; (adr r3, 80105e4 <__kernel_sin+0x15c>)
 80104f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f6:	f7ef fed9 	bl	80002ac <__adddf3>
 80104fa:	4652      	mov	r2, sl
 80104fc:	465b      	mov	r3, fp
 80104fe:	f7f0 f88b 	bl	8000618 <__aeabi_dmul>
 8010502:	a33a      	add	r3, pc, #232	; (adr r3, 80105ec <__kernel_sin+0x164>)
 8010504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010508:	f7ef fece 	bl	80002a8 <__aeabi_dsub>
 801050c:	4652      	mov	r2, sl
 801050e:	465b      	mov	r3, fp
 8010510:	f7f0 f882 	bl	8000618 <__aeabi_dmul>
 8010514:	a337      	add	r3, pc, #220	; (adr r3, 80105f4 <__kernel_sin+0x16c>)
 8010516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051a:	f7ef fec7 	bl	80002ac <__adddf3>
 801051e:	9b02      	ldr	r3, [sp, #8]
 8010520:	4606      	mov	r6, r0
 8010522:	460f      	mov	r7, r1
 8010524:	b9db      	cbnz	r3, 801055e <__kernel_sin+0xd6>
 8010526:	4602      	mov	r2, r0
 8010528:	460b      	mov	r3, r1
 801052a:	4650      	mov	r0, sl
 801052c:	4659      	mov	r1, fp
 801052e:	f7f0 f873 	bl	8000618 <__aeabi_dmul>
 8010532:	a325      	add	r3, pc, #148	; (adr r3, 80105c8 <__kernel_sin+0x140>)
 8010534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010538:	f7ef feb6 	bl	80002a8 <__aeabi_dsub>
 801053c:	4642      	mov	r2, r8
 801053e:	464b      	mov	r3, r9
 8010540:	f7f0 f86a 	bl	8000618 <__aeabi_dmul>
 8010544:	4602      	mov	r2, r0
 8010546:	460b      	mov	r3, r1
 8010548:	4620      	mov	r0, r4
 801054a:	4629      	mov	r1, r5
 801054c:	f7ef feae 	bl	80002ac <__adddf3>
 8010550:	4604      	mov	r4, r0
 8010552:	460d      	mov	r5, r1
 8010554:	ec45 4b10 	vmov	d0, r4, r5
 8010558:	b005      	add	sp, #20
 801055a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801055e:	2200      	movs	r2, #0
 8010560:	4b1b      	ldr	r3, [pc, #108]	; (80105d0 <__kernel_sin+0x148>)
 8010562:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010566:	f7f0 f857 	bl	8000618 <__aeabi_dmul>
 801056a:	4632      	mov	r2, r6
 801056c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010570:	463b      	mov	r3, r7
 8010572:	4640      	mov	r0, r8
 8010574:	4649      	mov	r1, r9
 8010576:	f7f0 f84f 	bl	8000618 <__aeabi_dmul>
 801057a:	4602      	mov	r2, r0
 801057c:	460b      	mov	r3, r1
 801057e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010582:	f7ef fe91 	bl	80002a8 <__aeabi_dsub>
 8010586:	4652      	mov	r2, sl
 8010588:	465b      	mov	r3, fp
 801058a:	f7f0 f845 	bl	8000618 <__aeabi_dmul>
 801058e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010592:	f7ef fe89 	bl	80002a8 <__aeabi_dsub>
 8010596:	a30c      	add	r3, pc, #48	; (adr r3, 80105c8 <__kernel_sin+0x140>)
 8010598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059c:	4606      	mov	r6, r0
 801059e:	460f      	mov	r7, r1
 80105a0:	4640      	mov	r0, r8
 80105a2:	4649      	mov	r1, r9
 80105a4:	f7f0 f838 	bl	8000618 <__aeabi_dmul>
 80105a8:	4602      	mov	r2, r0
 80105aa:	460b      	mov	r3, r1
 80105ac:	4630      	mov	r0, r6
 80105ae:	4639      	mov	r1, r7
 80105b0:	f7ef fe7c 	bl	80002ac <__adddf3>
 80105b4:	4602      	mov	r2, r0
 80105b6:	460b      	mov	r3, r1
 80105b8:	4620      	mov	r0, r4
 80105ba:	4629      	mov	r1, r5
 80105bc:	f7ef fe74 	bl	80002a8 <__aeabi_dsub>
 80105c0:	e7c6      	b.n	8010550 <__kernel_sin+0xc8>
 80105c2:	bf00      	nop
 80105c4:	f3af 8000 	nop.w
 80105c8:	55555549 	.word	0x55555549
 80105cc:	3fc55555 	.word	0x3fc55555
 80105d0:	3fe00000 	.word	0x3fe00000
 80105d4:	5acfd57c 	.word	0x5acfd57c
 80105d8:	3de5d93a 	.word	0x3de5d93a
 80105dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80105e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80105e4:	57b1fe7d 	.word	0x57b1fe7d
 80105e8:	3ec71de3 	.word	0x3ec71de3
 80105ec:	19c161d5 	.word	0x19c161d5
 80105f0:	3f2a01a0 	.word	0x3f2a01a0
 80105f4:	1110f8a6 	.word	0x1110f8a6
 80105f8:	3f811111 	.word	0x3f811111

080105fc <fabs>:
 80105fc:	ec51 0b10 	vmov	r0, r1, d0
 8010600:	ee10 2a10 	vmov	r2, s0
 8010604:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010608:	ec43 2b10 	vmov	d0, r2, r3
 801060c:	4770      	bx	lr

0801060e <finite>:
 801060e:	ee10 3a90 	vmov	r3, s1
 8010612:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8010616:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801061a:	0fc0      	lsrs	r0, r0, #31
 801061c:	4770      	bx	lr
	...

08010620 <floor>:
 8010620:	ec51 0b10 	vmov	r0, r1, d0
 8010624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010628:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801062c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010630:	2e13      	cmp	r6, #19
 8010632:	460c      	mov	r4, r1
 8010634:	ee10 5a10 	vmov	r5, s0
 8010638:	4680      	mov	r8, r0
 801063a:	dc34      	bgt.n	80106a6 <floor+0x86>
 801063c:	2e00      	cmp	r6, #0
 801063e:	da16      	bge.n	801066e <floor+0x4e>
 8010640:	a335      	add	r3, pc, #212	; (adr r3, 8010718 <floor+0xf8>)
 8010642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010646:	f7ef fe31 	bl	80002ac <__adddf3>
 801064a:	2200      	movs	r2, #0
 801064c:	2300      	movs	r3, #0
 801064e:	f7f0 fa73 	bl	8000b38 <__aeabi_dcmpgt>
 8010652:	b148      	cbz	r0, 8010668 <floor+0x48>
 8010654:	2c00      	cmp	r4, #0
 8010656:	da59      	bge.n	801070c <floor+0xec>
 8010658:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801065c:	4a30      	ldr	r2, [pc, #192]	; (8010720 <floor+0x100>)
 801065e:	432b      	orrs	r3, r5
 8010660:	2500      	movs	r5, #0
 8010662:	42ab      	cmp	r3, r5
 8010664:	bf18      	it	ne
 8010666:	4614      	movne	r4, r2
 8010668:	4621      	mov	r1, r4
 801066a:	4628      	mov	r0, r5
 801066c:	e025      	b.n	80106ba <floor+0x9a>
 801066e:	4f2d      	ldr	r7, [pc, #180]	; (8010724 <floor+0x104>)
 8010670:	4137      	asrs	r7, r6
 8010672:	ea01 0307 	and.w	r3, r1, r7
 8010676:	4303      	orrs	r3, r0
 8010678:	d01f      	beq.n	80106ba <floor+0x9a>
 801067a:	a327      	add	r3, pc, #156	; (adr r3, 8010718 <floor+0xf8>)
 801067c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010680:	f7ef fe14 	bl	80002ac <__adddf3>
 8010684:	2200      	movs	r2, #0
 8010686:	2300      	movs	r3, #0
 8010688:	f7f0 fa56 	bl	8000b38 <__aeabi_dcmpgt>
 801068c:	2800      	cmp	r0, #0
 801068e:	d0eb      	beq.n	8010668 <floor+0x48>
 8010690:	2c00      	cmp	r4, #0
 8010692:	bfbe      	ittt	lt
 8010694:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010698:	fa43 f606 	asrlt.w	r6, r3, r6
 801069c:	19a4      	addlt	r4, r4, r6
 801069e:	ea24 0407 	bic.w	r4, r4, r7
 80106a2:	2500      	movs	r5, #0
 80106a4:	e7e0      	b.n	8010668 <floor+0x48>
 80106a6:	2e33      	cmp	r6, #51	; 0x33
 80106a8:	dd0b      	ble.n	80106c2 <floor+0xa2>
 80106aa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80106ae:	d104      	bne.n	80106ba <floor+0x9a>
 80106b0:	ee10 2a10 	vmov	r2, s0
 80106b4:	460b      	mov	r3, r1
 80106b6:	f7ef fdf9 	bl	80002ac <__adddf3>
 80106ba:	ec41 0b10 	vmov	d0, r0, r1
 80106be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106c2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80106c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80106ca:	fa23 f707 	lsr.w	r7, r3, r7
 80106ce:	4207      	tst	r7, r0
 80106d0:	d0f3      	beq.n	80106ba <floor+0x9a>
 80106d2:	a311      	add	r3, pc, #68	; (adr r3, 8010718 <floor+0xf8>)
 80106d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d8:	f7ef fde8 	bl	80002ac <__adddf3>
 80106dc:	2200      	movs	r2, #0
 80106de:	2300      	movs	r3, #0
 80106e0:	f7f0 fa2a 	bl	8000b38 <__aeabi_dcmpgt>
 80106e4:	2800      	cmp	r0, #0
 80106e6:	d0bf      	beq.n	8010668 <floor+0x48>
 80106e8:	2c00      	cmp	r4, #0
 80106ea:	da02      	bge.n	80106f2 <floor+0xd2>
 80106ec:	2e14      	cmp	r6, #20
 80106ee:	d103      	bne.n	80106f8 <floor+0xd8>
 80106f0:	3401      	adds	r4, #1
 80106f2:	ea25 0507 	bic.w	r5, r5, r7
 80106f6:	e7b7      	b.n	8010668 <floor+0x48>
 80106f8:	2301      	movs	r3, #1
 80106fa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80106fe:	fa03 f606 	lsl.w	r6, r3, r6
 8010702:	4435      	add	r5, r6
 8010704:	4545      	cmp	r5, r8
 8010706:	bf38      	it	cc
 8010708:	18e4      	addcc	r4, r4, r3
 801070a:	e7f2      	b.n	80106f2 <floor+0xd2>
 801070c:	2500      	movs	r5, #0
 801070e:	462c      	mov	r4, r5
 8010710:	e7aa      	b.n	8010668 <floor+0x48>
 8010712:	bf00      	nop
 8010714:	f3af 8000 	nop.w
 8010718:	8800759c 	.word	0x8800759c
 801071c:	7e37e43c 	.word	0x7e37e43c
 8010720:	bff00000 	.word	0xbff00000
 8010724:	000fffff 	.word	0x000fffff

08010728 <matherr>:
 8010728:	2000      	movs	r0, #0
 801072a:	4770      	bx	lr
 801072c:	0000      	movs	r0, r0
	...

08010730 <scalbn>:
 8010730:	b570      	push	{r4, r5, r6, lr}
 8010732:	ec55 4b10 	vmov	r4, r5, d0
 8010736:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801073a:	4606      	mov	r6, r0
 801073c:	462b      	mov	r3, r5
 801073e:	b9aa      	cbnz	r2, 801076c <scalbn+0x3c>
 8010740:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010744:	4323      	orrs	r3, r4
 8010746:	d03b      	beq.n	80107c0 <scalbn+0x90>
 8010748:	4b31      	ldr	r3, [pc, #196]	; (8010810 <scalbn+0xe0>)
 801074a:	4629      	mov	r1, r5
 801074c:	2200      	movs	r2, #0
 801074e:	ee10 0a10 	vmov	r0, s0
 8010752:	f7ef ff61 	bl	8000618 <__aeabi_dmul>
 8010756:	4b2f      	ldr	r3, [pc, #188]	; (8010814 <scalbn+0xe4>)
 8010758:	429e      	cmp	r6, r3
 801075a:	4604      	mov	r4, r0
 801075c:	460d      	mov	r5, r1
 801075e:	da12      	bge.n	8010786 <scalbn+0x56>
 8010760:	a327      	add	r3, pc, #156	; (adr r3, 8010800 <scalbn+0xd0>)
 8010762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010766:	f7ef ff57 	bl	8000618 <__aeabi_dmul>
 801076a:	e009      	b.n	8010780 <scalbn+0x50>
 801076c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010770:	428a      	cmp	r2, r1
 8010772:	d10c      	bne.n	801078e <scalbn+0x5e>
 8010774:	ee10 2a10 	vmov	r2, s0
 8010778:	4620      	mov	r0, r4
 801077a:	4629      	mov	r1, r5
 801077c:	f7ef fd96 	bl	80002ac <__adddf3>
 8010780:	4604      	mov	r4, r0
 8010782:	460d      	mov	r5, r1
 8010784:	e01c      	b.n	80107c0 <scalbn+0x90>
 8010786:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801078a:	460b      	mov	r3, r1
 801078c:	3a36      	subs	r2, #54	; 0x36
 801078e:	4432      	add	r2, r6
 8010790:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010794:	428a      	cmp	r2, r1
 8010796:	dd0b      	ble.n	80107b0 <scalbn+0x80>
 8010798:	ec45 4b11 	vmov	d1, r4, r5
 801079c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010808 <scalbn+0xd8>
 80107a0:	f000 f846 	bl	8010830 <copysign>
 80107a4:	a318      	add	r3, pc, #96	; (adr r3, 8010808 <scalbn+0xd8>)
 80107a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107aa:	ec51 0b10 	vmov	r0, r1, d0
 80107ae:	e7da      	b.n	8010766 <scalbn+0x36>
 80107b0:	2a00      	cmp	r2, #0
 80107b2:	dd08      	ble.n	80107c6 <scalbn+0x96>
 80107b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80107b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80107bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80107c0:	ec45 4b10 	vmov	d0, r4, r5
 80107c4:	bd70      	pop	{r4, r5, r6, pc}
 80107c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80107ca:	da0d      	bge.n	80107e8 <scalbn+0xb8>
 80107cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80107d0:	429e      	cmp	r6, r3
 80107d2:	ec45 4b11 	vmov	d1, r4, r5
 80107d6:	dce1      	bgt.n	801079c <scalbn+0x6c>
 80107d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8010800 <scalbn+0xd0>
 80107dc:	f000 f828 	bl	8010830 <copysign>
 80107e0:	a307      	add	r3, pc, #28	; (adr r3, 8010800 <scalbn+0xd0>)
 80107e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107e6:	e7e0      	b.n	80107aa <scalbn+0x7a>
 80107e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80107ec:	3236      	adds	r2, #54	; 0x36
 80107ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80107f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80107f6:	4620      	mov	r0, r4
 80107f8:	4629      	mov	r1, r5
 80107fa:	2200      	movs	r2, #0
 80107fc:	4b06      	ldr	r3, [pc, #24]	; (8010818 <scalbn+0xe8>)
 80107fe:	e7b2      	b.n	8010766 <scalbn+0x36>
 8010800:	c2f8f359 	.word	0xc2f8f359
 8010804:	01a56e1f 	.word	0x01a56e1f
 8010808:	8800759c 	.word	0x8800759c
 801080c:	7e37e43c 	.word	0x7e37e43c
 8010810:	43500000 	.word	0x43500000
 8010814:	ffff3cb0 	.word	0xffff3cb0
 8010818:	3c900000 	.word	0x3c900000

0801081c <finitef>:
 801081c:	ee10 3a10 	vmov	r3, s0
 8010820:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8010824:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010828:	bfac      	ite	ge
 801082a:	2000      	movge	r0, #0
 801082c:	2001      	movlt	r0, #1
 801082e:	4770      	bx	lr

08010830 <copysign>:
 8010830:	ec51 0b10 	vmov	r0, r1, d0
 8010834:	ee11 0a90 	vmov	r0, s3
 8010838:	ee10 2a10 	vmov	r2, s0
 801083c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010840:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8010844:	ea41 0300 	orr.w	r3, r1, r0
 8010848:	ec43 2b10 	vmov	d0, r2, r3
 801084c:	4770      	bx	lr
	...

08010850 <_init>:
 8010850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010852:	bf00      	nop
 8010854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010856:	bc08      	pop	{r3}
 8010858:	469e      	mov	lr, r3
 801085a:	4770      	bx	lr

0801085c <_fini>:
 801085c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801085e:	bf00      	nop
 8010860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010862:	bc08      	pop	{r3}
 8010864:	469e      	mov	lr, r3
 8010866:	4770      	bx	lr
