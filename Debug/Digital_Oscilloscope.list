
Digital_Oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbd4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a20  0800dd88  0800dd88  0001dd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7a8  0800f7a8  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7a8  0800f7a8  0001f7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7b0  0800f7b0  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7b0  0800f7b0  0001f7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7b4  0800f7b4  0001f7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800f7b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b64  200001fc  0800f9b4  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d60  0800f9b4  00020d60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000242aa  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005405  00000000  00000000  000444d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c08  00000000  00000000  000498e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001950  00000000  00000000  0004b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ae0d  00000000  00000000  0004ce38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c951  00000000  00000000  00077c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec83c  00000000  00000000  00094596  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00180dd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008198  00000000  00000000  00180e50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dd6c 	.word	0x0800dd6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000200 	.word	0x20000200
 80001ec:	0800dd6c 	.word	0x0800dd6c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <MX_ADC3_Init+0x98>)
 8000fbc:	4a21      	ldr	r2, [pc, #132]	; (8001044 <MX_ADC3_Init+0x9c>)
 8000fbe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_ADC3_Init+0x98>)
 8000fc2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fc6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc8:	4b1d      	ldr	r3, [pc, #116]	; (8001040 <MX_ADC3_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_ADC3_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_ADC3_Init+0x98>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000fda:	4b19      	ldr	r3, [pc, #100]	; (8001040 <MX_ADC3_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_ADC3_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_ADC3_Init+0x98>)
 8000fea:	4a17      	ldr	r2, [pc, #92]	; (8001048 <MX_ADC3_Init+0xa0>)
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <MX_ADC3_Init+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <MX_ADC3_Init+0x98>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_ADC3_Init+0x98>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <MX_ADC3_Init+0x98>)
 8001004:	2201      	movs	r2, #1
 8001006:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_ADC3_Init+0x98>)
 800100a:	f001 feef 	bl	8002dec <HAL_ADC_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001014:	f001 fbde 	bl	80027d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001018:	2304      	movs	r3, #4
 800101a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001020:	2307      	movs	r3, #7
 8001022:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_ADC3_Init+0x98>)
 800102a:	f001 ff23 	bl	8002e74 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001034:	f001 fbce 	bl	80027d4 <Error_Handler>
  }

}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200005e8 	.word	0x200005e8
 8001044:	40012200 	.word	0x40012200
 8001048:	0f000001 	.word	0x0f000001

0800104c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a2f      	ldr	r2, [pc, #188]	; (8001128 <HAL_ADC_MspInit+0xdc>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d158      	bne.n	8001120 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a2d      	ldr	r2, [pc, #180]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b27      	ldr	r3, [pc, #156]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a26      	ldr	r2, [pc, #152]	; (800112c <HAL_ADC_MspInit+0xe0>)
 8001094:	f043 0320 	orr.w	r3, r3, #32
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b24      	ldr	r3, [pc, #144]	; (800112c <HAL_ADC_MspInit+0xe0>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF6     ------> ADC3_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a6:	2340      	movs	r3, #64	; 0x40
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010aa:	2303      	movs	r3, #3
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	481d      	ldr	r0, [pc, #116]	; (8001130 <HAL_ADC_MspInit+0xe4>)
 80010ba:	f003 fb0b 	bl	80046d4 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <HAL_ADC_MspInit+0xec>)
 80010c2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010ca:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010de:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ee:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80010f0:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010fe:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 8001106:	f002 fc59 	bl	80039bc <HAL_DMA_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001110:	f001 fb60 	bl	80027d4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a07      	ldr	r2, [pc, #28]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 8001118:	639a      	str	r2, [r3, #56]	; 0x38
 800111a:	4a06      	ldr	r2, [pc, #24]	; (8001134 <HAL_ADC_MspInit+0xe8>)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001120:	bf00      	nop
 8001122:	3728      	adds	r7, #40	; 0x28
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40012200 	.word	0x40012200
 800112c:	40023800 	.word	0x40023800
 8001130:	40021400 	.word	0x40021400
 8001134:	20000588 	.word	0x20000588
 8001138:	40026410 	.word	0x40026410

0800113c <generate>:
float amplitude_check;
long int frequency_check;
_Bool gen_check;
_Bool sinewave_check;

void generate () {
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af02      	add	r7, sp, #8
   if (amplitude_check != amplitude || frequency_check != frequency || gen_check != gen || sinewave_check != sinewave) {
 8001142:	4b31      	ldr	r3, [pc, #196]	; (8001208 <generate+0xcc>)
 8001144:	ed93 7a00 	vldr	s14, [r3]
 8001148:	4b30      	ldr	r3, [pc, #192]	; (800120c <generate+0xd0>)
 800114a:	edd3 7a00 	vldr	s15, [r3]
 800114e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001156:	d111      	bne.n	800117c <generate+0x40>
 8001158:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <generate+0xd4>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <generate+0xd8>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	429a      	cmp	r2, r3
 8001162:	d10b      	bne.n	800117c <generate+0x40>
 8001164:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <generate+0xdc>)
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	4b2c      	ldr	r3, [pc, #176]	; (800121c <generate+0xe0>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d105      	bne.n	800117c <generate+0x40>
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <generate+0xe4>)
 8001172:	781a      	ldrb	r2, [r3, #0]
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <generate+0xe8>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d041      	beq.n	8001200 <generate+0xc4>
	  if (gen) {
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <generate+0xe0>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d027      	beq.n	80011d4 <generate+0x98>
		  if (sinewave) {
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <generate+0xe8>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d011      	beq.n	80011b0 <generate+0x74>
			  racunaj_sinus();
 800118c:	f000 f94c 	bl	8001428 <racunaj_sinus>
			  MX_TIM6_Freq_Init();
 8001190:	f000 f8f8 	bl	8001384 <MX_TIM6_Freq_Init>
			  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, signal, SAMPLES,DAC_ALIGN_12B_R);
 8001194:	2300      	movs	r3, #0
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2364      	movs	r3, #100	; 0x64
 800119a:	4a23      	ldr	r2, [pc, #140]	; (8001228 <generate+0xec>)
 800119c:	2110      	movs	r1, #16
 800119e:	4823      	ldr	r0, [pc, #140]	; (800122c <generate+0xf0>)
 80011a0:	f002 f9ca 	bl	8003538 <HAL_DAC_Start_DMA>
			  SetSineOutput(frequency);
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <generate+0xd8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 ffed 	bl	8002188 <SetSineOutput>
 80011ae:	e017      	b.n	80011e0 <generate+0xa4>
		  } else {
			  racunaj_pravokutni();
 80011b0:	f000 f9b6 	bl	8001520 <racunaj_pravokutni>
			  MX_TIM6_Freq_Init();
 80011b4:	f000 f8e6 	bl	8001384 <MX_TIM6_Freq_Init>
			  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, signal, SAMPLES,DAC_ALIGN_12B_R);
 80011b8:	2300      	movs	r3, #0
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2364      	movs	r3, #100	; 0x64
 80011be:	4a1a      	ldr	r2, [pc, #104]	; (8001228 <generate+0xec>)
 80011c0:	2110      	movs	r1, #16
 80011c2:	481a      	ldr	r0, [pc, #104]	; (800122c <generate+0xf0>)
 80011c4:	f002 f9b8 	bl	8003538 <HAL_DAC_Start_DMA>
			  SetSquareOutput(frequency);
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <generate+0xd8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 feaf 	bl	8001f30 <SetSquareOutput>
 80011d2:	e005      	b.n	80011e0 <generate+0xa4>
		  }
	  } else {
		  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_2);
 80011d4:	2110      	movs	r1, #16
 80011d6:	4815      	ldr	r0, [pc, #84]	; (800122c <generate+0xf0>)
 80011d8:	f002 fa5c 	bl	8003694 <HAL_DAC_Stop_DMA>
		  LCDFunctionGeneratorOFF();
 80011dc:	f000 fdbc 	bl	8001d58 <LCDFunctionGeneratorOFF>
	  }
	  amplitude_check = amplitude;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <generate+0xd0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a08      	ldr	r2, [pc, #32]	; (8001208 <generate+0xcc>)
 80011e6:	6013      	str	r3, [r2, #0]
	  frequency_check = frequency;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <generate+0xd8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a08      	ldr	r2, [pc, #32]	; (8001210 <generate+0xd4>)
 80011ee:	6013      	str	r3, [r2, #0]
	  gen_check = gen;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <generate+0xe0>)
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <generate+0xdc>)
 80011f6:	701a      	strb	r2, [r3, #0]
	  sinewave_check = sinewave;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <generate+0xe8>)
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <generate+0xe4>)
 80011fe:	701a      	strb	r2, [r3, #0]
   }
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200009bc 	.word	0x200009bc
 800120c:	20000004 	.word	0x20000004
 8001210:	20000bc4 	.word	0x20000bc4
 8001214:	20000008 	.word	0x20000008
 8001218:	200009b8 	.word	0x200009b8
 800121c:	20000000 	.word	0x20000000
 8001220:	200009b9 	.word	0x200009b9
 8001224:	20000001 	.word	0x20000001
 8001228:	200009c0 	.word	0x200009c0
 800122c:	20000b50 	.word	0x20000b50

08001230 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001236:	463b      	mov	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_DAC_Init+0x4c>)
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <MX_DAC_Init+0x50>)
 8001242:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001244:	480d      	ldr	r0, [pc, #52]	; (800127c <MX_DAC_Init+0x4c>)
 8001246:	f002 f954 	bl	80034f2 <HAL_DAC_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001250:	f001 fac0 	bl	80027d4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001254:	2304      	movs	r3, #4
 8001256:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001258:	2300      	movs	r3, #0
 800125a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	2210      	movs	r2, #16
 8001260:	4619      	mov	r1, r3
 8001262:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_DAC_Init+0x4c>)
 8001264:	f002 fac9 	bl	80037fa <HAL_DAC_ConfigChannel>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800126e:	f001 fab1 	bl	80027d4 <Error_Handler>
  }

}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000b50 	.word	0x20000b50
 8001280:	40007400 	.word	0x40007400

08001284 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a33      	ldr	r2, [pc, #204]	; (8001370 <HAL_DAC_MspInit+0xec>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d160      	bne.n	8001368 <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	4b32      	ldr	r3, [pc, #200]	; (8001374 <HAL_DAC_MspInit+0xf0>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	4a31      	ldr	r2, [pc, #196]	; (8001374 <HAL_DAC_MspInit+0xf0>)
 80012b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012b4:	6413      	str	r3, [r2, #64]	; 0x40
 80012b6:	4b2f      	ldr	r3, [pc, #188]	; (8001374 <HAL_DAC_MspInit+0xf0>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <HAL_DAC_MspInit+0xf0>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a2a      	ldr	r2, [pc, #168]	; (8001374 <HAL_DAC_MspInit+0xf0>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b28      	ldr	r3, [pc, #160]	; (8001374 <HAL_DAC_MspInit+0xf0>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012de:	2320      	movs	r3, #32
 80012e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e2:	2303      	movs	r3, #3
 80012e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	4619      	mov	r1, r3
 80012f0:	4821      	ldr	r0, [pc, #132]	; (8001378 <HAL_DAC_MspInit+0xf4>)
 80012f2:	f003 f9ef 	bl	80046d4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <HAL_DAC_MspInit+0xf8>)
 80012f8:	4a21      	ldr	r2, [pc, #132]	; (8001380 <HAL_DAC_MspInit+0xfc>)
 80012fa:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <HAL_DAC_MspInit+0xf8>)
 80012fe:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001302:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_DAC_MspInit+0xf8>)
 8001306:	2240      	movs	r2, #64	; 0x40
 8001308:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <HAL_DAC_MspInit+0xf8>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <HAL_DAC_MspInit+0xf8>)
 8001312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001316:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001318:	4b18      	ldr	r3, [pc, #96]	; (800137c <HAL_DAC_MspInit+0xf8>)
 800131a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800131e:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001320:	4b16      	ldr	r3, [pc, #88]	; (800137c <HAL_DAC_MspInit+0xf8>)
 8001322:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001326:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_DAC_MspInit+0xf8>)
 800132a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132e:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_DAC_MspInit+0xf8>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_DAC_MspInit+0xf8>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800133c:	480f      	ldr	r0, [pc, #60]	; (800137c <HAL_DAC_MspInit+0xf8>)
 800133e:	f002 fb3d 	bl	80039bc <HAL_DMA_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001348:	f001 fa44 	bl	80027d4 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a0b      	ldr	r2, [pc, #44]	; (800137c <HAL_DAC_MspInit+0xf8>)
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <HAL_DAC_MspInit+0xf8>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	2036      	movs	r0, #54	; 0x36
 800135e:	f002 f892 	bl	8003486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001362:	2036      	movs	r0, #54	; 0x36
 8001364:	f002 f8ab 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001368:	bf00      	nop
 800136a:	3728      	adds	r7, #40	; 0x28
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40007400 	.word	0x40007400
 8001374:	40023800 	.word	0x40023800
 8001378:	40020000 	.word	0x40020000
 800137c:	20000b64 	.word	0x20000b64
 8001380:	400260a0 	.word	0x400260a0

08001384 <MX_TIM6_Freq_Init>:
  }
}

/* USER CODE BEGIN 1 */
void MX_TIM6_Freq_Init()
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <MX_TIM6_Freq_Init+0x90>)
 8001394:	4a20      	ldr	r2, [pc, #128]	; (8001418 <MX_TIM6_Freq_Init+0x94>)
 8001396:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_TIM6_Freq_Init+0x90>)
 800139a:	2259      	movs	r2, #89	; 0x59
 800139c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <MX_TIM6_Freq_Init+0x90>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = (10000/frequency) - 1;
 80013a4:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_TIM6_Freq_Init+0x98>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80013ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80013b0:	3b01      	subs	r3, #1
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_TIM6_Freq_Init+0x90>)
 80013b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_TIM6_Freq_Init+0x90>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]

  if (frequency > 1000) {
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <MX_TIM6_Freq_Init+0x98>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013c6:	dd0b      	ble.n	80013e0 <MX_TIM6_Freq_Init+0x5c>
	  htim6.Init.Prescaler = (90000/frequency) - 1;
 80013c8:	4b14      	ldr	r3, [pc, #80]	; (800141c <MX_TIM6_Freq_Init+0x98>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <MX_TIM6_Freq_Init+0x9c>)
 80013ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80013d2:	3b01      	subs	r3, #1
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b0f      	ldr	r3, [pc, #60]	; (8001414 <MX_TIM6_Freq_Init+0x90>)
 80013d8:	605a      	str	r2, [r3, #4]
	  htim6.Init.Period = 10-1;
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <MX_TIM6_Freq_Init+0x90>)
 80013dc:	2209      	movs	r2, #9
 80013de:	60da      	str	r2, [r3, #12]
  }
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <MX_TIM6_Freq_Init+0x90>)
 80013e2:	f004 fe88 	bl	80060f6 <HAL_TIM_Base_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM6_Freq_Init+0x6c>
  {
    Error_Handler();
 80013ec:	f001 f9f2 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013f0:	2320      	movs	r3, #32
 80013f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013f8:	463b      	mov	r3, r7
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <MX_TIM6_Freq_Init+0x90>)
 80013fe:	f005 f8a3 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM6_Freq_Init+0x88>
  {
    Error_Handler();
 8001408:	f001 f9e4 	bl	80027d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000c98 	.word	0x20000c98
 8001418:	40001000 	.word	0x40001000
 800141c:	20000008 	.word	0x20000008
 8001420:	00015f90 	.word	0x00015f90
 8001424:	00000000 	.word	0x00000000

08001428 <racunaj_sinus>:

void racunaj_sinus()
{
 8001428:	b5b0      	push	{r4, r5, r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	e058      	b.n	80014e6 <racunaj_sinus+0xbe>
	{
		signal[i] = (amplitude/U_REF)*(sin(i*2*PI/SAMPLES) + 1) * (0xFFF)/2;
 8001434:	4b36      	ldr	r3, [pc, #216]	; (8001510 <racunaj_sinus+0xe8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f895 	bl	8000568 <__aeabi_f2d>
 800143e:	a32e      	add	r3, pc, #184	; (adr r3, 80014f8 <racunaj_sinus+0xd0>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7ff fa12 	bl	800086c <__aeabi_ddiv>
 8001448:	4603      	mov	r3, r0
 800144a:	460c      	mov	r4, r1
 800144c:	4625      	mov	r5, r4
 800144e:	461c      	mov	r4, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f875 	bl	8000544 <__aeabi_i2d>
 800145a:	a329      	add	r3, pc, #164	; (adr r3, 8001500 <racunaj_sinus+0xd8>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f8da 	bl	8000618 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b28      	ldr	r3, [pc, #160]	; (8001514 <racunaj_sinus+0xec>)
 8001472:	f7ff f9fb 	bl	800086c <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	ec43 2b17 	vmov	d7, r2, r3
 800147e:	eeb0 0a47 	vmov.f32	s0, s14
 8001482:	eef0 0a67 	vmov.f32	s1, s15
 8001486:	f00b fc5f 	bl	800cd48 <sin>
 800148a:	ec51 0b10 	vmov	r0, r1, d0
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <racunaj_sinus+0xf0>)
 8001494:	f7fe ff0a 	bl	80002ac <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4620      	mov	r0, r4
 800149e:	4629      	mov	r1, r5
 80014a0:	f7ff f8ba 	bl	8000618 <__aeabi_dmul>
 80014a4:	4603      	mov	r3, r0
 80014a6:	460c      	mov	r4, r1
 80014a8:	4618      	mov	r0, r3
 80014aa:	4621      	mov	r1, r4
 80014ac:	a316      	add	r3, pc, #88	; (adr r3, 8001508 <racunaj_sinus+0xe0>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7ff f8b1 	bl	8000618 <__aeabi_dmul>
 80014b6:	4603      	mov	r3, r0
 80014b8:	460c      	mov	r4, r1
 80014ba:	4618      	mov	r0, r3
 80014bc:	4621      	mov	r1, r4
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c6:	f7ff f9d1 	bl	800086c <__aeabi_ddiv>
 80014ca:	4603      	mov	r3, r0
 80014cc:	460c      	mov	r4, r1
 80014ce:	4618      	mov	r0, r3
 80014d0:	4621      	mov	r1, r4
 80014d2:	f7ff fb79 	bl	8000bc8 <__aeabi_d2uiz>
 80014d6:	4601      	mov	r1, r0
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <racunaj_sinus+0xf4>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SAMPLES; i++)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3301      	adds	r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b63      	cmp	r3, #99	; 0x63
 80014ea:	dda3      	ble.n	8001434 <racunaj_sinus+0xc>
	}
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bdb0      	pop	{r4, r5, r7, pc}
 80014f4:	f3af 8000 	nop.w
 80014f8:	851eb852 	.word	0x851eb852
 80014fc:	400851eb 	.word	0x400851eb
 8001500:	54442eea 	.word	0x54442eea
 8001504:	400921fb 	.word	0x400921fb
 8001508:	00000000 	.word	0x00000000
 800150c:	40affe00 	.word	0x40affe00
 8001510:	20000004 	.word	0x20000004
 8001514:	40590000 	.word	0x40590000
 8001518:	3ff00000 	.word	0x3ff00000
 800151c:	200009c0 	.word	0x200009c0

08001520 <racunaj_pravokutni>:

void racunaj_pravokutni()
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
	for (int i = 0; i < SAMPLES; i++)
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	e026      	b.n	800157a <racunaj_pravokutni+0x5a>
	{
		if (i < SAMPLES/2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b31      	cmp	r3, #49	; 0x31
 8001530:	dc1b      	bgt.n	800156a <racunaj_pravokutni+0x4a>
		{
			signal[i] = amplitude*0xFFF/U_REF;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <racunaj_pravokutni+0x70>)
 8001534:	edd3 7a00 	vldr	s15, [r3]
 8001538:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001594 <racunaj_pravokutni+0x74>
 800153c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001540:	ee17 0a90 	vmov	r0, s15
 8001544:	f7ff f810 	bl	8000568 <__aeabi_f2d>
 8001548:	a30f      	add	r3, pc, #60	; (adr r3, 8001588 <racunaj_pravokutni+0x68>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f7ff f98d 	bl	800086c <__aeabi_ddiv>
 8001552:	4603      	mov	r3, r0
 8001554:	460c      	mov	r4, r1
 8001556:	4618      	mov	r0, r3
 8001558:	4621      	mov	r1, r4
 800155a:	f7ff fb35 	bl	8000bc8 <__aeabi_d2uiz>
 800155e:	4601      	mov	r1, r0
 8001560:	4a0d      	ldr	r2, [pc, #52]	; (8001598 <racunaj_pravokutni+0x78>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001568:	e004      	b.n	8001574 <racunaj_pravokutni+0x54>
		} else
		{
			signal[i] = 0;
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <racunaj_pravokutni+0x78>)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2100      	movs	r1, #0
 8001570:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < SAMPLES; i++)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3301      	adds	r3, #1
 8001578:	607b      	str	r3, [r7, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b63      	cmp	r3, #99	; 0x63
 800157e:	ddd5      	ble.n	800152c <racunaj_pravokutni+0xc>
		}
	}
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}
 8001588:	851eb852 	.word	0x851eb852
 800158c:	400851eb 	.word	0x400851eb
 8001590:	20000004 	.word	0x20000004
 8001594:	457ff000 	.word	0x457ff000
 8001598:	200009c0 	.word	0x200009c0

0800159c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <MX_DMA_Init+0x68>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a16      	ldr	r2, [pc, #88]	; (8001604 <MX_DMA_Init+0x68>)
 80015ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_DMA_Init+0x68>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_DMA_Init+0x68>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <MX_DMA_Init+0x68>)
 80015c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <MX_DMA_Init+0x68>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	2011      	movs	r0, #17
 80015e0:	f001 ff51 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015e4:	2011      	movs	r0, #17
 80015e6:	f001 ff6a 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2100      	movs	r1, #0
 80015ee:	2038      	movs	r0, #56	; 0x38
 80015f0:	f001 ff49 	bl	8003486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015f4:	2038      	movs	r0, #56	; 0x38
 80015f6:	f001 ff62 	bl	80034be <HAL_NVIC_EnableIRQ>

}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_DMA2D_Init+0x5c>)
 800160e:	4a16      	ldr	r2, [pc, #88]	; (8001668 <MX_DMA2D_Init+0x60>)
 8001610:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_DMA2D_Init+0x5c>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_DMA2D_Init+0x5c>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_DMA2D_Init+0x5c>)
 8001620:	2200      	movs	r2, #0
 8001622:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_DMA2D_Init+0x5c>)
 8001626:	2200      	movs	r2, #0
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <MX_DMA2D_Init+0x5c>)
 800162c:	2200      	movs	r2, #0
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <MX_DMA2D_Init+0x5c>)
 8001632:	2200      	movs	r2, #0
 8001634:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <MX_DMA2D_Init+0x5c>)
 8001638:	2200      	movs	r2, #0
 800163a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800163c:	4809      	ldr	r0, [pc, #36]	; (8001664 <MX_DMA2D_Init+0x5c>)
 800163e:	f002 fdbd 	bl	80041bc <HAL_DMA2D_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001648:	f001 f8c4 	bl	80027d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800164c:	2101      	movs	r1, #1
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_DMA2D_Init+0x5c>)
 8001650:	f002 ff12 	bl	8004478 <HAL_DMA2D_ConfigLayer>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800165a:	f001 f8bb 	bl	80027d4 <Error_Handler>
  }

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000bc8 	.word	0x20000bc8
 8001668:	4002b000 	.word	0x4002b000

0800166c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a0b      	ldr	r2, [pc, #44]	; (80016a8 <HAL_DMA2D_MspInit+0x3c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d10d      	bne.n	800169a <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_DMA2D_MspInit+0x40>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a09      	ldr	r2, [pc, #36]	; (80016ac <HAL_DMA2D_MspInit+0x40>)
 8001688:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b07      	ldr	r3, [pc, #28]	; (80016ac <HAL_DMA2D_MspInit+0x40>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	4002b000 	.word	0x4002b000
 80016ac:	40023800 	.word	0x40023800

080016b0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
 80016c4:	615a      	str	r2, [r3, #20]
 80016c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <MX_FMC_Init+0x94>)
 80016ca:	4a1f      	ldr	r2, [pc, #124]	; (8001748 <MX_FMC_Init+0x98>)
 80016cc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_FMC_Init+0x94>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_FMC_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80016da:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_FMC_Init+0x94>)
 80016dc:	2204      	movs	r2, #4
 80016de:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_FMC_Init+0x94>)
 80016e2:	2210      	movs	r2, #16
 80016e4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_FMC_Init+0x94>)
 80016e8:	2240      	movs	r2, #64	; 0x40
 80016ea:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_FMC_Init+0x94>)
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_FMC_Init+0x94>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_FMC_Init+0x94>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_FMC_Init+0x94>)
 8001700:	2200      	movs	r2, #0
 8001702:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_FMC_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800170a:	2310      	movs	r3, #16
 800170c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800170e:	2310      	movs	r3, #16
 8001710:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8001712:	2310      	movs	r3, #16
 8001714:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8001716:	2310      	movs	r3, #16
 8001718:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800171a:	2310      	movs	r3, #16
 800171c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800171e:	2310      	movs	r3, #16
 8001720:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8001722:	2310      	movs	r3, #16
 8001724:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4806      	ldr	r0, [pc, #24]	; (8001744 <MX_FMC_Init+0x94>)
 800172c:	f004 fc00 	bl	8005f30 <HAL_SDRAM_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8001736:	f001 f84d 	bl	80027d4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800173a:	bf00      	nop
 800173c:	3720      	adds	r7, #32
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000c08 	.word	0x20000c08
 8001748:	a0000140 	.word	0xa0000140

0800174c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001760:	4b34      	ldr	r3, [pc, #208]	; (8001834 <HAL_FMC_MspInit+0xe8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d160      	bne.n	800182a <HAL_FMC_MspInit+0xde>
    return;
  }
  FMC_Initialized = 1;
 8001768:	4b32      	ldr	r3, [pc, #200]	; (8001834 <HAL_FMC_MspInit+0xe8>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	4b31      	ldr	r3, [pc, #196]	; (8001838 <HAL_FMC_MspInit+0xec>)
 8001774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001776:	4a30      	ldr	r2, [pc, #192]	; (8001838 <HAL_FMC_MspInit+0xec>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6393      	str	r3, [r2, #56]	; 0x38
 800177e:	4b2e      	ldr	r3, [pc, #184]	; (8001838 <HAL_FMC_MspInit+0xec>)
 8001780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]
  PD0   ------> FMC_D2
  PD1   ------> FMC_D3
  PG15   ------> FMC_SDNCAS
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800178a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800178e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800179c:	230c      	movs	r3, #12
 800179e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4825      	ldr	r0, [pc, #148]	; (800183c <HAL_FMC_MspInit+0xf0>)
 80017a6:	f002 ff95 	bl	80046d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80017aa:	230d      	movs	r3, #13
 80017ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017ba:	230c      	movs	r3, #12
 80017bc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	481f      	ldr	r0, [pc, #124]	; (8001840 <HAL_FMC_MspInit+0xf4>)
 80017c4:	f002 ff86 	bl	80046d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80017c8:	f248 1333 	movw	r3, #33075	; 0x8133
 80017cc:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017da:	230c      	movs	r3, #12
 80017dc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	4818      	ldr	r0, [pc, #96]	; (8001844 <HAL_FMC_MspInit+0xf8>)
 80017e4:	f002 ff76 	bl	80046d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80017e8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80017ec:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017fa:	230c      	movs	r3, #12
 80017fc:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017fe:	1d3b      	adds	r3, r7, #4
 8001800:	4619      	mov	r1, r3
 8001802:	4811      	ldr	r0, [pc, #68]	; (8001848 <HAL_FMC_MspInit+0xfc>)
 8001804:	f002 ff66 	bl	80046d4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001808:	f24c 7303 	movw	r3, #50947	; 0xc703
 800180c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800181a:	230c      	movs	r3, #12
 800181c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	480a      	ldr	r0, [pc, #40]	; (800184c <HAL_FMC_MspInit+0x100>)
 8001824:	f002 ff56 	bl	80046d4 <HAL_GPIO_Init>
 8001828:	e000      	b.n	800182c <HAL_FMC_MspInit+0xe0>
    return;
 800182a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000218 	.word	0x20000218
 8001838:	40023800 	.word	0x40023800
 800183c:	40021400 	.word	0x40021400
 8001840:	40020800 	.word	0x40020800
 8001844:	40021800 	.word	0x40021800
 8001848:	40021000 	.word	0x40021000
 800184c:	40020c00 	.word	0x40020c00

08001850 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001858:	f7ff ff78 	bl	800174c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b08e      	sub	sp, #56	; 0x38
 8001868:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
 800187e:	4b43      	ldr	r3, [pc, #268]	; (800198c <MX_GPIO_Init+0x128>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a42      	ldr	r2, [pc, #264]	; (800198c <MX_GPIO_Init+0x128>)
 8001884:	f043 0320 	orr.w	r3, r3, #32
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b40      	ldr	r3, [pc, #256]	; (800198c <MX_GPIO_Init+0x128>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	623b      	str	r3, [r7, #32]
 8001894:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
 800189a:	4b3c      	ldr	r3, [pc, #240]	; (800198c <MX_GPIO_Init+0x128>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a3b      	ldr	r2, [pc, #236]	; (800198c <MX_GPIO_Init+0x128>)
 80018a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <MX_GPIO_Init+0x128>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <MX_GPIO_Init+0x128>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a34      	ldr	r2, [pc, #208]	; (800198c <MX_GPIO_Init+0x128>)
 80018bc:	f043 0304 	orr.w	r3, r3, #4
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b32      	ldr	r3, [pc, #200]	; (800198c <MX_GPIO_Init+0x128>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	4b2e      	ldr	r3, [pc, #184]	; (800198c <MX_GPIO_Init+0x128>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a2d      	ldr	r2, [pc, #180]	; (800198c <MX_GPIO_Init+0x128>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b2b      	ldr	r3, [pc, #172]	; (800198c <MX_GPIO_Init+0x128>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b27      	ldr	r3, [pc, #156]	; (800198c <MX_GPIO_Init+0x128>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a26      	ldr	r2, [pc, #152]	; (800198c <MX_GPIO_Init+0x128>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b24      	ldr	r3, [pc, #144]	; (800198c <MX_GPIO_Init+0x128>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <MX_GPIO_Init+0x128>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a1f      	ldr	r2, [pc, #124]	; (800198c <MX_GPIO_Init+0x128>)
 8001910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <MX_GPIO_Init+0x128>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b19      	ldr	r3, [pc, #100]	; (800198c <MX_GPIO_Init+0x128>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a18      	ldr	r2, [pc, #96]	; (800198c <MX_GPIO_Init+0x128>)
 800192c:	f043 0310 	orr.w	r3, r3, #16
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <MX_GPIO_Init+0x128>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <MX_GPIO_Init+0x128>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a11      	ldr	r2, [pc, #68]	; (800198c <MX_GPIO_Init+0x128>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_GPIO_Init+0x128>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001960:	480b      	ldr	r0, [pc, #44]	; (8001990 <MX_GPIO_Init+0x12c>)
 8001962:	f003 f861 	bl	8004a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001966:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197c:	4619      	mov	r1, r3
 800197e:	4804      	ldr	r0, [pc, #16]	; (8001990 <MX_GPIO_Init+0x12c>)
 8001980:	f002 fea8 	bl	80046d4 <HAL_GPIO_Init>

}
 8001984:	bf00      	nop
 8001986:	3738      	adds	r7, #56	; 0x38
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	40021800 	.word	0x40021800

08001994 <StartScreen>:
#include <stdio.h>

int width;


void StartScreen(void){
 8001994:	b5b0      	push	{r4, r5, r7, lr}
 8001996:	b08e      	sub	sp, #56	; 0x38
 8001998:	af00      	add	r7, sp, #0
	TM_LCD_Init();
 800199a:	f006 fb05 	bl	8007fa8 <TM_LCD_Init>
	TM_LCD_SetOrientation(2);
 800199e:	2002      	movs	r0, #2
 80019a0:	f006 fb7a 	bl	8008098 <TM_LCD_SetOrientation>
	TM_LCD_SetLayer1();
 80019a4:	f006 fcd2 	bl	800834c <TM_LCD_SetLayer1>
	TM_LCD_Fill(LCD_COLOR_WHITE);
 80019a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019ac:	f006 fb68 	bl	8008080 <TM_LCD_Fill>


	ScreenIntro();
 80019b0:	f000 f8ca 	bl	8001b48 <ScreenIntro>

	/*	prozor za osciloskop	*/

	Window();
 80019b4:	f000 fd7e 	bl	80024b4 <Window>

	/*	generator; ime i ON/OFF */

	TM_LCD_SetXY(0, TM_LCD_GetHeight()-22);
 80019b8:	f006 fd16 	bl	80083e8 <TM_LCD_GetHeight>
 80019bc:	4603      	mov	r3, r0
 80019be:	3b16      	subs	r3, #22
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	4619      	mov	r1, r3
 80019c4:	2000      	movs	r0, #0
 80019c6:	f006 fba7 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_SetFont(&TM_Font_7x10);
 80019ca:	485a      	ldr	r0, [pc, #360]	; (8001b34 <StartScreen+0x1a0>)
 80019cc:	f006 fbca 	bl	8008164 <TM_LCD_SetFont>
	char s[] = "Function generator";
 80019d0:	4b59      	ldr	r3, [pc, #356]	; (8001b38 <StartScreen+0x1a4>)
 80019d2:	f107 0414 	add.w	r4, r7, #20
 80019d6:	461d      	mov	r5, r3
 80019d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	8022      	strh	r2, [r4, #0]
 80019e2:	3402      	adds	r4, #2
 80019e4:	0c1b      	lsrs	r3, r3, #16
 80019e6:	7023      	strb	r3, [r4, #0]
	TM_LCD_Puts(&s[0]);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4618      	mov	r0, r3
 80019ee:	f006 fc91 	bl	8008314 <TM_LCD_Puts>
	char on[] = "ON";
 80019f2:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <StartScreen+0x1a8>)
 80019f4:	f107 0310 	add.w	r3, r7, #16
 80019f8:	6812      	ldr	r2, [r2, #0]
 80019fa:	4611      	mov	r1, r2
 80019fc:	8019      	strh	r1, [r3, #0]
 80019fe:	3302      	adds	r3, #2
 8001a00:	0c12      	lsrs	r2, r2, #16
 8001a02:	701a      	strb	r2, [r3, #0]
	TM_LCD_SetXY(8, TM_LCD_GetHeight()-11);
 8001a04:	f006 fcf0 	bl	80083e8 <TM_LCD_GetHeight>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	3b0b      	subs	r3, #11
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	2008      	movs	r0, #8
 8001a12:	f006 fb81 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&on[0]);
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f006 fc7a 	bl	8008314 <TM_LCD_Puts>
	char off[] = "OFF";
 8001a20:	4b47      	ldr	r3, [pc, #284]	; (8001b40 <StartScreen+0x1ac>)
 8001a22:	60fb      	str	r3, [r7, #12]
	TM_LCD_SetXY(28, TM_LCD_GetHeight()-11);
 8001a24:	f006 fce0 	bl	80083e8 <TM_LCD_GetHeight>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	3b0b      	subs	r3, #11
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	201c      	movs	r0, #28
 8001a32:	f006 fb71 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&off[0]);
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f006 fc6a 	bl	8008314 <TM_LCD_Puts>

	/*	prozor za generator	*/

	for(int i=135; i<160;i++){
 8001a40:	2387      	movs	r3, #135	; 0x87
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
 8001a44:	e00e      	b.n	8001a64 <StartScreen+0xd0>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-22, LCD_COLOR_BLACK);
 8001a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a48:	b29c      	uxth	r4, r3
 8001a4a:	f006 fccd 	bl	80083e8 <TM_LCD_GetHeight>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	3b16      	subs	r3, #22
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	2200      	movs	r2, #0
 8001a56:	4619      	mov	r1, r3
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f006 fc35 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=135; i<160;i++){
 8001a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a60:	3301      	adds	r3, #1
 8001a62:	637b      	str	r3, [r7, #52]	; 0x34
 8001a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a66:	2b9f      	cmp	r3, #159	; 0x9f
 8001a68:	dded      	ble.n	8001a46 <StartScreen+0xb2>
	}
	for(int i=135; i<161;i++){
 8001a6a:	2387      	movs	r3, #135	; 0x87
 8001a6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a6e:	e00e      	b.n	8001a8e <StartScreen+0xfa>
			TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-5, LCD_COLOR_BLACK);
 8001a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a72:	b29c      	uxth	r4, r3
 8001a74:	f006 fcb8 	bl	80083e8 <TM_LCD_GetHeight>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	3b05      	subs	r3, #5
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4619      	mov	r1, r3
 8001a82:	4620      	mov	r0, r4
 8001a84:	f006 fc20 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=135; i<161;i++){
 8001a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a90:	2ba0      	cmp	r3, #160	; 0xa0
 8001a92:	dded      	ble.n	8001a70 <StartScreen+0xdc>
		}
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 8001a94:	f006 fca8 	bl	80083e8 <TM_LCD_GetHeight>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	3b16      	subs	r3, #22
 8001a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a9e:	e009      	b.n	8001ab4 <StartScreen+0x120>
			TM_LCD_DrawPixel(135, i, LCD_COLOR_BLACK);
 8001aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	2087      	movs	r0, #135	; 0x87
 8001aaa:	f006 fc0d 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ab4:	f006 fc98 	bl	80083e8 <TM_LCD_GetHeight>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	3b05      	subs	r3, #5
 8001abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	dbee      	blt.n	8001aa0 <StartScreen+0x10c>
		}
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 8001ac2:	f006 fc91 	bl	80083e8 <TM_LCD_GetHeight>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	3b16      	subs	r3, #22
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001acc:	e009      	b.n	8001ae2 <StartScreen+0x14e>
			TM_LCD_DrawPixel(160, i, LCD_COLOR_BLACK);
 8001ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	20a0      	movs	r0, #160	; 0xa0
 8001ad8:	f006 fbf6 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-22; i<TM_LCD_GetHeight()-5;i++){
 8001adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ade:	3301      	adds	r3, #1
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ae2:	f006 fc81 	bl	80083e8 <TM_LCD_GetHeight>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	3b05      	subs	r3, #5
 8001aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aec:	429a      	cmp	r2, r3
 8001aee:	dbee      	blt.n	8001ace <StartScreen+0x13a>
		}
	char yaxis[] = "0.15 V/div";
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <StartScreen+0x1b0>)
 8001af2:	463b      	mov	r3, r7
 8001af4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001af6:	c303      	stmia	r3!, {r0, r1}
 8001af8:	801a      	strh	r2, [r3, #0]
 8001afa:	3302      	adds	r3, #2
 8001afc:	0c12      	lsrs	r2, r2, #16
 8001afe:	701a      	strb	r2, [r3, #0]
	TM_LCD_SetXY(210,TM_LCD_GetHeight()*3/4+5);
 8001b00:	f006 fc72 	bl	80083e8 <TM_LCD_GetHeight>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da00      	bge.n	8001b14 <StartScreen+0x180>
 8001b12:	3303      	adds	r3, #3
 8001b14:	109b      	asrs	r3, r3, #2
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3305      	adds	r3, #5
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	20d2      	movs	r0, #210	; 0xd2
 8001b20:	f006 fafa 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&yaxis[0]);
 8001b24:	463b      	mov	r3, r7
 8001b26:	4618      	mov	r0, r3
 8001b28:	f006 fbf4 	bl	8008314 <TM_LCD_Puts>
}
 8001b2c:	bf00      	nop
 8001b2e:	3738      	adds	r7, #56	; 0x38
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bdb0      	pop	{r4, r5, r7, pc}
 8001b34:	2000001c 	.word	0x2000001c
 8001b38:	0800dd88 	.word	0x0800dd88
 8001b3c:	0800dd9c 	.word	0x0800dd9c
 8001b40:	0046464f 	.word	0x0046464f
 8001b44:	0800dda0 	.word	0x0800dda0

08001b48 <ScreenIntro>:

void ScreenIntro(void){
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b09c      	sub	sp, #112	; 0x70
 8001b4c:	af00      	add	r7, sp, #0
	char begin[] = "Sustav za generiranje,";
 8001b4e:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <ScreenIntro+0x128>)
 8001b50:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001b54:	461d      	mov	r5, r3
 8001b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b5e:	6020      	str	r0, [r4, #0]
 8001b60:	3404      	adds	r4, #4
 8001b62:	8021      	strh	r1, [r4, #0]
 8001b64:	3402      	adds	r4, #2
 8001b66:	0c0b      	lsrs	r3, r1, #16
 8001b68:	7023      	strb	r3, [r4, #0]
	char end[] = "akviziciju i prikaz signala";
 8001b6a:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <ScreenIntro+0x12c>)
 8001b6c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001b70:	461d      	mov	r5, r3
 8001b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	TM_LCD_SetXY(35, TM_LCD_GetHeight()/2-22);
 8001b7e:	f006 fc33 	bl	80083e8 <TM_LCD_GetHeight>
 8001b82:	4603      	mov	r3, r0
 8001b84:	085b      	lsrs	r3, r3, #1
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b16      	subs	r3, #22
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	2023      	movs	r0, #35	; 0x23
 8001b90:	f006 fac2 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&begin[0]);
 8001b94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f006 fbbb 	bl	8008314 <TM_LCD_Puts>
	TM_LCD_SetXY(10, TM_LCD_GetHeight()/2);
 8001b9e:	f006 fc23 	bl	80083e8 <TM_LCD_GetHeight>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	4619      	mov	r1, r3
 8001baa:	200a      	movs	r0, #10
 8001bac:	f006 fab4 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&end[0]);
 8001bb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f006 fbad 	bl	8008314 <TM_LCD_Puts>
	char fer[] = "FER, 2020./2021.";
 8001bba:	4b2f      	ldr	r3, [pc, #188]	; (8001c78 <ScreenIntro+0x130>)
 8001bbc:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001bc0:	461d      	mov	r5, r3
 8001bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bc6:	682b      	ldr	r3, [r5, #0]
 8001bc8:	7023      	strb	r3, [r4, #0]
	TM_LCD_SetFont(&TM_Font_7x10);
 8001bca:	482c      	ldr	r0, [pc, #176]	; (8001c7c <ScreenIntro+0x134>)
 8001bcc:	f006 faca 	bl	8008164 <TM_LCD_SetFont>
	TM_LCD_SetXY(8, TM_LCD_GetHeight()-15);
 8001bd0:	f006 fc0a 	bl	80083e8 <TM_LCD_GetHeight>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	3b0f      	subs	r3, #15
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	4619      	mov	r1, r3
 8001bdc:	2008      	movs	r0, #8
 8001bde:	f006 fa9b 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&fer[0]);
 8001be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be6:	4618      	mov	r0, r3
 8001be8:	f006 fb94 	bl	8008314 <TM_LCD_Puts>
	for(int i=0; i<20000000;i++){}
 8001bec:	2300      	movs	r3, #0
 8001bee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bf0:	e002      	b.n	8001bf8 <ScreenIntro+0xb0>
 8001bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001bfa:	4a21      	ldr	r2, [pc, #132]	; (8001c80 <ScreenIntro+0x138>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	ddf8      	ble.n	8001bf2 <ScreenIntro+0xaa>
	char next1[] = "Press user button";
 8001c00:	4b20      	ldr	r3, [pc, #128]	; (8001c84 <ScreenIntro+0x13c>)
 8001c02:	f107 0410 	add.w	r4, r7, #16
 8001c06:	461d      	mov	r5, r3
 8001c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	8023      	strh	r3, [r4, #0]
	char next2[] = "to continue";
 8001c10:	4a1d      	ldr	r2, [pc, #116]	; (8001c88 <ScreenIntro+0x140>)
 8001c12:	1d3b      	adds	r3, r7, #4
 8001c14:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	TM_LCD_SetXY(200, TM_LCD_GetHeight()-20);
 8001c1a:	f006 fbe5 	bl	80083e8 <TM_LCD_GetHeight>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	3b14      	subs	r3, #20
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	4619      	mov	r1, r3
 8001c26:	20c8      	movs	r0, #200	; 0xc8
 8001c28:	f006 fa76 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&next1[0]);
 8001c2c:	f107 0310 	add.w	r3, r7, #16
 8001c30:	4618      	mov	r0, r3
 8001c32:	f006 fb6f 	bl	8008314 <TM_LCD_Puts>
	TM_LCD_SetXY(200, TM_LCD_GetHeight()-10);
 8001c36:	f006 fbd7 	bl	80083e8 <TM_LCD_GetHeight>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	3b0a      	subs	r3, #10
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	4619      	mov	r1, r3
 8001c42:	20c8      	movs	r0, #200	; 0xc8
 8001c44:	f006 fa68 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&next2[0]);
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f006 fb62 	bl	8008314 <TM_LCD_Puts>
	while(1){
		if(TM_DISCO_ButtonPressed() > 0) {
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <ScreenIntro+0x144>)
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f9      	beq.n	8001c50 <ScreenIntro+0x108>
			TM_LCD_Fill(LCD_COLOR_WHITE);
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c60:	f006 fa0e 	bl	8008080 <TM_LCD_Fill>
			break;
 8001c64:	bf00      	nop
		}
	}

}
 8001c66:	bf00      	nop
 8001c68:	3770      	adds	r7, #112	; 0x70
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	0800ddac 	.word	0x0800ddac
 8001c74:	0800ddc4 	.word	0x0800ddc4
 8001c78:	0800dde0 	.word	0x0800dde0
 8001c7c:	2000001c 	.word	0x2000001c
 8001c80:	01312cff 	.word	0x01312cff
 8001c84:	0800ddf4 	.word	0x0800ddf4
 8001c88:	0800de08 	.word	0x0800de08
 8001c8c:	40020000 	.word	0x40020000

08001c90 <LCDFunctionGeneratorON>:

void LCDFunctionGeneratorON(void){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
	for(int i=7;i<23;i++){
 8001c96:	2307      	movs	r3, #7
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	e027      	b.n	8001cec <LCDFunctionGeneratorON+0x5c>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8001c9c:	f006 fba4 	bl	80083e8 <TM_LCD_GetHeight>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	3b0d      	subs	r3, #13
 8001ca4:	60bb      	str	r3, [r7, #8]
 8001ca6:	e017      	b.n	8001cd8 <LCDFunctionGeneratorON+0x48>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_WHITE){
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	b292      	uxth	r2, r2
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f006 fb1b 	bl	80082ee <TM_LCD_GetPixel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cbe:	d108      	bne.n	8001cd2 <LCDFunctionGeneratorON+0x42>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_GREEN2);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	b291      	uxth	r1, r2
 8001cc8:	f244 3221 	movw	r2, #17185	; 0x4321
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f006 fafb 	bl	80082c8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	f006 fb86 	bl	80083e8 <TM_LCD_GetHeight>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	3b02      	subs	r3, #2
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	dbe0      	blt.n	8001ca8 <LCDFunctionGeneratorON+0x18>
	for(int i=7;i<23;i++){
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b16      	cmp	r3, #22
 8001cf0:	ddd4      	ble.n	8001c9c <LCDFunctionGeneratorON+0xc>
			}
		}
	}
	for(int i=27;i<49;i++){
 8001cf2:	231b      	movs	r3, #27
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	e027      	b.n	8001d48 <LCDFunctionGeneratorON+0xb8>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8001cf8:	f006 fb76 	bl	80083e8 <TM_LCD_GetHeight>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	3b0d      	subs	r3, #13
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	e017      	b.n	8001d34 <LCDFunctionGeneratorON+0xa4>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_RED2){
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	b292      	uxth	r2, r2
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f006 faed 	bl	80082ee <TM_LCD_GetPixel>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f5b3 4f78 	cmp.w	r3, #63488	; 0xf800
 8001d1a:	d108      	bne.n	8001d2e <LCDFunctionGeneratorON+0x9e>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	b291      	uxth	r1, r2
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f006 facd 	bl	80082c8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	f006 fb58 	bl	80083e8 <TM_LCD_GetHeight>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	3b02      	subs	r3, #2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbe0      	blt.n	8001d04 <LCDFunctionGeneratorON+0x74>
	for(int i=27;i<49;i++){
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3301      	adds	r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b30      	cmp	r3, #48	; 0x30
 8001d4c:	ddd4      	ble.n	8001cf8 <LCDFunctionGeneratorON+0x68>
			}
		}
	}
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <LCDFunctionGeneratorOFF>:

void LCDFunctionGeneratorOFF(void){
 8001d58:	b590      	push	{r4, r7, lr}
 8001d5a:	b08b      	sub	sp, #44	; 0x2c
 8001d5c:	af00      	add	r7, sp, #0
	for(int i=27;i<49;i++){
 8001d5e:	231b      	movs	r3, #27
 8001d60:	627b      	str	r3, [r7, #36]	; 0x24
 8001d62:	e027      	b.n	8001db4 <LCDFunctionGeneratorOFF+0x5c>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8001d64:	f006 fb40 	bl	80083e8 <TM_LCD_GetHeight>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	3b0d      	subs	r3, #13
 8001d6c:	623b      	str	r3, [r7, #32]
 8001d6e:	e017      	b.n	8001da0 <LCDFunctionGeneratorOFF+0x48>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_WHITE){
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	6a3a      	ldr	r2, [r7, #32]
 8001d76:	b292      	uxth	r2, r2
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f006 fab7 	bl	80082ee <TM_LCD_GetPixel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d86:	d108      	bne.n	8001d9a <LCDFunctionGeneratorOFF+0x42>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_RED2);
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	6a3a      	ldr	r2, [r7, #32]
 8001d8e:	b291      	uxth	r1, r2
 8001d90:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001d94:	4618      	mov	r0, r3
 8001d96:	f006 fa97 	bl	80082c8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8001d9a:	6a3b      	ldr	r3, [r7, #32]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	623b      	str	r3, [r7, #32]
 8001da0:	f006 fb22 	bl	80083e8 <TM_LCD_GetHeight>
 8001da4:	4603      	mov	r3, r0
 8001da6:	3b02      	subs	r3, #2
 8001da8:	6a3a      	ldr	r2, [r7, #32]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	dbe0      	blt.n	8001d70 <LCDFunctionGeneratorOFF+0x18>
	for(int i=27;i<49;i++){
 8001dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db0:	3301      	adds	r3, #1
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	2b30      	cmp	r3, #48	; 0x30
 8001db8:	ddd4      	ble.n	8001d64 <LCDFunctionGeneratorOFF+0xc>
			}
		}
	}
	for(int i=7;i<23;i++){
 8001dba:	2307      	movs	r3, #7
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e028      	b.n	8001e12 <LCDFunctionGeneratorOFF+0xba>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8001dc0:	f006 fb12 	bl	80083e8 <TM_LCD_GetHeight>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	3b0d      	subs	r3, #13
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	e018      	b.n	8001dfe <LCDFunctionGeneratorOFF+0xa6>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_GREEN2){
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	b292      	uxth	r2, r2
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f006 fa89 	bl	80082ee <TM_LCD_GetPixel>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f244 3321 	movw	r3, #17185	; 0x4321
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d108      	bne.n	8001df8 <LCDFunctionGeneratorOFF+0xa0>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	b291      	uxth	r1, r2
 8001dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001df2:	4618      	mov	r0, r3
 8001df4:	f006 fa68 	bl	80082c8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-13;j<TM_LCD_GetHeight()-2;j++){
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	f006 faf3 	bl	80083e8 <TM_LCD_GetHeight>
 8001e02:	4603      	mov	r3, r0
 8001e04:	3b02      	subs	r3, #2
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dbdf      	blt.n	8001dcc <LCDFunctionGeneratorOFF+0x74>
	for(int i=7;i<23;i++){
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	61fb      	str	r3, [r7, #28]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	2b16      	cmp	r3, #22
 8001e16:	ddd3      	ble.n	8001dc0 <LCDFunctionGeneratorOFF+0x68>
			}
		}
	}
	for(int i=137;i<159;i++){
 8001e18:	2389      	movs	r3, #137	; 0x89
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e01b      	b.n	8001e56 <LCDFunctionGeneratorOFF+0xfe>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight()-7;j++){
 8001e1e:	f006 fae3 	bl	80083e8 <TM_LCD_GetHeight>
 8001e22:	4603      	mov	r3, r0
 8001e24:	3b12      	subs	r3, #18
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	e00b      	b.n	8001e42 <LCDFunctionGeneratorOFF+0xea>
			TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	b291      	uxth	r1, r2
 8001e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e36:	4618      	mov	r0, r3
 8001e38:	f006 fa46 	bl	80082c8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight()-7;j++){
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	f006 fad1 	bl	80083e8 <TM_LCD_GetHeight>
 8001e46:	4603      	mov	r3, r0
 8001e48:	3b07      	subs	r3, #7
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbec      	blt.n	8001e2a <LCDFunctionGeneratorOFF+0xd2>
	for(int i=137;i<159;i++){
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	2b9e      	cmp	r3, #158	; 0x9e
 8001e5a:	dde0      	ble.n	8001e1e <LCDFunctionGeneratorOFF+0xc6>
		}
	}
	char gasi[] = "               ";
 8001e5c:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <LCDFunctionGeneratorOFF+0x130>)
 8001e5e:	463c      	mov	r4, r7
 8001e60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 8001e66:	f006 fabf 	bl	80083e8 <TM_LCD_GetHeight>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	3b12      	subs	r3, #18
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	4619      	mov	r1, r3
 8001e72:	20a5      	movs	r0, #165	; 0xa5
 8001e74:	f006 f950 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&gasi[0]);
 8001e78:	463b      	mov	r3, r7
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f006 fa4a 	bl	8008314 <TM_LCD_Puts>
}
 8001e80:	bf00      	nop
 8001e82:	372c      	adds	r7, #44	; 0x2c
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd90      	pop	{r4, r7, pc}
 8001e88:	0800de14 	.word	0x0800de14
 8001e8c:	00000000 	.word	0x00000000

08001e90 <SendToScreen>:

void SendToScreen(int* signal){
 8001e90:	b590      	push	{r4, r7, lr}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	for(int i=0;i<BUFFER_SIZE;i++){
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e039      	b.n	8001f12 <SendToScreen+0x82>
		int amplitude = -0.04297924298 * signal[i] + 180;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fb4b 	bl	8000544 <__aeabi_i2d>
 8001eae:	a31e      	add	r3, pc, #120	; (adr r3, 8001f28 <SendToScreen+0x98>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fbb0 	bl	8000618 <__aeabi_dmul>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <SendToScreen+0x90>)
 8001ec6:	f7fe f9f1 	bl	80002ac <__adddf3>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	460c      	mov	r4, r1
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	f7fe fe51 	bl	8000b78 <__aeabi_d2iz>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	60bb      	str	r3, [r7, #8]
		TM_LCD_DrawPixel(width, amplitude, LCD_COLOR_YELLOW);
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <SendToScreen+0x94>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	b291      	uxth	r1, r2
 8001ee4:	f64f 72c0 	movw	r2, #65472	; 0xffc0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f006 f9ed 	bl	80082c8 <TM_LCD_DrawPixel>
		if(width == 318){
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <SendToScreen+0x94>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8001ef6:	d104      	bne.n	8001f02 <SendToScreen+0x72>
			width = 1;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <SendToScreen+0x94>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]
			Window();
 8001efe:	f000 fad9 	bl	80024b4 <Window>
		}
		width++;
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <SendToScreen+0x94>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	3301      	adds	r3, #1
 8001f08:	4a06      	ldr	r2, [pc, #24]	; (8001f24 <SendToScreen+0x94>)
 8001f0a:	6013      	str	r3, [r2, #0]
	for(int i=0;i<BUFFER_SIZE;i++){
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	3301      	adds	r3, #1
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b3f      	cmp	r3, #63	; 0x3f
 8001f16:	ddc2      	ble.n	8001e9e <SendToScreen+0xe>
	}
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd90      	pop	{r4, r7, pc}
 8001f20:	40668000 	.word	0x40668000
 8001f24:	20000c3c 	.word	0x20000c3c
 8001f28:	16030a40 	.word	0x16030a40
 8001f2c:	bfa60160 	.word	0xbfa60160

08001f30 <SetSquareOutput>:

void SetSquareOutput(long int freq){
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b0b9      	sub	sp, #228	; 0xe4
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
	LCDFunctionGeneratorON();
 8001f38:	f7ff feaa 	bl	8001c90 <LCDFunctionGeneratorON>
	double sinus[20];
	for(int i=0; i<20; i++){
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001f42:	e02a      	b.n	8001f9a <SetSquareOutput+0x6a>
		double a = (double) i;
 8001f44:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001f48:	f7fe fafc 	bl	8000544 <__aeabi_i2d>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	460c      	mov	r4, r1
 8001f50:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		sinus[i] = sin(0.33*a);
 8001f54:	a389      	add	r3, pc, #548	; (adr r3, 800217c <SetSquareOutput+0x24c>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001f5e:	f7fe fb5b 	bl	8000618 <__aeabi_dmul>
 8001f62:	4603      	mov	r3, r0
 8001f64:	460c      	mov	r4, r1
 8001f66:	ec44 3b17 	vmov	d7, r3, r4
 8001f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8001f6e:	eef0 0a67 	vmov.f32	s1, s15
 8001f72:	f00a fee9 	bl	800cd48 <sin>
 8001f76:	eeb0 7a40 	vmov.f32	s14, s0
 8001f7a:	eef0 7a60 	vmov.f32	s15, s1
 8001f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001f88:	4413      	add	r3, r2
 8001f8a:	3bc8      	subs	r3, #200	; 0xc8
 8001f8c:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<20; i++){
 8001f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f94:	3301      	adds	r3, #1
 8001f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f9e:	2b13      	cmp	r3, #19
 8001fa0:	ddd0      	ble.n	8001f44 <SetSquareOutput+0x14>
	}

	for(int i=0;i<20;i++){
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fa8:	e031      	b.n	800200e <SetSquareOutput+0xde>
		int amplitude = (int)(-6* sinus[i] + 227);
 8001faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3bc8      	subs	r3, #200	; 0xc8
 8001fb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	4b6b      	ldr	r3, [pc, #428]	; (8002170 <SetSquareOutput+0x240>)
 8001fc2:	f7fe fb29 	bl	8000618 <__aeabi_dmul>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460c      	mov	r4, r1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	4621      	mov	r1, r4
 8001fce:	a366      	add	r3, pc, #408	; (adr r3, 8002168 <SetSquareOutput+0x238>)
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	f7fe f96a 	bl	80002ac <__adddf3>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	460c      	mov	r4, r1
 8001fdc:	4618      	mov	r0, r3
 8001fde:	4621      	mov	r1, r4
 8001fe0:	f7fe fdca 	bl	8000b78 <__aeabi_d2iz>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		TM_LCD_DrawPixel(i+138, amplitude, LCD_COLOR_WHITE );
 8001fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	338a      	adds	r3, #138	; 0x8a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001ff8:	b291      	uxth	r1, r2
 8001ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ffe:	4618      	mov	r0, r3
 8002000:	f006 f962 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=0;i<20;i++){
 8002004:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002008:	3301      	adds	r3, #1
 800200a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800200e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002012:	2b13      	cmp	r3, #19
 8002014:	ddc9      	ble.n	8001faa <SetSquareOutput+0x7a>
	}
	for(int i=147; i<159;i++){
 8002016:	2393      	movs	r3, #147	; 0x93
 8002018:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800201c:	e012      	b.n	8002044 <SetSquareOutput+0x114>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-18, LCD_COLOR_RED2);
 800201e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002022:	b29c      	uxth	r4, r3
 8002024:	f006 f9e0 	bl	80083e8 <TM_LCD_GetHeight>
 8002028:	4603      	mov	r3, r0
 800202a:	3b12      	subs	r3, #18
 800202c:	b29b      	uxth	r3, r3
 800202e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002032:	4619      	mov	r1, r3
 8002034:	4620      	mov	r0, r4
 8002036:	f006 f947 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=147; i<159;i++){
 800203a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800203e:	3301      	adds	r3, #1
 8002040:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002044:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002048:	2b9e      	cmp	r3, #158	; 0x9e
 800204a:	dde8      	ble.n	800201e <SetSquareOutput+0xee>
	}
	for(int i=137; i<147;i++){
 800204c:	2389      	movs	r3, #137	; 0x89
 800204e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002052:	e012      	b.n	800207a <SetSquareOutput+0x14a>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-8, LCD_COLOR_RED2);
 8002054:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002058:	b29c      	uxth	r4, r3
 800205a:	f006 f9c5 	bl	80083e8 <TM_LCD_GetHeight>
 800205e:	4603      	mov	r3, r0
 8002060:	3b08      	subs	r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002068:	4619      	mov	r1, r3
 800206a:	4620      	mov	r0, r4
 800206c:	f006 f92c 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=137; i<147;i++){
 8002070:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002074:	3301      	adds	r3, #1
 8002076:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800207a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800207e:	2b92      	cmp	r3, #146	; 0x92
 8002080:	dde8      	ble.n	8002054 <SetSquareOutput+0x124>
	}
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 8002082:	f006 f9b1 	bl	80083e8 <TM_LCD_GetHeight>
 8002086:	4603      	mov	r3, r0
 8002088:	3b12      	subs	r3, #18
 800208a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800208e:	e00d      	b.n	80020ac <SetSquareOutput+0x17c>
		TM_LCD_DrawPixel(147, i, LCD_COLOR_RED2);
 8002090:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002094:	b29b      	uxth	r3, r3
 8002096:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800209a:	4619      	mov	r1, r3
 800209c:	2093      	movs	r0, #147	; 0x93
 800209e:	f006 f913 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 80020a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020a6:	3301      	adds	r3, #1
 80020a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80020ac:	f006 f99c 	bl	80083e8 <TM_LCD_GetHeight>
 80020b0:	4603      	mov	r3, r0
 80020b2:	3b08      	subs	r3, #8
 80020b4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80020b8:	429a      	cmp	r2, r3
 80020ba:	dbe9      	blt.n	8002090 <SetSquareOutput+0x160>
	}
	char f[10] = {0};
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	811a      	strh	r2, [r3, #8]
	sprintf(f,"%.ld",freq);
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4929      	ldr	r1, [pc, #164]	; (8002174 <SetSquareOutput+0x244>)
 80020d0:	4618      	mov	r0, r3
 80020d2:	f008 f827 	bl	800a124 <siprintf>
	for(int i=165;i<320;i++){
 80020d6:	23a5      	movs	r3, #165	; 0xa5
 80020d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80020dc:	e023      	b.n	8002126 <SetSquareOutput+0x1f6>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 80020de:	f006 f983 	bl	80083e8 <TM_LCD_GetHeight>
 80020e2:	4603      	mov	r3, r0
 80020e4:	3b12      	subs	r3, #18
 80020e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80020ea:	e00f      	b.n	800210c <SetSquareOutput+0x1dc>
			TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 80020ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80020f6:	b291      	uxth	r1, r2
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020fc:	4618      	mov	r0, r3
 80020fe:	f006 f8e3 	bl	80082c8 <TM_LCD_DrawPixel>
		for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 8002102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002106:	3301      	adds	r3, #1
 8002108:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800210c:	f006 f96c 	bl	80083e8 <TM_LCD_GetHeight>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002118:	4293      	cmp	r3, r2
 800211a:	dbe7      	blt.n	80020ec <SetSquareOutput+0x1bc>
	for(int i=165;i<320;i++){
 800211c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002120:	3301      	adds	r3, #1
 8002122:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002126:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800212a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800212e:	dbd6      	blt.n	80020de <SetSquareOutput+0x1ae>
		}
	}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 8002130:	f006 f95a 	bl	80083e8 <TM_LCD_GetHeight>
 8002134:	4603      	mov	r3, r0
 8002136:	3b12      	subs	r3, #18
 8002138:	b29b      	uxth	r3, r3
 800213a:	4619      	mov	r1, r3
 800213c:	20a5      	movs	r0, #165	; 0xa5
 800213e:	f005 ffeb 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&f[0]);
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	4618      	mov	r0, r3
 8002148:	f006 f8e4 	bl	8008314 <TM_LCD_Puts>
	char f1[] = " Hz";
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <SetSquareOutput+0x248>)
 800214e:	60bb      	str	r3, [r7, #8]
	TM_LCD_Puts(&f1[0]);
 8002150:	f107 0308 	add.w	r3, r7, #8
 8002154:	4618      	mov	r0, r3
 8002156:	f006 f8dd 	bl	8008314 <TM_LCD_Puts>

}
 800215a:	bf00      	nop
 800215c:	37e4      	adds	r7, #228	; 0xe4
 800215e:	46bd      	mov	sp, r7
 8002160:	bd90      	pop	{r4, r7, pc}
 8002162:	bf00      	nop
 8002164:	f3af 8000 	nop.w
 8002168:	00000000 	.word	0x00000000
 800216c:	406c6000 	.word	0x406c6000
 8002170:	c0180000 	.word	0xc0180000
 8002174:	0800de24 	.word	0x0800de24
 8002178:	007a4820 	.word	0x007a4820
 800217c:	51eb851f 	.word	0x51eb851f
 8002180:	3fd51eb8 	.word	0x3fd51eb8
 8002184:	00000000 	.word	0x00000000

08002188 <SetSineOutput>:

void SetSineOutput(long int freq){
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b0b9      	sub	sp, #228	; 0xe4
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

	LCDFunctionGeneratorON();
 8002190:	f7ff fd7e 	bl	8001c90 <LCDFunctionGeneratorON>
	double sinus[20];
	for(int i=147; i<159;i++){
 8002194:	2393      	movs	r3, #147	; 0x93
 8002196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800219a:	e012      	b.n	80021c2 <SetSineOutput+0x3a>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-18, LCD_COLOR_WHITE);
 800219c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021a0:	b29c      	uxth	r4, r3
 80021a2:	f006 f921 	bl	80083e8 <TM_LCD_GetHeight>
 80021a6:	4603      	mov	r3, r0
 80021a8:	3b12      	subs	r3, #18
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021b0:	4619      	mov	r1, r3
 80021b2:	4620      	mov	r0, r4
 80021b4:	f006 f888 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=147; i<159;i++){
 80021b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021bc:	3301      	adds	r3, #1
 80021be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80021c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021c6:	2b9e      	cmp	r3, #158	; 0x9e
 80021c8:	dde8      	ble.n	800219c <SetSineOutput+0x14>
	}
	for(int i=137; i<147;i++){
 80021ca:	2389      	movs	r3, #137	; 0x89
 80021cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021d0:	e012      	b.n	80021f8 <SetSineOutput+0x70>
		TM_LCD_DrawPixel(i, TM_LCD_GetHeight()-8, LCD_COLOR_WHITE);
 80021d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021d6:	b29c      	uxth	r4, r3
 80021d8:	f006 f906 	bl	80083e8 <TM_LCD_GetHeight>
 80021dc:	4603      	mov	r3, r0
 80021de:	3b08      	subs	r3, #8
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021e6:	4619      	mov	r1, r3
 80021e8:	4620      	mov	r0, r4
 80021ea:	f006 f86d 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=137; i<147;i++){
 80021ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021f2:	3301      	adds	r3, #1
 80021f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021fc:	2b92      	cmp	r3, #146	; 0x92
 80021fe:	dde8      	ble.n	80021d2 <SetSineOutput+0x4a>
	}
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 8002200:	f006 f8f2 	bl	80083e8 <TM_LCD_GetHeight>
 8002204:	4603      	mov	r3, r0
 8002206:	3b12      	subs	r3, #18
 8002208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800220c:	e00d      	b.n	800222a <SetSineOutput+0xa2>
		TM_LCD_DrawPixel(147, i, LCD_COLOR_WHITE);
 800220e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002212:	b29b      	uxth	r3, r3
 8002214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002218:	4619      	mov	r1, r3
 800221a:	2093      	movs	r0, #147	; 0x93
 800221c:	f006 f854 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=TM_LCD_GetHeight()-18; i<TM_LCD_GetHeight()-8;i++){
 8002220:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002224:	3301      	adds	r3, #1
 8002226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800222a:	f006 f8dd 	bl	80083e8 <TM_LCD_GetHeight>
 800222e:	4603      	mov	r3, r0
 8002230:	3b08      	subs	r3, #8
 8002232:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002236:	429a      	cmp	r2, r3
 8002238:	dbe9      	blt.n	800220e <SetSineOutput+0x86>
	}

	for(int i=0; i<20; i++){
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002240:	e02a      	b.n	8002298 <SetSineOutput+0x110>
		double a = (double) i;
 8002242:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002246:	f7fe f97d 	bl	8000544 <__aeabi_i2d>
 800224a:	4603      	mov	r3, r0
 800224c:	460c      	mov	r4, r1
 800224e:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
		sinus[i] = sin(0.33*a);
 8002252:	a360      	add	r3, pc, #384	; (adr r3, 80023d4 <SetSineOutput+0x24c>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800225c:	f7fe f9dc 	bl	8000618 <__aeabi_dmul>
 8002260:	4603      	mov	r3, r0
 8002262:	460c      	mov	r4, r1
 8002264:	ec44 3b17 	vmov	d7, r3, r4
 8002268:	eeb0 0a47 	vmov.f32	s0, s14
 800226c:	eef0 0a67 	vmov.f32	s1, s15
 8002270:	f00a fd6a 	bl	800cd48 <sin>
 8002274:	eeb0 7a40 	vmov.f32	s14, s0
 8002278:	eef0 7a60 	vmov.f32	s15, s1
 800227c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002286:	4413      	add	r3, r2
 8002288:	3bc8      	subs	r3, #200	; 0xc8
 800228a:	ed83 7b00 	vstr	d7, [r3]
	for(int i=0; i<20; i++){
 800228e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002292:	3301      	adds	r3, #1
 8002294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002298:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800229c:	2b13      	cmp	r3, #19
 800229e:	ddd0      	ble.n	8002242 <SetSineOutput+0xba>
	}

	for(int i=0;i<20;i++){
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022a6:	e031      	b.n	800230c <SetSineOutput+0x184>
		int amplitude = (int)(-6* sinus[i] + 227);
 80022a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80022b2:	4413      	add	r3, r2
 80022b4:	3bc8      	subs	r3, #200	; 0xc8
 80022b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	4b42      	ldr	r3, [pc, #264]	; (80023c8 <SetSineOutput+0x240>)
 80022c0:	f7fe f9aa 	bl	8000618 <__aeabi_dmul>
 80022c4:	4603      	mov	r3, r0
 80022c6:	460c      	mov	r4, r1
 80022c8:	4618      	mov	r0, r3
 80022ca:	4621      	mov	r1, r4
 80022cc:	a33c      	add	r3, pc, #240	; (adr r3, 80023c0 <SetSineOutput+0x238>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	f7fd ffeb 	bl	80002ac <__adddf3>
 80022d6:	4603      	mov	r3, r0
 80022d8:	460c      	mov	r4, r1
 80022da:	4618      	mov	r0, r3
 80022dc:	4621      	mov	r1, r4
 80022de:	f7fe fc4b 	bl	8000b78 <__aeabi_d2iz>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		TM_LCD_DrawPixel(i+138, amplitude, LCD_COLOR_RED2);
 80022e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	338a      	adds	r3, #138	; 0x8a
 80022f0:	b29b      	uxth	r3, r3
 80022f2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80022f6:	b291      	uxth	r1, r2
 80022f8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80022fc:	4618      	mov	r0, r3
 80022fe:	f005 ffe3 	bl	80082c8 <TM_LCD_DrawPixel>
	for(int i=0;i<20;i++){
 8002302:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002306:	3301      	adds	r3, #1
 8002308:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800230c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002310:	2b13      	cmp	r3, #19
 8002312:	ddc9      	ble.n	80022a8 <SetSineOutput+0x120>
	}
	char f[10] = {0};
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	811a      	strh	r2, [r3, #8]
	sprintf(f,"%.ld",freq);
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	4929      	ldr	r1, [pc, #164]	; (80023cc <SetSineOutput+0x244>)
 8002328:	4618      	mov	r0, r3
 800232a:	f007 fefb 	bl	800a124 <siprintf>
	for(int i=165;i<320;i++){
 800232e:	23a5      	movs	r3, #165	; 0xa5
 8002330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002334:	e023      	b.n	800237e <SetSineOutput+0x1f6>
			for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 8002336:	f006 f857 	bl	80083e8 <TM_LCD_GetHeight>
 800233a:	4603      	mov	r3, r0
 800233c:	3b12      	subs	r3, #18
 800233e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002342:	e00f      	b.n	8002364 <SetSineOutput+0x1dc>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 8002344:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002348:	b29b      	uxth	r3, r3
 800234a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800234e:	b291      	uxth	r1, r2
 8002350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002354:	4618      	mov	r0, r3
 8002356:	f005 ffb7 	bl	80082c8 <TM_LCD_DrawPixel>
			for(int j=TM_LCD_GetHeight()-18;j<TM_LCD_GetHeight();j++){
 800235a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800235e:	3301      	adds	r3, #1
 8002360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002364:	f006 f840 	bl	80083e8 <TM_LCD_GetHeight>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002370:	4293      	cmp	r3, r2
 8002372:	dbe7      	blt.n	8002344 <SetSineOutput+0x1bc>
	for(int i=165;i<320;i++){
 8002374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002378:	3301      	adds	r3, #1
 800237a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800237e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002382:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002386:	dbd6      	blt.n	8002336 <SetSineOutput+0x1ae>
			}
		}
	TM_LCD_SetXY(165, TM_LCD_GetHeight()-18);
 8002388:	f006 f82e 	bl	80083e8 <TM_LCD_GetHeight>
 800238c:	4603      	mov	r3, r0
 800238e:	3b12      	subs	r3, #18
 8002390:	b29b      	uxth	r3, r3
 8002392:	4619      	mov	r1, r3
 8002394:	20a5      	movs	r0, #165	; 0xa5
 8002396:	f005 febf 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&f[0]);
 800239a:	f107 030c 	add.w	r3, r7, #12
 800239e:	4618      	mov	r0, r3
 80023a0:	f005 ffb8 	bl	8008314 <TM_LCD_Puts>
	char f1[] = " Hz";
 80023a4:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <SetSineOutput+0x248>)
 80023a6:	60bb      	str	r3, [r7, #8]
	TM_LCD_Puts(&f1[0]);
 80023a8:	f107 0308 	add.w	r3, r7, #8
 80023ac:	4618      	mov	r0, r3
 80023ae:	f005 ffb1 	bl	8008314 <TM_LCD_Puts>
}
 80023b2:	bf00      	nop
 80023b4:	37e4      	adds	r7, #228	; 0xe4
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}
 80023ba:	bf00      	nop
 80023bc:	f3af 8000 	nop.w
 80023c0:	00000000 	.word	0x00000000
 80023c4:	406c6000 	.word	0x406c6000
 80023c8:	c0180000 	.word	0xc0180000
 80023cc:	0800de24 	.word	0x0800de24
 80023d0:	007a4820 	.word	0x007a4820
 80023d4:	51eb851f 	.word	0x51eb851f
 80023d8:	3fd51eb8 	.word	0x3fd51eb8

080023dc <ShowSignal>:

void ShowSignal(int* signal, char title[]){
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
	for(int i=1; i<319;i++){
 80023e6:	2301      	movs	r3, #1
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	e02c      	b.n	8002446 <ShowSignal+0x6a>
		for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 80023ec:	2301      	movs	r3, #1
 80023ee:	613b      	str	r3, [r7, #16]
 80023f0:	e017      	b.n	8002422 <ShowSignal+0x46>
			if(TM_LCD_GetPixel(i, j) == LCD_COLOR_YELLOW){
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	b292      	uxth	r2, r2
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f005 ff76 	bl	80082ee <TM_LCD_GetPixel>
 8002402:	4602      	mov	r2, r0
 8002404:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8002408:	429a      	cmp	r2, r3
 800240a:	d107      	bne.n	800241c <ShowSignal+0x40>
				TM_LCD_DrawPixel(i, j, LCD_COLOR_BLACK);
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	b29b      	uxth	r3, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	b291      	uxth	r1, r2
 8002414:	2200      	movs	r2, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f005 ff56 	bl	80082c8 <TM_LCD_DrawPixel>
		for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	3301      	adds	r3, #1
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	f005 ffe1 	bl	80083e8 <TM_LCD_GetHeight>
 8002426:	4603      	mov	r3, r0
 8002428:	461a      	mov	r2, r3
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	da00      	bge.n	8002436 <ShowSignal+0x5a>
 8002434:	3303      	adds	r3, #3
 8002436:	109b      	asrs	r3, r3, #2
 8002438:	461a      	mov	r2, r3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4293      	cmp	r3, r2
 800243e:	dbd8      	blt.n	80023f2 <ShowSignal+0x16>
	for(int i=1; i<319;i++){
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	3301      	adds	r3, #1
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 800244c:	ddce      	ble.n	80023ec <ShowSignal+0x10>
			}
		}
	}
	for(int i=1; i<110;i++){
 800244e:	2301      	movs	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e014      	b.n	800247e <ShowSignal+0xa2>
			for(int j=185;j<205;j++){
 8002454:	23b9      	movs	r3, #185	; 0xb9
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	e00b      	b.n	8002472 <ShowSignal+0x96>

					TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	b29b      	uxth	r3, r3
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	b291      	uxth	r1, r2
 8002462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002466:	4618      	mov	r0, r3
 8002468:	f005 ff2e 	bl	80082c8 <TM_LCD_DrawPixel>
			for(int j=185;j<205;j++){
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	3301      	adds	r3, #1
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2bcc      	cmp	r3, #204	; 0xcc
 8002476:	ddf0      	ble.n	800245a <ShowSignal+0x7e>
	for(int i=1; i<110;i++){
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	3301      	adds	r3, #1
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b6d      	cmp	r3, #109	; 0x6d
 8002482:	dde7      	ble.n	8002454 <ShowSignal+0x78>

			}
		}


	TM_LCD_SetFont(&TM_Font_11x18);
 8002484:	4809      	ldr	r0, [pc, #36]	; (80024ac <ShowSignal+0xd0>)
 8002486:	f005 fe6d 	bl	8008164 <TM_LCD_SetFont>
	TM_LCD_SetXY(1,240*3/4+5);
 800248a:	21b9      	movs	r1, #185	; 0xb9
 800248c:	2001      	movs	r0, #1
 800248e:	f005 fe43 	bl	8008118 <TM_LCD_SetXY>
	TM_LCD_Puts(&title[0]);
 8002492:	6838      	ldr	r0, [r7, #0]
 8002494:	f005 ff3e 	bl	8008314 <TM_LCD_Puts>
	TM_LCD_SetFont(&TM_Font_7x10);
 8002498:	4805      	ldr	r0, [pc, #20]	; (80024b0 <ShowSignal+0xd4>)
 800249a:	f005 fe63 	bl	8008164 <TM_LCD_SetFont>
	SendToScreen(signal);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fcf6 	bl	8001e90 <SendToScreen>
}
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000024 	.word	0x20000024
 80024b0:	2000001c 	.word	0x2000001c

080024b4 <Window>:

void Window(void){
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0

	for(int i=1; i<319;i++){
 80024ba:	2301      	movs	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	e013      	b.n	80024e8 <Window+0x34>
			for(int j=1;j<182;j++){
 80024c0:	2301      	movs	r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	e00a      	b.n	80024dc <Window+0x28>

					TM_LCD_DrawPixel(i, j, LCD_COLOR_BLACK);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	b291      	uxth	r1, r2
 80024ce:	2200      	movs	r2, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f005 fef9 	bl	80082c8 <TM_LCD_DrawPixel>
			for(int j=1;j<182;j++){
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	3301      	adds	r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2bb5      	cmp	r3, #181	; 0xb5
 80024e0:	ddf1      	ble.n	80024c6 <Window+0x12>
	for(int i=1; i<319;i++){
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	3301      	adds	r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 80024ee:	dde7      	ble.n	80024c0 <Window+0xc>

			}
		}

		for(int i=1; i<319;i++){
 80024f0:	2301      	movs	r3, #1
 80024f2:	607b      	str	r3, [r7, #4]
 80024f4:	e04a      	b.n	800258c <Window+0xd8>
			for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 80024f6:	2301      	movs	r3, #1
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	e035      	b.n	8002568 <Window+0xb4>
				if(j==91){
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b5b      	cmp	r3, #91	; 0x5b
 8002500:	d114      	bne.n	800252c <Window+0x78>
					if(i%3==0){
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	4b25      	ldr	r3, [pc, #148]	; (800259c <Window+0xe8>)
 8002506:	fb83 3201 	smull	r3, r2, r3, r1
 800250a:	17cb      	asrs	r3, r1, #31
 800250c:	1ad2      	subs	r2, r2, r3
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	1aca      	subs	r2, r1, r3
 8002516:	2a00      	cmp	r2, #0
 8002518:	d108      	bne.n	800252c <Window+0x78>
						TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	b29b      	uxth	r3, r3
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	b291      	uxth	r1, r2
 8002522:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002526:	4618      	mov	r0, r3
 8002528:	f005 fece 	bl	80082c8 <TM_LCD_DrawPixel>
					}
				}
				if((i%16==0)&&(j%9==0))	TM_LCD_DrawPixel(i, j, LCD_COLOR_WHITE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	2b00      	cmp	r3, #0
 8002534:	d115      	bne.n	8002562 <Window+0xae>
 8002536:	6839      	ldr	r1, [r7, #0]
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <Window+0xec>)
 800253a:	fb83 2301 	smull	r2, r3, r3, r1
 800253e:	105a      	asrs	r2, r3, #1
 8002540:	17cb      	asrs	r3, r1, #31
 8002542:	1ad2      	subs	r2, r2, r3
 8002544:	4613      	mov	r3, r2
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4413      	add	r3, r2
 800254a:	1aca      	subs	r2, r1, r3
 800254c:	2a00      	cmp	r2, #0
 800254e:	d108      	bne.n	8002562 <Window+0xae>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	b29b      	uxth	r3, r3
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	b291      	uxth	r1, r2
 8002558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800255c:	4618      	mov	r0, r3
 800255e:	f005 feb3 	bl	80082c8 <TM_LCD_DrawPixel>
			for(int j=1;j<TM_LCD_GetHeight()*3/4;j++){
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	f005 ff3e 	bl	80083e8 <TM_LCD_GetHeight>
 800256c:	4603      	mov	r3, r0
 800256e:	461a      	mov	r2, r3
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	2b00      	cmp	r3, #0
 8002578:	da00      	bge.n	800257c <Window+0xc8>
 800257a:	3303      	adds	r3, #3
 800257c:	109b      	asrs	r3, r3, #2
 800257e:	461a      	mov	r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	4293      	cmp	r3, r2
 8002584:	dbba      	blt.n	80024fc <Window+0x48>
		for(int i=1; i<319;i++){
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3301      	adds	r3, #1
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f5b3 7f9f 	cmp.w	r3, #318	; 0x13e
 8002592:	ddb0      	ble.n	80024f6 <Window+0x42>
			}
		}
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	55555556 	.word	0x55555556
 80025a0:	38e38e39 	.word	0x38e38e39
 80025a4:	00000000 	.word	0x00000000

080025a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	f5ad 4d1c 	sub.w	sp, sp, #39936	; 0x9c00
 80025ae:	b093      	sub	sp, #76	; 0x4c
 80025b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b2:	f000 fbc9 	bl	8002d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b6:	f000 f881 	bl	80026bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //MX_SPI1_Init();
  StartScreen();
 80025ba:	f7ff f9eb 	bl	8001994 <StartScreen>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025be:	f7ff f951 	bl	8001864 <MX_GPIO_Init>
  MX_DMA_Init();
 80025c2:	f7fe ffeb 	bl	800159c <MX_DMA_Init>
  MX_DMA2D_Init();
 80025c6:	f7ff f81f 	bl	8001608 <MX_DMA2D_Init>
  MX_FMC_Init();
 80025ca:	f7ff f871 	bl	80016b0 <MX_FMC_Init>
  MX_SPI1_Init();
 80025ce:	f000 f905 	bl	80027dc <MX_SPI1_Init>
  MX_ADC3_Init();
 80025d2:	f7fe fce9 	bl	8000fa8 <MX_ADC3_Init>
  MX_DAC_Init();
 80025d6:	f7fe fe2b 	bl	8001230 <MX_DAC_Init>
  MX_USART1_UART_Init();
 80025da:	f000 facf 	bl	8002b7c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80025de:	f000 fa67 	bl	8002ab0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  start_timer();
 80025e2:	f000 fac1 	bl	8002b68 <start_timer>
//      /* Start Conversation Error */
//      Error_Handler();
//    }

  int sig[10000];
  for(int i=0;i<10000;i++){
 80025e6:	2300      	movs	r3, #0
 80025e8:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 80025ec:	f102 0244 	add.w	r2, r2, #68	; 0x44
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	e041      	b.n	8002678 <main+0xd0>
	  sig[i] = 2048 *sin (0.03*i)+2048;
 80025f4:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 80025f8:	f103 0344 	add.w	r3, r3, #68	; 0x44
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	f7fd ffa1 	bl	8000544 <__aeabi_i2d>
 8002602:	a32c      	add	r3, pc, #176	; (adr r3, 80026b4 <main+0x10c>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f7fe f806 	bl	8000618 <__aeabi_dmul>
 800260c:	4603      	mov	r3, r0
 800260e:	460c      	mov	r4, r1
 8002610:	ec44 3b17 	vmov	d7, r3, r4
 8002614:	eeb0 0a47 	vmov.f32	s0, s14
 8002618:	eef0 0a67 	vmov.f32	s1, s15
 800261c:	f00a fb94 	bl	800cd48 <sin>
 8002620:	ec51 0b10 	vmov	r0, r1, d0
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <main+0x100>)
 800262a:	f7fd fff5 	bl	8000618 <__aeabi_dmul>
 800262e:	4603      	mov	r3, r0
 8002630:	460c      	mov	r4, r1
 8002632:	4618      	mov	r0, r3
 8002634:	4621      	mov	r1, r4
 8002636:	f04f 0200 	mov.w	r2, #0
 800263a:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <main+0x100>)
 800263c:	f7fd fe36 	bl	80002ac <__adddf3>
 8002640:	4603      	mov	r3, r0
 8002642:	460c      	mov	r4, r1
 8002644:	4618      	mov	r0, r3
 8002646:	4621      	mov	r1, r4
 8002648:	f7fe fa96 	bl	8000b78 <__aeabi_d2iz>
 800264c:	4601      	mov	r1, r0
 800264e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002652:	3b44      	subs	r3, #68	; 0x44
 8002654:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 8002658:	f102 0244 	add.w	r2, r2, #68	; 0x44
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(int i=0;i<10000;i++){
 8002662:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 8002666:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	f507 421c 	add.w	r2, r7, #39936	; 0x9c00
 8002672:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8002676:	6013      	str	r3, [r2, #0]
 8002678:	f507 431c 	add.w	r3, r7, #39936	; 0x9c00
 800267c:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f242 720f 	movw	r2, #9999	; 0x270f
 8002686:	4293      	cmp	r3, r2
 8002688:	ddb4      	ble.n	80025f4 <main+0x4c>
  }
  ShowSignal(sig,"sid");
 800268a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800268e:	3b44      	subs	r3, #68	; 0x44
 8002690:	4906      	ldr	r1, [pc, #24]	; (80026ac <main+0x104>)
 8002692:	4618      	mov	r0, r3
 8002694:	f7ff fea2 	bl	80023dc <ShowSignal>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8002698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800269c:	4804      	ldr	r0, [pc, #16]	; (80026b0 <main+0x108>)
 800269e:	f002 f9dc 	bl	8004a5a <HAL_GPIO_TogglePin>
	  generate();
 80026a2:	f7fe fd4b 	bl	800113c <generate>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 80026a6:	e7f7      	b.n	8002698 <main+0xf0>
 80026a8:	40a00000 	.word	0x40a00000
 80026ac:	0800de2c 	.word	0x0800de2c
 80026b0:	40021800 	.word	0x40021800
 80026b4:	eb851eb8 	.word	0xeb851eb8
 80026b8:	3f9eb851 	.word	0x3f9eb851

080026bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b0a0      	sub	sp, #128	; 0x80
 80026c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026c6:	2230      	movs	r2, #48	; 0x30
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f006 fe26 	bl	800931c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	2230      	movs	r2, #48	; 0x30
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f006 fe17 	bl	800931c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <SystemClock_Config+0x110>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4a35      	ldr	r2, [pc, #212]	; (80027cc <SystemClock_Config+0x110>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fc:	6413      	str	r3, [r2, #64]	; 0x40
 80026fe:	4b33      	ldr	r3, [pc, #204]	; (80027cc <SystemClock_Config+0x110>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002706:	60bb      	str	r3, [r7, #8]
 8002708:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800270a:	2300      	movs	r3, #0
 800270c:	607b      	str	r3, [r7, #4]
 800270e:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <SystemClock_Config+0x114>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a2f      	ldr	r2, [pc, #188]	; (80027d0 <SystemClock_Config+0x114>)
 8002714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	4b2d      	ldr	r3, [pc, #180]	; (80027d0 <SystemClock_Config+0x114>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002722:	607b      	str	r3, [r7, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002726:	2301      	movs	r3, #1
 8002728:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800272a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800272e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002730:	2302      	movs	r3, #2
 8002732:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002734:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002738:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800273a:	2308      	movs	r3, #8
 800273c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 360;
 800273e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002742:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002744:	2302      	movs	r3, #2
 8002746:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002748:	2304      	movs	r3, #4
 800274a:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800274c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002750:	4618      	mov	r0, r3
 8002752:	f002 fdcd 	bl	80052f0 <HAL_RCC_OscConfig>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800275c:	f000 f83a 	bl	80027d4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002760:	f002 fd76 	bl	8005250 <HAL_PWREx_EnableOverDrive>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800276a:	f000 f833 	bl	80027d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800276e:	230f      	movs	r3, #15
 8002770:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002772:	2302      	movs	r3, #2
 8002774:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002776:	2300      	movs	r3, #0
 8002778:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800277a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800277e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8002780:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002784:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002786:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800278a:	2105      	movs	r1, #5
 800278c:	4618      	mov	r0, r3
 800278e:	f003 f81f 	bl	80057d0 <HAL_RCC_ClockConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002798:	f000 f81c 	bl	80027d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800279c:	2308      	movs	r3, #8
 800279e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80027a0:	23c0      	movs	r3, #192	; 0xc0
 80027a2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80027a4:	2304      	movs	r3, #4
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80027a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ae:	f107 030c 	add.w	r3, r7, #12
 80027b2:	4618      	mov	r0, r3
 80027b4:	f003 f9fe 	bl	8005bb4 <HAL_RCCEx_PeriphCLKConfig>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <SystemClock_Config+0x106>
  {
    Error_Handler();
 80027be:	f000 f809 	bl	80027d4 <Error_Handler>
  }
}
 80027c2:	bf00      	nop
 80027c4:	3780      	adds	r7, #128	; 0x80
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40007000 	.word	0x40007000

080027d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027da:	e7fe      	b.n	80027da <Error_Handler+0x6>

080027dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80027e0:	4b17      	ldr	r3, [pc, #92]	; (8002840 <MX_SPI1_Init+0x64>)
 80027e2:	4a18      	ldr	r2, [pc, #96]	; (8002844 <MX_SPI1_Init+0x68>)
 80027e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80027e6:	4b16      	ldr	r3, [pc, #88]	; (8002840 <MX_SPI1_Init+0x64>)
 80027e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80027ee:	4b14      	ldr	r3, [pc, #80]	; (8002840 <MX_SPI1_Init+0x64>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <MX_SPI1_Init+0x64>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027fa:	4b11      	ldr	r3, [pc, #68]	; (8002840 <MX_SPI1_Init+0x64>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <MX_SPI1_Init+0x64>)
 8002802:	2200      	movs	r2, #0
 8002804:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002806:	4b0e      	ldr	r3, [pc, #56]	; (8002840 <MX_SPI1_Init+0x64>)
 8002808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800280c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <MX_SPI1_Init+0x64>)
 8002810:	2200      	movs	r2, #0
 8002812:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <MX_SPI1_Init+0x64>)
 8002816:	2200      	movs	r2, #0
 8002818:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800281a:	4b09      	ldr	r3, [pc, #36]	; (8002840 <MX_SPI1_Init+0x64>)
 800281c:	2200      	movs	r2, #0
 800281e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <MX_SPI1_Init+0x64>)
 8002822:	2200      	movs	r2, #0
 8002824:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <MX_SPI1_Init+0x64>)
 8002828:	220a      	movs	r2, #10
 800282a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800282c:	4804      	ldr	r0, [pc, #16]	; (8002840 <MX_SPI1_Init+0x64>)
 800282e:	f003 fbfe 	bl	800602e <HAL_SPI_Init>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002838:	f7ff ffcc 	bl	80027d4 <Error_Handler>
  }

}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000c40 	.word	0x20000c40
 8002844:	40013000 	.word	0x40013000

08002848 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b08a      	sub	sp, #40	; 0x28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a28      	ldr	r2, [pc, #160]	; (8002908 <HAL_SPI_MspInit+0xc0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d149      	bne.n	80028fe <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	4b27      	ldr	r3, [pc, #156]	; (800290c <HAL_SPI_MspInit+0xc4>)
 8002870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002872:	4a26      	ldr	r2, [pc, #152]	; (800290c <HAL_SPI_MspInit+0xc4>)
 8002874:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002878:	6453      	str	r3, [r2, #68]	; 0x44
 800287a:	4b24      	ldr	r3, [pc, #144]	; (800290c <HAL_SPI_MspInit+0xc4>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <HAL_SPI_MspInit+0xc4>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a1f      	ldr	r2, [pc, #124]	; (800290c <HAL_SPI_MspInit+0xc4>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b1d      	ldr	r3, [pc, #116]	; (800290c <HAL_SPI_MspInit+0xc4>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b19      	ldr	r3, [pc, #100]	; (800290c <HAL_SPI_MspInit+0xc4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_SPI_MspInit+0xc4>)
 80028ac:	f043 0302 	orr.w	r3, r3, #2
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <HAL_SPI_MspInit+0xc4>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c2:	2302      	movs	r3, #2
 80028c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ca:	2303      	movs	r3, #3
 80028cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ce:	2305      	movs	r3, #5
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	4619      	mov	r1, r3
 80028d8:	480d      	ldr	r0, [pc, #52]	; (8002910 <HAL_SPI_MspInit+0xc8>)
 80028da:	f001 fefb 	bl	80046d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80028de:	2318      	movs	r3, #24
 80028e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e2:	2302      	movs	r3, #2
 80028e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ea:	2303      	movs	r3, #3
 80028ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ee:	2305      	movs	r3, #5
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	4619      	mov	r1, r3
 80028f8:	4806      	ldr	r0, [pc, #24]	; (8002914 <HAL_SPI_MspInit+0xcc>)
 80028fa:	f001 feeb 	bl	80046d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80028fe:	bf00      	nop
 8002900:	3728      	adds	r7, #40	; 0x28
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40013000 	.word	0x40013000
 800290c:	40023800 	.word	0x40023800
 8002910:	40020000 	.word	0x40020000
 8002914:	40020400 	.word	0x40020400

08002918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	607b      	str	r3, [r7, #4]
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_MspInit+0x4c>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	4a0f      	ldr	r2, [pc, #60]	; (8002964 <HAL_MspInit+0x4c>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800292c:	6453      	str	r3, [r2, #68]	; 0x44
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_MspInit+0x4c>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002936:	607b      	str	r3, [r7, #4]
 8002938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	603b      	str	r3, [r7, #0]
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <HAL_MspInit+0x4c>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	4a08      	ldr	r2, [pc, #32]	; (8002964 <HAL_MspInit+0x4c>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
 800294a:	4b06      	ldr	r3, [pc, #24]	; (8002964 <HAL_MspInit+0x4c>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800

08002968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800296c:	e7fe      	b.n	800296c <NMI_Handler+0x4>

0800296e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002972:	e7fe      	b.n	8002972 <HardFault_Handler+0x4>

08002974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002978:	e7fe      	b.n	8002978 <MemManage_Handler+0x4>

0800297a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <BusFault_Handler+0x4>

08002980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <UsageFault_Handler+0x4>

08002986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002998:	bf00      	nop
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b4:	f004 fdaa 	bl	800750c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}

080029bc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <DMA1_Stream6_IRQHandler+0x10>)
 80029c2:	f001 f993 	bl	8003cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000b64 	.word	0x20000b64

080029d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029d4:	4803      	ldr	r0, [pc, #12]	; (80029e4 <USART1_IRQHandler+0x14>)
 80029d6:	f003 fe95 	bl	8006704 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  USER_UART_IRQHandler(&huart1);
 80029da:	4802      	ldr	r0, [pc, #8]	; (80029e4 <USART1_IRQHandler+0x14>)
 80029dc:	f000 f948 	bl	8002c70 <USER_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000ce8 	.word	0x20000ce8

080029e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80029ec:	4803      	ldr	r0, [pc, #12]	; (80029fc <TIM6_DAC_IRQHandler+0x14>)
 80029ee:	f000 fe92 	bl	8003716 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80029f2:	4803      	ldr	r0, [pc, #12]	; (8002a00 <TIM6_DAC_IRQHandler+0x18>)
 80029f4:	f003 fbce 	bl	8006194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000b50 	.word	0x20000b50
 8002a00:	20000c98 	.word	0x20000c98

08002a04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <DMA2_Stream0_IRQHandler+0x10>)
 8002a0a:	f001 f96f 	bl	8003cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000588 	.word	0x20000588

08002a18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a20:	4a14      	ldr	r2, [pc, #80]	; (8002a74 <_sbrk+0x5c>)
 8002a22:	4b15      	ldr	r3, [pc, #84]	; (8002a78 <_sbrk+0x60>)
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <_sbrk+0x64>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d102      	bne.n	8002a3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <_sbrk+0x64>)
 8002a36:	4a12      	ldr	r2, [pc, #72]	; (8002a80 <_sbrk+0x68>)
 8002a38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <_sbrk+0x64>)
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4413      	add	r3, r2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d207      	bcs.n	8002a58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a48:	f006 fc12 	bl	8009270 <__errno>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	230c      	movs	r3, #12
 8002a50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a56:	e009      	b.n	8002a6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a58:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <_sbrk+0x64>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <_sbrk+0x64>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	4a05      	ldr	r2, [pc, #20]	; (8002a7c <_sbrk+0x64>)
 8002a68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20030000 	.word	0x20030000
 8002a78:	00000400 	.word	0x00000400
 8002a7c:	2000021c 	.word	0x2000021c
 8002a80:	20000d60 	.word	0x20000d60

08002a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <SystemInit+0x28>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <SystemInit+0x28>)
 8002a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <SystemInit+0x28>)
 8002a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a9e:	609a      	str	r2, [r3, #8]
#endif
}
 8002aa0:	bf00      	nop
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab6:	463b      	mov	r3, r7
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <MX_TIM6_Init+0x60>)
 8002ac0:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <MX_TIM6_Init+0x64>)
 8002ac2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <MX_TIM6_Init+0x60>)
 8002ac6:	2259      	movs	r2, #89	; 0x59
 8002ac8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <MX_TIM6_Init+0x60>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8002ad0:	4b0f      	ldr	r3, [pc, #60]	; (8002b10 <MX_TIM6_Init+0x60>)
 8002ad2:	2263      	movs	r2, #99	; 0x63
 8002ad4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <MX_TIM6_Init+0x60>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002adc:	480c      	ldr	r0, [pc, #48]	; (8002b10 <MX_TIM6_Init+0x60>)
 8002ade:	f003 fb0a 	bl	80060f6 <HAL_TIM_Base_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002ae8:	f7ff fe74 	bl	80027d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002aec:	2320      	movs	r3, #32
 8002aee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002af4:	463b      	mov	r3, r7
 8002af6:	4619      	mov	r1, r3
 8002af8:	4805      	ldr	r0, [pc, #20]	; (8002b10 <MX_TIM6_Init+0x60>)
 8002afa:	f003 fd25 	bl	8006548 <HAL_TIMEx_MasterConfigSynchronization>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8002b04:	f7ff fe66 	bl	80027d4 <Error_Handler>
  }

}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000c98 	.word	0x20000c98
 8002b14:	40001000 	.word	0x40001000

08002b18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <HAL_TIM_Base_MspInit+0x48>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d115      	bne.n	8002b56 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	; (8002b64 <HAL_TIM_Base_MspInit+0x4c>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <HAL_TIM_Base_MspInit+0x4c>)
 8002b34:	f043 0310 	orr.w	r3, r3, #16
 8002b38:	6413      	str	r3, [r2, #64]	; 0x40
 8002b3a:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_TIM_Base_MspInit+0x4c>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	2036      	movs	r0, #54	; 0x36
 8002b4c:	f000 fc9b 	bl	8003486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b50:	2036      	movs	r0, #54	; 0x36
 8002b52:	f000 fcb4 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002b56:	bf00      	nop
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40001000 	.word	0x40001000
 8002b64:	40023800 	.word	0x40023800

08002b68 <start_timer>:
  /* USER CODE END TIM6_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void start_timer() {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <start_timer+0x10>)
 8002b6e:	f003 faed 	bl	800614c <HAL_TIM_Base_Start_IT>
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000c98 	.word	0x20000c98

08002b7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002b80:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002b82:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <MX_USART1_UART_Init+0x50>)
 8002b84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002b88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002ba2:	220c      	movs	r2, #12
 8002ba4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bb2:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_USART1_UART_Init+0x4c>)
 8002bb4:	f003 fd58 	bl	8006668 <HAL_UART_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bbe:	f7ff fe09 	bl	80027d4 <Error_Handler>
  }

}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000ce8 	.word	0x20000ce8
 8002bcc:	40011000 	.word	0x40011000

08002bd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08a      	sub	sp, #40	; 0x28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd8:	f107 0314 	add.w	r3, r7, #20
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_UART_MspInit+0x94>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d134      	bne.n	8002c5c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_UART_MspInit+0x98>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_UART_MspInit+0x98>)
 8002bfc:	f043 0310 	orr.w	r3, r3, #16
 8002c00:	6453      	str	r3, [r2, #68]	; 0x44
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_UART_MspInit+0x98>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_UART_MspInit+0x98>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c16:	4a14      	ldr	r2, [pc, #80]	; (8002c68 <HAL_UART_MspInit+0x98>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1e:	4b12      	ldr	r3, [pc, #72]	; (8002c68 <HAL_UART_MspInit+0x98>)
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c2a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4619      	mov	r1, r3
 8002c46:	4809      	ldr	r0, [pc, #36]	; (8002c6c <HAL_UART_MspInit+0x9c>)
 8002c48:	f001 fd44 	bl	80046d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2100      	movs	r1, #0
 8002c50:	2025      	movs	r0, #37	; 0x25
 8002c52:	f000 fc18 	bl	8003486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c56:	2025      	movs	r0, #37	; 0x25
 8002c58:	f000 fc31 	bl	80034be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3728      	adds	r7, #40	; 0x28
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40011000 	.word	0x40011000
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020000 	.word	0x40020000

08002c70 <USER_UART_IRQHandler>:

/* USER CODE BEGIN 1 */
char RX_BUFFER[BUFSIZE];
int RX_BUFFER_HEAD, RX_BUFFER_TAIL;

void  USER_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	if( huart ->Instance  ==  USART1 ) {
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a17      	ldr	r2, [pc, #92]	; (8002cdc <USER_UART_IRQHandler+0x6c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d125      	bne.n	8002cce <USER_UART_IRQHandler+0x5e>
		rx_data = __HAL_UART_FLUSH_DRREGISTER( huart );
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <USER_UART_IRQHandler+0x70>)
 8002c8c:	701a      	strb	r2, [r3, #0]

		static  char  rx_head;
		rx_head = RX_BUFFER_HEAD + 1;
 8002c8e:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <USER_UART_IRQHandler+0x74>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <USER_UART_IRQHandler+0x78>)
 8002c9a:	701a      	strb	r2, [r3, #0]
		if( rx_head  ==  BUFSIZE ) {
 8002c9c:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <USER_UART_IRQHandler+0x78>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b10      	cmp	r3, #16
 8002ca2:	d102      	bne.n	8002caa <USER_UART_IRQHandler+0x3a>
			rx_head = 0;
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <USER_UART_IRQHandler+0x78>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
		}
		if( rx_head  !=  RX_BUFFER_TAIL ) {
 8002caa:	4b0f      	ldr	r3, [pc, #60]	; (8002ce8 <USER_UART_IRQHandler+0x78>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <USER_UART_IRQHandler+0x7c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d00a      	beq.n	8002cce <USER_UART_IRQHandler+0x5e>
			RX_BUFFER[RX_BUFFER_HEAD] = rx_data;
 8002cb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <USER_UART_IRQHandler+0x74>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <USER_UART_IRQHandler+0x70>)
 8002cbe:	7811      	ldrb	r1, [r2, #0]
 8002cc0:	4a0b      	ldr	r2, [pc, #44]	; (8002cf0 <USER_UART_IRQHandler+0x80>)
 8002cc2:	54d1      	strb	r1, [r2, r3]
			RX_BUFFER_HEAD = rx_head;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <USER_UART_IRQHandler+0x78>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <USER_UART_IRQHandler+0x74>)
 8002ccc:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	40011000 	.word	0x40011000
 8002ce0:	200008b0 	.word	0x200008b0
 8002ce4:	20000d28 	.word	0x20000d28
 8002ce8:	20000220 	.word	0x20000220
 8002cec:	20000d2c 	.word	0x20000d2c
 8002cf0:	20000cd8 	.word	0x20000cd8

08002cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d2c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cfa:	e003      	b.n	8002d04 <LoopCopyDataInit>

08002cfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d02:	3104      	adds	r1, #4

08002d04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d04:	480b      	ldr	r0, [pc, #44]	; (8002d34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d0c:	d3f6      	bcc.n	8002cfc <CopyDataInit>
  ldr  r2, =_sbss
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d10:	e002      	b.n	8002d18 <LoopFillZerobss>

08002d12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d14:	f842 3b04 	str.w	r3, [r2], #4

08002d18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d1c:	d3f9      	bcc.n	8002d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d1e:	f7ff feb1 	bl	8002a84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d22:	f006 faab 	bl	800927c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d26:	f7ff fc3f 	bl	80025a8 <main>
  bx  lr    
 8002d2a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002d2c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002d30:	0800f7b8 	.word	0x0800f7b8
  ldr  r0, =_sdata
 8002d34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d38:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 8002d3c:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8002d40:	20000d60 	.word	0x20000d60

08002d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d44:	e7fe      	b.n	8002d44 <ADC_IRQHandler>
	...

08002d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d4c:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <HAL_Init+0x40>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <HAL_Init+0x40>)
 8002d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_Init+0x40>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <HAL_Init+0x40>)
 8002d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d64:	4b08      	ldr	r3, [pc, #32]	; (8002d88 <HAL_Init+0x40>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <HAL_Init+0x40>)
 8002d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d70:	2003      	movs	r0, #3
 8002d72:	f000 fb7d 	bl	8003470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f000 f808 	bl	8002d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d7c:	f7ff fdcc 	bl	8002918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00

08002d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d94:	4b12      	ldr	r3, [pc, #72]	; (8002de0 <HAL_InitTick+0x54>)
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_InitTick+0x58>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fb95 	bl	80034da <HAL_SYSTICK_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e00e      	b.n	8002dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b0f      	cmp	r3, #15
 8002dbe:	d80a      	bhi.n	8002dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dc8:	f000 fb5d 	bl	8003486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dcc:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <HAL_InitTick+0x5c>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	2000000c 	.word	0x2000000c
 8002de4:	20000014 	.word	0x20000014
 8002de8:	20000010 	.word	0x20000010

08002dec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e033      	b.n	8002e6a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe f91e 	bl	800104c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d118      	bne.n	8002e5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e32:	f023 0302 	bic.w	r3, r3, #2
 8002e36:	f043 0202 	orr.w	r2, r3, #2
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f94a 	bl	80030d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f023 0303 	bic.w	r3, r3, #3
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
 8002e5a:	e001      	b.n	8002e60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1c>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e113      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x244>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b09      	cmp	r3, #9
 8002e9e:	d925      	bls.n	8002eec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68d9      	ldr	r1, [r3, #12]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3b1e      	subs	r3, #30
 8002eb6:	2207      	movs	r2, #7
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68d9      	ldr	r1, [r3, #12]
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	4603      	mov	r3, r0
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	4403      	add	r3, r0
 8002ede:	3b1e      	subs	r3, #30
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	e022      	b.n	8002f32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6919      	ldr	r1, [r3, #16]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4613      	mov	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4413      	add	r3, r2
 8002f00:	2207      	movs	r2, #7
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43da      	mvns	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4403      	add	r3, r0
 8002f28:	409a      	lsls	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d824      	bhi.n	8002f84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	3b05      	subs	r3, #5
 8002f4c:	221f      	movs	r2, #31
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	43da      	mvns	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	400a      	ands	r2, r1
 8002f5a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	4618      	mov	r0, r3
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	3b05      	subs	r3, #5
 8002f76:	fa00 f203 	lsl.w	r2, r0, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
 8002f82:	e04c      	b.n	800301e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b0c      	cmp	r3, #12
 8002f8a:	d824      	bhi.n	8002fd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3b23      	subs	r3, #35	; 0x23
 8002f9e:	221f      	movs	r2, #31
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	400a      	ands	r2, r1
 8002fac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3b23      	subs	r3, #35	; 0x23
 8002fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002fd4:	e023      	b.n	800301e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3b41      	subs	r3, #65	; 0x41
 8002fe8:	221f      	movs	r2, #31
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	b29b      	uxth	r3, r3
 8003004:	4618      	mov	r0, r3
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	3b41      	subs	r3, #65	; 0x41
 8003012:	fa00 f203 	lsl.w	r2, r0, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	430a      	orrs	r2, r1
 800301c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800301e:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <HAL_ADC_ConfigChannel+0x250>)
 8003020:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a28      	ldr	r2, [pc, #160]	; (80030c8 <HAL_ADC_ConfigChannel+0x254>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d10f      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1d8>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b12      	cmp	r3, #18
 8003032:	d10b      	bne.n	800304c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_ADC_ConfigChannel+0x254>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d12b      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x23a>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1c      	ldr	r2, [pc, #112]	; (80030cc <HAL_ADC_ConfigChannel+0x258>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d003      	beq.n	8003068 <HAL_ADC_ConfigChannel+0x1f4>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b11      	cmp	r3, #17
 8003066:	d122      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a11      	ldr	r2, [pc, #68]	; (80030cc <HAL_ADC_ConfigChannel+0x258>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d111      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800308a:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <HAL_ADC_ConfigChannel+0x25c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a11      	ldr	r2, [pc, #68]	; (80030d4 <HAL_ADC_ConfigChannel+0x260>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	0c9a      	lsrs	r2, r3, #18
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030a0:	e002      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f9      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40012300 	.word	0x40012300
 80030c8:	40012000 	.word	0x40012000
 80030cc:	10000012 	.word	0x10000012
 80030d0:	2000000c 	.word	0x2000000c
 80030d4:	431bde83 	.word	0x431bde83

080030d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e0:	4b79      	ldr	r3, [pc, #484]	; (80032c8 <ADC_Init+0x1f0>)
 80030e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800310c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	021a      	lsls	r2, r3, #8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003130:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	430a      	orrs	r2, r1
 8003142:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003152:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6899      	ldr	r1, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316a:	4a58      	ldr	r2, [pc, #352]	; (80032cc <ADC_Init+0x1f4>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d022      	beq.n	80031b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800317e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6899      	ldr	r1, [r3, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6899      	ldr	r1, [r3, #8]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	e00f      	b.n	80031d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689a      	ldr	r2, [r3, #8]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0202 	bic.w	r2, r2, #2
 80031e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6899      	ldr	r1, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	7e1b      	ldrb	r3, [r3, #24]
 80031f0:	005a      	lsls	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01b      	beq.n	800323c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003212:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003222:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6859      	ldr	r1, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	3b01      	subs	r3, #1
 8003230:	035a      	lsls	r2, r3, #13
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	e007      	b.n	800324c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	3b01      	subs	r3, #1
 8003268:	051a      	lsls	r2, r3, #20
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6899      	ldr	r1, [r3, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800328e:	025a      	lsls	r2, r3, #9
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6899      	ldr	r1, [r3, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	029a      	lsls	r2, r3, #10
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	609a      	str	r2, [r3, #8]
}
 80032bc:	bf00      	nop
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	40012300 	.word	0x40012300
 80032cc:	0f000001 	.word	0x0f000001

080032d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032ec:	4013      	ands	r3, r2
 80032ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003302:	4a04      	ldr	r2, [pc, #16]	; (8003314 <__NVIC_SetPriorityGrouping+0x44>)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	60d3      	str	r3, [r2, #12]
}
 8003308:	bf00      	nop
 800330a:	3714      	adds	r7, #20
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800331c:	4b04      	ldr	r3, [pc, #16]	; (8003330 <__NVIC_GetPriorityGrouping+0x18>)
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	0a1b      	lsrs	r3, r3, #8
 8003322:	f003 0307 	and.w	r3, r3, #7
}
 8003326:	4618      	mov	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000ed00 	.word	0xe000ed00

08003334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800333e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003342:	2b00      	cmp	r3, #0
 8003344:	db0b      	blt.n	800335e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003346:	79fb      	ldrb	r3, [r7, #7]
 8003348:	f003 021f 	and.w	r2, r3, #31
 800334c:	4907      	ldr	r1, [pc, #28]	; (800336c <__NVIC_EnableIRQ+0x38>)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2001      	movs	r0, #1
 8003356:	fa00 f202 	lsl.w	r2, r0, r2
 800335a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000e100 	.word	0xe000e100

08003370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	6039      	str	r1, [r7, #0]
 800337a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003380:	2b00      	cmp	r3, #0
 8003382:	db0a      	blt.n	800339a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	490c      	ldr	r1, [pc, #48]	; (80033bc <__NVIC_SetPriority+0x4c>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	0112      	lsls	r2, r2, #4
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	440b      	add	r3, r1
 8003394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003398:	e00a      	b.n	80033b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4908      	ldr	r1, [pc, #32]	; (80033c0 <__NVIC_SetPriority+0x50>)
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	3b04      	subs	r3, #4
 80033a8:	0112      	lsls	r2, r2, #4
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	440b      	add	r3, r1
 80033ae:	761a      	strb	r2, [r3, #24]
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr
 80033bc:	e000e100 	.word	0xe000e100
 80033c0:	e000ed00 	.word	0xe000ed00

080033c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b089      	sub	sp, #36	; 0x24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f1c3 0307 	rsb	r3, r3, #7
 80033de:	2b04      	cmp	r3, #4
 80033e0:	bf28      	it	cs
 80033e2:	2304      	movcs	r3, #4
 80033e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3304      	adds	r3, #4
 80033ea:	2b06      	cmp	r3, #6
 80033ec:	d902      	bls.n	80033f4 <NVIC_EncodePriority+0x30>
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3b03      	subs	r3, #3
 80033f2:	e000      	b.n	80033f6 <NVIC_EncodePriority+0x32>
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43da      	mvns	r2, r3
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	401a      	ands	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800340c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	43d9      	mvns	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	4313      	orrs	r3, r2
         );
}
 800341e:	4618      	mov	r0, r3
 8003420:	3724      	adds	r7, #36	; 0x24
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3b01      	subs	r3, #1
 8003438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800343c:	d301      	bcc.n	8003442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800343e:	2301      	movs	r3, #1
 8003440:	e00f      	b.n	8003462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003442:	4a0a      	ldr	r2, [pc, #40]	; (800346c <SysTick_Config+0x40>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800344a:	210f      	movs	r1, #15
 800344c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003450:	f7ff ff8e 	bl	8003370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <SysTick_Config+0x40>)
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345a:	4b04      	ldr	r3, [pc, #16]	; (800346c <SysTick_Config+0x40>)
 800345c:	2207      	movs	r2, #7
 800345e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	e000e010 	.word	0xe000e010

08003470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f7ff ff29 	bl	80032d0 <__NVIC_SetPriorityGrouping>
}
 800347e:	bf00      	nop
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003486:	b580      	push	{r7, lr}
 8003488:	b086      	sub	sp, #24
 800348a:	af00      	add	r7, sp, #0
 800348c:	4603      	mov	r3, r0
 800348e:	60b9      	str	r1, [r7, #8]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003498:	f7ff ff3e 	bl	8003318 <__NVIC_GetPriorityGrouping>
 800349c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	6978      	ldr	r0, [r7, #20]
 80034a4:	f7ff ff8e 	bl	80033c4 <NVIC_EncodePriority>
 80034a8:	4602      	mov	r2, r0
 80034aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff5d 	bl	8003370 <__NVIC_SetPriority>
}
 80034b6:	bf00      	nop
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	4603      	mov	r3, r0
 80034c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ff31 	bl	8003334 <__NVIC_EnableIRQ>
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ffa2 	bl	800342c <SysTick_Config>
 80034e8:	4603      	mov	r3, r0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e014      	b.n	800352e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	791b      	ldrb	r3, [r3, #4]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d105      	bne.n	800351a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7fd feb5 	bl	8001284 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	795b      	ldrb	r3, [r3, #5]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_DAC_Start_DMA+0x1e>
 8003552:	2302      	movs	r3, #2
 8003554:	e08e      	b.n	8003674 <HAL_DAC_Start_DMA+0x13c>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2202      	movs	r2, #2
 8003560:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d12a      	bne.n	80035be <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	4a43      	ldr	r2, [pc, #268]	; (800367c <HAL_DAC_Start_DMA+0x144>)
 800356e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	4a42      	ldr	r2, [pc, #264]	; (8003680 <HAL_DAC_Start_DMA+0x148>)
 8003576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	4a41      	ldr	r2, [pc, #260]	; (8003684 <HAL_DAC_Start_DMA+0x14c>)
 800357e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800358e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	2b04      	cmp	r3, #4
 8003594:	d009      	beq.n	80035aa <HAL_DAC_Start_DMA+0x72>
 8003596:	2b08      	cmp	r3, #8
 8003598:	d00c      	beq.n	80035b4 <HAL_DAC_Start_DMA+0x7c>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d000      	beq.n	80035a0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800359e:	e039      	b.n	8003614 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	3308      	adds	r3, #8
 80035a6:	617b      	str	r3, [r7, #20]
        break;
 80035a8:	e034      	b.n	8003614 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	330c      	adds	r3, #12
 80035b0:	617b      	str	r3, [r7, #20]
        break;
 80035b2:	e02f      	b.n	8003614 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	3310      	adds	r3, #16
 80035ba:	617b      	str	r3, [r7, #20]
        break;
 80035bc:	e02a      	b.n	8003614 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	4a31      	ldr	r2, [pc, #196]	; (8003688 <HAL_DAC_Start_DMA+0x150>)
 80035c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	4a30      	ldr	r2, [pc, #192]	; (800368c <HAL_DAC_Start_DMA+0x154>)
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <HAL_DAC_Start_DMA+0x158>)
 80035d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035e4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d009      	beq.n	8003600 <HAL_DAC_Start_DMA+0xc8>
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d00c      	beq.n	800360a <HAL_DAC_Start_DMA+0xd2>
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d000      	beq.n	80035f6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80035f4:	e00e      	b.n	8003614 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3314      	adds	r3, #20
 80035fc:	617b      	str	r3, [r7, #20]
        break;
 80035fe:	e009      	b.n	8003614 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3318      	adds	r3, #24
 8003606:	617b      	str	r3, [r7, #20]
        break;
 8003608:	e004      	b.n	8003614 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	331c      	adds	r3, #28
 8003610:	617b      	str	r3, [r7, #20]
        break;
 8003612:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10f      	bne.n	800363a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003628:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6898      	ldr	r0, [r3, #8]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	f000 fa70 	bl	8003b18 <HAL_DMA_Start_IT>
 8003638:	e00e      	b.n	8003658 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003648:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	68d8      	ldr	r0, [r3, #12]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	f000 fa60 	bl	8003b18 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	409a      	lsls	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	08003895 	.word	0x08003895
 8003680:	080038b7 	.word	0x080038b7
 8003684:	080038d3 	.word	0x080038d3
 8003688:	08003951 	.word	0x08003951
 800368c:	08003973 	.word	0x08003973
 8003690:	0800398f 	.word	0x0800398f

08003694 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Disable the selected DAC channel DMA request */
   hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6819      	ldr	r1, [r3, #0]
 80036a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43da      	mvns	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	400a      	ands	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6819      	ldr	r1, [r3, #0]
 80036c2:	2201      	movs	r2, #1
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43da      	mvns	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	400a      	ands	r2, r1
 80036d2:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA Channel */
  /* Channel1 is used */
  if(Channel == DAC_CHANNEL_1)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d107      	bne.n	80036ea <HAL_DAC_Stop_DMA+0x56>
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fa72 	bl	8003bc8 <HAL_DMA_Abort>
 80036e4:	4603      	mov	r3, r0
 80036e6:	73fb      	strb	r3, [r7, #15]
 80036e8:	e006      	b.n	80036f8 <HAL_DAC_Stop_DMA+0x64>
  }
  else /* Channel2 is used for */
  { 
    status = HAL_DMA_Abort(hdac->DMA_Handle2); 
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fa6a 	bl	8003bc8 <HAL_DMA_Abort>
 80036f4:	4603      	mov	r3, r0
 80036f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Check if DMA Channel effectively disabled */
  if(status != HAL_OK)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_DAC_Stop_DMA+0x72>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2204      	movs	r2, #4
 8003702:	711a      	strb	r2, [r3, #4]
 8003704:	e002      	b.n	800370c <HAL_DAC_Stop_DMA+0x78>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800372c:	d118      	bne.n	8003760 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2204      	movs	r2, #4
 8003732:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f043 0201 	orr.w	r2, r3, #1
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003748:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003758:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f843 	bl	80037e6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003766:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800376a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800376e:	d118      	bne.n	80037a2 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2204      	movs	r2, #4
 8003774:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f043 0202 	orr.w	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800378a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800379a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f8cd 	bl	800393c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80037da:	bf00      	nop
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr

080037fa <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80037fa:	b480      	push	{r7}
 80037fc:	b087      	sub	sp, #28
 80037fe:	af00      	add	r7, sp, #0
 8003800:	60f8      	str	r0, [r7, #12]
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	2300      	movs	r3, #0
 800380c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	795b      	ldrb	r3, [r3, #5]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_DAC_ConfigChannel+0x20>
 8003816:	2302      	movs	r3, #2
 8003818:	e036      	b.n	8003888 <HAL_DAC_ConfigChannel+0x8e>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2202      	movs	r2, #2
 8003824:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800382e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	4013      	ands	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800384c:	693a      	ldr	r2, [r7, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	4313      	orrs	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6819      	ldr	r1, [r3, #0]
 8003868:	22c0      	movs	r2, #192	; 0xc0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43da      	mvns	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	400a      	ands	r2, r1
 8003878:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a0:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f7ff ff81 	bl	80037aa <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	711a      	strb	r2, [r3, #4]
}
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f7ff ff7a 	bl	80037be <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80038ca:	bf00      	nop
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b084      	sub	sp, #16
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f043 0204 	orr.w	r2, r3, #4
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f7ff ff70 	bl	80037d2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	711a      	strb	r2, [r3, #4]
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f7ff ffce 	bl	8003900 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	711a      	strb	r2, [r3, #4]
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800397e:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f7ff ffc7 	bl	8003914 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399a:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f043 0204 	orr.w	r2, r3, #4
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f7ff ffbd 	bl	8003928 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2201      	movs	r2, #1
 80039b2:	711a      	strb	r2, [r3, #4]
}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039c8:	f003 fe26 	bl	8007618 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e099      	b.n	8003b0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039f8:	e00f      	b.n	8003a1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039fa:	f003 fe0d 	bl	8007618 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	2b05      	cmp	r3, #5
 8003a06:	d908      	bls.n	8003a1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2203      	movs	r2, #3
 8003a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e078      	b.n	8003b0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e8      	bne.n	80039fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4b38      	ldr	r3, [pc, #224]	; (8003b14 <HAL_DMA_Init+0x158>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d107      	bne.n	8003a84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f023 0307 	bic.w	r3, r3, #7
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d117      	bne.n	8003ade <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00e      	beq.n	8003ade <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fb01 	bl	80040c8 <DMA_CheckFifoParam>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d008      	beq.n	8003ade <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2240      	movs	r2, #64	; 0x40
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ada:	2301      	movs	r3, #1
 8003adc:	e016      	b.n	8003b0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fab8 	bl	800405c <DMA_CalcBaseAndBitshift>
 8003aec:	4603      	mov	r3, r0
 8003aee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	223f      	movs	r2, #63	; 0x3f
 8003af6:	409a      	lsls	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2201      	movs	r2, #1
 8003b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	f010803f 	.word	0xf010803f

08003b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_DMA_Start_IT+0x26>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e040      	b.n	8003bc0 <HAL_DMA_Start_IT+0xa8>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d12f      	bne.n	8003bb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2202      	movs	r2, #2
 8003b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68b9      	ldr	r1, [r7, #8]
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 fa4a 	bl	8004000 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b70:	223f      	movs	r2, #63	; 0x3f
 8003b72:	409a      	lsls	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0216 	orr.w	r2, r2, #22
 8003b86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0208 	orr.w	r2, r2, #8
 8003b9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	e005      	b.n	8003bbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bd6:	f003 fd1f 	bl	8007618 <HAL_GetTick>
 8003bda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d008      	beq.n	8003bfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e052      	b.n	8003ca0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 0216 	bic.w	r2, r2, #22
 8003c08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d103      	bne.n	8003c2a <HAL_DMA_Abort+0x62>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0208 	bic.w	r2, r2, #8
 8003c38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c4a:	e013      	b.n	8003c74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c4c:	f003 fce4 	bl	8007618 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d90c      	bls.n	8003c74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e015      	b.n	8003ca0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e4      	bne.n	8003c4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	223f      	movs	r2, #63	; 0x3f
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d004      	beq.n	8003cc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e00c      	b.n	8003ce0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2205      	movs	r2, #5
 8003cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0201 	bic.w	r2, r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cf8:	4b92      	ldr	r3, [pc, #584]	; (8003f44 <HAL_DMA_IRQHandler+0x258>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a92      	ldr	r2, [pc, #584]	; (8003f48 <HAL_DMA_IRQHandler+0x25c>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	0a9b      	lsrs	r3, r3, #10
 8003d04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d16:	2208      	movs	r2, #8
 8003d18:	409a      	lsls	r2, r3
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01a      	beq.n	8003d58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d013      	beq.n	8003d58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0204 	bic.w	r2, r2, #4
 8003d3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	2208      	movs	r2, #8
 8003d46:	409a      	lsls	r2, r3
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d50:	f043 0201 	orr.w	r2, r3, #1
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d012      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d86:	f043 0202 	orr.w	r2, r3, #2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	2204      	movs	r2, #4
 8003d94:	409a      	lsls	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d012      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00b      	beq.n	8003dc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	2204      	movs	r2, #4
 8003db2:	409a      	lsls	r2, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	f043 0204 	orr.w	r2, r3, #4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc8:	2210      	movs	r2, #16
 8003dca:	409a      	lsls	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d043      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d03c      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	2210      	movs	r2, #16
 8003de8:	409a      	lsls	r2, r3
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d018      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d108      	bne.n	8003e1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d024      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	4798      	blx	r3
 8003e1a:	e01f      	b.n	8003e5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d01b      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	4798      	blx	r3
 8003e2c:	e016      	b.n	8003e5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d107      	bne.n	8003e4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0208 	bic.w	r2, r2, #8
 8003e4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	2220      	movs	r2, #32
 8003e62:	409a      	lsls	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 808e 	beq.w	8003f8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0310 	and.w	r3, r3, #16
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 8086 	beq.w	8003f8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	2220      	movs	r2, #32
 8003e84:	409a      	lsls	r2, r3
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d136      	bne.n	8003f04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f022 0216 	bic.w	r2, r2, #22
 8003ea4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003eb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <HAL_DMA_IRQHandler+0x1da>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0208 	bic.w	r2, r2, #8
 8003ed4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eda:	223f      	movs	r2, #63	; 0x3f
 8003edc:	409a      	lsls	r2, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d07d      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	4798      	blx	r3
        }
        return;
 8003f02:	e078      	b.n	8003ff6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d01c      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d108      	bne.n	8003f32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d030      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
 8003f30:	e02b      	b.n	8003f8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d027      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	4798      	blx	r3
 8003f42:	e022      	b.n	8003f8a <HAL_DMA_IRQHandler+0x29e>
 8003f44:	2000000c 	.word	0x2000000c
 8003f48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10f      	bne.n	8003f7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0210 	bic.w	r2, r2, #16
 8003f68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d032      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d022      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2205      	movs	r2, #5
 8003fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0201 	bic.w	r2, r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d307      	bcc.n	8003fd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f2      	bne.n	8003fb6 <HAL_DMA_IRQHandler+0x2ca>
 8003fd0:	e000      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003fd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d005      	beq.n	8003ff8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
 8003ff4:	e000      	b.n	8003ff8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ff6:	bf00      	nop
    }
  }
}
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop

08004000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800401c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b40      	cmp	r3, #64	; 0x40
 800402c:	d108      	bne.n	8004040 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800403e:	e007      	b.n	8004050 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	3b10      	subs	r3, #16
 800406c:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <DMA_CalcBaseAndBitshift+0x64>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004076:	4a13      	ldr	r2, [pc, #76]	; (80040c4 <DMA_CalcBaseAndBitshift+0x68>)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4413      	add	r3, r2
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d909      	bls.n	800409e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004092:	f023 0303 	bic.w	r3, r3, #3
 8004096:	1d1a      	adds	r2, r3, #4
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	659a      	str	r2, [r3, #88]	; 0x58
 800409c:	e007      	b.n	80040ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040a6:	f023 0303 	bic.w	r3, r3, #3
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	aaaaaaab 	.word	0xaaaaaaab
 80040c4:	0800de48 	.word	0x0800de48

080040c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d11f      	bne.n	8004122 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d855      	bhi.n	8004194 <DMA_CheckFifoParam+0xcc>
 80040e8:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <DMA_CheckFifoParam+0x28>)
 80040ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ee:	bf00      	nop
 80040f0:	08004101 	.word	0x08004101
 80040f4:	08004113 	.word	0x08004113
 80040f8:	08004101 	.word	0x08004101
 80040fc:	08004195 	.word	0x08004195
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d045      	beq.n	8004198 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004110:	e042      	b.n	8004198 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004116:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800411a:	d13f      	bne.n	800419c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004120:	e03c      	b.n	800419c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412a:	d121      	bne.n	8004170 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d836      	bhi.n	80041a0 <DMA_CheckFifoParam+0xd8>
 8004132:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <DMA_CheckFifoParam+0x70>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	08004149 	.word	0x08004149
 800413c:	0800414f 	.word	0x0800414f
 8004140:	08004149 	.word	0x08004149
 8004144:	08004161 	.word	0x08004161
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
      break;
 800414c:	e02f      	b.n	80041ae <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d024      	beq.n	80041a4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415e:	e021      	b.n	80041a4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004168:	d11e      	bne.n	80041a8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800416e:	e01b      	b.n	80041a8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d902      	bls.n	800417c <DMA_CheckFifoParam+0xb4>
 8004176:	2b03      	cmp	r3, #3
 8004178:	d003      	beq.n	8004182 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800417a:	e018      	b.n	80041ae <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      break;
 8004180:	e015      	b.n	80041ae <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00e      	beq.n	80041ac <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	73fb      	strb	r3, [r7, #15]
      break;
 8004192:	e00b      	b.n	80041ac <DMA_CheckFifoParam+0xe4>
      break;
 8004194:	bf00      	nop
 8004196:	e00a      	b.n	80041ae <DMA_CheckFifoParam+0xe6>
      break;
 8004198:	bf00      	nop
 800419a:	e008      	b.n	80041ae <DMA_CheckFifoParam+0xe6>
      break;
 800419c:	bf00      	nop
 800419e:	e006      	b.n	80041ae <DMA_CheckFifoParam+0xe6>
      break;
 80041a0:	bf00      	nop
 80041a2:	e004      	b.n	80041ae <DMA_CheckFifoParam+0xe6>
      break;
 80041a4:	bf00      	nop
 80041a6:	e002      	b.n	80041ae <DMA_CheckFifoParam+0xe6>
      break;   
 80041a8:	bf00      	nop
 80041aa:	e000      	b.n	80041ae <DMA_CheckFifoParam+0xe6>
      break;
 80041ac:	bf00      	nop
    }
  } 
  
  return status; 
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e03b      	b.n	8004246 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fd fa42 	bl	800166c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420c:	f023 0107 	bic.w	r1, r3, #7
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004226:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	68d1      	ldr	r1, [r2, #12]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	430b      	orrs	r3, r1
 8004234:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b086      	sub	sp, #24
 8004252:	af02      	add	r7, sp, #8
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004262:	2b01      	cmp	r3, #1
 8004264:	d101      	bne.n	800426a <HAL_DMA2D_Start+0x1c>
 8004266:	2302      	movs	r3, #2
 8004268:	e018      	b.n	800429c <HAL_DMA2D_Start+0x4e>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2202      	movs	r2, #2
 8004276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f989 	bl	800459c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f042 0201 	orr.w	r2, r2, #1
 8004298:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d056      	beq.n	800436e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80042c0:	f003 f9aa 	bl	8007618 <HAL_GetTick>
 80042c4:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80042c6:	e04b      	b.n	8004360 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d023      	beq.n	8004322 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e8:	f043 0202 	orr.w	r2, r3, #2
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d005      	beq.n	8004306 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	f043 0201 	orr.w	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2221      	movs	r2, #33	; 0x21
 800430c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2204      	movs	r2, #4
 8004312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e0a5      	b.n	800446e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004328:	d01a      	beq.n	8004360 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800432a:	f003 f975 	bl	8007618 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d302      	bcc.n	8004340 <HAL_DMA2D_PollForTransfer+0x9c>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10f      	bne.n	8004360 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	f043 0220 	orr.w	r2, r3, #32
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2203      	movs	r2, #3
 8004350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e086      	b.n	800446e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0ac      	beq.n	80042c8 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d061      	beq.n	8004454 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004390:	f003 f942 	bl	8007618 <HAL_GetTick>
 8004394:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004396:	e056      	b.n	8004446 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02e      	beq.n	8004408 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0308 	and.w	r3, r3, #8
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b8:	f043 0204 	orr.w	r2, r3, #4
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d005      	beq.n	80043d6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ce:	f043 0202 	orr.w	r2, r3, #2
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d005      	beq.n	80043ec <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	f043 0201 	orr.w	r2, r3, #1
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2229      	movs	r2, #41	; 0x29
 80043f2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2204      	movs	r2, #4
 80043f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e032      	b.n	800446e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800440e:	d01a      	beq.n	8004446 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004410:	f003 f902 	bl	8007618 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <HAL_DMA2D_PollForTransfer+0x182>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10f      	bne.n	8004446 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2203      	movs	r2, #3
 8004436:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e013      	b.n	800446e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0a1      	beq.n	8004398 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2212      	movs	r2, #18
 800445a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
	...

08004478 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_DMA2D_ConfigLayer+0x20>
 8004494:	2302      	movs	r3, #2
 8004496:	e079      	b.n	800458c <HAL_DMA2D_ConfigLayer+0x114>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	3318      	adds	r3, #24
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	041b      	lsls	r3, r3, #16
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80044c2:	4b35      	ldr	r3, [pc, #212]	; (8004598 <HAL_DMA2D_ConfigLayer+0x120>)
 80044c4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b0a      	cmp	r3, #10
 80044cc:	d003      	beq.n	80044d6 <HAL_DMA2D_ConfigLayer+0x5e>
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b09      	cmp	r3, #9
 80044d4:	d107      	bne.n	80044e6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e005      	b.n	80044f2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	061b      	lsls	r3, r3, #24
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d120      	bne.n	800453a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	43db      	mvns	r3, r3
 8004502:	ea02 0103 	and.w	r1, r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	430a      	orrs	r2, r1
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2b0a      	cmp	r3, #10
 8004520:	d003      	beq.n	800452a <HAL_DMA2D_ConfigLayer+0xb2>
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b09      	cmp	r3, #9
 8004528:	d127      	bne.n	800457a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004536:	629a      	str	r2, [r3, #40]	; 0x28
 8004538:	e01f      	b.n	800457a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	43db      	mvns	r3, r3
 8004544:	ea02 0103 	and.w	r1, r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	430a      	orrs	r2, r1
 8004550:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	6812      	ldr	r2, [r2, #0]
 800455a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b0a      	cmp	r3, #10
 8004562:	d003      	beq.n	800456c <HAL_DMA2D_ConfigLayer+0xf4>
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b09      	cmp	r3, #9
 800456a:	d106      	bne.n	800457a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004578:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	371c      	adds	r7, #28
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	ff03000f 	.word	0xff03000f

0800459c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800459c:	b480      	push	{r7}
 800459e:	b08b      	sub	sp, #44	; 0x2c
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	041a      	lsls	r2, r3, #16
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	431a      	orrs	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	430a      	orrs	r2, r1
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045d4:	d174      	bne.n	80046c0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045dc:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045e4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045ec:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d108      	bne.n	800460e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	431a      	orrs	r2, r3
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	4313      	orrs	r3, r2
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
 800460c:	e053      	b.n	80046b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d106      	bne.n	8004624 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	4313      	orrs	r3, r2
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
 8004622:	e048      	b.n	80046b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d111      	bne.n	8004650 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	0cdb      	lsrs	r3, r3, #19
 8004630:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	0a9b      	lsrs	r3, r3, #10
 8004636:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	08db      	lsrs	r3, r3, #3
 800463c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	02db      	lsls	r3, r3, #11
 8004646:	4313      	orrs	r3, r2
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
 800464e:	e032      	b.n	80046b6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d117      	bne.n	8004688 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	0fdb      	lsrs	r3, r3, #31
 800465c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	0cdb      	lsrs	r3, r3, #19
 8004662:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	0adb      	lsrs	r3, r3, #11
 8004668:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	08db      	lsrs	r3, r3, #3
 800466e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	029b      	lsls	r3, r3, #10
 8004678:	431a      	orrs	r2, r3
 800467a:	6a3b      	ldr	r3, [r7, #32]
 800467c:	03db      	lsls	r3, r3, #15
 800467e:	4313      	orrs	r3, r2
 8004680:	697a      	ldr	r2, [r7, #20]
 8004682:	4313      	orrs	r3, r2
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
 8004686:	e016      	b.n	80046b6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	0f1b      	lsrs	r3, r3, #28
 800468c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	0d1b      	lsrs	r3, r3, #20
 8004692:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	0b1b      	lsrs	r3, r3, #12
 8004698:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	011a      	lsls	r2, r3, #4
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	431a      	orrs	r2, r3
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	031b      	lsls	r3, r3, #12
 80046ae:	4313      	orrs	r3, r2
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80046be:	e003      	b.n	80046c8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	60da      	str	r2, [r3, #12]
}
 80046c8:	bf00      	nop
 80046ca:	372c      	adds	r7, #44	; 0x2c
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b089      	sub	sp, #36	; 0x24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	e177      	b.n	80049e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046f0:	2201      	movs	r2, #1
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	697a      	ldr	r2, [r7, #20]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	429a      	cmp	r2, r3
 800470a:	f040 8166 	bne.w	80049da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d00b      	beq.n	800472e <HAL_GPIO_Init+0x5a>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d007      	beq.n	800472e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004722:	2b11      	cmp	r3, #17
 8004724:	d003      	beq.n	800472e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2b12      	cmp	r3, #18
 800472c:	d130      	bne.n	8004790 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	2203      	movs	r2, #3
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	43db      	mvns	r3, r3
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	4013      	ands	r3, r2
 8004744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4313      	orrs	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004764:	2201      	movs	r2, #1
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 0201 	and.w	r2, r3, #1
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4313      	orrs	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	2203      	movs	r2, #3
 800479c:	fa02 f303 	lsl.w	r3, r2, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	69ba      	ldr	r2, [r7, #24]
 80047a4:	4013      	ands	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d003      	beq.n	80047d0 <HAL_GPIO_Init+0xfc>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b12      	cmp	r3, #18
 80047ce:	d123      	bne.n	8004818 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	08da      	lsrs	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3208      	adds	r2, #8
 80047d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	220f      	movs	r2, #15
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	08da      	lsrs	r2, r3, #3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3208      	adds	r2, #8
 8004812:	69b9      	ldr	r1, [r7, #24]
 8004814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	2203      	movs	r2, #3
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	43db      	mvns	r3, r3
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	4013      	ands	r3, r2
 800482e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0203 	and.w	r2, r3, #3
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 80c0 	beq.w	80049da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	4b65      	ldr	r3, [pc, #404]	; (80049f4 <HAL_GPIO_Init+0x320>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	4a64      	ldr	r2, [pc, #400]	; (80049f4 <HAL_GPIO_Init+0x320>)
 8004864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004868:	6453      	str	r3, [r2, #68]	; 0x44
 800486a:	4b62      	ldr	r3, [pc, #392]	; (80049f4 <HAL_GPIO_Init+0x320>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004876:	4a60      	ldr	r2, [pc, #384]	; (80049f8 <HAL_GPIO_Init+0x324>)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	089b      	lsrs	r3, r3, #2
 800487c:	3302      	adds	r3, #2
 800487e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	220f      	movs	r2, #15
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a57      	ldr	r2, [pc, #348]	; (80049fc <HAL_GPIO_Init+0x328>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d037      	beq.n	8004912 <HAL_GPIO_Init+0x23e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a56      	ldr	r2, [pc, #344]	; (8004a00 <HAL_GPIO_Init+0x32c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d031      	beq.n	800490e <HAL_GPIO_Init+0x23a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a55      	ldr	r2, [pc, #340]	; (8004a04 <HAL_GPIO_Init+0x330>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d02b      	beq.n	800490a <HAL_GPIO_Init+0x236>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a54      	ldr	r2, [pc, #336]	; (8004a08 <HAL_GPIO_Init+0x334>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d025      	beq.n	8004906 <HAL_GPIO_Init+0x232>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a53      	ldr	r2, [pc, #332]	; (8004a0c <HAL_GPIO_Init+0x338>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01f      	beq.n	8004902 <HAL_GPIO_Init+0x22e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a52      	ldr	r2, [pc, #328]	; (8004a10 <HAL_GPIO_Init+0x33c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d019      	beq.n	80048fe <HAL_GPIO_Init+0x22a>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a51      	ldr	r2, [pc, #324]	; (8004a14 <HAL_GPIO_Init+0x340>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_GPIO_Init+0x226>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a50      	ldr	r2, [pc, #320]	; (8004a18 <HAL_GPIO_Init+0x344>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00d      	beq.n	80048f6 <HAL_GPIO_Init+0x222>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a4f      	ldr	r2, [pc, #316]	; (8004a1c <HAL_GPIO_Init+0x348>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <HAL_GPIO_Init+0x21e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a4e      	ldr	r2, [pc, #312]	; (8004a20 <HAL_GPIO_Init+0x34c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d101      	bne.n	80048ee <HAL_GPIO_Init+0x21a>
 80048ea:	2309      	movs	r3, #9
 80048ec:	e012      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048ee:	230a      	movs	r3, #10
 80048f0:	e010      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048f2:	2308      	movs	r3, #8
 80048f4:	e00e      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048f6:	2307      	movs	r3, #7
 80048f8:	e00c      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048fa:	2306      	movs	r3, #6
 80048fc:	e00a      	b.n	8004914 <HAL_GPIO_Init+0x240>
 80048fe:	2305      	movs	r3, #5
 8004900:	e008      	b.n	8004914 <HAL_GPIO_Init+0x240>
 8004902:	2304      	movs	r3, #4
 8004904:	e006      	b.n	8004914 <HAL_GPIO_Init+0x240>
 8004906:	2303      	movs	r3, #3
 8004908:	e004      	b.n	8004914 <HAL_GPIO_Init+0x240>
 800490a:	2302      	movs	r3, #2
 800490c:	e002      	b.n	8004914 <HAL_GPIO_Init+0x240>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_GPIO_Init+0x240>
 8004912:	2300      	movs	r3, #0
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	f002 0203 	and.w	r2, r2, #3
 800491a:	0092      	lsls	r2, r2, #2
 800491c:	4093      	lsls	r3, r2
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	4313      	orrs	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004924:	4934      	ldr	r1, [pc, #208]	; (80049f8 <HAL_GPIO_Init+0x324>)
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	3302      	adds	r3, #2
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004932:	4b3c      	ldr	r3, [pc, #240]	; (8004a24 <HAL_GPIO_Init+0x350>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004956:	4a33      	ldr	r2, [pc, #204]	; (8004a24 <HAL_GPIO_Init+0x350>)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800495c:	4b31      	ldr	r3, [pc, #196]	; (8004a24 <HAL_GPIO_Init+0x350>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004980:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <HAL_GPIO_Init+0x350>)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004986:	4b27      	ldr	r3, [pc, #156]	; (8004a24 <HAL_GPIO_Init+0x350>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <HAL_GPIO_Init+0x350>)
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049b0:	4b1c      	ldr	r3, [pc, #112]	; (8004a24 <HAL_GPIO_Init+0x350>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049d4:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <HAL_GPIO_Init+0x350>)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3301      	adds	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	2b0f      	cmp	r3, #15
 80049e4:	f67f ae84 	bls.w	80046f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049e8:	bf00      	nop
 80049ea:	3724      	adds	r7, #36	; 0x24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40013800 	.word	0x40013800
 80049fc:	40020000 	.word	0x40020000
 8004a00:	40020400 	.word	0x40020400
 8004a04:	40020800 	.word	0x40020800
 8004a08:	40020c00 	.word	0x40020c00
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	40021400 	.word	0x40021400
 8004a14:	40021800 	.word	0x40021800
 8004a18:	40021c00 	.word	0x40021c00
 8004a1c:	40022000 	.word	0x40022000
 8004a20:	40022400 	.word	0x40022400
 8004a24:	40013c00 	.word	0x40013c00

08004a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a38:	787b      	ldrb	r3, [r7, #1]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a44:	e003      	b.n	8004a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	041a      	lsls	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	619a      	str	r2, [r3, #24]
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	887b      	ldrh	r3, [r7, #2]
 8004a6c:	401a      	ands	r2, r3
 8004a6e:	887b      	ldrh	r3, [r7, #2]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d104      	bne.n	8004a7e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a74:	887b      	ldrh	r3, [r7, #2]
 8004a76:	041a      	lsls	r2, r3, #16
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004a7c:	e002      	b.n	8004a84 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004a7e:	887a      	ldrh	r2, [r7, #2]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	619a      	str	r2, [r3, #24]
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e0bf      	b.n	8004c22 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d106      	bne.n	8004abc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f8ba 	bl	8004c30 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2202      	movs	r2, #2
 8004ac0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004ad2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6999      	ldr	r1, [r3, #24]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ae8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6899      	ldr	r1, [r3, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4b4a      	ldr	r3, [pc, #296]	; (8004c2c <HAL_LTDC_Init+0x19c>)
 8004b04:	400b      	ands	r3, r1
 8004b06:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6899      	ldr	r1, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68d9      	ldr	r1, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4b3e      	ldr	r3, [pc, #248]	; (8004c2c <HAL_LTDC_Init+0x19c>)
 8004b32:	400b      	ands	r3, r1
 8004b34:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	041b      	lsls	r3, r3, #16
 8004b3c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68d9      	ldr	r1, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1a      	ldr	r2, [r3, #32]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6919      	ldr	r1, [r3, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b33      	ldr	r3, [pc, #204]	; (8004c2c <HAL_LTDC_Init+0x19c>)
 8004b60:	400b      	ands	r3, r1
 8004b62:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b68:	041b      	lsls	r3, r3, #16
 8004b6a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6919      	ldr	r1, [r3, #16]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6959      	ldr	r1, [r3, #20]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	4b27      	ldr	r3, [pc, #156]	; (8004c2c <HAL_LTDC_Init+0x19c>)
 8004b8e:	400b      	ands	r3, r1
 8004b90:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6959      	ldr	r1, [r3, #20]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0206 	orr.w	r2, r2, #6
 8004bfe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	699a      	ldr	r2, [r3, #24]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f042 0201 	orr.w	r2, r2, #1
 8004c0e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	f000f800 	.word	0xf000f800

08004c30 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c52:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 0304 	and.w	r3, r3, #4
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d023      	beq.n	8004cae <HAL_LTDC_IRQHandler+0x6a>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01e      	beq.n	8004cae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0204 	bic.w	r2, r2, #4
 8004c7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2204      	movs	r2, #4
 8004c86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004c8e:	f043 0201 	orr.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f86f 	bl	8004d8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d023      	beq.n	8004d00 <HAL_LTDC_IRQHandler+0xbc>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01e      	beq.n	8004d00 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0202 	bic.w	r2, r2, #2
 8004cd0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ce0:	f043 0202 	orr.w	r2, r3, #2
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2204      	movs	r2, #4
 8004cee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f846 	bl	8004d8c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01b      	beq.n	8004d42 <HAL_LTDC_IRQHandler+0xfe>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d016      	beq.n	8004d42 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
 8004d22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f82f 	bl	8004da0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01b      	beq.n	8004d84 <HAL_LTDC_IRQHandler+0x140>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f022 0208 	bic.w	r2, r2, #8
 8004d64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2208      	movs	r2, #8
 8004d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f818 	bl	8004db4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004dc8:	b5b0      	push	{r4, r5, r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_LTDC_ConfigLayer+0x1a>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e02c      	b.n	8004e3c <HAL_LTDC_ConfigLayer+0x74>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2202      	movs	r2, #2
 8004dee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2134      	movs	r1, #52	; 0x34
 8004df8:	fb01 f303 	mul.w	r3, r1, r3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4614      	mov	r4, r2
 8004e06:	461d      	mov	r5, r3
 8004e08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f000 f87f 	bl	8004f20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2201      	movs	r2, #1
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bdb0      	pop	{r4, r5, r7, pc}

08004e44 <HAL_LTDC_SetAlpha>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAlpha(LTDC_HandleTypeDef *hltdc, uint32_t Alpha, uint32_t LayerIdx)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_ALPHA(Alpha));
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_LTDC_SetAlpha+0x1a>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e024      	b.n	8004ea8 <HAL_LTDC_SetAlpha+0x64>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2234      	movs	r2, #52	; 0x34
 8004e72:	fb02 f303 	mul.w	r3, r2, r3
 8004e76:	3338      	adds	r3, #56	; 0x38
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Alpha value */
  pLayerCfg->Alpha = Alpha;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	615a      	str	r2, [r3, #20]

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6979      	ldr	r1, [r7, #20]
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f849 	bl	8004f20 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2201      	movs	r2, #1
 8004e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d101      	bne.n	8004ec8 <HAL_LTDC_ProgramLineEvent+0x18>
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	e023      	b.n	8004f10 <HAL_LTDC_ProgramLineEvent+0x60>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8004ee8:	4a0c      	ldr	r2, [pc, #48]	; (8004f1c <HAL_LTDC_ProgramLineEvent+0x6c>)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40016800 	.word	0x40016800

08004f20 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b089      	sub	sp, #36	; 0x24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	0c1b      	lsrs	r3, r3, #16
 8004f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f3c:	4413      	add	r3, r2
 8004f3e:	041b      	lsls	r3, r3, #16
 8004f40:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	01db      	lsls	r3, r3, #7
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3384      	adds	r3, #132	; 0x84
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	6812      	ldr	r2, [r2, #0]
 8004f56:	4611      	mov	r1, r2
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	01d2      	lsls	r2, r2, #7
 8004f5c:	440a      	add	r2, r1
 8004f5e:	3284      	adds	r2, #132	; 0x84
 8004f60:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004f64:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	0c1b      	lsrs	r3, r3, #16
 8004f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f76:	4413      	add	r3, r2
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4619      	mov	r1, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	01db      	lsls	r3, r3, #7
 8004f84:	440b      	add	r3, r1
 8004f86:	3384      	adds	r3, #132	; 0x84
 8004f88:	4619      	mov	r1, r3
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f9e:	4413      	add	r3, r2
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	01db      	lsls	r3, r3, #7
 8004fae:	4413      	add	r3, r2
 8004fb0:	3384      	adds	r3, #132	; 0x84
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	4611      	mov	r1, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	01d2      	lsls	r2, r2, #7
 8004fbe:	440a      	add	r2, r1
 8004fc0:	3284      	adds	r2, #132	; 0x84
 8004fc2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004fc6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004fd6:	4413      	add	r3, r2
 8004fd8:	1c5a      	adds	r2, r3, #1
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4619      	mov	r1, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	01db      	lsls	r3, r3, #7
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3384      	adds	r3, #132	; 0x84
 8004fe8:	4619      	mov	r1, r3
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	01db      	lsls	r3, r3, #7
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3384      	adds	r3, #132	; 0x84
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	4611      	mov	r1, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	01d2      	lsls	r2, r2, #7
 800500a:	440a      	add	r2, r1
 800500c:	3284      	adds	r2, #132	; 0x84
 800500e:	f023 0307 	bic.w	r3, r3, #7
 8005012:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	01db      	lsls	r3, r3, #7
 800501e:	4413      	add	r3, r2
 8005020:	3384      	adds	r3, #132	; 0x84
 8005022:	461a      	mov	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005030:	021b      	lsls	r3, r3, #8
 8005032:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800503a:	041b      	lsls	r3, r3, #16
 800503c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	061b      	lsls	r3, r3, #24
 8005044:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	01db      	lsls	r3, r3, #7
 8005050:	4413      	add	r3, r2
 8005052:	3384      	adds	r3, #132	; 0x84
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	01db      	lsls	r3, r3, #7
 8005060:	4413      	add	r3, r2
 8005062:	3384      	adds	r3, #132	; 0x84
 8005064:	461a      	mov	r2, r3
 8005066:	2300      	movs	r3, #0
 8005068:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005070:	461a      	mov	r2, r3
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	431a      	orrs	r2, r3
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	431a      	orrs	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4619      	mov	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	01db      	lsls	r3, r3, #7
 8005084:	440b      	add	r3, r1
 8005086:	3384      	adds	r3, #132	; 0x84
 8005088:	4619      	mov	r1, r3
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	4313      	orrs	r3, r2
 800508e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	01db      	lsls	r3, r3, #7
 800509a:	4413      	add	r3, r2
 800509c:	3384      	adds	r3, #132	; 0x84
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	6812      	ldr	r2, [r2, #0]
 80050a4:	4611      	mov	r1, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	01d2      	lsls	r2, r2, #7
 80050aa:	440a      	add	r2, r1
 80050ac:	3284      	adds	r2, #132	; 0x84
 80050ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80050b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	01db      	lsls	r3, r3, #7
 80050be:	4413      	add	r3, r2
 80050c0:	3384      	adds	r3, #132	; 0x84
 80050c2:	461a      	mov	r2, r3
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	01db      	lsls	r3, r3, #7
 80050d4:	4413      	add	r3, r2
 80050d6:	3384      	adds	r3, #132	; 0x84
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	4611      	mov	r1, r2
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	01d2      	lsls	r2, r2, #7
 80050e4:	440a      	add	r2, r1
 80050e6:	3284      	adds	r2, #132	; 0x84
 80050e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80050ec:	f023 0307 	bic.w	r3, r3, #7
 80050f0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	69da      	ldr	r2, [r3, #28]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	6809      	ldr	r1, [r1, #0]
 80050fe:	4608      	mov	r0, r1
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	01c9      	lsls	r1, r1, #7
 8005104:	4401      	add	r1, r0
 8005106:	3184      	adds	r1, #132	; 0x84
 8005108:	4313      	orrs	r3, r2
 800510a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	01db      	lsls	r3, r3, #7
 8005116:	4413      	add	r3, r2
 8005118:	3384      	adds	r3, #132	; 0x84
 800511a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	01db      	lsls	r3, r3, #7
 8005126:	4413      	add	r3, r2
 8005128:	3384      	adds	r3, #132	; 0x84
 800512a:	461a      	mov	r2, r3
 800512c:	2300      	movs	r3, #0
 800512e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	01db      	lsls	r3, r3, #7
 800513a:	4413      	add	r3, r2
 800513c:	3384      	adds	r3, #132	; 0x84
 800513e:	461a      	mov	r2, r3
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d102      	bne.n	8005154 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800514e:	2304      	movs	r3, #4
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	e01b      	b.n	800518c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d102      	bne.n	8005162 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800515c:	2303      	movs	r3, #3
 800515e:	61fb      	str	r3, [r7, #28]
 8005160:	e014      	b.n	800518c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	2b04      	cmp	r3, #4
 8005168:	d00b      	beq.n	8005182 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800516e:	2b02      	cmp	r3, #2
 8005170:	d007      	beq.n	8005182 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005176:	2b03      	cmp	r3, #3
 8005178:	d003      	beq.n	8005182 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800517e:	2b07      	cmp	r3, #7
 8005180:	d102      	bne.n	8005188 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005182:	2302      	movs	r3, #2
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	e001      	b.n	800518c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005188:	2301      	movs	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	461a      	mov	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	01db      	lsls	r3, r3, #7
 8005196:	4413      	add	r3, r2
 8005198:	3384      	adds	r3, #132	; 0x84
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	6812      	ldr	r2, [r2, #0]
 80051a0:	4611      	mov	r1, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	01d2      	lsls	r2, r2, #7
 80051a6:	440a      	add	r2, r1
 80051a8:	3284      	adds	r2, #132	; 0x84
 80051aa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80051ae:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	041a      	lsls	r2, r3, #16
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	6859      	ldr	r1, [r3, #4]
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	1acb      	subs	r3, r1, r3
 80051c6:	69f9      	ldr	r1, [r7, #28]
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	3303      	adds	r3, #3
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	6809      	ldr	r1, [r1, #0]
 80051d2:	4608      	mov	r0, r1
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	01c9      	lsls	r1, r1, #7
 80051d8:	4401      	add	r1, r0
 80051da:	3184      	adds	r1, #132	; 0x84
 80051dc:	4313      	orrs	r3, r2
 80051de:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	01db      	lsls	r3, r3, #7
 80051ea:	4413      	add	r3, r2
 80051ec:	3384      	adds	r3, #132	; 0x84
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	6812      	ldr	r2, [r2, #0]
 80051f4:	4611      	mov	r1, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	01d2      	lsls	r2, r2, #7
 80051fa:	440a      	add	r2, r1
 80051fc:	3284      	adds	r2, #132	; 0x84
 80051fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	01db      	lsls	r3, r3, #7
 8005212:	4413      	add	r3, r2
 8005214:	3384      	adds	r3, #132	; 0x84
 8005216:	461a      	mov	r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	01db      	lsls	r3, r3, #7
 8005228:	4413      	add	r3, r2
 800522a:	3384      	adds	r3, #132	; 0x84
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	4611      	mov	r1, r2
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	01d2      	lsls	r2, r2, #7
 8005238:	440a      	add	r2, r1
 800523a:	3284      	adds	r2, #132	; 0x84
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	6013      	str	r3, [r2, #0]
}
 8005242:	bf00      	nop
 8005244:	3724      	adds	r7, #36	; 0x24
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	4b20      	ldr	r3, [pc, #128]	; (80052e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005268:	6413      	str	r3, [r2, #64]	; 0x40
 800526a:	4b1d      	ldr	r3, [pc, #116]	; (80052e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005272:	603b      	str	r3, [r7, #0]
 8005274:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005276:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005278:	2201      	movs	r2, #1
 800527a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800527c:	f002 f9cc 	bl	8007618 <HAL_GetTick>
 8005280:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005282:	e009      	b.n	8005298 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005284:	f002 f9c8 	bl	8007618 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005292:	d901      	bls.n	8005298 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e01f      	b.n	80052d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005298:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a4:	d1ee      	bne.n	8005284 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80052a6:	4b11      	ldr	r3, [pc, #68]	; (80052ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052ac:	f002 f9b4 	bl	8007618 <HAL_GetTick>
 80052b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052b2:	e009      	b.n	80052c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052b4:	f002 f9b0 	bl	8007618 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052c2:	d901      	bls.n	80052c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e007      	b.n	80052d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052c8:	4b07      	ldr	r3, [pc, #28]	; (80052e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d4:	d1ee      	bne.n	80052b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	40023800 	.word	0x40023800
 80052e4:	420e0040 	.word	0x420e0040
 80052e8:	40007000 	.word	0x40007000
 80052ec:	420e0044 	.word	0x420e0044

080052f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e25b      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d075      	beq.n	80053fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800530e:	4ba3      	ldr	r3, [pc, #652]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	2b04      	cmp	r3, #4
 8005318:	d00c      	beq.n	8005334 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800531a:	4ba0      	ldr	r3, [pc, #640]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005322:	2b08      	cmp	r3, #8
 8005324:	d112      	bne.n	800534c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005326:	4b9d      	ldr	r3, [pc, #628]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800532e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005332:	d10b      	bne.n	800534c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005334:	4b99      	ldr	r3, [pc, #612]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d05b      	beq.n	80053f8 <HAL_RCC_OscConfig+0x108>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d157      	bne.n	80053f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e236      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005354:	d106      	bne.n	8005364 <HAL_RCC_OscConfig+0x74>
 8005356:	4b91      	ldr	r3, [pc, #580]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a90      	ldr	r2, [pc, #576]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e01d      	b.n	80053a0 <HAL_RCC_OscConfig+0xb0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800536c:	d10c      	bne.n	8005388 <HAL_RCC_OscConfig+0x98>
 800536e:	4b8b      	ldr	r3, [pc, #556]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a8a      	ldr	r2, [pc, #552]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	4b88      	ldr	r3, [pc, #544]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a87      	ldr	r2, [pc, #540]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e00b      	b.n	80053a0 <HAL_RCC_OscConfig+0xb0>
 8005388:	4b84      	ldr	r3, [pc, #528]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a83      	ldr	r2, [pc, #524]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800538e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b81      	ldr	r3, [pc, #516]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a80      	ldr	r2, [pc, #512]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800539a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d013      	beq.n	80053d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a8:	f002 f936 	bl	8007618 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053b0:	f002 f932 	bl	8007618 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	; 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e1fb      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c2:	4b76      	ldr	r3, [pc, #472]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0xc0>
 80053ce:	e014      	b.n	80053fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d0:	f002 f922 	bl	8007618 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053d8:	f002 f91e 	bl	8007618 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b64      	cmp	r3, #100	; 0x64
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e1e7      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ea:	4b6c      	ldr	r3, [pc, #432]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0xe8>
 80053f6:	e000      	b.n	80053fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d063      	beq.n	80054ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005406:	4b65      	ldr	r3, [pc, #404]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005412:	4b62      	ldr	r3, [pc, #392]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800541a:	2b08      	cmp	r3, #8
 800541c:	d11c      	bne.n	8005458 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800541e:	4b5f      	ldr	r3, [pc, #380]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d116      	bne.n	8005458 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800542a:	4b5c      	ldr	r3, [pc, #368]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_RCC_OscConfig+0x152>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e1bb      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005442:	4b56      	ldr	r3, [pc, #344]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	4952      	ldr	r1, [pc, #328]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005452:	4313      	orrs	r3, r2
 8005454:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005456:	e03a      	b.n	80054ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d020      	beq.n	80054a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005460:	4b4f      	ldr	r3, [pc, #316]	; (80055a0 <HAL_RCC_OscConfig+0x2b0>)
 8005462:	2201      	movs	r2, #1
 8005464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f002 f8d7 	bl	8007618 <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800546e:	f002 f8d3 	bl	8007618 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e19c      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005480:	4b46      	ldr	r3, [pc, #280]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f0      	beq.n	800546e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800548c:	4b43      	ldr	r3, [pc, #268]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4940      	ldr	r1, [pc, #256]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]
 80054a0:	e015      	b.n	80054ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054a2:	4b3f      	ldr	r3, [pc, #252]	; (80055a0 <HAL_RCC_OscConfig+0x2b0>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f002 f8b6 	bl	8007618 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b0:	f002 f8b2 	bl	8007618 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e17b      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d030      	beq.n	800553c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e2:	4b30      	ldr	r3, [pc, #192]	; (80055a4 <HAL_RCC_OscConfig+0x2b4>)
 80054e4:	2201      	movs	r2, #1
 80054e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f002 f896 	bl	8007618 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f0:	f002 f892 	bl	8007618 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e15b      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005502:	4b26      	ldr	r3, [pc, #152]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x200>
 800550e:	e015      	b.n	800553c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005510:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <HAL_RCC_OscConfig+0x2b4>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005516:	f002 f87f 	bl	8007618 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800551e:	f002 f87b 	bl	8007618 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e144      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005530:	4b1a      	ldr	r3, [pc, #104]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1f0      	bne.n	800551e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0304 	and.w	r3, r3, #4
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a0 	beq.w	800568a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800554e:	4b13      	ldr	r3, [pc, #76]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d10f      	bne.n	800557a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	4b0f      	ldr	r3, [pc, #60]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005562:	4a0e      	ldr	r2, [pc, #56]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 8005564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005568:	6413      	str	r3, [r2, #64]	; 0x40
 800556a:	4b0c      	ldr	r3, [pc, #48]	; (800559c <HAL_RCC_OscConfig+0x2ac>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005572:	60bb      	str	r3, [r7, #8]
 8005574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005576:	2301      	movs	r3, #1
 8005578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005582:	2b00      	cmp	r3, #0
 8005584:	d121      	bne.n	80055ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a07      	ldr	r2, [pc, #28]	; (80055a8 <HAL_RCC_OscConfig+0x2b8>)
 800558c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005592:	f002 f841 	bl	8007618 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005598:	e011      	b.n	80055be <HAL_RCC_OscConfig+0x2ce>
 800559a:	bf00      	nop
 800559c:	40023800 	.word	0x40023800
 80055a0:	42470000 	.word	0x42470000
 80055a4:	42470e80 	.word	0x42470e80
 80055a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ac:	f002 f834 	bl	8007618 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e0fd      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055be:	4b81      	ldr	r3, [pc, #516]	; (80057c4 <HAL_RCC_OscConfig+0x4d4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d0f0      	beq.n	80055ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d106      	bne.n	80055e0 <HAL_RCC_OscConfig+0x2f0>
 80055d2:	4b7d      	ldr	r3, [pc, #500]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	4a7c      	ldr	r2, [pc, #496]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	6713      	str	r3, [r2, #112]	; 0x70
 80055de:	e01c      	b.n	800561a <HAL_RCC_OscConfig+0x32a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	d10c      	bne.n	8005602 <HAL_RCC_OscConfig+0x312>
 80055e8:	4b77      	ldr	r3, [pc, #476]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ec:	4a76      	ldr	r2, [pc, #472]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055ee:	f043 0304 	orr.w	r3, r3, #4
 80055f2:	6713      	str	r3, [r2, #112]	; 0x70
 80055f4:	4b74      	ldr	r3, [pc, #464]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f8:	4a73      	ldr	r2, [pc, #460]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	6713      	str	r3, [r2, #112]	; 0x70
 8005600:	e00b      	b.n	800561a <HAL_RCC_OscConfig+0x32a>
 8005602:	4b71      	ldr	r3, [pc, #452]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005606:	4a70      	ldr	r2, [pc, #448]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005608:	f023 0301 	bic.w	r3, r3, #1
 800560c:	6713      	str	r3, [r2, #112]	; 0x70
 800560e:	4b6e      	ldr	r3, [pc, #440]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	4a6d      	ldr	r2, [pc, #436]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005614:	f023 0304 	bic.w	r3, r3, #4
 8005618:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d015      	beq.n	800564e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005622:	f001 fff9 	bl	8007618 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005628:	e00a      	b.n	8005640 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800562a:	f001 fff5 	bl	8007618 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	f241 3288 	movw	r2, #5000	; 0x1388
 8005638:	4293      	cmp	r3, r2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e0bc      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	4b61      	ldr	r3, [pc, #388]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ee      	beq.n	800562a <HAL_RCC_OscConfig+0x33a>
 800564c:	e014      	b.n	8005678 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800564e:	f001 ffe3 	bl	8007618 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005654:	e00a      	b.n	800566c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f001 ffdf 	bl	8007618 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	; 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e0a6      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566c:	4b56      	ldr	r3, [pc, #344]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1ee      	bne.n	8005656 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005678:	7dfb      	ldrb	r3, [r7, #23]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d105      	bne.n	800568a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567e:	4b52      	ldr	r3, [pc, #328]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	4a51      	ldr	r2, [pc, #324]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005688:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 8092 	beq.w	80057b8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005694:	4b4c      	ldr	r3, [pc, #304]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 030c 	and.w	r3, r3, #12
 800569c:	2b08      	cmp	r3, #8
 800569e:	d05c      	beq.n	800575a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699b      	ldr	r3, [r3, #24]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d141      	bne.n	800572c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056a8:	4b48      	ldr	r3, [pc, #288]	; (80057cc <HAL_RCC_OscConfig+0x4dc>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056ae:	f001 ffb3 	bl	8007618 <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056b6:	f001 ffaf 	bl	8007618 <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e078      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c8:	4b3f      	ldr	r3, [pc, #252]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1f0      	bne.n	80056b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	69da      	ldr	r2, [r3, #28]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	431a      	orrs	r2, r3
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	019b      	lsls	r3, r3, #6
 80056e4:	431a      	orrs	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	085b      	lsrs	r3, r3, #1
 80056ec:	3b01      	subs	r3, #1
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f6:	061b      	lsls	r3, r3, #24
 80056f8:	4933      	ldr	r1, [pc, #204]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056fe:	4b33      	ldr	r3, [pc, #204]	; (80057cc <HAL_RCC_OscConfig+0x4dc>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005704:	f001 ff88 	bl	8007618 <HAL_GetTick>
 8005708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570c:	f001 ff84 	bl	8007618 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e04d      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800571e:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0f0      	beq.n	800570c <HAL_RCC_OscConfig+0x41c>
 800572a:	e045      	b.n	80057b8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572c:	4b27      	ldr	r3, [pc, #156]	; (80057cc <HAL_RCC_OscConfig+0x4dc>)
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005732:	f001 ff71 	bl	8007618 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800573a:	f001 ff6d 	bl	8007618 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e036      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800574c:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1f0      	bne.n	800573a <HAL_RCC_OscConfig+0x44a>
 8005758:	e02e      	b.n	80057b8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d101      	bne.n	8005766 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e029      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005766:	4b18      	ldr	r3, [pc, #96]	; (80057c8 <HAL_RCC_OscConfig+0x4d8>)
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	429a      	cmp	r2, r3
 8005778:	d11c      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005784:	429a      	cmp	r2, r3
 8005786:	d115      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800578e:	4013      	ands	r3, r2
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005794:	4293      	cmp	r3, r2
 8005796:	d10d      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d106      	bne.n	80057b4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d001      	beq.n	80057b8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	40007000 	.word	0x40007000
 80057c8:	40023800 	.word	0x40023800
 80057cc:	42470060 	.word	0x42470060

080057d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0cc      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057e4:	4b68      	ldr	r3, [pc, #416]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d90c      	bls.n	800580c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057f2:	4b65      	ldr	r3, [pc, #404]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	b2d2      	uxtb	r2, r2
 80057f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057fa:	4b63      	ldr	r3, [pc, #396]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 030f 	and.w	r3, r3, #15
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	429a      	cmp	r2, r3
 8005806:	d001      	beq.n	800580c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0b8      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d020      	beq.n	800585a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005824:	4b59      	ldr	r3, [pc, #356]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4a58      	ldr	r2, [pc, #352]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800582e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b00      	cmp	r3, #0
 800583a:	d005      	beq.n	8005848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800583c:	4b53      	ldr	r3, [pc, #332]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	4a52      	ldr	r2, [pc, #328]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005842:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005848:	4b50      	ldr	r3, [pc, #320]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	494d      	ldr	r1, [pc, #308]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005856:	4313      	orrs	r3, r2
 8005858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d044      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d107      	bne.n	800587e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800586e:	4b47      	ldr	r3, [pc, #284]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d119      	bne.n	80058ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e07f      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d003      	beq.n	800588e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800588a:	2b03      	cmp	r3, #3
 800588c:	d107      	bne.n	800589e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588e:	4b3f      	ldr	r3, [pc, #252]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d109      	bne.n	80058ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e06f      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800589e:	4b3b      	ldr	r3, [pc, #236]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e067      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058ae:	4b37      	ldr	r3, [pc, #220]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f023 0203 	bic.w	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	4934      	ldr	r1, [pc, #208]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058c0:	f001 feaa 	bl	8007618 <HAL_GetTick>
 80058c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058c6:	e00a      	b.n	80058de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058c8:	f001 fea6 	bl	8007618 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e04f      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058de:	4b2b      	ldr	r3, [pc, #172]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 020c 	and.w	r2, r3, #12
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d1eb      	bne.n	80058c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058f0:	4b25      	ldr	r3, [pc, #148]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d20c      	bcs.n	8005918 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058fe:	4b22      	ldr	r3, [pc, #136]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005906:	4b20      	ldr	r3, [pc, #128]	; (8005988 <HAL_RCC_ClockConfig+0x1b8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	683a      	ldr	r2, [r7, #0]
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e032      	b.n	800597e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0304 	and.w	r3, r3, #4
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005924:	4b19      	ldr	r3, [pc, #100]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	4916      	ldr	r1, [pc, #88]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d009      	beq.n	8005956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	490e      	ldr	r1, [pc, #56]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	4313      	orrs	r3, r2
 8005954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005956:	f000 f821 	bl	800599c <HAL_RCC_GetSysClockFreq>
 800595a:	4601      	mov	r1, r0
 800595c:	4b0b      	ldr	r3, [pc, #44]	; (800598c <HAL_RCC_ClockConfig+0x1bc>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	091b      	lsrs	r3, r3, #4
 8005962:	f003 030f 	and.w	r3, r3, #15
 8005966:	4a0a      	ldr	r2, [pc, #40]	; (8005990 <HAL_RCC_ClockConfig+0x1c0>)
 8005968:	5cd3      	ldrb	r3, [r2, r3]
 800596a:	fa21 f303 	lsr.w	r3, r1, r3
 800596e:	4a09      	ldr	r2, [pc, #36]	; (8005994 <HAL_RCC_ClockConfig+0x1c4>)
 8005970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005972:	4b09      	ldr	r3, [pc, #36]	; (8005998 <HAL_RCC_ClockConfig+0x1c8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4618      	mov	r0, r3
 8005978:	f7fd fa08 	bl	8002d8c <HAL_InitTick>

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	40023c00 	.word	0x40023c00
 800598c:	40023800 	.word	0x40023800
 8005990:	0800de30 	.word	0x0800de30
 8005994:	2000000c 	.word	0x2000000c
 8005998:	20000010 	.word	0x20000010

0800599c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800599c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599e:	b085      	sub	sp, #20
 80059a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
 80059aa:	2300      	movs	r3, #0
 80059ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059b2:	4b63      	ldr	r3, [pc, #396]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d007      	beq.n	80059ce <HAL_RCC_GetSysClockFreq+0x32>
 80059be:	2b08      	cmp	r3, #8
 80059c0:	d008      	beq.n	80059d4 <HAL_RCC_GetSysClockFreq+0x38>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f040 80b4 	bne.w	8005b30 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059c8:	4b5e      	ldr	r3, [pc, #376]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80059ca:	60bb      	str	r3, [r7, #8]
       break;
 80059cc:	e0b3      	b.n	8005b36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059ce:	4b5e      	ldr	r3, [pc, #376]	; (8005b48 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80059d0:	60bb      	str	r3, [r7, #8]
      break;
 80059d2:	e0b0      	b.n	8005b36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059d4:	4b5a      	ldr	r3, [pc, #360]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059de:	4b58      	ldr	r3, [pc, #352]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d04a      	beq.n	8005a80 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059ea:	4b55      	ldr	r3, [pc, #340]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	099b      	lsrs	r3, r3, #6
 80059f0:	f04f 0400 	mov.w	r4, #0
 80059f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	ea03 0501 	and.w	r5, r3, r1
 8005a00:	ea04 0602 	and.w	r6, r4, r2
 8005a04:	4629      	mov	r1, r5
 8005a06:	4632      	mov	r2, r6
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	f04f 0400 	mov.w	r4, #0
 8005a10:	0154      	lsls	r4, r2, #5
 8005a12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a16:	014b      	lsls	r3, r1, #5
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	1b49      	subs	r1, r1, r5
 8005a1e:	eb62 0206 	sbc.w	r2, r2, r6
 8005a22:	f04f 0300 	mov.w	r3, #0
 8005a26:	f04f 0400 	mov.w	r4, #0
 8005a2a:	0194      	lsls	r4, r2, #6
 8005a2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005a30:	018b      	lsls	r3, r1, #6
 8005a32:	1a5b      	subs	r3, r3, r1
 8005a34:	eb64 0402 	sbc.w	r4, r4, r2
 8005a38:	f04f 0100 	mov.w	r1, #0
 8005a3c:	f04f 0200 	mov.w	r2, #0
 8005a40:	00e2      	lsls	r2, r4, #3
 8005a42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005a46:	00d9      	lsls	r1, r3, #3
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4614      	mov	r4, r2
 8005a4c:	195b      	adds	r3, r3, r5
 8005a4e:	eb44 0406 	adc.w	r4, r4, r6
 8005a52:	f04f 0100 	mov.w	r1, #0
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	0262      	lsls	r2, r4, #9
 8005a5c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005a60:	0259      	lsls	r1, r3, #9
 8005a62:	460b      	mov	r3, r1
 8005a64:	4614      	mov	r4, r2
 8005a66:	4618      	mov	r0, r3
 8005a68:	4621      	mov	r1, r4
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f04f 0400 	mov.w	r4, #0
 8005a70:	461a      	mov	r2, r3
 8005a72:	4623      	mov	r3, r4
 8005a74:	f7fb f918 	bl	8000ca8 <__aeabi_uldivmod>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	460c      	mov	r4, r1
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	e049      	b.n	8005b14 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a80:	4b2f      	ldr	r3, [pc, #188]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	099b      	lsrs	r3, r3, #6
 8005a86:	f04f 0400 	mov.w	r4, #0
 8005a8a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	ea03 0501 	and.w	r5, r3, r1
 8005a96:	ea04 0602 	and.w	r6, r4, r2
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	4632      	mov	r2, r6
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	f04f 0400 	mov.w	r4, #0
 8005aa6:	0154      	lsls	r4, r2, #5
 8005aa8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005aac:	014b      	lsls	r3, r1, #5
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4622      	mov	r2, r4
 8005ab2:	1b49      	subs	r1, r1, r5
 8005ab4:	eb62 0206 	sbc.w	r2, r2, r6
 8005ab8:	f04f 0300 	mov.w	r3, #0
 8005abc:	f04f 0400 	mov.w	r4, #0
 8005ac0:	0194      	lsls	r4, r2, #6
 8005ac2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005ac6:	018b      	lsls	r3, r1, #6
 8005ac8:	1a5b      	subs	r3, r3, r1
 8005aca:	eb64 0402 	sbc.w	r4, r4, r2
 8005ace:	f04f 0100 	mov.w	r1, #0
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	00e2      	lsls	r2, r4, #3
 8005ad8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005adc:	00d9      	lsls	r1, r3, #3
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4614      	mov	r4, r2
 8005ae2:	195b      	adds	r3, r3, r5
 8005ae4:	eb44 0406 	adc.w	r4, r4, r6
 8005ae8:	f04f 0100 	mov.w	r1, #0
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	02a2      	lsls	r2, r4, #10
 8005af2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005af6:	0299      	lsls	r1, r3, #10
 8005af8:	460b      	mov	r3, r1
 8005afa:	4614      	mov	r4, r2
 8005afc:	4618      	mov	r0, r3
 8005afe:	4621      	mov	r1, r4
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f04f 0400 	mov.w	r4, #0
 8005b06:	461a      	mov	r2, r3
 8005b08:	4623      	mov	r3, r4
 8005b0a:	f7fb f8cd 	bl	8000ca8 <__aeabi_uldivmod>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	460c      	mov	r4, r1
 8005b12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	0c1b      	lsrs	r3, r3, #16
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	3301      	adds	r3, #1
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2c:	60bb      	str	r3, [r7, #8]
      break;
 8005b2e:	e002      	b.n	8005b36 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b30:	4b04      	ldr	r3, [pc, #16]	; (8005b44 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005b32:	60bb      	str	r3, [r7, #8]
      break;
 8005b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b36:	68bb      	ldr	r3, [r7, #8]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b40:	40023800 	.word	0x40023800
 8005b44:	00f42400 	.word	0x00f42400
 8005b48:	007a1200 	.word	0x007a1200

08005b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b50:	4b03      	ldr	r3, [pc, #12]	; (8005b60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b52:	681b      	ldr	r3, [r3, #0]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	2000000c 	.word	0x2000000c

08005b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b68:	f7ff fff0 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8005b6c:	4601      	mov	r1, r0
 8005b6e:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	0a9b      	lsrs	r3, r3, #10
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	4a03      	ldr	r2, [pc, #12]	; (8005b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b7a:	5cd3      	ldrb	r3, [r2, r3]
 8005b7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40023800 	.word	0x40023800
 8005b88:	0800de40 	.word	0x0800de40

08005b8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005b90:	f7ff ffdc 	bl	8005b4c <HAL_RCC_GetHCLKFreq>
 8005b94:	4601      	mov	r1, r0
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	0b5b      	lsrs	r3, r3, #13
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	4a03      	ldr	r2, [pc, #12]	; (8005bb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ba2:	5cd3      	ldrb	r3, [r2, r3]
 8005ba4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	0800de40 	.word	0x0800de40

08005bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10b      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d105      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d075      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005be8:	4bad      	ldr	r3, [pc, #692]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bee:	f001 fd13 	bl	8007618 <HAL_GetTick>
 8005bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bf6:	f001 fd0f 	bl	8007618 <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e18b      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c08:	4ba6      	ldr	r3, [pc, #664]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f0      	bne.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d009      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	019a      	lsls	r2, r3, #6
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	071b      	lsls	r3, r3, #28
 8005c2c:	499d      	ldr	r1, [pc, #628]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01f      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c40:	4b98      	ldr	r3, [pc, #608]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c46:	0f1b      	lsrs	r3, r3, #28
 8005c48:	f003 0307 	and.w	r3, r3, #7
 8005c4c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	019a      	lsls	r2, r3, #6
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	061b      	lsls	r3, r3, #24
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	071b      	lsls	r3, r3, #28
 8005c60:	4990      	ldr	r1, [pc, #576]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005c68:	4b8e      	ldr	r3, [pc, #568]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c6e:	f023 021f 	bic.w	r2, r3, #31
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	69db      	ldr	r3, [r3, #28]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	498a      	ldr	r1, [pc, #552]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00d      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	019a      	lsls	r2, r3, #6
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	061b      	lsls	r3, r3, #24
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	071b      	lsls	r3, r3, #28
 8005ca0:	4980      	ldr	r1, [pc, #512]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ca8:	4b7d      	ldr	r3, [pc, #500]	; (8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005caa:	2201      	movs	r2, #1
 8005cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cae:	f001 fcb3 	bl	8007618 <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cb4:	e008      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005cb6:	f001 fcaf 	bl	8007618 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e12b      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cc8:	4b76      	ldr	r3, [pc, #472]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0f0      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d105      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d079      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cec:	4b6e      	ldr	r3, [pc, #440]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cf2:	f001 fc91 	bl	8007618 <HAL_GetTick>
 8005cf6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cf8:	e008      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005cfa:	f001 fc8d 	bl	8007618 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d901      	bls.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e109      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d0c:	4b65      	ldr	r3, [pc, #404]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d18:	d0ef      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d020      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d26:	4b5f      	ldr	r3, [pc, #380]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	0f1b      	lsrs	r3, r3, #28
 8005d2e:	f003 0307 	and.w	r3, r3, #7
 8005d32:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	019a      	lsls	r2, r3, #6
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	061b      	lsls	r3, r3, #24
 8005d40:	431a      	orrs	r2, r3
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	071b      	lsls	r3, r3, #28
 8005d46:	4957      	ldr	r1, [pc, #348]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d4e:	4b55      	ldr	r3, [pc, #340]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	021b      	lsls	r3, r3, #8
 8005d60:	4950      	ldr	r1, [pc, #320]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0308 	and.w	r3, r3, #8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01e      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d74:	4b4b      	ldr	r3, [pc, #300]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	0e1b      	lsrs	r3, r3, #24
 8005d7c:	f003 030f 	and.w	r3, r3, #15
 8005d80:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	019a      	lsls	r2, r3, #6
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	061b      	lsls	r3, r3, #24
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	071b      	lsls	r3, r3, #28
 8005d94:	4943      	ldr	r1, [pc, #268]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d9c:	4b41      	ldr	r3, [pc, #260]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005da2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	493e      	ldr	r1, [pc, #248]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005db2:	4b3d      	ldr	r3, [pc, #244]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005db8:	f001 fc2e 	bl	8007618 <HAL_GetTick>
 8005dbc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005dc0:	f001 fc2a 	bl	8007618 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e0a6      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005dd2:	4b34      	ldr	r3, [pc, #208]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dde:	d1ef      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0320 	and.w	r3, r3, #32
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 808d 	beq.w	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dee:	2300      	movs	r3, #0
 8005df0:	60fb      	str	r3, [r7, #12]
 8005df2:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df6:	4a2b      	ldr	r2, [pc, #172]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8005dfe:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e0a:	4b28      	ldr	r3, [pc, #160]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a27      	ldr	r2, [pc, #156]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e16:	f001 fbff 	bl	8007618 <HAL_GetTick>
 8005e1a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e1e:	f001 fbfb 	bl	8007618 <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b02      	cmp	r3, #2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e077      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e30:	4b1e      	ldr	r3, [pc, #120]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f0      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e3c:	4b19      	ldr	r3, [pc, #100]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e44:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d039      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d032      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e5a:	4b12      	ldr	r3, [pc, #72]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e64:	4b12      	ldr	r3, [pc, #72]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e6a:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e70:	4a0c      	ldr	r2, [pc, #48]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e76:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d11e      	bne.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e82:	f001 fbc9 	bl	8007618 <HAL_GetTick>
 8005e86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e88:	e014      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e8a:	f001 fbc5 	bl	8007618 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d90b      	bls.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e03f      	b.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005ea0:	42470068 	.word	0x42470068
 8005ea4:	40023800 	.word	0x40023800
 8005ea8:	42470070 	.word	0x42470070
 8005eac:	40007000 	.word	0x40007000
 8005eb0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eb4:	4b1c      	ldr	r3, [pc, #112]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d0e4      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ecc:	d10d      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005ece:	4b16      	ldr	r3, [pc, #88]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee2:	4911      	ldr	r1, [pc, #68]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	608b      	str	r3, [r1, #8]
 8005ee8:	e005      	b.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005eea:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	4a0e      	ldr	r2, [pc, #56]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ef0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ef4:	6093      	str	r3, [r2, #8]
 8005ef6:	4b0c      	ldr	r3, [pc, #48]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ef8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f02:	4909      	ldr	r1, [pc, #36]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005f1a:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005f1c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40023800 	.word	0x40023800
 8005f2c:	424711e0 	.word	0x424711e0

08005f30 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e025      	b.n	8005f90 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d106      	bne.n	8005f5e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f7fb fc79 	bl	8001850 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4610      	mov	r0, r2
 8005f72:	f001 f983 	bl	800727c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	f001 f9ee 	bl	8007362 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3708      	adds	r7, #8
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d101      	bne.n	8005fb4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e018      	b.n	8005fe6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	68b9      	ldr	r1, [r7, #8]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 fa4b 	bl	8007460 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d104      	bne.n	8005fdc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2205      	movs	r2, #5
 8005fd6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8005fda:	e003      	b.n	8005fe4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b082      	sub	sp, #8
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d101      	bne.n	8006008 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006004:	2302      	movs	r3, #2
 8006006:	e00e      	b.n	8006026 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f001 fa5e 	bl	80074d8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e056      	b.n	80060ee <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fc fbf4 	bl	8002848 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006076:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	ea42 0103 	orr.w	r1, r2, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	0c1b      	lsrs	r3, r3, #16
 80060be:	f003 0104 	and.w	r1, r3, #4
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b082      	sub	sp, #8
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e01d      	b.n	8006144 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d106      	bne.n	8006122 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7fc fcfb 	bl	8002b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2202      	movs	r2, #2
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	3304      	adds	r3, #4
 8006132:	4619      	mov	r1, r3
 8006134:	4610      	mov	r0, r2
 8006136:	f000 f967 	bl	8006408 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68da      	ldr	r2, [r3, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f042 0201 	orr.w	r2, r2, #1
 8006162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2b06      	cmp	r3, #6
 8006174:	d007      	beq.n	8006186 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0201 	orr.w	r2, r2, #1
 8006184:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d122      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d11b      	bne.n	80061f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f06f 0202 	mvn.w	r2, #2
 80061c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8f8 	bl	80063cc <HAL_TIM_IC_CaptureCallback>
 80061dc:	e005      	b.n	80061ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f8ea 	bl	80063b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f8fb 	bl	80063e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d122      	bne.n	8006244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b04      	cmp	r3, #4
 800620a:	d11b      	bne.n	8006244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0204 	mvn.w	r2, #4
 8006214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2202      	movs	r2, #2
 800621a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f8ce 	bl	80063cc <HAL_TIM_IC_CaptureCallback>
 8006230:	e005      	b.n	800623e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f8c0 	bl	80063b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f8d1 	bl	80063e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b08      	cmp	r3, #8
 8006250:	d122      	bne.n	8006298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b08      	cmp	r3, #8
 800625e:	d11b      	bne.n	8006298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f06f 0208 	mvn.w	r2, #8
 8006268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2204      	movs	r2, #4
 800626e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	69db      	ldr	r3, [r3, #28]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f8a4 	bl	80063cc <HAL_TIM_IC_CaptureCallback>
 8006284:	e005      	b.n	8006292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f896 	bl	80063b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f8a7 	bl	80063e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d122      	bne.n	80062ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f003 0310 	and.w	r3, r3, #16
 80062b0:	2b10      	cmp	r3, #16
 80062b2:	d11b      	bne.n	80062ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0210 	mvn.w	r2, #16
 80062bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2208      	movs	r2, #8
 80062c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	69db      	ldr	r3, [r3, #28]
 80062ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f87a 	bl	80063cc <HAL_TIM_IC_CaptureCallback>
 80062d8:	e005      	b.n	80062e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f86c 	bl	80063b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f87d 	bl	80063e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f003 0301 	and.w	r3, r3, #1
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d10e      	bne.n	8006318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b01      	cmp	r3, #1
 8006306:	d107      	bne.n	8006318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f06f 0201 	mvn.w	r2, #1
 8006310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f846 	bl	80063a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006322:	2b80      	cmp	r3, #128	; 0x80
 8006324:	d10e      	bne.n	8006344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006330:	2b80      	cmp	r3, #128	; 0x80
 8006332:	d107      	bne.n	8006344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800633c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f988 	bl	8006654 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b40      	cmp	r3, #64	; 0x40
 8006350:	d10e      	bne.n	8006370 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	d107      	bne.n	8006370 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f842 	bl	80063f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0320 	and.w	r3, r3, #32
 800637a:	2b20      	cmp	r3, #32
 800637c:	d10e      	bne.n	800639c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b20      	cmp	r3, #32
 800638a:	d107      	bne.n	800639c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0220 	mvn.w	r2, #32
 8006394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f952 	bl	8006640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a40      	ldr	r2, [pc, #256]	; (800651c <TIM_Base_SetConfig+0x114>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <TIM_Base_SetConfig+0x40>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006426:	d00f      	beq.n	8006448 <TIM_Base_SetConfig+0x40>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a3d      	ldr	r2, [pc, #244]	; (8006520 <TIM_Base_SetConfig+0x118>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00b      	beq.n	8006448 <TIM_Base_SetConfig+0x40>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a3c      	ldr	r2, [pc, #240]	; (8006524 <TIM_Base_SetConfig+0x11c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d007      	beq.n	8006448 <TIM_Base_SetConfig+0x40>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a3b      	ldr	r2, [pc, #236]	; (8006528 <TIM_Base_SetConfig+0x120>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d003      	beq.n	8006448 <TIM_Base_SetConfig+0x40>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a3a      	ldr	r2, [pc, #232]	; (800652c <TIM_Base_SetConfig+0x124>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d108      	bne.n	800645a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800644e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a2f      	ldr	r2, [pc, #188]	; (800651c <TIM_Base_SetConfig+0x114>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d02b      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006468:	d027      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a2c      	ldr	r2, [pc, #176]	; (8006520 <TIM_Base_SetConfig+0x118>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d023      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a2b      	ldr	r2, [pc, #172]	; (8006524 <TIM_Base_SetConfig+0x11c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01f      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a2a      	ldr	r2, [pc, #168]	; (8006528 <TIM_Base_SetConfig+0x120>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d01b      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a29      	ldr	r2, [pc, #164]	; (800652c <TIM_Base_SetConfig+0x124>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d017      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a28      	ldr	r2, [pc, #160]	; (8006530 <TIM_Base_SetConfig+0x128>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d013      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a27      	ldr	r2, [pc, #156]	; (8006534 <TIM_Base_SetConfig+0x12c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00f      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a26      	ldr	r2, [pc, #152]	; (8006538 <TIM_Base_SetConfig+0x130>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d00b      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a25      	ldr	r2, [pc, #148]	; (800653c <TIM_Base_SetConfig+0x134>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d007      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a24      	ldr	r2, [pc, #144]	; (8006540 <TIM_Base_SetConfig+0x138>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d003      	beq.n	80064ba <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a23      	ldr	r2, [pc, #140]	; (8006544 <TIM_Base_SetConfig+0x13c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d108      	bne.n	80064cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a0a      	ldr	r2, [pc, #40]	; (800651c <TIM_Base_SetConfig+0x114>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_Base_SetConfig+0xf8>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a0c      	ldr	r2, [pc, #48]	; (800652c <TIM_Base_SetConfig+0x124>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d103      	bne.n	8006508 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	691a      	ldr	r2, [r3, #16]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	615a      	str	r2, [r3, #20]
}
 800650e:	bf00      	nop
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	40010000 	.word	0x40010000
 8006520:	40000400 	.word	0x40000400
 8006524:	40000800 	.word	0x40000800
 8006528:	40000c00 	.word	0x40000c00
 800652c:	40010400 	.word	0x40010400
 8006530:	40014000 	.word	0x40014000
 8006534:	40014400 	.word	0x40014400
 8006538:	40014800 	.word	0x40014800
 800653c:	40001800 	.word	0x40001800
 8006540:	40001c00 	.word	0x40001c00
 8006544:	40002000 	.word	0x40002000

08006548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800655c:	2302      	movs	r3, #2
 800655e:	e05a      	b.n	8006616 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a21      	ldr	r2, [pc, #132]	; (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d022      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ac:	d01d      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a1d      	ldr	r2, [pc, #116]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d018      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a1b      	ldr	r2, [pc, #108]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a1a      	ldr	r2, [pc, #104]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00e      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a18      	ldr	r2, [pc, #96]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d009      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a17      	ldr	r2, [pc, #92]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d004      	beq.n	80065ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a15      	ldr	r2, [pc, #84]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d10c      	bne.n	8006604 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	40010000 	.word	0x40010000
 8006628:	40000400 	.word	0x40000400
 800662c:	40000800 	.word	0x40000800
 8006630:	40000c00 	.word	0x40000c00
 8006634:	40010400 	.word	0x40010400
 8006638:	40014000 	.word	0x40014000
 800663c:	40001800 	.word	0x40001800

08006640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006648:	bf00      	nop
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e03f      	b.n	80066fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d106      	bne.n	8006694 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fc fa9e 	bl	8002bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2224      	movs	r2, #36	; 0x24
 8006698:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fa69 	bl	8006b84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695a      	ldr	r2, [r3, #20]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3708      	adds	r7, #8
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
	...

08006704 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006724:	2300      	movs	r3, #0
 8006726:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006728:	2300      	movs	r3, #0
 800672a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d10d      	bne.n	8006756 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	f003 0320 	and.w	r3, r3, #32
 8006740:	2b00      	cmp	r3, #0
 8006742:	d008      	beq.n	8006756 <HAL_UART_IRQHandler+0x52>
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	2b00      	cmp	r3, #0
 800674c:	d003      	beq.n	8006756 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f996 	bl	8006a80 <UART_Receive_IT>
      return;
 8006754:	e0d1      	b.n	80068fa <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 80b0 	beq.w	80068be <HAL_UART_IRQHandler+0x1ba>
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d105      	bne.n	8006774 <HAL_UART_IRQHandler+0x70>
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 80a5 	beq.w	80068be <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00a      	beq.n	8006794 <HAL_UART_IRQHandler+0x90>
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800678c:	f043 0201 	orr.w	r2, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <HAL_UART_IRQHandler+0xb0>
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d005      	beq.n	80067b4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ac:	f043 0202 	orr.w	r2, r3, #2
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <HAL_UART_IRQHandler+0xd0>
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067cc:	f043 0204 	orr.w	r2, r3, #4
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	f003 0308 	and.w	r3, r3, #8
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00f      	beq.n	80067fe <HAL_UART_IRQHandler+0xfa>
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	f003 0320 	and.w	r3, r3, #32
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <HAL_UART_IRQHandler+0xee>
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d005      	beq.n	80067fe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	f043 0208 	orr.w	r2, r3, #8
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d078      	beq.n	80068f8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	f003 0320 	and.w	r3, r3, #32
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <HAL_UART_IRQHandler+0x11c>
 8006810:	69bb      	ldr	r3, [r7, #24]
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f930 	bl	8006a80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682a:	2b40      	cmp	r3, #64	; 0x40
 800682c:	bf0c      	ite	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	2300      	movne	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683a:	f003 0308 	and.w	r3, r3, #8
 800683e:	2b00      	cmp	r3, #0
 8006840:	d102      	bne.n	8006848 <HAL_UART_IRQHandler+0x144>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d031      	beq.n	80068ac <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f879 	bl	8006940 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006858:	2b40      	cmp	r3, #64	; 0x40
 800685a:	d123      	bne.n	80068a4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695a      	ldr	r2, [r3, #20]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800686a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006870:	2b00      	cmp	r3, #0
 8006872:	d013      	beq.n	800689c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	4a21      	ldr	r2, [pc, #132]	; (8006900 <HAL_UART_IRQHandler+0x1fc>)
 800687a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006880:	4618      	mov	r0, r3
 8006882:	f7fd fa11 	bl	8003ca8 <HAL_DMA_Abort_IT>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d016      	beq.n	80068ba <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006896:	4610      	mov	r0, r2
 8006898:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689a:	e00e      	b.n	80068ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f845 	bl	800692c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a2:	e00a      	b.n	80068ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f841 	bl	800692c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068aa:	e006      	b.n	80068ba <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 f83d 	bl	800692c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80068b8:	e01e      	b.n	80068f8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ba:	bf00      	nop
    return;
 80068bc:	e01c      	b.n	80068f8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d008      	beq.n	80068da <HAL_UART_IRQHandler+0x1d6>
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f866 	bl	80069a4 <UART_Transmit_IT>
    return;
 80068d8:	e00f      	b.n	80068fa <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <HAL_UART_IRQHandler+0x1f6>
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f8ae 	bl	8006a50 <UART_EndTransmit_IT>
    return;
 80068f4:	bf00      	nop
 80068f6:	e000      	b.n	80068fa <HAL_UART_IRQHandler+0x1f6>
    return;
 80068f8:	bf00      	nop
  }
}
 80068fa:	3720      	adds	r7, #32
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	0800697d 	.word	0x0800697d

08006904 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006934:	bf00      	nop
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006956:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006988:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f7ff ffc8 	bl	800692c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b21      	cmp	r3, #33	; 0x21
 80069b6:	d144      	bne.n	8006a42 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c0:	d11a      	bne.n	80069f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d105      	bne.n	80069ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]
 80069ea:	e00e      	b.n	8006a0a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	621a      	str	r2, [r3, #32]
 80069f6:	e008      	b.n	8006a0a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	1c59      	adds	r1, r3, #1
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6211      	str	r1, [r2, #32]
 8006a02:	781a      	ldrb	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	3b01      	subs	r3, #1
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	4619      	mov	r1, r3
 8006a18:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10f      	bne.n	8006a3e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68da      	ldr	r2, [r3, #12]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e000      	b.n	8006a44 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006a42:	2302      	movs	r3, #2
  }
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff47 	bl	8006904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b22      	cmp	r3, #34	; 0x22
 8006a92:	d171      	bne.n	8006b78 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9c:	d123      	bne.n	8006ae6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10e      	bne.n	8006aca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac2:	1c9a      	adds	r2, r3, #2
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ac8:	e029      	b.n	8006b1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ae4:	e01b      	b.n	8006b1e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10a      	bne.n	8006b04 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6858      	ldr	r0, [r3, #4]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af8:	1c59      	adds	r1, r3, #1
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	6291      	str	r1, [r2, #40]	; 0x28
 8006afe:	b2c2      	uxtb	r2, r0
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e00c      	b.n	8006b1e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b10:	1c58      	adds	r0, r3, #1
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	6288      	str	r0, [r1, #40]	; 0x28
 8006b16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006b1a:	b2d2      	uxtb	r2, r2
 8006b1c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	3b01      	subs	r3, #1
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d120      	bne.n	8006b74 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0220 	bic.w	r2, r2, #32
 8006b40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	695a      	ldr	r2, [r3, #20]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0201 	bic.w	r2, r2, #1
 8006b60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7ff fed4 	bl	8006918 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	e002      	b.n	8006b7a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006b74:	2300      	movs	r3, #0
 8006b76:	e000      	b.n	8006b7a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006b78:	2302      	movs	r3, #2
  }
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
	...

08006b84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b88:	b085      	sub	sp, #20
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68da      	ldr	r2, [r3, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	691b      	ldr	r3, [r3, #16]
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006bc6:	f023 030c 	bic.w	r3, r3, #12
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	68f9      	ldr	r1, [r7, #12]
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf2:	f040 818b 	bne.w	8006f0c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4ac1      	ldr	r2, [pc, #772]	; (8006f00 <UART_SetConfig+0x37c>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d005      	beq.n	8006c0c <UART_SetConfig+0x88>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4abf      	ldr	r2, [pc, #764]	; (8006f04 <UART_SetConfig+0x380>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	f040 80bd 	bne.w	8006d86 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c0c:	f7fe ffbe 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8006c10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	461d      	mov	r5, r3
 8006c16:	f04f 0600 	mov.w	r6, #0
 8006c1a:	46a8      	mov	r8, r5
 8006c1c:	46b1      	mov	r9, r6
 8006c1e:	eb18 0308 	adds.w	r3, r8, r8
 8006c22:	eb49 0409 	adc.w	r4, r9, r9
 8006c26:	4698      	mov	r8, r3
 8006c28:	46a1      	mov	r9, r4
 8006c2a:	eb18 0805 	adds.w	r8, r8, r5
 8006c2e:	eb49 0906 	adc.w	r9, r9, r6
 8006c32:	f04f 0100 	mov.w	r1, #0
 8006c36:	f04f 0200 	mov.w	r2, #0
 8006c3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006c3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006c42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006c46:	4688      	mov	r8, r1
 8006c48:	4691      	mov	r9, r2
 8006c4a:	eb18 0005 	adds.w	r0, r8, r5
 8006c4e:	eb49 0106 	adc.w	r1, r9, r6
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	461d      	mov	r5, r3
 8006c58:	f04f 0600 	mov.w	r6, #0
 8006c5c:	196b      	adds	r3, r5, r5
 8006c5e:	eb46 0406 	adc.w	r4, r6, r6
 8006c62:	461a      	mov	r2, r3
 8006c64:	4623      	mov	r3, r4
 8006c66:	f7fa f81f 	bl	8000ca8 <__aeabi_uldivmod>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	461a      	mov	r2, r3
 8006c70:	4ba5      	ldr	r3, [pc, #660]	; (8006f08 <UART_SetConfig+0x384>)
 8006c72:	fba3 2302 	umull	r2, r3, r3, r2
 8006c76:	095b      	lsrs	r3, r3, #5
 8006c78:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	461d      	mov	r5, r3
 8006c80:	f04f 0600 	mov.w	r6, #0
 8006c84:	46a9      	mov	r9, r5
 8006c86:	46b2      	mov	sl, r6
 8006c88:	eb19 0309 	adds.w	r3, r9, r9
 8006c8c:	eb4a 040a 	adc.w	r4, sl, sl
 8006c90:	4699      	mov	r9, r3
 8006c92:	46a2      	mov	sl, r4
 8006c94:	eb19 0905 	adds.w	r9, r9, r5
 8006c98:	eb4a 0a06 	adc.w	sl, sl, r6
 8006c9c:	f04f 0100 	mov.w	r1, #0
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006cac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006cb0:	4689      	mov	r9, r1
 8006cb2:	4692      	mov	sl, r2
 8006cb4:	eb19 0005 	adds.w	r0, r9, r5
 8006cb8:	eb4a 0106 	adc.w	r1, sl, r6
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	461d      	mov	r5, r3
 8006cc2:	f04f 0600 	mov.w	r6, #0
 8006cc6:	196b      	adds	r3, r5, r5
 8006cc8:	eb46 0406 	adc.w	r4, r6, r6
 8006ccc:	461a      	mov	r2, r3
 8006cce:	4623      	mov	r3, r4
 8006cd0:	f7f9 ffea 	bl	8000ca8 <__aeabi_uldivmod>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4b8b      	ldr	r3, [pc, #556]	; (8006f08 <UART_SetConfig+0x384>)
 8006cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ce0:	095b      	lsrs	r3, r3, #5
 8006ce2:	2164      	movs	r1, #100	; 0x64
 8006ce4:	fb01 f303 	mul.w	r3, r1, r3
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	3332      	adds	r3, #50	; 0x32
 8006cee:	4a86      	ldr	r2, [pc, #536]	; (8006f08 <UART_SetConfig+0x384>)
 8006cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf4:	095b      	lsrs	r3, r3, #5
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006cfc:	4498      	add	r8, r3
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	461d      	mov	r5, r3
 8006d02:	f04f 0600 	mov.w	r6, #0
 8006d06:	46a9      	mov	r9, r5
 8006d08:	46b2      	mov	sl, r6
 8006d0a:	eb19 0309 	adds.w	r3, r9, r9
 8006d0e:	eb4a 040a 	adc.w	r4, sl, sl
 8006d12:	4699      	mov	r9, r3
 8006d14:	46a2      	mov	sl, r4
 8006d16:	eb19 0905 	adds.w	r9, r9, r5
 8006d1a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006d1e:	f04f 0100 	mov.w	r1, #0
 8006d22:	f04f 0200 	mov.w	r2, #0
 8006d26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d32:	4689      	mov	r9, r1
 8006d34:	4692      	mov	sl, r2
 8006d36:	eb19 0005 	adds.w	r0, r9, r5
 8006d3a:	eb4a 0106 	adc.w	r1, sl, r6
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	461d      	mov	r5, r3
 8006d44:	f04f 0600 	mov.w	r6, #0
 8006d48:	196b      	adds	r3, r5, r5
 8006d4a:	eb46 0406 	adc.w	r4, r6, r6
 8006d4e:	461a      	mov	r2, r3
 8006d50:	4623      	mov	r3, r4
 8006d52:	f7f9 ffa9 	bl	8000ca8 <__aeabi_uldivmod>
 8006d56:	4603      	mov	r3, r0
 8006d58:	460c      	mov	r4, r1
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	4b6a      	ldr	r3, [pc, #424]	; (8006f08 <UART_SetConfig+0x384>)
 8006d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	2164      	movs	r1, #100	; 0x64
 8006d66:	fb01 f303 	mul.w	r3, r1, r3
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	3332      	adds	r3, #50	; 0x32
 8006d70:	4a65      	ldr	r2, [pc, #404]	; (8006f08 <UART_SetConfig+0x384>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	f003 0207 	and.w	r2, r3, #7
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4442      	add	r2, r8
 8006d82:	609a      	str	r2, [r3, #8]
 8006d84:	e26f      	b.n	8007266 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d86:	f7fe feed 	bl	8005b64 <HAL_RCC_GetPCLK1Freq>
 8006d8a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	461d      	mov	r5, r3
 8006d90:	f04f 0600 	mov.w	r6, #0
 8006d94:	46a8      	mov	r8, r5
 8006d96:	46b1      	mov	r9, r6
 8006d98:	eb18 0308 	adds.w	r3, r8, r8
 8006d9c:	eb49 0409 	adc.w	r4, r9, r9
 8006da0:	4698      	mov	r8, r3
 8006da2:	46a1      	mov	r9, r4
 8006da4:	eb18 0805 	adds.w	r8, r8, r5
 8006da8:	eb49 0906 	adc.w	r9, r9, r6
 8006dac:	f04f 0100 	mov.w	r1, #0
 8006db0:	f04f 0200 	mov.w	r2, #0
 8006db4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006db8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006dbc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006dc0:	4688      	mov	r8, r1
 8006dc2:	4691      	mov	r9, r2
 8006dc4:	eb18 0005 	adds.w	r0, r8, r5
 8006dc8:	eb49 0106 	adc.w	r1, r9, r6
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	461d      	mov	r5, r3
 8006dd2:	f04f 0600 	mov.w	r6, #0
 8006dd6:	196b      	adds	r3, r5, r5
 8006dd8:	eb46 0406 	adc.w	r4, r6, r6
 8006ddc:	461a      	mov	r2, r3
 8006dde:	4623      	mov	r3, r4
 8006de0:	f7f9 ff62 	bl	8000ca8 <__aeabi_uldivmod>
 8006de4:	4603      	mov	r3, r0
 8006de6:	460c      	mov	r4, r1
 8006de8:	461a      	mov	r2, r3
 8006dea:	4b47      	ldr	r3, [pc, #284]	; (8006f08 <UART_SetConfig+0x384>)
 8006dec:	fba3 2302 	umull	r2, r3, r3, r2
 8006df0:	095b      	lsrs	r3, r3, #5
 8006df2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	461d      	mov	r5, r3
 8006dfa:	f04f 0600 	mov.w	r6, #0
 8006dfe:	46a9      	mov	r9, r5
 8006e00:	46b2      	mov	sl, r6
 8006e02:	eb19 0309 	adds.w	r3, r9, r9
 8006e06:	eb4a 040a 	adc.w	r4, sl, sl
 8006e0a:	4699      	mov	r9, r3
 8006e0c:	46a2      	mov	sl, r4
 8006e0e:	eb19 0905 	adds.w	r9, r9, r5
 8006e12:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e16:	f04f 0100 	mov.w	r1, #0
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e22:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e26:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e2a:	4689      	mov	r9, r1
 8006e2c:	4692      	mov	sl, r2
 8006e2e:	eb19 0005 	adds.w	r0, r9, r5
 8006e32:	eb4a 0106 	adc.w	r1, sl, r6
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	461d      	mov	r5, r3
 8006e3c:	f04f 0600 	mov.w	r6, #0
 8006e40:	196b      	adds	r3, r5, r5
 8006e42:	eb46 0406 	adc.w	r4, r6, r6
 8006e46:	461a      	mov	r2, r3
 8006e48:	4623      	mov	r3, r4
 8006e4a:	f7f9 ff2d 	bl	8000ca8 <__aeabi_uldivmod>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	460c      	mov	r4, r1
 8006e52:	461a      	mov	r2, r3
 8006e54:	4b2c      	ldr	r3, [pc, #176]	; (8006f08 <UART_SetConfig+0x384>)
 8006e56:	fba3 1302 	umull	r1, r3, r3, r2
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	2164      	movs	r1, #100	; 0x64
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	3332      	adds	r3, #50	; 0x32
 8006e68:	4a27      	ldr	r2, [pc, #156]	; (8006f08 <UART_SetConfig+0x384>)
 8006e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6e:	095b      	lsrs	r3, r3, #5
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e76:	4498      	add	r8, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	461d      	mov	r5, r3
 8006e7c:	f04f 0600 	mov.w	r6, #0
 8006e80:	46a9      	mov	r9, r5
 8006e82:	46b2      	mov	sl, r6
 8006e84:	eb19 0309 	adds.w	r3, r9, r9
 8006e88:	eb4a 040a 	adc.w	r4, sl, sl
 8006e8c:	4699      	mov	r9, r3
 8006e8e:	46a2      	mov	sl, r4
 8006e90:	eb19 0905 	adds.w	r9, r9, r5
 8006e94:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e98:	f04f 0100 	mov.w	r1, #0
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ea4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ea8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006eac:	4689      	mov	r9, r1
 8006eae:	4692      	mov	sl, r2
 8006eb0:	eb19 0005 	adds.w	r0, r9, r5
 8006eb4:	eb4a 0106 	adc.w	r1, sl, r6
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	461d      	mov	r5, r3
 8006ebe:	f04f 0600 	mov.w	r6, #0
 8006ec2:	196b      	adds	r3, r5, r5
 8006ec4:	eb46 0406 	adc.w	r4, r6, r6
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4623      	mov	r3, r4
 8006ecc:	f7f9 feec 	bl	8000ca8 <__aeabi_uldivmod>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4b0c      	ldr	r3, [pc, #48]	; (8006f08 <UART_SetConfig+0x384>)
 8006ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8006edc:	095b      	lsrs	r3, r3, #5
 8006ede:	2164      	movs	r1, #100	; 0x64
 8006ee0:	fb01 f303 	mul.w	r3, r1, r3
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	3332      	adds	r3, #50	; 0x32
 8006eea:	4a07      	ldr	r2, [pc, #28]	; (8006f08 <UART_SetConfig+0x384>)
 8006eec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef0:	095b      	lsrs	r3, r3, #5
 8006ef2:	f003 0207 	and.w	r2, r3, #7
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4442      	add	r2, r8
 8006efc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006efe:	e1b2      	b.n	8007266 <UART_SetConfig+0x6e2>
 8006f00:	40011000 	.word	0x40011000
 8006f04:	40011400 	.word	0x40011400
 8006f08:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4ad7      	ldr	r2, [pc, #860]	; (8007270 <UART_SetConfig+0x6ec>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d005      	beq.n	8006f22 <UART_SetConfig+0x39e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4ad6      	ldr	r2, [pc, #856]	; (8007274 <UART_SetConfig+0x6f0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	f040 80d1 	bne.w	80070c4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f22:	f7fe fe33 	bl	8005b8c <HAL_RCC_GetPCLK2Freq>
 8006f26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	469a      	mov	sl, r3
 8006f2c:	f04f 0b00 	mov.w	fp, #0
 8006f30:	46d0      	mov	r8, sl
 8006f32:	46d9      	mov	r9, fp
 8006f34:	eb18 0308 	adds.w	r3, r8, r8
 8006f38:	eb49 0409 	adc.w	r4, r9, r9
 8006f3c:	4698      	mov	r8, r3
 8006f3e:	46a1      	mov	r9, r4
 8006f40:	eb18 080a 	adds.w	r8, r8, sl
 8006f44:	eb49 090b 	adc.w	r9, r9, fp
 8006f48:	f04f 0100 	mov.w	r1, #0
 8006f4c:	f04f 0200 	mov.w	r2, #0
 8006f50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f5c:	4688      	mov	r8, r1
 8006f5e:	4691      	mov	r9, r2
 8006f60:	eb1a 0508 	adds.w	r5, sl, r8
 8006f64:	eb4b 0609 	adc.w	r6, fp, r9
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	f04f 0200 	mov.w	r2, #0
 8006f72:	f04f 0300 	mov.w	r3, #0
 8006f76:	f04f 0400 	mov.w	r4, #0
 8006f7a:	0094      	lsls	r4, r2, #2
 8006f7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006f80:	008b      	lsls	r3, r1, #2
 8006f82:	461a      	mov	r2, r3
 8006f84:	4623      	mov	r3, r4
 8006f86:	4628      	mov	r0, r5
 8006f88:	4631      	mov	r1, r6
 8006f8a:	f7f9 fe8d 	bl	8000ca8 <__aeabi_uldivmod>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	460c      	mov	r4, r1
 8006f92:	461a      	mov	r2, r3
 8006f94:	4bb8      	ldr	r3, [pc, #736]	; (8007278 <UART_SetConfig+0x6f4>)
 8006f96:	fba3 2302 	umull	r2, r3, r3, r2
 8006f9a:	095b      	lsrs	r3, r3, #5
 8006f9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	469b      	mov	fp, r3
 8006fa4:	f04f 0c00 	mov.w	ip, #0
 8006fa8:	46d9      	mov	r9, fp
 8006faa:	46e2      	mov	sl, ip
 8006fac:	eb19 0309 	adds.w	r3, r9, r9
 8006fb0:	eb4a 040a 	adc.w	r4, sl, sl
 8006fb4:	4699      	mov	r9, r3
 8006fb6:	46a2      	mov	sl, r4
 8006fb8:	eb19 090b 	adds.w	r9, r9, fp
 8006fbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006fc0:	f04f 0100 	mov.w	r1, #0
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006fd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006fd4:	4689      	mov	r9, r1
 8006fd6:	4692      	mov	sl, r2
 8006fd8:	eb1b 0509 	adds.w	r5, fp, r9
 8006fdc:	eb4c 060a 	adc.w	r6, ip, sl
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f04f 0200 	mov.w	r2, #0
 8006fea:	f04f 0300 	mov.w	r3, #0
 8006fee:	f04f 0400 	mov.w	r4, #0
 8006ff2:	0094      	lsls	r4, r2, #2
 8006ff4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ff8:	008b      	lsls	r3, r1, #2
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4623      	mov	r3, r4
 8006ffe:	4628      	mov	r0, r5
 8007000:	4631      	mov	r1, r6
 8007002:	f7f9 fe51 	bl	8000ca8 <__aeabi_uldivmod>
 8007006:	4603      	mov	r3, r0
 8007008:	460c      	mov	r4, r1
 800700a:	461a      	mov	r2, r3
 800700c:	4b9a      	ldr	r3, [pc, #616]	; (8007278 <UART_SetConfig+0x6f4>)
 800700e:	fba3 1302 	umull	r1, r3, r3, r2
 8007012:	095b      	lsrs	r3, r3, #5
 8007014:	2164      	movs	r1, #100	; 0x64
 8007016:	fb01 f303 	mul.w	r3, r1, r3
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	011b      	lsls	r3, r3, #4
 800701e:	3332      	adds	r3, #50	; 0x32
 8007020:	4a95      	ldr	r2, [pc, #596]	; (8007278 <UART_SetConfig+0x6f4>)
 8007022:	fba2 2303 	umull	r2, r3, r2, r3
 8007026:	095b      	lsrs	r3, r3, #5
 8007028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800702c:	4498      	add	r8, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	469b      	mov	fp, r3
 8007032:	f04f 0c00 	mov.w	ip, #0
 8007036:	46d9      	mov	r9, fp
 8007038:	46e2      	mov	sl, ip
 800703a:	eb19 0309 	adds.w	r3, r9, r9
 800703e:	eb4a 040a 	adc.w	r4, sl, sl
 8007042:	4699      	mov	r9, r3
 8007044:	46a2      	mov	sl, r4
 8007046:	eb19 090b 	adds.w	r9, r9, fp
 800704a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800705a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800705e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007062:	4689      	mov	r9, r1
 8007064:	4692      	mov	sl, r2
 8007066:	eb1b 0509 	adds.w	r5, fp, r9
 800706a:	eb4c 060a 	adc.w	r6, ip, sl
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	4619      	mov	r1, r3
 8007074:	f04f 0200 	mov.w	r2, #0
 8007078:	f04f 0300 	mov.w	r3, #0
 800707c:	f04f 0400 	mov.w	r4, #0
 8007080:	0094      	lsls	r4, r2, #2
 8007082:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007086:	008b      	lsls	r3, r1, #2
 8007088:	461a      	mov	r2, r3
 800708a:	4623      	mov	r3, r4
 800708c:	4628      	mov	r0, r5
 800708e:	4631      	mov	r1, r6
 8007090:	f7f9 fe0a 	bl	8000ca8 <__aeabi_uldivmod>
 8007094:	4603      	mov	r3, r0
 8007096:	460c      	mov	r4, r1
 8007098:	461a      	mov	r2, r3
 800709a:	4b77      	ldr	r3, [pc, #476]	; (8007278 <UART_SetConfig+0x6f4>)
 800709c:	fba3 1302 	umull	r1, r3, r3, r2
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	2164      	movs	r1, #100	; 0x64
 80070a4:	fb01 f303 	mul.w	r3, r1, r3
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	011b      	lsls	r3, r3, #4
 80070ac:	3332      	adds	r3, #50	; 0x32
 80070ae:	4a72      	ldr	r2, [pc, #456]	; (8007278 <UART_SetConfig+0x6f4>)
 80070b0:	fba2 2303 	umull	r2, r3, r2, r3
 80070b4:	095b      	lsrs	r3, r3, #5
 80070b6:	f003 020f 	and.w	r2, r3, #15
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4442      	add	r2, r8
 80070c0:	609a      	str	r2, [r3, #8]
 80070c2:	e0d0      	b.n	8007266 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80070c4:	f7fe fd4e 	bl	8005b64 <HAL_RCC_GetPCLK1Freq>
 80070c8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	469a      	mov	sl, r3
 80070ce:	f04f 0b00 	mov.w	fp, #0
 80070d2:	46d0      	mov	r8, sl
 80070d4:	46d9      	mov	r9, fp
 80070d6:	eb18 0308 	adds.w	r3, r8, r8
 80070da:	eb49 0409 	adc.w	r4, r9, r9
 80070de:	4698      	mov	r8, r3
 80070e0:	46a1      	mov	r9, r4
 80070e2:	eb18 080a 	adds.w	r8, r8, sl
 80070e6:	eb49 090b 	adc.w	r9, r9, fp
 80070ea:	f04f 0100 	mov.w	r1, #0
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070f6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070fa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070fe:	4688      	mov	r8, r1
 8007100:	4691      	mov	r9, r2
 8007102:	eb1a 0508 	adds.w	r5, sl, r8
 8007106:	eb4b 0609 	adc.w	r6, fp, r9
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	4619      	mov	r1, r3
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	f04f 0400 	mov.w	r4, #0
 800711c:	0094      	lsls	r4, r2, #2
 800711e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007122:	008b      	lsls	r3, r1, #2
 8007124:	461a      	mov	r2, r3
 8007126:	4623      	mov	r3, r4
 8007128:	4628      	mov	r0, r5
 800712a:	4631      	mov	r1, r6
 800712c:	f7f9 fdbc 	bl	8000ca8 <__aeabi_uldivmod>
 8007130:	4603      	mov	r3, r0
 8007132:	460c      	mov	r4, r1
 8007134:	461a      	mov	r2, r3
 8007136:	4b50      	ldr	r3, [pc, #320]	; (8007278 <UART_SetConfig+0x6f4>)
 8007138:	fba3 2302 	umull	r2, r3, r3, r2
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	469b      	mov	fp, r3
 8007146:	f04f 0c00 	mov.w	ip, #0
 800714a:	46d9      	mov	r9, fp
 800714c:	46e2      	mov	sl, ip
 800714e:	eb19 0309 	adds.w	r3, r9, r9
 8007152:	eb4a 040a 	adc.w	r4, sl, sl
 8007156:	4699      	mov	r9, r3
 8007158:	46a2      	mov	sl, r4
 800715a:	eb19 090b 	adds.w	r9, r9, fp
 800715e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007162:	f04f 0100 	mov.w	r1, #0
 8007166:	f04f 0200 	mov.w	r2, #0
 800716a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800716e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007172:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007176:	4689      	mov	r9, r1
 8007178:	4692      	mov	sl, r2
 800717a:	eb1b 0509 	adds.w	r5, fp, r9
 800717e:	eb4c 060a 	adc.w	r6, ip, sl
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	4619      	mov	r1, r3
 8007188:	f04f 0200 	mov.w	r2, #0
 800718c:	f04f 0300 	mov.w	r3, #0
 8007190:	f04f 0400 	mov.w	r4, #0
 8007194:	0094      	lsls	r4, r2, #2
 8007196:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800719a:	008b      	lsls	r3, r1, #2
 800719c:	461a      	mov	r2, r3
 800719e:	4623      	mov	r3, r4
 80071a0:	4628      	mov	r0, r5
 80071a2:	4631      	mov	r1, r6
 80071a4:	f7f9 fd80 	bl	8000ca8 <__aeabi_uldivmod>
 80071a8:	4603      	mov	r3, r0
 80071aa:	460c      	mov	r4, r1
 80071ac:	461a      	mov	r2, r3
 80071ae:	4b32      	ldr	r3, [pc, #200]	; (8007278 <UART_SetConfig+0x6f4>)
 80071b0:	fba3 1302 	umull	r1, r3, r3, r2
 80071b4:	095b      	lsrs	r3, r3, #5
 80071b6:	2164      	movs	r1, #100	; 0x64
 80071b8:	fb01 f303 	mul.w	r3, r1, r3
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	3332      	adds	r3, #50	; 0x32
 80071c2:	4a2d      	ldr	r2, [pc, #180]	; (8007278 <UART_SetConfig+0x6f4>)
 80071c4:	fba2 2303 	umull	r2, r3, r2, r3
 80071c8:	095b      	lsrs	r3, r3, #5
 80071ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071ce:	4498      	add	r8, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	469b      	mov	fp, r3
 80071d4:	f04f 0c00 	mov.w	ip, #0
 80071d8:	46d9      	mov	r9, fp
 80071da:	46e2      	mov	sl, ip
 80071dc:	eb19 0309 	adds.w	r3, r9, r9
 80071e0:	eb4a 040a 	adc.w	r4, sl, sl
 80071e4:	4699      	mov	r9, r3
 80071e6:	46a2      	mov	sl, r4
 80071e8:	eb19 090b 	adds.w	r9, r9, fp
 80071ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80071f0:	f04f 0100 	mov.w	r1, #0
 80071f4:	f04f 0200 	mov.w	r2, #0
 80071f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007200:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007204:	4689      	mov	r9, r1
 8007206:	4692      	mov	sl, r2
 8007208:	eb1b 0509 	adds.w	r5, fp, r9
 800720c:	eb4c 060a 	adc.w	r6, ip, sl
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	4619      	mov	r1, r3
 8007216:	f04f 0200 	mov.w	r2, #0
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	f04f 0400 	mov.w	r4, #0
 8007222:	0094      	lsls	r4, r2, #2
 8007224:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007228:	008b      	lsls	r3, r1, #2
 800722a:	461a      	mov	r2, r3
 800722c:	4623      	mov	r3, r4
 800722e:	4628      	mov	r0, r5
 8007230:	4631      	mov	r1, r6
 8007232:	f7f9 fd39 	bl	8000ca8 <__aeabi_uldivmod>
 8007236:	4603      	mov	r3, r0
 8007238:	460c      	mov	r4, r1
 800723a:	461a      	mov	r2, r3
 800723c:	4b0e      	ldr	r3, [pc, #56]	; (8007278 <UART_SetConfig+0x6f4>)
 800723e:	fba3 1302 	umull	r1, r3, r3, r2
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	2164      	movs	r1, #100	; 0x64
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	011b      	lsls	r3, r3, #4
 800724e:	3332      	adds	r3, #50	; 0x32
 8007250:	4a09      	ldr	r2, [pc, #36]	; (8007278 <UART_SetConfig+0x6f4>)
 8007252:	fba2 2303 	umull	r2, r3, r2, r3
 8007256:	095b      	lsrs	r3, r3, #5
 8007258:	f003 020f 	and.w	r2, r3, #15
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4442      	add	r2, r8
 8007262:	609a      	str	r2, [r3, #8]
}
 8007264:	e7ff      	b.n	8007266 <UART_SetConfig+0x6e2>
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007270:	40011000 	.word	0x40011000
 8007274:	40011400 	.word	0x40011400
 8007278:	51eb851f 	.word	0x51eb851f

0800727c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d029      	beq.n	80072ea <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80072a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072a6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072b0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80072b6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80072bc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80072c2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80072c8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80072ce:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80072d4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80072da:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	4313      	orrs	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e034      	b.n	8007354 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072f6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007300:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007306:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800731a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800731e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007328:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800732e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007334:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800733a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007340:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	4313      	orrs	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007362:	b480      	push	{r7}
 8007364:	b087      	sub	sp, #28
 8007366:	af00      	add	r7, sp, #0
 8007368:	60f8      	str	r0, [r7, #12]
 800736a:	60b9      	str	r1, [r7, #8]
 800736c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007372:	2300      	movs	r3, #0
 8007374:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d02e      	beq.n	80073da <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007388:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	3b01      	subs	r3, #1
 8007396:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007398:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	3b01      	subs	r3, #1
 80073a0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80073a2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80073ac:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	691b      	ldr	r3, [r3, #16]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80073b6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	695b      	ldr	r3, [r3, #20]
 80073bc:	3b01      	subs	r3, #1
 80073be:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80073c0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80073ca:	4313      	orrs	r3, r2
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	609a      	str	r2, [r3, #8]
 80073d8:	e03b      	b.n	8007452 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ea:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80073fc:	4313      	orrs	r3, r2
 80073fe:	697a      	ldr	r2, [r7, #20]
 8007400:	4313      	orrs	r3, r2
 8007402:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007410:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	3b01      	subs	r3, #1
 800741e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007420:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	3b01      	subs	r3, #1
 8007428:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800742a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	3b01      	subs	r3, #1
 8007432:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007434:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	3b01      	subs	r3, #1
 800743c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800743e:	4313      	orrs	r3, r2
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800747c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	3b01      	subs	r3, #1
 8007484:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007486:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800748e:	4313      	orrs	r3, r2
 8007490:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007498:	f000 f8be 	bl	8007618 <HAL_GetTick>
 800749c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800749e:	e010      	b.n	80074c2 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074a6:	d00c      	beq.n	80074c2 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <FMC_SDRAM_SendCommand+0x5e>
 80074ae:	f000 f8b3 	bl	8007618 <HAL_GetTick>
 80074b2:	4602      	mov	r2, r0
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d201      	bcs.n	80074c2 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e006      	b.n	80074d0 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d0e8      	beq.n	80074a0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3718      	adds	r7, #24
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	695a      	ldr	r2, [r3, #20]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 80074fe:	b480      	push	{r7}
 8007500:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 8007502:	bf00      	nop
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8007512:	4b3e      	ldr	r3, [pc, #248]	; (800760c <HAL_IncTick+0x100>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3301      	adds	r3, #1
 8007518:	4a3c      	ldr	r2, [pc, #240]	; (800760c <HAL_IncTick+0x100>)
 800751a:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 800751c:	4b3c      	ldr	r3, [pc, #240]	; (8007610 <HAL_IncTick+0x104>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d004      	beq.n	800752e <HAL_IncTick+0x22>
		TM_Time2--;
 8007524:	4b3a      	ldr	r3, [pc, #232]	; (8007610 <HAL_IncTick+0x104>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3b01      	subs	r3, #1
 800752a:	4a39      	ldr	r2, [pc, #228]	; (8007610 <HAL_IncTick+0x104>)
 800752c:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 800752e:	2300      	movs	r3, #0
 8007530:	71fb      	strb	r3, [r7, #7]
 8007532:	e05f      	b.n	80075f4 <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	4a37      	ldr	r2, [pc, #220]	; (8007614 <HAL_IncTick+0x108>)
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	685b      	ldr	r3, [r3, #4]
		if (
 800753e:	2b00      	cmp	r3, #0
 8007540:	d055      	beq.n	80075ee <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	4a33      	ldr	r2, [pc, #204]	; (8007614 <HAL_IncTick+0x108>)
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	f003 0302 	and.w	r3, r3, #2
 8007552:	b2db      	uxtb	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d04a      	beq.n	80075ee <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 8007558:	79fb      	ldrb	r3, [r7, #7]
 800755a:	4a2e      	ldr	r2, [pc, #184]	; (8007614 <HAL_IncTick+0x108>)
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d007      	beq.n	8007578 <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	4a2a      	ldr	r2, [pc, #168]	; (8007614 <HAL_IncTick+0x108>)
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	4413      	add	r3, r2
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	3a01      	subs	r2, #1
 8007576:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8007578:	79fb      	ldrb	r3, [r7, #7]
 800757a:	4a26      	ldr	r2, [pc, #152]	; (8007614 <HAL_IncTick+0x108>)
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4413      	add	r3, r2
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d132      	bne.n	80075ee <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8007588:	79fb      	ldrb	r3, [r7, #7]
 800758a:	4a22      	ldr	r2, [pc, #136]	; (8007614 <HAL_IncTick+0x108>)
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	4413      	add	r3, r2
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	68da      	ldr	r2, [r3, #12]
 8007594:	79fb      	ldrb	r3, [r7, #7]
 8007596:	491f      	ldr	r1, [pc, #124]	; (8007614 <HAL_IncTick+0x108>)
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	440b      	add	r3, r1
 800759c:	6858      	ldr	r0, [r3, #4]
 800759e:	79fb      	ldrb	r3, [r7, #7]
 80075a0:	491c      	ldr	r1, [pc, #112]	; (8007614 <HAL_IncTick+0x108>)
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	440b      	add	r3, r1
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	4619      	mov	r1, r3
 80075ac:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80075ae:	79fb      	ldrb	r3, [r7, #7]
 80075b0:	4a18      	ldr	r2, [pc, #96]	; (8007614 <HAL_IncTick+0x108>)
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	4916      	ldr	r1, [pc, #88]	; (8007614 <HAL_IncTick+0x108>)
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	440b      	add	r3, r1
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	6852      	ldr	r2, [r2, #4]
 80075c4:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	4a12      	ldr	r2, [pc, #72]	; (8007614 <HAL_IncTick+0x108>)
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d108      	bne.n	80075ee <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	4a0d      	ldr	r2, [pc, #52]	; (8007614 <HAL_IncTick+0x108>)
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	685a      	ldr	r2, [r3, #4]
 80075e6:	7813      	ldrb	r3, [r2, #0]
 80075e8:	f36f 0341 	bfc	r3, #1, #1
 80075ec:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	3301      	adds	r3, #1
 80075f2:	71fb      	strb	r3, [r7, #7]
 80075f4:	4b07      	ldr	r3, [pc, #28]	; (8007614 <HAL_IncTick+0x108>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	79fa      	ldrb	r2, [r7, #7]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d39a      	bcc.n	8007534 <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 80075fe:	f7ff ff7e 	bl	80074fe <TM_DELAY_1msHandler>
}
 8007602:	bf00      	nop
 8007604:	3708      	adds	r7, #8
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	20000228 	.word	0x20000228
 8007610:	20000224 	.word	0x20000224
 8007614:	2000022c 	.word	0x2000022c

08007618 <HAL_GetTick>:
			}
		}
	}
}

uint32_t HAL_GetTick(void) {
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 800761c:	4b03      	ldr	r3, [pc, #12]	; (800762c <HAL_GetTick+0x14>)
 800761e:	681b      	ldr	r3, [r3, #0]
}
 8007620:	4618      	mov	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	20000228 	.word	0x20000228

08007630 <DMA2D_Convert565ToARGB8888>:
static DMA2D_HandleTypeDef DMA2DHandle;
//static DMA2D_FG_InitTypeDef GRAPHIC_DMA2D_FG_InitStruct;
volatile TM_INT_DMA2D_t DIS;

/* Convert function */
static void DMA2D_Convert565ToARGB8888(uint32_t color) {
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
	/* Input color: RRRRR GGGGGG BBBBB */
	/* Output color: RRRRR000 GGGGGG00 BBBBB000 */
    DMA2D_Color = color;
 8007638:	4a04      	ldr	r2, [pc, #16]	; (800764c <DMA2D_Convert565ToARGB8888+0x1c>)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6013      	str	r3, [r2, #0]
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000018 	.word	0x20000018

08007650 <TM_DMA2DGRAPHIC_Init>:
void TM_INT_DMA2DGRAPHIC_InitAndTransfer(void);
void TM_INT_DMA2DGRAPHIC_SetMemory(uint32_t MemoryAddress, uint32_t Offset, uint32_t NumberOfLine, uint32_t PixelPerLine);
void TM_INT_DMA2DGRAPHIC_DrawCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color);
void TM_INT_DMA2DGRAPHIC_DrawFilledCircleCorner(int16_t x0, int16_t y0, int16_t r, uint8_t corner, uint32_t color);

void TM_DMA2DGRAPHIC_Init(void) {
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
	/* Internal settings */
	DIS.StartAddress = DMA2D_GRAPHIC_RAM_ADDR;
 8007656:	4b23      	ldr	r3, [pc, #140]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8007658:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 800765c:	609a      	str	r2, [r3, #8]
	DIS.Offset = 0;
 800765e:	4b21      	ldr	r3, [pc, #132]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8007660:	2200      	movs	r2, #0
 8007662:	615a      	str	r2, [r3, #20]
	DIS.Width = DMA2D_GRAPHIC_LCD_WIDTH;
 8007664:	4b1f      	ldr	r3, [pc, #124]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8007666:	22f0      	movs	r2, #240	; 0xf0
 8007668:	801a      	strh	r2, [r3, #0]
	DIS.Height = DMA2D_GRAPHIC_LCD_HEIGHT;
 800766a:	4b1e      	ldr	r3, [pc, #120]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 800766c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007670:	805a      	strh	r2, [r3, #2]
	DIS.Pixels = DMA2D_GRAPHIC_PIXELS;
 8007672:	4b1c      	ldr	r3, [pc, #112]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8007674:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8007678:	619a      	str	r2, [r3, #24]
	DIS.CurrentHeight = DMA2D_GRAPHIC_LCD_WIDTH;
 800767a:	4b1a      	ldr	r3, [pc, #104]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 800767c:	22f0      	movs	r2, #240	; 0xf0
 800767e:	80da      	strh	r2, [r3, #6]
	DIS.CurrentWidth = DMA2D_GRAPHIC_LCD_HEIGHT;
 8007680:	4b18      	ldr	r3, [pc, #96]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8007682:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007686:	809a      	strh	r2, [r3, #4]
	DIS.Orientation = 0;
 8007688:	4b16      	ldr	r3, [pc, #88]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 800768a:	2200      	movs	r2, #0
 800768c:	775a      	strb	r2, [r3, #29]
	DIS.PixelSize = 2;
 800768e:	4b15      	ldr	r3, [pc, #84]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8007690:	2202      	movs	r2, #2
 8007692:	779a      	strb	r2, [r3, #30]
	DIS.LayerOffset = DMA2D_GRAPHIC_LCD_WIDTH * DMA2D_GRAPHIC_LCD_HEIGHT * DIS.PixelSize;
 8007694:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 8007696:	7f9b      	ldrb	r3, [r3, #30]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	461a      	mov	r2, r3
 800769c:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80076a0:	fb03 f302 	mul.w	r3, r3, r2
 80076a4:	461a      	mov	r2, r3
 80076a6:	4b0f      	ldr	r3, [pc, #60]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 80076a8:	60da      	str	r2, [r3, #12]
	DIS.LayerNumber = 0;
 80076aa:	4b0e      	ldr	r3, [pc, #56]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	741a      	strb	r2, [r3, #16]
	
	/* Set DMA2D instance value */
	DMA2DHandle.Instance = DMA2D;
 80076b0:	4b0d      	ldr	r3, [pc, #52]	; (80076e8 <TM_DMA2DGRAPHIC_Init+0x98>)
 80076b2:	4a0e      	ldr	r2, [pc, #56]	; (80076ec <TM_DMA2DGRAPHIC_Init+0x9c>)
 80076b4:	601a      	str	r2, [r3, #0]
	
	/* Enable DMA2D clock */
	__HAL_RCC_DMA2D_CLK_ENABLE();
 80076b6:	2300      	movs	r3, #0
 80076b8:	607b      	str	r3, [r7, #4]
 80076ba:	4b0d      	ldr	r3, [pc, #52]	; (80076f0 <TM_DMA2DGRAPHIC_Init+0xa0>)
 80076bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076be:	4a0c      	ldr	r2, [pc, #48]	; (80076f0 <TM_DMA2DGRAPHIC_Init+0xa0>)
 80076c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80076c4:	6313      	str	r3, [r2, #48]	; 0x30
 80076c6:	4b0a      	ldr	r3, [pc, #40]	; (80076f0 <TM_DMA2DGRAPHIC_Init+0xa0>)
 80076c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076ce:	607b      	str	r3, [r7, #4]
 80076d0:	687b      	ldr	r3, [r7, #4]
	
	/* Initialized */
	DIS.Initialized = 1;
 80076d2:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <TM_DMA2DGRAPHIC_Init+0x94>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	771a      	strb	r2, [r3, #28]
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	20000d34 	.word	0x20000d34
 80076e8:	20000244 	.word	0x20000244
 80076ec:	4002b000 	.word	0x4002b000
 80076f0:	40023800 	.word	0x40023800

080076f4 <TM_DMA2DGRAPHIC_SetLayer>:

void TM_DMA2DGRAPHIC_SetLayer(uint8_t layer_number) {
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	4603      	mov	r3, r0
 80076fc:	71fb      	strb	r3, [r7, #7]
	/* Set offset */
	DIS.Offset = (layer_number) * DIS.LayerOffset;
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	4a07      	ldr	r2, [pc, #28]	; (8007720 <TM_DMA2DGRAPHIC_SetLayer+0x2c>)
 8007702:	68d2      	ldr	r2, [r2, #12]
 8007704:	fb02 f303 	mul.w	r3, r2, r3
 8007708:	4a05      	ldr	r2, [pc, #20]	; (8007720 <TM_DMA2DGRAPHIC_SetLayer+0x2c>)
 800770a:	6153      	str	r3, [r2, #20]
	DIS.LayerNumber = layer_number;
 800770c:	4a04      	ldr	r2, [pc, #16]	; (8007720 <TM_DMA2DGRAPHIC_SetLayer+0x2c>)
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	7413      	strb	r3, [r2, #16]
}
 8007712:	bf00      	nop
 8007714:	370c      	adds	r7, #12
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	20000d34 	.word	0x20000d34

08007724 <TM_DMA2DGRAPHIC_DrawPixel>:

void TM_DMA2DGRAPHIC_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 8007724:	b490      	push	{r4, r7}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	603a      	str	r2, [r7, #0]
 800772e:	80fb      	strh	r3, [r7, #6]
 8007730:	460b      	mov	r3, r1
 8007732:	80bb      	strh	r3, [r7, #4]
	if (DIS.Orientation == 1) { /* Normal */
 8007734:	4b47      	ldr	r3, [pc, #284]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007736:	7f5b      	ldrb	r3, [r3, #29]
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b01      	cmp	r3, #1
 800773c:	d117      	bne.n	800776e <TM_DMA2DGRAPHIC_DrawPixel+0x4a>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * (y * DIS.Width + x)) = color;
 800773e:	4b45      	ldr	r3, [pc, #276]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	4b44      	ldr	r3, [pc, #272]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007744:	695b      	ldr	r3, [r3, #20]
 8007746:	4413      	add	r3, r2
 8007748:	4a42      	ldr	r2, [pc, #264]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800774a:	7f92      	ldrb	r2, [r2, #30]
 800774c:	b2d2      	uxtb	r2, r2
 800774e:	4610      	mov	r0, r2
 8007750:	88ba      	ldrh	r2, [r7, #4]
 8007752:	4940      	ldr	r1, [pc, #256]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007754:	8809      	ldrh	r1, [r1, #0]
 8007756:	b289      	uxth	r1, r1
 8007758:	fb01 f102 	mul.w	r1, r1, r2
 800775c:	88fa      	ldrh	r2, [r7, #6]
 800775e:	440a      	add	r2, r1
 8007760:	fb02 f200 	mul.w	r2, r2, r0
 8007764:	4413      	add	r3, r2
 8007766:	461a      	mov	r2, r3
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	6013      	str	r3, [r2, #0]
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1)) = color;
	} else if (DIS.Orientation == 2) { /* 270 */
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y)) = color;
	}
}
 800776c:	e06c      	b.n	8007848 <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 0) { /* 180 */
 800776e:	4b39      	ldr	r3, [pc, #228]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007770:	7f5b      	ldrb	r3, [r3, #29]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d123      	bne.n	80077c0 <TM_DMA2DGRAPHIC_DrawPixel+0x9c>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - y - 1) * DIS.Width + (DIS.Width - x - 1))) = color;
 8007778:	4b36      	ldr	r3, [pc, #216]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	4b35      	ldr	r3, [pc, #212]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	4413      	add	r3, r2
 8007782:	4a34      	ldr	r2, [pc, #208]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007784:	7f92      	ldrb	r2, [r2, #30]
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	4610      	mov	r0, r2
 800778a:	4a32      	ldr	r2, [pc, #200]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800778c:	8852      	ldrh	r2, [r2, #2]
 800778e:	b292      	uxth	r2, r2
 8007790:	4611      	mov	r1, r2
 8007792:	88ba      	ldrh	r2, [r7, #4]
 8007794:	1a8a      	subs	r2, r1, r2
 8007796:	3a01      	subs	r2, #1
 8007798:	492e      	ldr	r1, [pc, #184]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800779a:	8809      	ldrh	r1, [r1, #0]
 800779c:	b289      	uxth	r1, r1
 800779e:	fb01 f102 	mul.w	r1, r1, r2
 80077a2:	4a2c      	ldr	r2, [pc, #176]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80077a4:	8812      	ldrh	r2, [r2, #0]
 80077a6:	b292      	uxth	r2, r2
 80077a8:	4614      	mov	r4, r2
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	1aa2      	subs	r2, r4, r2
 80077ae:	3a01      	subs	r2, #1
 80077b0:	440a      	add	r2, r1
 80077b2:	fb02 f200 	mul.w	r2, r2, r0
 80077b6:	4413      	add	r3, r2
 80077b8:	461a      	mov	r2, r3
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6013      	str	r3, [r2, #0]
}
 80077be:	e043      	b.n	8007848 <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
 80077c0:	4b24      	ldr	r3, [pc, #144]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80077c2:	7f5b      	ldrb	r3, [r3, #29]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d11c      	bne.n	8007804 <TM_DMA2DGRAPHIC_DrawPixel+0xe0>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1)) = color;
 80077ca:	4b22      	ldr	r3, [pc, #136]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	4b21      	ldr	r3, [pc, #132]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	4413      	add	r3, r2
 80077d4:	4a1f      	ldr	r2, [pc, #124]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80077d6:	7f92      	ldrb	r2, [r2, #30]
 80077d8:	b2d2      	uxtb	r2, r2
 80077da:	4610      	mov	r0, r2
 80077dc:	88fa      	ldrh	r2, [r7, #6]
 80077de:	491d      	ldr	r1, [pc, #116]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80077e0:	8809      	ldrh	r1, [r1, #0]
 80077e2:	b289      	uxth	r1, r1
 80077e4:	fb01 f202 	mul.w	r2, r1, r2
 80077e8:	491a      	ldr	r1, [pc, #104]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 80077ea:	8809      	ldrh	r1, [r1, #0]
 80077ec:	b289      	uxth	r1, r1
 80077ee:	4411      	add	r1, r2
 80077f0:	88ba      	ldrh	r2, [r7, #4]
 80077f2:	1a8a      	subs	r2, r1, r2
 80077f4:	3a01      	subs	r2, #1
 80077f6:	fb02 f200 	mul.w	r2, r2, r0
 80077fa:	4413      	add	r3, r2
 80077fc:	461a      	mov	r2, r3
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	6013      	str	r3, [r2, #0]
}
 8007802:	e021      	b.n	8007848 <TM_DMA2DGRAPHIC_DrawPixel+0x124>
	} else if (DIS.Orientation == 2) { /* 270 */
 8007804:	4b13      	ldr	r3, [pc, #76]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007806:	7f5b      	ldrb	r3, [r3, #29]
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b02      	cmp	r3, #2
 800780c:	d11c      	bne.n	8007848 <TM_DMA2DGRAPHIC_DrawPixel+0x124>
		*(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y)) = color;
 800780e:	4b11      	ldr	r3, [pc, #68]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	4b10      	ldr	r3, [pc, #64]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	4413      	add	r3, r2
 8007818:	4a0e      	ldr	r2, [pc, #56]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 800781a:	7f92      	ldrb	r2, [r2, #30]
 800781c:	b2d2      	uxtb	r2, r2
 800781e:	4610      	mov	r0, r2
 8007820:	4a0c      	ldr	r2, [pc, #48]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007822:	8852      	ldrh	r2, [r2, #2]
 8007824:	b292      	uxth	r2, r2
 8007826:	4611      	mov	r1, r2
 8007828:	88fa      	ldrh	r2, [r7, #6]
 800782a:	1a8a      	subs	r2, r1, r2
 800782c:	3a01      	subs	r2, #1
 800782e:	4909      	ldr	r1, [pc, #36]	; (8007854 <TM_DMA2DGRAPHIC_DrawPixel+0x130>)
 8007830:	8809      	ldrh	r1, [r1, #0]
 8007832:	b289      	uxth	r1, r1
 8007834:	fb01 f102 	mul.w	r1, r1, r2
 8007838:	88ba      	ldrh	r2, [r7, #4]
 800783a:	440a      	add	r2, r1
 800783c:	fb02 f200 	mul.w	r2, r2, r0
 8007840:	4413      	add	r3, r2
 8007842:	461a      	mov	r2, r3
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	6013      	str	r3, [r2, #0]
}
 8007848:	bf00      	nop
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bc90      	pop	{r4, r7}
 8007850:	4770      	bx	lr
 8007852:	bf00      	nop
 8007854:	20000d34 	.word	0x20000d34

08007858 <TM_DMA2DGRAPHIC_GetPixel>:

uint32_t TM_DMA2DGRAPHIC_GetPixel(uint16_t x, uint16_t y) {
 8007858:	b490      	push	{r4, r7}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	4603      	mov	r3, r0
 8007860:	460a      	mov	r2, r1
 8007862:	80fb      	strh	r3, [r7, #6]
 8007864:	4613      	mov	r3, r2
 8007866:	80bb      	strh	r3, [r7, #4]
	if (DIS.Orientation == 1) { /* Normal */
 8007868:	4b44      	ldr	r3, [pc, #272]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800786a:	7f5b      	ldrb	r3, [r3, #29]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	2b01      	cmp	r3, #1
 8007870:	d115      	bne.n	800789e <TM_DMA2DGRAPHIC_GetPixel+0x46>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * (y * DIS.Width + x));
 8007872:	4b42      	ldr	r3, [pc, #264]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	4b41      	ldr	r3, [pc, #260]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	4413      	add	r3, r2
 800787c:	4a3f      	ldr	r2, [pc, #252]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800787e:	7f92      	ldrb	r2, [r2, #30]
 8007880:	b2d2      	uxtb	r2, r2
 8007882:	4610      	mov	r0, r2
 8007884:	88ba      	ldrh	r2, [r7, #4]
 8007886:	493d      	ldr	r1, [pc, #244]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007888:	8809      	ldrh	r1, [r1, #0]
 800788a:	b289      	uxth	r1, r1
 800788c:	fb01 f102 	mul.w	r1, r1, r2
 8007890:	88fa      	ldrh	r2, [r7, #6]
 8007892:	440a      	add	r2, r1
 8007894:	fb02 f200 	mul.w	r2, r2, r0
 8007898:	4413      	add	r3, r2
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	e068      	b.n	8007970 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 0) { /* 180 */
 800789e:	4b37      	ldr	r3, [pc, #220]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80078a0:	7f5b      	ldrb	r3, [r3, #29]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d121      	bne.n	80078ec <TM_DMA2DGRAPHIC_GetPixel+0x94>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - y - 1) * DIS.Width + (DIS.Width - x - 1)));
 80078a8:	4b34      	ldr	r3, [pc, #208]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	4b33      	ldr	r3, [pc, #204]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	4413      	add	r3, r2
 80078b2:	4a32      	ldr	r2, [pc, #200]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80078b4:	7f92      	ldrb	r2, [r2, #30]
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	4610      	mov	r0, r2
 80078ba:	4a30      	ldr	r2, [pc, #192]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80078bc:	8852      	ldrh	r2, [r2, #2]
 80078be:	b292      	uxth	r2, r2
 80078c0:	4611      	mov	r1, r2
 80078c2:	88ba      	ldrh	r2, [r7, #4]
 80078c4:	1a8a      	subs	r2, r1, r2
 80078c6:	3a01      	subs	r2, #1
 80078c8:	492c      	ldr	r1, [pc, #176]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80078ca:	8809      	ldrh	r1, [r1, #0]
 80078cc:	b289      	uxth	r1, r1
 80078ce:	fb01 f102 	mul.w	r1, r1, r2
 80078d2:	4a2a      	ldr	r2, [pc, #168]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80078d4:	8812      	ldrh	r2, [r2, #0]
 80078d6:	b292      	uxth	r2, r2
 80078d8:	4614      	mov	r4, r2
 80078da:	88fa      	ldrh	r2, [r7, #6]
 80078dc:	1aa2      	subs	r2, r4, r2
 80078de:	3a01      	subs	r2, #1
 80078e0:	440a      	add	r2, r1
 80078e2:	fb02 f200 	mul.w	r2, r2, r0
 80078e6:	4413      	add	r3, r2
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	e041      	b.n	8007970 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 3) { /* 90 */ /* x + width * y */
 80078ec:	4b23      	ldr	r3, [pc, #140]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80078ee:	7f5b      	ldrb	r3, [r3, #29]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d11a      	bne.n	800792c <TM_DMA2DGRAPHIC_GetPixel+0xd4>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((x) * DIS.Width + DIS.Width - y - 1));
 80078f6:	4b21      	ldr	r3, [pc, #132]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80078f8:	689a      	ldr	r2, [r3, #8]
 80078fa:	4b20      	ldr	r3, [pc, #128]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 80078fc:	695b      	ldr	r3, [r3, #20]
 80078fe:	4413      	add	r3, r2
 8007900:	4a1e      	ldr	r2, [pc, #120]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007902:	7f92      	ldrb	r2, [r2, #30]
 8007904:	b2d2      	uxtb	r2, r2
 8007906:	4610      	mov	r0, r2
 8007908:	88fa      	ldrh	r2, [r7, #6]
 800790a:	491c      	ldr	r1, [pc, #112]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800790c:	8809      	ldrh	r1, [r1, #0]
 800790e:	b289      	uxth	r1, r1
 8007910:	fb01 f202 	mul.w	r2, r1, r2
 8007914:	4919      	ldr	r1, [pc, #100]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007916:	8809      	ldrh	r1, [r1, #0]
 8007918:	b289      	uxth	r1, r1
 800791a:	4411      	add	r1, r2
 800791c:	88ba      	ldrh	r2, [r7, #4]
 800791e:	1a8a      	subs	r2, r1, r2
 8007920:	3a01      	subs	r2, #1
 8007922:	fb02 f200 	mul.w	r2, r2, r0
 8007926:	4413      	add	r3, r2
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	e021      	b.n	8007970 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	} else if (DIS.Orientation == 2) { /* 270 */
 800792c:	4b13      	ldr	r3, [pc, #76]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800792e:	7f5b      	ldrb	r3, [r3, #29]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b02      	cmp	r3, #2
 8007934:	d11b      	bne.n	800796e <TM_DMA2DGRAPHIC_GetPixel+0x116>
		return *(__IO uint32_t *) (DIS.StartAddress + DIS.Offset + DIS.PixelSize * ((DIS.Height - x - 1) * DIS.Width + y));
 8007936:	4b11      	ldr	r3, [pc, #68]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007938:	689a      	ldr	r2, [r3, #8]
 800793a:	4b10      	ldr	r3, [pc, #64]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	4413      	add	r3, r2
 8007940:	4a0e      	ldr	r2, [pc, #56]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007942:	7f92      	ldrb	r2, [r2, #30]
 8007944:	b2d2      	uxtb	r2, r2
 8007946:	4610      	mov	r0, r2
 8007948:	4a0c      	ldr	r2, [pc, #48]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 800794a:	8852      	ldrh	r2, [r2, #2]
 800794c:	b292      	uxth	r2, r2
 800794e:	4611      	mov	r1, r2
 8007950:	88fa      	ldrh	r2, [r7, #6]
 8007952:	1a8a      	subs	r2, r1, r2
 8007954:	3a01      	subs	r2, #1
 8007956:	4909      	ldr	r1, [pc, #36]	; (800797c <TM_DMA2DGRAPHIC_GetPixel+0x124>)
 8007958:	8809      	ldrh	r1, [r1, #0]
 800795a:	b289      	uxth	r1, r1
 800795c:	fb01 f102 	mul.w	r1, r1, r2
 8007960:	88ba      	ldrh	r2, [r7, #4]
 8007962:	440a      	add	r2, r1
 8007964:	fb02 f200 	mul.w	r2, r2, r0
 8007968:	4413      	add	r3, r2
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	e000      	b.n	8007970 <TM_DMA2DGRAPHIC_GetPixel+0x118>
	}
	return 0;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bc90      	pop	{r4, r7}
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	20000d34 	.word	0x20000d34

08007980 <TM_DMA2DGRAPHIC_SetOrientation>:

void TM_DMA2DGRAPHIC_SetOrientation(uint8_t orientation) {
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	4603      	mov	r3, r0
 8007988:	71fb      	strb	r3, [r7, #7]
	/* Filter */
	if (orientation > 3) {
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	2b03      	cmp	r3, #3
 800798e:	d81e      	bhi.n	80079ce <TM_DMA2DGRAPHIC_SetOrientation+0x4e>
		return;
	}
	
	/* Save new orientation */
	DIS.Orientation = orientation;
 8007990:	4a12      	ldr	r2, [pc, #72]	; (80079dc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 8007992:	79fb      	ldrb	r3, [r7, #7]
 8007994:	7753      	strb	r3, [r2, #29]
	
	if (
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <TM_DMA2DGRAPHIC_SetOrientation+0x22>
		orientation == 0 ||
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d10a      	bne.n	80079b8 <TM_DMA2DGRAPHIC_SetOrientation+0x38>
		orientation == 1
	) {
		DIS.CurrentHeight = DIS.Height;
 80079a2:	4b0e      	ldr	r3, [pc, #56]	; (80079dc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 80079a4:	885b      	ldrh	r3, [r3, #2]
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	4b0c      	ldr	r3, [pc, #48]	; (80079dc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 80079aa:	80da      	strh	r2, [r3, #6]
		DIS.CurrentWidth = DIS.Width;
 80079ac:	4b0b      	ldr	r3, [pc, #44]	; (80079dc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	4b0a      	ldr	r3, [pc, #40]	; (80079dc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 80079b4:	809a      	strh	r2, [r3, #4]
 80079b6:	e00b      	b.n	80079d0 <TM_DMA2DGRAPHIC_SetOrientation+0x50>
	} else {
		DIS.CurrentHeight = DIS.Width;
 80079b8:	4b08      	ldr	r3, [pc, #32]	; (80079dc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 80079ba:	881b      	ldrh	r3, [r3, #0]
 80079bc:	b29a      	uxth	r2, r3
 80079be:	4b07      	ldr	r3, [pc, #28]	; (80079dc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 80079c0:	80da      	strh	r2, [r3, #6]
		DIS.CurrentWidth = DIS.Height;
 80079c2:	4b06      	ldr	r3, [pc, #24]	; (80079dc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 80079c4:	885b      	ldrh	r3, [r3, #2]
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	4b04      	ldr	r3, [pc, #16]	; (80079dc <TM_DMA2DGRAPHIC_SetOrientation+0x5c>)
 80079ca:	809a      	strh	r2, [r3, #4]
 80079cc:	e000      	b.n	80079d0 <TM_DMA2DGRAPHIC_SetOrientation+0x50>
		return;
 80079ce:	bf00      	nop
	}
}
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
 80079da:	bf00      	nop
 80079dc:	20000d34 	.word	0x20000d34

080079e0 <TM_DMA2DGRAPHIC_Fill>:

void TM_DMA2DGRAPHIC_Fill(uint32_t color) {
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	6078      	str	r0, [r7, #4]
	/* Set parameters */
	DMA2DHandle.Init.Mode = DMA2D_R2M;
 80079e8:	4b1d      	ldr	r3, [pc, #116]	; (8007a60 <TM_DMA2DGRAPHIC_Fill+0x80>)
 80079ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80079ee:	605a      	str	r2, [r3, #4]
	DMA2DHandle.Init.ColorMode = DMA2D_ARGB8888;
 80079f0:	4b1b      	ldr	r3, [pc, #108]	; (8007a60 <TM_DMA2DGRAPHIC_Fill+0x80>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	609a      	str	r2, [r3, #8]
	DMA2DHandle.Init.OutputOffset = 0;
 80079f6:	4b1a      	ldr	r3, [pc, #104]	; (8007a60 <TM_DMA2DGRAPHIC_Fill+0x80>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	60da      	str	r2, [r3, #12]

	/* Convert color */
	DMA2D_Convert565ToARGB8888(color);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff fe17 	bl	8007630 <DMA2D_Convert565ToARGB8888>

	/* Init DMA2D and start transfer */
	if (HAL_DMA2D_Init(&DMA2DHandle) == HAL_OK) {
 8007a02:	4817      	ldr	r0, [pc, #92]	; (8007a60 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8007a04:	f7fc fbda 	bl	80041bc <HAL_DMA2D_Init>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d123      	bne.n	8007a56 <TM_DMA2DGRAPHIC_Fill+0x76>
		if (HAL_DMA2D_ConfigLayer(&DMA2DHandle, DIS.LayerNumber) == HAL_OK) {
 8007a0e:	4b15      	ldr	r3, [pc, #84]	; (8007a64 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8007a10:	7c1b      	ldrb	r3, [r3, #16]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	4619      	mov	r1, r3
 8007a16:	4812      	ldr	r0, [pc, #72]	; (8007a60 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8007a18:	f7fc fd2e 	bl	8004478 <HAL_DMA2D_ConfigLayer>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d119      	bne.n	8007a56 <TM_DMA2DGRAPHIC_Fill+0x76>
			if (HAL_DMA2D_Start(&DMA2DHandle, DMA2D_Color, (uint32_t)(DIS.StartAddress + DIS.Offset), DIS.Width, DIS.Height) == HAL_OK) {        
 8007a22:	4b11      	ldr	r3, [pc, #68]	; (8007a68 <TM_DMA2DGRAPHIC_Fill+0x88>)
 8007a24:	6819      	ldr	r1, [r3, #0]
 8007a26:	4b0f      	ldr	r3, [pc, #60]	; (8007a64 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8007a2c:	695b      	ldr	r3, [r3, #20]
 8007a2e:	441a      	add	r2, r3
 8007a30:	4b0c      	ldr	r3, [pc, #48]	; (8007a64 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	4618      	mov	r0, r3
 8007a38:	4b0a      	ldr	r3, [pc, #40]	; (8007a64 <TM_DMA2DGRAPHIC_Fill+0x84>)
 8007a3a:	885b      	ldrh	r3, [r3, #2]
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	4603      	mov	r3, r0
 8007a42:	4807      	ldr	r0, [pc, #28]	; (8007a60 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8007a44:	f7fc fc03 	bl	800424e <HAL_DMA2D_Start>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d103      	bne.n	8007a56 <TM_DMA2DGRAPHIC_Fill+0x76>
				HAL_DMA2D_PollForTransfer(&DMA2DHandle, 20);
 8007a4e:	2114      	movs	r1, #20
 8007a50:	4803      	ldr	r0, [pc, #12]	; (8007a60 <TM_DMA2DGRAPHIC_Fill+0x80>)
 8007a52:	f7fc fc27 	bl	80042a4 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	20000244 	.word	0x20000244
 8007a64:	20000d34 	.word	0x20000d34
 8007a68:	20000018 	.word	0x20000018

08007a6c <TM_INT_DMA2DGRAPHIC_SetConf>:
	/* Start DMA2D */
	DMA2D->CR |= DMA2D_CR_START; 
}

/* Private functions */
void TM_INT_DMA2DGRAPHIC_SetConf(TM_DMA2DGRAPHIC_INT_Conf_t* Conf) {
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
	/* Fill settings for DMA2D */
	DIS.Width = Conf->Width;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	881a      	ldrh	r2, [r3, #0]
 8007a78:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007a7a:	801a      	strh	r2, [r3, #0]
	DIS.Height = Conf->Height;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	885a      	ldrh	r2, [r3, #2]
 8007a80:	4b18      	ldr	r3, [pc, #96]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007a82:	805a      	strh	r2, [r3, #2]
	DIS.StartAddress = Conf->BufferStart;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	4a16      	ldr	r2, [pc, #88]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007a8a:	6093      	str	r3, [r2, #8]
	DIS.LayerOffset = Conf->BufferOffset;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	4a14      	ldr	r2, [pc, #80]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007a92:	60d3      	str	r3, [r2, #12]
	DIS.PixelSize = Conf->BytesPerPixel;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	791a      	ldrb	r2, [r3, #4]
 8007a98:	4b12      	ldr	r3, [pc, #72]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007a9a:	779a      	strb	r2, [r3, #30]
	DIS.Pixels = DIS.Width * DIS.Height;
 8007a9c:	4b11      	ldr	r3, [pc, #68]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007aa6:	885b      	ldrh	r3, [r3, #2]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	fb03 f302 	mul.w	r3, r3, r2
 8007aae:	461a      	mov	r2, r3
 8007ab0:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007ab2:	619a      	str	r2, [r3, #24]
	DIS.Orientation = Conf->Orientation;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	7c1a      	ldrb	r2, [r3, #16]
 8007ab8:	4b0a      	ldr	r3, [pc, #40]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007aba:	775a      	strb	r2, [r3, #29]
	DIS.CurrentWidth = DIS.Width;
 8007abc:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007ac4:	809a      	strh	r2, [r3, #4]
	DIS.CurrentHeight = DIS.Height;
 8007ac6:	4b07      	ldr	r3, [pc, #28]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007ac8:	885b      	ldrh	r3, [r3, #2]
 8007aca:	b29a      	uxth	r2, r3
 8007acc:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007ace:	80da      	strh	r2, [r3, #6]
	
	/* Set DMA2D orientation */
	TM_DMA2DGRAPHIC_SetOrientation(DIS.Orientation);
 8007ad0:	4b04      	ldr	r3, [pc, #16]	; (8007ae4 <TM_INT_DMA2DGRAPHIC_SetConf+0x78>)
 8007ad2:	7f5b      	ldrb	r3, [r3, #29]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff ff52 	bl	8007980 <TM_DMA2DGRAPHIC_SetOrientation>
}
 8007adc:	bf00      	nop
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000d34 	.word	0x20000d34

08007ae8 <TM_EXTI_Handler>:
	EXTI->FTSR &= 0xFFFF0000;
	EXTI->RTSR &= 0xFFFF0000;
	EXTI->PR &= 0xFFFF0000;
}

__weak void TM_EXTI_Handler(uint16_t GPIO_Pin) {
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the TM_EXTI_Handler could be implemented in the user file
   */ 
}
 8007af2:	bf00      	nop
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
	...

08007b00 <EXTI0_IRQHandler>:
/******************************************************************/

#if defined(STM32F4xx) || defined(STM32F7xx)

#ifndef TM_EXTI_DISABLE_DEFAULT_HANDLER_0
void EXTI0_IRQHandler(void) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR0)) {
 8007b04:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <EXTI0_IRQHandler+0x20>)
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <EXTI0_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR0;
 8007b10:	4b03      	ldr	r3, [pc, #12]	; (8007b20 <EXTI0_IRQHandler+0x20>)
 8007b12:	2201      	movs	r2, #1
 8007b14:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_0);
 8007b16:	2001      	movs	r0, #1
 8007b18:	f7ff ffe6 	bl	8007ae8 <TM_EXTI_Handler>
	}
}
 8007b1c:	bf00      	nop
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	40013c00 	.word	0x40013c00

08007b24 <EXTI1_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_1
void EXTI1_IRQHandler(void) {
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR1)) {
 8007b28:	4b06      	ldr	r3, [pc, #24]	; (8007b44 <EXTI1_IRQHandler+0x20>)
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <EXTI1_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR1;
 8007b34:	4b03      	ldr	r3, [pc, #12]	; (8007b44 <EXTI1_IRQHandler+0x20>)
 8007b36:	2202      	movs	r2, #2
 8007b38:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_1);
 8007b3a:	2002      	movs	r0, #2
 8007b3c:	f7ff ffd4 	bl	8007ae8 <TM_EXTI_Handler>
	}
}
 8007b40:	bf00      	nop
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	40013c00 	.word	0x40013c00

08007b48 <EXTI2_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_2
void EXTI2_IRQHandler(void) {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR2)) {
 8007b4c:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <EXTI2_IRQHandler+0x20>)
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	f003 0304 	and.w	r3, r3, #4
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d005      	beq.n	8007b64 <EXTI2_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR2;
 8007b58:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <EXTI2_IRQHandler+0x20>)
 8007b5a:	2204      	movs	r2, #4
 8007b5c:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_2);
 8007b5e:	2004      	movs	r0, #4
 8007b60:	f7ff ffc2 	bl	8007ae8 <TM_EXTI_Handler>
	}
}
 8007b64:	bf00      	nop
 8007b66:	bd80      	pop	{r7, pc}
 8007b68:	40013c00 	.word	0x40013c00

08007b6c <EXTI3_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_3
void EXTI3_IRQHandler(void) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR3)) {
 8007b70:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <EXTI3_IRQHandler+0x20>)
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	f003 0308 	and.w	r3, r3, #8
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <EXTI3_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR3;
 8007b7c:	4b03      	ldr	r3, [pc, #12]	; (8007b8c <EXTI3_IRQHandler+0x20>)
 8007b7e:	2208      	movs	r2, #8
 8007b80:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_3);
 8007b82:	2008      	movs	r0, #8
 8007b84:	f7ff ffb0 	bl	8007ae8 <TM_EXTI_Handler>
	}
}
 8007b88:	bf00      	nop
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	40013c00 	.word	0x40013c00

08007b90 <EXTI4_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_4
void EXTI4_IRQHandler(void) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR4)) {
 8007b94:	4b06      	ldr	r3, [pc, #24]	; (8007bb0 <EXTI4_IRQHandler+0x20>)
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d005      	beq.n	8007bac <EXTI4_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR4;
 8007ba0:	4b03      	ldr	r3, [pc, #12]	; (8007bb0 <EXTI4_IRQHandler+0x20>)
 8007ba2:	2210      	movs	r2, #16
 8007ba4:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_4);
 8007ba6:	2010      	movs	r0, #16
 8007ba8:	f7ff ff9e 	bl	8007ae8 <TM_EXTI_Handler>
	}
}
 8007bac:	bf00      	nop
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	40013c00 	.word	0x40013c00

08007bb4 <EXTI9_5_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_9_5
void EXTI9_5_IRQHandler(void) {
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR5)) {
 8007bb8:	4b20      	ldr	r3, [pc, #128]	; (8007c3c <EXTI9_5_IRQHandler+0x88>)
 8007bba:	695b      	ldr	r3, [r3, #20]
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d005      	beq.n	8007bd0 <EXTI9_5_IRQHandler+0x1c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR5;
 8007bc4:	4b1d      	ldr	r3, [pc, #116]	; (8007c3c <EXTI9_5_IRQHandler+0x88>)
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_5);
 8007bca:	2020      	movs	r0, #32
 8007bcc:	f7ff ff8c 	bl	8007ae8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR6)) {
 8007bd0:	4b1a      	ldr	r3, [pc, #104]	; (8007c3c <EXTI9_5_IRQHandler+0x88>)
 8007bd2:	695b      	ldr	r3, [r3, #20]
 8007bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <EXTI9_5_IRQHandler+0x34>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR6;
 8007bdc:	4b17      	ldr	r3, [pc, #92]	; (8007c3c <EXTI9_5_IRQHandler+0x88>)
 8007bde:	2240      	movs	r2, #64	; 0x40
 8007be0:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_6);
 8007be2:	2040      	movs	r0, #64	; 0x40
 8007be4:	f7ff ff80 	bl	8007ae8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR7)) {
 8007be8:	4b14      	ldr	r3, [pc, #80]	; (8007c3c <EXTI9_5_IRQHandler+0x88>)
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <EXTI9_5_IRQHandler+0x4c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR7;
 8007bf4:	4b11      	ldr	r3, [pc, #68]	; (8007c3c <EXTI9_5_IRQHandler+0x88>)
 8007bf6:	2280      	movs	r2, #128	; 0x80
 8007bf8:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_7);
 8007bfa:	2080      	movs	r0, #128	; 0x80
 8007bfc:	f7ff ff74 	bl	8007ae8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR8)) {
 8007c00:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <EXTI9_5_IRQHandler+0x88>)
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d007      	beq.n	8007c1c <EXTI9_5_IRQHandler+0x68>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR8;
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <EXTI9_5_IRQHandler+0x88>)
 8007c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c12:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_8);
 8007c14:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007c18:	f7ff ff66 	bl	8007ae8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR9)) {
 8007c1c:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <EXTI9_5_IRQHandler+0x88>)
 8007c1e:	695b      	ldr	r3, [r3, #20]
 8007c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d007      	beq.n	8007c38 <EXTI9_5_IRQHandler+0x84>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR9;
 8007c28:	4b04      	ldr	r3, [pc, #16]	; (8007c3c <EXTI9_5_IRQHandler+0x88>)
 8007c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c2e:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_9);
 8007c30:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007c34:	f7ff ff58 	bl	8007ae8 <TM_EXTI_Handler>
	}
}
 8007c38:	bf00      	nop
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	40013c00 	.word	0x40013c00

08007c40 <EXTI15_10_IRQHandler>:
#endif

#ifndef EXTI_DISABLE_DEFAULT_HANDLER_15_10
void EXTI15_10_IRQHandler(void) {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	af00      	add	r7, sp, #0
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR10)) {
 8007c44:	4b2a      	ldr	r3, [pc, #168]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d007      	beq.n	8007c60 <EXTI15_10_IRQHandler+0x20>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR10;
 8007c50:	4b27      	ldr	r3, [pc, #156]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c56:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_10);
 8007c58:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007c5c:	f7ff ff44 	bl	8007ae8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR11)) {
 8007c60:	4b23      	ldr	r3, [pc, #140]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007c62:	695b      	ldr	r3, [r3, #20]
 8007c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d007      	beq.n	8007c7c <EXTI15_10_IRQHandler+0x3c>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR11;
 8007c6c:	4b20      	ldr	r3, [pc, #128]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007c6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c72:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_11);
 8007c74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007c78:	f7ff ff36 	bl	8007ae8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR12)) {
 8007c7c:	4b1c      	ldr	r3, [pc, #112]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d007      	beq.n	8007c98 <EXTI15_10_IRQHandler+0x58>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR12;
 8007c88:	4b19      	ldr	r3, [pc, #100]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007c8e:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_12);
 8007c90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007c94:	f7ff ff28 	bl	8007ae8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR13)) {
 8007c98:	4b15      	ldr	r3, [pc, #84]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d007      	beq.n	8007cb4 <EXTI15_10_IRQHandler+0x74>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR13;
 8007ca4:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007caa:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_13);
 8007cac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007cb0:	f7ff ff1a 	bl	8007ae8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR14)) {
 8007cb4:	4b0e      	ldr	r3, [pc, #56]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d007      	beq.n	8007cd0 <EXTI15_10_IRQHandler+0x90>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR14;
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007cc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007cc6:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_14);
 8007cc8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007ccc:	f7ff ff0c 	bl	8007ae8 <TM_EXTI_Handler>
	}
	/* Check status */
	if (EXTI->PR & (EXTI_PR_PR15)) {
 8007cd0:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d007      	beq.n	8007cec <EXTI15_10_IRQHandler+0xac>
		/* Clear bit */
		EXTI->PR = EXTI_PR_PR15;
 8007cdc:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <EXTI15_10_IRQHandler+0xb0>)
 8007cde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007ce2:	615a      	str	r2, [r3, #20]
		/* Call global function */
		TM_EXTI_Handler(GPIO_PIN_15);
 8007ce4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007ce8:	f7ff fefe 	bl	8007ae8 <TM_EXTI_Handler>
	}
}
 8007cec:	bf00      	nop
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	40013c00 	.word	0x40013c00

08007cf4 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af02      	add	r7, sp, #8
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	4608      	mov	r0, r1
 8007cfe:	4611      	mov	r1, r2
 8007d00:	461a      	mov	r2, r3
 8007d02:	4603      	mov	r3, r0
 8007d04:	807b      	strh	r3, [r7, #2]
 8007d06:	460b      	mov	r3, r1
 8007d08:	707b      	strb	r3, [r7, #1]
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8007d0e:	887b      	ldrh	r3, [r7, #2]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00e      	beq.n	8007d32 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 f875 	bl	8007e04 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8007d1a:	7838      	ldrb	r0, [r7, #0]
 8007d1c:	787a      	ldrb	r2, [r7, #1]
 8007d1e:	8879      	ldrh	r1, [r7, #2]
 8007d20:	7d3b      	ldrb	r3, [r7, #20]
 8007d22:	9301      	str	r3, [sp, #4]
 8007d24:	7c3b      	ldrb	r3, [r7, #16]
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	4603      	mov	r3, r0
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f882 	bl	8007e34 <TM_GPIO_INT_Init>
 8007d30:	e000      	b.n	8007d34 <TM_GPIO_Init+0x40>
		return;
 8007d32:	bf00      	nop
}
 8007d34:	3708      	adds	r7, #8
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <TM_GPIO_InitAlternate>:

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b086      	sub	sp, #24
 8007d3e:	af02      	add	r7, sp, #8
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	4608      	mov	r0, r1
 8007d44:	4611      	mov	r1, r2
 8007d46:	461a      	mov	r2, r3
 8007d48:	4603      	mov	r3, r0
 8007d4a:	807b      	strh	r3, [r7, #2]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	707b      	strb	r3, [r7, #1]
 8007d50:	4613      	mov	r3, r2
 8007d52:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8007d54:	887b      	ldrh	r3, [r7, #2]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d03f      	beq.n	8007dda <TM_GPIO_InitAlternate+0xa0>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f852 	bl	8007e04 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8007d60:	2300      	movs	r3, #0
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	e02a      	b.n	8007dbc <TM_GPIO_InitAlternate+0x82>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8007d66:	887a      	ldrh	r2, [r7, #2]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	fa42 f303 	asr.w	r3, r2, r3
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d01e      	beq.n	8007db4 <TM_GPIO_InitAlternate+0x7a>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	08da      	lsrs	r2, r3, #3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	3208      	adds	r2, #8
 8007d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	f002 0207 	and.w	r2, r2, #7
 8007d88:	0092      	lsls	r2, r2, #2
 8007d8a:	210f      	movs	r1, #15
 8007d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8007d90:	43d2      	mvns	r2, r2
 8007d92:	4013      	ands	r3, r2
 8007d94:	7f39      	ldrb	r1, [r7, #28]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	f002 0207 	and.w	r2, r2, #7
 8007d9c:	0092      	lsls	r2, r2, #2
 8007d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8007da2:	4611      	mov	r1, r2
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	08d2      	lsrs	r2, r2, #3
 8007da8:	4319      	orrs	r1, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	3208      	adds	r2, #8
 8007dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007db2:	e000      	b.n	8007db6 <TM_GPIO_InitAlternate+0x7c>
			continue;
 8007db4:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	3301      	adds	r3, #1
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b0f      	cmp	r3, #15
 8007dc0:	d9d1      	bls.n	8007d66 <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8007dc2:	787a      	ldrb	r2, [r7, #1]
 8007dc4:	8879      	ldrh	r1, [r7, #2]
 8007dc6:	7e3b      	ldrb	r3, [r7, #24]
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	783b      	ldrb	r3, [r7, #0]
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f82e 	bl	8007e34 <TM_GPIO_INT_Init>
 8007dd8:	e000      	b.n	8007ddc <TM_GPIO_InitAlternate+0xa2>
		return;
 8007dda:	bf00      	nop
}
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8007df0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8007df4:	0a9b      	lsrs	r3, r3, #10
 8007df6:	b29b      	uxth	r3, r3
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff ffe8 	bl	8007de2 <TM_GPIO_GetPortSource>
 8007e12:	4603      	mov	r3, r0
 8007e14:	461a      	mov	r2, r3
 8007e16:	2301      	movs	r3, #1
 8007e18:	fa03 f202 	lsl.w	r2, r3, r2
 8007e1c:	4b04      	ldr	r3, [pc, #16]	; (8007e30 <TM_GPIO_INT_EnableClock+0x2c>)
 8007e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e20:	4611      	mov	r1, r2
 8007e22:	4a03      	ldr	r2, [pc, #12]	; (8007e30 <TM_GPIO_INT_EnableClock+0x2c>)
 8007e24:	430b      	orrs	r3, r1
 8007e26:	6313      	str	r3, [r2, #48]	; 0x30
#endif
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40023800 	.word	0x40023800

08007e34 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	4608      	mov	r0, r1
 8007e3e:	4611      	mov	r1, r2
 8007e40:	461a      	mov	r2, r3
 8007e42:	4603      	mov	r3, r0
 8007e44:	807b      	strh	r3, [r7, #2]
 8007e46:	460b      	mov	r3, r1
 8007e48:	707b      	strb	r3, [r7, #1]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff ffc7 	bl	8007de2 <TM_GPIO_GetPortSource>
 8007e54:	4603      	mov	r3, r0
 8007e56:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8007e58:	2300      	movs	r3, #0
 8007e5a:	73fb      	strb	r3, [r7, #15]
 8007e5c:	e067      	b.n	8007f2e <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8007e5e:	887a      	ldrh	r2, [r7, #2]
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	fa42 f303 	asr.w	r3, r2, r3
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d05b      	beq.n	8007f26 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8007e6e:	7bbb      	ldrb	r3, [r7, #14]
 8007e70:	4a32      	ldr	r2, [pc, #200]	; (8007f3c <TM_GPIO_INT_Init+0x108>)
 8007e72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e76:	b21a      	sxth	r2, r3
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e80:	b21b      	sxth	r3, r3
 8007e82:	4313      	orrs	r3, r2
 8007e84:	b21a      	sxth	r2, r3
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	b291      	uxth	r1, r2
 8007e8a:	4a2c      	ldr	r2, [pc, #176]	; (8007f3c <TM_GPIO_INT_Init+0x108>)
 8007e8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	7bfa      	ldrb	r2, [r7, #15]
 8007e96:	0052      	lsls	r2, r2, #1
 8007e98:	2103      	movs	r1, #3
 8007e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e9e:	43d2      	mvns	r2, r2
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	7e39      	ldrb	r1, [r7, #24]
 8007ea4:	7bfa      	ldrb	r2, [r7, #15]
 8007ea6:	0052      	lsls	r2, r2, #1
 8007ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8007eac:	431a      	orrs	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	7bfb      	ldrb	r3, [r7, #15]
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	2103      	movs	r1, #3
 8007ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec0:	43db      	mvns	r3, r3
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	7879      	ldrb	r1, [r7, #1]
 8007ec6:	7bfa      	ldrb	r2, [r7, #15]
 8007ec8:	0052      	lsls	r2, r2, #1
 8007eca:	fa01 f202 	lsl.w	r2, r1, r2
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8007ed4:	787b      	ldrb	r3, [r7, #1]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d002      	beq.n	8007ee0 <TM_GPIO_INT_Init+0xac>
 8007eda:	787b      	ldrb	r3, [r7, #1]
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d123      	bne.n	8007f28 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	7bfa      	ldrb	r2, [r7, #15]
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8007eec:	b292      	uxth	r2, r2
 8007eee:	43d2      	mvns	r2, r2
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	7839      	ldrb	r1, [r7, #0]
 8007ef4:	7bfa      	ldrb	r2, [r7, #15]
 8007ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8007efa:	b292      	uxth	r2, r2
 8007efc:	431a      	orrs	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689a      	ldr	r2, [r3, #8]
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	2103      	movs	r1, #3
 8007f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8007f10:	43db      	mvns	r3, r3
 8007f12:	4013      	ands	r3, r2
 8007f14:	7f39      	ldrb	r1, [r7, #28]
 8007f16:	7bfa      	ldrb	r2, [r7, #15]
 8007f18:	0052      	lsls	r2, r2, #1
 8007f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	609a      	str	r2, [r3, #8]
 8007f24:	e000      	b.n	8007f28 <TM_GPIO_INT_Init+0xf4>
			continue;
 8007f26:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8007f28:	7bfb      	ldrb	r3, [r7, #15]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	73fb      	strb	r3, [r7, #15]
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	2b0f      	cmp	r3, #15
 8007f32:	d994      	bls.n	8007e5e <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8007f34:	bf00      	nop
 8007f36:	3710      	adds	r7, #16
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20000284 	.word	0x20000284

08007f40 <TM_SPI_Send>:
 * @brief  Sends single byte over SPI
 * @param  *SPIx: Pointer to SPIx peripheral you will use, where x is between 1 to 6
 * @param  data: 8-bit data size to send over SPI
 * @retval Received byte from slave device
 */
static __INLINE uint8_t TM_SPI_Send(SPI_TypeDef* SPIx, uint8_t data) {
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	460b      	mov	r3, r1
 8007f4a:	70fb      	strb	r3, [r7, #3]
	/* Check if SPI is enabled */
	SPI_CHECK_ENABLED_RESP(SPIx, 0);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <TM_SPI_Send+0x1c>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e01f      	b.n	8007f9c <TM_SPI_Send+0x5c>
	
	/* Wait for previous transmissions to complete if DMA TX enabled for SPI */
	SPI_WAIT_TX(SPIx);
 8007f5c:	bf00      	nop
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 0302 	and.w	r3, r3, #2
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d0f9      	beq.n	8007f5e <TM_SPI_Send+0x1e>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1f3      	bne.n	8007f5e <TM_SPI_Send+0x1e>
	
	/* Fill output buffer with data */
	SPIx->DR = data;
 8007f76:	78fa      	ldrb	r2, [r7, #3]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	60da      	str	r2, [r3, #12]
	
	/* Wait for transmission to complete */
	SPI_WAIT_RX(SPIx);
 8007f7c:	bf00      	nop
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0f9      	beq.n	8007f7e <TM_SPI_Send+0x3e>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d1f3      	bne.n	8007f7e <TM_SPI_Send+0x3e>
	
	/* Return data from buffer */
	return SPIx->DR;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	b2db      	uxtb	r3, r3
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <TM_LCD_Init>:
	uint16_t StartX;
	uint16_t CurrentY;
} TM_LCD_INT_t;
static TM_LCD_INT_t LCD;

TM_LCD_Result_t TM_LCD_Init(void) {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
	TM_DMA2DGRAPHIC_INT_Conf_t DMA2DConf;
	
	/* Init SDRAM */
	if (!TM_SDRAM_Init()) {
 8007fae:	f000 fd6f 	bl	8008a90 <TM_SDRAM_Init>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <TM_LCD_Init+0x14>
		/* Return error */
		return TM_LCD_Result_SDRAM_Error;
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e058      	b.n	800806e <TM_LCD_Init+0xc6>
	}
	
	/* Fill default structure */
	LCD.Width = LCD_PIXEL_WIDTH;
 8007fbc:	4b2e      	ldr	r3, [pc, #184]	; (8008078 <TM_LCD_Init+0xd0>)
 8007fbe:	22f0      	movs	r2, #240	; 0xf0
 8007fc0:	801a      	strh	r2, [r3, #0]
	LCD.Height = LCD_PIXEL_HEIGHT;
 8007fc2:	4b2d      	ldr	r3, [pc, #180]	; (8008078 <TM_LCD_Init+0xd0>)
 8007fc4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8007fc8:	805a      	strh	r2, [r3, #2]
	LCD.CurrentFrameBuffer = LCD_FRAME_BUFFER;
 8007fca:	4b2b      	ldr	r3, [pc, #172]	; (8008078 <TM_LCD_Init+0xd0>)
 8007fcc:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8007fd0:	60da      	str	r2, [r3, #12]
	LCD.FrameStart = LCD_FRAME_BUFFER;
 8007fd2:	4b29      	ldr	r3, [pc, #164]	; (8008078 <TM_LCD_Init+0xd0>)
 8007fd4:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8007fd8:	611a      	str	r2, [r3, #16]
	LCD.FrameOffset = LCD_BUFFER_OFFSET;
 8007fda:	4b27      	ldr	r3, [pc, #156]	; (8008078 <TM_LCD_Init+0xd0>)
 8007fdc:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 8007fe0:	615a      	str	r2, [r3, #20]
	LCD.CurrentFont = &TM_Font_11x18;
 8007fe2:	4b25      	ldr	r3, [pc, #148]	; (8008078 <TM_LCD_Init+0xd0>)
 8007fe4:	4a25      	ldr	r2, [pc, #148]	; (800807c <TM_LCD_Init+0xd4>)
 8007fe6:	625a      	str	r2, [r3, #36]	; 0x24
	LCD.ForegroundColor = LCD_COLOR_BLACK;
 8007fe8:	4b23      	ldr	r3, [pc, #140]	; (8008078 <TM_LCD_Init+0xd0>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	61da      	str	r2, [r3, #28]
	LCD.BackgroundColor = LCD_COLOR_WHITE;
 8007fee:	4b22      	ldr	r3, [pc, #136]	; (8008078 <TM_LCD_Init+0xd0>)
 8007ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ff4:	621a      	str	r2, [r3, #32]
	LCD.Orientation = 1;
 8007ff6:	4b20      	ldr	r3, [pc, #128]	; (8008078 <TM_LCD_Init+0xd0>)
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	721a      	strb	r2, [r3, #8]
	
	/* Set orientation */
	TM_LCD_SetOrientation(LCD.Orientation);
 8007ffc:	4b1e      	ldr	r3, [pc, #120]	; (8008078 <TM_LCD_Init+0xd0>)
 8007ffe:	7a1b      	ldrb	r3, [r3, #8]
 8008000:	4618      	mov	r0, r3
 8008002:	f000 f849 	bl	8008098 <TM_LCD_SetOrientation>
	
	/* Set configrations for DMA2D */
	DMA2DConf.BufferStart = LCD_FRAME_BUFFER;
 8008006:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800800a:	60fb      	str	r3, [r7, #12]
	DMA2DConf.BufferOffset = LCD_BUFFER_OFFSET;
 800800c:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8008010:	613b      	str	r3, [r7, #16]
	DMA2DConf.BytesPerPixel = LCD_PIXEL_SIZE;
 8008012:	2302      	movs	r3, #2
 8008014:	723b      	strb	r3, [r7, #8]
	DMA2DConf.Width = LCD_PIXEL_WIDTH;
 8008016:	23f0      	movs	r3, #240	; 0xf0
 8008018:	80bb      	strh	r3, [r7, #4]
	DMA2DConf.Height = LCD_PIXEL_HEIGHT;
 800801a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800801e:	80fb      	strh	r3, [r7, #6]
	DMA2DConf.Orientation = 1;
 8008020:	2301      	movs	r3, #1
 8008022:	753b      	strb	r3, [r7, #20]
	
	/* Init LCD pins */
	TM_LCD_INT_InitPins();
 8008024:	f000 fc82 	bl	800892c <TM_LCD_INT_InitPins>
	
	/* Init LCD dependant settings */
	TM_LCD_INT_InitLCD();
 8008028:	f000 fb2a 	bl	8008680 <TM_LCD_INT_InitLCD>
	
	/* Init LTDC peripheral */
	TM_LCD_INT_InitLTDC();
 800802c:	f000 f9e8 	bl	8008400 <TM_LCD_INT_InitLTDC>
	
	/* Init LTDC layers */
	TM_LCD_INT_InitLayers();
 8008030:	f000 fa64 	bl	80084fc <TM_LCD_INT_InitLayers>
	
	/* Init DMA2D GRAPHICS */
	TM_DMA2DGRAPHIC_Init();
 8008034:	f7ff fb0c 	bl	8007650 <TM_DMA2DGRAPHIC_Init>
	
	/* Set settings */
	TM_INT_DMA2DGRAPHIC_SetConf(&DMA2DConf);
 8008038:	1d3b      	adds	r3, r7, #4
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff fd16 	bl	8007a6c <TM_INT_DMA2DGRAPHIC_SetConf>
	
	/* Enable LCD */
	TM_LCD_DisplayOn();
 8008040:	f000 f85a 	bl	80080f8 <TM_LCD_DisplayOn>
	
	/* Set layer 1 as active layer */
	TM_LCD_SetLayer1();
 8008044:	f000 f982 	bl	800834c <TM_LCD_SetLayer1>
	TM_LCD_Fill(LCD_COLOR_WHITE);
 8008048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800804c:	f000 f818 	bl	8008080 <TM_LCD_Fill>
	TM_LCD_SetLayer2();
 8008050:	f000 f990 	bl	8008374 <TM_LCD_SetLayer2>
	TM_LCD_Fill(LCD_COLOR_WHITE);
 8008054:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008058:	f000 f812 	bl	8008080 <TM_LCD_Fill>
	TM_LCD_SetLayer1();
 800805c:	f000 f976 	bl	800834c <TM_LCD_SetLayer1>
	
	/* Set layer 1 as active layer */
	TM_LCD_SetLayer1Opacity(255);
 8008060:	20ff      	movs	r0, #255	; 0xff
 8008062:	f000 f99d 	bl	80083a0 <TM_LCD_SetLayer1Opacity>
	TM_LCD_SetLayer2Opacity(0);
 8008066:	2000      	movs	r0, #0
 8008068:	f000 f9ac 	bl	80083c4 <TM_LCD_SetLayer2Opacity>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3718      	adds	r7, #24
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000348 	.word	0x20000348
 800807c:	20000024 	.word	0x20000024

08008080 <TM_LCD_Fill>:

TM_LCD_Result_t TM_LCD_Fill(uint32_t color) {
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
	/* Erase memory */
	TM_DMA2DGRAPHIC_Fill(color);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff fca9 	bl	80079e0 <TM_DMA2DGRAPHIC_Fill>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800808e:	2300      	movs	r3, #0
}
 8008090:	4618      	mov	r0, r3
 8008092:	3708      	adds	r7, #8
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <TM_LCD_SetOrientation>:

TM_LCD_Result_t TM_LCD_SetOrientation(uint8_t orientation) {
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	4603      	mov	r3, r0
 80080a0:	71fb      	strb	r3, [r7, #7]
	/* Check input */
	if (orientation > 3) {
 80080a2:	79fb      	ldrb	r3, [r7, #7]
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d901      	bls.n	80080ac <TM_LCD_SetOrientation+0x14>
		return TM_LCD_Result_Error;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e01e      	b.n	80080ea <TM_LCD_SetOrientation+0x52>
	}
	
	/* Save rotation */
	LCD.Orientation = orientation;
 80080ac:	4a11      	ldr	r2, [pc, #68]	; (80080f4 <TM_LCD_SetOrientation+0x5c>)
 80080ae:	79fb      	ldrb	r3, [r7, #7]
 80080b0:	7213      	strb	r3, [r2, #8]
	
	/* Check X and Y values */
	if (
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <TM_LCD_SetOrientation+0x26>
		orientation == 0 ||
 80080b8:	79fb      	ldrb	r3, [r7, #7]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d108      	bne.n	80080d0 <TM_LCD_SetOrientation+0x38>
		orientation == 1
	) {
		LCD.CurrentHeight = LCD.Height;
 80080be:	4b0d      	ldr	r3, [pc, #52]	; (80080f4 <TM_LCD_SetOrientation+0x5c>)
 80080c0:	885a      	ldrh	r2, [r3, #2]
 80080c2:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <TM_LCD_SetOrientation+0x5c>)
 80080c4:	80da      	strh	r2, [r3, #6]
		LCD.CurrentWidth = LCD.Width;
 80080c6:	4b0b      	ldr	r3, [pc, #44]	; (80080f4 <TM_LCD_SetOrientation+0x5c>)
 80080c8:	881a      	ldrh	r2, [r3, #0]
 80080ca:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <TM_LCD_SetOrientation+0x5c>)
 80080cc:	809a      	strh	r2, [r3, #4]
 80080ce:	e007      	b.n	80080e0 <TM_LCD_SetOrientation+0x48>
	} else {
		LCD.CurrentHeight = LCD.Width;
 80080d0:	4b08      	ldr	r3, [pc, #32]	; (80080f4 <TM_LCD_SetOrientation+0x5c>)
 80080d2:	881a      	ldrh	r2, [r3, #0]
 80080d4:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <TM_LCD_SetOrientation+0x5c>)
 80080d6:	80da      	strh	r2, [r3, #6]
		LCD.CurrentWidth = LCD.Height;
 80080d8:	4b06      	ldr	r3, [pc, #24]	; (80080f4 <TM_LCD_SetOrientation+0x5c>)
 80080da:	885a      	ldrh	r2, [r3, #2]
 80080dc:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <TM_LCD_SetOrientation+0x5c>)
 80080de:	809a      	strh	r2, [r3, #4]
	}
	
	/* Rotate DMA2D graphic library */
	TM_DMA2DGRAPHIC_SetOrientation(orientation);
 80080e0:	79fb      	ldrb	r3, [r7, #7]
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff fc4c 	bl	8007980 <TM_DMA2DGRAPHIC_SetOrientation>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3708      	adds	r7, #8
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20000348 	.word	0x20000348

080080f8 <TM_LCD_DisplayOn>:

TM_LCD_Result_t TM_LCD_DisplayOn(void) {
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
	/* Enable LTDC */
	LTDC->GCR |= LTDC_GCR_LTDCEN;
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <TM_LCD_DisplayOn+0x1c>)
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	4a04      	ldr	r2, [pc, #16]	; (8008114 <TM_LCD_DisplayOn+0x1c>)
 8008102:	f043 0301 	orr.w	r3, r3, #1
 8008106:	6193      	str	r3, [r2, #24]
	TM_GPIO_SetPinHigh(GPIOI, GPIO_PIN_12);	
    TM_GPIO_SetPinHigh(GPIOK, GPIO_PIN_3);
#endif
#if defined(LCD_USE_STM32F429_DISCOVERY)
	/* Send command to display on */
	TM_ILI9341_SendCommand(0x29);
 8008108:	2029      	movs	r0, #41	; 0x29
 800810a:	f000 fa67 	bl	80085dc <TM_ILI9341_SendCommand>
#endif
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	bd80      	pop	{r7, pc}
 8008114:	40016800 	.word	0x40016800

08008118 <TM_LCD_SetXY>:
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_SetXY(uint16_t X, uint16_t Y) {
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	4603      	mov	r3, r0
 8008120:	460a      	mov	r2, r1
 8008122:	80fb      	strh	r3, [r7, #6]
 8008124:	4613      	mov	r3, r2
 8008126:	80bb      	strh	r3, [r7, #4]
	/* Check if we are inside LCD */
	if (X >= LCD.CurrentWidth || Y >= LCD.CurrentHeight) {
 8008128:	4b0d      	ldr	r3, [pc, #52]	; (8008160 <TM_LCD_SetXY+0x48>)
 800812a:	889b      	ldrh	r3, [r3, #4]
 800812c:	88fa      	ldrh	r2, [r7, #6]
 800812e:	429a      	cmp	r2, r3
 8008130:	d204      	bcs.n	800813c <TM_LCD_SetXY+0x24>
 8008132:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <TM_LCD_SetXY+0x48>)
 8008134:	88db      	ldrh	r3, [r3, #6]
 8008136:	88ba      	ldrh	r2, [r7, #4]
 8008138:	429a      	cmp	r2, r3
 800813a:	d301      	bcc.n	8008140 <TM_LCD_SetXY+0x28>
		return TM_LCD_Result_Error;
 800813c:	2301      	movs	r3, #1
 800813e:	e009      	b.n	8008154 <TM_LCD_SetXY+0x3c>
	}
	
	/* Set new values */
	LCD.CurrentX = X;
 8008140:	4a07      	ldr	r2, [pc, #28]	; (8008160 <TM_LCD_SetXY+0x48>)
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	8513      	strh	r3, [r2, #40]	; 0x28
	LCD.CurrentY = Y;
 8008146:	4a06      	ldr	r2, [pc, #24]	; (8008160 <TM_LCD_SetXY+0x48>)
 8008148:	88bb      	ldrh	r3, [r7, #4]
 800814a:	8593      	strh	r3, [r2, #44]	; 0x2c
	LCD.StartX = X;
 800814c:	4a04      	ldr	r2, [pc, #16]	; (8008160 <TM_LCD_SetXY+0x48>)
 800814e:	88fb      	ldrh	r3, [r7, #6]
 8008150:	8553      	strh	r3, [r2, #42]	; 0x2a
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	20000348 	.word	0x20000348

08008164 <TM_LCD_SetFont>:
uint16_t TM_LCD_GetCurrentY(void) {
	/* Return current Y location for strings */
	return LCD.CurrentY;
}

TM_LCD_Result_t TM_LCD_SetFont(TM_FONT_t* Font) {
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
	/* Set new font used for drawing */
	LCD.CurrentFont = Font;
 800816c:	4a04      	ldr	r2, [pc, #16]	; (8008180 <TM_LCD_SetFont+0x1c>)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6253      	str	r3, [r2, #36]	; 0x24
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	20000348 	.word	0x20000348

08008184 <TM_LCD_Putc>:
	
	/* Return OK */
	return TM_LCD_Result_Ok;
}

TM_LCD_Result_t TM_LCD_Putc(char c) {
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	71fb      	strb	r3, [r7, #7]
	uint32_t i, b, j;
	
	/* Check current coordinates */
	if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth || c == '\n') {
 800818e:	4b4d      	ldr	r3, [pc, #308]	; (80082c4 <TM_LCD_Putc+0x140>)
 8008190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008192:	461a      	mov	r2, r3
 8008194:	4b4b      	ldr	r3, [pc, #300]	; (80082c4 <TM_LCD_Putc+0x140>)
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	4413      	add	r3, r2
 800819c:	4a49      	ldr	r2, [pc, #292]	; (80082c4 <TM_LCD_Putc+0x140>)
 800819e:	8892      	ldrh	r2, [r2, #4]
 80081a0:	4293      	cmp	r3, r2
 80081a2:	da02      	bge.n	80081aa <TM_LCD_Putc+0x26>
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b0a      	cmp	r3, #10
 80081a8:	d123      	bne.n	80081f2 <TM_LCD_Putc+0x6e>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		LCD.CurrentY += LCD.CurrentFont->FontHeight;
 80081aa:	4b46      	ldr	r3, [pc, #280]	; (80082c4 <TM_LCD_Putc+0x140>)
 80081ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081ae:	4b45      	ldr	r3, [pc, #276]	; (80082c4 <TM_LCD_Putc+0x140>)
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	4413      	add	r3, r2
 80081b8:	b29a      	uxth	r2, r3
 80081ba:	4b42      	ldr	r3, [pc, #264]	; (80082c4 <TM_LCD_Putc+0x140>)
 80081bc:	859a      	strh	r2, [r3, #44]	; 0x2c
		LCD.CurrentX = LCD.StartX;
 80081be:	4b41      	ldr	r3, [pc, #260]	; (80082c4 <TM_LCD_Putc+0x140>)
 80081c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80081c2:	4b40      	ldr	r3, [pc, #256]	; (80082c4 <TM_LCD_Putc+0x140>)
 80081c4:	851a      	strh	r2, [r3, #40]	; 0x28
		
		/* Check X */
		if ((LCD.CurrentX + LCD.CurrentFont->FontWidth) >= LCD.CurrentWidth) {
 80081c6:	4b3f      	ldr	r3, [pc, #252]	; (80082c4 <TM_LCD_Putc+0x140>)
 80081c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ca:	461a      	mov	r2, r3
 80081cc:	4b3d      	ldr	r3, [pc, #244]	; (80082c4 <TM_LCD_Putc+0x140>)
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	4413      	add	r3, r2
 80081d4:	4a3b      	ldr	r2, [pc, #236]	; (80082c4 <TM_LCD_Putc+0x140>)
 80081d6:	8892      	ldrh	r2, [r2, #4]
 80081d8:	4293      	cmp	r3, r2
 80081da:	db02      	blt.n	80081e2 <TM_LCD_Putc+0x5e>
			LCD.CurrentX = 0;
 80081dc:	4b39      	ldr	r3, [pc, #228]	; (80082c4 <TM_LCD_Putc+0x140>)
 80081de:	2200      	movs	r2, #0
 80081e0:	851a      	strh	r2, [r3, #40]	; 0x28
		}
		
		/* Check for Y position */
		if (LCD.CurrentY >= LCD.CurrentHeight) {
 80081e2:	4b38      	ldr	r3, [pc, #224]	; (80082c4 <TM_LCD_Putc+0x140>)
 80081e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081e6:	4b37      	ldr	r3, [pc, #220]	; (80082c4 <TM_LCD_Putc+0x140>)
 80081e8:	88db      	ldrh	r3, [r3, #6]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d301      	bcc.n	80081f2 <TM_LCD_Putc+0x6e>
			/* Return error */
			return TM_LCD_Result_Error;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e063      	b.n	80082ba <TM_LCD_Putc+0x136>
		}
	}
	
	/* Draw character */
	if (c != '\n') {
 80081f2:	79fb      	ldrb	r3, [r7, #7]
 80081f4:	2b0a      	cmp	r3, #10
 80081f6:	d05f      	beq.n	80082b8 <TM_LCD_Putc+0x134>
		/* Draw all pixels */
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
 80081f8:	2300      	movs	r3, #0
 80081fa:	617b      	str	r3, [r7, #20]
 80081fc:	e04b      	b.n	8008296 <TM_LCD_Putc+0x112>
			b = LCD.CurrentFont->data[(c - 32) * LCD.CurrentFont->FontHeight + i];
 80081fe:	4b31      	ldr	r3, [pc, #196]	; (80082c4 <TM_LCD_Putc+0x140>)
 8008200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	79fb      	ldrb	r3, [r7, #7]
 8008206:	3b20      	subs	r3, #32
 8008208:	492e      	ldr	r1, [pc, #184]	; (80082c4 <TM_LCD_Putc+0x140>)
 800820a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800820c:	7849      	ldrb	r1, [r1, #1]
 800820e:	fb01 f303 	mul.w	r3, r1, r3
 8008212:	4619      	mov	r1, r3
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	440b      	add	r3, r1
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	4413      	add	r3, r2
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	60fb      	str	r3, [r7, #12]
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 8008220:	2300      	movs	r3, #0
 8008222:	613b      	str	r3, [r7, #16]
 8008224:	e02d      	b.n	8008282 <TM_LCD_Putc+0xfe>
				if ((b << j) & 0x8000) {
 8008226:	68fa      	ldr	r2, [r7, #12]
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	fa02 f303 	lsl.w	r3, r2, r3
 800822e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d011      	beq.n	800825a <TM_LCD_Putc+0xd6>
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.ForegroundColor);
 8008236:	4b23      	ldr	r3, [pc, #140]	; (80082c4 <TM_LCD_Putc+0x140>)
 8008238:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	b29b      	uxth	r3, r3
 800823e:	4413      	add	r3, r2
 8008240:	b298      	uxth	r0, r3
 8008242:	4b20      	ldr	r3, [pc, #128]	; (80082c4 <TM_LCD_Putc+0x140>)
 8008244:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	b29b      	uxth	r3, r3
 800824a:	4413      	add	r3, r2
 800824c:	b299      	uxth	r1, r3
 800824e:	4b1d      	ldr	r3, [pc, #116]	; (80082c4 <TM_LCD_Putc+0x140>)
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	461a      	mov	r2, r3
 8008254:	f7ff fa66 	bl	8007724 <TM_DMA2DGRAPHIC_DrawPixel>
 8008258:	e010      	b.n	800827c <TM_LCD_Putc+0xf8>
				} else {
					TM_DMA2DGRAPHIC_DrawPixel(LCD.CurrentX + j, (LCD.CurrentY + i), LCD.BackgroundColor);
 800825a:	4b1a      	ldr	r3, [pc, #104]	; (80082c4 <TM_LCD_Putc+0x140>)
 800825c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	b29b      	uxth	r3, r3
 8008262:	4413      	add	r3, r2
 8008264:	b298      	uxth	r0, r3
 8008266:	4b17      	ldr	r3, [pc, #92]	; (80082c4 <TM_LCD_Putc+0x140>)
 8008268:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	b29b      	uxth	r3, r3
 800826e:	4413      	add	r3, r2
 8008270:	b299      	uxth	r1, r3
 8008272:	4b14      	ldr	r3, [pc, #80]	; (80082c4 <TM_LCD_Putc+0x140>)
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	461a      	mov	r2, r3
 8008278:	f7ff fa54 	bl	8007724 <TM_DMA2DGRAPHIC_DrawPixel>
			for (j = 0; j < LCD.CurrentFont->FontWidth; j++) {
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	3301      	adds	r3, #1
 8008280:	613b      	str	r3, [r7, #16]
 8008282:	4b10      	ldr	r3, [pc, #64]	; (80082c4 <TM_LCD_Putc+0x140>)
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	461a      	mov	r2, r3
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	4293      	cmp	r3, r2
 800828e:	d3ca      	bcc.n	8008226 <TM_LCD_Putc+0xa2>
		for (i = 0; i < LCD.CurrentFont->FontHeight; i++) {
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	3301      	adds	r3, #1
 8008294:	617b      	str	r3, [r7, #20]
 8008296:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <TM_LCD_Putc+0x140>)
 8008298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	461a      	mov	r2, r3
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d3ac      	bcc.n	80081fe <TM_LCD_Putc+0x7a>
				}
			}
		}
	
		/* Set new current X location */
		LCD.CurrentX += LCD.CurrentFont->FontWidth;
 80082a4:	4b07      	ldr	r3, [pc, #28]	; (80082c4 <TM_LCD_Putc+0x140>)
 80082a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80082a8:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <TM_LCD_Putc+0x140>)
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	4413      	add	r3, r2
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <TM_LCD_Putc+0x140>)
 80082b6:	851a      	strh	r2, [r3, #40]	; 0x28
	}
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20000348 	.word	0x20000348

080082c8 <TM_LCD_DrawPixel>:

TM_LCD_Result_t TM_LCD_DrawPixel(uint16_t X, uint16_t Y, uint32_t color) {
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	603a      	str	r2, [r7, #0]
 80082d2:	80fb      	strh	r3, [r7, #6]
 80082d4:	460b      	mov	r3, r1
 80082d6:	80bb      	strh	r3, [r7, #4]
	/* Draw pixel at desired location */
	TM_DMA2DGRAPHIC_DrawPixel(X, Y, color);
 80082d8:	88b9      	ldrh	r1, [r7, #4]
 80082da:	88fb      	ldrh	r3, [r7, #6]
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff fa20 	bl	8007724 <TM_DMA2DGRAPHIC_DrawPixel>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <TM_LCD_GetPixel>:

uint32_t TM_LCD_GetPixel(uint16_t X, uint16_t Y) {
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b082      	sub	sp, #8
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	4603      	mov	r3, r0
 80082f6:	460a      	mov	r2, r1
 80082f8:	80fb      	strh	r3, [r7, #6]
 80082fa:	4613      	mov	r3, r2
 80082fc:	80bb      	strh	r3, [r7, #4]
	/* Get pixel at desired location */
	return TM_DMA2DGRAPHIC_GetPixel(X, Y);
 80082fe:	88ba      	ldrh	r2, [r7, #4]
 8008300:	88fb      	ldrh	r3, [r7, #6]
 8008302:	4611      	mov	r1, r2
 8008304:	4618      	mov	r0, r3
 8008306:	f7ff faa7 	bl	8007858 <TM_DMA2DGRAPHIC_GetPixel>
 800830a:	4603      	mov	r3, r0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <TM_LCD_Puts>:

TM_LCD_Result_t TM_LCD_Puts(char* str) {
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
	/* Send till string ends or error returned */
	while (*str) {
 800831c:	e00c      	b.n	8008338 <TM_LCD_Puts+0x24>
		/* Check if string OK */
		if (TM_LCD_Putc(*str) != TM_LCD_Result_Ok) {
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff ff2e 	bl	8008184 <TM_LCD_Putc>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d001      	beq.n	8008332 <TM_LCD_Puts+0x1e>
			/* Return error */
			return TM_LCD_Result_Error;
 800832e:	2301      	movs	r3, #1
 8008330:	e007      	b.n	8008342 <TM_LCD_Puts+0x2e>
		}
		
		/* Increase pointer */
		str++;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	3301      	adds	r3, #1
 8008336:	607b      	str	r3, [r7, #4]
	while (*str) {
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1ee      	bne.n	800831e <TM_LCD_Puts+0xa>
	}
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3708      	adds	r7, #8
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
	...

0800834c <TM_LCD_SetLayer1>:

TM_LCD_Result_t TM_LCD_SetLayer1(void) {
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart;
 8008350:	4b07      	ldr	r3, [pc, #28]	; (8008370 <TM_LCD_SetLayer1+0x24>)
 8008352:	691b      	ldr	r3, [r3, #16]
 8008354:	4a06      	ldr	r2, [pc, #24]	; (8008370 <TM_LCD_SetLayer1+0x24>)
 8008356:	60d3      	str	r3, [r2, #12]
	LCD.CurrentLayer = 0;
 8008358:	4b05      	ldr	r3, [pc, #20]	; (8008370 <TM_LCD_SetLayer1+0x24>)
 800835a:	2200      	movs	r2, #0
 800835c:	761a      	strb	r2, [r3, #24]
	
	/* Set layer for DMA2D */
	TM_DMA2DGRAPHIC_SetLayer(LCD.CurrentLayer);
 800835e:	4b04      	ldr	r3, [pc, #16]	; (8008370 <TM_LCD_SetLayer1+0x24>)
 8008360:	7e1b      	ldrb	r3, [r3, #24]
 8008362:	4618      	mov	r0, r3
 8008364:	f7ff f9c6 	bl	80076f4 <TM_DMA2DGRAPHIC_SetLayer>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8008368:	2300      	movs	r3, #0

}
 800836a:	4618      	mov	r0, r3
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20000348 	.word	0x20000348

08008374 <TM_LCD_SetLayer2>:

TM_LCD_Result_t TM_LCD_SetLayer2(void) {
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
	/* Fill settings */
	LCD.CurrentFrameBuffer = LCD.FrameStart + LCD.FrameOffset;
 8008378:	4b08      	ldr	r3, [pc, #32]	; (800839c <TM_LCD_SetLayer2+0x28>)
 800837a:	691a      	ldr	r2, [r3, #16]
 800837c:	4b07      	ldr	r3, [pc, #28]	; (800839c <TM_LCD_SetLayer2+0x28>)
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	4413      	add	r3, r2
 8008382:	4a06      	ldr	r2, [pc, #24]	; (800839c <TM_LCD_SetLayer2+0x28>)
 8008384:	60d3      	str	r3, [r2, #12]
	LCD.CurrentLayer = 1;
 8008386:	4b05      	ldr	r3, [pc, #20]	; (800839c <TM_LCD_SetLayer2+0x28>)
 8008388:	2201      	movs	r2, #1
 800838a:	761a      	strb	r2, [r3, #24]
	
	/* Set layer for DMA2D also */
	TM_DMA2DGRAPHIC_SetLayer(LCD.CurrentLayer);
 800838c:	4b03      	ldr	r3, [pc, #12]	; (800839c <TM_LCD_SetLayer2+0x28>)
 800838e:	7e1b      	ldrb	r3, [r3, #24]
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff f9af 	bl	80076f4 <TM_DMA2DGRAPHIC_SetLayer>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20000348 	.word	0x20000348

080083a0 <TM_LCD_SetLayer1Opacity>:

TM_LCD_Result_t TM_LCD_SetLayer1Opacity(uint8_t opacity) {
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	4603      	mov	r3, r0
 80083a8:	71fb      	strb	r3, [r7, #7]
	/* Set opacity */
	HAL_LTDC_SetAlpha(&LTDCHandle, opacity, 0);
 80083aa:	79fb      	ldrb	r3, [r7, #7]
 80083ac:	2200      	movs	r2, #0
 80083ae:	4619      	mov	r1, r3
 80083b0:	4803      	ldr	r0, [pc, #12]	; (80083c0 <TM_LCD_SetLayer1Opacity+0x20>)
 80083b2:	f7fc fd47 	bl	8004e44 <HAL_LTDC_SetAlpha>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	200002a0 	.word	0x200002a0

080083c4 <TM_LCD_SetLayer2Opacity>:

TM_LCD_Result_t TM_LCD_SetLayer2Opacity(uint8_t opacity) {
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	4603      	mov	r3, r0
 80083cc:	71fb      	strb	r3, [r7, #7]
	/* Set opacity */
	HAL_LTDC_SetAlpha(&LTDCHandle, opacity, 1);
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	2201      	movs	r2, #1
 80083d2:	4619      	mov	r1, r3
 80083d4:	4803      	ldr	r0, [pc, #12]	; (80083e4 <TM_LCD_SetLayer2Opacity+0x20>)
 80083d6:	f7fc fd35 	bl	8004e44 <HAL_LTDC_SetAlpha>
	
	/* Return OK */
	return TM_LCD_Result_Ok;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3708      	adds	r7, #8
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	200002a0 	.word	0x200002a0

080083e8 <TM_LCD_GetHeight>:

uint16_t TM_LCD_GetWidth(void) {
	return LCD.CurrentWidth;
}

uint16_t TM_LCD_GetHeight(void) {
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
	return LCD.CurrentHeight;
 80083ec:	4b03      	ldr	r3, [pc, #12]	; (80083fc <TM_LCD_GetHeight+0x14>)
 80083ee:	88db      	ldrh	r3, [r3, #6]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	20000348 	.word	0x20000348

08008400 <TM_LCD_INT_InitLTDC>:
uint8_t TM_LCD_GetOrientation(void) {
	return LCD.Orientation;
}

/* Private functions */
static void TM_LCD_INT_InitLTDC(void) {
 8008400:	b580      	push	{r7, lr}
 8008402:	b08e      	sub	sp, #56	; 0x38
 8008404:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef  periph_clk_init_struct;
	
	/* Enable LTDC and DMA2D clocks */
	__HAL_RCC_DMA2D_CLK_ENABLE();
 8008406:	2300      	movs	r3, #0
 8008408:	607b      	str	r3, [r7, #4]
 800840a:	4b39      	ldr	r3, [pc, #228]	; (80084f0 <TM_LCD_INT_InitLTDC+0xf0>)
 800840c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840e:	4a38      	ldr	r2, [pc, #224]	; (80084f0 <TM_LCD_INT_InitLTDC+0xf0>)
 8008410:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008414:	6313      	str	r3, [r2, #48]	; 0x30
 8008416:	4b36      	ldr	r3, [pc, #216]	; (80084f0 <TM_LCD_INT_InitLTDC+0xf0>)
 8008418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800841e:	607b      	str	r3, [r7, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_LTDC_CLK_ENABLE();
 8008422:	2300      	movs	r3, #0
 8008424:	603b      	str	r3, [r7, #0]
 8008426:	4b32      	ldr	r3, [pc, #200]	; (80084f0 <TM_LCD_INT_InitLTDC+0xf0>)
 8008428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800842a:	4a31      	ldr	r2, [pc, #196]	; (80084f0 <TM_LCD_INT_InitLTDC+0xf0>)
 800842c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008430:	6453      	str	r3, [r2, #68]	; 0x44
 8008432:	4b2f      	ldr	r3, [pc, #188]	; (80084f0 <TM_LCD_INT_InitLTDC+0xf0>)
 8008434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008436:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	683b      	ldr	r3, [r7, #0]
	
	/* Disable LTDC */
	LTDC->GCR &= ~LTDC_GCR_LTDCEN;
 800843e:	4b2d      	ldr	r3, [pc, #180]	; (80084f4 <TM_LCD_INT_InitLTDC+0xf4>)
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	4a2c      	ldr	r2, [pc, #176]	; (80084f4 <TM_LCD_INT_InitLTDC+0xf4>)
 8008444:	f023 0301 	bic.w	r3, r3, #1
 8008448:	6193      	str	r3, [r2, #24]

    /* Timing configuration */     
    LTDCHandle.Init.HorizontalSync = LCD_HSYNC - 1;
 800844a:	4b2b      	ldr	r3, [pc, #172]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 800844c:	2208      	movs	r2, #8
 800844e:	615a      	str	r2, [r3, #20]
    LTDCHandle.Init.VerticalSync = LCD_VSYNC - 1;
 8008450:	4b29      	ldr	r3, [pc, #164]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 8008452:	2200      	movs	r2, #0
 8008454:	619a      	str	r2, [r3, #24]
    LTDCHandle.Init.AccumulatedHBP = LCD_HSYNC + LCD_HBP - 1;
 8008456:	4b28      	ldr	r3, [pc, #160]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 8008458:	2225      	movs	r2, #37	; 0x25
 800845a:	61da      	str	r2, [r3, #28]
    LTDCHandle.Init.AccumulatedVBP = LCD_VSYNC + LCD_VBP - 1;  
 800845c:	4b26      	ldr	r3, [pc, #152]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 800845e:	2203      	movs	r2, #3
 8008460:	621a      	str	r2, [r3, #32]
    LTDCHandle.Init.AccumulatedActiveH = LCD_PIXEL_HEIGHT + LCD_VSYNC + LCD_VBP - 1;
 8008462:	4b25      	ldr	r3, [pc, #148]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 8008464:	f240 1243 	movw	r2, #323	; 0x143
 8008468:	629a      	str	r2, [r3, #40]	; 0x28
    LTDCHandle.Init.AccumulatedActiveW = LCD_PIXEL_WIDTH + LCD_HSYNC + LCD_HBP - 1;
 800846a:	4b23      	ldr	r3, [pc, #140]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 800846c:	f240 1215 	movw	r2, #277	; 0x115
 8008470:	625a      	str	r2, [r3, #36]	; 0x24
    LTDCHandle.Init.TotalWidth = LCD_PIXEL_WIDTH + LCD_HSYNC + LCD_HBP + LCD_HFP - 1; 
 8008472:	4b21      	ldr	r3, [pc, #132]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 8008474:	f240 1217 	movw	r2, #279	; 0x117
 8008478:	62da      	str	r2, [r3, #44]	; 0x2c
    LTDCHandle.Init.TotalHeigh = LCD_PIXEL_HEIGHT + LCD_VSYNC + LCD_VBP + LCD_VFP - 1;
 800847a:	4b1f      	ldr	r3, [pc, #124]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 800847c:	f240 1245 	movw	r2, #325	; 0x145
 8008480:	631a      	str	r2, [r3, #48]	; 0x30
    /* Enable Pixel Clock */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAI_N = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAI_R = 192/2 = 96 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / RCC_PLLSAIDivR = 96/4 = 24 Mhz */
	periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8008482:	2308      	movs	r3, #8
 8008484:	60bb      	str	r3, [r7, #8]
	periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8008486:	23c0      	movs	r3, #192	; 0xc0
 8008488:	61bb      	str	r3, [r7, #24]
	periph_clk_init_struct.PLLSAI.PLLSAIR = LCD_FREQUENCY_DIV;
 800848a:	2305      	movs	r3, #5
 800848c:	623b      	str	r3, [r7, #32]
	periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800848e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008492:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8008494:	f107 0308 	add.w	r3, r7, #8
 8008498:	4618      	mov	r0, r3
 800849a:	f7fd fb8b 	bl	8005bb4 <HAL_RCCEx_PeriphCLKConfig>

	/* Initialize the LCD pixel width and pixel height */
	LTDCHandle.LayerCfg->ImageWidth  = LCD_PIXEL_WIDTH;
 800849e:	4b16      	ldr	r3, [pc, #88]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 80084a0:	22f0      	movs	r2, #240	; 0xf0
 80084a2:	661a      	str	r2, [r3, #96]	; 0x60
	LTDCHandle.LayerCfg->ImageHeight = LCD_PIXEL_HEIGHT;
 80084a4:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 80084a6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80084aa:	665a      	str	r2, [r3, #100]	; 0x64

	/* Background value */
	LTDCHandle.Init.Backcolor.Blue = 0;
 80084ac:	4b12      	ldr	r3, [pc, #72]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LTDCHandle.Init.Backcolor.Green = 0;
 80084b4:	4b10      	ldr	r3, [pc, #64]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	LTDCHandle.Init.Backcolor.Red = 0;
 80084bc:	4b0e      	ldr	r3, [pc, #56]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	/* Polarity */
	LTDCHandle.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80084c4:	4b0c      	ldr	r3, [pc, #48]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	605a      	str	r2, [r3, #4]
	LTDCHandle.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80084ca:	4b0b      	ldr	r3, [pc, #44]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	609a      	str	r2, [r3, #8]
	LTDCHandle.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80084d0:	4b09      	ldr	r3, [pc, #36]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 80084d2:	2200      	movs	r2, #0
 80084d4:	60da      	str	r2, [r3, #12]
	LTDCHandle.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80084d6:	4b08      	ldr	r3, [pc, #32]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 80084d8:	2200      	movs	r2, #0
 80084da:	611a      	str	r2, [r3, #16]
	LTDCHandle.Instance = LTDC;
 80084dc:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 80084de:	4a05      	ldr	r2, [pc, #20]	; (80084f4 <TM_LCD_INT_InitLTDC+0xf4>)
 80084e0:	601a      	str	r2, [r3, #0]

	/* Init LTDC */
	HAL_LTDC_Init(&LTDCHandle);
 80084e2:	4805      	ldr	r0, [pc, #20]	; (80084f8 <TM_LCD_INT_InitLTDC+0xf8>)
 80084e4:	f7fc fad4 	bl	8004a90 <HAL_LTDC_Init>
}
 80084e8:	bf00      	nop
 80084ea:	3738      	adds	r7, #56	; 0x38
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	40023800 	.word	0x40023800
 80084f4:	40016800 	.word	0x40016800
 80084f8:	200002a0 	.word	0x200002a0

080084fc <TM_LCD_INT_InitLayers>:

static void TM_LCD_INT_InitLayers(void) {
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b09a      	sub	sp, #104	; 0x68
 8008500:	af00      	add	r7, sp, #0
	LTDC_LayerCfgTypeDef layer_cfg;
	LTDC_LayerCfgTypeDef layer_cfg2;
	
	/* Layer Init */
	layer_cfg.WindowX0 = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	637b      	str	r3, [r7, #52]	; 0x34
	layer_cfg.WindowX1 = LCD_PIXEL_WIDTH;
 8008506:	23f0      	movs	r3, #240	; 0xf0
 8008508:	63bb      	str	r3, [r7, #56]	; 0x38
	layer_cfg.WindowY0 = 0;
 800850a:	2300      	movs	r3, #0
 800850c:	63fb      	str	r3, [r7, #60]	; 0x3c
	layer_cfg.WindowY1 = LCD_PIXEL_HEIGHT; 
 800850e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008512:	643b      	str	r3, [r7, #64]	; 0x40
#if LCD_PIXEL_SIZE == 2
	layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8008514:	2302      	movs	r3, #2
 8008516:	647b      	str	r3, [r7, #68]	; 0x44
#else
	layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
#endif
	layer_cfg.FBStartAdress = SDRAM_START_ADR;
 8008518:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800851c:	65bb      	str	r3, [r7, #88]	; 0x58
	layer_cfg.Alpha = 255;
 800851e:	23ff      	movs	r3, #255	; 0xff
 8008520:	64bb      	str	r3, [r7, #72]	; 0x48
	layer_cfg.Alpha0 = 0;
 8008522:	2300      	movs	r3, #0
 8008524:	64fb      	str	r3, [r7, #76]	; 0x4c
	layer_cfg.Backcolor.Blue = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	layer_cfg.Backcolor.Green = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	layer_cfg.Backcolor.Red = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8008538:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800853c:	653b      	str	r3, [r7, #80]	; 0x50
	layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800853e:	2307      	movs	r3, #7
 8008540:	657b      	str	r3, [r7, #84]	; 0x54
	layer_cfg.ImageWidth = LCD_PIXEL_WIDTH;
 8008542:	23f0      	movs	r3, #240	; 0xf0
 8008544:	65fb      	str	r3, [r7, #92]	; 0x5c
	layer_cfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8008546:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800854a:	663b      	str	r3, [r7, #96]	; 0x60

	layer_cfg2.WindowX0 = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	603b      	str	r3, [r7, #0]
		layer_cfg2.WindowX1 = 182;
 8008550:	23b6      	movs	r3, #182	; 0xb6
 8008552:	607b      	str	r3, [r7, #4]
		layer_cfg2.WindowY0 = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	60bb      	str	r3, [r7, #8]
		layer_cfg2.WindowY1 = 320;
 8008558:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800855c:	60fb      	str	r3, [r7, #12]
	#if LCD_PIXEL_SIZE == 2
		layer_cfg2.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800855e:	2302      	movs	r3, #2
 8008560:	613b      	str	r3, [r7, #16]
	#else
		layer_cfg2.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
	#endif

		layer_cfg2.Alpha = 255;
 8008562:	23ff      	movs	r3, #255	; 0xff
 8008564:	617b      	str	r3, [r7, #20]
		layer_cfg2.Alpha0 = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	61bb      	str	r3, [r7, #24]
		layer_cfg2.Backcolor.Blue = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		layer_cfg2.Backcolor.Green = 0;
 8008570:	2300      	movs	r3, #0
 8008572:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
		layer_cfg2.Backcolor.Red = 0;
 8008576:	2300      	movs	r3, #0
 8008578:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		layer_cfg2.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800857c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008580:	61fb      	str	r3, [r7, #28]
		layer_cfg2.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008582:	2307      	movs	r3, #7
 8008584:	623b      	str	r3, [r7, #32]
		layer_cfg2.ImageWidth = LCD_PIXEL_WIDTH;
 8008586:	23f0      	movs	r3, #240	; 0xf0
 8008588:	62bb      	str	r3, [r7, #40]	; 0x28
		layer_cfg2.ImageHeight = LCD_PIXEL_HEIGHT;
 800858a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800858e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Init layer 1 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg, 0);
 8008590:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008594:	2200      	movs	r2, #0
 8008596:	4619      	mov	r1, r3
 8008598:	480e      	ldr	r0, [pc, #56]	; (80085d4 <TM_LCD_INT_InitLayers+0xd8>)
 800859a:	f7fc fc15 	bl	8004dc8 <HAL_LTDC_ConfigLayer>
	
	/* Config layer 2 */
	layer_cfg.Alpha = 255;
 800859e:	23ff      	movs	r3, #255	; 0xff
 80085a0:	64bb      	str	r3, [r7, #72]	; 0x48
	layer_cfg2.FBStartAdress = SDRAM_START_ADR + LCD_PIXEL_SIZE * LCD_PIXEL_HEIGHT * LCD_PIXEL_WIDTH;
 80085a2:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <TM_LCD_INT_InitLayers+0xdc>)
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24

	/* Init layer 2 */
	HAL_LTDC_ConfigLayer(&LTDCHandle, &layer_cfg2, 1);
 80085a6:	463b      	mov	r3, r7
 80085a8:	2201      	movs	r2, #1
 80085aa:	4619      	mov	r1, r3
 80085ac:	4809      	ldr	r0, [pc, #36]	; (80085d4 <TM_LCD_INT_InitLayers+0xd8>)
 80085ae:	f7fc fc0b 	bl	8004dc8 <HAL_LTDC_ConfigLayer>
    
    /* Init line event interrupt */
    HAL_LTDC_ProgramLineEvent(&LTDCHandle, 0); 
 80085b2:	2100      	movs	r1, #0
 80085b4:	4807      	ldr	r0, [pc, #28]	; (80085d4 <TM_LCD_INT_InitLayers+0xd8>)
 80085b6:	f7fc fc7b 	bl	8004eb0 <HAL_LTDC_ProgramLineEvent>
  
    /* Set LTDC Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0xE, 0);   
 80085ba:	2200      	movs	r2, #0
 80085bc:	210e      	movs	r1, #14
 80085be:	2058      	movs	r0, #88	; 0x58
 80085c0:	f7fa ff61 	bl	8003486 <HAL_NVIC_SetPriority>

    /* Enable LTDC Interrupt */
    HAL_NVIC_EnableIRQ(LTDC_IRQn);  
 80085c4:	2058      	movs	r0, #88	; 0x58
 80085c6:	f7fa ff7a 	bl	80034be <HAL_NVIC_EnableIRQ>
}
 80085ca:	bf00      	nop
 80085cc:	3768      	adds	r7, #104	; 0x68
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	200002a0 	.word	0x200002a0
 80085d8:	d0025800 	.word	0xd0025800

080085dc <TM_ILI9341_SendCommand>:

/* ILI9341 related functions */
#if defined(LCD_USE_STM32F429_DISCOVERY)
static void TM_ILI9341_SendCommand(uint8_t data) {
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 80085e6:	4b0a      	ldr	r3, [pc, #40]	; (8008610 <TM_ILI9341_SendCommand+0x34>)
 80085e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80085ec:	619a      	str	r2, [r3, #24]
	ILI9341_CS_RESET;
 80085ee:	4b09      	ldr	r3, [pc, #36]	; (8008614 <TM_ILI9341_SendCommand+0x38>)
 80085f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80085f4:	619a      	str	r2, [r3, #24]
	TM_SPI_Send(ILI9341_SPI, data);
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	4619      	mov	r1, r3
 80085fa:	4807      	ldr	r0, [pc, #28]	; (8008618 <TM_ILI9341_SendCommand+0x3c>)
 80085fc:	f7ff fca0 	bl	8007f40 <TM_SPI_Send>
	ILI9341_CS_SET;
 8008600:	4b04      	ldr	r3, [pc, #16]	; (8008614 <TM_ILI9341_SendCommand+0x38>)
 8008602:	2204      	movs	r2, #4
 8008604:	619a      	str	r2, [r3, #24]
}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	40020c00 	.word	0x40020c00
 8008614:	40020800 	.word	0x40020800
 8008618:	40015000 	.word	0x40015000

0800861c <TM_ILI9341_SendData>:

static void TM_ILI9341_SendData(uint8_t data) {
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 8008626:	4b0a      	ldr	r3, [pc, #40]	; (8008650 <TM_ILI9341_SendData+0x34>)
 8008628:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800862c:	619a      	str	r2, [r3, #24]
	ILI9341_CS_RESET;
 800862e:	4b09      	ldr	r3, [pc, #36]	; (8008654 <TM_ILI9341_SendData+0x38>)
 8008630:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008634:	619a      	str	r2, [r3, #24]
	TM_SPI_Send(ILI9341_SPI, data);
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	4619      	mov	r1, r3
 800863a:	4807      	ldr	r0, [pc, #28]	; (8008658 <TM_ILI9341_SendData+0x3c>)
 800863c:	f7ff fc80 	bl	8007f40 <TM_SPI_Send>
	ILI9341_CS_SET;
 8008640:	4b04      	ldr	r3, [pc, #16]	; (8008654 <TM_ILI9341_SendData+0x38>)
 8008642:	2204      	movs	r2, #4
 8008644:	619a      	str	r2, [r3, #24]
}
 8008646:	bf00      	nop
 8008648:	3708      	adds	r7, #8
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
 800864e:	bf00      	nop
 8008650:	40020c00 	.word	0x40020c00
 8008654:	40020800 	.word	0x40020800
 8008658:	40015000 	.word	0x40015000

0800865c <TM_ILI9341_Delay>:

static void TM_ILI9341_Delay(__IO uint32_t delay) {
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 8008664:	e002      	b.n	800866c <TM_ILI9341_Delay+0x10>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3b01      	subs	r3, #1
 800866a:	607b      	str	r3, [r7, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1f9      	bne.n	8008666 <TM_ILI9341_Delay+0xa>
}
 8008672:	bf00      	nop
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
	...

08008680 <TM_LCD_INT_InitLCD>:
#endif

static void TM_LCD_INT_InitLCD(void) {
 8008680:	b580      	push	{r7, lr}
 8008682:	af00      	add	r7, sp, #0
#if defined(LCD_USE_STM32F429_DISCOVERY)
	/* CS high */
	ILI9341_CS_SET;
 8008684:	4ba6      	ldr	r3, [pc, #664]	; (8008920 <TM_LCD_INT_InitLCD+0x2a0>)
 8008686:	2204      	movs	r2, #4
 8008688:	619a      	str	r2, [r3, #24]
	
	/* Init SPI */
	TM_SPI_Init(ILI9341_SPI, ILI9341_SPI_PINS);
 800868a:	2100      	movs	r1, #0
 800868c:	48a5      	ldr	r0, [pc, #660]	; (8008924 <TM_LCD_INT_InitLCD+0x2a4>)
 800868e:	f000 fb2b 	bl	8008ce8 <TM_SPI_Init>
	
	/* Initialization sequence */
	TM_ILI9341_SendCommand(0xCA);
 8008692:	20ca      	movs	r0, #202	; 0xca
 8008694:	f7ff ffa2 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC3);
 8008698:	20c3      	movs	r0, #195	; 0xc3
 800869a:	f7ff ffbf 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 800869e:	2008      	movs	r0, #8
 80086a0:	f7ff ffbc 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x50);
 80086a4:	2050      	movs	r0, #80	; 0x50
 80086a6:	f7ff ffb9 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 80086aa:	20cf      	movs	r0, #207	; 0xcf
 80086ac:	f7ff ff96 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80086b0:	2000      	movs	r0, #0
 80086b2:	f7ff ffb3 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 80086b6:	20c1      	movs	r0, #193	; 0xc1
 80086b8:	f7ff ffb0 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 80086bc:	2030      	movs	r0, #48	; 0x30
 80086be:	f7ff ffad 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 80086c2:	20ed      	movs	r0, #237	; 0xed
 80086c4:	f7ff ff8a 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 80086c8:	2064      	movs	r0, #100	; 0x64
 80086ca:	f7ff ffa7 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 80086ce:	2003      	movs	r0, #3
 80086d0:	f7ff ffa4 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 80086d4:	2012      	movs	r0, #18
 80086d6:	f7ff ffa1 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 80086da:	2081      	movs	r0, #129	; 0x81
 80086dc:	f7ff ff9e 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 80086e0:	20e8      	movs	r0, #232	; 0xe8
 80086e2:	f7ff ff7b 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 80086e6:	2085      	movs	r0, #133	; 0x85
 80086e8:	f7ff ff98 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80086ec:	2000      	movs	r0, #0
 80086ee:	f7ff ff95 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 80086f2:	2078      	movs	r0, #120	; 0x78
 80086f4:	f7ff ff92 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 80086f8:	20cb      	movs	r0, #203	; 0xcb
 80086fa:	f7ff ff6f 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 80086fe:	2039      	movs	r0, #57	; 0x39
 8008700:	f7ff ff8c 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 8008704:	202c      	movs	r0, #44	; 0x2c
 8008706:	f7ff ff89 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800870a:	2000      	movs	r0, #0
 800870c:	f7ff ff86 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 8008710:	2034      	movs	r0, #52	; 0x34
 8008712:	f7ff ff83 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 8008716:	2002      	movs	r0, #2
 8008718:	f7ff ff80 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 800871c:	20f7      	movs	r0, #247	; 0xf7
 800871e:	f7ff ff5d 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 8008722:	2020      	movs	r0, #32
 8008724:	f7ff ff7a 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 8008728:	20ea      	movs	r0, #234	; 0xea
 800872a:	f7ff ff57 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800872e:	2000      	movs	r0, #0
 8008730:	f7ff ff74 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8008734:	2000      	movs	r0, #0
 8008736:	f7ff ff71 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 800873a:	20b1      	movs	r0, #177	; 0xb1
 800873c:	f7ff ff4e 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 8008740:	2000      	movs	r0, #0
 8008742:	f7ff ff6b 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x1B);
 8008746:	201b      	movs	r0, #27
 8008748:	f7ff ff68 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 800874c:	20b6      	movs	r0, #182	; 0xb6
 800874e:	f7ff ff45 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0A);
 8008752:	200a      	movs	r0, #10
 8008754:	f7ff ff62 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xA2);
 8008758:	20a2      	movs	r0, #162	; 0xa2
 800875a:	f7ff ff5f 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 800875e:	20c0      	movs	r0, #192	; 0xc0
 8008760:	f7ff ff3c 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 8008764:	2010      	movs	r0, #16
 8008766:	f7ff ff59 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 800876a:	20c1      	movs	r0, #193	; 0xc1
 800876c:	f7ff ff36 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 8008770:	2010      	movs	r0, #16
 8008772:	f7ff ff53 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 8008776:	20c5      	movs	r0, #197	; 0xc5
 8008778:	f7ff ff30 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x45);
 800877c:	2045      	movs	r0, #69	; 0x45
 800877e:	f7ff ff4d 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x15);
 8008782:	2015      	movs	r0, #21
 8008784:	f7ff ff4a 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 8008788:	20c7      	movs	r0, #199	; 0xc7
 800878a:	f7ff ff27 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x90);
 800878e:	2090      	movs	r0, #144	; 0x90
 8008790:	f7ff ff44 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 8008794:	2036      	movs	r0, #54	; 0x36
 8008796:	f7ff ff21 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC8);
 800879a:	20c8      	movs	r0, #200	; 0xc8
 800879c:	f7ff ff3e 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 80087a0:	20f2      	movs	r0, #242	; 0xf2
 80087a2:	f7ff ff1b 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80087a6:	2000      	movs	r0, #0
 80087a8:	f7ff ff38 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_RGB_INTERFACE);
 80087ac:	20b0      	movs	r0, #176	; 0xb0
 80087ae:	f7ff ff15 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0xC2);
 80087b2:	20c2      	movs	r0, #194	; 0xc2
 80087b4:	f7ff ff32 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 80087b8:	20b6      	movs	r0, #182	; 0xb6
 80087ba:	f7ff ff0f 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0A);
 80087be:	200a      	movs	r0, #10
 80087c0:	f7ff ff2c 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xA7);
 80087c4:	20a7      	movs	r0, #167	; 0xa7
 80087c6:	f7ff ff29 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 80087ca:	2027      	movs	r0, #39	; 0x27
 80087cc:	f7ff ff26 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x04);
 80087d0:	2004      	movs	r0, #4
 80087d2:	f7ff ff23 	bl	800861c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 80087d6:	202a      	movs	r0, #42	; 0x2a
 80087d8:	f7ff ff00 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80087dc:	2000      	movs	r0, #0
 80087de:	f7ff ff1d 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80087e2:	2000      	movs	r0, #0
 80087e4:	f7ff ff1a 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 80087e8:	2000      	movs	r0, #0
 80087ea:	f7ff ff17 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 80087ee:	20ef      	movs	r0, #239	; 0xef
 80087f0:	f7ff ff14 	bl	800861c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 80087f4:	202b      	movs	r0, #43	; 0x2b
 80087f6:	f7ff fef1 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80087fa:	2000      	movs	r0, #0
 80087fc:	f7ff ff0e 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 8008800:	2000      	movs	r0, #0
 8008802:	f7ff ff0b 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 8008806:	2001      	movs	r0, #1
 8008808:	f7ff ff08 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 800880c:	203f      	movs	r0, #63	; 0x3f
 800880e:	f7ff ff05 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_INTERFACE);
 8008812:	20f6      	movs	r0, #246	; 0xf6
 8008814:	f7ff fee2 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 8008818:	2001      	movs	r0, #1
 800881a:	f7ff feff 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800881e:	2000      	movs	r0, #0
 8008820:	f7ff fefc 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x06);
 8008824:	2006      	movs	r0, #6
 8008826:	f7ff fef9 	bl	800861c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 800882a:	202c      	movs	r0, #44	; 0x2c
 800882c:	f7ff fed6 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(1000000);
 8008830:	483d      	ldr	r0, [pc, #244]	; (8008928 <TM_LCD_INT_InitLCD+0x2a8>)
 8008832:	f7ff ff13 	bl	800865c <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 8008836:	2026      	movs	r0, #38	; 0x26
 8008838:	f7ff fed0 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 800883c:	2001      	movs	r0, #1
 800883e:	f7ff feed 	bl	800861c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 8008842:	20e0      	movs	r0, #224	; 0xe0
 8008844:	f7ff feca 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 8008848:	200f      	movs	r0, #15
 800884a:	f7ff fee7 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x29);
 800884e:	2029      	movs	r0, #41	; 0x29
 8008850:	f7ff fee4 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x24);
 8008854:	2024      	movs	r0, #36	; 0x24
 8008856:	f7ff fee1 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 800885a:	200c      	movs	r0, #12
 800885c:	f7ff fede 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 8008860:	200e      	movs	r0, #14
 8008862:	f7ff fedb 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 8008866:	2009      	movs	r0, #9
 8008868:	f7ff fed8 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 800886c:	204e      	movs	r0, #78	; 0x4e
 800886e:	f7ff fed5 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 8008872:	2078      	movs	r0, #120	; 0x78
 8008874:	f7ff fed2 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3C);
 8008878:	203c      	movs	r0, #60	; 0x3c
 800887a:	f7ff fecf 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 800887e:	2009      	movs	r0, #9
 8008880:	f7ff fecc 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x13);
 8008884:	2013      	movs	r0, #19
 8008886:	f7ff fec9 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x05);
 800888a:	2005      	movs	r0, #5
 800888c:	f7ff fec6 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x17);
 8008890:	2017      	movs	r0, #23
 8008892:	f7ff fec3 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 8008896:	2011      	movs	r0, #17
 8008898:	f7ff fec0 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800889c:	2000      	movs	r0, #0
 800889e:	f7ff febd 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 80088a2:	20e1      	movs	r0, #225	; 0xe1
 80088a4:	f7ff fe9a 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 80088a8:	2000      	movs	r0, #0
 80088aa:	f7ff feb7 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x16);
 80088ae:	2016      	movs	r0, #22
 80088b0:	f7ff feb4 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x1B);
 80088b4:	201b      	movs	r0, #27
 80088b6:	f7ff feb1 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x04);
 80088ba:	2004      	movs	r0, #4
 80088bc:	f7ff feae 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 80088c0:	2011      	movs	r0, #17
 80088c2:	f7ff feab 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 80088c6:	2007      	movs	r0, #7
 80088c8:	f7ff fea8 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 80088cc:	2031      	movs	r0, #49	; 0x31
 80088ce:	f7ff fea5 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x33);
 80088d2:	2033      	movs	r0, #51	; 0x33
 80088d4:	f7ff fea2 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x42);
 80088d8:	2042      	movs	r0, #66	; 0x42
 80088da:	f7ff fe9f 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x05);
 80088de:	2005      	movs	r0, #5
 80088e0:	f7ff fe9c 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 80088e4:	200c      	movs	r0, #12
 80088e6:	f7ff fe99 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0A);
 80088ea:	200a      	movs	r0, #10
 80088ec:	f7ff fe96 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 80088f0:	2028      	movs	r0, #40	; 0x28
 80088f2:	f7ff fe93 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2F);
 80088f6:	202f      	movs	r0, #47	; 0x2f
 80088f8:	f7ff fe90 	bl	800861c <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 80088fc:	200f      	movs	r0, #15
 80088fe:	f7ff fe8d 	bl	800861c <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 8008902:	2011      	movs	r0, #17
 8008904:	f7ff fe6a 	bl	80085dc <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(1000000);
 8008908:	4807      	ldr	r0, [pc, #28]	; (8008928 <TM_LCD_INT_InitLCD+0x2a8>)
 800890a:	f7ff fea7 	bl	800865c <TM_ILI9341_Delay>
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 800890e:	2029      	movs	r0, #41	; 0x29
 8008910:	f7ff fe64 	bl	80085dc <TM_ILI9341_SendCommand>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8008914:	202c      	movs	r0, #44	; 0x2c
 8008916:	f7ff fe61 	bl	80085dc <TM_ILI9341_SendCommand>
#endif
}
 800891a:	bf00      	nop
 800891c:	bd80      	pop	{r7, pc}
 800891e:	bf00      	nop
 8008920:	40020800 	.word	0x40020800
 8008924:	40015000 	.word	0x40015000
 8008928:	000f4240 	.word	0x000f4240

0800892c <TM_LCD_INT_InitPins>:

static void TM_LCD_INT_InitPins(void) {
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af02      	add	r7, sp, #8
	/* LCD pins */
	TM_GPIO_InitAlternate(GPIOI, 0xF000, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, 0x0E);
	TM_GPIO_InitAlternate(GPIOJ, 0xFFFF, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, 0x0E);
	TM_GPIO_InitAlternate(GPIOK, 0x00FF, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Fast, 0x0E);	
#elif defined(LCD_USE_STM32F429_DISCOVERY)
	TM_GPIO_Init(ILI9341_WRX_PORT, ILI9341_WRX_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
 8008932:	2301      	movs	r3, #1
 8008934:	9301      	str	r3, [sp, #4]
 8008936:	2300      	movs	r3, #0
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	2300      	movs	r3, #0
 800893c:	2201      	movs	r2, #1
 800893e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008942:	4833      	ldr	r0, [pc, #204]	; (8008a10 <TM_LCD_INT_InitPins+0xe4>)
 8008944:	f7ff f9d6 	bl	8007cf4 <TM_GPIO_Init>
	TM_GPIO_Init(ILI9341_CS_PORT, ILI9341_CS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Medium);
 8008948:	2301      	movs	r3, #1
 800894a:	9301      	str	r3, [sp, #4]
 800894c:	2300      	movs	r3, #0
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	2300      	movs	r3, #0
 8008952:	2201      	movs	r2, #1
 8008954:	2104      	movs	r1, #4
 8008956:	482f      	ldr	r0, [pc, #188]	; (8008a14 <TM_LCD_INT_InitPins+0xe8>)
 8008958:	f7ff f9cc 	bl	8007cf4 <TM_GPIO_Init>
	TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 800895c:	230e      	movs	r3, #14
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	2303      	movs	r3, #3
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	2300      	movs	r3, #0
 8008966:	2200      	movs	r2, #0
 8008968:	f641 0158 	movw	r1, #6232	; 0x1858
 800896c:	482a      	ldr	r0, [pc, #168]	; (8008a18 <TM_LCD_INT_InitPins+0xec>)
 800896e:	f7ff f9e4 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 8008972:	230e      	movs	r3, #14
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	2303      	movs	r3, #3
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	2300      	movs	r3, #0
 800897c:	2200      	movs	r2, #0
 800897e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8008982:	4826      	ldr	r0, [pc, #152]	; (8008a1c <TM_LCD_INT_InitPins+0xf0>)
 8008984:	f7ff f9d9 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF9_LTDC);
 8008988:	2309      	movs	r3, #9
 800898a:	9301      	str	r3, [sp, #4]
 800898c:	2303      	movs	r3, #3
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	2300      	movs	r3, #0
 8008992:	2200      	movs	r2, #0
 8008994:	2103      	movs	r1, #3
 8008996:	4821      	ldr	r0, [pc, #132]	; (8008a1c <TM_LCD_INT_InitPins+0xf0>)
 8008998:	f7ff f9cf 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 800899c:	230e      	movs	r3, #14
 800899e:	9301      	str	r3, [sp, #4]
 80089a0:	2303      	movs	r3, #3
 80089a2:	9300      	str	r3, [sp, #0]
 80089a4:	2300      	movs	r3, #0
 80089a6:	2200      	movs	r2, #0
 80089a8:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 80089ac:	4819      	ldr	r0, [pc, #100]	; (8008a14 <TM_LCD_INT_InitPins+0xe8>)
 80089ae:	f7ff f9c4 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_3 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 80089b2:	230e      	movs	r3, #14
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	2303      	movs	r3, #3
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	2300      	movs	r3, #0
 80089bc:	2200      	movs	r2, #0
 80089be:	2148      	movs	r1, #72	; 0x48
 80089c0:	4813      	ldr	r0, [pc, #76]	; (8008a10 <TM_LCD_INT_InitPins+0xe4>)
 80089c2:	f7ff f9ba 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 80089c6:	230e      	movs	r3, #14
 80089c8:	9301      	str	r3, [sp, #4]
 80089ca:	2303      	movs	r3, #3
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	2300      	movs	r3, #0
 80089d0:	2200      	movs	r2, #0
 80089d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80089d6:	4812      	ldr	r0, [pc, #72]	; (8008a20 <TM_LCD_INT_InitPins+0xf4>)
 80089d8:	f7ff f9af 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF14_LTDC);
 80089dc:	230e      	movs	r3, #14
 80089de:	9301      	str	r3, [sp, #4]
 80089e0:	2303      	movs	r3, #3
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	2300      	movs	r3, #0
 80089e6:	2200      	movs	r2, #0
 80089e8:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
 80089ec:	480d      	ldr	r0, [pc, #52]	; (8008a24 <TM_LCD_INT_InitPins+0xf8>)
 80089ee:	f7ff f9a4 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_10 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF9_LTDC);
 80089f2:	2309      	movs	r3, #9
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	2303      	movs	r3, #3
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	2300      	movs	r3, #0
 80089fc:	2200      	movs	r2, #0
 80089fe:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8008a02:	4808      	ldr	r0, [pc, #32]	; (8008a24 <TM_LCD_INT_InitPins+0xf8>)
 8008a04:	f7ff f999 	bl	8007d3a <TM_GPIO_InitAlternate>
#endif
}
 8008a08:	bf00      	nop
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40020c00 	.word	0x40020c00
 8008a14:	40020800 	.word	0x40020800
 8008a18:	40020000 	.word	0x40020000
 8008a1c:	40020400 	.word	0x40020400
 8008a20:	40021400 	.word	0x40021400
 8008a24:	40021800 	.word	0x40021800

08008a28 <LTDC_IRQHandler>:

/* Interrupt handler */
void LTDC_IRQHandler(void) {
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	af00      	add	r7, sp, #0
    HAL_LTDC_IRQHandler(&LTDCHandle);
 8008a2c:	4802      	ldr	r0, [pc, #8]	; (8008a38 <LTDC_IRQHandler+0x10>)
 8008a2e:	f7fc f909 	bl	8004c44 <HAL_LTDC_IRQHandler>
}
 8008a32:	bf00      	nop
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	200002a0 	.word	0x200002a0

08008a3c <TM_PVD_Handler>:
}

/*****************************************************************/
/*                 PVD INTERRUPT USER CALLBACK                   */
/*****************************************************************/
__weak void TM_PVD_Handler(uint8_t status) {
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	71fb      	strb	r3, [r7, #7]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_PVD_Handler could be implemented in the user file
	*/
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
	...

08008a54 <PVD_IRQHandler>:

/*****************************************************************/
/*                    PVD INTERRUPT HANDLER                      */
/*****************************************************************/
void PVD_IRQHandler(void) {
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0
	/* Call user function if needed */
	if (__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET) {
 8008a58:	4b0b      	ldr	r3, [pc, #44]	; (8008a88 <PVD_IRQHandler+0x34>)
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00f      	beq.n	8008a84 <PVD_IRQHandler+0x30>
#if defined(PWR_CSR_PVDO)	
		/* Call user function with status */
		TM_PVD_Handler((PWR->CSR & PWR_CSR_PVDO) ? 1 : 0);
 8008a64:	4b09      	ldr	r3, [pc, #36]	; (8008a8c <PVD_IRQHandler+0x38>)
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bf14      	ite	ne
 8008a70:	2301      	movne	r3, #1
 8008a72:	2300      	moveq	r3, #0
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff ffe0 	bl	8008a3c <TM_PVD_Handler>
#if defined(PWR_CSR1_PVDO)
		/* Call user function with status */
		TM_PVD_Handler((PWR->CSR1 & PWR_CSR1_PVDO) ? 1 : 0);
#endif
		/* Clear PWR EXTI pending bit */
		__HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8008a7c:	4b02      	ldr	r3, [pc, #8]	; (8008a88 <PVD_IRQHandler+0x34>)
 8008a7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008a82:	615a      	str	r2, [r3, #20]
	}
}
 8008a84:	bf00      	nop
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	40013c00 	.word	0x40013c00
 8008a8c:	40007000 	.word	0x40007000

08008a90 <TM_SDRAM_Init>:
#include "tm_stm32_sdram.h"

/* Internal functions */
static void TM_SDRAM_InitPins(void);

uint8_t TM_SDRAM_Init(void) {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b09a      	sub	sp, #104	; 0x68
 8008a94:	af00      	add	r7, sp, #0
	SDRAM_HandleTypeDef SDRAMHandle;
	FMC_SDRAM_TimingTypeDef Timing;
	FMC_SDRAM_CommandTypeDef Command;

	volatile uint32_t timeout = SDRAM_TIMEOUT;
 8008a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008a9a:	607b      	str	r3, [r7, #4]
	static uint8_t initialized = 0;
	
	/* Already initialized */
	if (initialized) {
 8008a9c:	4b5a      	ldr	r3, [pc, #360]	; (8008c08 <TM_SDRAM_Init+0x178>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <TM_SDRAM_Init+0x18>
		return 1;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e0aa      	b.n	8008bfe <TM_SDRAM_Init+0x16e>
	}
	
	/* Set instance */
	SDRAMHandle.Instance = FMC_SDRAM_DEVICE;
 8008aa8:	4b58      	ldr	r3, [pc, #352]	; (8008c0c <TM_SDRAM_Init+0x17c>)
 8008aaa:	637b      	str	r3, [r7, #52]	; 0x34
	
	/* Initialize FMC pins */
	TM_SDRAM_InitPins();
 8008aac:	f000 f8c2 	bl	8008c34 <TM_SDRAM_InitPins>
	
	/* Enable FMC clock */
	__HAL_RCC_FMC_CLK_ENABLE();
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	4b56      	ldr	r3, [pc, #344]	; (8008c10 <TM_SDRAM_Init+0x180>)
 8008ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab8:	4a55      	ldr	r2, [pc, #340]	; (8008c10 <TM_SDRAM_Init+0x180>)
 8008aba:	f043 0301 	orr.w	r3, r3, #1
 8008abe:	6393      	str	r3, [r2, #56]	; 0x38
 8008ac0:	4b53      	ldr	r3, [pc, #332]	; (8008c10 <TM_SDRAM_Init+0x180>)
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	603b      	str	r3, [r7, #0]
 8008aca:	683b      	ldr	r3, [r7, #0]
	/* FMC SDRAM device initialization sequence --------------------------------*/ 
	/* Step 1 ----------------------------------------------------*/ 
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	/* 1 clock cycle = 1 / 90MHz = 11.1ns */
	Timing.LoadToActiveDelay    = 2;
 8008acc:	2302      	movs	r3, #2
 8008ace:	61bb      	str	r3, [r7, #24]
	Timing.ExitSelfRefreshDelay = 7;
 8008ad0:	2307      	movs	r3, #7
 8008ad2:	61fb      	str	r3, [r7, #28]
	Timing.SelfRefreshTime      = 4;
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	623b      	str	r3, [r7, #32]
	Timing.RowCycleDelay        = 7;
 8008ad8:	2307      	movs	r3, #7
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
	Timing.WriteRecoveryTime    = 2;
 8008adc:	2302      	movs	r3, #2
 8008ade:	62bb      	str	r3, [r7, #40]	; 0x28
	Timing.RPDelay              = 2;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
	Timing.RCDDelay             = 2;
 8008ae4:	2302      	movs	r3, #2
 8008ae6:	633b      	str	r3, [r7, #48]	; 0x30
	
	
	/* FMC SDRAM control configuration */
	SDRAMHandle.Init.SDBank             = SDRAM_BANK;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	63bb      	str	r3, [r7, #56]	; 0x38
	SDRAMHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8008aec:	2300      	movs	r3, #0
 8008aee:	63fb      	str	r3, [r7, #60]	; 0x3c
	SDRAMHandle.Init.RowBitsNumber      = SDRAM_ROWBITS_NUMBER;
 8008af0:	2304      	movs	r3, #4
 8008af2:	643b      	str	r3, [r7, #64]	; 0x40
	SDRAMHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8008af4:	2310      	movs	r3, #16
 8008af6:	647b      	str	r3, [r7, #68]	; 0x44
	SDRAMHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008af8:	2340      	movs	r3, #64	; 0x40
 8008afa:	64bb      	str	r3, [r7, #72]	; 0x48
	SDRAMHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8008afc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008b00:	64fb      	str	r3, [r7, #76]	; 0x4c
	SDRAMHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008b02:	2300      	movs	r3, #0
 8008b04:	653b      	str	r3, [r7, #80]	; 0x50
	SDRAMHandle.Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8008b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b0a:	657b      	str	r3, [r7, #84]	; 0x54
	SDRAMHandle.Init.ReadBurst          = SDRAM_READ_BURST_STATE;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	65bb      	str	r3, [r7, #88]	; 0x58
	SDRAMHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	65fb      	str	r3, [r7, #92]	; 0x5c
	
	/* FMC SDRAM bank initialization */
	HAL_SDRAM_Init(&SDRAMHandle, &Timing);
 8008b14:	f107 0218 	add.w	r2, r7, #24
 8008b18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fd fa06 	bl	8005f30 <HAL_SDRAM_Init>
	
	/* SDRAM Init sequence */
	
	/* Configure a clock configuration enable command */
	Command.CommandMode				= FMC_SDRAM_CMD_CLK_ENABLE;
 8008b24:	2301      	movs	r3, #1
 8008b26:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget 			= SDRAM_COMMAND_TARGET_BANK;
 8008b28:	2308      	movs	r3, #8
 8008b2a:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber 		= 1;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	617b      	str	r3, [r7, #20]
	
	/* Send command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8008b34:	f107 0108 	add.w	r1, r7, #8
 8008b38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fd fa29 	bl	8005f98 <HAL_SDRAM_SendCommand>
	
	/* Little delay */
	timeout = SDRAM_TIMEOUT * 0xF;
 8008b46:	4b33      	ldr	r3, [pc, #204]	; (8008c14 <TM_SDRAM_Init+0x184>)
 8008b48:	607b      	str	r3, [r7, #4]
	while (timeout--);
 8008b4a:	bf00      	nop
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	1e5a      	subs	r2, r3, #1
 8008b50:	607a      	str	r2, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1fa      	bne.n	8008b4c <TM_SDRAM_Init+0xbc>
	
	/* Configure a PALL (precharge all) command */ 
	Command.CommandMode          	= FMC_SDRAM_CMD_PALL;
 8008b56:	2302      	movs	r3, #2
 8008b58:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8008b5a:	2308      	movs	r3, #8
 8008b5c:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber      	= 1;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= 0;
 8008b62:	2300      	movs	r3, #0
 8008b64:	617b      	str	r3, [r7, #20]
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8008b66:	f107 0108 	add.w	r1, r7, #8
 8008b6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fd fa10 	bl	8005f98 <HAL_SDRAM_SendCommand>

	/* Configure a Auto-Refresh command */ 
	Command.CommandMode            	= FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8008b7c:	2308      	movs	r3, #8
 8008b7e:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber      	= 8;
 8008b80:	2308      	movs	r3, #8
 8008b82:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= 0;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
	
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8008b88:	f107 0108 	add.w	r1, r7, #8
 8008b8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fd f9ff 	bl	8005f98 <HAL_SDRAM_SendCommand>
	
	/* Configure a load Mode register command */
	Command.CommandMode            	= FMC_SDRAM_CMD_LOAD_MODE;
 8008b9a:	2304      	movs	r3, #4
 8008b9c:	60bb      	str	r3, [r7, #8]
	Command.CommandTarget          	= SDRAM_COMMAND_TARGET_BANK;
 8008b9e:	2308      	movs	r3, #8
 8008ba0:	60fb      	str	r3, [r7, #12]
	Command.AutoRefreshNumber      	= 1;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	613b      	str	r3, [r7, #16]
	Command.ModeRegisterDefinition 	= (uint32_t)SDRAM_REG_VALUE;
 8008ba6:	f240 2331 	movw	r3, #561	; 0x231
 8008baa:	617b      	str	r3, [r7, #20]
	
	/* Wait until the SDRAM controller is ready */
	/* Send the command */
	HAL_SDRAM_SendCommand(&SDRAMHandle, &Command, SDRAM_TIMEOUT);
 8008bac:	f107 0108 	add.w	r1, r7, #8
 8008bb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fd f9ed 	bl	8005f98 <HAL_SDRAM_SendCommand>
  
	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(&SDRAMHandle, SDRAM_REFRESH_COUNT); 
 8008bbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008bc2:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fd fa11 	bl	8005fee <HAL_SDRAM_ProgramRefreshRate>
	
	/* Little delay */
	timeout = SDRAM_TIMEOUT * 0xF;
 8008bcc:	4b11      	ldr	r3, [pc, #68]	; (8008c14 <TM_SDRAM_Init+0x184>)
 8008bce:	607b      	str	r3, [r7, #4]
	while (timeout--);
 8008bd0:	bf00      	nop
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	1e5a      	subs	r2, r3, #1
 8008bd6:	607a      	str	r2, [r7, #4]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1fa      	bne.n	8008bd2 <TM_SDRAM_Init+0x142>
	
	/* Check if everything goes right */
	/* Write 0x45 at location 0x50 and check if result is the same on read operation */
	TM_SDRAM_Write8(0x50, 0x45);
 8008bdc:	4b0e      	ldr	r3, [pc, #56]	; (8008c18 <TM_SDRAM_Init+0x188>)
 8008bde:	2245      	movs	r2, #69	; 0x45
 8008be0:	701a      	strb	r2, [r3, #0]
	
	/* Read and check */
	if (TM_SDRAM_Read8(0x50) == 0x45) {
 8008be2:	4b0d      	ldr	r3, [pc, #52]	; (8008c18 <TM_SDRAM_Init+0x188>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b45      	cmp	r3, #69	; 0x45
 8008bea:	d104      	bne.n	8008bf6 <TM_SDRAM_Init+0x166>
		/* Initialized OK */
		initialized = 1;
 8008bec:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <TM_SDRAM_Init+0x178>)
 8008bee:	2201      	movs	r2, #1
 8008bf0:	701a      	strb	r2, [r3, #0]
		/* Initialized OK */
		return 1;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e003      	b.n	8008bfe <TM_SDRAM_Init+0x16e>
	}
	
	/* Not initialized OK */
	initialized = 0;
 8008bf6:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <TM_SDRAM_Init+0x178>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	701a      	strb	r2, [r3, #0]
	
	/* Not ok */
	return 0;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3768      	adds	r7, #104	; 0x68
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	20000378 	.word	0x20000378
 8008c0c:	a0000140 	.word	0xa0000140
 8008c10:	40023800 	.word	0x40023800
 8008c14:	000efff1 	.word	0x000efff1
 8008c18:	d0000050 	.word	0xd0000050

08008c1c <TM_SDRAM_InitCustomPinsCallback>:

__weak uint8_t TM_SDRAM_InitCustomPinsCallback(uint16_t AlternateFunction) {
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	4603      	mov	r3, r0
 8008c24:	80fb      	strh	r3, [r7, #6]
	/* NOTE: This function Should not be modified, when the callback is needed,
             the TM_SDRAM_InitCustomPinsCallback could be implemented in the user file
	*/
	
	/* Return 0, use pins already supported from library */
	return 0;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <TM_SDRAM_InitPins>:

/* Private functions */
static void TM_SDRAM_InitPins(void) {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af02      	add	r7, sp, #8
	/* Try to initialize from user */
	if (TM_SDRAM_InitCustomPinsCallback(GPIO_AF12_FMC)) {
 8008c3a:	200c      	movs	r0, #12
 8008c3c:	f7ff ffee 	bl	8008c1c <TM_SDRAM_InitCustomPinsCallback>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d140      	bne.n	8008cc8 <TM_SDRAM_InitPins+0x94>
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
#elif defined(SDRAM_USE_STM32F429_DISCOVERY)
	TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8008c46:	230c      	movs	r3, #12
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2200      	movs	r2, #0
 8008c52:	2160      	movs	r1, #96	; 0x60
 8008c54:	481e      	ldr	r0, [pc, #120]	; (8008cd0 <TM_SDRAM_InitPins+0x9c>)
 8008c56:	f7ff f870 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_0, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8008c5a:	230c      	movs	r3, #12
 8008c5c:	9301      	str	r3, [sp, #4]
 8008c5e:	2303      	movs	r3, #3
 8008c60:	9300      	str	r3, [sp, #0]
 8008c62:	2300      	movs	r3, #0
 8008c64:	2200      	movs	r2, #0
 8008c66:	2101      	movs	r1, #1
 8008c68:	481a      	ldr	r0, [pc, #104]	; (8008cd4 <TM_SDRAM_InitPins+0xa0>)
 8008c6a:	f7ff f866 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOD, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8008c6e:	230c      	movs	r3, #12
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	2303      	movs	r3, #3
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	2300      	movs	r3, #0
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f24c 7103 	movw	r1, #50947	; 0xc703
 8008c7e:	4816      	ldr	r0, [pc, #88]	; (8008cd8 <TM_SDRAM_InitPins+0xa4>)
 8008c80:	f7ff f85b 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8008c84:	230c      	movs	r3, #12
 8008c86:	9301      	str	r3, [sp, #4]
 8008c88:	2303      	movs	r3, #3
 8008c8a:	9300      	str	r3, [sp, #0]
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f64f 7183 	movw	r1, #65411	; 0xff83
 8008c94:	4811      	ldr	r0, [pc, #68]	; (8008cdc <TM_SDRAM_InitPins+0xa8>)
 8008c96:	f7ff f850 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8008caa:	480d      	ldr	r0, [pc, #52]	; (8008ce0 <TM_SDRAM_InitPins+0xac>)
 8008cac:	f7ff f845 	bl	8007d3a <TM_GPIO_InitAlternate>
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
 8008cb0:	230c      	movs	r3, #12
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	2200      	movs	r2, #0
 8008cbc:	f248 1133 	movw	r1, #33075	; 0x8133
 8008cc0:	4808      	ldr	r0, [pc, #32]	; (8008ce4 <TM_SDRAM_InitPins+0xb0>)
 8008cc2:	f7ff f83a 	bl	8007d3a <TM_GPIO_InitAlternate>
 8008cc6:	e000      	b.n	8008cca <TM_SDRAM_InitPins+0x96>
		return;
 8008cc8:	bf00      	nop
	TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
	TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AF12_FMC);
#endif
}
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	40020400 	.word	0x40020400
 8008cd4:	40020800 	.word	0x40020800
 8008cd8:	40020c00 	.word	0x40020c00
 8008cdc:	40021000 	.word	0x40021000
 8008ce0:	40021400 	.word	0x40021400
 8008ce4:	40021800 	.word	0x40021800

08008ce8 <TM_SPI_Init>:
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack);
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack);

void TM_SPI_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack) {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af02      	add	r7, sp, #8
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	70fb      	strb	r3, [r7, #3]
	/* Init with default settings */
#ifdef SPI1
	if (SPIx == SPI1) {
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a2e      	ldr	r2, [pc, #184]	; (8008db0 <TM_SPI_Init+0xc8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d10a      	bne.n	8008d12 <TM_SPI_Init+0x2a>
		TM_SPIx_Init(SPI1, pinspack, TM_SPI1_MODE, TM_SPI1_PRESCALER, TM_SPI1_MASTERSLAVE, TM_SPI1_FIRSTBIT);
 8008cfc:	78f9      	ldrb	r1, [r7, #3]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	2320      	movs	r3, #32
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4828      	ldr	r0, [pc, #160]	; (8008db0 <TM_SPI_Init+0xc8>)
 8008d0e:	f000 f867 	bl	8008de0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI2
	if (SPIx == SPI2) {
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a27      	ldr	r2, [pc, #156]	; (8008db4 <TM_SPI_Init+0xcc>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d10a      	bne.n	8008d30 <TM_SPI_Init+0x48>
		TM_SPIx_Init(SPI2, pinspack, TM_SPI2_MODE, TM_SPI2_PRESCALER, TM_SPI2_MASTERSLAVE, TM_SPI2_FIRSTBIT);
 8008d1a:	78f9      	ldrb	r1, [r7, #3]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008d24:	9300      	str	r3, [sp, #0]
 8008d26:	2320      	movs	r3, #32
 8008d28:	2200      	movs	r2, #0
 8008d2a:	4822      	ldr	r0, [pc, #136]	; (8008db4 <TM_SPI_Init+0xcc>)
 8008d2c:	f000 f858 	bl	8008de0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI3
	if (SPIx == SPI3) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a21      	ldr	r2, [pc, #132]	; (8008db8 <TM_SPI_Init+0xd0>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d10a      	bne.n	8008d4e <TM_SPI_Init+0x66>
		TM_SPIx_Init(SPI3, pinspack, TM_SPI3_MODE, TM_SPI3_PRESCALER, TM_SPI3_MASTERSLAVE, TM_SPI3_FIRSTBIT);
 8008d38:	78f9      	ldrb	r1, [r7, #3]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	9301      	str	r3, [sp, #4]
 8008d3e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	2320      	movs	r3, #32
 8008d46:	2200      	movs	r2, #0
 8008d48:	481b      	ldr	r0, [pc, #108]	; (8008db8 <TM_SPI_Init+0xd0>)
 8008d4a:	f000 f849 	bl	8008de0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI4
	if (SPIx == SPI4) {
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a1a      	ldr	r2, [pc, #104]	; (8008dbc <TM_SPI_Init+0xd4>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d10a      	bne.n	8008d6c <TM_SPI_Init+0x84>
		TM_SPIx_Init(SPI4, pinspack, TM_SPI4_MODE, TM_SPI4_PRESCALER, TM_SPI4_MASTERSLAVE, TM_SPI4_FIRSTBIT);
 8008d56:	78f9      	ldrb	r1, [r7, #3]
 8008d58:	2300      	movs	r3, #0
 8008d5a:	9301      	str	r3, [sp, #4]
 8008d5c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	2320      	movs	r3, #32
 8008d64:	2200      	movs	r2, #0
 8008d66:	4815      	ldr	r0, [pc, #84]	; (8008dbc <TM_SPI_Init+0xd4>)
 8008d68:	f000 f83a 	bl	8008de0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI5
	if (SPIx == SPI5) {
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a14      	ldr	r2, [pc, #80]	; (8008dc0 <TM_SPI_Init+0xd8>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d10a      	bne.n	8008d8a <TM_SPI_Init+0xa2>
		TM_SPIx_Init(SPI5, pinspack, TM_SPI5_MODE, TM_SPI5_PRESCALER, TM_SPI5_MASTERSLAVE, TM_SPI5_FIRSTBIT);
 8008d74:	78f9      	ldrb	r1, [r7, #3]
 8008d76:	2300      	movs	r3, #0
 8008d78:	9301      	str	r3, [sp, #4]
 8008d7a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	2320      	movs	r3, #32
 8008d82:	2200      	movs	r2, #0
 8008d84:	480e      	ldr	r0, [pc, #56]	; (8008dc0 <TM_SPI_Init+0xd8>)
 8008d86:	f000 f82b 	bl	8008de0 <TM_SPIx_Init>
	}
#endif
#ifdef SPI6
	if (SPIx == SPI6) {
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a0d      	ldr	r2, [pc, #52]	; (8008dc4 <TM_SPI_Init+0xdc>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d10a      	bne.n	8008da8 <TM_SPI_Init+0xc0>
		TM_SPIx_Init(SPI6, pinspack, TM_SPI6_MODE, TM_SPI6_PRESCALER, TM_SPI6_MASTERSLAVE, TM_SPI6_FIRSTBIT);
 8008d92:	78f9      	ldrb	r1, [r7, #3]
 8008d94:	2300      	movs	r3, #0
 8008d96:	9301      	str	r3, [sp, #4]
 8008d98:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	2320      	movs	r3, #32
 8008da0:	2200      	movs	r2, #0
 8008da2:	4808      	ldr	r0, [pc, #32]	; (8008dc4 <TM_SPI_Init+0xdc>)
 8008da4:	f000 f81c 	bl	8008de0 <TM_SPIx_Init>
	}
#endif
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	40013000 	.word	0x40013000
 8008db4:	40003800 	.word	0x40003800
 8008db8:	40003c00 	.word	0x40003c00
 8008dbc:	40013400 	.word	0x40013400
 8008dc0:	40015000 	.word	0x40015000
 8008dc4:	40015400 	.word	0x40015400

08008dc8 <TM_SPI_InitCustomPinsCallback>:
		/* Save data to buffer */
		*dataIn++ = SPIx->DR;
	}
}

__weak void TM_SPI_InitCustomPinsCallback(SPI_TypeDef* SPIx, uint16_t AlternateFunction) { 
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	807b      	strh	r3, [r7, #2]
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_SPI_InitCustomPinsCallback could be implemented in the user file
   */
}
 8008dd4:	bf00      	nop
 8008dd6:	370c      	adds	r7, #12
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dde:	4770      	bx	lr

08008de0 <TM_SPIx_Init>:

/* Private functions */
static void TM_SPIx_Init(SPI_TypeDef* SPIx, TM_SPI_PinsPack_t pinspack, TM_SPI_Mode_t SPI_Mode, uint16_t SPI_BaudRatePrescaler, uint16_t SPI_MasterSlave, uint16_t SPI_FirstBit) {
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b09e      	sub	sp, #120	; 0x78
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	4608      	mov	r0, r1
 8008dea:	4611      	mov	r1, r2
 8008dec:	461a      	mov	r2, r3
 8008dee:	4603      	mov	r3, r0
 8008df0:	70fb      	strb	r3, [r7, #3]
 8008df2:	460b      	mov	r3, r1
 8008df4:	70bb      	strb	r3, [r7, #2]
 8008df6:	4613      	mov	r3, r2
 8008df8:	803b      	strh	r3, [r7, #0]
	SPI_HandleTypeDef SPIHandle;
	
	/* Save instance */
	SPIHandle.Instance = SPIx;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	623b      	str	r3, [r7, #32]
	
#ifdef SPI1	
	if (SPIx == SPI1) {
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a6a      	ldr	r2, [pc, #424]	; (8008fac <TM_SPIx_Init+0x1cc>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d113      	bne.n	8008e2e <TM_SPIx_Init+0x4e>
		/* Enable SPI clock */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8008e06:	2300      	movs	r3, #0
 8008e08:	61fb      	str	r3, [r7, #28]
 8008e0a:	4b69      	ldr	r3, [pc, #420]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0e:	4a68      	ldr	r2, [pc, #416]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008e10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e14:	6453      	str	r3, [r2, #68]	; 0x44
 8008e16:	4b66      	ldr	r3, [pc, #408]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e1e:	61fb      	str	r3, [r7, #28]
 8008e20:	69fb      	ldr	r3, [r7, #28]
		
		/* Init pins */
		TM_SPI1_INT_InitPins(pinspack);
 8008e22:	78fb      	ldrb	r3, [r7, #3]
 8008e24:	4618      	mov	r0, r3
 8008e26:	f000 f8cf 	bl	8008fc8 <TM_SPI1_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI1_DATASIZE;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI2
	if (SPIx == SPI2) {
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a60      	ldr	r2, [pc, #384]	; (8008fb4 <TM_SPIx_Init+0x1d4>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d113      	bne.n	8008e5e <TM_SPIx_Init+0x7e>
		/* Enable SPI clock */
		__HAL_RCC_SPI2_CLK_ENABLE();
 8008e36:	2300      	movs	r3, #0
 8008e38:	61bb      	str	r3, [r7, #24]
 8008e3a:	4b5d      	ldr	r3, [pc, #372]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3e:	4a5c      	ldr	r2, [pc, #368]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e44:	6413      	str	r3, [r2, #64]	; 0x40
 8008e46:	4b5a      	ldr	r3, [pc, #360]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e4e:	61bb      	str	r3, [r7, #24]
 8008e50:	69bb      	ldr	r3, [r7, #24]
		
		/* Init pins */
		TM_SPI2_INT_InitPins(pinspack);
 8008e52:	78fb      	ldrb	r3, [r7, #3]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 f8e7 	bl	8009028 <TM_SPI2_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI2_DATASIZE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI3
	if (SPIx == SPI3) {
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a55      	ldr	r2, [pc, #340]	; (8008fb8 <TM_SPIx_Init+0x1d8>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d113      	bne.n	8008e8e <TM_SPIx_Init+0xae>
		/* Enable SPI clock */
		__HAL_RCC_SPI3_CLK_ENABLE();
 8008e66:	2300      	movs	r3, #0
 8008e68:	617b      	str	r3, [r7, #20]
 8008e6a:	4b51      	ldr	r3, [pc, #324]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	4a50      	ldr	r2, [pc, #320]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e74:	6413      	str	r3, [r2, #64]	; 0x40
 8008e76:	4b4e      	ldr	r3, [pc, #312]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e7e:	617b      	str	r3, [r7, #20]
 8008e80:	697b      	ldr	r3, [r7, #20]
		
		/* Init pins */
		TM_SPI3_INT_InitPins(pinspack);
 8008e82:	78fb      	ldrb	r3, [r7, #3]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 f933 	bl	80090f0 <TM_SPI3_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI3_DATASIZE;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	}
#endif
#ifdef SPI4
	if (SPIx == SPI4) {
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a4a      	ldr	r2, [pc, #296]	; (8008fbc <TM_SPIx_Init+0x1dc>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d113      	bne.n	8008ebe <TM_SPIx_Init+0xde>
		/* Enable SPI clock */
		__HAL_RCC_SPI4_CLK_ENABLE();
 8008e96:	2300      	movs	r3, #0
 8008e98:	613b      	str	r3, [r7, #16]
 8008e9a:	4b45      	ldr	r3, [pc, #276]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9e:	4a44      	ldr	r2, [pc, #272]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008ea0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ea6:	4b42      	ldr	r3, [pc, #264]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eae:	613b      	str	r3, [r7, #16]
 8008eb0:	693b      	ldr	r3, [r7, #16]
		
		/* Init pins */
		TM_SPI4_INT_InitPins(pinspack);
 8008eb2:	78fb      	ldrb	r3, [r7, #3]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f94d 	bl	8009154 <TM_SPI4_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI4_DATASIZE;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI5
	if (SPIx == SPI5) {
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a3f      	ldr	r2, [pc, #252]	; (8008fc0 <TM_SPIx_Init+0x1e0>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d113      	bne.n	8008eee <TM_SPIx_Init+0x10e>
		/* Enable SPI clock */
		__HAL_RCC_SPI5_CLK_ENABLE();
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	60fb      	str	r3, [r7, #12]
 8008eca:	4b39      	ldr	r3, [pc, #228]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ece:	4a38      	ldr	r2, [pc, #224]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8008ed6:	4b36      	ldr	r3, [pc, #216]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ede:	60fb      	str	r3, [r7, #12]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
		
		/* Init pins */
		TM_SPI5_INT_InitPins(pinspack);
 8008ee2:	78fb      	ldrb	r3, [r7, #3]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 f965 	bl	80091b4 <TM_SPI5_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI5_DATASIZE;
 8008eea:	2300      	movs	r3, #0
 8008eec:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif
#ifdef SPI6
	if (SPIx == SPI6) {
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a34      	ldr	r2, [pc, #208]	; (8008fc4 <TM_SPIx_Init+0x1e4>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d113      	bne.n	8008f1e <TM_SPIx_Init+0x13e>
		/* Enable SPI clock */
		__HAL_RCC_SPI6_CLK_ENABLE();
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60bb      	str	r3, [r7, #8]
 8008efa:	4b2d      	ldr	r3, [pc, #180]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008efe:	4a2c      	ldr	r2, [pc, #176]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008f00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f04:	6453      	str	r3, [r2, #68]	; 0x44
 8008f06:	4b2a      	ldr	r3, [pc, #168]	; (8008fb0 <TM_SPIx_Init+0x1d0>)
 8008f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f0e:	60bb      	str	r3, [r7, #8]
 8008f10:	68bb      	ldr	r3, [r7, #8]
		
		/* Init pins */
		TM_SPI6_INT_InitPins(pinspack);
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 f989 	bl	800922c <TM_SPI6_INT_InitPins>
		
		/* Set options */
		SPIHandle.Init.DataSize = TM_SPI6_DATASIZE;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
#endif

	/* Fill SPI settings */
	SPIHandle.Init.BaudRatePrescaler = SPI_BaudRatePrescaler;
 8008f1e:	883b      	ldrh	r3, [r7, #0]
 8008f20:	63fb      	str	r3, [r7, #60]	; 0x3c
	SPIHandle.Init.FirstBit = SPI_FirstBit;
 8008f22:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008f26:	643b      	str	r3, [r7, #64]	; 0x40
	SPIHandle.Init.Mode = SPI_MasterSlave;
 8008f28:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
	
	SPIHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	64bb      	str	r3, [r7, #72]	; 0x48
	SPIHandle.Init.CRCPolynomial = 7;
 8008f32:	2307      	movs	r3, #7
 8008f34:	64fb      	str	r3, [r7, #76]	; 0x4c
	SPIHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8008f36:	2300      	movs	r3, #0
 8008f38:	647b      	str	r3, [r7, #68]	; 0x44
	SPIHandle.Init.NSS = SPI_NSS_SOFT;
 8008f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f3e:	63bb      	str	r3, [r7, #56]	; 0x38
	SPIHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8008f40:	2300      	movs	r3, #0
 8008f42:	62bb      	str	r3, [r7, #40]	; 0x28
    SPIHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SPIHandle.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
#endif
	
	/* SPI mode */
	if (SPI_Mode == TM_SPI_Mode_0) {
 8008f44:	78bb      	ldrb	r3, [r7, #2]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d104      	bne.n	8008f54 <TM_SPIx_Init+0x174>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34
 8008f52:	e016      	b.n	8008f82 <TM_SPIx_Init+0x1a2>
	} else if (SPI_Mode == TM_SPI_Mode_1) {
 8008f54:	78bb      	ldrb	r3, [r7, #2]
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d104      	bne.n	8008f64 <TM_SPIx_Init+0x184>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	637b      	str	r3, [r7, #52]	; 0x34
 8008f62:	e00e      	b.n	8008f82 <TM_SPIx_Init+0x1a2>
	} else if (SPI_Mode == TM_SPI_Mode_2) {
 8008f64:	78bb      	ldrb	r3, [r7, #2]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d104      	bne.n	8008f74 <TM_SPIx_Init+0x194>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	637b      	str	r3, [r7, #52]	; 0x34
 8008f72:	e006      	b.n	8008f82 <TM_SPIx_Init+0x1a2>
	} else if (SPI_Mode == TM_SPI_Mode_3) {
 8008f74:	78bb      	ldrb	r3, [r7, #2]
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d103      	bne.n	8008f82 <TM_SPIx_Init+0x1a2>
		SPIHandle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	633b      	str	r3, [r7, #48]	; 0x30
		SPIHandle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	637b      	str	r3, [r7, #52]	; 0x34
	}
	
	/* Disable first */
	__HAL_SPI_DISABLE(&SPIHandle);
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f8c:	601a      	str	r2, [r3, #0]
	
	/* Init SPI */
	HAL_SPI_Init(&SPIHandle);
 8008f8e:	f107 0320 	add.w	r3, r7, #32
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fd f84b 	bl	800602e <HAL_SPI_Init>
	
	/* Enable SPI */
	__HAL_SPI_ENABLE(&SPIHandle);
 8008f98:	6a3b      	ldr	r3, [r7, #32]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fa2:	601a      	str	r2, [r3, #0]
}
 8008fa4:	bf00      	nop
 8008fa6:	3778      	adds	r7, #120	; 0x78
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	40013000 	.word	0x40013000
 8008fb0:	40023800 	.word	0x40023800
 8008fb4:	40003800 	.word	0x40003800
 8008fb8:	40003c00 	.word	0x40003c00
 8008fbc:	40013400 	.word	0x40013400
 8008fc0:	40015000 	.word	0x40015000
 8008fc4:	40015400 	.word	0x40015400

08008fc8 <TM_SPI1_INT_InitPins>:

/* Private functions */
#ifdef SPI1
void TM_SPI1_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b084      	sub	sp, #16
 8008fcc:	af02      	add	r7, sp, #8
 8008fce:	4603      	mov	r3, r0
 8008fd0:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOA)
	if (pinspack == TM_SPI_PinsPack_1) {
 8008fd2:	79fb      	ldrb	r3, [r7, #7]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d109      	bne.n	8008fec <TM_SPI1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI1);
 8008fd8:	2305      	movs	r3, #5
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	2303      	movs	r3, #3
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	21e0      	movs	r1, #224	; 0xe0
 8008fe6:	480d      	ldr	r0, [pc, #52]	; (800901c <TM_SPI1_INT_InitPins+0x54>)
 8008fe8:	f7fe fea7 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d109      	bne.n	8009006 <TM_SPI1_INT_InitPins+0x3e>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI1);
 8008ff2:	2305      	movs	r3, #5
 8008ff4:	9301      	str	r3, [sp, #4]
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	2138      	movs	r1, #56	; 0x38
 8009000:	4807      	ldr	r0, [pc, #28]	; (8009020 <TM_SPI1_INT_InitPins+0x58>)
 8009002:	f7fe fe9a 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	2b04      	cmp	r3, #4
 800900a:	d103      	bne.n	8009014 <TM_SPI1_INT_InitPins+0x4c>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI1, GPIO_AFx_SPI1);
 800900c:	2105      	movs	r1, #5
 800900e:	4805      	ldr	r0, [pc, #20]	; (8009024 <TM_SPI1_INT_InitPins+0x5c>)
 8009010:	f7ff feda 	bl	8008dc8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	40020000 	.word	0x40020000
 8009020:	40020400 	.word	0x40020400
 8009024:	40013000 	.word	0x40013000

08009028 <TM_SPI2_INT_InitPins>:
#endif

#ifdef SPI2
void TM_SPI2_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af02      	add	r7, sp, #8
 800902e:	4603      	mov	r3, r0
 8009030:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOB) && defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_1) {
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d114      	bne.n	8009062 <TM_SPI2_INT_InitPins+0x3a>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 8009038:	2305      	movs	r3, #5
 800903a:	9301      	str	r3, [sp, #4]
 800903c:	2303      	movs	r3, #3
 800903e:	9300      	str	r3, [sp, #0]
 8009040:	2300      	movs	r3, #0
 8009042:	2200      	movs	r2, #0
 8009044:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009048:	4825      	ldr	r0, [pc, #148]	; (80090e0 <TM_SPI2_INT_InitPins+0xb8>)
 800904a:	f7fe fe76 	bl	8007d3a <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800904e:	2305      	movs	r3, #5
 8009050:	9301      	str	r3, [sp, #4]
 8009052:	2303      	movs	r3, #3
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	2300      	movs	r3, #0
 8009058:	2200      	movs	r2, #0
 800905a:	210c      	movs	r1, #12
 800905c:	4821      	ldr	r0, [pc, #132]	; (80090e4 <TM_SPI2_INT_InitPins+0xbc>)
 800905e:	f7fe fe6c 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_2) {
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d10a      	bne.n	800907e <TM_SPI2_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 8009068:	2305      	movs	r3, #5
 800906a:	9301      	str	r3, [sp, #4]
 800906c:	2303      	movs	r3, #3
 800906e:	9300      	str	r3, [sp, #0]
 8009070:	2300      	movs	r3, #0
 8009072:	2200      	movs	r2, #0
 8009074:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8009078:	4819      	ldr	r0, [pc, #100]	; (80090e0 <TM_SPI2_INT_InitPins+0xb8>)
 800907a:	f7fe fe5e 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_3) {
 800907e:	79fb      	ldrb	r3, [r7, #7]
 8009080:	2b02      	cmp	r3, #2
 8009082:	d109      	bne.n	8009098 <TM_SPI2_INT_InitPins+0x70>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_3, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 8009084:	2305      	movs	r3, #5
 8009086:	9301      	str	r3, [sp, #4]
 8009088:	2303      	movs	r3, #3
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	2300      	movs	r3, #0
 800908e:	2200      	movs	r2, #0
 8009090:	210d      	movs	r1, #13
 8009092:	4815      	ldr	r0, [pc, #84]	; (80090e8 <TM_SPI2_INT_InitPins+0xc0>)
 8009094:	f7fe fe51 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB) && defined(GPIOI)
	if (pinspack == TM_SPI_PinsPack_4) {
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	2b03      	cmp	r3, #3
 800909c:	d114      	bne.n	80090c8 <TM_SPI2_INT_InitPins+0xa0>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_14 | GPIO_PIN_15, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 800909e:	2305      	movs	r3, #5
 80090a0:	9301      	str	r3, [sp, #4]
 80090a2:	2303      	movs	r3, #3
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	2300      	movs	r3, #0
 80090a8:	2200      	movs	r2, #0
 80090aa:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80090ae:	480c      	ldr	r0, [pc, #48]	; (80090e0 <TM_SPI2_INT_InitPins+0xb8>)
 80090b0:	f7fe fe43 	bl	8007d3a <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOI, GPIO_PIN_1, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI2);
 80090b4:	2305      	movs	r3, #5
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	2303      	movs	r3, #3
 80090ba:	9300      	str	r3, [sp, #0]
 80090bc:	2300      	movs	r3, #0
 80090be:	2200      	movs	r2, #0
 80090c0:	2102      	movs	r1, #2
 80090c2:	4809      	ldr	r0, [pc, #36]	; (80090e8 <TM_SPI2_INT_InitPins+0xc0>)
 80090c4:	f7fe fe39 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	2b04      	cmp	r3, #4
 80090cc:	d103      	bne.n	80090d6 <TM_SPI2_INT_InitPins+0xae>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI2, GPIO_AFx_SPI2);
 80090ce:	2105      	movs	r1, #5
 80090d0:	4806      	ldr	r0, [pc, #24]	; (80090ec <TM_SPI2_INT_InitPins+0xc4>)
 80090d2:	f7ff fe79 	bl	8008dc8 <TM_SPI_InitCustomPinsCallback>
	}
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	40020400 	.word	0x40020400
 80090e4:	40020800 	.word	0x40020800
 80090e8:	40022000 	.word	0x40022000
 80090ec:	40003800 	.word	0x40003800

080090f0 <TM_SPI3_INT_InitPins>:
#endif

#ifdef SPI3
void TM_SPI3_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af02      	add	r7, sp, #8
 80090f6:	4603      	mov	r3, r0
 80090f8:	71fb      	strb	r3, [r7, #7]
	/* Enable SPI pins */
#if defined(GPIOB)
	if (pinspack == TM_SPI_PinsPack_1) {
 80090fa:	79fb      	ldrb	r3, [r7, #7]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d109      	bne.n	8009114 <TM_SPI3_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI3);
 8009100:	2306      	movs	r3, #6
 8009102:	9301      	str	r3, [sp, #4]
 8009104:	2303      	movs	r3, #3
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	2300      	movs	r3, #0
 800910a:	2200      	movs	r2, #0
 800910c:	2138      	movs	r1, #56	; 0x38
 800910e:	480e      	ldr	r0, [pc, #56]	; (8009148 <TM_SPI3_INT_InitPins+0x58>)
 8009110:	f7fe fe13 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOC)
	if (pinspack == TM_SPI_PinsPack_2) {
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d10a      	bne.n	8009130 <TM_SPI3_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI3);
 800911a:	2306      	movs	r3, #6
 800911c:	9301      	str	r3, [sp, #4]
 800911e:	2303      	movs	r3, #3
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	2300      	movs	r3, #0
 8009124:	2200      	movs	r2, #0
 8009126:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800912a:	4808      	ldr	r0, [pc, #32]	; (800914c <TM_SPI3_INT_InitPins+0x5c>)
 800912c:	f7fe fe05 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	2b04      	cmp	r3, #4
 8009134:	d103      	bne.n	800913e <TM_SPI3_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI3, GPIO_AFx_SPI3);
 8009136:	2106      	movs	r1, #6
 8009138:	4805      	ldr	r0, [pc, #20]	; (8009150 <TM_SPI3_INT_InitPins+0x60>)
 800913a:	f7ff fe45 	bl	8008dc8 <TM_SPI_InitCustomPinsCallback>
	}
}
 800913e:	bf00      	nop
 8009140:	3708      	adds	r7, #8
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	40020400 	.word	0x40020400
 800914c:	40020800 	.word	0x40020800
 8009150:	40003c00 	.word	0x40003c00

08009154 <TM_SPI4_INT_InitPins>:
#endif

#ifdef SPI4
void TM_SPI4_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af02      	add	r7, sp, #8
 800915a:	4603      	mov	r3, r0
 800915c:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_1) {
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d109      	bne.n	8009178 <TM_SPI4_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI4);
 8009164:	2305      	movs	r3, #5
 8009166:	9301      	str	r3, [sp, #4]
 8009168:	2303      	movs	r3, #3
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	2300      	movs	r3, #0
 800916e:	2200      	movs	r2, #0
 8009170:	2164      	movs	r1, #100	; 0x64
 8009172:	480e      	ldr	r0, [pc, #56]	; (80091ac <TM_SPI4_INT_InitPins+0x58>)
 8009174:	f7fe fde1 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOE)
	if (pinspack == TM_SPI_PinsPack_2) {
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d10a      	bne.n	8009194 <TM_SPI4_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOE, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI4);
 800917e:	2305      	movs	r3, #5
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	2303      	movs	r3, #3
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	2300      	movs	r3, #0
 8009188:	2200      	movs	r2, #0
 800918a:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800918e:	4807      	ldr	r0, [pc, #28]	; (80091ac <TM_SPI4_INT_InitPins+0x58>)
 8009190:	f7fe fdd3 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8009194:	79fb      	ldrb	r3, [r7, #7]
 8009196:	2b04      	cmp	r3, #4
 8009198:	d103      	bne.n	80091a2 <TM_SPI4_INT_InitPins+0x4e>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI4, GPIO_AFx_SPI4);
 800919a:	2105      	movs	r1, #5
 800919c:	4804      	ldr	r0, [pc, #16]	; (80091b0 <TM_SPI4_INT_InitPins+0x5c>)
 800919e:	f7ff fe13 	bl	8008dc8 <TM_SPI_InitCustomPinsCallback>
	}
}
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	40021000 	.word	0x40021000
 80091b0:	40013400 	.word	0x40013400

080091b4 <TM_SPI5_INT_InitPins>:
#endif

#ifdef SPI5
void TM_SPI5_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af02      	add	r7, sp, #8
 80091ba:	4603      	mov	r3, r0
 80091bc:	71fb      	strb	r3, [r7, #7]
	/* Init SPI pins */
#if defined(GPIOF)
	if (pinspack == TM_SPI_PinsPack_1) {
 80091be:	79fb      	ldrb	r3, [r7, #7]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d10a      	bne.n	80091da <TM_SPI5_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI5);
 80091c4:	2305      	movs	r3, #5
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	2303      	movs	r3, #3
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	2300      	movs	r3, #0
 80091ce:	2200      	movs	r2, #0
 80091d0:	f44f 7160 	mov.w	r1, #896	; 0x380
 80091d4:	4812      	ldr	r0, [pc, #72]	; (8009220 <TM_SPI5_INT_InitPins+0x6c>)
 80091d6:	f7fe fdb0 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF) && defined(GPIOH)
	if (pinspack == TM_SPI_PinsPack_2) {
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d114      	bne.n	800920a <TM_SPI5_INT_InitPins+0x56>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_11, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI5);
 80091e0:	2305      	movs	r3, #5
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	2303      	movs	r3, #3
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	2300      	movs	r3, #0
 80091ea:	2200      	movs	r2, #0
 80091ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091f0:	480b      	ldr	r0, [pc, #44]	; (8009220 <TM_SPI5_INT_InitPins+0x6c>)
 80091f2:	f7fe fda2 	bl	8007d3a <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI5);
 80091f6:	2305      	movs	r3, #5
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	2303      	movs	r3, #3
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	2300      	movs	r3, #0
 8009200:	2200      	movs	r2, #0
 8009202:	21c0      	movs	r1, #192	; 0xc0
 8009204:	4807      	ldr	r0, [pc, #28]	; (8009224 <TM_SPI5_INT_InitPins+0x70>)
 8009206:	f7fe fd98 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	2b04      	cmp	r3, #4
 800920e:	d103      	bne.n	8009218 <TM_SPI5_INT_InitPins+0x64>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI5, GPIO_AFx_SPI5);
 8009210:	2105      	movs	r1, #5
 8009212:	4805      	ldr	r0, [pc, #20]	; (8009228 <TM_SPI5_INT_InitPins+0x74>)
 8009214:	f7ff fdd8 	bl	8008dc8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8009218:	bf00      	nop
 800921a:	3708      	adds	r7, #8
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	40021400 	.word	0x40021400
 8009224:	40021c00 	.word	0x40021c00
 8009228:	40015000 	.word	0x40015000

0800922c <TM_SPI6_INT_InitPins>:
#endif

#ifdef SPI6
void TM_SPI6_INT_InitPins(TM_SPI_PinsPack_t pinspack) {
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af02      	add	r7, sp, #8
 8009232:	4603      	mov	r3, r0
 8009234:	71fb      	strb	r3, [r7, #7]
#if defined(GPIOG)
	if (pinspack == TM_SPI_PinsPack_1) {
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10a      	bne.n	8009252 <TM_SPI6_INT_InitPins+0x26>
		/* Init SPI pins */
		TM_GPIO_InitAlternate(GPIOG, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_High, GPIO_AFx_SPI6);
 800923c:	2305      	movs	r3, #5
 800923e:	9301      	str	r3, [sp, #4]
 8009240:	2303      	movs	r3, #3
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	2300      	movs	r3, #0
 8009246:	2200      	movs	r2, #0
 8009248:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800924c:	4806      	ldr	r0, [pc, #24]	; (8009268 <TM_SPI6_INT_InitPins+0x3c>)
 800924e:	f7fe fd74 	bl	8007d3a <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_SPI_PinsPack_Custom) {
 8009252:	79fb      	ldrb	r3, [r7, #7]
 8009254:	2b04      	cmp	r3, #4
 8009256:	d103      	bne.n	8009260 <TM_SPI6_INT_InitPins+0x34>
		/* Call user function */
		TM_SPI_InitCustomPinsCallback(SPI6, GPIO_AFx_SPI6);
 8009258:	2105      	movs	r1, #5
 800925a:	4804      	ldr	r0, [pc, #16]	; (800926c <TM_SPI6_INT_InitPins+0x40>)
 800925c:	f7ff fdb4 	bl	8008dc8 <TM_SPI_InitCustomPinsCallback>
	}
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	40021800 	.word	0x40021800
 800926c:	40015400 	.word	0x40015400

08009270 <__errno>:
 8009270:	4b01      	ldr	r3, [pc, #4]	; (8009278 <__errno+0x8>)
 8009272:	6818      	ldr	r0, [r3, #0]
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	2000002c 	.word	0x2000002c

0800927c <__libc_init_array>:
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	4e0d      	ldr	r6, [pc, #52]	; (80092b4 <__libc_init_array+0x38>)
 8009280:	4c0d      	ldr	r4, [pc, #52]	; (80092b8 <__libc_init_array+0x3c>)
 8009282:	1ba4      	subs	r4, r4, r6
 8009284:	10a4      	asrs	r4, r4, #2
 8009286:	2500      	movs	r5, #0
 8009288:	42a5      	cmp	r5, r4
 800928a:	d109      	bne.n	80092a0 <__libc_init_array+0x24>
 800928c:	4e0b      	ldr	r6, [pc, #44]	; (80092bc <__libc_init_array+0x40>)
 800928e:	4c0c      	ldr	r4, [pc, #48]	; (80092c0 <__libc_init_array+0x44>)
 8009290:	f004 fd6c 	bl	800dd6c <_init>
 8009294:	1ba4      	subs	r4, r4, r6
 8009296:	10a4      	asrs	r4, r4, #2
 8009298:	2500      	movs	r5, #0
 800929a:	42a5      	cmp	r5, r4
 800929c:	d105      	bne.n	80092aa <__libc_init_array+0x2e>
 800929e:	bd70      	pop	{r4, r5, r6, pc}
 80092a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092a4:	4798      	blx	r3
 80092a6:	3501      	adds	r5, #1
 80092a8:	e7ee      	b.n	8009288 <__libc_init_array+0xc>
 80092aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80092ae:	4798      	blx	r3
 80092b0:	3501      	adds	r5, #1
 80092b2:	e7f2      	b.n	800929a <__libc_init_array+0x1e>
 80092b4:	0800f7b0 	.word	0x0800f7b0
 80092b8:	0800f7b0 	.word	0x0800f7b0
 80092bc:	0800f7b0 	.word	0x0800f7b0
 80092c0:	0800f7b4 	.word	0x0800f7b4

080092c4 <malloc>:
 80092c4:	4b02      	ldr	r3, [pc, #8]	; (80092d0 <malloc+0xc>)
 80092c6:	4601      	mov	r1, r0
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	f000 b87d 	b.w	80093c8 <_malloc_r>
 80092ce:	bf00      	nop
 80092d0:	2000002c 	.word	0x2000002c

080092d4 <memcpy>:
 80092d4:	b510      	push	{r4, lr}
 80092d6:	1e43      	subs	r3, r0, #1
 80092d8:	440a      	add	r2, r1
 80092da:	4291      	cmp	r1, r2
 80092dc:	d100      	bne.n	80092e0 <memcpy+0xc>
 80092de:	bd10      	pop	{r4, pc}
 80092e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092e8:	e7f7      	b.n	80092da <memcpy+0x6>

080092ea <memmove>:
 80092ea:	4288      	cmp	r0, r1
 80092ec:	b510      	push	{r4, lr}
 80092ee:	eb01 0302 	add.w	r3, r1, r2
 80092f2:	d807      	bhi.n	8009304 <memmove+0x1a>
 80092f4:	1e42      	subs	r2, r0, #1
 80092f6:	4299      	cmp	r1, r3
 80092f8:	d00a      	beq.n	8009310 <memmove+0x26>
 80092fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009302:	e7f8      	b.n	80092f6 <memmove+0xc>
 8009304:	4283      	cmp	r3, r0
 8009306:	d9f5      	bls.n	80092f4 <memmove+0xa>
 8009308:	1881      	adds	r1, r0, r2
 800930a:	1ad2      	subs	r2, r2, r3
 800930c:	42d3      	cmn	r3, r2
 800930e:	d100      	bne.n	8009312 <memmove+0x28>
 8009310:	bd10      	pop	{r4, pc}
 8009312:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009316:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800931a:	e7f7      	b.n	800930c <memmove+0x22>

0800931c <memset>:
 800931c:	4402      	add	r2, r0
 800931e:	4603      	mov	r3, r0
 8009320:	4293      	cmp	r3, r2
 8009322:	d100      	bne.n	8009326 <memset+0xa>
 8009324:	4770      	bx	lr
 8009326:	f803 1b01 	strb.w	r1, [r3], #1
 800932a:	e7f9      	b.n	8009320 <memset+0x4>

0800932c <_free_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4605      	mov	r5, r0
 8009330:	2900      	cmp	r1, #0
 8009332:	d045      	beq.n	80093c0 <_free_r+0x94>
 8009334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009338:	1f0c      	subs	r4, r1, #4
 800933a:	2b00      	cmp	r3, #0
 800933c:	bfb8      	it	lt
 800933e:	18e4      	addlt	r4, r4, r3
 8009340:	f002 ff62 	bl	800c208 <__malloc_lock>
 8009344:	4a1f      	ldr	r2, [pc, #124]	; (80093c4 <_free_r+0x98>)
 8009346:	6813      	ldr	r3, [r2, #0]
 8009348:	4610      	mov	r0, r2
 800934a:	b933      	cbnz	r3, 800935a <_free_r+0x2e>
 800934c:	6063      	str	r3, [r4, #4]
 800934e:	6014      	str	r4, [r2, #0]
 8009350:	4628      	mov	r0, r5
 8009352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009356:	f002 bf58 	b.w	800c20a <__malloc_unlock>
 800935a:	42a3      	cmp	r3, r4
 800935c:	d90c      	bls.n	8009378 <_free_r+0x4c>
 800935e:	6821      	ldr	r1, [r4, #0]
 8009360:	1862      	adds	r2, r4, r1
 8009362:	4293      	cmp	r3, r2
 8009364:	bf04      	itt	eq
 8009366:	681a      	ldreq	r2, [r3, #0]
 8009368:	685b      	ldreq	r3, [r3, #4]
 800936a:	6063      	str	r3, [r4, #4]
 800936c:	bf04      	itt	eq
 800936e:	1852      	addeq	r2, r2, r1
 8009370:	6022      	streq	r2, [r4, #0]
 8009372:	6004      	str	r4, [r0, #0]
 8009374:	e7ec      	b.n	8009350 <_free_r+0x24>
 8009376:	4613      	mov	r3, r2
 8009378:	685a      	ldr	r2, [r3, #4]
 800937a:	b10a      	cbz	r2, 8009380 <_free_r+0x54>
 800937c:	42a2      	cmp	r2, r4
 800937e:	d9fa      	bls.n	8009376 <_free_r+0x4a>
 8009380:	6819      	ldr	r1, [r3, #0]
 8009382:	1858      	adds	r0, r3, r1
 8009384:	42a0      	cmp	r0, r4
 8009386:	d10b      	bne.n	80093a0 <_free_r+0x74>
 8009388:	6820      	ldr	r0, [r4, #0]
 800938a:	4401      	add	r1, r0
 800938c:	1858      	adds	r0, r3, r1
 800938e:	4282      	cmp	r2, r0
 8009390:	6019      	str	r1, [r3, #0]
 8009392:	d1dd      	bne.n	8009350 <_free_r+0x24>
 8009394:	6810      	ldr	r0, [r2, #0]
 8009396:	6852      	ldr	r2, [r2, #4]
 8009398:	605a      	str	r2, [r3, #4]
 800939a:	4401      	add	r1, r0
 800939c:	6019      	str	r1, [r3, #0]
 800939e:	e7d7      	b.n	8009350 <_free_r+0x24>
 80093a0:	d902      	bls.n	80093a8 <_free_r+0x7c>
 80093a2:	230c      	movs	r3, #12
 80093a4:	602b      	str	r3, [r5, #0]
 80093a6:	e7d3      	b.n	8009350 <_free_r+0x24>
 80093a8:	6820      	ldr	r0, [r4, #0]
 80093aa:	1821      	adds	r1, r4, r0
 80093ac:	428a      	cmp	r2, r1
 80093ae:	bf04      	itt	eq
 80093b0:	6811      	ldreq	r1, [r2, #0]
 80093b2:	6852      	ldreq	r2, [r2, #4]
 80093b4:	6062      	str	r2, [r4, #4]
 80093b6:	bf04      	itt	eq
 80093b8:	1809      	addeq	r1, r1, r0
 80093ba:	6021      	streq	r1, [r4, #0]
 80093bc:	605c      	str	r4, [r3, #4]
 80093be:	e7c7      	b.n	8009350 <_free_r+0x24>
 80093c0:	bd38      	pop	{r3, r4, r5, pc}
 80093c2:	bf00      	nop
 80093c4:	2000037c 	.word	0x2000037c

080093c8 <_malloc_r>:
 80093c8:	b570      	push	{r4, r5, r6, lr}
 80093ca:	1ccd      	adds	r5, r1, #3
 80093cc:	f025 0503 	bic.w	r5, r5, #3
 80093d0:	3508      	adds	r5, #8
 80093d2:	2d0c      	cmp	r5, #12
 80093d4:	bf38      	it	cc
 80093d6:	250c      	movcc	r5, #12
 80093d8:	2d00      	cmp	r5, #0
 80093da:	4606      	mov	r6, r0
 80093dc:	db01      	blt.n	80093e2 <_malloc_r+0x1a>
 80093de:	42a9      	cmp	r1, r5
 80093e0:	d903      	bls.n	80093ea <_malloc_r+0x22>
 80093e2:	230c      	movs	r3, #12
 80093e4:	6033      	str	r3, [r6, #0]
 80093e6:	2000      	movs	r0, #0
 80093e8:	bd70      	pop	{r4, r5, r6, pc}
 80093ea:	f002 ff0d 	bl	800c208 <__malloc_lock>
 80093ee:	4a21      	ldr	r2, [pc, #132]	; (8009474 <_malloc_r+0xac>)
 80093f0:	6814      	ldr	r4, [r2, #0]
 80093f2:	4621      	mov	r1, r4
 80093f4:	b991      	cbnz	r1, 800941c <_malloc_r+0x54>
 80093f6:	4c20      	ldr	r4, [pc, #128]	; (8009478 <_malloc_r+0xb0>)
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	b91b      	cbnz	r3, 8009404 <_malloc_r+0x3c>
 80093fc:	4630      	mov	r0, r6
 80093fe:	f000 fe7b 	bl	800a0f8 <_sbrk_r>
 8009402:	6020      	str	r0, [r4, #0]
 8009404:	4629      	mov	r1, r5
 8009406:	4630      	mov	r0, r6
 8009408:	f000 fe76 	bl	800a0f8 <_sbrk_r>
 800940c:	1c43      	adds	r3, r0, #1
 800940e:	d124      	bne.n	800945a <_malloc_r+0x92>
 8009410:	230c      	movs	r3, #12
 8009412:	6033      	str	r3, [r6, #0]
 8009414:	4630      	mov	r0, r6
 8009416:	f002 fef8 	bl	800c20a <__malloc_unlock>
 800941a:	e7e4      	b.n	80093e6 <_malloc_r+0x1e>
 800941c:	680b      	ldr	r3, [r1, #0]
 800941e:	1b5b      	subs	r3, r3, r5
 8009420:	d418      	bmi.n	8009454 <_malloc_r+0x8c>
 8009422:	2b0b      	cmp	r3, #11
 8009424:	d90f      	bls.n	8009446 <_malloc_r+0x7e>
 8009426:	600b      	str	r3, [r1, #0]
 8009428:	50cd      	str	r5, [r1, r3]
 800942a:	18cc      	adds	r4, r1, r3
 800942c:	4630      	mov	r0, r6
 800942e:	f002 feec 	bl	800c20a <__malloc_unlock>
 8009432:	f104 000b 	add.w	r0, r4, #11
 8009436:	1d23      	adds	r3, r4, #4
 8009438:	f020 0007 	bic.w	r0, r0, #7
 800943c:	1ac3      	subs	r3, r0, r3
 800943e:	d0d3      	beq.n	80093e8 <_malloc_r+0x20>
 8009440:	425a      	negs	r2, r3
 8009442:	50e2      	str	r2, [r4, r3]
 8009444:	e7d0      	b.n	80093e8 <_malloc_r+0x20>
 8009446:	428c      	cmp	r4, r1
 8009448:	684b      	ldr	r3, [r1, #4]
 800944a:	bf16      	itet	ne
 800944c:	6063      	strne	r3, [r4, #4]
 800944e:	6013      	streq	r3, [r2, #0]
 8009450:	460c      	movne	r4, r1
 8009452:	e7eb      	b.n	800942c <_malloc_r+0x64>
 8009454:	460c      	mov	r4, r1
 8009456:	6849      	ldr	r1, [r1, #4]
 8009458:	e7cc      	b.n	80093f4 <_malloc_r+0x2c>
 800945a:	1cc4      	adds	r4, r0, #3
 800945c:	f024 0403 	bic.w	r4, r4, #3
 8009460:	42a0      	cmp	r0, r4
 8009462:	d005      	beq.n	8009470 <_malloc_r+0xa8>
 8009464:	1a21      	subs	r1, r4, r0
 8009466:	4630      	mov	r0, r6
 8009468:	f000 fe46 	bl	800a0f8 <_sbrk_r>
 800946c:	3001      	adds	r0, #1
 800946e:	d0cf      	beq.n	8009410 <_malloc_r+0x48>
 8009470:	6025      	str	r5, [r4, #0]
 8009472:	e7db      	b.n	800942c <_malloc_r+0x64>
 8009474:	2000037c 	.word	0x2000037c
 8009478:	20000380 	.word	0x20000380

0800947c <__cvt>:
 800947c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009480:	ec55 4b10 	vmov	r4, r5, d0
 8009484:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8009486:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800948a:	2d00      	cmp	r5, #0
 800948c:	460e      	mov	r6, r1
 800948e:	4691      	mov	r9, r2
 8009490:	4619      	mov	r1, r3
 8009492:	bfb8      	it	lt
 8009494:	4622      	movlt	r2, r4
 8009496:	462b      	mov	r3, r5
 8009498:	f027 0720 	bic.w	r7, r7, #32
 800949c:	bfbb      	ittet	lt
 800949e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80094a2:	461d      	movlt	r5, r3
 80094a4:	2300      	movge	r3, #0
 80094a6:	232d      	movlt	r3, #45	; 0x2d
 80094a8:	bfb8      	it	lt
 80094aa:	4614      	movlt	r4, r2
 80094ac:	2f46      	cmp	r7, #70	; 0x46
 80094ae:	700b      	strb	r3, [r1, #0]
 80094b0:	d004      	beq.n	80094bc <__cvt+0x40>
 80094b2:	2f45      	cmp	r7, #69	; 0x45
 80094b4:	d100      	bne.n	80094b8 <__cvt+0x3c>
 80094b6:	3601      	adds	r6, #1
 80094b8:	2102      	movs	r1, #2
 80094ba:	e000      	b.n	80094be <__cvt+0x42>
 80094bc:	2103      	movs	r1, #3
 80094be:	ab03      	add	r3, sp, #12
 80094c0:	9301      	str	r3, [sp, #4]
 80094c2:	ab02      	add	r3, sp, #8
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	4632      	mov	r2, r6
 80094c8:	4653      	mov	r3, sl
 80094ca:	ec45 4b10 	vmov	d0, r4, r5
 80094ce:	f001 fd97 	bl	800b000 <_dtoa_r>
 80094d2:	2f47      	cmp	r7, #71	; 0x47
 80094d4:	4680      	mov	r8, r0
 80094d6:	d102      	bne.n	80094de <__cvt+0x62>
 80094d8:	f019 0f01 	tst.w	r9, #1
 80094dc:	d026      	beq.n	800952c <__cvt+0xb0>
 80094de:	2f46      	cmp	r7, #70	; 0x46
 80094e0:	eb08 0906 	add.w	r9, r8, r6
 80094e4:	d111      	bne.n	800950a <__cvt+0x8e>
 80094e6:	f898 3000 	ldrb.w	r3, [r8]
 80094ea:	2b30      	cmp	r3, #48	; 0x30
 80094ec:	d10a      	bne.n	8009504 <__cvt+0x88>
 80094ee:	2200      	movs	r2, #0
 80094f0:	2300      	movs	r3, #0
 80094f2:	4620      	mov	r0, r4
 80094f4:	4629      	mov	r1, r5
 80094f6:	f7f7 faf7 	bl	8000ae8 <__aeabi_dcmpeq>
 80094fa:	b918      	cbnz	r0, 8009504 <__cvt+0x88>
 80094fc:	f1c6 0601 	rsb	r6, r6, #1
 8009500:	f8ca 6000 	str.w	r6, [sl]
 8009504:	f8da 3000 	ldr.w	r3, [sl]
 8009508:	4499      	add	r9, r3
 800950a:	2200      	movs	r2, #0
 800950c:	2300      	movs	r3, #0
 800950e:	4620      	mov	r0, r4
 8009510:	4629      	mov	r1, r5
 8009512:	f7f7 fae9 	bl	8000ae8 <__aeabi_dcmpeq>
 8009516:	b938      	cbnz	r0, 8009528 <__cvt+0xac>
 8009518:	2230      	movs	r2, #48	; 0x30
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	454b      	cmp	r3, r9
 800951e:	d205      	bcs.n	800952c <__cvt+0xb0>
 8009520:	1c59      	adds	r1, r3, #1
 8009522:	9103      	str	r1, [sp, #12]
 8009524:	701a      	strb	r2, [r3, #0]
 8009526:	e7f8      	b.n	800951a <__cvt+0x9e>
 8009528:	f8cd 900c 	str.w	r9, [sp, #12]
 800952c:	9b03      	ldr	r3, [sp, #12]
 800952e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009530:	eba3 0308 	sub.w	r3, r3, r8
 8009534:	4640      	mov	r0, r8
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	b004      	add	sp, #16
 800953a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800953e <__exponent>:
 800953e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009540:	2900      	cmp	r1, #0
 8009542:	4604      	mov	r4, r0
 8009544:	bfba      	itte	lt
 8009546:	4249      	neglt	r1, r1
 8009548:	232d      	movlt	r3, #45	; 0x2d
 800954a:	232b      	movge	r3, #43	; 0x2b
 800954c:	2909      	cmp	r1, #9
 800954e:	f804 2b02 	strb.w	r2, [r4], #2
 8009552:	7043      	strb	r3, [r0, #1]
 8009554:	dd20      	ble.n	8009598 <__exponent+0x5a>
 8009556:	f10d 0307 	add.w	r3, sp, #7
 800955a:	461f      	mov	r7, r3
 800955c:	260a      	movs	r6, #10
 800955e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009562:	fb06 1115 	mls	r1, r6, r5, r1
 8009566:	3130      	adds	r1, #48	; 0x30
 8009568:	2d09      	cmp	r5, #9
 800956a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800956e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8009572:	4629      	mov	r1, r5
 8009574:	dc09      	bgt.n	800958a <__exponent+0x4c>
 8009576:	3130      	adds	r1, #48	; 0x30
 8009578:	3b02      	subs	r3, #2
 800957a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800957e:	42bb      	cmp	r3, r7
 8009580:	4622      	mov	r2, r4
 8009582:	d304      	bcc.n	800958e <__exponent+0x50>
 8009584:	1a10      	subs	r0, r2, r0
 8009586:	b003      	add	sp, #12
 8009588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800958a:	4613      	mov	r3, r2
 800958c:	e7e7      	b.n	800955e <__exponent+0x20>
 800958e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009592:	f804 2b01 	strb.w	r2, [r4], #1
 8009596:	e7f2      	b.n	800957e <__exponent+0x40>
 8009598:	2330      	movs	r3, #48	; 0x30
 800959a:	4419      	add	r1, r3
 800959c:	7083      	strb	r3, [r0, #2]
 800959e:	1d02      	adds	r2, r0, #4
 80095a0:	70c1      	strb	r1, [r0, #3]
 80095a2:	e7ef      	b.n	8009584 <__exponent+0x46>

080095a4 <_printf_float>:
 80095a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a8:	b08d      	sub	sp, #52	; 0x34
 80095aa:	460c      	mov	r4, r1
 80095ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80095b0:	4616      	mov	r6, r2
 80095b2:	461f      	mov	r7, r3
 80095b4:	4605      	mov	r5, r0
 80095b6:	f002 fe07 	bl	800c1c8 <_localeconv_r>
 80095ba:	6803      	ldr	r3, [r0, #0]
 80095bc:	9304      	str	r3, [sp, #16]
 80095be:	4618      	mov	r0, r3
 80095c0:	f7f6 fe16 	bl	80001f0 <strlen>
 80095c4:	2300      	movs	r3, #0
 80095c6:	930a      	str	r3, [sp, #40]	; 0x28
 80095c8:	f8d8 3000 	ldr.w	r3, [r8]
 80095cc:	9005      	str	r0, [sp, #20]
 80095ce:	3307      	adds	r3, #7
 80095d0:	f023 0307 	bic.w	r3, r3, #7
 80095d4:	f103 0208 	add.w	r2, r3, #8
 80095d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80095dc:	f8d4 b000 	ldr.w	fp, [r4]
 80095e0:	f8c8 2000 	str.w	r2, [r8]
 80095e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80095ec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80095f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095f4:	9307      	str	r3, [sp, #28]
 80095f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80095fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095fe:	4ba7      	ldr	r3, [pc, #668]	; (800989c <_printf_float+0x2f8>)
 8009600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009604:	f7f7 faa2 	bl	8000b4c <__aeabi_dcmpun>
 8009608:	bb70      	cbnz	r0, 8009668 <_printf_float+0xc4>
 800960a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800960e:	4ba3      	ldr	r3, [pc, #652]	; (800989c <_printf_float+0x2f8>)
 8009610:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009614:	f7f7 fa7c 	bl	8000b10 <__aeabi_dcmple>
 8009618:	bb30      	cbnz	r0, 8009668 <_printf_float+0xc4>
 800961a:	2200      	movs	r2, #0
 800961c:	2300      	movs	r3, #0
 800961e:	4640      	mov	r0, r8
 8009620:	4649      	mov	r1, r9
 8009622:	f7f7 fa6b 	bl	8000afc <__aeabi_dcmplt>
 8009626:	b110      	cbz	r0, 800962e <_printf_float+0x8a>
 8009628:	232d      	movs	r3, #45	; 0x2d
 800962a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800962e:	4a9c      	ldr	r2, [pc, #624]	; (80098a0 <_printf_float+0x2fc>)
 8009630:	4b9c      	ldr	r3, [pc, #624]	; (80098a4 <_printf_float+0x300>)
 8009632:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009636:	bf8c      	ite	hi
 8009638:	4690      	movhi	r8, r2
 800963a:	4698      	movls	r8, r3
 800963c:	2303      	movs	r3, #3
 800963e:	f02b 0204 	bic.w	r2, fp, #4
 8009642:	6123      	str	r3, [r4, #16]
 8009644:	6022      	str	r2, [r4, #0]
 8009646:	f04f 0900 	mov.w	r9, #0
 800964a:	9700      	str	r7, [sp, #0]
 800964c:	4633      	mov	r3, r6
 800964e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009650:	4621      	mov	r1, r4
 8009652:	4628      	mov	r0, r5
 8009654:	f000 f9e6 	bl	8009a24 <_printf_common>
 8009658:	3001      	adds	r0, #1
 800965a:	f040 808d 	bne.w	8009778 <_printf_float+0x1d4>
 800965e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009662:	b00d      	add	sp, #52	; 0x34
 8009664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009668:	4642      	mov	r2, r8
 800966a:	464b      	mov	r3, r9
 800966c:	4640      	mov	r0, r8
 800966e:	4649      	mov	r1, r9
 8009670:	f7f7 fa6c 	bl	8000b4c <__aeabi_dcmpun>
 8009674:	b110      	cbz	r0, 800967c <_printf_float+0xd8>
 8009676:	4a8c      	ldr	r2, [pc, #560]	; (80098a8 <_printf_float+0x304>)
 8009678:	4b8c      	ldr	r3, [pc, #560]	; (80098ac <_printf_float+0x308>)
 800967a:	e7da      	b.n	8009632 <_printf_float+0x8e>
 800967c:	6861      	ldr	r1, [r4, #4]
 800967e:	1c4b      	adds	r3, r1, #1
 8009680:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8009684:	a80a      	add	r0, sp, #40	; 0x28
 8009686:	d13e      	bne.n	8009706 <_printf_float+0x162>
 8009688:	2306      	movs	r3, #6
 800968a:	6063      	str	r3, [r4, #4]
 800968c:	2300      	movs	r3, #0
 800968e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009692:	ab09      	add	r3, sp, #36	; 0x24
 8009694:	9300      	str	r3, [sp, #0]
 8009696:	ec49 8b10 	vmov	d0, r8, r9
 800969a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800969e:	6022      	str	r2, [r4, #0]
 80096a0:	f8cd a004 	str.w	sl, [sp, #4]
 80096a4:	6861      	ldr	r1, [r4, #4]
 80096a6:	4628      	mov	r0, r5
 80096a8:	f7ff fee8 	bl	800947c <__cvt>
 80096ac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80096b0:	2b47      	cmp	r3, #71	; 0x47
 80096b2:	4680      	mov	r8, r0
 80096b4:	d109      	bne.n	80096ca <_printf_float+0x126>
 80096b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b8:	1cd8      	adds	r0, r3, #3
 80096ba:	db02      	blt.n	80096c2 <_printf_float+0x11e>
 80096bc:	6862      	ldr	r2, [r4, #4]
 80096be:	4293      	cmp	r3, r2
 80096c0:	dd47      	ble.n	8009752 <_printf_float+0x1ae>
 80096c2:	f1aa 0a02 	sub.w	sl, sl, #2
 80096c6:	fa5f fa8a 	uxtb.w	sl, sl
 80096ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80096ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096d0:	d824      	bhi.n	800971c <_printf_float+0x178>
 80096d2:	3901      	subs	r1, #1
 80096d4:	4652      	mov	r2, sl
 80096d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096da:	9109      	str	r1, [sp, #36]	; 0x24
 80096dc:	f7ff ff2f 	bl	800953e <__exponent>
 80096e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096e2:	1813      	adds	r3, r2, r0
 80096e4:	2a01      	cmp	r2, #1
 80096e6:	4681      	mov	r9, r0
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	dc02      	bgt.n	80096f2 <_printf_float+0x14e>
 80096ec:	6822      	ldr	r2, [r4, #0]
 80096ee:	07d1      	lsls	r1, r2, #31
 80096f0:	d501      	bpl.n	80096f6 <_printf_float+0x152>
 80096f2:	3301      	adds	r3, #1
 80096f4:	6123      	str	r3, [r4, #16]
 80096f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0a5      	beq.n	800964a <_printf_float+0xa6>
 80096fe:	232d      	movs	r3, #45	; 0x2d
 8009700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009704:	e7a1      	b.n	800964a <_printf_float+0xa6>
 8009706:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800970a:	f000 8177 	beq.w	80099fc <_printf_float+0x458>
 800970e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8009712:	d1bb      	bne.n	800968c <_printf_float+0xe8>
 8009714:	2900      	cmp	r1, #0
 8009716:	d1b9      	bne.n	800968c <_printf_float+0xe8>
 8009718:	2301      	movs	r3, #1
 800971a:	e7b6      	b.n	800968a <_printf_float+0xe6>
 800971c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009720:	d119      	bne.n	8009756 <_printf_float+0x1b2>
 8009722:	2900      	cmp	r1, #0
 8009724:	6863      	ldr	r3, [r4, #4]
 8009726:	dd0c      	ble.n	8009742 <_printf_float+0x19e>
 8009728:	6121      	str	r1, [r4, #16]
 800972a:	b913      	cbnz	r3, 8009732 <_printf_float+0x18e>
 800972c:	6822      	ldr	r2, [r4, #0]
 800972e:	07d2      	lsls	r2, r2, #31
 8009730:	d502      	bpl.n	8009738 <_printf_float+0x194>
 8009732:	3301      	adds	r3, #1
 8009734:	440b      	add	r3, r1
 8009736:	6123      	str	r3, [r4, #16]
 8009738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800973a:	65a3      	str	r3, [r4, #88]	; 0x58
 800973c:	f04f 0900 	mov.w	r9, #0
 8009740:	e7d9      	b.n	80096f6 <_printf_float+0x152>
 8009742:	b913      	cbnz	r3, 800974a <_printf_float+0x1a6>
 8009744:	6822      	ldr	r2, [r4, #0]
 8009746:	07d0      	lsls	r0, r2, #31
 8009748:	d501      	bpl.n	800974e <_printf_float+0x1aa>
 800974a:	3302      	adds	r3, #2
 800974c:	e7f3      	b.n	8009736 <_printf_float+0x192>
 800974e:	2301      	movs	r3, #1
 8009750:	e7f1      	b.n	8009736 <_printf_float+0x192>
 8009752:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8009756:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800975a:	4293      	cmp	r3, r2
 800975c:	db05      	blt.n	800976a <_printf_float+0x1c6>
 800975e:	6822      	ldr	r2, [r4, #0]
 8009760:	6123      	str	r3, [r4, #16]
 8009762:	07d1      	lsls	r1, r2, #31
 8009764:	d5e8      	bpl.n	8009738 <_printf_float+0x194>
 8009766:	3301      	adds	r3, #1
 8009768:	e7e5      	b.n	8009736 <_printf_float+0x192>
 800976a:	2b00      	cmp	r3, #0
 800976c:	bfd4      	ite	le
 800976e:	f1c3 0302 	rsble	r3, r3, #2
 8009772:	2301      	movgt	r3, #1
 8009774:	4413      	add	r3, r2
 8009776:	e7de      	b.n	8009736 <_printf_float+0x192>
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	055a      	lsls	r2, r3, #21
 800977c:	d407      	bmi.n	800978e <_printf_float+0x1ea>
 800977e:	6923      	ldr	r3, [r4, #16]
 8009780:	4642      	mov	r2, r8
 8009782:	4631      	mov	r1, r6
 8009784:	4628      	mov	r0, r5
 8009786:	47b8      	blx	r7
 8009788:	3001      	adds	r0, #1
 800978a:	d12b      	bne.n	80097e4 <_printf_float+0x240>
 800978c:	e767      	b.n	800965e <_printf_float+0xba>
 800978e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009792:	f240 80dc 	bls.w	800994e <_printf_float+0x3aa>
 8009796:	2200      	movs	r2, #0
 8009798:	2300      	movs	r3, #0
 800979a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800979e:	f7f7 f9a3 	bl	8000ae8 <__aeabi_dcmpeq>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	d033      	beq.n	800980e <_printf_float+0x26a>
 80097a6:	2301      	movs	r3, #1
 80097a8:	4a41      	ldr	r2, [pc, #260]	; (80098b0 <_printf_float+0x30c>)
 80097aa:	4631      	mov	r1, r6
 80097ac:	4628      	mov	r0, r5
 80097ae:	47b8      	blx	r7
 80097b0:	3001      	adds	r0, #1
 80097b2:	f43f af54 	beq.w	800965e <_printf_float+0xba>
 80097b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097ba:	429a      	cmp	r2, r3
 80097bc:	db02      	blt.n	80097c4 <_printf_float+0x220>
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	07d8      	lsls	r0, r3, #31
 80097c2:	d50f      	bpl.n	80097e4 <_printf_float+0x240>
 80097c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097c8:	4631      	mov	r1, r6
 80097ca:	4628      	mov	r0, r5
 80097cc:	47b8      	blx	r7
 80097ce:	3001      	adds	r0, #1
 80097d0:	f43f af45 	beq.w	800965e <_printf_float+0xba>
 80097d4:	f04f 0800 	mov.w	r8, #0
 80097d8:	f104 091a 	add.w	r9, r4, #26
 80097dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097de:	3b01      	subs	r3, #1
 80097e0:	4543      	cmp	r3, r8
 80097e2:	dc09      	bgt.n	80097f8 <_printf_float+0x254>
 80097e4:	6823      	ldr	r3, [r4, #0]
 80097e6:	079b      	lsls	r3, r3, #30
 80097e8:	f100 8103 	bmi.w	80099f2 <_printf_float+0x44e>
 80097ec:	68e0      	ldr	r0, [r4, #12]
 80097ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097f0:	4298      	cmp	r0, r3
 80097f2:	bfb8      	it	lt
 80097f4:	4618      	movlt	r0, r3
 80097f6:	e734      	b.n	8009662 <_printf_float+0xbe>
 80097f8:	2301      	movs	r3, #1
 80097fa:	464a      	mov	r2, r9
 80097fc:	4631      	mov	r1, r6
 80097fe:	4628      	mov	r0, r5
 8009800:	47b8      	blx	r7
 8009802:	3001      	adds	r0, #1
 8009804:	f43f af2b 	beq.w	800965e <_printf_float+0xba>
 8009808:	f108 0801 	add.w	r8, r8, #1
 800980c:	e7e6      	b.n	80097dc <_printf_float+0x238>
 800980e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009810:	2b00      	cmp	r3, #0
 8009812:	dc2b      	bgt.n	800986c <_printf_float+0x2c8>
 8009814:	2301      	movs	r3, #1
 8009816:	4a26      	ldr	r2, [pc, #152]	; (80098b0 <_printf_float+0x30c>)
 8009818:	4631      	mov	r1, r6
 800981a:	4628      	mov	r0, r5
 800981c:	47b8      	blx	r7
 800981e:	3001      	adds	r0, #1
 8009820:	f43f af1d 	beq.w	800965e <_printf_float+0xba>
 8009824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009826:	b923      	cbnz	r3, 8009832 <_printf_float+0x28e>
 8009828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800982a:	b913      	cbnz	r3, 8009832 <_printf_float+0x28e>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	07d9      	lsls	r1, r3, #31
 8009830:	d5d8      	bpl.n	80097e4 <_printf_float+0x240>
 8009832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009836:	4631      	mov	r1, r6
 8009838:	4628      	mov	r0, r5
 800983a:	47b8      	blx	r7
 800983c:	3001      	adds	r0, #1
 800983e:	f43f af0e 	beq.w	800965e <_printf_float+0xba>
 8009842:	f04f 0900 	mov.w	r9, #0
 8009846:	f104 0a1a 	add.w	sl, r4, #26
 800984a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800984c:	425b      	negs	r3, r3
 800984e:	454b      	cmp	r3, r9
 8009850:	dc01      	bgt.n	8009856 <_printf_float+0x2b2>
 8009852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009854:	e794      	b.n	8009780 <_printf_float+0x1dc>
 8009856:	2301      	movs	r3, #1
 8009858:	4652      	mov	r2, sl
 800985a:	4631      	mov	r1, r6
 800985c:	4628      	mov	r0, r5
 800985e:	47b8      	blx	r7
 8009860:	3001      	adds	r0, #1
 8009862:	f43f aefc 	beq.w	800965e <_printf_float+0xba>
 8009866:	f109 0901 	add.w	r9, r9, #1
 800986a:	e7ee      	b.n	800984a <_printf_float+0x2a6>
 800986c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800986e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009870:	429a      	cmp	r2, r3
 8009872:	bfa8      	it	ge
 8009874:	461a      	movge	r2, r3
 8009876:	2a00      	cmp	r2, #0
 8009878:	4691      	mov	r9, r2
 800987a:	dd07      	ble.n	800988c <_printf_float+0x2e8>
 800987c:	4613      	mov	r3, r2
 800987e:	4631      	mov	r1, r6
 8009880:	4642      	mov	r2, r8
 8009882:	4628      	mov	r0, r5
 8009884:	47b8      	blx	r7
 8009886:	3001      	adds	r0, #1
 8009888:	f43f aee9 	beq.w	800965e <_printf_float+0xba>
 800988c:	f104 031a 	add.w	r3, r4, #26
 8009890:	f04f 0b00 	mov.w	fp, #0
 8009894:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009898:	9306      	str	r3, [sp, #24]
 800989a:	e015      	b.n	80098c8 <_printf_float+0x324>
 800989c:	7fefffff 	.word	0x7fefffff
 80098a0:	0800f31c 	.word	0x0800f31c
 80098a4:	0800f318 	.word	0x0800f318
 80098a8:	0800f324 	.word	0x0800f324
 80098ac:	0800f320 	.word	0x0800f320
 80098b0:	0800f328 	.word	0x0800f328
 80098b4:	2301      	movs	r3, #1
 80098b6:	9a06      	ldr	r2, [sp, #24]
 80098b8:	4631      	mov	r1, r6
 80098ba:	4628      	mov	r0, r5
 80098bc:	47b8      	blx	r7
 80098be:	3001      	adds	r0, #1
 80098c0:	f43f aecd 	beq.w	800965e <_printf_float+0xba>
 80098c4:	f10b 0b01 	add.w	fp, fp, #1
 80098c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80098cc:	ebaa 0309 	sub.w	r3, sl, r9
 80098d0:	455b      	cmp	r3, fp
 80098d2:	dcef      	bgt.n	80098b4 <_printf_float+0x310>
 80098d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098d8:	429a      	cmp	r2, r3
 80098da:	44d0      	add	r8, sl
 80098dc:	db15      	blt.n	800990a <_printf_float+0x366>
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	07da      	lsls	r2, r3, #31
 80098e2:	d412      	bmi.n	800990a <_printf_float+0x366>
 80098e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098e8:	eba3 020a 	sub.w	r2, r3, sl
 80098ec:	eba3 0a01 	sub.w	sl, r3, r1
 80098f0:	4592      	cmp	sl, r2
 80098f2:	bfa8      	it	ge
 80098f4:	4692      	movge	sl, r2
 80098f6:	f1ba 0f00 	cmp.w	sl, #0
 80098fa:	dc0e      	bgt.n	800991a <_printf_float+0x376>
 80098fc:	f04f 0800 	mov.w	r8, #0
 8009900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009904:	f104 091a 	add.w	r9, r4, #26
 8009908:	e019      	b.n	800993e <_printf_float+0x39a>
 800990a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800990e:	4631      	mov	r1, r6
 8009910:	4628      	mov	r0, r5
 8009912:	47b8      	blx	r7
 8009914:	3001      	adds	r0, #1
 8009916:	d1e5      	bne.n	80098e4 <_printf_float+0x340>
 8009918:	e6a1      	b.n	800965e <_printf_float+0xba>
 800991a:	4653      	mov	r3, sl
 800991c:	4642      	mov	r2, r8
 800991e:	4631      	mov	r1, r6
 8009920:	4628      	mov	r0, r5
 8009922:	47b8      	blx	r7
 8009924:	3001      	adds	r0, #1
 8009926:	d1e9      	bne.n	80098fc <_printf_float+0x358>
 8009928:	e699      	b.n	800965e <_printf_float+0xba>
 800992a:	2301      	movs	r3, #1
 800992c:	464a      	mov	r2, r9
 800992e:	4631      	mov	r1, r6
 8009930:	4628      	mov	r0, r5
 8009932:	47b8      	blx	r7
 8009934:	3001      	adds	r0, #1
 8009936:	f43f ae92 	beq.w	800965e <_printf_float+0xba>
 800993a:	f108 0801 	add.w	r8, r8, #1
 800993e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	eba3 030a 	sub.w	r3, r3, sl
 8009948:	4543      	cmp	r3, r8
 800994a:	dcee      	bgt.n	800992a <_printf_float+0x386>
 800994c:	e74a      	b.n	80097e4 <_printf_float+0x240>
 800994e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009950:	2a01      	cmp	r2, #1
 8009952:	dc01      	bgt.n	8009958 <_printf_float+0x3b4>
 8009954:	07db      	lsls	r3, r3, #31
 8009956:	d53a      	bpl.n	80099ce <_printf_float+0x42a>
 8009958:	2301      	movs	r3, #1
 800995a:	4642      	mov	r2, r8
 800995c:	4631      	mov	r1, r6
 800995e:	4628      	mov	r0, r5
 8009960:	47b8      	blx	r7
 8009962:	3001      	adds	r0, #1
 8009964:	f43f ae7b 	beq.w	800965e <_printf_float+0xba>
 8009968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800996c:	4631      	mov	r1, r6
 800996e:	4628      	mov	r0, r5
 8009970:	47b8      	blx	r7
 8009972:	3001      	adds	r0, #1
 8009974:	f108 0801 	add.w	r8, r8, #1
 8009978:	f43f ae71 	beq.w	800965e <_printf_float+0xba>
 800997c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800997e:	2200      	movs	r2, #0
 8009980:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8009984:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009988:	2300      	movs	r3, #0
 800998a:	f7f7 f8ad 	bl	8000ae8 <__aeabi_dcmpeq>
 800998e:	b9c8      	cbnz	r0, 80099c4 <_printf_float+0x420>
 8009990:	4653      	mov	r3, sl
 8009992:	4642      	mov	r2, r8
 8009994:	4631      	mov	r1, r6
 8009996:	4628      	mov	r0, r5
 8009998:	47b8      	blx	r7
 800999a:	3001      	adds	r0, #1
 800999c:	d10e      	bne.n	80099bc <_printf_float+0x418>
 800999e:	e65e      	b.n	800965e <_printf_float+0xba>
 80099a0:	2301      	movs	r3, #1
 80099a2:	4652      	mov	r2, sl
 80099a4:	4631      	mov	r1, r6
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b8      	blx	r7
 80099aa:	3001      	adds	r0, #1
 80099ac:	f43f ae57 	beq.w	800965e <_printf_float+0xba>
 80099b0:	f108 0801 	add.w	r8, r8, #1
 80099b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099b6:	3b01      	subs	r3, #1
 80099b8:	4543      	cmp	r3, r8
 80099ba:	dcf1      	bgt.n	80099a0 <_printf_float+0x3fc>
 80099bc:	464b      	mov	r3, r9
 80099be:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80099c2:	e6de      	b.n	8009782 <_printf_float+0x1de>
 80099c4:	f04f 0800 	mov.w	r8, #0
 80099c8:	f104 0a1a 	add.w	sl, r4, #26
 80099cc:	e7f2      	b.n	80099b4 <_printf_float+0x410>
 80099ce:	2301      	movs	r3, #1
 80099d0:	e7df      	b.n	8009992 <_printf_float+0x3ee>
 80099d2:	2301      	movs	r3, #1
 80099d4:	464a      	mov	r2, r9
 80099d6:	4631      	mov	r1, r6
 80099d8:	4628      	mov	r0, r5
 80099da:	47b8      	blx	r7
 80099dc:	3001      	adds	r0, #1
 80099de:	f43f ae3e 	beq.w	800965e <_printf_float+0xba>
 80099e2:	f108 0801 	add.w	r8, r8, #1
 80099e6:	68e3      	ldr	r3, [r4, #12]
 80099e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80099ea:	1a9b      	subs	r3, r3, r2
 80099ec:	4543      	cmp	r3, r8
 80099ee:	dcf0      	bgt.n	80099d2 <_printf_float+0x42e>
 80099f0:	e6fc      	b.n	80097ec <_printf_float+0x248>
 80099f2:	f04f 0800 	mov.w	r8, #0
 80099f6:	f104 0919 	add.w	r9, r4, #25
 80099fa:	e7f4      	b.n	80099e6 <_printf_float+0x442>
 80099fc:	2900      	cmp	r1, #0
 80099fe:	f43f ae8b 	beq.w	8009718 <_printf_float+0x174>
 8009a02:	2300      	movs	r3, #0
 8009a04:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009a08:	ab09      	add	r3, sp, #36	; 0x24
 8009a0a:	9300      	str	r3, [sp, #0]
 8009a0c:	ec49 8b10 	vmov	d0, r8, r9
 8009a10:	6022      	str	r2, [r4, #0]
 8009a12:	f8cd a004 	str.w	sl, [sp, #4]
 8009a16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a1a:	4628      	mov	r0, r5
 8009a1c:	f7ff fd2e 	bl	800947c <__cvt>
 8009a20:	4680      	mov	r8, r0
 8009a22:	e648      	b.n	80096b6 <_printf_float+0x112>

08009a24 <_printf_common>:
 8009a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a28:	4691      	mov	r9, r2
 8009a2a:	461f      	mov	r7, r3
 8009a2c:	688a      	ldr	r2, [r1, #8]
 8009a2e:	690b      	ldr	r3, [r1, #16]
 8009a30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a34:	4293      	cmp	r3, r2
 8009a36:	bfb8      	it	lt
 8009a38:	4613      	movlt	r3, r2
 8009a3a:	f8c9 3000 	str.w	r3, [r9]
 8009a3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a42:	4606      	mov	r6, r0
 8009a44:	460c      	mov	r4, r1
 8009a46:	b112      	cbz	r2, 8009a4e <_printf_common+0x2a>
 8009a48:	3301      	adds	r3, #1
 8009a4a:	f8c9 3000 	str.w	r3, [r9]
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	0699      	lsls	r1, r3, #26
 8009a52:	bf42      	ittt	mi
 8009a54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009a58:	3302      	addmi	r3, #2
 8009a5a:	f8c9 3000 	strmi.w	r3, [r9]
 8009a5e:	6825      	ldr	r5, [r4, #0]
 8009a60:	f015 0506 	ands.w	r5, r5, #6
 8009a64:	d107      	bne.n	8009a76 <_printf_common+0x52>
 8009a66:	f104 0a19 	add.w	sl, r4, #25
 8009a6a:	68e3      	ldr	r3, [r4, #12]
 8009a6c:	f8d9 2000 	ldr.w	r2, [r9]
 8009a70:	1a9b      	subs	r3, r3, r2
 8009a72:	42ab      	cmp	r3, r5
 8009a74:	dc28      	bgt.n	8009ac8 <_printf_common+0xa4>
 8009a76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009a7a:	6822      	ldr	r2, [r4, #0]
 8009a7c:	3300      	adds	r3, #0
 8009a7e:	bf18      	it	ne
 8009a80:	2301      	movne	r3, #1
 8009a82:	0692      	lsls	r2, r2, #26
 8009a84:	d42d      	bmi.n	8009ae2 <_printf_common+0xbe>
 8009a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	47c0      	blx	r8
 8009a90:	3001      	adds	r0, #1
 8009a92:	d020      	beq.n	8009ad6 <_printf_common+0xb2>
 8009a94:	6823      	ldr	r3, [r4, #0]
 8009a96:	68e5      	ldr	r5, [r4, #12]
 8009a98:	f8d9 2000 	ldr.w	r2, [r9]
 8009a9c:	f003 0306 	and.w	r3, r3, #6
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	bf08      	it	eq
 8009aa4:	1aad      	subeq	r5, r5, r2
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	6922      	ldr	r2, [r4, #16]
 8009aaa:	bf0c      	ite	eq
 8009aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab0:	2500      	movne	r5, #0
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	bfc4      	itt	gt
 8009ab6:	1a9b      	subgt	r3, r3, r2
 8009ab8:	18ed      	addgt	r5, r5, r3
 8009aba:	f04f 0900 	mov.w	r9, #0
 8009abe:	341a      	adds	r4, #26
 8009ac0:	454d      	cmp	r5, r9
 8009ac2:	d11a      	bne.n	8009afa <_printf_common+0xd6>
 8009ac4:	2000      	movs	r0, #0
 8009ac6:	e008      	b.n	8009ada <_printf_common+0xb6>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	4652      	mov	r2, sl
 8009acc:	4639      	mov	r1, r7
 8009ace:	4630      	mov	r0, r6
 8009ad0:	47c0      	blx	r8
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d103      	bne.n	8009ade <_printf_common+0xba>
 8009ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ade:	3501      	adds	r5, #1
 8009ae0:	e7c3      	b.n	8009a6a <_printf_common+0x46>
 8009ae2:	18e1      	adds	r1, r4, r3
 8009ae4:	1c5a      	adds	r2, r3, #1
 8009ae6:	2030      	movs	r0, #48	; 0x30
 8009ae8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aec:	4422      	add	r2, r4
 8009aee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009af2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009af6:	3302      	adds	r3, #2
 8009af8:	e7c5      	b.n	8009a86 <_printf_common+0x62>
 8009afa:	2301      	movs	r3, #1
 8009afc:	4622      	mov	r2, r4
 8009afe:	4639      	mov	r1, r7
 8009b00:	4630      	mov	r0, r6
 8009b02:	47c0      	blx	r8
 8009b04:	3001      	adds	r0, #1
 8009b06:	d0e6      	beq.n	8009ad6 <_printf_common+0xb2>
 8009b08:	f109 0901 	add.w	r9, r9, #1
 8009b0c:	e7d8      	b.n	8009ac0 <_printf_common+0x9c>
	...

08009b10 <_printf_i>:
 8009b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009b18:	460c      	mov	r4, r1
 8009b1a:	7e09      	ldrb	r1, [r1, #24]
 8009b1c:	b085      	sub	sp, #20
 8009b1e:	296e      	cmp	r1, #110	; 0x6e
 8009b20:	4617      	mov	r7, r2
 8009b22:	4606      	mov	r6, r0
 8009b24:	4698      	mov	r8, r3
 8009b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b28:	f000 80b3 	beq.w	8009c92 <_printf_i+0x182>
 8009b2c:	d822      	bhi.n	8009b74 <_printf_i+0x64>
 8009b2e:	2963      	cmp	r1, #99	; 0x63
 8009b30:	d036      	beq.n	8009ba0 <_printf_i+0x90>
 8009b32:	d80a      	bhi.n	8009b4a <_printf_i+0x3a>
 8009b34:	2900      	cmp	r1, #0
 8009b36:	f000 80b9 	beq.w	8009cac <_printf_i+0x19c>
 8009b3a:	2958      	cmp	r1, #88	; 0x58
 8009b3c:	f000 8083 	beq.w	8009c46 <_printf_i+0x136>
 8009b40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009b48:	e032      	b.n	8009bb0 <_printf_i+0xa0>
 8009b4a:	2964      	cmp	r1, #100	; 0x64
 8009b4c:	d001      	beq.n	8009b52 <_printf_i+0x42>
 8009b4e:	2969      	cmp	r1, #105	; 0x69
 8009b50:	d1f6      	bne.n	8009b40 <_printf_i+0x30>
 8009b52:	6820      	ldr	r0, [r4, #0]
 8009b54:	6813      	ldr	r3, [r2, #0]
 8009b56:	0605      	lsls	r5, r0, #24
 8009b58:	f103 0104 	add.w	r1, r3, #4
 8009b5c:	d52a      	bpl.n	8009bb4 <_printf_i+0xa4>
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6011      	str	r1, [r2, #0]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	da03      	bge.n	8009b6e <_printf_i+0x5e>
 8009b66:	222d      	movs	r2, #45	; 0x2d
 8009b68:	425b      	negs	r3, r3
 8009b6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009b6e:	486f      	ldr	r0, [pc, #444]	; (8009d2c <_printf_i+0x21c>)
 8009b70:	220a      	movs	r2, #10
 8009b72:	e039      	b.n	8009be8 <_printf_i+0xd8>
 8009b74:	2973      	cmp	r1, #115	; 0x73
 8009b76:	f000 809d 	beq.w	8009cb4 <_printf_i+0x1a4>
 8009b7a:	d808      	bhi.n	8009b8e <_printf_i+0x7e>
 8009b7c:	296f      	cmp	r1, #111	; 0x6f
 8009b7e:	d020      	beq.n	8009bc2 <_printf_i+0xb2>
 8009b80:	2970      	cmp	r1, #112	; 0x70
 8009b82:	d1dd      	bne.n	8009b40 <_printf_i+0x30>
 8009b84:	6823      	ldr	r3, [r4, #0]
 8009b86:	f043 0320 	orr.w	r3, r3, #32
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	e003      	b.n	8009b96 <_printf_i+0x86>
 8009b8e:	2975      	cmp	r1, #117	; 0x75
 8009b90:	d017      	beq.n	8009bc2 <_printf_i+0xb2>
 8009b92:	2978      	cmp	r1, #120	; 0x78
 8009b94:	d1d4      	bne.n	8009b40 <_printf_i+0x30>
 8009b96:	2378      	movs	r3, #120	; 0x78
 8009b98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b9c:	4864      	ldr	r0, [pc, #400]	; (8009d30 <_printf_i+0x220>)
 8009b9e:	e055      	b.n	8009c4c <_printf_i+0x13c>
 8009ba0:	6813      	ldr	r3, [r2, #0]
 8009ba2:	1d19      	adds	r1, r3, #4
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	6011      	str	r1, [r2, #0]
 8009ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e08c      	b.n	8009cce <_printf_i+0x1be>
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	6011      	str	r1, [r2, #0]
 8009bb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009bbc:	bf18      	it	ne
 8009bbe:	b21b      	sxthne	r3, r3
 8009bc0:	e7cf      	b.n	8009b62 <_printf_i+0x52>
 8009bc2:	6813      	ldr	r3, [r2, #0]
 8009bc4:	6825      	ldr	r5, [r4, #0]
 8009bc6:	1d18      	adds	r0, r3, #4
 8009bc8:	6010      	str	r0, [r2, #0]
 8009bca:	0628      	lsls	r0, r5, #24
 8009bcc:	d501      	bpl.n	8009bd2 <_printf_i+0xc2>
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	e002      	b.n	8009bd8 <_printf_i+0xc8>
 8009bd2:	0668      	lsls	r0, r5, #25
 8009bd4:	d5fb      	bpl.n	8009bce <_printf_i+0xbe>
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	4854      	ldr	r0, [pc, #336]	; (8009d2c <_printf_i+0x21c>)
 8009bda:	296f      	cmp	r1, #111	; 0x6f
 8009bdc:	bf14      	ite	ne
 8009bde:	220a      	movne	r2, #10
 8009be0:	2208      	moveq	r2, #8
 8009be2:	2100      	movs	r1, #0
 8009be4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009be8:	6865      	ldr	r5, [r4, #4]
 8009bea:	60a5      	str	r5, [r4, #8]
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	f2c0 8095 	blt.w	8009d1c <_printf_i+0x20c>
 8009bf2:	6821      	ldr	r1, [r4, #0]
 8009bf4:	f021 0104 	bic.w	r1, r1, #4
 8009bf8:	6021      	str	r1, [r4, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d13d      	bne.n	8009c7a <_printf_i+0x16a>
 8009bfe:	2d00      	cmp	r5, #0
 8009c00:	f040 808e 	bne.w	8009d20 <_printf_i+0x210>
 8009c04:	4665      	mov	r5, ip
 8009c06:	2a08      	cmp	r2, #8
 8009c08:	d10b      	bne.n	8009c22 <_printf_i+0x112>
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	07db      	lsls	r3, r3, #31
 8009c0e:	d508      	bpl.n	8009c22 <_printf_i+0x112>
 8009c10:	6923      	ldr	r3, [r4, #16]
 8009c12:	6862      	ldr	r2, [r4, #4]
 8009c14:	429a      	cmp	r2, r3
 8009c16:	bfde      	ittt	le
 8009c18:	2330      	movle	r3, #48	; 0x30
 8009c1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c1e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009c22:	ebac 0305 	sub.w	r3, ip, r5
 8009c26:	6123      	str	r3, [r4, #16]
 8009c28:	f8cd 8000 	str.w	r8, [sp]
 8009c2c:	463b      	mov	r3, r7
 8009c2e:	aa03      	add	r2, sp, #12
 8009c30:	4621      	mov	r1, r4
 8009c32:	4630      	mov	r0, r6
 8009c34:	f7ff fef6 	bl	8009a24 <_printf_common>
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d14d      	bne.n	8009cd8 <_printf_i+0x1c8>
 8009c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c40:	b005      	add	sp, #20
 8009c42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c46:	4839      	ldr	r0, [pc, #228]	; (8009d2c <_printf_i+0x21c>)
 8009c48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009c4c:	6813      	ldr	r3, [r2, #0]
 8009c4e:	6821      	ldr	r1, [r4, #0]
 8009c50:	1d1d      	adds	r5, r3, #4
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6015      	str	r5, [r2, #0]
 8009c56:	060a      	lsls	r2, r1, #24
 8009c58:	d50b      	bpl.n	8009c72 <_printf_i+0x162>
 8009c5a:	07ca      	lsls	r2, r1, #31
 8009c5c:	bf44      	itt	mi
 8009c5e:	f041 0120 	orrmi.w	r1, r1, #32
 8009c62:	6021      	strmi	r1, [r4, #0]
 8009c64:	b91b      	cbnz	r3, 8009c6e <_printf_i+0x15e>
 8009c66:	6822      	ldr	r2, [r4, #0]
 8009c68:	f022 0220 	bic.w	r2, r2, #32
 8009c6c:	6022      	str	r2, [r4, #0]
 8009c6e:	2210      	movs	r2, #16
 8009c70:	e7b7      	b.n	8009be2 <_printf_i+0xd2>
 8009c72:	064d      	lsls	r5, r1, #25
 8009c74:	bf48      	it	mi
 8009c76:	b29b      	uxthmi	r3, r3
 8009c78:	e7ef      	b.n	8009c5a <_printf_i+0x14a>
 8009c7a:	4665      	mov	r5, ip
 8009c7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c80:	fb02 3311 	mls	r3, r2, r1, r3
 8009c84:	5cc3      	ldrb	r3, [r0, r3]
 8009c86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	2900      	cmp	r1, #0
 8009c8e:	d1f5      	bne.n	8009c7c <_printf_i+0x16c>
 8009c90:	e7b9      	b.n	8009c06 <_printf_i+0xf6>
 8009c92:	6813      	ldr	r3, [r2, #0]
 8009c94:	6825      	ldr	r5, [r4, #0]
 8009c96:	6961      	ldr	r1, [r4, #20]
 8009c98:	1d18      	adds	r0, r3, #4
 8009c9a:	6010      	str	r0, [r2, #0]
 8009c9c:	0628      	lsls	r0, r5, #24
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	d501      	bpl.n	8009ca6 <_printf_i+0x196>
 8009ca2:	6019      	str	r1, [r3, #0]
 8009ca4:	e002      	b.n	8009cac <_printf_i+0x19c>
 8009ca6:	066a      	lsls	r2, r5, #25
 8009ca8:	d5fb      	bpl.n	8009ca2 <_printf_i+0x192>
 8009caa:	8019      	strh	r1, [r3, #0]
 8009cac:	2300      	movs	r3, #0
 8009cae:	6123      	str	r3, [r4, #16]
 8009cb0:	4665      	mov	r5, ip
 8009cb2:	e7b9      	b.n	8009c28 <_printf_i+0x118>
 8009cb4:	6813      	ldr	r3, [r2, #0]
 8009cb6:	1d19      	adds	r1, r3, #4
 8009cb8:	6011      	str	r1, [r2, #0]
 8009cba:	681d      	ldr	r5, [r3, #0]
 8009cbc:	6862      	ldr	r2, [r4, #4]
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f7f6 fa9d 	bl	8000200 <memchr>
 8009cc6:	b108      	cbz	r0, 8009ccc <_printf_i+0x1bc>
 8009cc8:	1b40      	subs	r0, r0, r5
 8009cca:	6060      	str	r0, [r4, #4]
 8009ccc:	6863      	ldr	r3, [r4, #4]
 8009cce:	6123      	str	r3, [r4, #16]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd6:	e7a7      	b.n	8009c28 <_printf_i+0x118>
 8009cd8:	6923      	ldr	r3, [r4, #16]
 8009cda:	462a      	mov	r2, r5
 8009cdc:	4639      	mov	r1, r7
 8009cde:	4630      	mov	r0, r6
 8009ce0:	47c0      	blx	r8
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	d0aa      	beq.n	8009c3c <_printf_i+0x12c>
 8009ce6:	6823      	ldr	r3, [r4, #0]
 8009ce8:	079b      	lsls	r3, r3, #30
 8009cea:	d413      	bmi.n	8009d14 <_printf_i+0x204>
 8009cec:	68e0      	ldr	r0, [r4, #12]
 8009cee:	9b03      	ldr	r3, [sp, #12]
 8009cf0:	4298      	cmp	r0, r3
 8009cf2:	bfb8      	it	lt
 8009cf4:	4618      	movlt	r0, r3
 8009cf6:	e7a3      	b.n	8009c40 <_printf_i+0x130>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	464a      	mov	r2, r9
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	4630      	mov	r0, r6
 8009d00:	47c0      	blx	r8
 8009d02:	3001      	adds	r0, #1
 8009d04:	d09a      	beq.n	8009c3c <_printf_i+0x12c>
 8009d06:	3501      	adds	r5, #1
 8009d08:	68e3      	ldr	r3, [r4, #12]
 8009d0a:	9a03      	ldr	r2, [sp, #12]
 8009d0c:	1a9b      	subs	r3, r3, r2
 8009d0e:	42ab      	cmp	r3, r5
 8009d10:	dcf2      	bgt.n	8009cf8 <_printf_i+0x1e8>
 8009d12:	e7eb      	b.n	8009cec <_printf_i+0x1dc>
 8009d14:	2500      	movs	r5, #0
 8009d16:	f104 0919 	add.w	r9, r4, #25
 8009d1a:	e7f5      	b.n	8009d08 <_printf_i+0x1f8>
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d1ac      	bne.n	8009c7a <_printf_i+0x16a>
 8009d20:	7803      	ldrb	r3, [r0, #0]
 8009d22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d2a:	e76c      	b.n	8009c06 <_printf_i+0xf6>
 8009d2c:	0800f32a 	.word	0x0800f32a
 8009d30:	0800f33b 	.word	0x0800f33b

08009d34 <_scanf_float>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	469a      	mov	sl, r3
 8009d3a:	688b      	ldr	r3, [r1, #8]
 8009d3c:	4616      	mov	r6, r2
 8009d3e:	1e5a      	subs	r2, r3, #1
 8009d40:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009d44:	b087      	sub	sp, #28
 8009d46:	bf83      	ittte	hi
 8009d48:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8009d4c:	189b      	addhi	r3, r3, r2
 8009d4e:	9301      	strhi	r3, [sp, #4]
 8009d50:	2300      	movls	r3, #0
 8009d52:	bf86      	itte	hi
 8009d54:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009d58:	608b      	strhi	r3, [r1, #8]
 8009d5a:	9301      	strls	r3, [sp, #4]
 8009d5c:	680b      	ldr	r3, [r1, #0]
 8009d5e:	4688      	mov	r8, r1
 8009d60:	f04f 0b00 	mov.w	fp, #0
 8009d64:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009d68:	f848 3b1c 	str.w	r3, [r8], #28
 8009d6c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8009d70:	4607      	mov	r7, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	4645      	mov	r5, r8
 8009d76:	465a      	mov	r2, fp
 8009d78:	46d9      	mov	r9, fp
 8009d7a:	f8cd b008 	str.w	fp, [sp, #8]
 8009d7e:	68a1      	ldr	r1, [r4, #8]
 8009d80:	b181      	cbz	r1, 8009da4 <_scanf_float+0x70>
 8009d82:	6833      	ldr	r3, [r6, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	2b49      	cmp	r3, #73	; 0x49
 8009d88:	d071      	beq.n	8009e6e <_scanf_float+0x13a>
 8009d8a:	d84d      	bhi.n	8009e28 <_scanf_float+0xf4>
 8009d8c:	2b39      	cmp	r3, #57	; 0x39
 8009d8e:	d840      	bhi.n	8009e12 <_scanf_float+0xde>
 8009d90:	2b31      	cmp	r3, #49	; 0x31
 8009d92:	f080 8088 	bcs.w	8009ea6 <_scanf_float+0x172>
 8009d96:	2b2d      	cmp	r3, #45	; 0x2d
 8009d98:	f000 8090 	beq.w	8009ebc <_scanf_float+0x188>
 8009d9c:	d815      	bhi.n	8009dca <_scanf_float+0x96>
 8009d9e:	2b2b      	cmp	r3, #43	; 0x2b
 8009da0:	f000 808c 	beq.w	8009ebc <_scanf_float+0x188>
 8009da4:	f1b9 0f00 	cmp.w	r9, #0
 8009da8:	d003      	beq.n	8009db2 <_scanf_float+0x7e>
 8009daa:	6823      	ldr	r3, [r4, #0]
 8009dac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	3a01      	subs	r2, #1
 8009db4:	2a01      	cmp	r2, #1
 8009db6:	f200 80ea 	bhi.w	8009f8e <_scanf_float+0x25a>
 8009dba:	4545      	cmp	r5, r8
 8009dbc:	f200 80dc 	bhi.w	8009f78 <_scanf_float+0x244>
 8009dc0:	2601      	movs	r6, #1
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	b007      	add	sp, #28
 8009dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	2b2e      	cmp	r3, #46	; 0x2e
 8009dcc:	f000 809f 	beq.w	8009f0e <_scanf_float+0x1da>
 8009dd0:	2b30      	cmp	r3, #48	; 0x30
 8009dd2:	d1e7      	bne.n	8009da4 <_scanf_float+0x70>
 8009dd4:	6820      	ldr	r0, [r4, #0]
 8009dd6:	f410 7f80 	tst.w	r0, #256	; 0x100
 8009dda:	d064      	beq.n	8009ea6 <_scanf_float+0x172>
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8009de2:	6020      	str	r0, [r4, #0]
 8009de4:	f109 0901 	add.w	r9, r9, #1
 8009de8:	b11b      	cbz	r3, 8009df2 <_scanf_float+0xbe>
 8009dea:	3b01      	subs	r3, #1
 8009dec:	3101      	adds	r1, #1
 8009dee:	9301      	str	r3, [sp, #4]
 8009df0:	60a1      	str	r1, [r4, #8]
 8009df2:	68a3      	ldr	r3, [r4, #8]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	60a3      	str	r3, [r4, #8]
 8009df8:	6923      	ldr	r3, [r4, #16]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	6123      	str	r3, [r4, #16]
 8009dfe:	6873      	ldr	r3, [r6, #4]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	6073      	str	r3, [r6, #4]
 8009e06:	f340 80ac 	ble.w	8009f62 <_scanf_float+0x22e>
 8009e0a:	6833      	ldr	r3, [r6, #0]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	6033      	str	r3, [r6, #0]
 8009e10:	e7b5      	b.n	8009d7e <_scanf_float+0x4a>
 8009e12:	2b45      	cmp	r3, #69	; 0x45
 8009e14:	f000 8085 	beq.w	8009f22 <_scanf_float+0x1ee>
 8009e18:	2b46      	cmp	r3, #70	; 0x46
 8009e1a:	d06a      	beq.n	8009ef2 <_scanf_float+0x1be>
 8009e1c:	2b41      	cmp	r3, #65	; 0x41
 8009e1e:	d1c1      	bne.n	8009da4 <_scanf_float+0x70>
 8009e20:	2a01      	cmp	r2, #1
 8009e22:	d1bf      	bne.n	8009da4 <_scanf_float+0x70>
 8009e24:	2202      	movs	r2, #2
 8009e26:	e046      	b.n	8009eb6 <_scanf_float+0x182>
 8009e28:	2b65      	cmp	r3, #101	; 0x65
 8009e2a:	d07a      	beq.n	8009f22 <_scanf_float+0x1ee>
 8009e2c:	d818      	bhi.n	8009e60 <_scanf_float+0x12c>
 8009e2e:	2b54      	cmp	r3, #84	; 0x54
 8009e30:	d066      	beq.n	8009f00 <_scanf_float+0x1cc>
 8009e32:	d811      	bhi.n	8009e58 <_scanf_float+0x124>
 8009e34:	2b4e      	cmp	r3, #78	; 0x4e
 8009e36:	d1b5      	bne.n	8009da4 <_scanf_float+0x70>
 8009e38:	2a00      	cmp	r2, #0
 8009e3a:	d146      	bne.n	8009eca <_scanf_float+0x196>
 8009e3c:	f1b9 0f00 	cmp.w	r9, #0
 8009e40:	d145      	bne.n	8009ece <_scanf_float+0x19a>
 8009e42:	6821      	ldr	r1, [r4, #0]
 8009e44:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009e48:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009e4c:	d13f      	bne.n	8009ece <_scanf_float+0x19a>
 8009e4e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009e52:	6021      	str	r1, [r4, #0]
 8009e54:	2201      	movs	r2, #1
 8009e56:	e02e      	b.n	8009eb6 <_scanf_float+0x182>
 8009e58:	2b59      	cmp	r3, #89	; 0x59
 8009e5a:	d01e      	beq.n	8009e9a <_scanf_float+0x166>
 8009e5c:	2b61      	cmp	r3, #97	; 0x61
 8009e5e:	e7de      	b.n	8009e1e <_scanf_float+0xea>
 8009e60:	2b6e      	cmp	r3, #110	; 0x6e
 8009e62:	d0e9      	beq.n	8009e38 <_scanf_float+0x104>
 8009e64:	d815      	bhi.n	8009e92 <_scanf_float+0x15e>
 8009e66:	2b66      	cmp	r3, #102	; 0x66
 8009e68:	d043      	beq.n	8009ef2 <_scanf_float+0x1be>
 8009e6a:	2b69      	cmp	r3, #105	; 0x69
 8009e6c:	d19a      	bne.n	8009da4 <_scanf_float+0x70>
 8009e6e:	f1bb 0f00 	cmp.w	fp, #0
 8009e72:	d138      	bne.n	8009ee6 <_scanf_float+0x1b2>
 8009e74:	f1b9 0f00 	cmp.w	r9, #0
 8009e78:	d197      	bne.n	8009daa <_scanf_float+0x76>
 8009e7a:	6821      	ldr	r1, [r4, #0]
 8009e7c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8009e80:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8009e84:	d195      	bne.n	8009db2 <_scanf_float+0x7e>
 8009e86:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009e8a:	6021      	str	r1, [r4, #0]
 8009e8c:	f04f 0b01 	mov.w	fp, #1
 8009e90:	e011      	b.n	8009eb6 <_scanf_float+0x182>
 8009e92:	2b74      	cmp	r3, #116	; 0x74
 8009e94:	d034      	beq.n	8009f00 <_scanf_float+0x1cc>
 8009e96:	2b79      	cmp	r3, #121	; 0x79
 8009e98:	d184      	bne.n	8009da4 <_scanf_float+0x70>
 8009e9a:	f1bb 0f07 	cmp.w	fp, #7
 8009e9e:	d181      	bne.n	8009da4 <_scanf_float+0x70>
 8009ea0:	f04f 0b08 	mov.w	fp, #8
 8009ea4:	e007      	b.n	8009eb6 <_scanf_float+0x182>
 8009ea6:	eb12 0f0b 	cmn.w	r2, fp
 8009eaa:	f47f af7b 	bne.w	8009da4 <_scanf_float+0x70>
 8009eae:	6821      	ldr	r1, [r4, #0]
 8009eb0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009eb4:	6021      	str	r1, [r4, #0]
 8009eb6:	702b      	strb	r3, [r5, #0]
 8009eb8:	3501      	adds	r5, #1
 8009eba:	e79a      	b.n	8009df2 <_scanf_float+0xbe>
 8009ebc:	6821      	ldr	r1, [r4, #0]
 8009ebe:	0608      	lsls	r0, r1, #24
 8009ec0:	f57f af70 	bpl.w	8009da4 <_scanf_float+0x70>
 8009ec4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009ec8:	e7f4      	b.n	8009eb4 <_scanf_float+0x180>
 8009eca:	2a02      	cmp	r2, #2
 8009ecc:	d047      	beq.n	8009f5e <_scanf_float+0x22a>
 8009ece:	f1bb 0f01 	cmp.w	fp, #1
 8009ed2:	d003      	beq.n	8009edc <_scanf_float+0x1a8>
 8009ed4:	f1bb 0f04 	cmp.w	fp, #4
 8009ed8:	f47f af64 	bne.w	8009da4 <_scanf_float+0x70>
 8009edc:	f10b 0b01 	add.w	fp, fp, #1
 8009ee0:	fa5f fb8b 	uxtb.w	fp, fp
 8009ee4:	e7e7      	b.n	8009eb6 <_scanf_float+0x182>
 8009ee6:	f1bb 0f03 	cmp.w	fp, #3
 8009eea:	d0f7      	beq.n	8009edc <_scanf_float+0x1a8>
 8009eec:	f1bb 0f05 	cmp.w	fp, #5
 8009ef0:	e7f2      	b.n	8009ed8 <_scanf_float+0x1a4>
 8009ef2:	f1bb 0f02 	cmp.w	fp, #2
 8009ef6:	f47f af55 	bne.w	8009da4 <_scanf_float+0x70>
 8009efa:	f04f 0b03 	mov.w	fp, #3
 8009efe:	e7da      	b.n	8009eb6 <_scanf_float+0x182>
 8009f00:	f1bb 0f06 	cmp.w	fp, #6
 8009f04:	f47f af4e 	bne.w	8009da4 <_scanf_float+0x70>
 8009f08:	f04f 0b07 	mov.w	fp, #7
 8009f0c:	e7d3      	b.n	8009eb6 <_scanf_float+0x182>
 8009f0e:	6821      	ldr	r1, [r4, #0]
 8009f10:	0588      	lsls	r0, r1, #22
 8009f12:	f57f af47 	bpl.w	8009da4 <_scanf_float+0x70>
 8009f16:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8009f1a:	6021      	str	r1, [r4, #0]
 8009f1c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f20:	e7c9      	b.n	8009eb6 <_scanf_float+0x182>
 8009f22:	6821      	ldr	r1, [r4, #0]
 8009f24:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009f28:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8009f2c:	d006      	beq.n	8009f3c <_scanf_float+0x208>
 8009f2e:	0548      	lsls	r0, r1, #21
 8009f30:	f57f af38 	bpl.w	8009da4 <_scanf_float+0x70>
 8009f34:	f1b9 0f00 	cmp.w	r9, #0
 8009f38:	f43f af3b 	beq.w	8009db2 <_scanf_float+0x7e>
 8009f3c:	0588      	lsls	r0, r1, #22
 8009f3e:	bf58      	it	pl
 8009f40:	9802      	ldrpl	r0, [sp, #8]
 8009f42:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009f46:	bf58      	it	pl
 8009f48:	eba9 0000 	subpl.w	r0, r9, r0
 8009f4c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8009f50:	bf58      	it	pl
 8009f52:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8009f56:	6021      	str	r1, [r4, #0]
 8009f58:	f04f 0900 	mov.w	r9, #0
 8009f5c:	e7ab      	b.n	8009eb6 <_scanf_float+0x182>
 8009f5e:	2203      	movs	r2, #3
 8009f60:	e7a9      	b.n	8009eb6 <_scanf_float+0x182>
 8009f62:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009f66:	9205      	str	r2, [sp, #20]
 8009f68:	4631      	mov	r1, r6
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	4798      	blx	r3
 8009f6e:	9a05      	ldr	r2, [sp, #20]
 8009f70:	2800      	cmp	r0, #0
 8009f72:	f43f af04 	beq.w	8009d7e <_scanf_float+0x4a>
 8009f76:	e715      	b.n	8009da4 <_scanf_float+0x70>
 8009f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8009f80:	4632      	mov	r2, r6
 8009f82:	4638      	mov	r0, r7
 8009f84:	4798      	blx	r3
 8009f86:	6923      	ldr	r3, [r4, #16]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	6123      	str	r3, [r4, #16]
 8009f8c:	e715      	b.n	8009dba <_scanf_float+0x86>
 8009f8e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009f92:	2b06      	cmp	r3, #6
 8009f94:	d80a      	bhi.n	8009fac <_scanf_float+0x278>
 8009f96:	f1bb 0f02 	cmp.w	fp, #2
 8009f9a:	d968      	bls.n	800a06e <_scanf_float+0x33a>
 8009f9c:	f1ab 0b03 	sub.w	fp, fp, #3
 8009fa0:	fa5f fb8b 	uxtb.w	fp, fp
 8009fa4:	eba5 0b0b 	sub.w	fp, r5, fp
 8009fa8:	455d      	cmp	r5, fp
 8009faa:	d14b      	bne.n	800a044 <_scanf_float+0x310>
 8009fac:	6823      	ldr	r3, [r4, #0]
 8009fae:	05da      	lsls	r2, r3, #23
 8009fb0:	d51f      	bpl.n	8009ff2 <_scanf_float+0x2be>
 8009fb2:	055b      	lsls	r3, r3, #21
 8009fb4:	d468      	bmi.n	800a088 <_scanf_float+0x354>
 8009fb6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	2965      	cmp	r1, #101	; 0x65
 8009fbe:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009fc2:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8009fc6:	6123      	str	r3, [r4, #16]
 8009fc8:	d00d      	beq.n	8009fe6 <_scanf_float+0x2b2>
 8009fca:	2945      	cmp	r1, #69	; 0x45
 8009fcc:	d00b      	beq.n	8009fe6 <_scanf_float+0x2b2>
 8009fce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fd2:	4632      	mov	r2, r6
 8009fd4:	4638      	mov	r0, r7
 8009fd6:	4798      	blx	r3
 8009fd8:	6923      	ldr	r3, [r4, #16]
 8009fda:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	f1a5 0b02 	sub.w	fp, r5, #2
 8009fe4:	6123      	str	r3, [r4, #16]
 8009fe6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009fea:	4632      	mov	r2, r6
 8009fec:	4638      	mov	r0, r7
 8009fee:	4798      	blx	r3
 8009ff0:	465d      	mov	r5, fp
 8009ff2:	6826      	ldr	r6, [r4, #0]
 8009ff4:	f016 0610 	ands.w	r6, r6, #16
 8009ff8:	d17a      	bne.n	800a0f0 <_scanf_float+0x3bc>
 8009ffa:	702e      	strb	r6, [r5, #0]
 8009ffc:	6823      	ldr	r3, [r4, #0]
 8009ffe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a006:	d142      	bne.n	800a08e <_scanf_float+0x35a>
 800a008:	9b02      	ldr	r3, [sp, #8]
 800a00a:	eba9 0303 	sub.w	r3, r9, r3
 800a00e:	425a      	negs	r2, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	d149      	bne.n	800a0a8 <_scanf_float+0x374>
 800a014:	2200      	movs	r2, #0
 800a016:	4641      	mov	r1, r8
 800a018:	4638      	mov	r0, r7
 800a01a:	f000 fec5 	bl	800ada8 <_strtod_r>
 800a01e:	6825      	ldr	r5, [r4, #0]
 800a020:	f8da 3000 	ldr.w	r3, [sl]
 800a024:	f015 0f02 	tst.w	r5, #2
 800a028:	f103 0204 	add.w	r2, r3, #4
 800a02c:	ec59 8b10 	vmov	r8, r9, d0
 800a030:	f8ca 2000 	str.w	r2, [sl]
 800a034:	d043      	beq.n	800a0be <_scanf_float+0x38a>
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	e9c3 8900 	strd	r8, r9, [r3]
 800a03c:	68e3      	ldr	r3, [r4, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	60e3      	str	r3, [r4, #12]
 800a042:	e6be      	b.n	8009dc2 <_scanf_float+0x8e>
 800a044:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a048:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a04c:	4632      	mov	r2, r6
 800a04e:	4638      	mov	r0, r7
 800a050:	4798      	blx	r3
 800a052:	6923      	ldr	r3, [r4, #16]
 800a054:	3b01      	subs	r3, #1
 800a056:	6123      	str	r3, [r4, #16]
 800a058:	e7a6      	b.n	8009fa8 <_scanf_float+0x274>
 800a05a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a05e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a062:	4632      	mov	r2, r6
 800a064:	4638      	mov	r0, r7
 800a066:	4798      	blx	r3
 800a068:	6923      	ldr	r3, [r4, #16]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	6123      	str	r3, [r4, #16]
 800a06e:	4545      	cmp	r5, r8
 800a070:	d8f3      	bhi.n	800a05a <_scanf_float+0x326>
 800a072:	e6a5      	b.n	8009dc0 <_scanf_float+0x8c>
 800a074:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a078:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800a07c:	4632      	mov	r2, r6
 800a07e:	4638      	mov	r0, r7
 800a080:	4798      	blx	r3
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	3b01      	subs	r3, #1
 800a086:	6123      	str	r3, [r4, #16]
 800a088:	4545      	cmp	r5, r8
 800a08a:	d8f3      	bhi.n	800a074 <_scanf_float+0x340>
 800a08c:	e698      	b.n	8009dc0 <_scanf_float+0x8c>
 800a08e:	9b03      	ldr	r3, [sp, #12]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d0bf      	beq.n	800a014 <_scanf_float+0x2e0>
 800a094:	9904      	ldr	r1, [sp, #16]
 800a096:	230a      	movs	r3, #10
 800a098:	4632      	mov	r2, r6
 800a09a:	3101      	adds	r1, #1
 800a09c:	4638      	mov	r0, r7
 800a09e:	f000 ff0f 	bl	800aec0 <_strtol_r>
 800a0a2:	9b03      	ldr	r3, [sp, #12]
 800a0a4:	9d04      	ldr	r5, [sp, #16]
 800a0a6:	1ac2      	subs	r2, r0, r3
 800a0a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a0ac:	429d      	cmp	r5, r3
 800a0ae:	bf28      	it	cs
 800a0b0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800a0b4:	490f      	ldr	r1, [pc, #60]	; (800a0f4 <_scanf_float+0x3c0>)
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	f000 f834 	bl	800a124 <siprintf>
 800a0bc:	e7aa      	b.n	800a014 <_scanf_float+0x2e0>
 800a0be:	f015 0504 	ands.w	r5, r5, #4
 800a0c2:	d1b8      	bne.n	800a036 <_scanf_float+0x302>
 800a0c4:	681f      	ldr	r7, [r3, #0]
 800a0c6:	ee10 2a10 	vmov	r2, s0
 800a0ca:	464b      	mov	r3, r9
 800a0cc:	ee10 0a10 	vmov	r0, s0
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	f7f6 fd3b 	bl	8000b4c <__aeabi_dcmpun>
 800a0d6:	b128      	cbz	r0, 800a0e4 <_scanf_float+0x3b0>
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f000 f81d 	bl	800a118 <nanf>
 800a0de:	ed87 0a00 	vstr	s0, [r7]
 800a0e2:	e7ab      	b.n	800a03c <_scanf_float+0x308>
 800a0e4:	4640      	mov	r0, r8
 800a0e6:	4649      	mov	r1, r9
 800a0e8:	f7f6 fd8e 	bl	8000c08 <__aeabi_d2f>
 800a0ec:	6038      	str	r0, [r7, #0]
 800a0ee:	e7a5      	b.n	800a03c <_scanf_float+0x308>
 800a0f0:	2600      	movs	r6, #0
 800a0f2:	e666      	b.n	8009dc2 <_scanf_float+0x8e>
 800a0f4:	0800f34c 	.word	0x0800f34c

0800a0f8 <_sbrk_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4c06      	ldr	r4, [pc, #24]	; (800a114 <_sbrk_r+0x1c>)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4605      	mov	r5, r0
 800a100:	4608      	mov	r0, r1
 800a102:	6023      	str	r3, [r4, #0]
 800a104:	f7f8 fc88 	bl	8002a18 <_sbrk>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_sbrk_r+0x1a>
 800a10c:	6823      	ldr	r3, [r4, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_sbrk_r+0x1a>
 800a110:	602b      	str	r3, [r5, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20000d5c 	.word	0x20000d5c

0800a118 <nanf>:
 800a118:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a120 <nanf+0x8>
 800a11c:	4770      	bx	lr
 800a11e:	bf00      	nop
 800a120:	7fc00000 	.word	0x7fc00000

0800a124 <siprintf>:
 800a124:	b40e      	push	{r1, r2, r3}
 800a126:	b500      	push	{lr}
 800a128:	b09c      	sub	sp, #112	; 0x70
 800a12a:	ab1d      	add	r3, sp, #116	; 0x74
 800a12c:	9002      	str	r0, [sp, #8]
 800a12e:	9006      	str	r0, [sp, #24]
 800a130:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a134:	4809      	ldr	r0, [pc, #36]	; (800a15c <siprintf+0x38>)
 800a136:	9107      	str	r1, [sp, #28]
 800a138:	9104      	str	r1, [sp, #16]
 800a13a:	4909      	ldr	r1, [pc, #36]	; (800a160 <siprintf+0x3c>)
 800a13c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a140:	9105      	str	r1, [sp, #20]
 800a142:	6800      	ldr	r0, [r0, #0]
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	a902      	add	r1, sp, #8
 800a148:	f002 fcc8 	bl	800cadc <_svfiprintf_r>
 800a14c:	9b02      	ldr	r3, [sp, #8]
 800a14e:	2200      	movs	r2, #0
 800a150:	701a      	strb	r2, [r3, #0]
 800a152:	b01c      	add	sp, #112	; 0x70
 800a154:	f85d eb04 	ldr.w	lr, [sp], #4
 800a158:	b003      	add	sp, #12
 800a15a:	4770      	bx	lr
 800a15c:	2000002c 	.word	0x2000002c
 800a160:	ffff0208 	.word	0xffff0208

0800a164 <strncmp>:
 800a164:	b510      	push	{r4, lr}
 800a166:	b16a      	cbz	r2, 800a184 <strncmp+0x20>
 800a168:	3901      	subs	r1, #1
 800a16a:	1884      	adds	r4, r0, r2
 800a16c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a170:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a174:	4293      	cmp	r3, r2
 800a176:	d103      	bne.n	800a180 <strncmp+0x1c>
 800a178:	42a0      	cmp	r0, r4
 800a17a:	d001      	beq.n	800a180 <strncmp+0x1c>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f5      	bne.n	800a16c <strncmp+0x8>
 800a180:	1a98      	subs	r0, r3, r2
 800a182:	bd10      	pop	{r4, pc}
 800a184:	4610      	mov	r0, r2
 800a186:	e7fc      	b.n	800a182 <strncmp+0x1e>

0800a188 <sulp>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	4604      	mov	r4, r0
 800a18c:	460d      	mov	r5, r1
 800a18e:	ec45 4b10 	vmov	d0, r4, r5
 800a192:	4616      	mov	r6, r2
 800a194:	f002 fb06 	bl	800c7a4 <__ulp>
 800a198:	ec51 0b10 	vmov	r0, r1, d0
 800a19c:	b17e      	cbz	r6, 800a1be <sulp+0x36>
 800a19e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a1a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	dd09      	ble.n	800a1be <sulp+0x36>
 800a1aa:	051b      	lsls	r3, r3, #20
 800a1ac:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a1b0:	2400      	movs	r4, #0
 800a1b2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	462b      	mov	r3, r5
 800a1ba:	f7f6 fa2d 	bl	8000618 <__aeabi_dmul>
 800a1be:	bd70      	pop	{r4, r5, r6, pc}

0800a1c0 <_strtod_l>:
 800a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c4:	461f      	mov	r7, r3
 800a1c6:	b0a1      	sub	sp, #132	; 0x84
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4681      	mov	r9, r0
 800a1cc:	4638      	mov	r0, r7
 800a1ce:	460e      	mov	r6, r1
 800a1d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1d2:	931c      	str	r3, [sp, #112]	; 0x70
 800a1d4:	f001 fff5 	bl	800c1c2 <__localeconv_l>
 800a1d8:	4680      	mov	r8, r0
 800a1da:	6800      	ldr	r0, [r0, #0]
 800a1dc:	f7f6 f808 	bl	80001f0 <strlen>
 800a1e0:	f04f 0a00 	mov.w	sl, #0
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	f04f 0b00 	mov.w	fp, #0
 800a1ea:	961b      	str	r6, [sp, #108]	; 0x6c
 800a1ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1ee:	781a      	ldrb	r2, [r3, #0]
 800a1f0:	2a0d      	cmp	r2, #13
 800a1f2:	d832      	bhi.n	800a25a <_strtod_l+0x9a>
 800a1f4:	2a09      	cmp	r2, #9
 800a1f6:	d236      	bcs.n	800a266 <_strtod_l+0xa6>
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	d03e      	beq.n	800a27a <_strtod_l+0xba>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	930d      	str	r3, [sp, #52]	; 0x34
 800a200:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a202:	782b      	ldrb	r3, [r5, #0]
 800a204:	2b30      	cmp	r3, #48	; 0x30
 800a206:	f040 80ac 	bne.w	800a362 <_strtod_l+0x1a2>
 800a20a:	786b      	ldrb	r3, [r5, #1]
 800a20c:	2b58      	cmp	r3, #88	; 0x58
 800a20e:	d001      	beq.n	800a214 <_strtod_l+0x54>
 800a210:	2b78      	cmp	r3, #120	; 0x78
 800a212:	d167      	bne.n	800a2e4 <_strtod_l+0x124>
 800a214:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a216:	9301      	str	r3, [sp, #4]
 800a218:	ab1c      	add	r3, sp, #112	; 0x70
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	9702      	str	r7, [sp, #8]
 800a21e:	ab1d      	add	r3, sp, #116	; 0x74
 800a220:	4a88      	ldr	r2, [pc, #544]	; (800a444 <_strtod_l+0x284>)
 800a222:	a91b      	add	r1, sp, #108	; 0x6c
 800a224:	4648      	mov	r0, r9
 800a226:	f001 fcf2 	bl	800bc0e <__gethex>
 800a22a:	f010 0407 	ands.w	r4, r0, #7
 800a22e:	4606      	mov	r6, r0
 800a230:	d005      	beq.n	800a23e <_strtod_l+0x7e>
 800a232:	2c06      	cmp	r4, #6
 800a234:	d12b      	bne.n	800a28e <_strtod_l+0xce>
 800a236:	3501      	adds	r5, #1
 800a238:	2300      	movs	r3, #0
 800a23a:	951b      	str	r5, [sp, #108]	; 0x6c
 800a23c:	930d      	str	r3, [sp, #52]	; 0x34
 800a23e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a240:	2b00      	cmp	r3, #0
 800a242:	f040 859a 	bne.w	800ad7a <_strtod_l+0xbba>
 800a246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a248:	b1e3      	cbz	r3, 800a284 <_strtod_l+0xc4>
 800a24a:	4652      	mov	r2, sl
 800a24c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a250:	ec43 2b10 	vmov	d0, r2, r3
 800a254:	b021      	add	sp, #132	; 0x84
 800a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25a:	2a2b      	cmp	r2, #43	; 0x2b
 800a25c:	d015      	beq.n	800a28a <_strtod_l+0xca>
 800a25e:	2a2d      	cmp	r2, #45	; 0x2d
 800a260:	d004      	beq.n	800a26c <_strtod_l+0xac>
 800a262:	2a20      	cmp	r2, #32
 800a264:	d1ca      	bne.n	800a1fc <_strtod_l+0x3c>
 800a266:	3301      	adds	r3, #1
 800a268:	931b      	str	r3, [sp, #108]	; 0x6c
 800a26a:	e7bf      	b.n	800a1ec <_strtod_l+0x2c>
 800a26c:	2201      	movs	r2, #1
 800a26e:	920d      	str	r2, [sp, #52]	; 0x34
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	921b      	str	r2, [sp, #108]	; 0x6c
 800a274:	785b      	ldrb	r3, [r3, #1]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1c2      	bne.n	800a200 <_strtod_l+0x40>
 800a27a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a27c:	961b      	str	r6, [sp, #108]	; 0x6c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	f040 8579 	bne.w	800ad76 <_strtod_l+0xbb6>
 800a284:	4652      	mov	r2, sl
 800a286:	465b      	mov	r3, fp
 800a288:	e7e2      	b.n	800a250 <_strtod_l+0x90>
 800a28a:	2200      	movs	r2, #0
 800a28c:	e7ef      	b.n	800a26e <_strtod_l+0xae>
 800a28e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a290:	b13a      	cbz	r2, 800a2a2 <_strtod_l+0xe2>
 800a292:	2135      	movs	r1, #53	; 0x35
 800a294:	a81e      	add	r0, sp, #120	; 0x78
 800a296:	f002 fb7d 	bl	800c994 <__copybits>
 800a29a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a29c:	4648      	mov	r0, r9
 800a29e:	f001 ffe9 	bl	800c274 <_Bfree>
 800a2a2:	3c01      	subs	r4, #1
 800a2a4:	2c04      	cmp	r4, #4
 800a2a6:	d806      	bhi.n	800a2b6 <_strtod_l+0xf6>
 800a2a8:	e8df f004 	tbb	[pc, r4]
 800a2ac:	1714030a 	.word	0x1714030a
 800a2b0:	0a          	.byte	0x0a
 800a2b1:	00          	.byte	0x00
 800a2b2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800a2b6:	0730      	lsls	r0, r6, #28
 800a2b8:	d5c1      	bpl.n	800a23e <_strtod_l+0x7e>
 800a2ba:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a2be:	e7be      	b.n	800a23e <_strtod_l+0x7e>
 800a2c0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800a2c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a2c6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a2ca:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a2ce:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a2d2:	e7f0      	b.n	800a2b6 <_strtod_l+0xf6>
 800a2d4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800a448 <_strtod_l+0x288>
 800a2d8:	e7ed      	b.n	800a2b6 <_strtod_l+0xf6>
 800a2da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a2de:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800a2e2:	e7e8      	b.n	800a2b6 <_strtod_l+0xf6>
 800a2e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2e6:	1c5a      	adds	r2, r3, #1
 800a2e8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a2ea:	785b      	ldrb	r3, [r3, #1]
 800a2ec:	2b30      	cmp	r3, #48	; 0x30
 800a2ee:	d0f9      	beq.n	800a2e4 <_strtod_l+0x124>
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d0a4      	beq.n	800a23e <_strtod_l+0x7e>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	2500      	movs	r5, #0
 800a2f8:	9306      	str	r3, [sp, #24]
 800a2fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2fc:	9308      	str	r3, [sp, #32]
 800a2fe:	9507      	str	r5, [sp, #28]
 800a300:	9505      	str	r5, [sp, #20]
 800a302:	220a      	movs	r2, #10
 800a304:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a306:	7807      	ldrb	r7, [r0, #0]
 800a308:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a30c:	b2d9      	uxtb	r1, r3
 800a30e:	2909      	cmp	r1, #9
 800a310:	d929      	bls.n	800a366 <_strtod_l+0x1a6>
 800a312:	4622      	mov	r2, r4
 800a314:	f8d8 1000 	ldr.w	r1, [r8]
 800a318:	f7ff ff24 	bl	800a164 <strncmp>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d031      	beq.n	800a384 <_strtod_l+0x1c4>
 800a320:	2000      	movs	r0, #0
 800a322:	9c05      	ldr	r4, [sp, #20]
 800a324:	9004      	str	r0, [sp, #16]
 800a326:	463b      	mov	r3, r7
 800a328:	4602      	mov	r2, r0
 800a32a:	2b65      	cmp	r3, #101	; 0x65
 800a32c:	d001      	beq.n	800a332 <_strtod_l+0x172>
 800a32e:	2b45      	cmp	r3, #69	; 0x45
 800a330:	d114      	bne.n	800a35c <_strtod_l+0x19c>
 800a332:	b924      	cbnz	r4, 800a33e <_strtod_l+0x17e>
 800a334:	b910      	cbnz	r0, 800a33c <_strtod_l+0x17c>
 800a336:	9b06      	ldr	r3, [sp, #24]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d09e      	beq.n	800a27a <_strtod_l+0xba>
 800a33c:	2400      	movs	r4, #0
 800a33e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a340:	1c73      	adds	r3, r6, #1
 800a342:	931b      	str	r3, [sp, #108]	; 0x6c
 800a344:	7873      	ldrb	r3, [r6, #1]
 800a346:	2b2b      	cmp	r3, #43	; 0x2b
 800a348:	d078      	beq.n	800a43c <_strtod_l+0x27c>
 800a34a:	2b2d      	cmp	r3, #45	; 0x2d
 800a34c:	d070      	beq.n	800a430 <_strtod_l+0x270>
 800a34e:	f04f 0c00 	mov.w	ip, #0
 800a352:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a356:	2f09      	cmp	r7, #9
 800a358:	d97c      	bls.n	800a454 <_strtod_l+0x294>
 800a35a:	961b      	str	r6, [sp, #108]	; 0x6c
 800a35c:	f04f 0e00 	mov.w	lr, #0
 800a360:	e09a      	b.n	800a498 <_strtod_l+0x2d8>
 800a362:	2300      	movs	r3, #0
 800a364:	e7c7      	b.n	800a2f6 <_strtod_l+0x136>
 800a366:	9905      	ldr	r1, [sp, #20]
 800a368:	2908      	cmp	r1, #8
 800a36a:	bfdd      	ittte	le
 800a36c:	9907      	ldrle	r1, [sp, #28]
 800a36e:	fb02 3301 	mlale	r3, r2, r1, r3
 800a372:	9307      	strle	r3, [sp, #28]
 800a374:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a378:	9b05      	ldr	r3, [sp, #20]
 800a37a:	3001      	adds	r0, #1
 800a37c:	3301      	adds	r3, #1
 800a37e:	9305      	str	r3, [sp, #20]
 800a380:	901b      	str	r0, [sp, #108]	; 0x6c
 800a382:	e7bf      	b.n	800a304 <_strtod_l+0x144>
 800a384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a386:	191a      	adds	r2, r3, r4
 800a388:	921b      	str	r2, [sp, #108]	; 0x6c
 800a38a:	9a05      	ldr	r2, [sp, #20]
 800a38c:	5d1b      	ldrb	r3, [r3, r4]
 800a38e:	2a00      	cmp	r2, #0
 800a390:	d037      	beq.n	800a402 <_strtod_l+0x242>
 800a392:	9c05      	ldr	r4, [sp, #20]
 800a394:	4602      	mov	r2, r0
 800a396:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a39a:	2909      	cmp	r1, #9
 800a39c:	d913      	bls.n	800a3c6 <_strtod_l+0x206>
 800a39e:	2101      	movs	r1, #1
 800a3a0:	9104      	str	r1, [sp, #16]
 800a3a2:	e7c2      	b.n	800a32a <_strtod_l+0x16a>
 800a3a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3a6:	1c5a      	adds	r2, r3, #1
 800a3a8:	921b      	str	r2, [sp, #108]	; 0x6c
 800a3aa:	785b      	ldrb	r3, [r3, #1]
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	2b30      	cmp	r3, #48	; 0x30
 800a3b0:	d0f8      	beq.n	800a3a4 <_strtod_l+0x1e4>
 800a3b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a3b6:	2a08      	cmp	r2, #8
 800a3b8:	f200 84e4 	bhi.w	800ad84 <_strtod_l+0xbc4>
 800a3bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a3be:	9208      	str	r2, [sp, #32]
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a3ca:	f100 0101 	add.w	r1, r0, #1
 800a3ce:	d012      	beq.n	800a3f6 <_strtod_l+0x236>
 800a3d0:	440a      	add	r2, r1
 800a3d2:	eb00 0c04 	add.w	ip, r0, r4
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	270a      	movs	r7, #10
 800a3da:	458c      	cmp	ip, r1
 800a3dc:	d113      	bne.n	800a406 <_strtod_l+0x246>
 800a3de:	1821      	adds	r1, r4, r0
 800a3e0:	2908      	cmp	r1, #8
 800a3e2:	f104 0401 	add.w	r4, r4, #1
 800a3e6:	4404      	add	r4, r0
 800a3e8:	dc19      	bgt.n	800a41e <_strtod_l+0x25e>
 800a3ea:	9b07      	ldr	r3, [sp, #28]
 800a3ec:	210a      	movs	r1, #10
 800a3ee:	fb01 e303 	mla	r3, r1, r3, lr
 800a3f2:	9307      	str	r3, [sp, #28]
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a3f8:	1c58      	adds	r0, r3, #1
 800a3fa:	901b      	str	r0, [sp, #108]	; 0x6c
 800a3fc:	785b      	ldrb	r3, [r3, #1]
 800a3fe:	4608      	mov	r0, r1
 800a400:	e7c9      	b.n	800a396 <_strtod_l+0x1d6>
 800a402:	9805      	ldr	r0, [sp, #20]
 800a404:	e7d3      	b.n	800a3ae <_strtod_l+0x1ee>
 800a406:	2908      	cmp	r1, #8
 800a408:	f101 0101 	add.w	r1, r1, #1
 800a40c:	dc03      	bgt.n	800a416 <_strtod_l+0x256>
 800a40e:	9b07      	ldr	r3, [sp, #28]
 800a410:	437b      	muls	r3, r7
 800a412:	9307      	str	r3, [sp, #28]
 800a414:	e7e1      	b.n	800a3da <_strtod_l+0x21a>
 800a416:	2910      	cmp	r1, #16
 800a418:	bfd8      	it	le
 800a41a:	437d      	mulle	r5, r7
 800a41c:	e7dd      	b.n	800a3da <_strtod_l+0x21a>
 800a41e:	2c10      	cmp	r4, #16
 800a420:	bfdc      	itt	le
 800a422:	210a      	movle	r1, #10
 800a424:	fb01 e505 	mlale	r5, r1, r5, lr
 800a428:	e7e4      	b.n	800a3f4 <_strtod_l+0x234>
 800a42a:	2301      	movs	r3, #1
 800a42c:	9304      	str	r3, [sp, #16]
 800a42e:	e781      	b.n	800a334 <_strtod_l+0x174>
 800a430:	f04f 0c01 	mov.w	ip, #1
 800a434:	1cb3      	adds	r3, r6, #2
 800a436:	931b      	str	r3, [sp, #108]	; 0x6c
 800a438:	78b3      	ldrb	r3, [r6, #2]
 800a43a:	e78a      	b.n	800a352 <_strtod_l+0x192>
 800a43c:	f04f 0c00 	mov.w	ip, #0
 800a440:	e7f8      	b.n	800a434 <_strtod_l+0x274>
 800a442:	bf00      	nop
 800a444:	0800f354 	.word	0x0800f354
 800a448:	7ff00000 	.word	0x7ff00000
 800a44c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a44e:	1c5f      	adds	r7, r3, #1
 800a450:	971b      	str	r7, [sp, #108]	; 0x6c
 800a452:	785b      	ldrb	r3, [r3, #1]
 800a454:	2b30      	cmp	r3, #48	; 0x30
 800a456:	d0f9      	beq.n	800a44c <_strtod_l+0x28c>
 800a458:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a45c:	2f08      	cmp	r7, #8
 800a45e:	f63f af7d 	bhi.w	800a35c <_strtod_l+0x19c>
 800a462:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a466:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a468:	930a      	str	r3, [sp, #40]	; 0x28
 800a46a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a46c:	1c5f      	adds	r7, r3, #1
 800a46e:	971b      	str	r7, [sp, #108]	; 0x6c
 800a470:	785b      	ldrb	r3, [r3, #1]
 800a472:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a476:	f1b8 0f09 	cmp.w	r8, #9
 800a47a:	d937      	bls.n	800a4ec <_strtod_l+0x32c>
 800a47c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a47e:	1a7f      	subs	r7, r7, r1
 800a480:	2f08      	cmp	r7, #8
 800a482:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a486:	dc37      	bgt.n	800a4f8 <_strtod_l+0x338>
 800a488:	45be      	cmp	lr, r7
 800a48a:	bfa8      	it	ge
 800a48c:	46be      	movge	lr, r7
 800a48e:	f1bc 0f00 	cmp.w	ip, #0
 800a492:	d001      	beq.n	800a498 <_strtod_l+0x2d8>
 800a494:	f1ce 0e00 	rsb	lr, lr, #0
 800a498:	2c00      	cmp	r4, #0
 800a49a:	d151      	bne.n	800a540 <_strtod_l+0x380>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	f47f aece 	bne.w	800a23e <_strtod_l+0x7e>
 800a4a2:	9a06      	ldr	r2, [sp, #24]
 800a4a4:	2a00      	cmp	r2, #0
 800a4a6:	f47f aeca 	bne.w	800a23e <_strtod_l+0x7e>
 800a4aa:	9a04      	ldr	r2, [sp, #16]
 800a4ac:	2a00      	cmp	r2, #0
 800a4ae:	f47f aee4 	bne.w	800a27a <_strtod_l+0xba>
 800a4b2:	2b4e      	cmp	r3, #78	; 0x4e
 800a4b4:	d027      	beq.n	800a506 <_strtod_l+0x346>
 800a4b6:	dc21      	bgt.n	800a4fc <_strtod_l+0x33c>
 800a4b8:	2b49      	cmp	r3, #73	; 0x49
 800a4ba:	f47f aede 	bne.w	800a27a <_strtod_l+0xba>
 800a4be:	49a0      	ldr	r1, [pc, #640]	; (800a740 <_strtod_l+0x580>)
 800a4c0:	a81b      	add	r0, sp, #108	; 0x6c
 800a4c2:	f001 fdd7 	bl	800c074 <__match>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	f43f aed7 	beq.w	800a27a <_strtod_l+0xba>
 800a4cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4ce:	499d      	ldr	r1, [pc, #628]	; (800a744 <_strtod_l+0x584>)
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	a81b      	add	r0, sp, #108	; 0x6c
 800a4d4:	931b      	str	r3, [sp, #108]	; 0x6c
 800a4d6:	f001 fdcd 	bl	800c074 <__match>
 800a4da:	b910      	cbnz	r0, 800a4e2 <_strtod_l+0x322>
 800a4dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4de:	3301      	adds	r3, #1
 800a4e0:	931b      	str	r3, [sp, #108]	; 0x6c
 800a4e2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800a758 <_strtod_l+0x598>
 800a4e6:	f04f 0a00 	mov.w	sl, #0
 800a4ea:	e6a8      	b.n	800a23e <_strtod_l+0x7e>
 800a4ec:	210a      	movs	r1, #10
 800a4ee:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a4f2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a4f6:	e7b8      	b.n	800a46a <_strtod_l+0x2aa>
 800a4f8:	46be      	mov	lr, r7
 800a4fa:	e7c8      	b.n	800a48e <_strtod_l+0x2ce>
 800a4fc:	2b69      	cmp	r3, #105	; 0x69
 800a4fe:	d0de      	beq.n	800a4be <_strtod_l+0x2fe>
 800a500:	2b6e      	cmp	r3, #110	; 0x6e
 800a502:	f47f aeba 	bne.w	800a27a <_strtod_l+0xba>
 800a506:	4990      	ldr	r1, [pc, #576]	; (800a748 <_strtod_l+0x588>)
 800a508:	a81b      	add	r0, sp, #108	; 0x6c
 800a50a:	f001 fdb3 	bl	800c074 <__match>
 800a50e:	2800      	cmp	r0, #0
 800a510:	f43f aeb3 	beq.w	800a27a <_strtod_l+0xba>
 800a514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	2b28      	cmp	r3, #40	; 0x28
 800a51a:	d10e      	bne.n	800a53a <_strtod_l+0x37a>
 800a51c:	aa1e      	add	r2, sp, #120	; 0x78
 800a51e:	498b      	ldr	r1, [pc, #556]	; (800a74c <_strtod_l+0x58c>)
 800a520:	a81b      	add	r0, sp, #108	; 0x6c
 800a522:	f001 fdbb 	bl	800c09c <__hexnan>
 800a526:	2805      	cmp	r0, #5
 800a528:	d107      	bne.n	800a53a <_strtod_l+0x37a>
 800a52a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a52c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800a530:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a534:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a538:	e681      	b.n	800a23e <_strtod_l+0x7e>
 800a53a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800a760 <_strtod_l+0x5a0>
 800a53e:	e7d2      	b.n	800a4e6 <_strtod_l+0x326>
 800a540:	ebae 0302 	sub.w	r3, lr, r2
 800a544:	9306      	str	r3, [sp, #24]
 800a546:	9b05      	ldr	r3, [sp, #20]
 800a548:	9807      	ldr	r0, [sp, #28]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	bf08      	it	eq
 800a54e:	4623      	moveq	r3, r4
 800a550:	2c10      	cmp	r4, #16
 800a552:	9305      	str	r3, [sp, #20]
 800a554:	46a0      	mov	r8, r4
 800a556:	bfa8      	it	ge
 800a558:	f04f 0810 	movge.w	r8, #16
 800a55c:	f7f5 ffe2 	bl	8000524 <__aeabi_ui2d>
 800a560:	2c09      	cmp	r4, #9
 800a562:	4682      	mov	sl, r0
 800a564:	468b      	mov	fp, r1
 800a566:	dc13      	bgt.n	800a590 <_strtod_l+0x3d0>
 800a568:	9b06      	ldr	r3, [sp, #24]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	f43f ae67 	beq.w	800a23e <_strtod_l+0x7e>
 800a570:	9b06      	ldr	r3, [sp, #24]
 800a572:	dd7a      	ble.n	800a66a <_strtod_l+0x4aa>
 800a574:	2b16      	cmp	r3, #22
 800a576:	dc61      	bgt.n	800a63c <_strtod_l+0x47c>
 800a578:	4a75      	ldr	r2, [pc, #468]	; (800a750 <_strtod_l+0x590>)
 800a57a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a57e:	e9de 0100 	ldrd	r0, r1, [lr]
 800a582:	4652      	mov	r2, sl
 800a584:	465b      	mov	r3, fp
 800a586:	f7f6 f847 	bl	8000618 <__aeabi_dmul>
 800a58a:	4682      	mov	sl, r0
 800a58c:	468b      	mov	fp, r1
 800a58e:	e656      	b.n	800a23e <_strtod_l+0x7e>
 800a590:	4b6f      	ldr	r3, [pc, #444]	; (800a750 <_strtod_l+0x590>)
 800a592:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a596:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a59a:	f7f6 f83d 	bl	8000618 <__aeabi_dmul>
 800a59e:	4606      	mov	r6, r0
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	460f      	mov	r7, r1
 800a5a4:	f7f5 ffbe 	bl	8000524 <__aeabi_ui2d>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	4639      	mov	r1, r7
 800a5b0:	f7f5 fe7c 	bl	80002ac <__adddf3>
 800a5b4:	2c0f      	cmp	r4, #15
 800a5b6:	4682      	mov	sl, r0
 800a5b8:	468b      	mov	fp, r1
 800a5ba:	ddd5      	ble.n	800a568 <_strtod_l+0x3a8>
 800a5bc:	9b06      	ldr	r3, [sp, #24]
 800a5be:	eba4 0808 	sub.w	r8, r4, r8
 800a5c2:	4498      	add	r8, r3
 800a5c4:	f1b8 0f00 	cmp.w	r8, #0
 800a5c8:	f340 8096 	ble.w	800a6f8 <_strtod_l+0x538>
 800a5cc:	f018 030f 	ands.w	r3, r8, #15
 800a5d0:	d00a      	beq.n	800a5e8 <_strtod_l+0x428>
 800a5d2:	495f      	ldr	r1, [pc, #380]	; (800a750 <_strtod_l+0x590>)
 800a5d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a5d8:	4652      	mov	r2, sl
 800a5da:	465b      	mov	r3, fp
 800a5dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5e0:	f7f6 f81a 	bl	8000618 <__aeabi_dmul>
 800a5e4:	4682      	mov	sl, r0
 800a5e6:	468b      	mov	fp, r1
 800a5e8:	f038 080f 	bics.w	r8, r8, #15
 800a5ec:	d073      	beq.n	800a6d6 <_strtod_l+0x516>
 800a5ee:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a5f2:	dd47      	ble.n	800a684 <_strtod_l+0x4c4>
 800a5f4:	2400      	movs	r4, #0
 800a5f6:	46a0      	mov	r8, r4
 800a5f8:	9407      	str	r4, [sp, #28]
 800a5fa:	9405      	str	r4, [sp, #20]
 800a5fc:	2322      	movs	r3, #34	; 0x22
 800a5fe:	f8df b158 	ldr.w	fp, [pc, #344]	; 800a758 <_strtod_l+0x598>
 800a602:	f8c9 3000 	str.w	r3, [r9]
 800a606:	f04f 0a00 	mov.w	sl, #0
 800a60a:	9b07      	ldr	r3, [sp, #28]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f43f ae16 	beq.w	800a23e <_strtod_l+0x7e>
 800a612:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a614:	4648      	mov	r0, r9
 800a616:	f001 fe2d 	bl	800c274 <_Bfree>
 800a61a:	9905      	ldr	r1, [sp, #20]
 800a61c:	4648      	mov	r0, r9
 800a61e:	f001 fe29 	bl	800c274 <_Bfree>
 800a622:	4641      	mov	r1, r8
 800a624:	4648      	mov	r0, r9
 800a626:	f001 fe25 	bl	800c274 <_Bfree>
 800a62a:	9907      	ldr	r1, [sp, #28]
 800a62c:	4648      	mov	r0, r9
 800a62e:	f001 fe21 	bl	800c274 <_Bfree>
 800a632:	4621      	mov	r1, r4
 800a634:	4648      	mov	r0, r9
 800a636:	f001 fe1d 	bl	800c274 <_Bfree>
 800a63a:	e600      	b.n	800a23e <_strtod_l+0x7e>
 800a63c:	9a06      	ldr	r2, [sp, #24]
 800a63e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a642:	4293      	cmp	r3, r2
 800a644:	dbba      	blt.n	800a5bc <_strtod_l+0x3fc>
 800a646:	4d42      	ldr	r5, [pc, #264]	; (800a750 <_strtod_l+0x590>)
 800a648:	f1c4 040f 	rsb	r4, r4, #15
 800a64c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a650:	4652      	mov	r2, sl
 800a652:	465b      	mov	r3, fp
 800a654:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a658:	f7f5 ffde 	bl	8000618 <__aeabi_dmul>
 800a65c:	9b06      	ldr	r3, [sp, #24]
 800a65e:	1b1c      	subs	r4, r3, r4
 800a660:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a664:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a668:	e78d      	b.n	800a586 <_strtod_l+0x3c6>
 800a66a:	f113 0f16 	cmn.w	r3, #22
 800a66e:	dba5      	blt.n	800a5bc <_strtod_l+0x3fc>
 800a670:	4a37      	ldr	r2, [pc, #220]	; (800a750 <_strtod_l+0x590>)
 800a672:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a676:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a67a:	4650      	mov	r0, sl
 800a67c:	4659      	mov	r1, fp
 800a67e:	f7f6 f8f5 	bl	800086c <__aeabi_ddiv>
 800a682:	e782      	b.n	800a58a <_strtod_l+0x3ca>
 800a684:	2300      	movs	r3, #0
 800a686:	4e33      	ldr	r6, [pc, #204]	; (800a754 <_strtod_l+0x594>)
 800a688:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a68c:	4650      	mov	r0, sl
 800a68e:	4659      	mov	r1, fp
 800a690:	461d      	mov	r5, r3
 800a692:	f1b8 0f01 	cmp.w	r8, #1
 800a696:	dc21      	bgt.n	800a6dc <_strtod_l+0x51c>
 800a698:	b10b      	cbz	r3, 800a69e <_strtod_l+0x4de>
 800a69a:	4682      	mov	sl, r0
 800a69c:	468b      	mov	fp, r1
 800a69e:	4b2d      	ldr	r3, [pc, #180]	; (800a754 <_strtod_l+0x594>)
 800a6a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a6a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a6a8:	4652      	mov	r2, sl
 800a6aa:	465b      	mov	r3, fp
 800a6ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a6b0:	f7f5 ffb2 	bl	8000618 <__aeabi_dmul>
 800a6b4:	4b28      	ldr	r3, [pc, #160]	; (800a758 <_strtod_l+0x598>)
 800a6b6:	460a      	mov	r2, r1
 800a6b8:	400b      	ands	r3, r1
 800a6ba:	4928      	ldr	r1, [pc, #160]	; (800a75c <_strtod_l+0x59c>)
 800a6bc:	428b      	cmp	r3, r1
 800a6be:	4682      	mov	sl, r0
 800a6c0:	d898      	bhi.n	800a5f4 <_strtod_l+0x434>
 800a6c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a6c6:	428b      	cmp	r3, r1
 800a6c8:	bf86      	itte	hi
 800a6ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a764 <_strtod_l+0x5a4>
 800a6ce:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800a6d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	9304      	str	r3, [sp, #16]
 800a6da:	e077      	b.n	800a7cc <_strtod_l+0x60c>
 800a6dc:	f018 0f01 	tst.w	r8, #1
 800a6e0:	d006      	beq.n	800a6f0 <_strtod_l+0x530>
 800a6e2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	f7f5 ff95 	bl	8000618 <__aeabi_dmul>
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	3501      	adds	r5, #1
 800a6f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a6f6:	e7cc      	b.n	800a692 <_strtod_l+0x4d2>
 800a6f8:	d0ed      	beq.n	800a6d6 <_strtod_l+0x516>
 800a6fa:	f1c8 0800 	rsb	r8, r8, #0
 800a6fe:	f018 020f 	ands.w	r2, r8, #15
 800a702:	d00a      	beq.n	800a71a <_strtod_l+0x55a>
 800a704:	4b12      	ldr	r3, [pc, #72]	; (800a750 <_strtod_l+0x590>)
 800a706:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a70a:	4650      	mov	r0, sl
 800a70c:	4659      	mov	r1, fp
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	f7f6 f8ab 	bl	800086c <__aeabi_ddiv>
 800a716:	4682      	mov	sl, r0
 800a718:	468b      	mov	fp, r1
 800a71a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a71e:	d0da      	beq.n	800a6d6 <_strtod_l+0x516>
 800a720:	f1b8 0f1f 	cmp.w	r8, #31
 800a724:	dd20      	ble.n	800a768 <_strtod_l+0x5a8>
 800a726:	2400      	movs	r4, #0
 800a728:	46a0      	mov	r8, r4
 800a72a:	9407      	str	r4, [sp, #28]
 800a72c:	9405      	str	r4, [sp, #20]
 800a72e:	2322      	movs	r3, #34	; 0x22
 800a730:	f04f 0a00 	mov.w	sl, #0
 800a734:	f04f 0b00 	mov.w	fp, #0
 800a738:	f8c9 3000 	str.w	r3, [r9]
 800a73c:	e765      	b.n	800a60a <_strtod_l+0x44a>
 800a73e:	bf00      	nop
 800a740:	0800f31d 	.word	0x0800f31d
 800a744:	0800f3ab 	.word	0x0800f3ab
 800a748:	0800f325 	.word	0x0800f325
 800a74c:	0800f368 	.word	0x0800f368
 800a750:	0800f3e8 	.word	0x0800f3e8
 800a754:	0800f3c0 	.word	0x0800f3c0
 800a758:	7ff00000 	.word	0x7ff00000
 800a75c:	7ca00000 	.word	0x7ca00000
 800a760:	fff80000 	.word	0xfff80000
 800a764:	7fefffff 	.word	0x7fefffff
 800a768:	f018 0310 	ands.w	r3, r8, #16
 800a76c:	bf18      	it	ne
 800a76e:	236a      	movne	r3, #106	; 0x6a
 800a770:	4da0      	ldr	r5, [pc, #640]	; (800a9f4 <_strtod_l+0x834>)
 800a772:	9304      	str	r3, [sp, #16]
 800a774:	4650      	mov	r0, sl
 800a776:	4659      	mov	r1, fp
 800a778:	2300      	movs	r3, #0
 800a77a:	f1b8 0f00 	cmp.w	r8, #0
 800a77e:	f300 810a 	bgt.w	800a996 <_strtod_l+0x7d6>
 800a782:	b10b      	cbz	r3, 800a788 <_strtod_l+0x5c8>
 800a784:	4682      	mov	sl, r0
 800a786:	468b      	mov	fp, r1
 800a788:	9b04      	ldr	r3, [sp, #16]
 800a78a:	b1bb      	cbz	r3, 800a7bc <_strtod_l+0x5fc>
 800a78c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800a790:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a794:	2b00      	cmp	r3, #0
 800a796:	4659      	mov	r1, fp
 800a798:	dd10      	ble.n	800a7bc <_strtod_l+0x5fc>
 800a79a:	2b1f      	cmp	r3, #31
 800a79c:	f340 8107 	ble.w	800a9ae <_strtod_l+0x7ee>
 800a7a0:	2b34      	cmp	r3, #52	; 0x34
 800a7a2:	bfde      	ittt	le
 800a7a4:	3b20      	suble	r3, #32
 800a7a6:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800a7aa:	fa02 f303 	lslle.w	r3, r2, r3
 800a7ae:	f04f 0a00 	mov.w	sl, #0
 800a7b2:	bfcc      	ite	gt
 800a7b4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a7b8:	ea03 0b01 	andle.w	fp, r3, r1
 800a7bc:	2200      	movs	r2, #0
 800a7be:	2300      	movs	r3, #0
 800a7c0:	4650      	mov	r0, sl
 800a7c2:	4659      	mov	r1, fp
 800a7c4:	f7f6 f990 	bl	8000ae8 <__aeabi_dcmpeq>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d1ac      	bne.n	800a726 <_strtod_l+0x566>
 800a7cc:	9b07      	ldr	r3, [sp, #28]
 800a7ce:	9300      	str	r3, [sp, #0]
 800a7d0:	9a05      	ldr	r2, [sp, #20]
 800a7d2:	9908      	ldr	r1, [sp, #32]
 800a7d4:	4623      	mov	r3, r4
 800a7d6:	4648      	mov	r0, r9
 800a7d8:	f001 fd9e 	bl	800c318 <__s2b>
 800a7dc:	9007      	str	r0, [sp, #28]
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	f43f af08 	beq.w	800a5f4 <_strtod_l+0x434>
 800a7e4:	9a06      	ldr	r2, [sp, #24]
 800a7e6:	9b06      	ldr	r3, [sp, #24]
 800a7e8:	2a00      	cmp	r2, #0
 800a7ea:	f1c3 0300 	rsb	r3, r3, #0
 800a7ee:	bfa8      	it	ge
 800a7f0:	2300      	movge	r3, #0
 800a7f2:	930e      	str	r3, [sp, #56]	; 0x38
 800a7f4:	2400      	movs	r4, #0
 800a7f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a7fa:	9316      	str	r3, [sp, #88]	; 0x58
 800a7fc:	46a0      	mov	r8, r4
 800a7fe:	9b07      	ldr	r3, [sp, #28]
 800a800:	4648      	mov	r0, r9
 800a802:	6859      	ldr	r1, [r3, #4]
 800a804:	f001 fd02 	bl	800c20c <_Balloc>
 800a808:	9005      	str	r0, [sp, #20]
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f43f aef6 	beq.w	800a5fc <_strtod_l+0x43c>
 800a810:	9b07      	ldr	r3, [sp, #28]
 800a812:	691a      	ldr	r2, [r3, #16]
 800a814:	3202      	adds	r2, #2
 800a816:	f103 010c 	add.w	r1, r3, #12
 800a81a:	0092      	lsls	r2, r2, #2
 800a81c:	300c      	adds	r0, #12
 800a81e:	f7fe fd59 	bl	80092d4 <memcpy>
 800a822:	aa1e      	add	r2, sp, #120	; 0x78
 800a824:	a91d      	add	r1, sp, #116	; 0x74
 800a826:	ec4b ab10 	vmov	d0, sl, fp
 800a82a:	4648      	mov	r0, r9
 800a82c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800a830:	f002 f82e 	bl	800c890 <__d2b>
 800a834:	901c      	str	r0, [sp, #112]	; 0x70
 800a836:	2800      	cmp	r0, #0
 800a838:	f43f aee0 	beq.w	800a5fc <_strtod_l+0x43c>
 800a83c:	2101      	movs	r1, #1
 800a83e:	4648      	mov	r0, r9
 800a840:	f001 fdf6 	bl	800c430 <__i2b>
 800a844:	4680      	mov	r8, r0
 800a846:	2800      	cmp	r0, #0
 800a848:	f43f aed8 	beq.w	800a5fc <_strtod_l+0x43c>
 800a84c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a84e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a850:	2e00      	cmp	r6, #0
 800a852:	bfab      	itete	ge
 800a854:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a856:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a858:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800a85a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800a85c:	bfac      	ite	ge
 800a85e:	18f7      	addge	r7, r6, r3
 800a860:	1b9d      	sublt	r5, r3, r6
 800a862:	9b04      	ldr	r3, [sp, #16]
 800a864:	1af6      	subs	r6, r6, r3
 800a866:	4416      	add	r6, r2
 800a868:	4b63      	ldr	r3, [pc, #396]	; (800a9f8 <_strtod_l+0x838>)
 800a86a:	3e01      	subs	r6, #1
 800a86c:	429e      	cmp	r6, r3
 800a86e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a872:	f280 80af 	bge.w	800a9d4 <_strtod_l+0x814>
 800a876:	1b9b      	subs	r3, r3, r6
 800a878:	2b1f      	cmp	r3, #31
 800a87a:	eba2 0203 	sub.w	r2, r2, r3
 800a87e:	f04f 0101 	mov.w	r1, #1
 800a882:	f300 809b 	bgt.w	800a9bc <_strtod_l+0x7fc>
 800a886:	fa01 f303 	lsl.w	r3, r1, r3
 800a88a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a88c:	2300      	movs	r3, #0
 800a88e:	930a      	str	r3, [sp, #40]	; 0x28
 800a890:	18be      	adds	r6, r7, r2
 800a892:	9b04      	ldr	r3, [sp, #16]
 800a894:	42b7      	cmp	r7, r6
 800a896:	4415      	add	r5, r2
 800a898:	441d      	add	r5, r3
 800a89a:	463b      	mov	r3, r7
 800a89c:	bfa8      	it	ge
 800a89e:	4633      	movge	r3, r6
 800a8a0:	42ab      	cmp	r3, r5
 800a8a2:	bfa8      	it	ge
 800a8a4:	462b      	movge	r3, r5
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	bfc2      	ittt	gt
 800a8aa:	1af6      	subgt	r6, r6, r3
 800a8ac:	1aed      	subgt	r5, r5, r3
 800a8ae:	1aff      	subgt	r7, r7, r3
 800a8b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8b2:	b1bb      	cbz	r3, 800a8e4 <_strtod_l+0x724>
 800a8b4:	4641      	mov	r1, r8
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	4648      	mov	r0, r9
 800a8ba:	f001 fe59 	bl	800c570 <__pow5mult>
 800a8be:	4680      	mov	r8, r0
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	f43f ae9b 	beq.w	800a5fc <_strtod_l+0x43c>
 800a8c6:	4601      	mov	r1, r0
 800a8c8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a8ca:	4648      	mov	r0, r9
 800a8cc:	f001 fdb9 	bl	800c442 <__multiply>
 800a8d0:	900c      	str	r0, [sp, #48]	; 0x30
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	f43f ae92 	beq.w	800a5fc <_strtod_l+0x43c>
 800a8d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a8da:	4648      	mov	r0, r9
 800a8dc:	f001 fcca 	bl	800c274 <_Bfree>
 800a8e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8e2:	931c      	str	r3, [sp, #112]	; 0x70
 800a8e4:	2e00      	cmp	r6, #0
 800a8e6:	dc7a      	bgt.n	800a9de <_strtod_l+0x81e>
 800a8e8:	9b06      	ldr	r3, [sp, #24]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	dd08      	ble.n	800a900 <_strtod_l+0x740>
 800a8ee:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a8f0:	9905      	ldr	r1, [sp, #20]
 800a8f2:	4648      	mov	r0, r9
 800a8f4:	f001 fe3c 	bl	800c570 <__pow5mult>
 800a8f8:	9005      	str	r0, [sp, #20]
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	f43f ae7e 	beq.w	800a5fc <_strtod_l+0x43c>
 800a900:	2d00      	cmp	r5, #0
 800a902:	dd08      	ble.n	800a916 <_strtod_l+0x756>
 800a904:	462a      	mov	r2, r5
 800a906:	9905      	ldr	r1, [sp, #20]
 800a908:	4648      	mov	r0, r9
 800a90a:	f001 fe7f 	bl	800c60c <__lshift>
 800a90e:	9005      	str	r0, [sp, #20]
 800a910:	2800      	cmp	r0, #0
 800a912:	f43f ae73 	beq.w	800a5fc <_strtod_l+0x43c>
 800a916:	2f00      	cmp	r7, #0
 800a918:	dd08      	ble.n	800a92c <_strtod_l+0x76c>
 800a91a:	4641      	mov	r1, r8
 800a91c:	463a      	mov	r2, r7
 800a91e:	4648      	mov	r0, r9
 800a920:	f001 fe74 	bl	800c60c <__lshift>
 800a924:	4680      	mov	r8, r0
 800a926:	2800      	cmp	r0, #0
 800a928:	f43f ae68 	beq.w	800a5fc <_strtod_l+0x43c>
 800a92c:	9a05      	ldr	r2, [sp, #20]
 800a92e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a930:	4648      	mov	r0, r9
 800a932:	f001 fed9 	bl	800c6e8 <__mdiff>
 800a936:	4604      	mov	r4, r0
 800a938:	2800      	cmp	r0, #0
 800a93a:	f43f ae5f 	beq.w	800a5fc <_strtod_l+0x43c>
 800a93e:	68c3      	ldr	r3, [r0, #12]
 800a940:	930c      	str	r3, [sp, #48]	; 0x30
 800a942:	2300      	movs	r3, #0
 800a944:	60c3      	str	r3, [r0, #12]
 800a946:	4641      	mov	r1, r8
 800a948:	f001 feb4 	bl	800c6b4 <__mcmp>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	da55      	bge.n	800a9fc <_strtod_l+0x83c>
 800a950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a952:	b9e3      	cbnz	r3, 800a98e <_strtod_l+0x7ce>
 800a954:	f1ba 0f00 	cmp.w	sl, #0
 800a958:	d119      	bne.n	800a98e <_strtod_l+0x7ce>
 800a95a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a95e:	b9b3      	cbnz	r3, 800a98e <_strtod_l+0x7ce>
 800a960:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a964:	0d1b      	lsrs	r3, r3, #20
 800a966:	051b      	lsls	r3, r3, #20
 800a968:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a96c:	d90f      	bls.n	800a98e <_strtod_l+0x7ce>
 800a96e:	6963      	ldr	r3, [r4, #20]
 800a970:	b913      	cbnz	r3, 800a978 <_strtod_l+0x7b8>
 800a972:	6923      	ldr	r3, [r4, #16]
 800a974:	2b01      	cmp	r3, #1
 800a976:	dd0a      	ble.n	800a98e <_strtod_l+0x7ce>
 800a978:	4621      	mov	r1, r4
 800a97a:	2201      	movs	r2, #1
 800a97c:	4648      	mov	r0, r9
 800a97e:	f001 fe45 	bl	800c60c <__lshift>
 800a982:	4641      	mov	r1, r8
 800a984:	4604      	mov	r4, r0
 800a986:	f001 fe95 	bl	800c6b4 <__mcmp>
 800a98a:	2800      	cmp	r0, #0
 800a98c:	dc67      	bgt.n	800aa5e <_strtod_l+0x89e>
 800a98e:	9b04      	ldr	r3, [sp, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d171      	bne.n	800aa78 <_strtod_l+0x8b8>
 800a994:	e63d      	b.n	800a612 <_strtod_l+0x452>
 800a996:	f018 0f01 	tst.w	r8, #1
 800a99a:	d004      	beq.n	800a9a6 <_strtod_l+0x7e6>
 800a99c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9a0:	f7f5 fe3a 	bl	8000618 <__aeabi_dmul>
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a9aa:	3508      	adds	r5, #8
 800a9ac:	e6e5      	b.n	800a77a <_strtod_l+0x5ba>
 800a9ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b6:	ea03 0a0a 	and.w	sl, r3, sl
 800a9ba:	e6ff      	b.n	800a7bc <_strtod_l+0x5fc>
 800a9bc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a9c0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a9c4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a9c8:	36e2      	adds	r6, #226	; 0xe2
 800a9ca:	fa01 f306 	lsl.w	r3, r1, r6
 800a9ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a9d0:	910f      	str	r1, [sp, #60]	; 0x3c
 800a9d2:	e75d      	b.n	800a890 <_strtod_l+0x6d0>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	930a      	str	r3, [sp, #40]	; 0x28
 800a9d8:	2301      	movs	r3, #1
 800a9da:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9dc:	e758      	b.n	800a890 <_strtod_l+0x6d0>
 800a9de:	4632      	mov	r2, r6
 800a9e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a9e2:	4648      	mov	r0, r9
 800a9e4:	f001 fe12 	bl	800c60c <__lshift>
 800a9e8:	901c      	str	r0, [sp, #112]	; 0x70
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	f47f af7c 	bne.w	800a8e8 <_strtod_l+0x728>
 800a9f0:	e604      	b.n	800a5fc <_strtod_l+0x43c>
 800a9f2:	bf00      	nop
 800a9f4:	0800f380 	.word	0x0800f380
 800a9f8:	fffffc02 	.word	0xfffffc02
 800a9fc:	465d      	mov	r5, fp
 800a9fe:	f040 8086 	bne.w	800ab0e <_strtod_l+0x94e>
 800aa02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa08:	b32a      	cbz	r2, 800aa56 <_strtod_l+0x896>
 800aa0a:	4aaf      	ldr	r2, [pc, #700]	; (800acc8 <_strtod_l+0xb08>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d153      	bne.n	800aab8 <_strtod_l+0x8f8>
 800aa10:	9b04      	ldr	r3, [sp, #16]
 800aa12:	4650      	mov	r0, sl
 800aa14:	b1d3      	cbz	r3, 800aa4c <_strtod_l+0x88c>
 800aa16:	4aad      	ldr	r2, [pc, #692]	; (800accc <_strtod_l+0xb0c>)
 800aa18:	402a      	ands	r2, r5
 800aa1a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800aa1e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aa22:	d816      	bhi.n	800aa52 <_strtod_l+0x892>
 800aa24:	0d12      	lsrs	r2, r2, #20
 800aa26:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800aa2a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa2e:	4298      	cmp	r0, r3
 800aa30:	d142      	bne.n	800aab8 <_strtod_l+0x8f8>
 800aa32:	4ba7      	ldr	r3, [pc, #668]	; (800acd0 <_strtod_l+0xb10>)
 800aa34:	429d      	cmp	r5, r3
 800aa36:	d102      	bne.n	800aa3e <_strtod_l+0x87e>
 800aa38:	3001      	adds	r0, #1
 800aa3a:	f43f addf 	beq.w	800a5fc <_strtod_l+0x43c>
 800aa3e:	4ba3      	ldr	r3, [pc, #652]	; (800accc <_strtod_l+0xb0c>)
 800aa40:	402b      	ands	r3, r5
 800aa42:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800aa46:	f04f 0a00 	mov.w	sl, #0
 800aa4a:	e7a0      	b.n	800a98e <_strtod_l+0x7ce>
 800aa4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa50:	e7ed      	b.n	800aa2e <_strtod_l+0x86e>
 800aa52:	460b      	mov	r3, r1
 800aa54:	e7eb      	b.n	800aa2e <_strtod_l+0x86e>
 800aa56:	bb7b      	cbnz	r3, 800aab8 <_strtod_l+0x8f8>
 800aa58:	f1ba 0f00 	cmp.w	sl, #0
 800aa5c:	d12c      	bne.n	800aab8 <_strtod_l+0x8f8>
 800aa5e:	9904      	ldr	r1, [sp, #16]
 800aa60:	4a9a      	ldr	r2, [pc, #616]	; (800accc <_strtod_l+0xb0c>)
 800aa62:	465b      	mov	r3, fp
 800aa64:	b1f1      	cbz	r1, 800aaa4 <_strtod_l+0x8e4>
 800aa66:	ea02 010b 	and.w	r1, r2, fp
 800aa6a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aa6e:	dc19      	bgt.n	800aaa4 <_strtod_l+0x8e4>
 800aa70:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aa74:	f77f ae5b 	ble.w	800a72e <_strtod_l+0x56e>
 800aa78:	4a96      	ldr	r2, [pc, #600]	; (800acd4 <_strtod_l+0xb14>)
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800aa80:	4650      	mov	r0, sl
 800aa82:	4659      	mov	r1, fp
 800aa84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800aa88:	f7f5 fdc6 	bl	8000618 <__aeabi_dmul>
 800aa8c:	4682      	mov	sl, r0
 800aa8e:	468b      	mov	fp, r1
 800aa90:	2900      	cmp	r1, #0
 800aa92:	f47f adbe 	bne.w	800a612 <_strtod_l+0x452>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	f47f adbb 	bne.w	800a612 <_strtod_l+0x452>
 800aa9c:	2322      	movs	r3, #34	; 0x22
 800aa9e:	f8c9 3000 	str.w	r3, [r9]
 800aaa2:	e5b6      	b.n	800a612 <_strtod_l+0x452>
 800aaa4:	4013      	ands	r3, r2
 800aaa6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aaaa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aaae:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aab2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800aab6:	e76a      	b.n	800a98e <_strtod_l+0x7ce>
 800aab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aaba:	b193      	cbz	r3, 800aae2 <_strtod_l+0x922>
 800aabc:	422b      	tst	r3, r5
 800aabe:	f43f af66 	beq.w	800a98e <_strtod_l+0x7ce>
 800aac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aac4:	9a04      	ldr	r2, [sp, #16]
 800aac6:	4650      	mov	r0, sl
 800aac8:	4659      	mov	r1, fp
 800aaca:	b173      	cbz	r3, 800aaea <_strtod_l+0x92a>
 800aacc:	f7ff fb5c 	bl	800a188 <sulp>
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aad8:	f7f5 fbe8 	bl	80002ac <__adddf3>
 800aadc:	4682      	mov	sl, r0
 800aade:	468b      	mov	fp, r1
 800aae0:	e755      	b.n	800a98e <_strtod_l+0x7ce>
 800aae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aae4:	ea13 0f0a 	tst.w	r3, sl
 800aae8:	e7e9      	b.n	800aabe <_strtod_l+0x8fe>
 800aaea:	f7ff fb4d 	bl	800a188 <sulp>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aaf6:	f7f5 fbd7 	bl	80002a8 <__aeabi_dsub>
 800aafa:	2200      	movs	r2, #0
 800aafc:	2300      	movs	r3, #0
 800aafe:	4682      	mov	sl, r0
 800ab00:	468b      	mov	fp, r1
 800ab02:	f7f5 fff1 	bl	8000ae8 <__aeabi_dcmpeq>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f47f ae11 	bne.w	800a72e <_strtod_l+0x56e>
 800ab0c:	e73f      	b.n	800a98e <_strtod_l+0x7ce>
 800ab0e:	4641      	mov	r1, r8
 800ab10:	4620      	mov	r0, r4
 800ab12:	f001 ff0c 	bl	800c92e <__ratio>
 800ab16:	ec57 6b10 	vmov	r6, r7, d0
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab20:	ee10 0a10 	vmov	r0, s0
 800ab24:	4639      	mov	r1, r7
 800ab26:	f7f5 fff3 	bl	8000b10 <__aeabi_dcmple>
 800ab2a:	2800      	cmp	r0, #0
 800ab2c:	d077      	beq.n	800ac1e <_strtod_l+0xa5e>
 800ab2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d04a      	beq.n	800abca <_strtod_l+0xa0a>
 800ab34:	4b68      	ldr	r3, [pc, #416]	; (800acd8 <_strtod_l+0xb18>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ab3c:	4f66      	ldr	r7, [pc, #408]	; (800acd8 <_strtod_l+0xb18>)
 800ab3e:	2600      	movs	r6, #0
 800ab40:	4b62      	ldr	r3, [pc, #392]	; (800accc <_strtod_l+0xb0c>)
 800ab42:	402b      	ands	r3, r5
 800ab44:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ab48:	4b64      	ldr	r3, [pc, #400]	; (800acdc <_strtod_l+0xb1c>)
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	f040 80ce 	bne.w	800acec <_strtod_l+0xb2c>
 800ab50:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ab54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab58:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800ab5c:	ec4b ab10 	vmov	d0, sl, fp
 800ab60:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ab64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ab68:	f001 fe1c 	bl	800c7a4 <__ulp>
 800ab6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ab70:	ec53 2b10 	vmov	r2, r3, d0
 800ab74:	f7f5 fd50 	bl	8000618 <__aeabi_dmul>
 800ab78:	4652      	mov	r2, sl
 800ab7a:	465b      	mov	r3, fp
 800ab7c:	f7f5 fb96 	bl	80002ac <__adddf3>
 800ab80:	460b      	mov	r3, r1
 800ab82:	4952      	ldr	r1, [pc, #328]	; (800accc <_strtod_l+0xb0c>)
 800ab84:	4a56      	ldr	r2, [pc, #344]	; (800ace0 <_strtod_l+0xb20>)
 800ab86:	4019      	ands	r1, r3
 800ab88:	4291      	cmp	r1, r2
 800ab8a:	4682      	mov	sl, r0
 800ab8c:	d95b      	bls.n	800ac46 <_strtod_l+0xa86>
 800ab8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab90:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d103      	bne.n	800aba0 <_strtod_l+0x9e0>
 800ab98:	9b08      	ldr	r3, [sp, #32]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	f43f ad2e 	beq.w	800a5fc <_strtod_l+0x43c>
 800aba0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800acd0 <_strtod_l+0xb10>
 800aba4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800aba8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800abaa:	4648      	mov	r0, r9
 800abac:	f001 fb62 	bl	800c274 <_Bfree>
 800abb0:	9905      	ldr	r1, [sp, #20]
 800abb2:	4648      	mov	r0, r9
 800abb4:	f001 fb5e 	bl	800c274 <_Bfree>
 800abb8:	4641      	mov	r1, r8
 800abba:	4648      	mov	r0, r9
 800abbc:	f001 fb5a 	bl	800c274 <_Bfree>
 800abc0:	4621      	mov	r1, r4
 800abc2:	4648      	mov	r0, r9
 800abc4:	f001 fb56 	bl	800c274 <_Bfree>
 800abc8:	e619      	b.n	800a7fe <_strtod_l+0x63e>
 800abca:	f1ba 0f00 	cmp.w	sl, #0
 800abce:	d11a      	bne.n	800ac06 <_strtod_l+0xa46>
 800abd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abd4:	b9eb      	cbnz	r3, 800ac12 <_strtod_l+0xa52>
 800abd6:	2200      	movs	r2, #0
 800abd8:	4b3f      	ldr	r3, [pc, #252]	; (800acd8 <_strtod_l+0xb18>)
 800abda:	4630      	mov	r0, r6
 800abdc:	4639      	mov	r1, r7
 800abde:	f7f5 ff8d 	bl	8000afc <__aeabi_dcmplt>
 800abe2:	b9c8      	cbnz	r0, 800ac18 <_strtod_l+0xa58>
 800abe4:	4630      	mov	r0, r6
 800abe6:	4639      	mov	r1, r7
 800abe8:	2200      	movs	r2, #0
 800abea:	4b3e      	ldr	r3, [pc, #248]	; (800ace4 <_strtod_l+0xb24>)
 800abec:	f7f5 fd14 	bl	8000618 <__aeabi_dmul>
 800abf0:	4606      	mov	r6, r0
 800abf2:	460f      	mov	r7, r1
 800abf4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800abf8:	9618      	str	r6, [sp, #96]	; 0x60
 800abfa:	9319      	str	r3, [sp, #100]	; 0x64
 800abfc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ac00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ac04:	e79c      	b.n	800ab40 <_strtod_l+0x980>
 800ac06:	f1ba 0f01 	cmp.w	sl, #1
 800ac0a:	d102      	bne.n	800ac12 <_strtod_l+0xa52>
 800ac0c:	2d00      	cmp	r5, #0
 800ac0e:	f43f ad8e 	beq.w	800a72e <_strtod_l+0x56e>
 800ac12:	2200      	movs	r2, #0
 800ac14:	4b34      	ldr	r3, [pc, #208]	; (800ace8 <_strtod_l+0xb28>)
 800ac16:	e78f      	b.n	800ab38 <_strtod_l+0x978>
 800ac18:	2600      	movs	r6, #0
 800ac1a:	4f32      	ldr	r7, [pc, #200]	; (800ace4 <_strtod_l+0xb24>)
 800ac1c:	e7ea      	b.n	800abf4 <_strtod_l+0xa34>
 800ac1e:	4b31      	ldr	r3, [pc, #196]	; (800ace4 <_strtod_l+0xb24>)
 800ac20:	4630      	mov	r0, r6
 800ac22:	4639      	mov	r1, r7
 800ac24:	2200      	movs	r2, #0
 800ac26:	f7f5 fcf7 	bl	8000618 <__aeabi_dmul>
 800ac2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac2c:	4606      	mov	r6, r0
 800ac2e:	460f      	mov	r7, r1
 800ac30:	b933      	cbnz	r3, 800ac40 <_strtod_l+0xa80>
 800ac32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac36:	9010      	str	r0, [sp, #64]	; 0x40
 800ac38:	9311      	str	r3, [sp, #68]	; 0x44
 800ac3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac3e:	e7df      	b.n	800ac00 <_strtod_l+0xa40>
 800ac40:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ac44:	e7f9      	b.n	800ac3a <_strtod_l+0xa7a>
 800ac46:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ac4a:	9b04      	ldr	r3, [sp, #16]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1ab      	bne.n	800aba8 <_strtod_l+0x9e8>
 800ac50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac54:	0d1b      	lsrs	r3, r3, #20
 800ac56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac58:	051b      	lsls	r3, r3, #20
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	465d      	mov	r5, fp
 800ac5e:	d1a3      	bne.n	800aba8 <_strtod_l+0x9e8>
 800ac60:	4639      	mov	r1, r7
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7f5 ff88 	bl	8000b78 <__aeabi_d2iz>
 800ac68:	f7f5 fc6c 	bl	8000544 <__aeabi_i2d>
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	4602      	mov	r2, r0
 800ac70:	4639      	mov	r1, r7
 800ac72:	4630      	mov	r0, r6
 800ac74:	f7f5 fb18 	bl	80002a8 <__aeabi_dsub>
 800ac78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	b933      	cbnz	r3, 800ac8e <_strtod_l+0xace>
 800ac80:	f1ba 0f00 	cmp.w	sl, #0
 800ac84:	d103      	bne.n	800ac8e <_strtod_l+0xace>
 800ac86:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ac8a:	2d00      	cmp	r5, #0
 800ac8c:	d06d      	beq.n	800ad6a <_strtod_l+0xbaa>
 800ac8e:	a30a      	add	r3, pc, #40	; (adr r3, 800acb8 <_strtod_l+0xaf8>)
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	4630      	mov	r0, r6
 800ac96:	4639      	mov	r1, r7
 800ac98:	f7f5 ff30 	bl	8000afc <__aeabi_dcmplt>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	f47f acb8 	bne.w	800a612 <_strtod_l+0x452>
 800aca2:	a307      	add	r3, pc, #28	; (adr r3, 800acc0 <_strtod_l+0xb00>)
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	4630      	mov	r0, r6
 800acaa:	4639      	mov	r1, r7
 800acac:	f7f5 ff44 	bl	8000b38 <__aeabi_dcmpgt>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	f43f af79 	beq.w	800aba8 <_strtod_l+0x9e8>
 800acb6:	e4ac      	b.n	800a612 <_strtod_l+0x452>
 800acb8:	94a03595 	.word	0x94a03595
 800acbc:	3fdfffff 	.word	0x3fdfffff
 800acc0:	35afe535 	.word	0x35afe535
 800acc4:	3fe00000 	.word	0x3fe00000
 800acc8:	000fffff 	.word	0x000fffff
 800accc:	7ff00000 	.word	0x7ff00000
 800acd0:	7fefffff 	.word	0x7fefffff
 800acd4:	39500000 	.word	0x39500000
 800acd8:	3ff00000 	.word	0x3ff00000
 800acdc:	7fe00000 	.word	0x7fe00000
 800ace0:	7c9fffff 	.word	0x7c9fffff
 800ace4:	3fe00000 	.word	0x3fe00000
 800ace8:	bff00000 	.word	0xbff00000
 800acec:	9b04      	ldr	r3, [sp, #16]
 800acee:	b333      	cbz	r3, 800ad3e <_strtod_l+0xb7e>
 800acf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800acf2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800acf6:	d822      	bhi.n	800ad3e <_strtod_l+0xb7e>
 800acf8:	a327      	add	r3, pc, #156	; (adr r3, 800ad98 <_strtod_l+0xbd8>)
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	4630      	mov	r0, r6
 800ad00:	4639      	mov	r1, r7
 800ad02:	f7f5 ff05 	bl	8000b10 <__aeabi_dcmple>
 800ad06:	b1a0      	cbz	r0, 800ad32 <_strtod_l+0xb72>
 800ad08:	4639      	mov	r1, r7
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	f7f5 ff5c 	bl	8000bc8 <__aeabi_d2uiz>
 800ad10:	2800      	cmp	r0, #0
 800ad12:	bf08      	it	eq
 800ad14:	2001      	moveq	r0, #1
 800ad16:	f7f5 fc05 	bl	8000524 <__aeabi_ui2d>
 800ad1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	460f      	mov	r7, r1
 800ad20:	bb03      	cbnz	r3, 800ad64 <_strtod_l+0xba4>
 800ad22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad26:	9012      	str	r0, [sp, #72]	; 0x48
 800ad28:	9313      	str	r3, [sp, #76]	; 0x4c
 800ad2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ad2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ad32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ad36:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ad3a:	1a9b      	subs	r3, r3, r2
 800ad3c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad3e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ad42:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ad46:	f001 fd2d 	bl	800c7a4 <__ulp>
 800ad4a:	4650      	mov	r0, sl
 800ad4c:	ec53 2b10 	vmov	r2, r3, d0
 800ad50:	4659      	mov	r1, fp
 800ad52:	f7f5 fc61 	bl	8000618 <__aeabi_dmul>
 800ad56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad5a:	f7f5 faa7 	bl	80002ac <__adddf3>
 800ad5e:	4682      	mov	sl, r0
 800ad60:	468b      	mov	fp, r1
 800ad62:	e772      	b.n	800ac4a <_strtod_l+0xa8a>
 800ad64:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ad68:	e7df      	b.n	800ad2a <_strtod_l+0xb6a>
 800ad6a:	a30d      	add	r3, pc, #52	; (adr r3, 800ada0 <_strtod_l+0xbe0>)
 800ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad70:	f7f5 fec4 	bl	8000afc <__aeabi_dcmplt>
 800ad74:	e79c      	b.n	800acb0 <_strtod_l+0xaf0>
 800ad76:	2300      	movs	r3, #0
 800ad78:	930d      	str	r3, [sp, #52]	; 0x34
 800ad7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	f7ff ba61 	b.w	800a246 <_strtod_l+0x86>
 800ad84:	2b65      	cmp	r3, #101	; 0x65
 800ad86:	f04f 0200 	mov.w	r2, #0
 800ad8a:	f43f ab4e 	beq.w	800a42a <_strtod_l+0x26a>
 800ad8e:	2101      	movs	r1, #1
 800ad90:	4614      	mov	r4, r2
 800ad92:	9104      	str	r1, [sp, #16]
 800ad94:	f7ff bacb 	b.w	800a32e <_strtod_l+0x16e>
 800ad98:	ffc00000 	.word	0xffc00000
 800ad9c:	41dfffff 	.word	0x41dfffff
 800ada0:	94a03595 	.word	0x94a03595
 800ada4:	3fcfffff 	.word	0x3fcfffff

0800ada8 <_strtod_r>:
 800ada8:	4b05      	ldr	r3, [pc, #20]	; (800adc0 <_strtod_r+0x18>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	b410      	push	{r4}
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	4c04      	ldr	r4, [pc, #16]	; (800adc4 <_strtod_r+0x1c>)
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	bf08      	it	eq
 800adb6:	4623      	moveq	r3, r4
 800adb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adbc:	f7ff ba00 	b.w	800a1c0 <_strtod_l>
 800adc0:	2000002c 	.word	0x2000002c
 800adc4:	20000090 	.word	0x20000090

0800adc8 <_strtol_l.isra.0>:
 800adc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adcc:	4680      	mov	r8, r0
 800adce:	4689      	mov	r9, r1
 800add0:	4692      	mov	sl, r2
 800add2:	461e      	mov	r6, r3
 800add4:	460f      	mov	r7, r1
 800add6:	463d      	mov	r5, r7
 800add8:	9808      	ldr	r0, [sp, #32]
 800adda:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adde:	f001 f9ed 	bl	800c1bc <__locale_ctype_ptr_l>
 800ade2:	4420      	add	r0, r4
 800ade4:	7843      	ldrb	r3, [r0, #1]
 800ade6:	f013 0308 	ands.w	r3, r3, #8
 800adea:	d132      	bne.n	800ae52 <_strtol_l.isra.0+0x8a>
 800adec:	2c2d      	cmp	r4, #45	; 0x2d
 800adee:	d132      	bne.n	800ae56 <_strtol_l.isra.0+0x8e>
 800adf0:	787c      	ldrb	r4, [r7, #1]
 800adf2:	1cbd      	adds	r5, r7, #2
 800adf4:	2201      	movs	r2, #1
 800adf6:	2e00      	cmp	r6, #0
 800adf8:	d05d      	beq.n	800aeb6 <_strtol_l.isra.0+0xee>
 800adfa:	2e10      	cmp	r6, #16
 800adfc:	d109      	bne.n	800ae12 <_strtol_l.isra.0+0x4a>
 800adfe:	2c30      	cmp	r4, #48	; 0x30
 800ae00:	d107      	bne.n	800ae12 <_strtol_l.isra.0+0x4a>
 800ae02:	782b      	ldrb	r3, [r5, #0]
 800ae04:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ae08:	2b58      	cmp	r3, #88	; 0x58
 800ae0a:	d14f      	bne.n	800aeac <_strtol_l.isra.0+0xe4>
 800ae0c:	786c      	ldrb	r4, [r5, #1]
 800ae0e:	2610      	movs	r6, #16
 800ae10:	3502      	adds	r5, #2
 800ae12:	2a00      	cmp	r2, #0
 800ae14:	bf14      	ite	ne
 800ae16:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ae1a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ae1e:	2700      	movs	r7, #0
 800ae20:	fbb1 fcf6 	udiv	ip, r1, r6
 800ae24:	4638      	mov	r0, r7
 800ae26:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ae2a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ae2e:	2b09      	cmp	r3, #9
 800ae30:	d817      	bhi.n	800ae62 <_strtol_l.isra.0+0x9a>
 800ae32:	461c      	mov	r4, r3
 800ae34:	42a6      	cmp	r6, r4
 800ae36:	dd23      	ble.n	800ae80 <_strtol_l.isra.0+0xb8>
 800ae38:	1c7b      	adds	r3, r7, #1
 800ae3a:	d007      	beq.n	800ae4c <_strtol_l.isra.0+0x84>
 800ae3c:	4584      	cmp	ip, r0
 800ae3e:	d31c      	bcc.n	800ae7a <_strtol_l.isra.0+0xb2>
 800ae40:	d101      	bne.n	800ae46 <_strtol_l.isra.0+0x7e>
 800ae42:	45a6      	cmp	lr, r4
 800ae44:	db19      	blt.n	800ae7a <_strtol_l.isra.0+0xb2>
 800ae46:	fb00 4006 	mla	r0, r0, r6, r4
 800ae4a:	2701      	movs	r7, #1
 800ae4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae50:	e7eb      	b.n	800ae2a <_strtol_l.isra.0+0x62>
 800ae52:	462f      	mov	r7, r5
 800ae54:	e7bf      	b.n	800add6 <_strtol_l.isra.0+0xe>
 800ae56:	2c2b      	cmp	r4, #43	; 0x2b
 800ae58:	bf04      	itt	eq
 800ae5a:	1cbd      	addeq	r5, r7, #2
 800ae5c:	787c      	ldrbeq	r4, [r7, #1]
 800ae5e:	461a      	mov	r2, r3
 800ae60:	e7c9      	b.n	800adf6 <_strtol_l.isra.0+0x2e>
 800ae62:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ae66:	2b19      	cmp	r3, #25
 800ae68:	d801      	bhi.n	800ae6e <_strtol_l.isra.0+0xa6>
 800ae6a:	3c37      	subs	r4, #55	; 0x37
 800ae6c:	e7e2      	b.n	800ae34 <_strtol_l.isra.0+0x6c>
 800ae6e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800ae72:	2b19      	cmp	r3, #25
 800ae74:	d804      	bhi.n	800ae80 <_strtol_l.isra.0+0xb8>
 800ae76:	3c57      	subs	r4, #87	; 0x57
 800ae78:	e7dc      	b.n	800ae34 <_strtol_l.isra.0+0x6c>
 800ae7a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ae7e:	e7e5      	b.n	800ae4c <_strtol_l.isra.0+0x84>
 800ae80:	1c7b      	adds	r3, r7, #1
 800ae82:	d108      	bne.n	800ae96 <_strtol_l.isra.0+0xce>
 800ae84:	2322      	movs	r3, #34	; 0x22
 800ae86:	f8c8 3000 	str.w	r3, [r8]
 800ae8a:	4608      	mov	r0, r1
 800ae8c:	f1ba 0f00 	cmp.w	sl, #0
 800ae90:	d107      	bne.n	800aea2 <_strtol_l.isra.0+0xda>
 800ae92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae96:	b102      	cbz	r2, 800ae9a <_strtol_l.isra.0+0xd2>
 800ae98:	4240      	negs	r0, r0
 800ae9a:	f1ba 0f00 	cmp.w	sl, #0
 800ae9e:	d0f8      	beq.n	800ae92 <_strtol_l.isra.0+0xca>
 800aea0:	b10f      	cbz	r7, 800aea6 <_strtol_l.isra.0+0xde>
 800aea2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800aea6:	f8ca 9000 	str.w	r9, [sl]
 800aeaa:	e7f2      	b.n	800ae92 <_strtol_l.isra.0+0xca>
 800aeac:	2430      	movs	r4, #48	; 0x30
 800aeae:	2e00      	cmp	r6, #0
 800aeb0:	d1af      	bne.n	800ae12 <_strtol_l.isra.0+0x4a>
 800aeb2:	2608      	movs	r6, #8
 800aeb4:	e7ad      	b.n	800ae12 <_strtol_l.isra.0+0x4a>
 800aeb6:	2c30      	cmp	r4, #48	; 0x30
 800aeb8:	d0a3      	beq.n	800ae02 <_strtol_l.isra.0+0x3a>
 800aeba:	260a      	movs	r6, #10
 800aebc:	e7a9      	b.n	800ae12 <_strtol_l.isra.0+0x4a>
	...

0800aec0 <_strtol_r>:
 800aec0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aec2:	4c06      	ldr	r4, [pc, #24]	; (800aedc <_strtol_r+0x1c>)
 800aec4:	4d06      	ldr	r5, [pc, #24]	; (800aee0 <_strtol_r+0x20>)
 800aec6:	6824      	ldr	r4, [r4, #0]
 800aec8:	6a24      	ldr	r4, [r4, #32]
 800aeca:	2c00      	cmp	r4, #0
 800aecc:	bf08      	it	eq
 800aece:	462c      	moveq	r4, r5
 800aed0:	9400      	str	r4, [sp, #0]
 800aed2:	f7ff ff79 	bl	800adc8 <_strtol_l.isra.0>
 800aed6:	b003      	add	sp, #12
 800aed8:	bd30      	pop	{r4, r5, pc}
 800aeda:	bf00      	nop
 800aedc:	2000002c 	.word	0x2000002c
 800aee0:	20000090 	.word	0x20000090

0800aee4 <quorem>:
 800aee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	6903      	ldr	r3, [r0, #16]
 800aeea:	690c      	ldr	r4, [r1, #16]
 800aeec:	42a3      	cmp	r3, r4
 800aeee:	4680      	mov	r8, r0
 800aef0:	f2c0 8082 	blt.w	800aff8 <quorem+0x114>
 800aef4:	3c01      	subs	r4, #1
 800aef6:	f101 0714 	add.w	r7, r1, #20
 800aefa:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800aefe:	f100 0614 	add.w	r6, r0, #20
 800af02:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800af06:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800af0a:	eb06 030c 	add.w	r3, r6, ip
 800af0e:	3501      	adds	r5, #1
 800af10:	eb07 090c 	add.w	r9, r7, ip
 800af14:	9301      	str	r3, [sp, #4]
 800af16:	fbb0 f5f5 	udiv	r5, r0, r5
 800af1a:	b395      	cbz	r5, 800af82 <quorem+0x9e>
 800af1c:	f04f 0a00 	mov.w	sl, #0
 800af20:	4638      	mov	r0, r7
 800af22:	46b6      	mov	lr, r6
 800af24:	46d3      	mov	fp, sl
 800af26:	f850 2b04 	ldr.w	r2, [r0], #4
 800af2a:	b293      	uxth	r3, r2
 800af2c:	fb05 a303 	mla	r3, r5, r3, sl
 800af30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af34:	b29b      	uxth	r3, r3
 800af36:	ebab 0303 	sub.w	r3, fp, r3
 800af3a:	0c12      	lsrs	r2, r2, #16
 800af3c:	f8de b000 	ldr.w	fp, [lr]
 800af40:	fb05 a202 	mla	r2, r5, r2, sl
 800af44:	fa13 f38b 	uxtah	r3, r3, fp
 800af48:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800af4c:	fa1f fb82 	uxth.w	fp, r2
 800af50:	f8de 2000 	ldr.w	r2, [lr]
 800af54:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800af58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af62:	4581      	cmp	r9, r0
 800af64:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800af68:	f84e 3b04 	str.w	r3, [lr], #4
 800af6c:	d2db      	bcs.n	800af26 <quorem+0x42>
 800af6e:	f856 300c 	ldr.w	r3, [r6, ip]
 800af72:	b933      	cbnz	r3, 800af82 <quorem+0x9e>
 800af74:	9b01      	ldr	r3, [sp, #4]
 800af76:	3b04      	subs	r3, #4
 800af78:	429e      	cmp	r6, r3
 800af7a:	461a      	mov	r2, r3
 800af7c:	d330      	bcc.n	800afe0 <quorem+0xfc>
 800af7e:	f8c8 4010 	str.w	r4, [r8, #16]
 800af82:	4640      	mov	r0, r8
 800af84:	f001 fb96 	bl	800c6b4 <__mcmp>
 800af88:	2800      	cmp	r0, #0
 800af8a:	db25      	blt.n	800afd8 <quorem+0xf4>
 800af8c:	3501      	adds	r5, #1
 800af8e:	4630      	mov	r0, r6
 800af90:	f04f 0c00 	mov.w	ip, #0
 800af94:	f857 2b04 	ldr.w	r2, [r7], #4
 800af98:	f8d0 e000 	ldr.w	lr, [r0]
 800af9c:	b293      	uxth	r3, r2
 800af9e:	ebac 0303 	sub.w	r3, ip, r3
 800afa2:	0c12      	lsrs	r2, r2, #16
 800afa4:	fa13 f38e 	uxtah	r3, r3, lr
 800afa8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800afac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afb6:	45b9      	cmp	r9, r7
 800afb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800afbc:	f840 3b04 	str.w	r3, [r0], #4
 800afc0:	d2e8      	bcs.n	800af94 <quorem+0xb0>
 800afc2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800afc6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800afca:	b92a      	cbnz	r2, 800afd8 <quorem+0xf4>
 800afcc:	3b04      	subs	r3, #4
 800afce:	429e      	cmp	r6, r3
 800afd0:	461a      	mov	r2, r3
 800afd2:	d30b      	bcc.n	800afec <quorem+0x108>
 800afd4:	f8c8 4010 	str.w	r4, [r8, #16]
 800afd8:	4628      	mov	r0, r5
 800afda:	b003      	add	sp, #12
 800afdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe0:	6812      	ldr	r2, [r2, #0]
 800afe2:	3b04      	subs	r3, #4
 800afe4:	2a00      	cmp	r2, #0
 800afe6:	d1ca      	bne.n	800af7e <quorem+0x9a>
 800afe8:	3c01      	subs	r4, #1
 800afea:	e7c5      	b.n	800af78 <quorem+0x94>
 800afec:	6812      	ldr	r2, [r2, #0]
 800afee:	3b04      	subs	r3, #4
 800aff0:	2a00      	cmp	r2, #0
 800aff2:	d1ef      	bne.n	800afd4 <quorem+0xf0>
 800aff4:	3c01      	subs	r4, #1
 800aff6:	e7ea      	b.n	800afce <quorem+0xea>
 800aff8:	2000      	movs	r0, #0
 800affa:	e7ee      	b.n	800afda <quorem+0xf6>
 800affc:	0000      	movs	r0, r0
	...

0800b000 <_dtoa_r>:
 800b000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b004:	ec57 6b10 	vmov	r6, r7, d0
 800b008:	b097      	sub	sp, #92	; 0x5c
 800b00a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b00c:	9106      	str	r1, [sp, #24]
 800b00e:	4604      	mov	r4, r0
 800b010:	920b      	str	r2, [sp, #44]	; 0x2c
 800b012:	9312      	str	r3, [sp, #72]	; 0x48
 800b014:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b018:	e9cd 6700 	strd	r6, r7, [sp]
 800b01c:	b93d      	cbnz	r5, 800b02e <_dtoa_r+0x2e>
 800b01e:	2010      	movs	r0, #16
 800b020:	f7fe f950 	bl	80092c4 <malloc>
 800b024:	6260      	str	r0, [r4, #36]	; 0x24
 800b026:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b02a:	6005      	str	r5, [r0, #0]
 800b02c:	60c5      	str	r5, [r0, #12]
 800b02e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b030:	6819      	ldr	r1, [r3, #0]
 800b032:	b151      	cbz	r1, 800b04a <_dtoa_r+0x4a>
 800b034:	685a      	ldr	r2, [r3, #4]
 800b036:	604a      	str	r2, [r1, #4]
 800b038:	2301      	movs	r3, #1
 800b03a:	4093      	lsls	r3, r2
 800b03c:	608b      	str	r3, [r1, #8]
 800b03e:	4620      	mov	r0, r4
 800b040:	f001 f918 	bl	800c274 <_Bfree>
 800b044:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b046:	2200      	movs	r2, #0
 800b048:	601a      	str	r2, [r3, #0]
 800b04a:	1e3b      	subs	r3, r7, #0
 800b04c:	bfbb      	ittet	lt
 800b04e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b052:	9301      	strlt	r3, [sp, #4]
 800b054:	2300      	movge	r3, #0
 800b056:	2201      	movlt	r2, #1
 800b058:	bfac      	ite	ge
 800b05a:	f8c8 3000 	strge.w	r3, [r8]
 800b05e:	f8c8 2000 	strlt.w	r2, [r8]
 800b062:	4baf      	ldr	r3, [pc, #700]	; (800b320 <_dtoa_r+0x320>)
 800b064:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b068:	ea33 0308 	bics.w	r3, r3, r8
 800b06c:	d114      	bne.n	800b098 <_dtoa_r+0x98>
 800b06e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b070:	f242 730f 	movw	r3, #9999	; 0x270f
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	9b00      	ldr	r3, [sp, #0]
 800b078:	b923      	cbnz	r3, 800b084 <_dtoa_r+0x84>
 800b07a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800b07e:	2800      	cmp	r0, #0
 800b080:	f000 8542 	beq.w	800bb08 <_dtoa_r+0xb08>
 800b084:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b086:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800b334 <_dtoa_r+0x334>
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	f000 8544 	beq.w	800bb18 <_dtoa_r+0xb18>
 800b090:	f10b 0303 	add.w	r3, fp, #3
 800b094:	f000 bd3e 	b.w	800bb14 <_dtoa_r+0xb14>
 800b098:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b09c:	2200      	movs	r2, #0
 800b09e:	2300      	movs	r3, #0
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	f7f5 fd20 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0a8:	4681      	mov	r9, r0
 800b0aa:	b168      	cbz	r0, 800b0c8 <_dtoa_r+0xc8>
 800b0ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 8524 	beq.w	800bb02 <_dtoa_r+0xb02>
 800b0ba:	4b9a      	ldr	r3, [pc, #616]	; (800b324 <_dtoa_r+0x324>)
 800b0bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0be:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800b0c2:	6013      	str	r3, [r2, #0]
 800b0c4:	f000 bd28 	b.w	800bb18 <_dtoa_r+0xb18>
 800b0c8:	aa14      	add	r2, sp, #80	; 0x50
 800b0ca:	a915      	add	r1, sp, #84	; 0x54
 800b0cc:	ec47 6b10 	vmov	d0, r6, r7
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f001 fbdd 	bl	800c890 <__d2b>
 800b0d6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b0da:	9004      	str	r0, [sp, #16]
 800b0dc:	2d00      	cmp	r5, #0
 800b0de:	d07c      	beq.n	800b1da <_dtoa_r+0x1da>
 800b0e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0e4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800b0e8:	46b2      	mov	sl, r6
 800b0ea:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800b0ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0f2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	4b8b      	ldr	r3, [pc, #556]	; (800b328 <_dtoa_r+0x328>)
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	4659      	mov	r1, fp
 800b0fe:	f7f5 f8d3 	bl	80002a8 <__aeabi_dsub>
 800b102:	a381      	add	r3, pc, #516	; (adr r3, 800b308 <_dtoa_r+0x308>)
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	f7f5 fa86 	bl	8000618 <__aeabi_dmul>
 800b10c:	a380      	add	r3, pc, #512	; (adr r3, 800b310 <_dtoa_r+0x310>)
 800b10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b112:	f7f5 f8cb 	bl	80002ac <__adddf3>
 800b116:	4606      	mov	r6, r0
 800b118:	4628      	mov	r0, r5
 800b11a:	460f      	mov	r7, r1
 800b11c:	f7f5 fa12 	bl	8000544 <__aeabi_i2d>
 800b120:	a37d      	add	r3, pc, #500	; (adr r3, 800b318 <_dtoa_r+0x318>)
 800b122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b126:	f7f5 fa77 	bl	8000618 <__aeabi_dmul>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	4630      	mov	r0, r6
 800b130:	4639      	mov	r1, r7
 800b132:	f7f5 f8bb 	bl	80002ac <__adddf3>
 800b136:	4606      	mov	r6, r0
 800b138:	460f      	mov	r7, r1
 800b13a:	f7f5 fd1d 	bl	8000b78 <__aeabi_d2iz>
 800b13e:	2200      	movs	r2, #0
 800b140:	4682      	mov	sl, r0
 800b142:	2300      	movs	r3, #0
 800b144:	4630      	mov	r0, r6
 800b146:	4639      	mov	r1, r7
 800b148:	f7f5 fcd8 	bl	8000afc <__aeabi_dcmplt>
 800b14c:	b148      	cbz	r0, 800b162 <_dtoa_r+0x162>
 800b14e:	4650      	mov	r0, sl
 800b150:	f7f5 f9f8 	bl	8000544 <__aeabi_i2d>
 800b154:	4632      	mov	r2, r6
 800b156:	463b      	mov	r3, r7
 800b158:	f7f5 fcc6 	bl	8000ae8 <__aeabi_dcmpeq>
 800b15c:	b908      	cbnz	r0, 800b162 <_dtoa_r+0x162>
 800b15e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b162:	f1ba 0f16 	cmp.w	sl, #22
 800b166:	d859      	bhi.n	800b21c <_dtoa_r+0x21c>
 800b168:	4970      	ldr	r1, [pc, #448]	; (800b32c <_dtoa_r+0x32c>)
 800b16a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b16e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b172:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b176:	f7f5 fcdf 	bl	8000b38 <__aeabi_dcmpgt>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	d050      	beq.n	800b220 <_dtoa_r+0x220>
 800b17e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b182:	2300      	movs	r3, #0
 800b184:	930f      	str	r3, [sp, #60]	; 0x3c
 800b186:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b188:	1b5d      	subs	r5, r3, r5
 800b18a:	f1b5 0801 	subs.w	r8, r5, #1
 800b18e:	bf49      	itett	mi
 800b190:	f1c5 0301 	rsbmi	r3, r5, #1
 800b194:	2300      	movpl	r3, #0
 800b196:	9305      	strmi	r3, [sp, #20]
 800b198:	f04f 0800 	movmi.w	r8, #0
 800b19c:	bf58      	it	pl
 800b19e:	9305      	strpl	r3, [sp, #20]
 800b1a0:	f1ba 0f00 	cmp.w	sl, #0
 800b1a4:	db3e      	blt.n	800b224 <_dtoa_r+0x224>
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	44d0      	add	r8, sl
 800b1aa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b1ae:	9307      	str	r3, [sp, #28]
 800b1b0:	9b06      	ldr	r3, [sp, #24]
 800b1b2:	2b09      	cmp	r3, #9
 800b1b4:	f200 8090 	bhi.w	800b2d8 <_dtoa_r+0x2d8>
 800b1b8:	2b05      	cmp	r3, #5
 800b1ba:	bfc4      	itt	gt
 800b1bc:	3b04      	subgt	r3, #4
 800b1be:	9306      	strgt	r3, [sp, #24]
 800b1c0:	9b06      	ldr	r3, [sp, #24]
 800b1c2:	f1a3 0302 	sub.w	r3, r3, #2
 800b1c6:	bfcc      	ite	gt
 800b1c8:	2500      	movgt	r5, #0
 800b1ca:	2501      	movle	r5, #1
 800b1cc:	2b03      	cmp	r3, #3
 800b1ce:	f200 808f 	bhi.w	800b2f0 <_dtoa_r+0x2f0>
 800b1d2:	e8df f003 	tbb	[pc, r3]
 800b1d6:	7f7d      	.short	0x7f7d
 800b1d8:	7131      	.short	0x7131
 800b1da:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800b1de:	441d      	add	r5, r3
 800b1e0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800b1e4:	2820      	cmp	r0, #32
 800b1e6:	dd13      	ble.n	800b210 <_dtoa_r+0x210>
 800b1e8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800b1ec:	9b00      	ldr	r3, [sp, #0]
 800b1ee:	fa08 f800 	lsl.w	r8, r8, r0
 800b1f2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b1f6:	fa23 f000 	lsr.w	r0, r3, r0
 800b1fa:	ea48 0000 	orr.w	r0, r8, r0
 800b1fe:	f7f5 f991 	bl	8000524 <__aeabi_ui2d>
 800b202:	2301      	movs	r3, #1
 800b204:	4682      	mov	sl, r0
 800b206:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800b20a:	3d01      	subs	r5, #1
 800b20c:	9313      	str	r3, [sp, #76]	; 0x4c
 800b20e:	e772      	b.n	800b0f6 <_dtoa_r+0xf6>
 800b210:	9b00      	ldr	r3, [sp, #0]
 800b212:	f1c0 0020 	rsb	r0, r0, #32
 800b216:	fa03 f000 	lsl.w	r0, r3, r0
 800b21a:	e7f0      	b.n	800b1fe <_dtoa_r+0x1fe>
 800b21c:	2301      	movs	r3, #1
 800b21e:	e7b1      	b.n	800b184 <_dtoa_r+0x184>
 800b220:	900f      	str	r0, [sp, #60]	; 0x3c
 800b222:	e7b0      	b.n	800b186 <_dtoa_r+0x186>
 800b224:	9b05      	ldr	r3, [sp, #20]
 800b226:	eba3 030a 	sub.w	r3, r3, sl
 800b22a:	9305      	str	r3, [sp, #20]
 800b22c:	f1ca 0300 	rsb	r3, sl, #0
 800b230:	9307      	str	r3, [sp, #28]
 800b232:	2300      	movs	r3, #0
 800b234:	930e      	str	r3, [sp, #56]	; 0x38
 800b236:	e7bb      	b.n	800b1b0 <_dtoa_r+0x1b0>
 800b238:	2301      	movs	r3, #1
 800b23a:	930a      	str	r3, [sp, #40]	; 0x28
 800b23c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b23e:	2b00      	cmp	r3, #0
 800b240:	dd59      	ble.n	800b2f6 <_dtoa_r+0x2f6>
 800b242:	9302      	str	r3, [sp, #8]
 800b244:	4699      	mov	r9, r3
 800b246:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b248:	2200      	movs	r2, #0
 800b24a:	6072      	str	r2, [r6, #4]
 800b24c:	2204      	movs	r2, #4
 800b24e:	f102 0014 	add.w	r0, r2, #20
 800b252:	4298      	cmp	r0, r3
 800b254:	6871      	ldr	r1, [r6, #4]
 800b256:	d953      	bls.n	800b300 <_dtoa_r+0x300>
 800b258:	4620      	mov	r0, r4
 800b25a:	f000 ffd7 	bl	800c20c <_Balloc>
 800b25e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b260:	6030      	str	r0, [r6, #0]
 800b262:	f1b9 0f0e 	cmp.w	r9, #14
 800b266:	f8d3 b000 	ldr.w	fp, [r3]
 800b26a:	f200 80e6 	bhi.w	800b43a <_dtoa_r+0x43a>
 800b26e:	2d00      	cmp	r5, #0
 800b270:	f000 80e3 	beq.w	800b43a <_dtoa_r+0x43a>
 800b274:	ed9d 7b00 	vldr	d7, [sp]
 800b278:	f1ba 0f00 	cmp.w	sl, #0
 800b27c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800b280:	dd74      	ble.n	800b36c <_dtoa_r+0x36c>
 800b282:	4a2a      	ldr	r2, [pc, #168]	; (800b32c <_dtoa_r+0x32c>)
 800b284:	f00a 030f 	and.w	r3, sl, #15
 800b288:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b28c:	ed93 7b00 	vldr	d7, [r3]
 800b290:	ea4f 162a 	mov.w	r6, sl, asr #4
 800b294:	06f0      	lsls	r0, r6, #27
 800b296:	ed8d 7b08 	vstr	d7, [sp, #32]
 800b29a:	d565      	bpl.n	800b368 <_dtoa_r+0x368>
 800b29c:	4b24      	ldr	r3, [pc, #144]	; (800b330 <_dtoa_r+0x330>)
 800b29e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b2a2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2a6:	f7f5 fae1 	bl	800086c <__aeabi_ddiv>
 800b2aa:	e9cd 0100 	strd	r0, r1, [sp]
 800b2ae:	f006 060f 	and.w	r6, r6, #15
 800b2b2:	2503      	movs	r5, #3
 800b2b4:	4f1e      	ldr	r7, [pc, #120]	; (800b330 <_dtoa_r+0x330>)
 800b2b6:	e04c      	b.n	800b352 <_dtoa_r+0x352>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	930a      	str	r3, [sp, #40]	; 0x28
 800b2bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2be:	4453      	add	r3, sl
 800b2c0:	f103 0901 	add.w	r9, r3, #1
 800b2c4:	9302      	str	r3, [sp, #8]
 800b2c6:	464b      	mov	r3, r9
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	bfb8      	it	lt
 800b2cc:	2301      	movlt	r3, #1
 800b2ce:	e7ba      	b.n	800b246 <_dtoa_r+0x246>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	e7b2      	b.n	800b23a <_dtoa_r+0x23a>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	e7f0      	b.n	800b2ba <_dtoa_r+0x2ba>
 800b2d8:	2501      	movs	r5, #1
 800b2da:	2300      	movs	r3, #0
 800b2dc:	9306      	str	r3, [sp, #24]
 800b2de:	950a      	str	r5, [sp, #40]	; 0x28
 800b2e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2e4:	9302      	str	r3, [sp, #8]
 800b2e6:	4699      	mov	r9, r3
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2312      	movs	r3, #18
 800b2ec:	920b      	str	r2, [sp, #44]	; 0x2c
 800b2ee:	e7aa      	b.n	800b246 <_dtoa_r+0x246>
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b2f4:	e7f4      	b.n	800b2e0 <_dtoa_r+0x2e0>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	9302      	str	r3, [sp, #8]
 800b2fa:	4699      	mov	r9, r3
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	e7f5      	b.n	800b2ec <_dtoa_r+0x2ec>
 800b300:	3101      	adds	r1, #1
 800b302:	6071      	str	r1, [r6, #4]
 800b304:	0052      	lsls	r2, r2, #1
 800b306:	e7a2      	b.n	800b24e <_dtoa_r+0x24e>
 800b308:	636f4361 	.word	0x636f4361
 800b30c:	3fd287a7 	.word	0x3fd287a7
 800b310:	8b60c8b3 	.word	0x8b60c8b3
 800b314:	3fc68a28 	.word	0x3fc68a28
 800b318:	509f79fb 	.word	0x509f79fb
 800b31c:	3fd34413 	.word	0x3fd34413
 800b320:	7ff00000 	.word	0x7ff00000
 800b324:	0800f329 	.word	0x0800f329
 800b328:	3ff80000 	.word	0x3ff80000
 800b32c:	0800f3e8 	.word	0x0800f3e8
 800b330:	0800f3c0 	.word	0x0800f3c0
 800b334:	0800f3b1 	.word	0x0800f3b1
 800b338:	07f1      	lsls	r1, r6, #31
 800b33a:	d508      	bpl.n	800b34e <_dtoa_r+0x34e>
 800b33c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b340:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b344:	f7f5 f968 	bl	8000618 <__aeabi_dmul>
 800b348:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b34c:	3501      	adds	r5, #1
 800b34e:	1076      	asrs	r6, r6, #1
 800b350:	3708      	adds	r7, #8
 800b352:	2e00      	cmp	r6, #0
 800b354:	d1f0      	bne.n	800b338 <_dtoa_r+0x338>
 800b356:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b35a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b35e:	f7f5 fa85 	bl	800086c <__aeabi_ddiv>
 800b362:	e9cd 0100 	strd	r0, r1, [sp]
 800b366:	e01a      	b.n	800b39e <_dtoa_r+0x39e>
 800b368:	2502      	movs	r5, #2
 800b36a:	e7a3      	b.n	800b2b4 <_dtoa_r+0x2b4>
 800b36c:	f000 80a0 	beq.w	800b4b0 <_dtoa_r+0x4b0>
 800b370:	f1ca 0600 	rsb	r6, sl, #0
 800b374:	4b9f      	ldr	r3, [pc, #636]	; (800b5f4 <_dtoa_r+0x5f4>)
 800b376:	4fa0      	ldr	r7, [pc, #640]	; (800b5f8 <_dtoa_r+0x5f8>)
 800b378:	f006 020f 	and.w	r2, r6, #15
 800b37c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b388:	f7f5 f946 	bl	8000618 <__aeabi_dmul>
 800b38c:	e9cd 0100 	strd	r0, r1, [sp]
 800b390:	1136      	asrs	r6, r6, #4
 800b392:	2300      	movs	r3, #0
 800b394:	2502      	movs	r5, #2
 800b396:	2e00      	cmp	r6, #0
 800b398:	d17f      	bne.n	800b49a <_dtoa_r+0x49a>
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1e1      	bne.n	800b362 <_dtoa_r+0x362>
 800b39e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f000 8087 	beq.w	800b4b4 <_dtoa_r+0x4b4>
 800b3a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	4b93      	ldr	r3, [pc, #588]	; (800b5fc <_dtoa_r+0x5fc>)
 800b3ae:	4630      	mov	r0, r6
 800b3b0:	4639      	mov	r1, r7
 800b3b2:	f7f5 fba3 	bl	8000afc <__aeabi_dcmplt>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d07c      	beq.n	800b4b4 <_dtoa_r+0x4b4>
 800b3ba:	f1b9 0f00 	cmp.w	r9, #0
 800b3be:	d079      	beq.n	800b4b4 <_dtoa_r+0x4b4>
 800b3c0:	9b02      	ldr	r3, [sp, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	dd35      	ble.n	800b432 <_dtoa_r+0x432>
 800b3c6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800b3ca:	9308      	str	r3, [sp, #32]
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	4b8b      	ldr	r3, [pc, #556]	; (800b600 <_dtoa_r+0x600>)
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	f7f5 f920 	bl	8000618 <__aeabi_dmul>
 800b3d8:	e9cd 0100 	strd	r0, r1, [sp]
 800b3dc:	9f02      	ldr	r7, [sp, #8]
 800b3de:	3501      	adds	r5, #1
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f7f5 f8af 	bl	8000544 <__aeabi_i2d>
 800b3e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ea:	f7f5 f915 	bl	8000618 <__aeabi_dmul>
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	4b84      	ldr	r3, [pc, #528]	; (800b604 <_dtoa_r+0x604>)
 800b3f2:	f7f4 ff5b 	bl	80002ac <__adddf3>
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b3fc:	2f00      	cmp	r7, #0
 800b3fe:	d15d      	bne.n	800b4bc <_dtoa_r+0x4bc>
 800b400:	2200      	movs	r2, #0
 800b402:	4b81      	ldr	r3, [pc, #516]	; (800b608 <_dtoa_r+0x608>)
 800b404:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b408:	f7f4 ff4e 	bl	80002a8 <__aeabi_dsub>
 800b40c:	462a      	mov	r2, r5
 800b40e:	4633      	mov	r3, r6
 800b410:	e9cd 0100 	strd	r0, r1, [sp]
 800b414:	f7f5 fb90 	bl	8000b38 <__aeabi_dcmpgt>
 800b418:	2800      	cmp	r0, #0
 800b41a:	f040 8288 	bne.w	800b92e <_dtoa_r+0x92e>
 800b41e:	462a      	mov	r2, r5
 800b420:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b424:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b428:	f7f5 fb68 	bl	8000afc <__aeabi_dcmplt>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	f040 827c 	bne.w	800b92a <_dtoa_r+0x92a>
 800b432:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b436:	e9cd 2300 	strd	r2, r3, [sp]
 800b43a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f2c0 8150 	blt.w	800b6e2 <_dtoa_r+0x6e2>
 800b442:	f1ba 0f0e 	cmp.w	sl, #14
 800b446:	f300 814c 	bgt.w	800b6e2 <_dtoa_r+0x6e2>
 800b44a:	4b6a      	ldr	r3, [pc, #424]	; (800b5f4 <_dtoa_r+0x5f4>)
 800b44c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b450:	ed93 7b00 	vldr	d7, [r3]
 800b454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b456:	2b00      	cmp	r3, #0
 800b458:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b45c:	f280 80d8 	bge.w	800b610 <_dtoa_r+0x610>
 800b460:	f1b9 0f00 	cmp.w	r9, #0
 800b464:	f300 80d4 	bgt.w	800b610 <_dtoa_r+0x610>
 800b468:	f040 825e 	bne.w	800b928 <_dtoa_r+0x928>
 800b46c:	2200      	movs	r2, #0
 800b46e:	4b66      	ldr	r3, [pc, #408]	; (800b608 <_dtoa_r+0x608>)
 800b470:	ec51 0b17 	vmov	r0, r1, d7
 800b474:	f7f5 f8d0 	bl	8000618 <__aeabi_dmul>
 800b478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b47c:	f7f5 fb52 	bl	8000b24 <__aeabi_dcmpge>
 800b480:	464f      	mov	r7, r9
 800b482:	464e      	mov	r6, r9
 800b484:	2800      	cmp	r0, #0
 800b486:	f040 8234 	bne.w	800b8f2 <_dtoa_r+0x8f2>
 800b48a:	2331      	movs	r3, #49	; 0x31
 800b48c:	f10b 0501 	add.w	r5, fp, #1
 800b490:	f88b 3000 	strb.w	r3, [fp]
 800b494:	f10a 0a01 	add.w	sl, sl, #1
 800b498:	e22f      	b.n	800b8fa <_dtoa_r+0x8fa>
 800b49a:	07f2      	lsls	r2, r6, #31
 800b49c:	d505      	bpl.n	800b4aa <_dtoa_r+0x4aa>
 800b49e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4a2:	f7f5 f8b9 	bl	8000618 <__aeabi_dmul>
 800b4a6:	3501      	adds	r5, #1
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	1076      	asrs	r6, r6, #1
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	e772      	b.n	800b396 <_dtoa_r+0x396>
 800b4b0:	2502      	movs	r5, #2
 800b4b2:	e774      	b.n	800b39e <_dtoa_r+0x39e>
 800b4b4:	f8cd a020 	str.w	sl, [sp, #32]
 800b4b8:	464f      	mov	r7, r9
 800b4ba:	e791      	b.n	800b3e0 <_dtoa_r+0x3e0>
 800b4bc:	4b4d      	ldr	r3, [pc, #308]	; (800b5f4 <_dtoa_r+0x5f4>)
 800b4be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4c2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800b4c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d047      	beq.n	800b55c <_dtoa_r+0x55c>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	494e      	ldr	r1, [pc, #312]	; (800b60c <_dtoa_r+0x60c>)
 800b4d4:	f7f5 f9ca 	bl	800086c <__aeabi_ddiv>
 800b4d8:	462a      	mov	r2, r5
 800b4da:	4633      	mov	r3, r6
 800b4dc:	f7f4 fee4 	bl	80002a8 <__aeabi_dsub>
 800b4e0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b4e4:	465d      	mov	r5, fp
 800b4e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4ea:	f7f5 fb45 	bl	8000b78 <__aeabi_d2iz>
 800b4ee:	4606      	mov	r6, r0
 800b4f0:	f7f5 f828 	bl	8000544 <__aeabi_i2d>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4fc:	f7f4 fed4 	bl	80002a8 <__aeabi_dsub>
 800b500:	3630      	adds	r6, #48	; 0x30
 800b502:	f805 6b01 	strb.w	r6, [r5], #1
 800b506:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b50a:	e9cd 0100 	strd	r0, r1, [sp]
 800b50e:	f7f5 faf5 	bl	8000afc <__aeabi_dcmplt>
 800b512:	2800      	cmp	r0, #0
 800b514:	d163      	bne.n	800b5de <_dtoa_r+0x5de>
 800b516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b51a:	2000      	movs	r0, #0
 800b51c:	4937      	ldr	r1, [pc, #220]	; (800b5fc <_dtoa_r+0x5fc>)
 800b51e:	f7f4 fec3 	bl	80002a8 <__aeabi_dsub>
 800b522:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b526:	f7f5 fae9 	bl	8000afc <__aeabi_dcmplt>
 800b52a:	2800      	cmp	r0, #0
 800b52c:	f040 80b7 	bne.w	800b69e <_dtoa_r+0x69e>
 800b530:	eba5 030b 	sub.w	r3, r5, fp
 800b534:	429f      	cmp	r7, r3
 800b536:	f77f af7c 	ble.w	800b432 <_dtoa_r+0x432>
 800b53a:	2200      	movs	r2, #0
 800b53c:	4b30      	ldr	r3, [pc, #192]	; (800b600 <_dtoa_r+0x600>)
 800b53e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b542:	f7f5 f869 	bl	8000618 <__aeabi_dmul>
 800b546:	2200      	movs	r2, #0
 800b548:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b54c:	4b2c      	ldr	r3, [pc, #176]	; (800b600 <_dtoa_r+0x600>)
 800b54e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b552:	f7f5 f861 	bl	8000618 <__aeabi_dmul>
 800b556:	e9cd 0100 	strd	r0, r1, [sp]
 800b55a:	e7c4      	b.n	800b4e6 <_dtoa_r+0x4e6>
 800b55c:	462a      	mov	r2, r5
 800b55e:	4633      	mov	r3, r6
 800b560:	f7f5 f85a 	bl	8000618 <__aeabi_dmul>
 800b564:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b568:	eb0b 0507 	add.w	r5, fp, r7
 800b56c:	465e      	mov	r6, fp
 800b56e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b572:	f7f5 fb01 	bl	8000b78 <__aeabi_d2iz>
 800b576:	4607      	mov	r7, r0
 800b578:	f7f4 ffe4 	bl	8000544 <__aeabi_i2d>
 800b57c:	3730      	adds	r7, #48	; 0x30
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b586:	f7f4 fe8f 	bl	80002a8 <__aeabi_dsub>
 800b58a:	f806 7b01 	strb.w	r7, [r6], #1
 800b58e:	42ae      	cmp	r6, r5
 800b590:	e9cd 0100 	strd	r0, r1, [sp]
 800b594:	f04f 0200 	mov.w	r2, #0
 800b598:	d126      	bne.n	800b5e8 <_dtoa_r+0x5e8>
 800b59a:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <_dtoa_r+0x60c>)
 800b59c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b5a0:	f7f4 fe84 	bl	80002ac <__adddf3>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5ac:	f7f5 fac4 	bl	8000b38 <__aeabi_dcmpgt>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d174      	bne.n	800b69e <_dtoa_r+0x69e>
 800b5b4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	4914      	ldr	r1, [pc, #80]	; (800b60c <_dtoa_r+0x60c>)
 800b5bc:	f7f4 fe74 	bl	80002a8 <__aeabi_dsub>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5c8:	f7f5 fa98 	bl	8000afc <__aeabi_dcmplt>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	f43f af30 	beq.w	800b432 <_dtoa_r+0x432>
 800b5d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5d6:	2b30      	cmp	r3, #48	; 0x30
 800b5d8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800b5dc:	d002      	beq.n	800b5e4 <_dtoa_r+0x5e4>
 800b5de:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b5e2:	e04a      	b.n	800b67a <_dtoa_r+0x67a>
 800b5e4:	4615      	mov	r5, r2
 800b5e6:	e7f4      	b.n	800b5d2 <_dtoa_r+0x5d2>
 800b5e8:	4b05      	ldr	r3, [pc, #20]	; (800b600 <_dtoa_r+0x600>)
 800b5ea:	f7f5 f815 	bl	8000618 <__aeabi_dmul>
 800b5ee:	e9cd 0100 	strd	r0, r1, [sp]
 800b5f2:	e7bc      	b.n	800b56e <_dtoa_r+0x56e>
 800b5f4:	0800f3e8 	.word	0x0800f3e8
 800b5f8:	0800f3c0 	.word	0x0800f3c0
 800b5fc:	3ff00000 	.word	0x3ff00000
 800b600:	40240000 	.word	0x40240000
 800b604:	401c0000 	.word	0x401c0000
 800b608:	40140000 	.word	0x40140000
 800b60c:	3fe00000 	.word	0x3fe00000
 800b610:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b614:	465d      	mov	r5, fp
 800b616:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b61a:	4630      	mov	r0, r6
 800b61c:	4639      	mov	r1, r7
 800b61e:	f7f5 f925 	bl	800086c <__aeabi_ddiv>
 800b622:	f7f5 faa9 	bl	8000b78 <__aeabi_d2iz>
 800b626:	4680      	mov	r8, r0
 800b628:	f7f4 ff8c 	bl	8000544 <__aeabi_i2d>
 800b62c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b630:	f7f4 fff2 	bl	8000618 <__aeabi_dmul>
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	4630      	mov	r0, r6
 800b63a:	4639      	mov	r1, r7
 800b63c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800b640:	f7f4 fe32 	bl	80002a8 <__aeabi_dsub>
 800b644:	f805 6b01 	strb.w	r6, [r5], #1
 800b648:	eba5 060b 	sub.w	r6, r5, fp
 800b64c:	45b1      	cmp	r9, r6
 800b64e:	4602      	mov	r2, r0
 800b650:	460b      	mov	r3, r1
 800b652:	d139      	bne.n	800b6c8 <_dtoa_r+0x6c8>
 800b654:	f7f4 fe2a 	bl	80002ac <__adddf3>
 800b658:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b65c:	4606      	mov	r6, r0
 800b65e:	460f      	mov	r7, r1
 800b660:	f7f5 fa6a 	bl	8000b38 <__aeabi_dcmpgt>
 800b664:	b9c8      	cbnz	r0, 800b69a <_dtoa_r+0x69a>
 800b666:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b66a:	4630      	mov	r0, r6
 800b66c:	4639      	mov	r1, r7
 800b66e:	f7f5 fa3b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b672:	b110      	cbz	r0, 800b67a <_dtoa_r+0x67a>
 800b674:	f018 0f01 	tst.w	r8, #1
 800b678:	d10f      	bne.n	800b69a <_dtoa_r+0x69a>
 800b67a:	9904      	ldr	r1, [sp, #16]
 800b67c:	4620      	mov	r0, r4
 800b67e:	f000 fdf9 	bl	800c274 <_Bfree>
 800b682:	2300      	movs	r3, #0
 800b684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b686:	702b      	strb	r3, [r5, #0]
 800b688:	f10a 0301 	add.w	r3, sl, #1
 800b68c:	6013      	str	r3, [r2, #0]
 800b68e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b690:	2b00      	cmp	r3, #0
 800b692:	f000 8241 	beq.w	800bb18 <_dtoa_r+0xb18>
 800b696:	601d      	str	r5, [r3, #0]
 800b698:	e23e      	b.n	800bb18 <_dtoa_r+0xb18>
 800b69a:	f8cd a020 	str.w	sl, [sp, #32]
 800b69e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b6a2:	2a39      	cmp	r2, #57	; 0x39
 800b6a4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800b6a8:	d108      	bne.n	800b6bc <_dtoa_r+0x6bc>
 800b6aa:	459b      	cmp	fp, r3
 800b6ac:	d10a      	bne.n	800b6c4 <_dtoa_r+0x6c4>
 800b6ae:	9b08      	ldr	r3, [sp, #32]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	9308      	str	r3, [sp, #32]
 800b6b4:	2330      	movs	r3, #48	; 0x30
 800b6b6:	f88b 3000 	strb.w	r3, [fp]
 800b6ba:	465b      	mov	r3, fp
 800b6bc:	781a      	ldrb	r2, [r3, #0]
 800b6be:	3201      	adds	r2, #1
 800b6c0:	701a      	strb	r2, [r3, #0]
 800b6c2:	e78c      	b.n	800b5de <_dtoa_r+0x5de>
 800b6c4:	461d      	mov	r5, r3
 800b6c6:	e7ea      	b.n	800b69e <_dtoa_r+0x69e>
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	4b9b      	ldr	r3, [pc, #620]	; (800b938 <_dtoa_r+0x938>)
 800b6cc:	f7f4 ffa4 	bl	8000618 <__aeabi_dmul>
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	460f      	mov	r7, r1
 800b6d8:	f7f5 fa06 	bl	8000ae8 <__aeabi_dcmpeq>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d09a      	beq.n	800b616 <_dtoa_r+0x616>
 800b6e0:	e7cb      	b.n	800b67a <_dtoa_r+0x67a>
 800b6e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6e4:	2a00      	cmp	r2, #0
 800b6e6:	f000 808b 	beq.w	800b800 <_dtoa_r+0x800>
 800b6ea:	9a06      	ldr	r2, [sp, #24]
 800b6ec:	2a01      	cmp	r2, #1
 800b6ee:	dc6e      	bgt.n	800b7ce <_dtoa_r+0x7ce>
 800b6f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b6f2:	2a00      	cmp	r2, #0
 800b6f4:	d067      	beq.n	800b7c6 <_dtoa_r+0x7c6>
 800b6f6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6fa:	9f07      	ldr	r7, [sp, #28]
 800b6fc:	9d05      	ldr	r5, [sp, #20]
 800b6fe:	9a05      	ldr	r2, [sp, #20]
 800b700:	2101      	movs	r1, #1
 800b702:	441a      	add	r2, r3
 800b704:	4620      	mov	r0, r4
 800b706:	9205      	str	r2, [sp, #20]
 800b708:	4498      	add	r8, r3
 800b70a:	f000 fe91 	bl	800c430 <__i2b>
 800b70e:	4606      	mov	r6, r0
 800b710:	2d00      	cmp	r5, #0
 800b712:	dd0c      	ble.n	800b72e <_dtoa_r+0x72e>
 800b714:	f1b8 0f00 	cmp.w	r8, #0
 800b718:	dd09      	ble.n	800b72e <_dtoa_r+0x72e>
 800b71a:	4545      	cmp	r5, r8
 800b71c:	9a05      	ldr	r2, [sp, #20]
 800b71e:	462b      	mov	r3, r5
 800b720:	bfa8      	it	ge
 800b722:	4643      	movge	r3, r8
 800b724:	1ad2      	subs	r2, r2, r3
 800b726:	9205      	str	r2, [sp, #20]
 800b728:	1aed      	subs	r5, r5, r3
 800b72a:	eba8 0803 	sub.w	r8, r8, r3
 800b72e:	9b07      	ldr	r3, [sp, #28]
 800b730:	b1eb      	cbz	r3, 800b76e <_dtoa_r+0x76e>
 800b732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b734:	2b00      	cmp	r3, #0
 800b736:	d067      	beq.n	800b808 <_dtoa_r+0x808>
 800b738:	b18f      	cbz	r7, 800b75e <_dtoa_r+0x75e>
 800b73a:	4631      	mov	r1, r6
 800b73c:	463a      	mov	r2, r7
 800b73e:	4620      	mov	r0, r4
 800b740:	f000 ff16 	bl	800c570 <__pow5mult>
 800b744:	9a04      	ldr	r2, [sp, #16]
 800b746:	4601      	mov	r1, r0
 800b748:	4606      	mov	r6, r0
 800b74a:	4620      	mov	r0, r4
 800b74c:	f000 fe79 	bl	800c442 <__multiply>
 800b750:	9904      	ldr	r1, [sp, #16]
 800b752:	9008      	str	r0, [sp, #32]
 800b754:	4620      	mov	r0, r4
 800b756:	f000 fd8d 	bl	800c274 <_Bfree>
 800b75a:	9b08      	ldr	r3, [sp, #32]
 800b75c:	9304      	str	r3, [sp, #16]
 800b75e:	9b07      	ldr	r3, [sp, #28]
 800b760:	1bda      	subs	r2, r3, r7
 800b762:	d004      	beq.n	800b76e <_dtoa_r+0x76e>
 800b764:	9904      	ldr	r1, [sp, #16]
 800b766:	4620      	mov	r0, r4
 800b768:	f000 ff02 	bl	800c570 <__pow5mult>
 800b76c:	9004      	str	r0, [sp, #16]
 800b76e:	2101      	movs	r1, #1
 800b770:	4620      	mov	r0, r4
 800b772:	f000 fe5d 	bl	800c430 <__i2b>
 800b776:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b778:	4607      	mov	r7, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 81d0 	beq.w	800bb20 <_dtoa_r+0xb20>
 800b780:	461a      	mov	r2, r3
 800b782:	4601      	mov	r1, r0
 800b784:	4620      	mov	r0, r4
 800b786:	f000 fef3 	bl	800c570 <__pow5mult>
 800b78a:	9b06      	ldr	r3, [sp, #24]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	4607      	mov	r7, r0
 800b790:	dc40      	bgt.n	800b814 <_dtoa_r+0x814>
 800b792:	9b00      	ldr	r3, [sp, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d139      	bne.n	800b80c <_dtoa_r+0x80c>
 800b798:	9b01      	ldr	r3, [sp, #4]
 800b79a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d136      	bne.n	800b810 <_dtoa_r+0x810>
 800b7a2:	9b01      	ldr	r3, [sp, #4]
 800b7a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b7a8:	0d1b      	lsrs	r3, r3, #20
 800b7aa:	051b      	lsls	r3, r3, #20
 800b7ac:	b12b      	cbz	r3, 800b7ba <_dtoa_r+0x7ba>
 800b7ae:	9b05      	ldr	r3, [sp, #20]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	9305      	str	r3, [sp, #20]
 800b7b4:	f108 0801 	add.w	r8, r8, #1
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	9307      	str	r3, [sp, #28]
 800b7bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d12a      	bne.n	800b818 <_dtoa_r+0x818>
 800b7c2:	2001      	movs	r0, #1
 800b7c4:	e030      	b.n	800b828 <_dtoa_r+0x828>
 800b7c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7c8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b7cc:	e795      	b.n	800b6fa <_dtoa_r+0x6fa>
 800b7ce:	9b07      	ldr	r3, [sp, #28]
 800b7d0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800b7d4:	42bb      	cmp	r3, r7
 800b7d6:	bfbf      	itttt	lt
 800b7d8:	9b07      	ldrlt	r3, [sp, #28]
 800b7da:	9707      	strlt	r7, [sp, #28]
 800b7dc:	1afa      	sublt	r2, r7, r3
 800b7de:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b7e0:	bfbb      	ittet	lt
 800b7e2:	189b      	addlt	r3, r3, r2
 800b7e4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b7e6:	1bdf      	subge	r7, r3, r7
 800b7e8:	2700      	movlt	r7, #0
 800b7ea:	f1b9 0f00 	cmp.w	r9, #0
 800b7ee:	bfb5      	itete	lt
 800b7f0:	9b05      	ldrlt	r3, [sp, #20]
 800b7f2:	9d05      	ldrge	r5, [sp, #20]
 800b7f4:	eba3 0509 	sublt.w	r5, r3, r9
 800b7f8:	464b      	movge	r3, r9
 800b7fa:	bfb8      	it	lt
 800b7fc:	2300      	movlt	r3, #0
 800b7fe:	e77e      	b.n	800b6fe <_dtoa_r+0x6fe>
 800b800:	9f07      	ldr	r7, [sp, #28]
 800b802:	9d05      	ldr	r5, [sp, #20]
 800b804:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800b806:	e783      	b.n	800b710 <_dtoa_r+0x710>
 800b808:	9a07      	ldr	r2, [sp, #28]
 800b80a:	e7ab      	b.n	800b764 <_dtoa_r+0x764>
 800b80c:	2300      	movs	r3, #0
 800b80e:	e7d4      	b.n	800b7ba <_dtoa_r+0x7ba>
 800b810:	9b00      	ldr	r3, [sp, #0]
 800b812:	e7d2      	b.n	800b7ba <_dtoa_r+0x7ba>
 800b814:	2300      	movs	r3, #0
 800b816:	9307      	str	r3, [sp, #28]
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800b81e:	6918      	ldr	r0, [r3, #16]
 800b820:	f000 fdb8 	bl	800c394 <__hi0bits>
 800b824:	f1c0 0020 	rsb	r0, r0, #32
 800b828:	4440      	add	r0, r8
 800b82a:	f010 001f 	ands.w	r0, r0, #31
 800b82e:	d047      	beq.n	800b8c0 <_dtoa_r+0x8c0>
 800b830:	f1c0 0320 	rsb	r3, r0, #32
 800b834:	2b04      	cmp	r3, #4
 800b836:	dd3b      	ble.n	800b8b0 <_dtoa_r+0x8b0>
 800b838:	9b05      	ldr	r3, [sp, #20]
 800b83a:	f1c0 001c 	rsb	r0, r0, #28
 800b83e:	4403      	add	r3, r0
 800b840:	9305      	str	r3, [sp, #20]
 800b842:	4405      	add	r5, r0
 800b844:	4480      	add	r8, r0
 800b846:	9b05      	ldr	r3, [sp, #20]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	dd05      	ble.n	800b858 <_dtoa_r+0x858>
 800b84c:	461a      	mov	r2, r3
 800b84e:	9904      	ldr	r1, [sp, #16]
 800b850:	4620      	mov	r0, r4
 800b852:	f000 fedb 	bl	800c60c <__lshift>
 800b856:	9004      	str	r0, [sp, #16]
 800b858:	f1b8 0f00 	cmp.w	r8, #0
 800b85c:	dd05      	ble.n	800b86a <_dtoa_r+0x86a>
 800b85e:	4639      	mov	r1, r7
 800b860:	4642      	mov	r2, r8
 800b862:	4620      	mov	r0, r4
 800b864:	f000 fed2 	bl	800c60c <__lshift>
 800b868:	4607      	mov	r7, r0
 800b86a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b86c:	b353      	cbz	r3, 800b8c4 <_dtoa_r+0x8c4>
 800b86e:	4639      	mov	r1, r7
 800b870:	9804      	ldr	r0, [sp, #16]
 800b872:	f000 ff1f 	bl	800c6b4 <__mcmp>
 800b876:	2800      	cmp	r0, #0
 800b878:	da24      	bge.n	800b8c4 <_dtoa_r+0x8c4>
 800b87a:	2300      	movs	r3, #0
 800b87c:	220a      	movs	r2, #10
 800b87e:	9904      	ldr	r1, [sp, #16]
 800b880:	4620      	mov	r0, r4
 800b882:	f000 fd0e 	bl	800c2a2 <__multadd>
 800b886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b888:	9004      	str	r0, [sp, #16]
 800b88a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f000 814d 	beq.w	800bb2e <_dtoa_r+0xb2e>
 800b894:	2300      	movs	r3, #0
 800b896:	4631      	mov	r1, r6
 800b898:	220a      	movs	r2, #10
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 fd01 	bl	800c2a2 <__multadd>
 800b8a0:	9b02      	ldr	r3, [sp, #8]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	4606      	mov	r6, r0
 800b8a6:	dc4f      	bgt.n	800b948 <_dtoa_r+0x948>
 800b8a8:	9b06      	ldr	r3, [sp, #24]
 800b8aa:	2b02      	cmp	r3, #2
 800b8ac:	dd4c      	ble.n	800b948 <_dtoa_r+0x948>
 800b8ae:	e011      	b.n	800b8d4 <_dtoa_r+0x8d4>
 800b8b0:	d0c9      	beq.n	800b846 <_dtoa_r+0x846>
 800b8b2:	9a05      	ldr	r2, [sp, #20]
 800b8b4:	331c      	adds	r3, #28
 800b8b6:	441a      	add	r2, r3
 800b8b8:	9205      	str	r2, [sp, #20]
 800b8ba:	441d      	add	r5, r3
 800b8bc:	4498      	add	r8, r3
 800b8be:	e7c2      	b.n	800b846 <_dtoa_r+0x846>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	e7f6      	b.n	800b8b2 <_dtoa_r+0x8b2>
 800b8c4:	f1b9 0f00 	cmp.w	r9, #0
 800b8c8:	dc38      	bgt.n	800b93c <_dtoa_r+0x93c>
 800b8ca:	9b06      	ldr	r3, [sp, #24]
 800b8cc:	2b02      	cmp	r3, #2
 800b8ce:	dd35      	ble.n	800b93c <_dtoa_r+0x93c>
 800b8d0:	f8cd 9008 	str.w	r9, [sp, #8]
 800b8d4:	9b02      	ldr	r3, [sp, #8]
 800b8d6:	b963      	cbnz	r3, 800b8f2 <_dtoa_r+0x8f2>
 800b8d8:	4639      	mov	r1, r7
 800b8da:	2205      	movs	r2, #5
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 fce0 	bl	800c2a2 <__multadd>
 800b8e2:	4601      	mov	r1, r0
 800b8e4:	4607      	mov	r7, r0
 800b8e6:	9804      	ldr	r0, [sp, #16]
 800b8e8:	f000 fee4 	bl	800c6b4 <__mcmp>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	f73f adcc 	bgt.w	800b48a <_dtoa_r+0x48a>
 800b8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8f4:	465d      	mov	r5, fp
 800b8f6:	ea6f 0a03 	mvn.w	sl, r3
 800b8fa:	f04f 0900 	mov.w	r9, #0
 800b8fe:	4639      	mov	r1, r7
 800b900:	4620      	mov	r0, r4
 800b902:	f000 fcb7 	bl	800c274 <_Bfree>
 800b906:	2e00      	cmp	r6, #0
 800b908:	f43f aeb7 	beq.w	800b67a <_dtoa_r+0x67a>
 800b90c:	f1b9 0f00 	cmp.w	r9, #0
 800b910:	d005      	beq.n	800b91e <_dtoa_r+0x91e>
 800b912:	45b1      	cmp	r9, r6
 800b914:	d003      	beq.n	800b91e <_dtoa_r+0x91e>
 800b916:	4649      	mov	r1, r9
 800b918:	4620      	mov	r0, r4
 800b91a:	f000 fcab 	bl	800c274 <_Bfree>
 800b91e:	4631      	mov	r1, r6
 800b920:	4620      	mov	r0, r4
 800b922:	f000 fca7 	bl	800c274 <_Bfree>
 800b926:	e6a8      	b.n	800b67a <_dtoa_r+0x67a>
 800b928:	2700      	movs	r7, #0
 800b92a:	463e      	mov	r6, r7
 800b92c:	e7e1      	b.n	800b8f2 <_dtoa_r+0x8f2>
 800b92e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b932:	463e      	mov	r6, r7
 800b934:	e5a9      	b.n	800b48a <_dtoa_r+0x48a>
 800b936:	bf00      	nop
 800b938:	40240000 	.word	0x40240000
 800b93c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b93e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b942:	2b00      	cmp	r3, #0
 800b944:	f000 80fa 	beq.w	800bb3c <_dtoa_r+0xb3c>
 800b948:	2d00      	cmp	r5, #0
 800b94a:	dd05      	ble.n	800b958 <_dtoa_r+0x958>
 800b94c:	4631      	mov	r1, r6
 800b94e:	462a      	mov	r2, r5
 800b950:	4620      	mov	r0, r4
 800b952:	f000 fe5b 	bl	800c60c <__lshift>
 800b956:	4606      	mov	r6, r0
 800b958:	9b07      	ldr	r3, [sp, #28]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d04c      	beq.n	800b9f8 <_dtoa_r+0x9f8>
 800b95e:	6871      	ldr	r1, [r6, #4]
 800b960:	4620      	mov	r0, r4
 800b962:	f000 fc53 	bl	800c20c <_Balloc>
 800b966:	6932      	ldr	r2, [r6, #16]
 800b968:	3202      	adds	r2, #2
 800b96a:	4605      	mov	r5, r0
 800b96c:	0092      	lsls	r2, r2, #2
 800b96e:	f106 010c 	add.w	r1, r6, #12
 800b972:	300c      	adds	r0, #12
 800b974:	f7fd fcae 	bl	80092d4 <memcpy>
 800b978:	2201      	movs	r2, #1
 800b97a:	4629      	mov	r1, r5
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 fe45 	bl	800c60c <__lshift>
 800b982:	9b00      	ldr	r3, [sp, #0]
 800b984:	f8cd b014 	str.w	fp, [sp, #20]
 800b988:	f003 0301 	and.w	r3, r3, #1
 800b98c:	46b1      	mov	r9, r6
 800b98e:	9307      	str	r3, [sp, #28]
 800b990:	4606      	mov	r6, r0
 800b992:	4639      	mov	r1, r7
 800b994:	9804      	ldr	r0, [sp, #16]
 800b996:	f7ff faa5 	bl	800aee4 <quorem>
 800b99a:	4649      	mov	r1, r9
 800b99c:	4605      	mov	r5, r0
 800b99e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800b9a2:	9804      	ldr	r0, [sp, #16]
 800b9a4:	f000 fe86 	bl	800c6b4 <__mcmp>
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	9000      	str	r0, [sp, #0]
 800b9ac:	4639      	mov	r1, r7
 800b9ae:	4620      	mov	r0, r4
 800b9b0:	f000 fe9a 	bl	800c6e8 <__mdiff>
 800b9b4:	68c3      	ldr	r3, [r0, #12]
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	bb03      	cbnz	r3, 800b9fc <_dtoa_r+0x9fc>
 800b9ba:	4601      	mov	r1, r0
 800b9bc:	9008      	str	r0, [sp, #32]
 800b9be:	9804      	ldr	r0, [sp, #16]
 800b9c0:	f000 fe78 	bl	800c6b4 <__mcmp>
 800b9c4:	9a08      	ldr	r2, [sp, #32]
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	4611      	mov	r1, r2
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	9308      	str	r3, [sp, #32]
 800b9ce:	f000 fc51 	bl	800c274 <_Bfree>
 800b9d2:	9b08      	ldr	r3, [sp, #32]
 800b9d4:	b9a3      	cbnz	r3, 800ba00 <_dtoa_r+0xa00>
 800b9d6:	9a06      	ldr	r2, [sp, #24]
 800b9d8:	b992      	cbnz	r2, 800ba00 <_dtoa_r+0xa00>
 800b9da:	9a07      	ldr	r2, [sp, #28]
 800b9dc:	b982      	cbnz	r2, 800ba00 <_dtoa_r+0xa00>
 800b9de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800b9e2:	d029      	beq.n	800ba38 <_dtoa_r+0xa38>
 800b9e4:	9b00      	ldr	r3, [sp, #0]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	dd01      	ble.n	800b9ee <_dtoa_r+0x9ee>
 800b9ea:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800b9ee:	9b05      	ldr	r3, [sp, #20]
 800b9f0:	1c5d      	adds	r5, r3, #1
 800b9f2:	f883 8000 	strb.w	r8, [r3]
 800b9f6:	e782      	b.n	800b8fe <_dtoa_r+0x8fe>
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	e7c2      	b.n	800b982 <_dtoa_r+0x982>
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	e7e3      	b.n	800b9c8 <_dtoa_r+0x9c8>
 800ba00:	9a00      	ldr	r2, [sp, #0]
 800ba02:	2a00      	cmp	r2, #0
 800ba04:	db04      	blt.n	800ba10 <_dtoa_r+0xa10>
 800ba06:	d125      	bne.n	800ba54 <_dtoa_r+0xa54>
 800ba08:	9a06      	ldr	r2, [sp, #24]
 800ba0a:	bb1a      	cbnz	r2, 800ba54 <_dtoa_r+0xa54>
 800ba0c:	9a07      	ldr	r2, [sp, #28]
 800ba0e:	bb0a      	cbnz	r2, 800ba54 <_dtoa_r+0xa54>
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	ddec      	ble.n	800b9ee <_dtoa_r+0x9ee>
 800ba14:	2201      	movs	r2, #1
 800ba16:	9904      	ldr	r1, [sp, #16]
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 fdf7 	bl	800c60c <__lshift>
 800ba1e:	4639      	mov	r1, r7
 800ba20:	9004      	str	r0, [sp, #16]
 800ba22:	f000 fe47 	bl	800c6b4 <__mcmp>
 800ba26:	2800      	cmp	r0, #0
 800ba28:	dc03      	bgt.n	800ba32 <_dtoa_r+0xa32>
 800ba2a:	d1e0      	bne.n	800b9ee <_dtoa_r+0x9ee>
 800ba2c:	f018 0f01 	tst.w	r8, #1
 800ba30:	d0dd      	beq.n	800b9ee <_dtoa_r+0x9ee>
 800ba32:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ba36:	d1d8      	bne.n	800b9ea <_dtoa_r+0x9ea>
 800ba38:	9b05      	ldr	r3, [sp, #20]
 800ba3a:	9a05      	ldr	r2, [sp, #20]
 800ba3c:	1c5d      	adds	r5, r3, #1
 800ba3e:	2339      	movs	r3, #57	; 0x39
 800ba40:	7013      	strb	r3, [r2, #0]
 800ba42:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba46:	2b39      	cmp	r3, #57	; 0x39
 800ba48:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ba4c:	d04f      	beq.n	800baee <_dtoa_r+0xaee>
 800ba4e:	3301      	adds	r3, #1
 800ba50:	7013      	strb	r3, [r2, #0]
 800ba52:	e754      	b.n	800b8fe <_dtoa_r+0x8fe>
 800ba54:	9a05      	ldr	r2, [sp, #20]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f102 0501 	add.w	r5, r2, #1
 800ba5c:	dd06      	ble.n	800ba6c <_dtoa_r+0xa6c>
 800ba5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ba62:	d0e9      	beq.n	800ba38 <_dtoa_r+0xa38>
 800ba64:	f108 0801 	add.w	r8, r8, #1
 800ba68:	9b05      	ldr	r3, [sp, #20]
 800ba6a:	e7c2      	b.n	800b9f2 <_dtoa_r+0x9f2>
 800ba6c:	9a02      	ldr	r2, [sp, #8]
 800ba6e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ba72:	eba5 030b 	sub.w	r3, r5, fp
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d021      	beq.n	800babe <_dtoa_r+0xabe>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	220a      	movs	r2, #10
 800ba7e:	9904      	ldr	r1, [sp, #16]
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 fc0e 	bl	800c2a2 <__multadd>
 800ba86:	45b1      	cmp	r9, r6
 800ba88:	9004      	str	r0, [sp, #16]
 800ba8a:	f04f 0300 	mov.w	r3, #0
 800ba8e:	f04f 020a 	mov.w	r2, #10
 800ba92:	4649      	mov	r1, r9
 800ba94:	4620      	mov	r0, r4
 800ba96:	d105      	bne.n	800baa4 <_dtoa_r+0xaa4>
 800ba98:	f000 fc03 	bl	800c2a2 <__multadd>
 800ba9c:	4681      	mov	r9, r0
 800ba9e:	4606      	mov	r6, r0
 800baa0:	9505      	str	r5, [sp, #20]
 800baa2:	e776      	b.n	800b992 <_dtoa_r+0x992>
 800baa4:	f000 fbfd 	bl	800c2a2 <__multadd>
 800baa8:	4631      	mov	r1, r6
 800baaa:	4681      	mov	r9, r0
 800baac:	2300      	movs	r3, #0
 800baae:	220a      	movs	r2, #10
 800bab0:	4620      	mov	r0, r4
 800bab2:	f000 fbf6 	bl	800c2a2 <__multadd>
 800bab6:	4606      	mov	r6, r0
 800bab8:	e7f2      	b.n	800baa0 <_dtoa_r+0xaa0>
 800baba:	f04f 0900 	mov.w	r9, #0
 800babe:	2201      	movs	r2, #1
 800bac0:	9904      	ldr	r1, [sp, #16]
 800bac2:	4620      	mov	r0, r4
 800bac4:	f000 fda2 	bl	800c60c <__lshift>
 800bac8:	4639      	mov	r1, r7
 800baca:	9004      	str	r0, [sp, #16]
 800bacc:	f000 fdf2 	bl	800c6b4 <__mcmp>
 800bad0:	2800      	cmp	r0, #0
 800bad2:	dcb6      	bgt.n	800ba42 <_dtoa_r+0xa42>
 800bad4:	d102      	bne.n	800badc <_dtoa_r+0xadc>
 800bad6:	f018 0f01 	tst.w	r8, #1
 800bada:	d1b2      	bne.n	800ba42 <_dtoa_r+0xa42>
 800badc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bae0:	2b30      	cmp	r3, #48	; 0x30
 800bae2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bae6:	f47f af0a 	bne.w	800b8fe <_dtoa_r+0x8fe>
 800baea:	4615      	mov	r5, r2
 800baec:	e7f6      	b.n	800badc <_dtoa_r+0xadc>
 800baee:	4593      	cmp	fp, r2
 800baf0:	d105      	bne.n	800bafe <_dtoa_r+0xafe>
 800baf2:	2331      	movs	r3, #49	; 0x31
 800baf4:	f10a 0a01 	add.w	sl, sl, #1
 800baf8:	f88b 3000 	strb.w	r3, [fp]
 800bafc:	e6ff      	b.n	800b8fe <_dtoa_r+0x8fe>
 800bafe:	4615      	mov	r5, r2
 800bb00:	e79f      	b.n	800ba42 <_dtoa_r+0xa42>
 800bb02:	f8df b064 	ldr.w	fp, [pc, #100]	; 800bb68 <_dtoa_r+0xb68>
 800bb06:	e007      	b.n	800bb18 <_dtoa_r+0xb18>
 800bb08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb0a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800bb6c <_dtoa_r+0xb6c>
 800bb0e:	b11b      	cbz	r3, 800bb18 <_dtoa_r+0xb18>
 800bb10:	f10b 0308 	add.w	r3, fp, #8
 800bb14:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb16:	6013      	str	r3, [r2, #0]
 800bb18:	4658      	mov	r0, fp
 800bb1a:	b017      	add	sp, #92	; 0x5c
 800bb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb20:	9b06      	ldr	r3, [sp, #24]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	f77f ae35 	ble.w	800b792 <_dtoa_r+0x792>
 800bb28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb2a:	9307      	str	r3, [sp, #28]
 800bb2c:	e649      	b.n	800b7c2 <_dtoa_r+0x7c2>
 800bb2e:	9b02      	ldr	r3, [sp, #8]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	dc03      	bgt.n	800bb3c <_dtoa_r+0xb3c>
 800bb34:	9b06      	ldr	r3, [sp, #24]
 800bb36:	2b02      	cmp	r3, #2
 800bb38:	f73f aecc 	bgt.w	800b8d4 <_dtoa_r+0x8d4>
 800bb3c:	465d      	mov	r5, fp
 800bb3e:	4639      	mov	r1, r7
 800bb40:	9804      	ldr	r0, [sp, #16]
 800bb42:	f7ff f9cf 	bl	800aee4 <quorem>
 800bb46:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800bb4a:	f805 8b01 	strb.w	r8, [r5], #1
 800bb4e:	9a02      	ldr	r2, [sp, #8]
 800bb50:	eba5 030b 	sub.w	r3, r5, fp
 800bb54:	429a      	cmp	r2, r3
 800bb56:	ddb0      	ble.n	800baba <_dtoa_r+0xaba>
 800bb58:	2300      	movs	r3, #0
 800bb5a:	220a      	movs	r2, #10
 800bb5c:	9904      	ldr	r1, [sp, #16]
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f000 fb9f 	bl	800c2a2 <__multadd>
 800bb64:	9004      	str	r0, [sp, #16]
 800bb66:	e7ea      	b.n	800bb3e <_dtoa_r+0xb3e>
 800bb68:	0800f328 	.word	0x0800f328
 800bb6c:	0800f3a8 	.word	0x0800f3a8

0800bb70 <rshift>:
 800bb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb72:	6906      	ldr	r6, [r0, #16]
 800bb74:	114b      	asrs	r3, r1, #5
 800bb76:	429e      	cmp	r6, r3
 800bb78:	f100 0414 	add.w	r4, r0, #20
 800bb7c:	dd30      	ble.n	800bbe0 <rshift+0x70>
 800bb7e:	f011 011f 	ands.w	r1, r1, #31
 800bb82:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800bb86:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800bb8a:	d108      	bne.n	800bb9e <rshift+0x2e>
 800bb8c:	4621      	mov	r1, r4
 800bb8e:	42b2      	cmp	r2, r6
 800bb90:	460b      	mov	r3, r1
 800bb92:	d211      	bcs.n	800bbb8 <rshift+0x48>
 800bb94:	f852 3b04 	ldr.w	r3, [r2], #4
 800bb98:	f841 3b04 	str.w	r3, [r1], #4
 800bb9c:	e7f7      	b.n	800bb8e <rshift+0x1e>
 800bb9e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800bba2:	f1c1 0c20 	rsb	ip, r1, #32
 800bba6:	40cd      	lsrs	r5, r1
 800bba8:	3204      	adds	r2, #4
 800bbaa:	4623      	mov	r3, r4
 800bbac:	42b2      	cmp	r2, r6
 800bbae:	4617      	mov	r7, r2
 800bbb0:	d30c      	bcc.n	800bbcc <rshift+0x5c>
 800bbb2:	601d      	str	r5, [r3, #0]
 800bbb4:	b105      	cbz	r5, 800bbb8 <rshift+0x48>
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	1b1a      	subs	r2, r3, r4
 800bbba:	42a3      	cmp	r3, r4
 800bbbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bbc0:	bf08      	it	eq
 800bbc2:	2300      	moveq	r3, #0
 800bbc4:	6102      	str	r2, [r0, #16]
 800bbc6:	bf08      	it	eq
 800bbc8:	6143      	streq	r3, [r0, #20]
 800bbca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbcc:	683f      	ldr	r7, [r7, #0]
 800bbce:	fa07 f70c 	lsl.w	r7, r7, ip
 800bbd2:	433d      	orrs	r5, r7
 800bbd4:	f843 5b04 	str.w	r5, [r3], #4
 800bbd8:	f852 5b04 	ldr.w	r5, [r2], #4
 800bbdc:	40cd      	lsrs	r5, r1
 800bbde:	e7e5      	b.n	800bbac <rshift+0x3c>
 800bbe0:	4623      	mov	r3, r4
 800bbe2:	e7e9      	b.n	800bbb8 <rshift+0x48>

0800bbe4 <__hexdig_fun>:
 800bbe4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bbe8:	2b09      	cmp	r3, #9
 800bbea:	d802      	bhi.n	800bbf2 <__hexdig_fun+0xe>
 800bbec:	3820      	subs	r0, #32
 800bbee:	b2c0      	uxtb	r0, r0
 800bbf0:	4770      	bx	lr
 800bbf2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bbf6:	2b05      	cmp	r3, #5
 800bbf8:	d801      	bhi.n	800bbfe <__hexdig_fun+0x1a>
 800bbfa:	3847      	subs	r0, #71	; 0x47
 800bbfc:	e7f7      	b.n	800bbee <__hexdig_fun+0xa>
 800bbfe:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bc02:	2b05      	cmp	r3, #5
 800bc04:	d801      	bhi.n	800bc0a <__hexdig_fun+0x26>
 800bc06:	3827      	subs	r0, #39	; 0x27
 800bc08:	e7f1      	b.n	800bbee <__hexdig_fun+0xa>
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	4770      	bx	lr

0800bc0e <__gethex>:
 800bc0e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc12:	b08b      	sub	sp, #44	; 0x2c
 800bc14:	468a      	mov	sl, r1
 800bc16:	9002      	str	r0, [sp, #8]
 800bc18:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bc1a:	9306      	str	r3, [sp, #24]
 800bc1c:	4690      	mov	r8, r2
 800bc1e:	f000 fad0 	bl	800c1c2 <__localeconv_l>
 800bc22:	6803      	ldr	r3, [r0, #0]
 800bc24:	9303      	str	r3, [sp, #12]
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7f4 fae2 	bl	80001f0 <strlen>
 800bc2c:	9b03      	ldr	r3, [sp, #12]
 800bc2e:	9001      	str	r0, [sp, #4]
 800bc30:	4403      	add	r3, r0
 800bc32:	f04f 0b00 	mov.w	fp, #0
 800bc36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bc3a:	9307      	str	r3, [sp, #28]
 800bc3c:	f8da 3000 	ldr.w	r3, [sl]
 800bc40:	3302      	adds	r3, #2
 800bc42:	461f      	mov	r7, r3
 800bc44:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc48:	2830      	cmp	r0, #48	; 0x30
 800bc4a:	d06c      	beq.n	800bd26 <__gethex+0x118>
 800bc4c:	f7ff ffca 	bl	800bbe4 <__hexdig_fun>
 800bc50:	4604      	mov	r4, r0
 800bc52:	2800      	cmp	r0, #0
 800bc54:	d16a      	bne.n	800bd2c <__gethex+0x11e>
 800bc56:	9a01      	ldr	r2, [sp, #4]
 800bc58:	9903      	ldr	r1, [sp, #12]
 800bc5a:	4638      	mov	r0, r7
 800bc5c:	f7fe fa82 	bl	800a164 <strncmp>
 800bc60:	2800      	cmp	r0, #0
 800bc62:	d166      	bne.n	800bd32 <__gethex+0x124>
 800bc64:	9b01      	ldr	r3, [sp, #4]
 800bc66:	5cf8      	ldrb	r0, [r7, r3]
 800bc68:	18fe      	adds	r6, r7, r3
 800bc6a:	f7ff ffbb 	bl	800bbe4 <__hexdig_fun>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d062      	beq.n	800bd38 <__gethex+0x12a>
 800bc72:	4633      	mov	r3, r6
 800bc74:	7818      	ldrb	r0, [r3, #0]
 800bc76:	2830      	cmp	r0, #48	; 0x30
 800bc78:	461f      	mov	r7, r3
 800bc7a:	f103 0301 	add.w	r3, r3, #1
 800bc7e:	d0f9      	beq.n	800bc74 <__gethex+0x66>
 800bc80:	f7ff ffb0 	bl	800bbe4 <__hexdig_fun>
 800bc84:	fab0 f580 	clz	r5, r0
 800bc88:	096d      	lsrs	r5, r5, #5
 800bc8a:	4634      	mov	r4, r6
 800bc8c:	f04f 0b01 	mov.w	fp, #1
 800bc90:	463a      	mov	r2, r7
 800bc92:	4616      	mov	r6, r2
 800bc94:	3201      	adds	r2, #1
 800bc96:	7830      	ldrb	r0, [r6, #0]
 800bc98:	f7ff ffa4 	bl	800bbe4 <__hexdig_fun>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	d1f8      	bne.n	800bc92 <__gethex+0x84>
 800bca0:	9a01      	ldr	r2, [sp, #4]
 800bca2:	9903      	ldr	r1, [sp, #12]
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7fe fa5d 	bl	800a164 <strncmp>
 800bcaa:	b950      	cbnz	r0, 800bcc2 <__gethex+0xb4>
 800bcac:	b954      	cbnz	r4, 800bcc4 <__gethex+0xb6>
 800bcae:	9b01      	ldr	r3, [sp, #4]
 800bcb0:	18f4      	adds	r4, r6, r3
 800bcb2:	4622      	mov	r2, r4
 800bcb4:	4616      	mov	r6, r2
 800bcb6:	3201      	adds	r2, #1
 800bcb8:	7830      	ldrb	r0, [r6, #0]
 800bcba:	f7ff ff93 	bl	800bbe4 <__hexdig_fun>
 800bcbe:	2800      	cmp	r0, #0
 800bcc0:	d1f8      	bne.n	800bcb4 <__gethex+0xa6>
 800bcc2:	b10c      	cbz	r4, 800bcc8 <__gethex+0xba>
 800bcc4:	1ba4      	subs	r4, r4, r6
 800bcc6:	00a4      	lsls	r4, r4, #2
 800bcc8:	7833      	ldrb	r3, [r6, #0]
 800bcca:	2b50      	cmp	r3, #80	; 0x50
 800bccc:	d001      	beq.n	800bcd2 <__gethex+0xc4>
 800bcce:	2b70      	cmp	r3, #112	; 0x70
 800bcd0:	d140      	bne.n	800bd54 <__gethex+0x146>
 800bcd2:	7873      	ldrb	r3, [r6, #1]
 800bcd4:	2b2b      	cmp	r3, #43	; 0x2b
 800bcd6:	d031      	beq.n	800bd3c <__gethex+0x12e>
 800bcd8:	2b2d      	cmp	r3, #45	; 0x2d
 800bcda:	d033      	beq.n	800bd44 <__gethex+0x136>
 800bcdc:	1c71      	adds	r1, r6, #1
 800bcde:	f04f 0900 	mov.w	r9, #0
 800bce2:	7808      	ldrb	r0, [r1, #0]
 800bce4:	f7ff ff7e 	bl	800bbe4 <__hexdig_fun>
 800bce8:	1e43      	subs	r3, r0, #1
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	2b18      	cmp	r3, #24
 800bcee:	d831      	bhi.n	800bd54 <__gethex+0x146>
 800bcf0:	f1a0 0210 	sub.w	r2, r0, #16
 800bcf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bcf8:	f7ff ff74 	bl	800bbe4 <__hexdig_fun>
 800bcfc:	1e43      	subs	r3, r0, #1
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	2b18      	cmp	r3, #24
 800bd02:	d922      	bls.n	800bd4a <__gethex+0x13c>
 800bd04:	f1b9 0f00 	cmp.w	r9, #0
 800bd08:	d000      	beq.n	800bd0c <__gethex+0xfe>
 800bd0a:	4252      	negs	r2, r2
 800bd0c:	4414      	add	r4, r2
 800bd0e:	f8ca 1000 	str.w	r1, [sl]
 800bd12:	b30d      	cbz	r5, 800bd58 <__gethex+0x14a>
 800bd14:	f1bb 0f00 	cmp.w	fp, #0
 800bd18:	bf0c      	ite	eq
 800bd1a:	2706      	moveq	r7, #6
 800bd1c:	2700      	movne	r7, #0
 800bd1e:	4638      	mov	r0, r7
 800bd20:	b00b      	add	sp, #44	; 0x2c
 800bd22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd26:	f10b 0b01 	add.w	fp, fp, #1
 800bd2a:	e78a      	b.n	800bc42 <__gethex+0x34>
 800bd2c:	2500      	movs	r5, #0
 800bd2e:	462c      	mov	r4, r5
 800bd30:	e7ae      	b.n	800bc90 <__gethex+0x82>
 800bd32:	463e      	mov	r6, r7
 800bd34:	2501      	movs	r5, #1
 800bd36:	e7c7      	b.n	800bcc8 <__gethex+0xba>
 800bd38:	4604      	mov	r4, r0
 800bd3a:	e7fb      	b.n	800bd34 <__gethex+0x126>
 800bd3c:	f04f 0900 	mov.w	r9, #0
 800bd40:	1cb1      	adds	r1, r6, #2
 800bd42:	e7ce      	b.n	800bce2 <__gethex+0xd4>
 800bd44:	f04f 0901 	mov.w	r9, #1
 800bd48:	e7fa      	b.n	800bd40 <__gethex+0x132>
 800bd4a:	230a      	movs	r3, #10
 800bd4c:	fb03 0202 	mla	r2, r3, r2, r0
 800bd50:	3a10      	subs	r2, #16
 800bd52:	e7cf      	b.n	800bcf4 <__gethex+0xe6>
 800bd54:	4631      	mov	r1, r6
 800bd56:	e7da      	b.n	800bd0e <__gethex+0x100>
 800bd58:	1bf3      	subs	r3, r6, r7
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	4629      	mov	r1, r5
 800bd5e:	2b07      	cmp	r3, #7
 800bd60:	dc49      	bgt.n	800bdf6 <__gethex+0x1e8>
 800bd62:	9802      	ldr	r0, [sp, #8]
 800bd64:	f000 fa52 	bl	800c20c <_Balloc>
 800bd68:	9b01      	ldr	r3, [sp, #4]
 800bd6a:	f100 0914 	add.w	r9, r0, #20
 800bd6e:	f04f 0b00 	mov.w	fp, #0
 800bd72:	f1c3 0301 	rsb	r3, r3, #1
 800bd76:	4605      	mov	r5, r0
 800bd78:	f8cd 9010 	str.w	r9, [sp, #16]
 800bd7c:	46da      	mov	sl, fp
 800bd7e:	9308      	str	r3, [sp, #32]
 800bd80:	42b7      	cmp	r7, r6
 800bd82:	d33b      	bcc.n	800bdfc <__gethex+0x1ee>
 800bd84:	9804      	ldr	r0, [sp, #16]
 800bd86:	f840 ab04 	str.w	sl, [r0], #4
 800bd8a:	eba0 0009 	sub.w	r0, r0, r9
 800bd8e:	1080      	asrs	r0, r0, #2
 800bd90:	6128      	str	r0, [r5, #16]
 800bd92:	0147      	lsls	r7, r0, #5
 800bd94:	4650      	mov	r0, sl
 800bd96:	f000 fafd 	bl	800c394 <__hi0bits>
 800bd9a:	f8d8 6000 	ldr.w	r6, [r8]
 800bd9e:	1a3f      	subs	r7, r7, r0
 800bda0:	42b7      	cmp	r7, r6
 800bda2:	dd64      	ble.n	800be6e <__gethex+0x260>
 800bda4:	1bbf      	subs	r7, r7, r6
 800bda6:	4639      	mov	r1, r7
 800bda8:	4628      	mov	r0, r5
 800bdaa:	f000 fe0d 	bl	800c9c8 <__any_on>
 800bdae:	4682      	mov	sl, r0
 800bdb0:	b178      	cbz	r0, 800bdd2 <__gethex+0x1c4>
 800bdb2:	1e7b      	subs	r3, r7, #1
 800bdb4:	1159      	asrs	r1, r3, #5
 800bdb6:	f003 021f 	and.w	r2, r3, #31
 800bdba:	f04f 0a01 	mov.w	sl, #1
 800bdbe:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bdc2:	fa0a f202 	lsl.w	r2, sl, r2
 800bdc6:	420a      	tst	r2, r1
 800bdc8:	d003      	beq.n	800bdd2 <__gethex+0x1c4>
 800bdca:	4553      	cmp	r3, sl
 800bdcc:	dc46      	bgt.n	800be5c <__gethex+0x24e>
 800bdce:	f04f 0a02 	mov.w	sl, #2
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	f7ff fecb 	bl	800bb70 <rshift>
 800bdda:	443c      	add	r4, r7
 800bddc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bde0:	42a3      	cmp	r3, r4
 800bde2:	da52      	bge.n	800be8a <__gethex+0x27c>
 800bde4:	4629      	mov	r1, r5
 800bde6:	9802      	ldr	r0, [sp, #8]
 800bde8:	f000 fa44 	bl	800c274 <_Bfree>
 800bdec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bdee:	2300      	movs	r3, #0
 800bdf0:	6013      	str	r3, [r2, #0]
 800bdf2:	27a3      	movs	r7, #163	; 0xa3
 800bdf4:	e793      	b.n	800bd1e <__gethex+0x110>
 800bdf6:	3101      	adds	r1, #1
 800bdf8:	105b      	asrs	r3, r3, #1
 800bdfa:	e7b0      	b.n	800bd5e <__gethex+0x150>
 800bdfc:	1e73      	subs	r3, r6, #1
 800bdfe:	9305      	str	r3, [sp, #20]
 800be00:	9a07      	ldr	r2, [sp, #28]
 800be02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be06:	4293      	cmp	r3, r2
 800be08:	d018      	beq.n	800be3c <__gethex+0x22e>
 800be0a:	f1bb 0f20 	cmp.w	fp, #32
 800be0e:	d107      	bne.n	800be20 <__gethex+0x212>
 800be10:	9b04      	ldr	r3, [sp, #16]
 800be12:	f8c3 a000 	str.w	sl, [r3]
 800be16:	3304      	adds	r3, #4
 800be18:	f04f 0a00 	mov.w	sl, #0
 800be1c:	9304      	str	r3, [sp, #16]
 800be1e:	46d3      	mov	fp, sl
 800be20:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800be24:	f7ff fede 	bl	800bbe4 <__hexdig_fun>
 800be28:	f000 000f 	and.w	r0, r0, #15
 800be2c:	fa00 f00b 	lsl.w	r0, r0, fp
 800be30:	ea4a 0a00 	orr.w	sl, sl, r0
 800be34:	f10b 0b04 	add.w	fp, fp, #4
 800be38:	9b05      	ldr	r3, [sp, #20]
 800be3a:	e00d      	b.n	800be58 <__gethex+0x24a>
 800be3c:	9b05      	ldr	r3, [sp, #20]
 800be3e:	9a08      	ldr	r2, [sp, #32]
 800be40:	4413      	add	r3, r2
 800be42:	42bb      	cmp	r3, r7
 800be44:	d3e1      	bcc.n	800be0a <__gethex+0x1fc>
 800be46:	4618      	mov	r0, r3
 800be48:	9a01      	ldr	r2, [sp, #4]
 800be4a:	9903      	ldr	r1, [sp, #12]
 800be4c:	9309      	str	r3, [sp, #36]	; 0x24
 800be4e:	f7fe f989 	bl	800a164 <strncmp>
 800be52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be54:	2800      	cmp	r0, #0
 800be56:	d1d8      	bne.n	800be0a <__gethex+0x1fc>
 800be58:	461e      	mov	r6, r3
 800be5a:	e791      	b.n	800bd80 <__gethex+0x172>
 800be5c:	1eb9      	subs	r1, r7, #2
 800be5e:	4628      	mov	r0, r5
 800be60:	f000 fdb2 	bl	800c9c8 <__any_on>
 800be64:	2800      	cmp	r0, #0
 800be66:	d0b2      	beq.n	800bdce <__gethex+0x1c0>
 800be68:	f04f 0a03 	mov.w	sl, #3
 800be6c:	e7b1      	b.n	800bdd2 <__gethex+0x1c4>
 800be6e:	da09      	bge.n	800be84 <__gethex+0x276>
 800be70:	1bf7      	subs	r7, r6, r7
 800be72:	4629      	mov	r1, r5
 800be74:	463a      	mov	r2, r7
 800be76:	9802      	ldr	r0, [sp, #8]
 800be78:	f000 fbc8 	bl	800c60c <__lshift>
 800be7c:	1be4      	subs	r4, r4, r7
 800be7e:	4605      	mov	r5, r0
 800be80:	f100 0914 	add.w	r9, r0, #20
 800be84:	f04f 0a00 	mov.w	sl, #0
 800be88:	e7a8      	b.n	800bddc <__gethex+0x1ce>
 800be8a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800be8e:	42a0      	cmp	r0, r4
 800be90:	dd6a      	ble.n	800bf68 <__gethex+0x35a>
 800be92:	1b04      	subs	r4, r0, r4
 800be94:	42a6      	cmp	r6, r4
 800be96:	dc2e      	bgt.n	800bef6 <__gethex+0x2e8>
 800be98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d022      	beq.n	800bee6 <__gethex+0x2d8>
 800bea0:	2b03      	cmp	r3, #3
 800bea2:	d024      	beq.n	800beee <__gethex+0x2e0>
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d115      	bne.n	800bed4 <__gethex+0x2c6>
 800bea8:	42a6      	cmp	r6, r4
 800beaa:	d113      	bne.n	800bed4 <__gethex+0x2c6>
 800beac:	2e01      	cmp	r6, #1
 800beae:	dc0b      	bgt.n	800bec8 <__gethex+0x2ba>
 800beb0:	9a06      	ldr	r2, [sp, #24]
 800beb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800beb6:	6013      	str	r3, [r2, #0]
 800beb8:	2301      	movs	r3, #1
 800beba:	612b      	str	r3, [r5, #16]
 800bebc:	f8c9 3000 	str.w	r3, [r9]
 800bec0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bec2:	2762      	movs	r7, #98	; 0x62
 800bec4:	601d      	str	r5, [r3, #0]
 800bec6:	e72a      	b.n	800bd1e <__gethex+0x110>
 800bec8:	1e71      	subs	r1, r6, #1
 800beca:	4628      	mov	r0, r5
 800becc:	f000 fd7c 	bl	800c9c8 <__any_on>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d1ed      	bne.n	800beb0 <__gethex+0x2a2>
 800bed4:	4629      	mov	r1, r5
 800bed6:	9802      	ldr	r0, [sp, #8]
 800bed8:	f000 f9cc 	bl	800c274 <_Bfree>
 800bedc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bede:	2300      	movs	r3, #0
 800bee0:	6013      	str	r3, [r2, #0]
 800bee2:	2750      	movs	r7, #80	; 0x50
 800bee4:	e71b      	b.n	800bd1e <__gethex+0x110>
 800bee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d0e1      	beq.n	800beb0 <__gethex+0x2a2>
 800beec:	e7f2      	b.n	800bed4 <__gethex+0x2c6>
 800beee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d1dd      	bne.n	800beb0 <__gethex+0x2a2>
 800bef4:	e7ee      	b.n	800bed4 <__gethex+0x2c6>
 800bef6:	1e67      	subs	r7, r4, #1
 800bef8:	f1ba 0f00 	cmp.w	sl, #0
 800befc:	d131      	bne.n	800bf62 <__gethex+0x354>
 800befe:	b127      	cbz	r7, 800bf0a <__gethex+0x2fc>
 800bf00:	4639      	mov	r1, r7
 800bf02:	4628      	mov	r0, r5
 800bf04:	f000 fd60 	bl	800c9c8 <__any_on>
 800bf08:	4682      	mov	sl, r0
 800bf0a:	117a      	asrs	r2, r7, #5
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	f007 071f 	and.w	r7, r7, #31
 800bf12:	fa03 f707 	lsl.w	r7, r3, r7
 800bf16:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	421f      	tst	r7, r3
 800bf1e:	4628      	mov	r0, r5
 800bf20:	bf18      	it	ne
 800bf22:	f04a 0a02 	orrne.w	sl, sl, #2
 800bf26:	1b36      	subs	r6, r6, r4
 800bf28:	f7ff fe22 	bl	800bb70 <rshift>
 800bf2c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800bf30:	2702      	movs	r7, #2
 800bf32:	f1ba 0f00 	cmp.w	sl, #0
 800bf36:	d048      	beq.n	800bfca <__gethex+0x3bc>
 800bf38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf3c:	2b02      	cmp	r3, #2
 800bf3e:	d015      	beq.n	800bf6c <__gethex+0x35e>
 800bf40:	2b03      	cmp	r3, #3
 800bf42:	d017      	beq.n	800bf74 <__gethex+0x366>
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d109      	bne.n	800bf5c <__gethex+0x34e>
 800bf48:	f01a 0f02 	tst.w	sl, #2
 800bf4c:	d006      	beq.n	800bf5c <__gethex+0x34e>
 800bf4e:	f8d9 3000 	ldr.w	r3, [r9]
 800bf52:	ea4a 0a03 	orr.w	sl, sl, r3
 800bf56:	f01a 0f01 	tst.w	sl, #1
 800bf5a:	d10e      	bne.n	800bf7a <__gethex+0x36c>
 800bf5c:	f047 0710 	orr.w	r7, r7, #16
 800bf60:	e033      	b.n	800bfca <__gethex+0x3bc>
 800bf62:	f04f 0a01 	mov.w	sl, #1
 800bf66:	e7d0      	b.n	800bf0a <__gethex+0x2fc>
 800bf68:	2701      	movs	r7, #1
 800bf6a:	e7e2      	b.n	800bf32 <__gethex+0x324>
 800bf6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf6e:	f1c3 0301 	rsb	r3, r3, #1
 800bf72:	9315      	str	r3, [sp, #84]	; 0x54
 800bf74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d0f0      	beq.n	800bf5c <__gethex+0x34e>
 800bf7a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800bf7e:	f105 0314 	add.w	r3, r5, #20
 800bf82:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800bf86:	eb03 010a 	add.w	r1, r3, sl
 800bf8a:	f04f 0c00 	mov.w	ip, #0
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf94:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800bf98:	d01c      	beq.n	800bfd4 <__gethex+0x3c6>
 800bf9a:	3201      	adds	r2, #1
 800bf9c:	6002      	str	r2, [r0, #0]
 800bf9e:	2f02      	cmp	r7, #2
 800bfa0:	f105 0314 	add.w	r3, r5, #20
 800bfa4:	d138      	bne.n	800c018 <__gethex+0x40a>
 800bfa6:	f8d8 2000 	ldr.w	r2, [r8]
 800bfaa:	3a01      	subs	r2, #1
 800bfac:	42b2      	cmp	r2, r6
 800bfae:	d10a      	bne.n	800bfc6 <__gethex+0x3b8>
 800bfb0:	1171      	asrs	r1, r6, #5
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f006 061f 	and.w	r6, r6, #31
 800bfb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfbc:	fa02 f606 	lsl.w	r6, r2, r6
 800bfc0:	421e      	tst	r6, r3
 800bfc2:	bf18      	it	ne
 800bfc4:	4617      	movne	r7, r2
 800bfc6:	f047 0720 	orr.w	r7, r7, #32
 800bfca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfcc:	601d      	str	r5, [r3, #0]
 800bfce:	9b06      	ldr	r3, [sp, #24]
 800bfd0:	601c      	str	r4, [r3, #0]
 800bfd2:	e6a4      	b.n	800bd1e <__gethex+0x110>
 800bfd4:	4299      	cmp	r1, r3
 800bfd6:	f843 cc04 	str.w	ip, [r3, #-4]
 800bfda:	d8d8      	bhi.n	800bf8e <__gethex+0x380>
 800bfdc:	68ab      	ldr	r3, [r5, #8]
 800bfde:	4599      	cmp	r9, r3
 800bfe0:	db12      	blt.n	800c008 <__gethex+0x3fa>
 800bfe2:	6869      	ldr	r1, [r5, #4]
 800bfe4:	9802      	ldr	r0, [sp, #8]
 800bfe6:	3101      	adds	r1, #1
 800bfe8:	f000 f910 	bl	800c20c <_Balloc>
 800bfec:	692a      	ldr	r2, [r5, #16]
 800bfee:	3202      	adds	r2, #2
 800bff0:	f105 010c 	add.w	r1, r5, #12
 800bff4:	4683      	mov	fp, r0
 800bff6:	0092      	lsls	r2, r2, #2
 800bff8:	300c      	adds	r0, #12
 800bffa:	f7fd f96b 	bl	80092d4 <memcpy>
 800bffe:	4629      	mov	r1, r5
 800c000:	9802      	ldr	r0, [sp, #8]
 800c002:	f000 f937 	bl	800c274 <_Bfree>
 800c006:	465d      	mov	r5, fp
 800c008:	692b      	ldr	r3, [r5, #16]
 800c00a:	1c5a      	adds	r2, r3, #1
 800c00c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800c010:	612a      	str	r2, [r5, #16]
 800c012:	2201      	movs	r2, #1
 800c014:	615a      	str	r2, [r3, #20]
 800c016:	e7c2      	b.n	800bf9e <__gethex+0x390>
 800c018:	692a      	ldr	r2, [r5, #16]
 800c01a:	454a      	cmp	r2, r9
 800c01c:	dd0b      	ble.n	800c036 <__gethex+0x428>
 800c01e:	2101      	movs	r1, #1
 800c020:	4628      	mov	r0, r5
 800c022:	f7ff fda5 	bl	800bb70 <rshift>
 800c026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c02a:	3401      	adds	r4, #1
 800c02c:	42a3      	cmp	r3, r4
 800c02e:	f6ff aed9 	blt.w	800bde4 <__gethex+0x1d6>
 800c032:	2701      	movs	r7, #1
 800c034:	e7c7      	b.n	800bfc6 <__gethex+0x3b8>
 800c036:	f016 061f 	ands.w	r6, r6, #31
 800c03a:	d0fa      	beq.n	800c032 <__gethex+0x424>
 800c03c:	449a      	add	sl, r3
 800c03e:	f1c6 0620 	rsb	r6, r6, #32
 800c042:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c046:	f000 f9a5 	bl	800c394 <__hi0bits>
 800c04a:	42b0      	cmp	r0, r6
 800c04c:	dbe7      	blt.n	800c01e <__gethex+0x410>
 800c04e:	e7f0      	b.n	800c032 <__gethex+0x424>

0800c050 <L_shift>:
 800c050:	f1c2 0208 	rsb	r2, r2, #8
 800c054:	0092      	lsls	r2, r2, #2
 800c056:	b570      	push	{r4, r5, r6, lr}
 800c058:	f1c2 0620 	rsb	r6, r2, #32
 800c05c:	6843      	ldr	r3, [r0, #4]
 800c05e:	6804      	ldr	r4, [r0, #0]
 800c060:	fa03 f506 	lsl.w	r5, r3, r6
 800c064:	432c      	orrs	r4, r5
 800c066:	40d3      	lsrs	r3, r2
 800c068:	6004      	str	r4, [r0, #0]
 800c06a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c06e:	4288      	cmp	r0, r1
 800c070:	d3f4      	bcc.n	800c05c <L_shift+0xc>
 800c072:	bd70      	pop	{r4, r5, r6, pc}

0800c074 <__match>:
 800c074:	b530      	push	{r4, r5, lr}
 800c076:	6803      	ldr	r3, [r0, #0]
 800c078:	3301      	adds	r3, #1
 800c07a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c07e:	b914      	cbnz	r4, 800c086 <__match+0x12>
 800c080:	6003      	str	r3, [r0, #0]
 800c082:	2001      	movs	r0, #1
 800c084:	bd30      	pop	{r4, r5, pc}
 800c086:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c08a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c08e:	2d19      	cmp	r5, #25
 800c090:	bf98      	it	ls
 800c092:	3220      	addls	r2, #32
 800c094:	42a2      	cmp	r2, r4
 800c096:	d0f0      	beq.n	800c07a <__match+0x6>
 800c098:	2000      	movs	r0, #0
 800c09a:	e7f3      	b.n	800c084 <__match+0x10>

0800c09c <__hexnan>:
 800c09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a0:	680b      	ldr	r3, [r1, #0]
 800c0a2:	6801      	ldr	r1, [r0, #0]
 800c0a4:	115f      	asrs	r7, r3, #5
 800c0a6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800c0aa:	f013 031f 	ands.w	r3, r3, #31
 800c0ae:	b087      	sub	sp, #28
 800c0b0:	bf18      	it	ne
 800c0b2:	3704      	addne	r7, #4
 800c0b4:	2500      	movs	r5, #0
 800c0b6:	1f3e      	subs	r6, r7, #4
 800c0b8:	4682      	mov	sl, r0
 800c0ba:	4690      	mov	r8, r2
 800c0bc:	9301      	str	r3, [sp, #4]
 800c0be:	f847 5c04 	str.w	r5, [r7, #-4]
 800c0c2:	46b1      	mov	r9, r6
 800c0c4:	4634      	mov	r4, r6
 800c0c6:	9502      	str	r5, [sp, #8]
 800c0c8:	46ab      	mov	fp, r5
 800c0ca:	784a      	ldrb	r2, [r1, #1]
 800c0cc:	1c4b      	adds	r3, r1, #1
 800c0ce:	9303      	str	r3, [sp, #12]
 800c0d0:	b342      	cbz	r2, 800c124 <__hexnan+0x88>
 800c0d2:	4610      	mov	r0, r2
 800c0d4:	9105      	str	r1, [sp, #20]
 800c0d6:	9204      	str	r2, [sp, #16]
 800c0d8:	f7ff fd84 	bl	800bbe4 <__hexdig_fun>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d143      	bne.n	800c168 <__hexnan+0xcc>
 800c0e0:	9a04      	ldr	r2, [sp, #16]
 800c0e2:	9905      	ldr	r1, [sp, #20]
 800c0e4:	2a20      	cmp	r2, #32
 800c0e6:	d818      	bhi.n	800c11a <__hexnan+0x7e>
 800c0e8:	9b02      	ldr	r3, [sp, #8]
 800c0ea:	459b      	cmp	fp, r3
 800c0ec:	dd13      	ble.n	800c116 <__hexnan+0x7a>
 800c0ee:	454c      	cmp	r4, r9
 800c0f0:	d206      	bcs.n	800c100 <__hexnan+0x64>
 800c0f2:	2d07      	cmp	r5, #7
 800c0f4:	dc04      	bgt.n	800c100 <__hexnan+0x64>
 800c0f6:	462a      	mov	r2, r5
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f7ff ffa8 	bl	800c050 <L_shift>
 800c100:	4544      	cmp	r4, r8
 800c102:	d944      	bls.n	800c18e <__hexnan+0xf2>
 800c104:	2300      	movs	r3, #0
 800c106:	f1a4 0904 	sub.w	r9, r4, #4
 800c10a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c10e:	f8cd b008 	str.w	fp, [sp, #8]
 800c112:	464c      	mov	r4, r9
 800c114:	461d      	mov	r5, r3
 800c116:	9903      	ldr	r1, [sp, #12]
 800c118:	e7d7      	b.n	800c0ca <__hexnan+0x2e>
 800c11a:	2a29      	cmp	r2, #41	; 0x29
 800c11c:	d14a      	bne.n	800c1b4 <__hexnan+0x118>
 800c11e:	3102      	adds	r1, #2
 800c120:	f8ca 1000 	str.w	r1, [sl]
 800c124:	f1bb 0f00 	cmp.w	fp, #0
 800c128:	d044      	beq.n	800c1b4 <__hexnan+0x118>
 800c12a:	454c      	cmp	r4, r9
 800c12c:	d206      	bcs.n	800c13c <__hexnan+0xa0>
 800c12e:	2d07      	cmp	r5, #7
 800c130:	dc04      	bgt.n	800c13c <__hexnan+0xa0>
 800c132:	462a      	mov	r2, r5
 800c134:	4649      	mov	r1, r9
 800c136:	4620      	mov	r0, r4
 800c138:	f7ff ff8a 	bl	800c050 <L_shift>
 800c13c:	4544      	cmp	r4, r8
 800c13e:	d928      	bls.n	800c192 <__hexnan+0xf6>
 800c140:	4643      	mov	r3, r8
 800c142:	f854 2b04 	ldr.w	r2, [r4], #4
 800c146:	f843 2b04 	str.w	r2, [r3], #4
 800c14a:	42a6      	cmp	r6, r4
 800c14c:	d2f9      	bcs.n	800c142 <__hexnan+0xa6>
 800c14e:	2200      	movs	r2, #0
 800c150:	f843 2b04 	str.w	r2, [r3], #4
 800c154:	429e      	cmp	r6, r3
 800c156:	d2fb      	bcs.n	800c150 <__hexnan+0xb4>
 800c158:	6833      	ldr	r3, [r6, #0]
 800c15a:	b91b      	cbnz	r3, 800c164 <__hexnan+0xc8>
 800c15c:	4546      	cmp	r6, r8
 800c15e:	d127      	bne.n	800c1b0 <__hexnan+0x114>
 800c160:	2301      	movs	r3, #1
 800c162:	6033      	str	r3, [r6, #0]
 800c164:	2005      	movs	r0, #5
 800c166:	e026      	b.n	800c1b6 <__hexnan+0x11a>
 800c168:	3501      	adds	r5, #1
 800c16a:	2d08      	cmp	r5, #8
 800c16c:	f10b 0b01 	add.w	fp, fp, #1
 800c170:	dd06      	ble.n	800c180 <__hexnan+0xe4>
 800c172:	4544      	cmp	r4, r8
 800c174:	d9cf      	bls.n	800c116 <__hexnan+0x7a>
 800c176:	2300      	movs	r3, #0
 800c178:	f844 3c04 	str.w	r3, [r4, #-4]
 800c17c:	2501      	movs	r5, #1
 800c17e:	3c04      	subs	r4, #4
 800c180:	6822      	ldr	r2, [r4, #0]
 800c182:	f000 000f 	and.w	r0, r0, #15
 800c186:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c18a:	6020      	str	r0, [r4, #0]
 800c18c:	e7c3      	b.n	800c116 <__hexnan+0x7a>
 800c18e:	2508      	movs	r5, #8
 800c190:	e7c1      	b.n	800c116 <__hexnan+0x7a>
 800c192:	9b01      	ldr	r3, [sp, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d0df      	beq.n	800c158 <__hexnan+0xbc>
 800c198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c19c:	f1c3 0320 	rsb	r3, r3, #32
 800c1a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800c1a8:	401a      	ands	r2, r3
 800c1aa:	f847 2c04 	str.w	r2, [r7, #-4]
 800c1ae:	e7d3      	b.n	800c158 <__hexnan+0xbc>
 800c1b0:	3e04      	subs	r6, #4
 800c1b2:	e7d1      	b.n	800c158 <__hexnan+0xbc>
 800c1b4:	2004      	movs	r0, #4
 800c1b6:	b007      	add	sp, #28
 800c1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1bc <__locale_ctype_ptr_l>:
 800c1bc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c1c0:	4770      	bx	lr

0800c1c2 <__localeconv_l>:
 800c1c2:	30f0      	adds	r0, #240	; 0xf0
 800c1c4:	4770      	bx	lr
	...

0800c1c8 <_localeconv_r>:
 800c1c8:	4b04      	ldr	r3, [pc, #16]	; (800c1dc <_localeconv_r+0x14>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6a18      	ldr	r0, [r3, #32]
 800c1ce:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <_localeconv_r+0x18>)
 800c1d0:	2800      	cmp	r0, #0
 800c1d2:	bf08      	it	eq
 800c1d4:	4618      	moveq	r0, r3
 800c1d6:	30f0      	adds	r0, #240	; 0xf0
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	2000002c 	.word	0x2000002c
 800c1e0:	20000090 	.word	0x20000090

0800c1e4 <__ascii_mbtowc>:
 800c1e4:	b082      	sub	sp, #8
 800c1e6:	b901      	cbnz	r1, 800c1ea <__ascii_mbtowc+0x6>
 800c1e8:	a901      	add	r1, sp, #4
 800c1ea:	b142      	cbz	r2, 800c1fe <__ascii_mbtowc+0x1a>
 800c1ec:	b14b      	cbz	r3, 800c202 <__ascii_mbtowc+0x1e>
 800c1ee:	7813      	ldrb	r3, [r2, #0]
 800c1f0:	600b      	str	r3, [r1, #0]
 800c1f2:	7812      	ldrb	r2, [r2, #0]
 800c1f4:	1c10      	adds	r0, r2, #0
 800c1f6:	bf18      	it	ne
 800c1f8:	2001      	movne	r0, #1
 800c1fa:	b002      	add	sp, #8
 800c1fc:	4770      	bx	lr
 800c1fe:	4610      	mov	r0, r2
 800c200:	e7fb      	b.n	800c1fa <__ascii_mbtowc+0x16>
 800c202:	f06f 0001 	mvn.w	r0, #1
 800c206:	e7f8      	b.n	800c1fa <__ascii_mbtowc+0x16>

0800c208 <__malloc_lock>:
 800c208:	4770      	bx	lr

0800c20a <__malloc_unlock>:
 800c20a:	4770      	bx	lr

0800c20c <_Balloc>:
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c210:	4604      	mov	r4, r0
 800c212:	460e      	mov	r6, r1
 800c214:	b93d      	cbnz	r5, 800c226 <_Balloc+0x1a>
 800c216:	2010      	movs	r0, #16
 800c218:	f7fd f854 	bl	80092c4 <malloc>
 800c21c:	6260      	str	r0, [r4, #36]	; 0x24
 800c21e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c222:	6005      	str	r5, [r0, #0]
 800c224:	60c5      	str	r5, [r0, #12]
 800c226:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c228:	68eb      	ldr	r3, [r5, #12]
 800c22a:	b183      	cbz	r3, 800c24e <_Balloc+0x42>
 800c22c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c22e:	68db      	ldr	r3, [r3, #12]
 800c230:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c234:	b9b8      	cbnz	r0, 800c266 <_Balloc+0x5a>
 800c236:	2101      	movs	r1, #1
 800c238:	fa01 f506 	lsl.w	r5, r1, r6
 800c23c:	1d6a      	adds	r2, r5, #5
 800c23e:	0092      	lsls	r2, r2, #2
 800c240:	4620      	mov	r0, r4
 800c242:	f000 fbe2 	bl	800ca0a <_calloc_r>
 800c246:	b160      	cbz	r0, 800c262 <_Balloc+0x56>
 800c248:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c24c:	e00e      	b.n	800c26c <_Balloc+0x60>
 800c24e:	2221      	movs	r2, #33	; 0x21
 800c250:	2104      	movs	r1, #4
 800c252:	4620      	mov	r0, r4
 800c254:	f000 fbd9 	bl	800ca0a <_calloc_r>
 800c258:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c25a:	60e8      	str	r0, [r5, #12]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1e4      	bne.n	800c22c <_Balloc+0x20>
 800c262:	2000      	movs	r0, #0
 800c264:	bd70      	pop	{r4, r5, r6, pc}
 800c266:	6802      	ldr	r2, [r0, #0]
 800c268:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c26c:	2300      	movs	r3, #0
 800c26e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c272:	e7f7      	b.n	800c264 <_Balloc+0x58>

0800c274 <_Bfree>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c278:	4606      	mov	r6, r0
 800c27a:	460d      	mov	r5, r1
 800c27c:	b93c      	cbnz	r4, 800c28e <_Bfree+0x1a>
 800c27e:	2010      	movs	r0, #16
 800c280:	f7fd f820 	bl	80092c4 <malloc>
 800c284:	6270      	str	r0, [r6, #36]	; 0x24
 800c286:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c28a:	6004      	str	r4, [r0, #0]
 800c28c:	60c4      	str	r4, [r0, #12]
 800c28e:	b13d      	cbz	r5, 800c2a0 <_Bfree+0x2c>
 800c290:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c292:	686a      	ldr	r2, [r5, #4]
 800c294:	68db      	ldr	r3, [r3, #12]
 800c296:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c29a:	6029      	str	r1, [r5, #0]
 800c29c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c2a0:	bd70      	pop	{r4, r5, r6, pc}

0800c2a2 <__multadd>:
 800c2a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2a6:	690d      	ldr	r5, [r1, #16]
 800c2a8:	461f      	mov	r7, r3
 800c2aa:	4606      	mov	r6, r0
 800c2ac:	460c      	mov	r4, r1
 800c2ae:	f101 0c14 	add.w	ip, r1, #20
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	f8dc 0000 	ldr.w	r0, [ip]
 800c2b8:	b281      	uxth	r1, r0
 800c2ba:	fb02 7101 	mla	r1, r2, r1, r7
 800c2be:	0c0f      	lsrs	r7, r1, #16
 800c2c0:	0c00      	lsrs	r0, r0, #16
 800c2c2:	fb02 7000 	mla	r0, r2, r0, r7
 800c2c6:	b289      	uxth	r1, r1
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c2ce:	429d      	cmp	r5, r3
 800c2d0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c2d4:	f84c 1b04 	str.w	r1, [ip], #4
 800c2d8:	dcec      	bgt.n	800c2b4 <__multadd+0x12>
 800c2da:	b1d7      	cbz	r7, 800c312 <__multadd+0x70>
 800c2dc:	68a3      	ldr	r3, [r4, #8]
 800c2de:	42ab      	cmp	r3, r5
 800c2e0:	dc12      	bgt.n	800c308 <__multadd+0x66>
 800c2e2:	6861      	ldr	r1, [r4, #4]
 800c2e4:	4630      	mov	r0, r6
 800c2e6:	3101      	adds	r1, #1
 800c2e8:	f7ff ff90 	bl	800c20c <_Balloc>
 800c2ec:	6922      	ldr	r2, [r4, #16]
 800c2ee:	3202      	adds	r2, #2
 800c2f0:	f104 010c 	add.w	r1, r4, #12
 800c2f4:	4680      	mov	r8, r0
 800c2f6:	0092      	lsls	r2, r2, #2
 800c2f8:	300c      	adds	r0, #12
 800c2fa:	f7fc ffeb 	bl	80092d4 <memcpy>
 800c2fe:	4621      	mov	r1, r4
 800c300:	4630      	mov	r0, r6
 800c302:	f7ff ffb7 	bl	800c274 <_Bfree>
 800c306:	4644      	mov	r4, r8
 800c308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c30c:	3501      	adds	r5, #1
 800c30e:	615f      	str	r7, [r3, #20]
 800c310:	6125      	str	r5, [r4, #16]
 800c312:	4620      	mov	r0, r4
 800c314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c318 <__s2b>:
 800c318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c31c:	460c      	mov	r4, r1
 800c31e:	4615      	mov	r5, r2
 800c320:	461f      	mov	r7, r3
 800c322:	2209      	movs	r2, #9
 800c324:	3308      	adds	r3, #8
 800c326:	4606      	mov	r6, r0
 800c328:	fb93 f3f2 	sdiv	r3, r3, r2
 800c32c:	2100      	movs	r1, #0
 800c32e:	2201      	movs	r2, #1
 800c330:	429a      	cmp	r2, r3
 800c332:	db20      	blt.n	800c376 <__s2b+0x5e>
 800c334:	4630      	mov	r0, r6
 800c336:	f7ff ff69 	bl	800c20c <_Balloc>
 800c33a:	9b08      	ldr	r3, [sp, #32]
 800c33c:	6143      	str	r3, [r0, #20]
 800c33e:	2d09      	cmp	r5, #9
 800c340:	f04f 0301 	mov.w	r3, #1
 800c344:	6103      	str	r3, [r0, #16]
 800c346:	dd19      	ble.n	800c37c <__s2b+0x64>
 800c348:	f104 0809 	add.w	r8, r4, #9
 800c34c:	46c1      	mov	r9, r8
 800c34e:	442c      	add	r4, r5
 800c350:	f819 3b01 	ldrb.w	r3, [r9], #1
 800c354:	4601      	mov	r1, r0
 800c356:	3b30      	subs	r3, #48	; 0x30
 800c358:	220a      	movs	r2, #10
 800c35a:	4630      	mov	r0, r6
 800c35c:	f7ff ffa1 	bl	800c2a2 <__multadd>
 800c360:	45a1      	cmp	r9, r4
 800c362:	d1f5      	bne.n	800c350 <__s2b+0x38>
 800c364:	eb08 0405 	add.w	r4, r8, r5
 800c368:	3c08      	subs	r4, #8
 800c36a:	1b2d      	subs	r5, r5, r4
 800c36c:	1963      	adds	r3, r4, r5
 800c36e:	42bb      	cmp	r3, r7
 800c370:	db07      	blt.n	800c382 <__s2b+0x6a>
 800c372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c376:	0052      	lsls	r2, r2, #1
 800c378:	3101      	adds	r1, #1
 800c37a:	e7d9      	b.n	800c330 <__s2b+0x18>
 800c37c:	340a      	adds	r4, #10
 800c37e:	2509      	movs	r5, #9
 800c380:	e7f3      	b.n	800c36a <__s2b+0x52>
 800c382:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c386:	4601      	mov	r1, r0
 800c388:	3b30      	subs	r3, #48	; 0x30
 800c38a:	220a      	movs	r2, #10
 800c38c:	4630      	mov	r0, r6
 800c38e:	f7ff ff88 	bl	800c2a2 <__multadd>
 800c392:	e7eb      	b.n	800c36c <__s2b+0x54>

0800c394 <__hi0bits>:
 800c394:	0c02      	lsrs	r2, r0, #16
 800c396:	0412      	lsls	r2, r2, #16
 800c398:	4603      	mov	r3, r0
 800c39a:	b9b2      	cbnz	r2, 800c3ca <__hi0bits+0x36>
 800c39c:	0403      	lsls	r3, r0, #16
 800c39e:	2010      	movs	r0, #16
 800c3a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c3a4:	bf04      	itt	eq
 800c3a6:	021b      	lsleq	r3, r3, #8
 800c3a8:	3008      	addeq	r0, #8
 800c3aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c3ae:	bf04      	itt	eq
 800c3b0:	011b      	lsleq	r3, r3, #4
 800c3b2:	3004      	addeq	r0, #4
 800c3b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c3b8:	bf04      	itt	eq
 800c3ba:	009b      	lsleq	r3, r3, #2
 800c3bc:	3002      	addeq	r0, #2
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	db06      	blt.n	800c3d0 <__hi0bits+0x3c>
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	d503      	bpl.n	800c3ce <__hi0bits+0x3a>
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	4770      	bx	lr
 800c3ca:	2000      	movs	r0, #0
 800c3cc:	e7e8      	b.n	800c3a0 <__hi0bits+0xc>
 800c3ce:	2020      	movs	r0, #32
 800c3d0:	4770      	bx	lr

0800c3d2 <__lo0bits>:
 800c3d2:	6803      	ldr	r3, [r0, #0]
 800c3d4:	f013 0207 	ands.w	r2, r3, #7
 800c3d8:	4601      	mov	r1, r0
 800c3da:	d00b      	beq.n	800c3f4 <__lo0bits+0x22>
 800c3dc:	07da      	lsls	r2, r3, #31
 800c3de:	d423      	bmi.n	800c428 <__lo0bits+0x56>
 800c3e0:	0798      	lsls	r0, r3, #30
 800c3e2:	bf49      	itett	mi
 800c3e4:	085b      	lsrmi	r3, r3, #1
 800c3e6:	089b      	lsrpl	r3, r3, #2
 800c3e8:	2001      	movmi	r0, #1
 800c3ea:	600b      	strmi	r3, [r1, #0]
 800c3ec:	bf5c      	itt	pl
 800c3ee:	600b      	strpl	r3, [r1, #0]
 800c3f0:	2002      	movpl	r0, #2
 800c3f2:	4770      	bx	lr
 800c3f4:	b298      	uxth	r0, r3
 800c3f6:	b9a8      	cbnz	r0, 800c424 <__lo0bits+0x52>
 800c3f8:	0c1b      	lsrs	r3, r3, #16
 800c3fa:	2010      	movs	r0, #16
 800c3fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c400:	bf04      	itt	eq
 800c402:	0a1b      	lsreq	r3, r3, #8
 800c404:	3008      	addeq	r0, #8
 800c406:	071a      	lsls	r2, r3, #28
 800c408:	bf04      	itt	eq
 800c40a:	091b      	lsreq	r3, r3, #4
 800c40c:	3004      	addeq	r0, #4
 800c40e:	079a      	lsls	r2, r3, #30
 800c410:	bf04      	itt	eq
 800c412:	089b      	lsreq	r3, r3, #2
 800c414:	3002      	addeq	r0, #2
 800c416:	07da      	lsls	r2, r3, #31
 800c418:	d402      	bmi.n	800c420 <__lo0bits+0x4e>
 800c41a:	085b      	lsrs	r3, r3, #1
 800c41c:	d006      	beq.n	800c42c <__lo0bits+0x5a>
 800c41e:	3001      	adds	r0, #1
 800c420:	600b      	str	r3, [r1, #0]
 800c422:	4770      	bx	lr
 800c424:	4610      	mov	r0, r2
 800c426:	e7e9      	b.n	800c3fc <__lo0bits+0x2a>
 800c428:	2000      	movs	r0, #0
 800c42a:	4770      	bx	lr
 800c42c:	2020      	movs	r0, #32
 800c42e:	4770      	bx	lr

0800c430 <__i2b>:
 800c430:	b510      	push	{r4, lr}
 800c432:	460c      	mov	r4, r1
 800c434:	2101      	movs	r1, #1
 800c436:	f7ff fee9 	bl	800c20c <_Balloc>
 800c43a:	2201      	movs	r2, #1
 800c43c:	6144      	str	r4, [r0, #20]
 800c43e:	6102      	str	r2, [r0, #16]
 800c440:	bd10      	pop	{r4, pc}

0800c442 <__multiply>:
 800c442:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c446:	4614      	mov	r4, r2
 800c448:	690a      	ldr	r2, [r1, #16]
 800c44a:	6923      	ldr	r3, [r4, #16]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	bfb8      	it	lt
 800c450:	460b      	movlt	r3, r1
 800c452:	4688      	mov	r8, r1
 800c454:	bfbc      	itt	lt
 800c456:	46a0      	movlt	r8, r4
 800c458:	461c      	movlt	r4, r3
 800c45a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c45e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c466:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c46a:	eb07 0609 	add.w	r6, r7, r9
 800c46e:	42b3      	cmp	r3, r6
 800c470:	bfb8      	it	lt
 800c472:	3101      	addlt	r1, #1
 800c474:	f7ff feca 	bl	800c20c <_Balloc>
 800c478:	f100 0514 	add.w	r5, r0, #20
 800c47c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c480:	462b      	mov	r3, r5
 800c482:	2200      	movs	r2, #0
 800c484:	4573      	cmp	r3, lr
 800c486:	d316      	bcc.n	800c4b6 <__multiply+0x74>
 800c488:	f104 0214 	add.w	r2, r4, #20
 800c48c:	f108 0114 	add.w	r1, r8, #20
 800c490:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c494:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	9b00      	ldr	r3, [sp, #0]
 800c49c:	9201      	str	r2, [sp, #4]
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d80c      	bhi.n	800c4bc <__multiply+0x7a>
 800c4a2:	2e00      	cmp	r6, #0
 800c4a4:	dd03      	ble.n	800c4ae <__multiply+0x6c>
 800c4a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d05d      	beq.n	800c56a <__multiply+0x128>
 800c4ae:	6106      	str	r6, [r0, #16]
 800c4b0:	b003      	add	sp, #12
 800c4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4b6:	f843 2b04 	str.w	r2, [r3], #4
 800c4ba:	e7e3      	b.n	800c484 <__multiply+0x42>
 800c4bc:	f8b2 b000 	ldrh.w	fp, [r2]
 800c4c0:	f1bb 0f00 	cmp.w	fp, #0
 800c4c4:	d023      	beq.n	800c50e <__multiply+0xcc>
 800c4c6:	4689      	mov	r9, r1
 800c4c8:	46ac      	mov	ip, r5
 800c4ca:	f04f 0800 	mov.w	r8, #0
 800c4ce:	f859 4b04 	ldr.w	r4, [r9], #4
 800c4d2:	f8dc a000 	ldr.w	sl, [ip]
 800c4d6:	b2a3      	uxth	r3, r4
 800c4d8:	fa1f fa8a 	uxth.w	sl, sl
 800c4dc:	fb0b a303 	mla	r3, fp, r3, sl
 800c4e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c4e4:	f8dc 4000 	ldr.w	r4, [ip]
 800c4e8:	4443      	add	r3, r8
 800c4ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c4ee:	fb0b 840a 	mla	r4, fp, sl, r8
 800c4f2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c4f6:	46e2      	mov	sl, ip
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c4fe:	454f      	cmp	r7, r9
 800c500:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c504:	f84a 3b04 	str.w	r3, [sl], #4
 800c508:	d82b      	bhi.n	800c562 <__multiply+0x120>
 800c50a:	f8cc 8004 	str.w	r8, [ip, #4]
 800c50e:	9b01      	ldr	r3, [sp, #4]
 800c510:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c514:	3204      	adds	r2, #4
 800c516:	f1ba 0f00 	cmp.w	sl, #0
 800c51a:	d020      	beq.n	800c55e <__multiply+0x11c>
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	4689      	mov	r9, r1
 800c520:	46a8      	mov	r8, r5
 800c522:	f04f 0b00 	mov.w	fp, #0
 800c526:	f8b9 c000 	ldrh.w	ip, [r9]
 800c52a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c52e:	fb0a 440c 	mla	r4, sl, ip, r4
 800c532:	445c      	add	r4, fp
 800c534:	46c4      	mov	ip, r8
 800c536:	b29b      	uxth	r3, r3
 800c538:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c53c:	f84c 3b04 	str.w	r3, [ip], #4
 800c540:	f859 3b04 	ldr.w	r3, [r9], #4
 800c544:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c548:	0c1b      	lsrs	r3, r3, #16
 800c54a:	fb0a b303 	mla	r3, sl, r3, fp
 800c54e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c552:	454f      	cmp	r7, r9
 800c554:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c558:	d805      	bhi.n	800c566 <__multiply+0x124>
 800c55a:	f8c8 3004 	str.w	r3, [r8, #4]
 800c55e:	3504      	adds	r5, #4
 800c560:	e79b      	b.n	800c49a <__multiply+0x58>
 800c562:	46d4      	mov	ip, sl
 800c564:	e7b3      	b.n	800c4ce <__multiply+0x8c>
 800c566:	46e0      	mov	r8, ip
 800c568:	e7dd      	b.n	800c526 <__multiply+0xe4>
 800c56a:	3e01      	subs	r6, #1
 800c56c:	e799      	b.n	800c4a2 <__multiply+0x60>
	...

0800c570 <__pow5mult>:
 800c570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c574:	4615      	mov	r5, r2
 800c576:	f012 0203 	ands.w	r2, r2, #3
 800c57a:	4606      	mov	r6, r0
 800c57c:	460f      	mov	r7, r1
 800c57e:	d007      	beq.n	800c590 <__pow5mult+0x20>
 800c580:	3a01      	subs	r2, #1
 800c582:	4c21      	ldr	r4, [pc, #132]	; (800c608 <__pow5mult+0x98>)
 800c584:	2300      	movs	r3, #0
 800c586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c58a:	f7ff fe8a 	bl	800c2a2 <__multadd>
 800c58e:	4607      	mov	r7, r0
 800c590:	10ad      	asrs	r5, r5, #2
 800c592:	d035      	beq.n	800c600 <__pow5mult+0x90>
 800c594:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c596:	b93c      	cbnz	r4, 800c5a8 <__pow5mult+0x38>
 800c598:	2010      	movs	r0, #16
 800c59a:	f7fc fe93 	bl	80092c4 <malloc>
 800c59e:	6270      	str	r0, [r6, #36]	; 0x24
 800c5a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5a4:	6004      	str	r4, [r0, #0]
 800c5a6:	60c4      	str	r4, [r0, #12]
 800c5a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c5ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c5b0:	b94c      	cbnz	r4, 800c5c6 <__pow5mult+0x56>
 800c5b2:	f240 2171 	movw	r1, #625	; 0x271
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f7ff ff3a 	bl	800c430 <__i2b>
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f8c8 0008 	str.w	r0, [r8, #8]
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	6003      	str	r3, [r0, #0]
 800c5c6:	f04f 0800 	mov.w	r8, #0
 800c5ca:	07eb      	lsls	r3, r5, #31
 800c5cc:	d50a      	bpl.n	800c5e4 <__pow5mult+0x74>
 800c5ce:	4639      	mov	r1, r7
 800c5d0:	4622      	mov	r2, r4
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f7ff ff35 	bl	800c442 <__multiply>
 800c5d8:	4639      	mov	r1, r7
 800c5da:	4681      	mov	r9, r0
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f7ff fe49 	bl	800c274 <_Bfree>
 800c5e2:	464f      	mov	r7, r9
 800c5e4:	106d      	asrs	r5, r5, #1
 800c5e6:	d00b      	beq.n	800c600 <__pow5mult+0x90>
 800c5e8:	6820      	ldr	r0, [r4, #0]
 800c5ea:	b938      	cbnz	r0, 800c5fc <__pow5mult+0x8c>
 800c5ec:	4622      	mov	r2, r4
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f7ff ff26 	bl	800c442 <__multiply>
 800c5f6:	6020      	str	r0, [r4, #0]
 800c5f8:	f8c0 8000 	str.w	r8, [r0]
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	e7e4      	b.n	800c5ca <__pow5mult+0x5a>
 800c600:	4638      	mov	r0, r7
 800c602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c606:	bf00      	nop
 800c608:	0800f4b0 	.word	0x0800f4b0

0800c60c <__lshift>:
 800c60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c610:	460c      	mov	r4, r1
 800c612:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c616:	6923      	ldr	r3, [r4, #16]
 800c618:	6849      	ldr	r1, [r1, #4]
 800c61a:	eb0a 0903 	add.w	r9, sl, r3
 800c61e:	68a3      	ldr	r3, [r4, #8]
 800c620:	4607      	mov	r7, r0
 800c622:	4616      	mov	r6, r2
 800c624:	f109 0501 	add.w	r5, r9, #1
 800c628:	42ab      	cmp	r3, r5
 800c62a:	db32      	blt.n	800c692 <__lshift+0x86>
 800c62c:	4638      	mov	r0, r7
 800c62e:	f7ff fded 	bl	800c20c <_Balloc>
 800c632:	2300      	movs	r3, #0
 800c634:	4680      	mov	r8, r0
 800c636:	f100 0114 	add.w	r1, r0, #20
 800c63a:	461a      	mov	r2, r3
 800c63c:	4553      	cmp	r3, sl
 800c63e:	db2b      	blt.n	800c698 <__lshift+0x8c>
 800c640:	6920      	ldr	r0, [r4, #16]
 800c642:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c646:	f104 0314 	add.w	r3, r4, #20
 800c64a:	f016 021f 	ands.w	r2, r6, #31
 800c64e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c652:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c656:	d025      	beq.n	800c6a4 <__lshift+0x98>
 800c658:	f1c2 0e20 	rsb	lr, r2, #32
 800c65c:	2000      	movs	r0, #0
 800c65e:	681e      	ldr	r6, [r3, #0]
 800c660:	468a      	mov	sl, r1
 800c662:	4096      	lsls	r6, r2
 800c664:	4330      	orrs	r0, r6
 800c666:	f84a 0b04 	str.w	r0, [sl], #4
 800c66a:	f853 0b04 	ldr.w	r0, [r3], #4
 800c66e:	459c      	cmp	ip, r3
 800c670:	fa20 f00e 	lsr.w	r0, r0, lr
 800c674:	d814      	bhi.n	800c6a0 <__lshift+0x94>
 800c676:	6048      	str	r0, [r1, #4]
 800c678:	b108      	cbz	r0, 800c67e <__lshift+0x72>
 800c67a:	f109 0502 	add.w	r5, r9, #2
 800c67e:	3d01      	subs	r5, #1
 800c680:	4638      	mov	r0, r7
 800c682:	f8c8 5010 	str.w	r5, [r8, #16]
 800c686:	4621      	mov	r1, r4
 800c688:	f7ff fdf4 	bl	800c274 <_Bfree>
 800c68c:	4640      	mov	r0, r8
 800c68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c692:	3101      	adds	r1, #1
 800c694:	005b      	lsls	r3, r3, #1
 800c696:	e7c7      	b.n	800c628 <__lshift+0x1c>
 800c698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c69c:	3301      	adds	r3, #1
 800c69e:	e7cd      	b.n	800c63c <__lshift+0x30>
 800c6a0:	4651      	mov	r1, sl
 800c6a2:	e7dc      	b.n	800c65e <__lshift+0x52>
 800c6a4:	3904      	subs	r1, #4
 800c6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6aa:	f841 2f04 	str.w	r2, [r1, #4]!
 800c6ae:	459c      	cmp	ip, r3
 800c6b0:	d8f9      	bhi.n	800c6a6 <__lshift+0x9a>
 800c6b2:	e7e4      	b.n	800c67e <__lshift+0x72>

0800c6b4 <__mcmp>:
 800c6b4:	6903      	ldr	r3, [r0, #16]
 800c6b6:	690a      	ldr	r2, [r1, #16]
 800c6b8:	1a9b      	subs	r3, r3, r2
 800c6ba:	b530      	push	{r4, r5, lr}
 800c6bc:	d10c      	bne.n	800c6d8 <__mcmp+0x24>
 800c6be:	0092      	lsls	r2, r2, #2
 800c6c0:	3014      	adds	r0, #20
 800c6c2:	3114      	adds	r1, #20
 800c6c4:	1884      	adds	r4, r0, r2
 800c6c6:	4411      	add	r1, r2
 800c6c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c6cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c6d0:	4295      	cmp	r5, r2
 800c6d2:	d003      	beq.n	800c6dc <__mcmp+0x28>
 800c6d4:	d305      	bcc.n	800c6e2 <__mcmp+0x2e>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	4618      	mov	r0, r3
 800c6da:	bd30      	pop	{r4, r5, pc}
 800c6dc:	42a0      	cmp	r0, r4
 800c6de:	d3f3      	bcc.n	800c6c8 <__mcmp+0x14>
 800c6e0:	e7fa      	b.n	800c6d8 <__mcmp+0x24>
 800c6e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6e6:	e7f7      	b.n	800c6d8 <__mcmp+0x24>

0800c6e8 <__mdiff>:
 800c6e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ec:	460d      	mov	r5, r1
 800c6ee:	4607      	mov	r7, r0
 800c6f0:	4611      	mov	r1, r2
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	4614      	mov	r4, r2
 800c6f6:	f7ff ffdd 	bl	800c6b4 <__mcmp>
 800c6fa:	1e06      	subs	r6, r0, #0
 800c6fc:	d108      	bne.n	800c710 <__mdiff+0x28>
 800c6fe:	4631      	mov	r1, r6
 800c700:	4638      	mov	r0, r7
 800c702:	f7ff fd83 	bl	800c20c <_Balloc>
 800c706:	2301      	movs	r3, #1
 800c708:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c70c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c710:	bfa4      	itt	ge
 800c712:	4623      	movge	r3, r4
 800c714:	462c      	movge	r4, r5
 800c716:	4638      	mov	r0, r7
 800c718:	6861      	ldr	r1, [r4, #4]
 800c71a:	bfa6      	itte	ge
 800c71c:	461d      	movge	r5, r3
 800c71e:	2600      	movge	r6, #0
 800c720:	2601      	movlt	r6, #1
 800c722:	f7ff fd73 	bl	800c20c <_Balloc>
 800c726:	692b      	ldr	r3, [r5, #16]
 800c728:	60c6      	str	r6, [r0, #12]
 800c72a:	6926      	ldr	r6, [r4, #16]
 800c72c:	f105 0914 	add.w	r9, r5, #20
 800c730:	f104 0214 	add.w	r2, r4, #20
 800c734:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c738:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c73c:	f100 0514 	add.w	r5, r0, #20
 800c740:	f04f 0e00 	mov.w	lr, #0
 800c744:	f852 ab04 	ldr.w	sl, [r2], #4
 800c748:	f859 4b04 	ldr.w	r4, [r9], #4
 800c74c:	fa1e f18a 	uxtah	r1, lr, sl
 800c750:	b2a3      	uxth	r3, r4
 800c752:	1ac9      	subs	r1, r1, r3
 800c754:	0c23      	lsrs	r3, r4, #16
 800c756:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c75a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c75e:	b289      	uxth	r1, r1
 800c760:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800c764:	45c8      	cmp	r8, r9
 800c766:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c76a:	4694      	mov	ip, r2
 800c76c:	f845 3b04 	str.w	r3, [r5], #4
 800c770:	d8e8      	bhi.n	800c744 <__mdiff+0x5c>
 800c772:	45bc      	cmp	ip, r7
 800c774:	d304      	bcc.n	800c780 <__mdiff+0x98>
 800c776:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c77a:	b183      	cbz	r3, 800c79e <__mdiff+0xb6>
 800c77c:	6106      	str	r6, [r0, #16]
 800c77e:	e7c5      	b.n	800c70c <__mdiff+0x24>
 800c780:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c784:	fa1e f381 	uxtah	r3, lr, r1
 800c788:	141a      	asrs	r2, r3, #16
 800c78a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c78e:	b29b      	uxth	r3, r3
 800c790:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c794:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800c798:	f845 3b04 	str.w	r3, [r5], #4
 800c79c:	e7e9      	b.n	800c772 <__mdiff+0x8a>
 800c79e:	3e01      	subs	r6, #1
 800c7a0:	e7e9      	b.n	800c776 <__mdiff+0x8e>
	...

0800c7a4 <__ulp>:
 800c7a4:	4b12      	ldr	r3, [pc, #72]	; (800c7f0 <__ulp+0x4c>)
 800c7a6:	ee10 2a90 	vmov	r2, s1
 800c7aa:	401a      	ands	r2, r3
 800c7ac:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	dd04      	ble.n	800c7be <__ulp+0x1a>
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	ec41 0b10 	vmov	d0, r0, r1
 800c7bc:	4770      	bx	lr
 800c7be:	425b      	negs	r3, r3
 800c7c0:	151b      	asrs	r3, r3, #20
 800c7c2:	2b13      	cmp	r3, #19
 800c7c4:	f04f 0000 	mov.w	r0, #0
 800c7c8:	f04f 0100 	mov.w	r1, #0
 800c7cc:	dc04      	bgt.n	800c7d8 <__ulp+0x34>
 800c7ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800c7d2:	fa42 f103 	asr.w	r1, r2, r3
 800c7d6:	e7ef      	b.n	800c7b8 <__ulp+0x14>
 800c7d8:	3b14      	subs	r3, #20
 800c7da:	2b1e      	cmp	r3, #30
 800c7dc:	f04f 0201 	mov.w	r2, #1
 800c7e0:	bfda      	itte	le
 800c7e2:	f1c3 031f 	rsble	r3, r3, #31
 800c7e6:	fa02 f303 	lslle.w	r3, r2, r3
 800c7ea:	4613      	movgt	r3, r2
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	e7e3      	b.n	800c7b8 <__ulp+0x14>
 800c7f0:	7ff00000 	.word	0x7ff00000

0800c7f4 <__b2d>:
 800c7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f6:	6905      	ldr	r5, [r0, #16]
 800c7f8:	f100 0714 	add.w	r7, r0, #20
 800c7fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c800:	1f2e      	subs	r6, r5, #4
 800c802:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c806:	4620      	mov	r0, r4
 800c808:	f7ff fdc4 	bl	800c394 <__hi0bits>
 800c80c:	f1c0 0320 	rsb	r3, r0, #32
 800c810:	280a      	cmp	r0, #10
 800c812:	600b      	str	r3, [r1, #0]
 800c814:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c88c <__b2d+0x98>
 800c818:	dc14      	bgt.n	800c844 <__b2d+0x50>
 800c81a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c81e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c822:	42b7      	cmp	r7, r6
 800c824:	ea41 030c 	orr.w	r3, r1, ip
 800c828:	bf34      	ite	cc
 800c82a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c82e:	2100      	movcs	r1, #0
 800c830:	3015      	adds	r0, #21
 800c832:	fa04 f000 	lsl.w	r0, r4, r0
 800c836:	fa21 f10e 	lsr.w	r1, r1, lr
 800c83a:	ea40 0201 	orr.w	r2, r0, r1
 800c83e:	ec43 2b10 	vmov	d0, r2, r3
 800c842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c844:	42b7      	cmp	r7, r6
 800c846:	bf3a      	itte	cc
 800c848:	f1a5 0608 	subcc.w	r6, r5, #8
 800c84c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c850:	2100      	movcs	r1, #0
 800c852:	380b      	subs	r0, #11
 800c854:	d015      	beq.n	800c882 <__b2d+0x8e>
 800c856:	4084      	lsls	r4, r0
 800c858:	f1c0 0520 	rsb	r5, r0, #32
 800c85c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800c860:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800c864:	42be      	cmp	r6, r7
 800c866:	fa21 fc05 	lsr.w	ip, r1, r5
 800c86a:	ea44 030c 	orr.w	r3, r4, ip
 800c86e:	bf8c      	ite	hi
 800c870:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c874:	2400      	movls	r4, #0
 800c876:	fa01 f000 	lsl.w	r0, r1, r0
 800c87a:	40ec      	lsrs	r4, r5
 800c87c:	ea40 0204 	orr.w	r2, r0, r4
 800c880:	e7dd      	b.n	800c83e <__b2d+0x4a>
 800c882:	ea44 030c 	orr.w	r3, r4, ip
 800c886:	460a      	mov	r2, r1
 800c888:	e7d9      	b.n	800c83e <__b2d+0x4a>
 800c88a:	bf00      	nop
 800c88c:	3ff00000 	.word	0x3ff00000

0800c890 <__d2b>:
 800c890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c894:	460e      	mov	r6, r1
 800c896:	2101      	movs	r1, #1
 800c898:	ec59 8b10 	vmov	r8, r9, d0
 800c89c:	4615      	mov	r5, r2
 800c89e:	f7ff fcb5 	bl	800c20c <_Balloc>
 800c8a2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c8a6:	4607      	mov	r7, r0
 800c8a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c8ac:	bb34      	cbnz	r4, 800c8fc <__d2b+0x6c>
 800c8ae:	9301      	str	r3, [sp, #4]
 800c8b0:	f1b8 0300 	subs.w	r3, r8, #0
 800c8b4:	d027      	beq.n	800c906 <__d2b+0x76>
 800c8b6:	a802      	add	r0, sp, #8
 800c8b8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800c8bc:	f7ff fd89 	bl	800c3d2 <__lo0bits>
 800c8c0:	9900      	ldr	r1, [sp, #0]
 800c8c2:	b1f0      	cbz	r0, 800c902 <__d2b+0x72>
 800c8c4:	9a01      	ldr	r2, [sp, #4]
 800c8c6:	f1c0 0320 	rsb	r3, r0, #32
 800c8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800c8ce:	430b      	orrs	r3, r1
 800c8d0:	40c2      	lsrs	r2, r0
 800c8d2:	617b      	str	r3, [r7, #20]
 800c8d4:	9201      	str	r2, [sp, #4]
 800c8d6:	9b01      	ldr	r3, [sp, #4]
 800c8d8:	61bb      	str	r3, [r7, #24]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	bf14      	ite	ne
 800c8de:	2102      	movne	r1, #2
 800c8e0:	2101      	moveq	r1, #1
 800c8e2:	6139      	str	r1, [r7, #16]
 800c8e4:	b1c4      	cbz	r4, 800c918 <__d2b+0x88>
 800c8e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c8ea:	4404      	add	r4, r0
 800c8ec:	6034      	str	r4, [r6, #0]
 800c8ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c8f2:	6028      	str	r0, [r5, #0]
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	b003      	add	sp, #12
 800c8f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c900:	e7d5      	b.n	800c8ae <__d2b+0x1e>
 800c902:	6179      	str	r1, [r7, #20]
 800c904:	e7e7      	b.n	800c8d6 <__d2b+0x46>
 800c906:	a801      	add	r0, sp, #4
 800c908:	f7ff fd63 	bl	800c3d2 <__lo0bits>
 800c90c:	9b01      	ldr	r3, [sp, #4]
 800c90e:	617b      	str	r3, [r7, #20]
 800c910:	2101      	movs	r1, #1
 800c912:	6139      	str	r1, [r7, #16]
 800c914:	3020      	adds	r0, #32
 800c916:	e7e5      	b.n	800c8e4 <__d2b+0x54>
 800c918:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c91c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c920:	6030      	str	r0, [r6, #0]
 800c922:	6918      	ldr	r0, [r3, #16]
 800c924:	f7ff fd36 	bl	800c394 <__hi0bits>
 800c928:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c92c:	e7e1      	b.n	800c8f2 <__d2b+0x62>

0800c92e <__ratio>:
 800c92e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c932:	4688      	mov	r8, r1
 800c934:	4669      	mov	r1, sp
 800c936:	4681      	mov	r9, r0
 800c938:	f7ff ff5c 	bl	800c7f4 <__b2d>
 800c93c:	a901      	add	r1, sp, #4
 800c93e:	4640      	mov	r0, r8
 800c940:	ec57 6b10 	vmov	r6, r7, d0
 800c944:	f7ff ff56 	bl	800c7f4 <__b2d>
 800c948:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c94c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c950:	eba3 0c02 	sub.w	ip, r3, r2
 800c954:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c958:	1a9b      	subs	r3, r3, r2
 800c95a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c95e:	ec5b ab10 	vmov	sl, fp, d0
 800c962:	2b00      	cmp	r3, #0
 800c964:	bfce      	itee	gt
 800c966:	463a      	movgt	r2, r7
 800c968:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c96c:	465a      	movle	r2, fp
 800c96e:	4659      	mov	r1, fp
 800c970:	463d      	mov	r5, r7
 800c972:	bfd4      	ite	le
 800c974:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800c978:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800c97c:	4630      	mov	r0, r6
 800c97e:	ee10 2a10 	vmov	r2, s0
 800c982:	460b      	mov	r3, r1
 800c984:	4629      	mov	r1, r5
 800c986:	f7f3 ff71 	bl	800086c <__aeabi_ddiv>
 800c98a:	ec41 0b10 	vmov	d0, r0, r1
 800c98e:	b003      	add	sp, #12
 800c990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c994 <__copybits>:
 800c994:	3901      	subs	r1, #1
 800c996:	b510      	push	{r4, lr}
 800c998:	1149      	asrs	r1, r1, #5
 800c99a:	6914      	ldr	r4, [r2, #16]
 800c99c:	3101      	adds	r1, #1
 800c99e:	f102 0314 	add.w	r3, r2, #20
 800c9a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c9a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c9aa:	42a3      	cmp	r3, r4
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	d303      	bcc.n	800c9b8 <__copybits+0x24>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	428a      	cmp	r2, r1
 800c9b4:	d305      	bcc.n	800c9c2 <__copybits+0x2e>
 800c9b6:	bd10      	pop	{r4, pc}
 800c9b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9bc:	f840 2b04 	str.w	r2, [r0], #4
 800c9c0:	e7f3      	b.n	800c9aa <__copybits+0x16>
 800c9c2:	f842 3b04 	str.w	r3, [r2], #4
 800c9c6:	e7f4      	b.n	800c9b2 <__copybits+0x1e>

0800c9c8 <__any_on>:
 800c9c8:	f100 0214 	add.w	r2, r0, #20
 800c9cc:	6900      	ldr	r0, [r0, #16]
 800c9ce:	114b      	asrs	r3, r1, #5
 800c9d0:	4298      	cmp	r0, r3
 800c9d2:	b510      	push	{r4, lr}
 800c9d4:	db11      	blt.n	800c9fa <__any_on+0x32>
 800c9d6:	dd0a      	ble.n	800c9ee <__any_on+0x26>
 800c9d8:	f011 011f 	ands.w	r1, r1, #31
 800c9dc:	d007      	beq.n	800c9ee <__any_on+0x26>
 800c9de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9e2:	fa24 f001 	lsr.w	r0, r4, r1
 800c9e6:	fa00 f101 	lsl.w	r1, r0, r1
 800c9ea:	428c      	cmp	r4, r1
 800c9ec:	d10b      	bne.n	800ca06 <__any_on+0x3e>
 800c9ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d803      	bhi.n	800c9fe <__any_on+0x36>
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	bd10      	pop	{r4, pc}
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	e7f7      	b.n	800c9ee <__any_on+0x26>
 800c9fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca02:	2900      	cmp	r1, #0
 800ca04:	d0f5      	beq.n	800c9f2 <__any_on+0x2a>
 800ca06:	2001      	movs	r0, #1
 800ca08:	e7f6      	b.n	800c9f8 <__any_on+0x30>

0800ca0a <_calloc_r>:
 800ca0a:	b538      	push	{r3, r4, r5, lr}
 800ca0c:	fb02 f401 	mul.w	r4, r2, r1
 800ca10:	4621      	mov	r1, r4
 800ca12:	f7fc fcd9 	bl	80093c8 <_malloc_r>
 800ca16:	4605      	mov	r5, r0
 800ca18:	b118      	cbz	r0, 800ca22 <_calloc_r+0x18>
 800ca1a:	4622      	mov	r2, r4
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	f7fc fc7d 	bl	800931c <memset>
 800ca22:	4628      	mov	r0, r5
 800ca24:	bd38      	pop	{r3, r4, r5, pc}

0800ca26 <__ssputs_r>:
 800ca26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca2a:	688e      	ldr	r6, [r1, #8]
 800ca2c:	429e      	cmp	r6, r3
 800ca2e:	4682      	mov	sl, r0
 800ca30:	460c      	mov	r4, r1
 800ca32:	4690      	mov	r8, r2
 800ca34:	4699      	mov	r9, r3
 800ca36:	d837      	bhi.n	800caa8 <__ssputs_r+0x82>
 800ca38:	898a      	ldrh	r2, [r1, #12]
 800ca3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ca3e:	d031      	beq.n	800caa4 <__ssputs_r+0x7e>
 800ca40:	6825      	ldr	r5, [r4, #0]
 800ca42:	6909      	ldr	r1, [r1, #16]
 800ca44:	1a6f      	subs	r7, r5, r1
 800ca46:	6965      	ldr	r5, [r4, #20]
 800ca48:	2302      	movs	r3, #2
 800ca4a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ca4e:	fb95 f5f3 	sdiv	r5, r5, r3
 800ca52:	f109 0301 	add.w	r3, r9, #1
 800ca56:	443b      	add	r3, r7
 800ca58:	429d      	cmp	r5, r3
 800ca5a:	bf38      	it	cc
 800ca5c:	461d      	movcc	r5, r3
 800ca5e:	0553      	lsls	r3, r2, #21
 800ca60:	d530      	bpl.n	800cac4 <__ssputs_r+0x9e>
 800ca62:	4629      	mov	r1, r5
 800ca64:	f7fc fcb0 	bl	80093c8 <_malloc_r>
 800ca68:	4606      	mov	r6, r0
 800ca6a:	b950      	cbnz	r0, 800ca82 <__ssputs_r+0x5c>
 800ca6c:	230c      	movs	r3, #12
 800ca6e:	f8ca 3000 	str.w	r3, [sl]
 800ca72:	89a3      	ldrh	r3, [r4, #12]
 800ca74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca78:	81a3      	strh	r3, [r4, #12]
 800ca7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca82:	463a      	mov	r2, r7
 800ca84:	6921      	ldr	r1, [r4, #16]
 800ca86:	f7fc fc25 	bl	80092d4 <memcpy>
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ca90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca94:	81a3      	strh	r3, [r4, #12]
 800ca96:	6126      	str	r6, [r4, #16]
 800ca98:	6165      	str	r5, [r4, #20]
 800ca9a:	443e      	add	r6, r7
 800ca9c:	1bed      	subs	r5, r5, r7
 800ca9e:	6026      	str	r6, [r4, #0]
 800caa0:	60a5      	str	r5, [r4, #8]
 800caa2:	464e      	mov	r6, r9
 800caa4:	454e      	cmp	r6, r9
 800caa6:	d900      	bls.n	800caaa <__ssputs_r+0x84>
 800caa8:	464e      	mov	r6, r9
 800caaa:	4632      	mov	r2, r6
 800caac:	4641      	mov	r1, r8
 800caae:	6820      	ldr	r0, [r4, #0]
 800cab0:	f7fc fc1b 	bl	80092ea <memmove>
 800cab4:	68a3      	ldr	r3, [r4, #8]
 800cab6:	1b9b      	subs	r3, r3, r6
 800cab8:	60a3      	str	r3, [r4, #8]
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	441e      	add	r6, r3
 800cabe:	6026      	str	r6, [r4, #0]
 800cac0:	2000      	movs	r0, #0
 800cac2:	e7dc      	b.n	800ca7e <__ssputs_r+0x58>
 800cac4:	462a      	mov	r2, r5
 800cac6:	f000 f90e 	bl	800cce6 <_realloc_r>
 800caca:	4606      	mov	r6, r0
 800cacc:	2800      	cmp	r0, #0
 800cace:	d1e2      	bne.n	800ca96 <__ssputs_r+0x70>
 800cad0:	6921      	ldr	r1, [r4, #16]
 800cad2:	4650      	mov	r0, sl
 800cad4:	f7fc fc2a 	bl	800932c <_free_r>
 800cad8:	e7c8      	b.n	800ca6c <__ssputs_r+0x46>
	...

0800cadc <_svfiprintf_r>:
 800cadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cae0:	461d      	mov	r5, r3
 800cae2:	898b      	ldrh	r3, [r1, #12]
 800cae4:	061f      	lsls	r7, r3, #24
 800cae6:	b09d      	sub	sp, #116	; 0x74
 800cae8:	4680      	mov	r8, r0
 800caea:	460c      	mov	r4, r1
 800caec:	4616      	mov	r6, r2
 800caee:	d50f      	bpl.n	800cb10 <_svfiprintf_r+0x34>
 800caf0:	690b      	ldr	r3, [r1, #16]
 800caf2:	b96b      	cbnz	r3, 800cb10 <_svfiprintf_r+0x34>
 800caf4:	2140      	movs	r1, #64	; 0x40
 800caf6:	f7fc fc67 	bl	80093c8 <_malloc_r>
 800cafa:	6020      	str	r0, [r4, #0]
 800cafc:	6120      	str	r0, [r4, #16]
 800cafe:	b928      	cbnz	r0, 800cb0c <_svfiprintf_r+0x30>
 800cb00:	230c      	movs	r3, #12
 800cb02:	f8c8 3000 	str.w	r3, [r8]
 800cb06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb0a:	e0c8      	b.n	800cc9e <_svfiprintf_r+0x1c2>
 800cb0c:	2340      	movs	r3, #64	; 0x40
 800cb0e:	6163      	str	r3, [r4, #20]
 800cb10:	2300      	movs	r3, #0
 800cb12:	9309      	str	r3, [sp, #36]	; 0x24
 800cb14:	2320      	movs	r3, #32
 800cb16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb1a:	2330      	movs	r3, #48	; 0x30
 800cb1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb20:	9503      	str	r5, [sp, #12]
 800cb22:	f04f 0b01 	mov.w	fp, #1
 800cb26:	4637      	mov	r7, r6
 800cb28:	463d      	mov	r5, r7
 800cb2a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cb2e:	b10b      	cbz	r3, 800cb34 <_svfiprintf_r+0x58>
 800cb30:	2b25      	cmp	r3, #37	; 0x25
 800cb32:	d13e      	bne.n	800cbb2 <_svfiprintf_r+0xd6>
 800cb34:	ebb7 0a06 	subs.w	sl, r7, r6
 800cb38:	d00b      	beq.n	800cb52 <_svfiprintf_r+0x76>
 800cb3a:	4653      	mov	r3, sl
 800cb3c:	4632      	mov	r2, r6
 800cb3e:	4621      	mov	r1, r4
 800cb40:	4640      	mov	r0, r8
 800cb42:	f7ff ff70 	bl	800ca26 <__ssputs_r>
 800cb46:	3001      	adds	r0, #1
 800cb48:	f000 80a4 	beq.w	800cc94 <_svfiprintf_r+0x1b8>
 800cb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb4e:	4453      	add	r3, sl
 800cb50:	9309      	str	r3, [sp, #36]	; 0x24
 800cb52:	783b      	ldrb	r3, [r7, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 809d 	beq.w	800cc94 <_svfiprintf_r+0x1b8>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb64:	9304      	str	r3, [sp, #16]
 800cb66:	9307      	str	r3, [sp, #28]
 800cb68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb6c:	931a      	str	r3, [sp, #104]	; 0x68
 800cb6e:	462f      	mov	r7, r5
 800cb70:	2205      	movs	r2, #5
 800cb72:	f817 1b01 	ldrb.w	r1, [r7], #1
 800cb76:	4850      	ldr	r0, [pc, #320]	; (800ccb8 <_svfiprintf_r+0x1dc>)
 800cb78:	f7f3 fb42 	bl	8000200 <memchr>
 800cb7c:	9b04      	ldr	r3, [sp, #16]
 800cb7e:	b9d0      	cbnz	r0, 800cbb6 <_svfiprintf_r+0xda>
 800cb80:	06d9      	lsls	r1, r3, #27
 800cb82:	bf44      	itt	mi
 800cb84:	2220      	movmi	r2, #32
 800cb86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb8a:	071a      	lsls	r2, r3, #28
 800cb8c:	bf44      	itt	mi
 800cb8e:	222b      	movmi	r2, #43	; 0x2b
 800cb90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800cb94:	782a      	ldrb	r2, [r5, #0]
 800cb96:	2a2a      	cmp	r2, #42	; 0x2a
 800cb98:	d015      	beq.n	800cbc6 <_svfiprintf_r+0xea>
 800cb9a:	9a07      	ldr	r2, [sp, #28]
 800cb9c:	462f      	mov	r7, r5
 800cb9e:	2000      	movs	r0, #0
 800cba0:	250a      	movs	r5, #10
 800cba2:	4639      	mov	r1, r7
 800cba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cba8:	3b30      	subs	r3, #48	; 0x30
 800cbaa:	2b09      	cmp	r3, #9
 800cbac:	d94d      	bls.n	800cc4a <_svfiprintf_r+0x16e>
 800cbae:	b1b8      	cbz	r0, 800cbe0 <_svfiprintf_r+0x104>
 800cbb0:	e00f      	b.n	800cbd2 <_svfiprintf_r+0xf6>
 800cbb2:	462f      	mov	r7, r5
 800cbb4:	e7b8      	b.n	800cb28 <_svfiprintf_r+0x4c>
 800cbb6:	4a40      	ldr	r2, [pc, #256]	; (800ccb8 <_svfiprintf_r+0x1dc>)
 800cbb8:	1a80      	subs	r0, r0, r2
 800cbba:	fa0b f000 	lsl.w	r0, fp, r0
 800cbbe:	4318      	orrs	r0, r3
 800cbc0:	9004      	str	r0, [sp, #16]
 800cbc2:	463d      	mov	r5, r7
 800cbc4:	e7d3      	b.n	800cb6e <_svfiprintf_r+0x92>
 800cbc6:	9a03      	ldr	r2, [sp, #12]
 800cbc8:	1d11      	adds	r1, r2, #4
 800cbca:	6812      	ldr	r2, [r2, #0]
 800cbcc:	9103      	str	r1, [sp, #12]
 800cbce:	2a00      	cmp	r2, #0
 800cbd0:	db01      	blt.n	800cbd6 <_svfiprintf_r+0xfa>
 800cbd2:	9207      	str	r2, [sp, #28]
 800cbd4:	e004      	b.n	800cbe0 <_svfiprintf_r+0x104>
 800cbd6:	4252      	negs	r2, r2
 800cbd8:	f043 0302 	orr.w	r3, r3, #2
 800cbdc:	9207      	str	r2, [sp, #28]
 800cbde:	9304      	str	r3, [sp, #16]
 800cbe0:	783b      	ldrb	r3, [r7, #0]
 800cbe2:	2b2e      	cmp	r3, #46	; 0x2e
 800cbe4:	d10c      	bne.n	800cc00 <_svfiprintf_r+0x124>
 800cbe6:	787b      	ldrb	r3, [r7, #1]
 800cbe8:	2b2a      	cmp	r3, #42	; 0x2a
 800cbea:	d133      	bne.n	800cc54 <_svfiprintf_r+0x178>
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	1d1a      	adds	r2, r3, #4
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	9203      	str	r2, [sp, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bfb8      	it	lt
 800cbf8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cbfc:	3702      	adds	r7, #2
 800cbfe:	9305      	str	r3, [sp, #20]
 800cc00:	4d2e      	ldr	r5, [pc, #184]	; (800ccbc <_svfiprintf_r+0x1e0>)
 800cc02:	7839      	ldrb	r1, [r7, #0]
 800cc04:	2203      	movs	r2, #3
 800cc06:	4628      	mov	r0, r5
 800cc08:	f7f3 fafa 	bl	8000200 <memchr>
 800cc0c:	b138      	cbz	r0, 800cc1e <_svfiprintf_r+0x142>
 800cc0e:	2340      	movs	r3, #64	; 0x40
 800cc10:	1b40      	subs	r0, r0, r5
 800cc12:	fa03 f000 	lsl.w	r0, r3, r0
 800cc16:	9b04      	ldr	r3, [sp, #16]
 800cc18:	4303      	orrs	r3, r0
 800cc1a:	3701      	adds	r7, #1
 800cc1c:	9304      	str	r3, [sp, #16]
 800cc1e:	7839      	ldrb	r1, [r7, #0]
 800cc20:	4827      	ldr	r0, [pc, #156]	; (800ccc0 <_svfiprintf_r+0x1e4>)
 800cc22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc26:	2206      	movs	r2, #6
 800cc28:	1c7e      	adds	r6, r7, #1
 800cc2a:	f7f3 fae9 	bl	8000200 <memchr>
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	d038      	beq.n	800cca4 <_svfiprintf_r+0x1c8>
 800cc32:	4b24      	ldr	r3, [pc, #144]	; (800ccc4 <_svfiprintf_r+0x1e8>)
 800cc34:	bb13      	cbnz	r3, 800cc7c <_svfiprintf_r+0x1a0>
 800cc36:	9b03      	ldr	r3, [sp, #12]
 800cc38:	3307      	adds	r3, #7
 800cc3a:	f023 0307 	bic.w	r3, r3, #7
 800cc3e:	3308      	adds	r3, #8
 800cc40:	9303      	str	r3, [sp, #12]
 800cc42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc44:	444b      	add	r3, r9
 800cc46:	9309      	str	r3, [sp, #36]	; 0x24
 800cc48:	e76d      	b.n	800cb26 <_svfiprintf_r+0x4a>
 800cc4a:	fb05 3202 	mla	r2, r5, r2, r3
 800cc4e:	2001      	movs	r0, #1
 800cc50:	460f      	mov	r7, r1
 800cc52:	e7a6      	b.n	800cba2 <_svfiprintf_r+0xc6>
 800cc54:	2300      	movs	r3, #0
 800cc56:	3701      	adds	r7, #1
 800cc58:	9305      	str	r3, [sp, #20]
 800cc5a:	4619      	mov	r1, r3
 800cc5c:	250a      	movs	r5, #10
 800cc5e:	4638      	mov	r0, r7
 800cc60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc64:	3a30      	subs	r2, #48	; 0x30
 800cc66:	2a09      	cmp	r2, #9
 800cc68:	d903      	bls.n	800cc72 <_svfiprintf_r+0x196>
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d0c8      	beq.n	800cc00 <_svfiprintf_r+0x124>
 800cc6e:	9105      	str	r1, [sp, #20]
 800cc70:	e7c6      	b.n	800cc00 <_svfiprintf_r+0x124>
 800cc72:	fb05 2101 	mla	r1, r5, r1, r2
 800cc76:	2301      	movs	r3, #1
 800cc78:	4607      	mov	r7, r0
 800cc7a:	e7f0      	b.n	800cc5e <_svfiprintf_r+0x182>
 800cc7c:	ab03      	add	r3, sp, #12
 800cc7e:	9300      	str	r3, [sp, #0]
 800cc80:	4622      	mov	r2, r4
 800cc82:	4b11      	ldr	r3, [pc, #68]	; (800ccc8 <_svfiprintf_r+0x1ec>)
 800cc84:	a904      	add	r1, sp, #16
 800cc86:	4640      	mov	r0, r8
 800cc88:	f7fc fc8c 	bl	80095a4 <_printf_float>
 800cc8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cc90:	4681      	mov	r9, r0
 800cc92:	d1d6      	bne.n	800cc42 <_svfiprintf_r+0x166>
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	065b      	lsls	r3, r3, #25
 800cc98:	f53f af35 	bmi.w	800cb06 <_svfiprintf_r+0x2a>
 800cc9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc9e:	b01d      	add	sp, #116	; 0x74
 800cca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cca4:	ab03      	add	r3, sp, #12
 800cca6:	9300      	str	r3, [sp, #0]
 800cca8:	4622      	mov	r2, r4
 800ccaa:	4b07      	ldr	r3, [pc, #28]	; (800ccc8 <_svfiprintf_r+0x1ec>)
 800ccac:	a904      	add	r1, sp, #16
 800ccae:	4640      	mov	r0, r8
 800ccb0:	f7fc ff2e 	bl	8009b10 <_printf_i>
 800ccb4:	e7ea      	b.n	800cc8c <_svfiprintf_r+0x1b0>
 800ccb6:	bf00      	nop
 800ccb8:	0800f4bc 	.word	0x0800f4bc
 800ccbc:	0800f4c2 	.word	0x0800f4c2
 800ccc0:	0800f4c6 	.word	0x0800f4c6
 800ccc4:	080095a5 	.word	0x080095a5
 800ccc8:	0800ca27 	.word	0x0800ca27

0800cccc <__ascii_wctomb>:
 800cccc:	b149      	cbz	r1, 800cce2 <__ascii_wctomb+0x16>
 800ccce:	2aff      	cmp	r2, #255	; 0xff
 800ccd0:	bf85      	ittet	hi
 800ccd2:	238a      	movhi	r3, #138	; 0x8a
 800ccd4:	6003      	strhi	r3, [r0, #0]
 800ccd6:	700a      	strbls	r2, [r1, #0]
 800ccd8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ccdc:	bf98      	it	ls
 800ccde:	2001      	movls	r0, #1
 800cce0:	4770      	bx	lr
 800cce2:	4608      	mov	r0, r1
 800cce4:	4770      	bx	lr

0800cce6 <_realloc_r>:
 800cce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cce8:	4607      	mov	r7, r0
 800ccea:	4614      	mov	r4, r2
 800ccec:	460e      	mov	r6, r1
 800ccee:	b921      	cbnz	r1, 800ccfa <_realloc_r+0x14>
 800ccf0:	4611      	mov	r1, r2
 800ccf2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ccf6:	f7fc bb67 	b.w	80093c8 <_malloc_r>
 800ccfa:	b922      	cbnz	r2, 800cd06 <_realloc_r+0x20>
 800ccfc:	f7fc fb16 	bl	800932c <_free_r>
 800cd00:	4625      	mov	r5, r4
 800cd02:	4628      	mov	r0, r5
 800cd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd06:	f000 f814 	bl	800cd32 <_malloc_usable_size_r>
 800cd0a:	42a0      	cmp	r0, r4
 800cd0c:	d20f      	bcs.n	800cd2e <_realloc_r+0x48>
 800cd0e:	4621      	mov	r1, r4
 800cd10:	4638      	mov	r0, r7
 800cd12:	f7fc fb59 	bl	80093c8 <_malloc_r>
 800cd16:	4605      	mov	r5, r0
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d0f2      	beq.n	800cd02 <_realloc_r+0x1c>
 800cd1c:	4631      	mov	r1, r6
 800cd1e:	4622      	mov	r2, r4
 800cd20:	f7fc fad8 	bl	80092d4 <memcpy>
 800cd24:	4631      	mov	r1, r6
 800cd26:	4638      	mov	r0, r7
 800cd28:	f7fc fb00 	bl	800932c <_free_r>
 800cd2c:	e7e9      	b.n	800cd02 <_realloc_r+0x1c>
 800cd2e:	4635      	mov	r5, r6
 800cd30:	e7e7      	b.n	800cd02 <_realloc_r+0x1c>

0800cd32 <_malloc_usable_size_r>:
 800cd32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd36:	1f18      	subs	r0, r3, #4
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	bfbc      	itt	lt
 800cd3c:	580b      	ldrlt	r3, [r1, r0]
 800cd3e:	18c0      	addlt	r0, r0, r3
 800cd40:	4770      	bx	lr
 800cd42:	0000      	movs	r0, r0
 800cd44:	0000      	movs	r0, r0
	...

0800cd48 <sin>:
 800cd48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd4a:	ec51 0b10 	vmov	r0, r1, d0
 800cd4e:	4a20      	ldr	r2, [pc, #128]	; (800cdd0 <sin+0x88>)
 800cd50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd54:	4293      	cmp	r3, r2
 800cd56:	dc07      	bgt.n	800cd68 <sin+0x20>
 800cd58:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800cdc8 <sin+0x80>
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	f000 fe37 	bl	800d9d0 <__kernel_sin>
 800cd62:	ec51 0b10 	vmov	r0, r1, d0
 800cd66:	e007      	b.n	800cd78 <sin+0x30>
 800cd68:	4a1a      	ldr	r2, [pc, #104]	; (800cdd4 <sin+0x8c>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	dd09      	ble.n	800cd82 <sin+0x3a>
 800cd6e:	ee10 2a10 	vmov	r2, s0
 800cd72:	460b      	mov	r3, r1
 800cd74:	f7f3 fa98 	bl	80002a8 <__aeabi_dsub>
 800cd78:	ec41 0b10 	vmov	d0, r0, r1
 800cd7c:	b005      	add	sp, #20
 800cd7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd82:	4668      	mov	r0, sp
 800cd84:	f000 f828 	bl	800cdd8 <__ieee754_rem_pio2>
 800cd88:	f000 0003 	and.w	r0, r0, #3
 800cd8c:	2801      	cmp	r0, #1
 800cd8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd92:	ed9d 0b00 	vldr	d0, [sp]
 800cd96:	d004      	beq.n	800cda2 <sin+0x5a>
 800cd98:	2802      	cmp	r0, #2
 800cd9a:	d005      	beq.n	800cda8 <sin+0x60>
 800cd9c:	b970      	cbnz	r0, 800cdbc <sin+0x74>
 800cd9e:	2001      	movs	r0, #1
 800cda0:	e7dd      	b.n	800cd5e <sin+0x16>
 800cda2:	f000 fa0d 	bl	800d1c0 <__kernel_cos>
 800cda6:	e7dc      	b.n	800cd62 <sin+0x1a>
 800cda8:	2001      	movs	r0, #1
 800cdaa:	f000 fe11 	bl	800d9d0 <__kernel_sin>
 800cdae:	ec53 2b10 	vmov	r2, r3, d0
 800cdb2:	ee10 0a10 	vmov	r0, s0
 800cdb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cdba:	e7dd      	b.n	800cd78 <sin+0x30>
 800cdbc:	f000 fa00 	bl	800d1c0 <__kernel_cos>
 800cdc0:	e7f5      	b.n	800cdae <sin+0x66>
 800cdc2:	bf00      	nop
 800cdc4:	f3af 8000 	nop.w
	...
 800cdd0:	3fe921fb 	.word	0x3fe921fb
 800cdd4:	7fefffff 	.word	0x7fefffff

0800cdd8 <__ieee754_rem_pio2>:
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cddc:	ec57 6b10 	vmov	r6, r7, d0
 800cde0:	4bc3      	ldr	r3, [pc, #780]	; (800d0f0 <__ieee754_rem_pio2+0x318>)
 800cde2:	b08d      	sub	sp, #52	; 0x34
 800cde4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800cde8:	4598      	cmp	r8, r3
 800cdea:	4604      	mov	r4, r0
 800cdec:	9704      	str	r7, [sp, #16]
 800cdee:	dc07      	bgt.n	800ce00 <__ieee754_rem_pio2+0x28>
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	ed84 0b00 	vstr	d0, [r4]
 800cdf8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800cdfc:	2500      	movs	r5, #0
 800cdfe:	e027      	b.n	800ce50 <__ieee754_rem_pio2+0x78>
 800ce00:	4bbc      	ldr	r3, [pc, #752]	; (800d0f4 <__ieee754_rem_pio2+0x31c>)
 800ce02:	4598      	cmp	r8, r3
 800ce04:	dc75      	bgt.n	800cef2 <__ieee754_rem_pio2+0x11a>
 800ce06:	9b04      	ldr	r3, [sp, #16]
 800ce08:	4dbb      	ldr	r5, [pc, #748]	; (800d0f8 <__ieee754_rem_pio2+0x320>)
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	ee10 0a10 	vmov	r0, s0
 800ce10:	a3a9      	add	r3, pc, #676	; (adr r3, 800d0b8 <__ieee754_rem_pio2+0x2e0>)
 800ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce16:	4639      	mov	r1, r7
 800ce18:	dd36      	ble.n	800ce88 <__ieee754_rem_pio2+0xb0>
 800ce1a:	f7f3 fa45 	bl	80002a8 <__aeabi_dsub>
 800ce1e:	45a8      	cmp	r8, r5
 800ce20:	4606      	mov	r6, r0
 800ce22:	460f      	mov	r7, r1
 800ce24:	d018      	beq.n	800ce58 <__ieee754_rem_pio2+0x80>
 800ce26:	a3a6      	add	r3, pc, #664	; (adr r3, 800d0c0 <__ieee754_rem_pio2+0x2e8>)
 800ce28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2c:	f7f3 fa3c 	bl	80002a8 <__aeabi_dsub>
 800ce30:	4602      	mov	r2, r0
 800ce32:	460b      	mov	r3, r1
 800ce34:	e9c4 2300 	strd	r2, r3, [r4]
 800ce38:	4630      	mov	r0, r6
 800ce3a:	4639      	mov	r1, r7
 800ce3c:	f7f3 fa34 	bl	80002a8 <__aeabi_dsub>
 800ce40:	a39f      	add	r3, pc, #636	; (adr r3, 800d0c0 <__ieee754_rem_pio2+0x2e8>)
 800ce42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce46:	f7f3 fa2f 	bl	80002a8 <__aeabi_dsub>
 800ce4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ce4e:	2501      	movs	r5, #1
 800ce50:	4628      	mov	r0, r5
 800ce52:	b00d      	add	sp, #52	; 0x34
 800ce54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce58:	a39b      	add	r3, pc, #620	; (adr r3, 800d0c8 <__ieee754_rem_pio2+0x2f0>)
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	f7f3 fa23 	bl	80002a8 <__aeabi_dsub>
 800ce62:	a39b      	add	r3, pc, #620	; (adr r3, 800d0d0 <__ieee754_rem_pio2+0x2f8>)
 800ce64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce68:	4606      	mov	r6, r0
 800ce6a:	460f      	mov	r7, r1
 800ce6c:	f7f3 fa1c 	bl	80002a8 <__aeabi_dsub>
 800ce70:	4602      	mov	r2, r0
 800ce72:	460b      	mov	r3, r1
 800ce74:	e9c4 2300 	strd	r2, r3, [r4]
 800ce78:	4630      	mov	r0, r6
 800ce7a:	4639      	mov	r1, r7
 800ce7c:	f7f3 fa14 	bl	80002a8 <__aeabi_dsub>
 800ce80:	a393      	add	r3, pc, #588	; (adr r3, 800d0d0 <__ieee754_rem_pio2+0x2f8>)
 800ce82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce86:	e7de      	b.n	800ce46 <__ieee754_rem_pio2+0x6e>
 800ce88:	f7f3 fa10 	bl	80002ac <__adddf3>
 800ce8c:	45a8      	cmp	r8, r5
 800ce8e:	4606      	mov	r6, r0
 800ce90:	460f      	mov	r7, r1
 800ce92:	d016      	beq.n	800cec2 <__ieee754_rem_pio2+0xea>
 800ce94:	a38a      	add	r3, pc, #552	; (adr r3, 800d0c0 <__ieee754_rem_pio2+0x2e8>)
 800ce96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9a:	f7f3 fa07 	bl	80002ac <__adddf3>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	e9c4 2300 	strd	r2, r3, [r4]
 800cea6:	4630      	mov	r0, r6
 800cea8:	4639      	mov	r1, r7
 800ceaa:	f7f3 f9fd 	bl	80002a8 <__aeabi_dsub>
 800ceae:	a384      	add	r3, pc, #528	; (adr r3, 800d0c0 <__ieee754_rem_pio2+0x2e8>)
 800ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb4:	f7f3 f9fa 	bl	80002ac <__adddf3>
 800ceb8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800cebc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cec0:	e7c6      	b.n	800ce50 <__ieee754_rem_pio2+0x78>
 800cec2:	a381      	add	r3, pc, #516	; (adr r3, 800d0c8 <__ieee754_rem_pio2+0x2f0>)
 800cec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec8:	f7f3 f9f0 	bl	80002ac <__adddf3>
 800cecc:	a380      	add	r3, pc, #512	; (adr r3, 800d0d0 <__ieee754_rem_pio2+0x2f8>)
 800cece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced2:	4606      	mov	r6, r0
 800ced4:	460f      	mov	r7, r1
 800ced6:	f7f3 f9e9 	bl	80002ac <__adddf3>
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	e9c4 2300 	strd	r2, r3, [r4]
 800cee2:	4630      	mov	r0, r6
 800cee4:	4639      	mov	r1, r7
 800cee6:	f7f3 f9df 	bl	80002a8 <__aeabi_dsub>
 800ceea:	a379      	add	r3, pc, #484	; (adr r3, 800d0d0 <__ieee754_rem_pio2+0x2f8>)
 800ceec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef0:	e7e0      	b.n	800ceb4 <__ieee754_rem_pio2+0xdc>
 800cef2:	4b82      	ldr	r3, [pc, #520]	; (800d0fc <__ieee754_rem_pio2+0x324>)
 800cef4:	4598      	cmp	r8, r3
 800cef6:	f300 80d0 	bgt.w	800d09a <__ieee754_rem_pio2+0x2c2>
 800cefa:	f000 fe23 	bl	800db44 <fabs>
 800cefe:	ec57 6b10 	vmov	r6, r7, d0
 800cf02:	ee10 0a10 	vmov	r0, s0
 800cf06:	a374      	add	r3, pc, #464	; (adr r3, 800d0d8 <__ieee754_rem_pio2+0x300>)
 800cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf0c:	4639      	mov	r1, r7
 800cf0e:	f7f3 fb83 	bl	8000618 <__aeabi_dmul>
 800cf12:	2200      	movs	r2, #0
 800cf14:	4b7a      	ldr	r3, [pc, #488]	; (800d100 <__ieee754_rem_pio2+0x328>)
 800cf16:	f7f3 f9c9 	bl	80002ac <__adddf3>
 800cf1a:	f7f3 fe2d 	bl	8000b78 <__aeabi_d2iz>
 800cf1e:	4605      	mov	r5, r0
 800cf20:	f7f3 fb10 	bl	8000544 <__aeabi_i2d>
 800cf24:	a364      	add	r3, pc, #400	; (adr r3, 800d0b8 <__ieee754_rem_pio2+0x2e0>)
 800cf26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf2e:	f7f3 fb73 	bl	8000618 <__aeabi_dmul>
 800cf32:	4602      	mov	r2, r0
 800cf34:	460b      	mov	r3, r1
 800cf36:	4630      	mov	r0, r6
 800cf38:	4639      	mov	r1, r7
 800cf3a:	f7f3 f9b5 	bl	80002a8 <__aeabi_dsub>
 800cf3e:	a360      	add	r3, pc, #384	; (adr r3, 800d0c0 <__ieee754_rem_pio2+0x2e8>)
 800cf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf44:	4682      	mov	sl, r0
 800cf46:	468b      	mov	fp, r1
 800cf48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf4c:	f7f3 fb64 	bl	8000618 <__aeabi_dmul>
 800cf50:	2d1f      	cmp	r5, #31
 800cf52:	4606      	mov	r6, r0
 800cf54:	460f      	mov	r7, r1
 800cf56:	dc0c      	bgt.n	800cf72 <__ieee754_rem_pio2+0x19a>
 800cf58:	1e6a      	subs	r2, r5, #1
 800cf5a:	4b6a      	ldr	r3, [pc, #424]	; (800d104 <__ieee754_rem_pio2+0x32c>)
 800cf5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf60:	4543      	cmp	r3, r8
 800cf62:	d006      	beq.n	800cf72 <__ieee754_rem_pio2+0x19a>
 800cf64:	4632      	mov	r2, r6
 800cf66:	463b      	mov	r3, r7
 800cf68:	4650      	mov	r0, sl
 800cf6a:	4659      	mov	r1, fp
 800cf6c:	f7f3 f99c 	bl	80002a8 <__aeabi_dsub>
 800cf70:	e00e      	b.n	800cf90 <__ieee754_rem_pio2+0x1b8>
 800cf72:	4632      	mov	r2, r6
 800cf74:	463b      	mov	r3, r7
 800cf76:	4650      	mov	r0, sl
 800cf78:	4659      	mov	r1, fp
 800cf7a:	f7f3 f995 	bl	80002a8 <__aeabi_dsub>
 800cf7e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cf82:	9305      	str	r3, [sp, #20]
 800cf84:	9a05      	ldr	r2, [sp, #20]
 800cf86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	2b10      	cmp	r3, #16
 800cf8e:	dc02      	bgt.n	800cf96 <__ieee754_rem_pio2+0x1be>
 800cf90:	e9c4 0100 	strd	r0, r1, [r4]
 800cf94:	e039      	b.n	800d00a <__ieee754_rem_pio2+0x232>
 800cf96:	a34c      	add	r3, pc, #304	; (adr r3, 800d0c8 <__ieee754_rem_pio2+0x2f0>)
 800cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfa0:	f7f3 fb3a 	bl	8000618 <__aeabi_dmul>
 800cfa4:	4606      	mov	r6, r0
 800cfa6:	460f      	mov	r7, r1
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
 800cfac:	4650      	mov	r0, sl
 800cfae:	4659      	mov	r1, fp
 800cfb0:	f7f3 f97a 	bl	80002a8 <__aeabi_dsub>
 800cfb4:	4602      	mov	r2, r0
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	4680      	mov	r8, r0
 800cfba:	4689      	mov	r9, r1
 800cfbc:	4650      	mov	r0, sl
 800cfbe:	4659      	mov	r1, fp
 800cfc0:	f7f3 f972 	bl	80002a8 <__aeabi_dsub>
 800cfc4:	4632      	mov	r2, r6
 800cfc6:	463b      	mov	r3, r7
 800cfc8:	f7f3 f96e 	bl	80002a8 <__aeabi_dsub>
 800cfcc:	a340      	add	r3, pc, #256	; (adr r3, 800d0d0 <__ieee754_rem_pio2+0x2f8>)
 800cfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd2:	4606      	mov	r6, r0
 800cfd4:	460f      	mov	r7, r1
 800cfd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfda:	f7f3 fb1d 	bl	8000618 <__aeabi_dmul>
 800cfde:	4632      	mov	r2, r6
 800cfe0:	463b      	mov	r3, r7
 800cfe2:	f7f3 f961 	bl	80002a8 <__aeabi_dsub>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	460b      	mov	r3, r1
 800cfea:	4606      	mov	r6, r0
 800cfec:	460f      	mov	r7, r1
 800cfee:	4640      	mov	r0, r8
 800cff0:	4649      	mov	r1, r9
 800cff2:	f7f3 f959 	bl	80002a8 <__aeabi_dsub>
 800cff6:	9a05      	ldr	r2, [sp, #20]
 800cff8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800cffc:	1ad3      	subs	r3, r2, r3
 800cffe:	2b31      	cmp	r3, #49	; 0x31
 800d000:	dc20      	bgt.n	800d044 <__ieee754_rem_pio2+0x26c>
 800d002:	e9c4 0100 	strd	r0, r1, [r4]
 800d006:	46c2      	mov	sl, r8
 800d008:	46cb      	mov	fp, r9
 800d00a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d00e:	4650      	mov	r0, sl
 800d010:	4642      	mov	r2, r8
 800d012:	464b      	mov	r3, r9
 800d014:	4659      	mov	r1, fp
 800d016:	f7f3 f947 	bl	80002a8 <__aeabi_dsub>
 800d01a:	463b      	mov	r3, r7
 800d01c:	4632      	mov	r2, r6
 800d01e:	f7f3 f943 	bl	80002a8 <__aeabi_dsub>
 800d022:	9b04      	ldr	r3, [sp, #16]
 800d024:	2b00      	cmp	r3, #0
 800d026:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d02a:	f6bf af11 	bge.w	800ce50 <__ieee754_rem_pio2+0x78>
 800d02e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d032:	6063      	str	r3, [r4, #4]
 800d034:	f8c4 8000 	str.w	r8, [r4]
 800d038:	60a0      	str	r0, [r4, #8]
 800d03a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d03e:	60e3      	str	r3, [r4, #12]
 800d040:	426d      	negs	r5, r5
 800d042:	e705      	b.n	800ce50 <__ieee754_rem_pio2+0x78>
 800d044:	a326      	add	r3, pc, #152	; (adr r3, 800d0e0 <__ieee754_rem_pio2+0x308>)
 800d046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d04e:	f7f3 fae3 	bl	8000618 <__aeabi_dmul>
 800d052:	4606      	mov	r6, r0
 800d054:	460f      	mov	r7, r1
 800d056:	4602      	mov	r2, r0
 800d058:	460b      	mov	r3, r1
 800d05a:	4640      	mov	r0, r8
 800d05c:	4649      	mov	r1, r9
 800d05e:	f7f3 f923 	bl	80002a8 <__aeabi_dsub>
 800d062:	4602      	mov	r2, r0
 800d064:	460b      	mov	r3, r1
 800d066:	4682      	mov	sl, r0
 800d068:	468b      	mov	fp, r1
 800d06a:	4640      	mov	r0, r8
 800d06c:	4649      	mov	r1, r9
 800d06e:	f7f3 f91b 	bl	80002a8 <__aeabi_dsub>
 800d072:	4632      	mov	r2, r6
 800d074:	463b      	mov	r3, r7
 800d076:	f7f3 f917 	bl	80002a8 <__aeabi_dsub>
 800d07a:	a31b      	add	r3, pc, #108	; (adr r3, 800d0e8 <__ieee754_rem_pio2+0x310>)
 800d07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d080:	4606      	mov	r6, r0
 800d082:	460f      	mov	r7, r1
 800d084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d088:	f7f3 fac6 	bl	8000618 <__aeabi_dmul>
 800d08c:	4632      	mov	r2, r6
 800d08e:	463b      	mov	r3, r7
 800d090:	f7f3 f90a 	bl	80002a8 <__aeabi_dsub>
 800d094:	4606      	mov	r6, r0
 800d096:	460f      	mov	r7, r1
 800d098:	e764      	b.n	800cf64 <__ieee754_rem_pio2+0x18c>
 800d09a:	4b1b      	ldr	r3, [pc, #108]	; (800d108 <__ieee754_rem_pio2+0x330>)
 800d09c:	4598      	cmp	r8, r3
 800d09e:	dd35      	ble.n	800d10c <__ieee754_rem_pio2+0x334>
 800d0a0:	ee10 2a10 	vmov	r2, s0
 800d0a4:	463b      	mov	r3, r7
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	4639      	mov	r1, r7
 800d0aa:	f7f3 f8fd 	bl	80002a8 <__aeabi_dsub>
 800d0ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d0b2:	e9c4 0100 	strd	r0, r1, [r4]
 800d0b6:	e6a1      	b.n	800cdfc <__ieee754_rem_pio2+0x24>
 800d0b8:	54400000 	.word	0x54400000
 800d0bc:	3ff921fb 	.word	0x3ff921fb
 800d0c0:	1a626331 	.word	0x1a626331
 800d0c4:	3dd0b461 	.word	0x3dd0b461
 800d0c8:	1a600000 	.word	0x1a600000
 800d0cc:	3dd0b461 	.word	0x3dd0b461
 800d0d0:	2e037073 	.word	0x2e037073
 800d0d4:	3ba3198a 	.word	0x3ba3198a
 800d0d8:	6dc9c883 	.word	0x6dc9c883
 800d0dc:	3fe45f30 	.word	0x3fe45f30
 800d0e0:	2e000000 	.word	0x2e000000
 800d0e4:	3ba3198a 	.word	0x3ba3198a
 800d0e8:	252049c1 	.word	0x252049c1
 800d0ec:	397b839a 	.word	0x397b839a
 800d0f0:	3fe921fb 	.word	0x3fe921fb
 800d0f4:	4002d97b 	.word	0x4002d97b
 800d0f8:	3ff921fb 	.word	0x3ff921fb
 800d0fc:	413921fb 	.word	0x413921fb
 800d100:	3fe00000 	.word	0x3fe00000
 800d104:	0800f5d0 	.word	0x0800f5d0
 800d108:	7fefffff 	.word	0x7fefffff
 800d10c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d110:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d114:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d118:	4630      	mov	r0, r6
 800d11a:	460f      	mov	r7, r1
 800d11c:	f7f3 fd2c 	bl	8000b78 <__aeabi_d2iz>
 800d120:	f7f3 fa10 	bl	8000544 <__aeabi_i2d>
 800d124:	4602      	mov	r2, r0
 800d126:	460b      	mov	r3, r1
 800d128:	4630      	mov	r0, r6
 800d12a:	4639      	mov	r1, r7
 800d12c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d130:	f7f3 f8ba 	bl	80002a8 <__aeabi_dsub>
 800d134:	2200      	movs	r2, #0
 800d136:	4b1f      	ldr	r3, [pc, #124]	; (800d1b4 <__ieee754_rem_pio2+0x3dc>)
 800d138:	f7f3 fa6e 	bl	8000618 <__aeabi_dmul>
 800d13c:	460f      	mov	r7, r1
 800d13e:	4606      	mov	r6, r0
 800d140:	f7f3 fd1a 	bl	8000b78 <__aeabi_d2iz>
 800d144:	f7f3 f9fe 	bl	8000544 <__aeabi_i2d>
 800d148:	4602      	mov	r2, r0
 800d14a:	460b      	mov	r3, r1
 800d14c:	4630      	mov	r0, r6
 800d14e:	4639      	mov	r1, r7
 800d150:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d154:	f7f3 f8a8 	bl	80002a8 <__aeabi_dsub>
 800d158:	2200      	movs	r2, #0
 800d15a:	4b16      	ldr	r3, [pc, #88]	; (800d1b4 <__ieee754_rem_pio2+0x3dc>)
 800d15c:	f7f3 fa5c 	bl	8000618 <__aeabi_dmul>
 800d160:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d164:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d168:	f04f 0803 	mov.w	r8, #3
 800d16c:	2600      	movs	r6, #0
 800d16e:	2700      	movs	r7, #0
 800d170:	4632      	mov	r2, r6
 800d172:	463b      	mov	r3, r7
 800d174:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d178:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800d17c:	f7f3 fcb4 	bl	8000ae8 <__aeabi_dcmpeq>
 800d180:	b9b0      	cbnz	r0, 800d1b0 <__ieee754_rem_pio2+0x3d8>
 800d182:	4b0d      	ldr	r3, [pc, #52]	; (800d1b8 <__ieee754_rem_pio2+0x3e0>)
 800d184:	9301      	str	r3, [sp, #4]
 800d186:	2302      	movs	r3, #2
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	462a      	mov	r2, r5
 800d18c:	4643      	mov	r3, r8
 800d18e:	4621      	mov	r1, r4
 800d190:	a806      	add	r0, sp, #24
 800d192:	f000 f8dd 	bl	800d350 <__kernel_rem_pio2>
 800d196:	9b04      	ldr	r3, [sp, #16]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	4605      	mov	r5, r0
 800d19c:	f6bf ae58 	bge.w	800ce50 <__ieee754_rem_pio2+0x78>
 800d1a0:	6863      	ldr	r3, [r4, #4]
 800d1a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d1a6:	6063      	str	r3, [r4, #4]
 800d1a8:	68e3      	ldr	r3, [r4, #12]
 800d1aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d1ae:	e746      	b.n	800d03e <__ieee754_rem_pio2+0x266>
 800d1b0:	46d0      	mov	r8, sl
 800d1b2:	e7dd      	b.n	800d170 <__ieee754_rem_pio2+0x398>
 800d1b4:	41700000 	.word	0x41700000
 800d1b8:	0800f650 	.word	0x0800f650
 800d1bc:	00000000 	.word	0x00000000

0800d1c0 <__kernel_cos>:
 800d1c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	ec59 8b10 	vmov	r8, r9, d0
 800d1c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800d1cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d1d0:	ed2d 8b02 	vpush	{d8}
 800d1d4:	eeb0 8a41 	vmov.f32	s16, s2
 800d1d8:	eef0 8a61 	vmov.f32	s17, s3
 800d1dc:	da07      	bge.n	800d1ee <__kernel_cos+0x2e>
 800d1de:	ee10 0a10 	vmov	r0, s0
 800d1e2:	4649      	mov	r1, r9
 800d1e4:	f7f3 fcc8 	bl	8000b78 <__aeabi_d2iz>
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	f000 8089 	beq.w	800d300 <__kernel_cos+0x140>
 800d1ee:	4642      	mov	r2, r8
 800d1f0:	464b      	mov	r3, r9
 800d1f2:	4640      	mov	r0, r8
 800d1f4:	4649      	mov	r1, r9
 800d1f6:	f7f3 fa0f 	bl	8000618 <__aeabi_dmul>
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	4b4e      	ldr	r3, [pc, #312]	; (800d338 <__kernel_cos+0x178>)
 800d1fe:	4604      	mov	r4, r0
 800d200:	460d      	mov	r5, r1
 800d202:	f7f3 fa09 	bl	8000618 <__aeabi_dmul>
 800d206:	a340      	add	r3, pc, #256	; (adr r3, 800d308 <__kernel_cos+0x148>)
 800d208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20c:	4682      	mov	sl, r0
 800d20e:	468b      	mov	fp, r1
 800d210:	4620      	mov	r0, r4
 800d212:	4629      	mov	r1, r5
 800d214:	f7f3 fa00 	bl	8000618 <__aeabi_dmul>
 800d218:	a33d      	add	r3, pc, #244	; (adr r3, 800d310 <__kernel_cos+0x150>)
 800d21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21e:	f7f3 f845 	bl	80002ac <__adddf3>
 800d222:	4622      	mov	r2, r4
 800d224:	462b      	mov	r3, r5
 800d226:	f7f3 f9f7 	bl	8000618 <__aeabi_dmul>
 800d22a:	a33b      	add	r3, pc, #236	; (adr r3, 800d318 <__kernel_cos+0x158>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	f7f3 f83a 	bl	80002a8 <__aeabi_dsub>
 800d234:	4622      	mov	r2, r4
 800d236:	462b      	mov	r3, r5
 800d238:	f7f3 f9ee 	bl	8000618 <__aeabi_dmul>
 800d23c:	a338      	add	r3, pc, #224	; (adr r3, 800d320 <__kernel_cos+0x160>)
 800d23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d242:	f7f3 f833 	bl	80002ac <__adddf3>
 800d246:	4622      	mov	r2, r4
 800d248:	462b      	mov	r3, r5
 800d24a:	f7f3 f9e5 	bl	8000618 <__aeabi_dmul>
 800d24e:	a336      	add	r3, pc, #216	; (adr r3, 800d328 <__kernel_cos+0x168>)
 800d250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d254:	f7f3 f828 	bl	80002a8 <__aeabi_dsub>
 800d258:	4622      	mov	r2, r4
 800d25a:	462b      	mov	r3, r5
 800d25c:	f7f3 f9dc 	bl	8000618 <__aeabi_dmul>
 800d260:	a333      	add	r3, pc, #204	; (adr r3, 800d330 <__kernel_cos+0x170>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	f7f3 f821 	bl	80002ac <__adddf3>
 800d26a:	4622      	mov	r2, r4
 800d26c:	462b      	mov	r3, r5
 800d26e:	f7f3 f9d3 	bl	8000618 <__aeabi_dmul>
 800d272:	4622      	mov	r2, r4
 800d274:	462b      	mov	r3, r5
 800d276:	f7f3 f9cf 	bl	8000618 <__aeabi_dmul>
 800d27a:	ec53 2b18 	vmov	r2, r3, d8
 800d27e:	4604      	mov	r4, r0
 800d280:	460d      	mov	r5, r1
 800d282:	4640      	mov	r0, r8
 800d284:	4649      	mov	r1, r9
 800d286:	f7f3 f9c7 	bl	8000618 <__aeabi_dmul>
 800d28a:	460b      	mov	r3, r1
 800d28c:	4602      	mov	r2, r0
 800d28e:	4629      	mov	r1, r5
 800d290:	4620      	mov	r0, r4
 800d292:	f7f3 f809 	bl	80002a8 <__aeabi_dsub>
 800d296:	4b29      	ldr	r3, [pc, #164]	; (800d33c <__kernel_cos+0x17c>)
 800d298:	429e      	cmp	r6, r3
 800d29a:	4680      	mov	r8, r0
 800d29c:	4689      	mov	r9, r1
 800d29e:	dc11      	bgt.n	800d2c4 <__kernel_cos+0x104>
 800d2a0:	4602      	mov	r2, r0
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	4650      	mov	r0, sl
 800d2a6:	4659      	mov	r1, fp
 800d2a8:	f7f2 fffe 	bl	80002a8 <__aeabi_dsub>
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4924      	ldr	r1, [pc, #144]	; (800d340 <__kernel_cos+0x180>)
 800d2b0:	4602      	mov	r2, r0
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	f7f2 fff8 	bl	80002a8 <__aeabi_dsub>
 800d2b8:	ecbd 8b02 	vpop	{d8}
 800d2bc:	ec41 0b10 	vmov	d0, r0, r1
 800d2c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c4:	4b1f      	ldr	r3, [pc, #124]	; (800d344 <__kernel_cos+0x184>)
 800d2c6:	491e      	ldr	r1, [pc, #120]	; (800d340 <__kernel_cos+0x180>)
 800d2c8:	429e      	cmp	r6, r3
 800d2ca:	bfcc      	ite	gt
 800d2cc:	4d1e      	ldrgt	r5, [pc, #120]	; (800d348 <__kernel_cos+0x188>)
 800d2ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d2d2:	2400      	movs	r4, #0
 800d2d4:	4622      	mov	r2, r4
 800d2d6:	462b      	mov	r3, r5
 800d2d8:	2000      	movs	r0, #0
 800d2da:	f7f2 ffe5 	bl	80002a8 <__aeabi_dsub>
 800d2de:	4622      	mov	r2, r4
 800d2e0:	4606      	mov	r6, r0
 800d2e2:	460f      	mov	r7, r1
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	4650      	mov	r0, sl
 800d2e8:	4659      	mov	r1, fp
 800d2ea:	f7f2 ffdd 	bl	80002a8 <__aeabi_dsub>
 800d2ee:	4642      	mov	r2, r8
 800d2f0:	464b      	mov	r3, r9
 800d2f2:	f7f2 ffd9 	bl	80002a8 <__aeabi_dsub>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	4630      	mov	r0, r6
 800d2fc:	4639      	mov	r1, r7
 800d2fe:	e7d9      	b.n	800d2b4 <__kernel_cos+0xf4>
 800d300:	2000      	movs	r0, #0
 800d302:	490f      	ldr	r1, [pc, #60]	; (800d340 <__kernel_cos+0x180>)
 800d304:	e7d8      	b.n	800d2b8 <__kernel_cos+0xf8>
 800d306:	bf00      	nop
 800d308:	be8838d4 	.word	0xbe8838d4
 800d30c:	bda8fae9 	.word	0xbda8fae9
 800d310:	bdb4b1c4 	.word	0xbdb4b1c4
 800d314:	3e21ee9e 	.word	0x3e21ee9e
 800d318:	809c52ad 	.word	0x809c52ad
 800d31c:	3e927e4f 	.word	0x3e927e4f
 800d320:	19cb1590 	.word	0x19cb1590
 800d324:	3efa01a0 	.word	0x3efa01a0
 800d328:	16c15177 	.word	0x16c15177
 800d32c:	3f56c16c 	.word	0x3f56c16c
 800d330:	5555554c 	.word	0x5555554c
 800d334:	3fa55555 	.word	0x3fa55555
 800d338:	3fe00000 	.word	0x3fe00000
 800d33c:	3fd33332 	.word	0x3fd33332
 800d340:	3ff00000 	.word	0x3ff00000
 800d344:	3fe90000 	.word	0x3fe90000
 800d348:	3fd20000 	.word	0x3fd20000
 800d34c:	00000000 	.word	0x00000000

0800d350 <__kernel_rem_pio2>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	ed2d 8b02 	vpush	{d8}
 800d358:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d35c:	1ed4      	subs	r4, r2, #3
 800d35e:	9308      	str	r3, [sp, #32]
 800d360:	9101      	str	r1, [sp, #4]
 800d362:	4bc5      	ldr	r3, [pc, #788]	; (800d678 <__kernel_rem_pio2+0x328>)
 800d364:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d366:	9009      	str	r0, [sp, #36]	; 0x24
 800d368:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d36c:	9304      	str	r3, [sp, #16]
 800d36e:	9b08      	ldr	r3, [sp, #32]
 800d370:	3b01      	subs	r3, #1
 800d372:	9307      	str	r3, [sp, #28]
 800d374:	2318      	movs	r3, #24
 800d376:	fb94 f4f3 	sdiv	r4, r4, r3
 800d37a:	f06f 0317 	mvn.w	r3, #23
 800d37e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d382:	fb04 3303 	mla	r3, r4, r3, r3
 800d386:	eb03 0a02 	add.w	sl, r3, r2
 800d38a:	9b04      	ldr	r3, [sp, #16]
 800d38c:	9a07      	ldr	r2, [sp, #28]
 800d38e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800d668 <__kernel_rem_pio2+0x318>
 800d392:	eb03 0802 	add.w	r8, r3, r2
 800d396:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d398:	1aa7      	subs	r7, r4, r2
 800d39a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d39e:	ae22      	add	r6, sp, #136	; 0x88
 800d3a0:	2500      	movs	r5, #0
 800d3a2:	4545      	cmp	r5, r8
 800d3a4:	dd13      	ble.n	800d3ce <__kernel_rem_pio2+0x7e>
 800d3a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800d668 <__kernel_rem_pio2+0x318>
 800d3aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d3ae:	2600      	movs	r6, #0
 800d3b0:	9b04      	ldr	r3, [sp, #16]
 800d3b2:	429e      	cmp	r6, r3
 800d3b4:	dc32      	bgt.n	800d41c <__kernel_rem_pio2+0xcc>
 800d3b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3b8:	9302      	str	r3, [sp, #8]
 800d3ba:	9b08      	ldr	r3, [sp, #32]
 800d3bc:	199d      	adds	r5, r3, r6
 800d3be:	ab22      	add	r3, sp, #136	; 0x88
 800d3c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d3c4:	9306      	str	r3, [sp, #24]
 800d3c6:	ec59 8b18 	vmov	r8, r9, d8
 800d3ca:	2700      	movs	r7, #0
 800d3cc:	e01f      	b.n	800d40e <__kernel_rem_pio2+0xbe>
 800d3ce:	42ef      	cmn	r7, r5
 800d3d0:	d407      	bmi.n	800d3e2 <__kernel_rem_pio2+0x92>
 800d3d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d3d6:	f7f3 f8b5 	bl	8000544 <__aeabi_i2d>
 800d3da:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d3de:	3501      	adds	r5, #1
 800d3e0:	e7df      	b.n	800d3a2 <__kernel_rem_pio2+0x52>
 800d3e2:	ec51 0b18 	vmov	r0, r1, d8
 800d3e6:	e7f8      	b.n	800d3da <__kernel_rem_pio2+0x8a>
 800d3e8:	9906      	ldr	r1, [sp, #24]
 800d3ea:	9d02      	ldr	r5, [sp, #8]
 800d3ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d3f0:	9106      	str	r1, [sp, #24]
 800d3f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800d3f6:	9502      	str	r5, [sp, #8]
 800d3f8:	f7f3 f90e 	bl	8000618 <__aeabi_dmul>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	4640      	mov	r0, r8
 800d402:	4649      	mov	r1, r9
 800d404:	f7f2 ff52 	bl	80002ac <__adddf3>
 800d408:	3701      	adds	r7, #1
 800d40a:	4680      	mov	r8, r0
 800d40c:	4689      	mov	r9, r1
 800d40e:	9b07      	ldr	r3, [sp, #28]
 800d410:	429f      	cmp	r7, r3
 800d412:	dde9      	ble.n	800d3e8 <__kernel_rem_pio2+0x98>
 800d414:	e8eb 8902 	strd	r8, r9, [fp], #8
 800d418:	3601      	adds	r6, #1
 800d41a:	e7c9      	b.n	800d3b0 <__kernel_rem_pio2+0x60>
 800d41c:	9b04      	ldr	r3, [sp, #16]
 800d41e:	aa0e      	add	r2, sp, #56	; 0x38
 800d420:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d424:	930c      	str	r3, [sp, #48]	; 0x30
 800d426:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d428:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d42c:	9c04      	ldr	r4, [sp, #16]
 800d42e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d430:	ab9a      	add	r3, sp, #616	; 0x268
 800d432:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800d436:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d43a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d43e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800d442:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800d446:	ab9a      	add	r3, sp, #616	; 0x268
 800d448:	445b      	add	r3, fp
 800d44a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800d44e:	2500      	movs	r5, #0
 800d450:	1b63      	subs	r3, r4, r5
 800d452:	2b00      	cmp	r3, #0
 800d454:	dc78      	bgt.n	800d548 <__kernel_rem_pio2+0x1f8>
 800d456:	4650      	mov	r0, sl
 800d458:	ec49 8b10 	vmov	d0, r8, r9
 800d45c:	f000 fc00 	bl	800dc60 <scalbn>
 800d460:	ec57 6b10 	vmov	r6, r7, d0
 800d464:	2200      	movs	r2, #0
 800d466:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d46a:	ee10 0a10 	vmov	r0, s0
 800d46e:	4639      	mov	r1, r7
 800d470:	f7f3 f8d2 	bl	8000618 <__aeabi_dmul>
 800d474:	ec41 0b10 	vmov	d0, r0, r1
 800d478:	f000 fb6e 	bl	800db58 <floor>
 800d47c:	2200      	movs	r2, #0
 800d47e:	ec51 0b10 	vmov	r0, r1, d0
 800d482:	4b7e      	ldr	r3, [pc, #504]	; (800d67c <__kernel_rem_pio2+0x32c>)
 800d484:	f7f3 f8c8 	bl	8000618 <__aeabi_dmul>
 800d488:	4602      	mov	r2, r0
 800d48a:	460b      	mov	r3, r1
 800d48c:	4630      	mov	r0, r6
 800d48e:	4639      	mov	r1, r7
 800d490:	f7f2 ff0a 	bl	80002a8 <__aeabi_dsub>
 800d494:	460f      	mov	r7, r1
 800d496:	4606      	mov	r6, r0
 800d498:	f7f3 fb6e 	bl	8000b78 <__aeabi_d2iz>
 800d49c:	9006      	str	r0, [sp, #24]
 800d49e:	f7f3 f851 	bl	8000544 <__aeabi_i2d>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	4639      	mov	r1, r7
 800d4aa:	f7f2 fefd 	bl	80002a8 <__aeabi_dsub>
 800d4ae:	f1ba 0f00 	cmp.w	sl, #0
 800d4b2:	4606      	mov	r6, r0
 800d4b4:	460f      	mov	r7, r1
 800d4b6:	dd6c      	ble.n	800d592 <__kernel_rem_pio2+0x242>
 800d4b8:	1e62      	subs	r2, r4, #1
 800d4ba:	ab0e      	add	r3, sp, #56	; 0x38
 800d4bc:	f1ca 0118 	rsb	r1, sl, #24
 800d4c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d4c4:	9d06      	ldr	r5, [sp, #24]
 800d4c6:	fa40 f301 	asr.w	r3, r0, r1
 800d4ca:	441d      	add	r5, r3
 800d4cc:	408b      	lsls	r3, r1
 800d4ce:	1ac0      	subs	r0, r0, r3
 800d4d0:	ab0e      	add	r3, sp, #56	; 0x38
 800d4d2:	9506      	str	r5, [sp, #24]
 800d4d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d4d8:	f1ca 0317 	rsb	r3, sl, #23
 800d4dc:	fa40 f303 	asr.w	r3, r0, r3
 800d4e0:	9302      	str	r3, [sp, #8]
 800d4e2:	9b02      	ldr	r3, [sp, #8]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	dd62      	ble.n	800d5ae <__kernel_rem_pio2+0x25e>
 800d4e8:	9b06      	ldr	r3, [sp, #24]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	9306      	str	r3, [sp, #24]
 800d4f0:	4615      	mov	r5, r2
 800d4f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d4f6:	4294      	cmp	r4, r2
 800d4f8:	f300 8095 	bgt.w	800d626 <__kernel_rem_pio2+0x2d6>
 800d4fc:	f1ba 0f00 	cmp.w	sl, #0
 800d500:	dd07      	ble.n	800d512 <__kernel_rem_pio2+0x1c2>
 800d502:	f1ba 0f01 	cmp.w	sl, #1
 800d506:	f000 80a2 	beq.w	800d64e <__kernel_rem_pio2+0x2fe>
 800d50a:	f1ba 0f02 	cmp.w	sl, #2
 800d50e:	f000 80c1 	beq.w	800d694 <__kernel_rem_pio2+0x344>
 800d512:	9b02      	ldr	r3, [sp, #8]
 800d514:	2b02      	cmp	r3, #2
 800d516:	d14a      	bne.n	800d5ae <__kernel_rem_pio2+0x25e>
 800d518:	4632      	mov	r2, r6
 800d51a:	463b      	mov	r3, r7
 800d51c:	2000      	movs	r0, #0
 800d51e:	4958      	ldr	r1, [pc, #352]	; (800d680 <__kernel_rem_pio2+0x330>)
 800d520:	f7f2 fec2 	bl	80002a8 <__aeabi_dsub>
 800d524:	4606      	mov	r6, r0
 800d526:	460f      	mov	r7, r1
 800d528:	2d00      	cmp	r5, #0
 800d52a:	d040      	beq.n	800d5ae <__kernel_rem_pio2+0x25e>
 800d52c:	4650      	mov	r0, sl
 800d52e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800d670 <__kernel_rem_pio2+0x320>
 800d532:	f000 fb95 	bl	800dc60 <scalbn>
 800d536:	4630      	mov	r0, r6
 800d538:	4639      	mov	r1, r7
 800d53a:	ec53 2b10 	vmov	r2, r3, d0
 800d53e:	f7f2 feb3 	bl	80002a8 <__aeabi_dsub>
 800d542:	4606      	mov	r6, r0
 800d544:	460f      	mov	r7, r1
 800d546:	e032      	b.n	800d5ae <__kernel_rem_pio2+0x25e>
 800d548:	2200      	movs	r2, #0
 800d54a:	4b4e      	ldr	r3, [pc, #312]	; (800d684 <__kernel_rem_pio2+0x334>)
 800d54c:	4640      	mov	r0, r8
 800d54e:	4649      	mov	r1, r9
 800d550:	f7f3 f862 	bl	8000618 <__aeabi_dmul>
 800d554:	f7f3 fb10 	bl	8000b78 <__aeabi_d2iz>
 800d558:	f7f2 fff4 	bl	8000544 <__aeabi_i2d>
 800d55c:	2200      	movs	r2, #0
 800d55e:	4b4a      	ldr	r3, [pc, #296]	; (800d688 <__kernel_rem_pio2+0x338>)
 800d560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d564:	f7f3 f858 	bl	8000618 <__aeabi_dmul>
 800d568:	4602      	mov	r2, r0
 800d56a:	460b      	mov	r3, r1
 800d56c:	4640      	mov	r0, r8
 800d56e:	4649      	mov	r1, r9
 800d570:	f7f2 fe9a 	bl	80002a8 <__aeabi_dsub>
 800d574:	f7f3 fb00 	bl	8000b78 <__aeabi_d2iz>
 800d578:	ab0e      	add	r3, sp, #56	; 0x38
 800d57a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800d57e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d586:	f7f2 fe91 	bl	80002ac <__adddf3>
 800d58a:	3501      	adds	r5, #1
 800d58c:	4680      	mov	r8, r0
 800d58e:	4689      	mov	r9, r1
 800d590:	e75e      	b.n	800d450 <__kernel_rem_pio2+0x100>
 800d592:	d105      	bne.n	800d5a0 <__kernel_rem_pio2+0x250>
 800d594:	1e63      	subs	r3, r4, #1
 800d596:	aa0e      	add	r2, sp, #56	; 0x38
 800d598:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d59c:	15c3      	asrs	r3, r0, #23
 800d59e:	e79f      	b.n	800d4e0 <__kernel_rem_pio2+0x190>
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	4b3a      	ldr	r3, [pc, #232]	; (800d68c <__kernel_rem_pio2+0x33c>)
 800d5a4:	f7f3 fabe 	bl	8000b24 <__aeabi_dcmpge>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	d139      	bne.n	800d620 <__kernel_rem_pio2+0x2d0>
 800d5ac:	9002      	str	r0, [sp, #8]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	4630      	mov	r0, r6
 800d5b4:	4639      	mov	r1, r7
 800d5b6:	f7f3 fa97 	bl	8000ae8 <__aeabi_dcmpeq>
 800d5ba:	2800      	cmp	r0, #0
 800d5bc:	f000 80c7 	beq.w	800d74e <__kernel_rem_pio2+0x3fe>
 800d5c0:	1e65      	subs	r5, r4, #1
 800d5c2:	462b      	mov	r3, r5
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	9904      	ldr	r1, [sp, #16]
 800d5c8:	428b      	cmp	r3, r1
 800d5ca:	da6a      	bge.n	800d6a2 <__kernel_rem_pio2+0x352>
 800d5cc:	2a00      	cmp	r2, #0
 800d5ce:	f000 8088 	beq.w	800d6e2 <__kernel_rem_pio2+0x392>
 800d5d2:	ab0e      	add	r3, sp, #56	; 0x38
 800d5d4:	f1aa 0a18 	sub.w	sl, sl, #24
 800d5d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f000 80b4 	beq.w	800d74a <__kernel_rem_pio2+0x3fa>
 800d5e2:	4650      	mov	r0, sl
 800d5e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800d670 <__kernel_rem_pio2+0x320>
 800d5e8:	f000 fb3a 	bl	800dc60 <scalbn>
 800d5ec:	00ec      	lsls	r4, r5, #3
 800d5ee:	ab72      	add	r3, sp, #456	; 0x1c8
 800d5f0:	191e      	adds	r6, r3, r4
 800d5f2:	ec59 8b10 	vmov	r8, r9, d0
 800d5f6:	f106 0a08 	add.w	sl, r6, #8
 800d5fa:	462f      	mov	r7, r5
 800d5fc:	2f00      	cmp	r7, #0
 800d5fe:	f280 80df 	bge.w	800d7c0 <__kernel_rem_pio2+0x470>
 800d602:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800d668 <__kernel_rem_pio2+0x318>
 800d606:	f04f 0a00 	mov.w	sl, #0
 800d60a:	eba5 030a 	sub.w	r3, r5, sl
 800d60e:	2b00      	cmp	r3, #0
 800d610:	f2c0 810a 	blt.w	800d828 <__kernel_rem_pio2+0x4d8>
 800d614:	f8df b078 	ldr.w	fp, [pc, #120]	; 800d690 <__kernel_rem_pio2+0x340>
 800d618:	ec59 8b18 	vmov	r8, r9, d8
 800d61c:	2700      	movs	r7, #0
 800d61e:	e0f5      	b.n	800d80c <__kernel_rem_pio2+0x4bc>
 800d620:	2302      	movs	r3, #2
 800d622:	9302      	str	r3, [sp, #8]
 800d624:	e760      	b.n	800d4e8 <__kernel_rem_pio2+0x198>
 800d626:	ab0e      	add	r3, sp, #56	; 0x38
 800d628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d62c:	b94d      	cbnz	r5, 800d642 <__kernel_rem_pio2+0x2f2>
 800d62e:	b12b      	cbz	r3, 800d63c <__kernel_rem_pio2+0x2ec>
 800d630:	a80e      	add	r0, sp, #56	; 0x38
 800d632:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d636:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d63a:	2301      	movs	r3, #1
 800d63c:	3201      	adds	r2, #1
 800d63e:	461d      	mov	r5, r3
 800d640:	e759      	b.n	800d4f6 <__kernel_rem_pio2+0x1a6>
 800d642:	a80e      	add	r0, sp, #56	; 0x38
 800d644:	1acb      	subs	r3, r1, r3
 800d646:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800d64a:	462b      	mov	r3, r5
 800d64c:	e7f6      	b.n	800d63c <__kernel_rem_pio2+0x2ec>
 800d64e:	1e62      	subs	r2, r4, #1
 800d650:	ab0e      	add	r3, sp, #56	; 0x38
 800d652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d656:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d65a:	a90e      	add	r1, sp, #56	; 0x38
 800d65c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d660:	e757      	b.n	800d512 <__kernel_rem_pio2+0x1c2>
 800d662:	bf00      	nop
 800d664:	f3af 8000 	nop.w
	...
 800d674:	3ff00000 	.word	0x3ff00000
 800d678:	0800f798 	.word	0x0800f798
 800d67c:	40200000 	.word	0x40200000
 800d680:	3ff00000 	.word	0x3ff00000
 800d684:	3e700000 	.word	0x3e700000
 800d688:	41700000 	.word	0x41700000
 800d68c:	3fe00000 	.word	0x3fe00000
 800d690:	0800f758 	.word	0x0800f758
 800d694:	1e62      	subs	r2, r4, #1
 800d696:	ab0e      	add	r3, sp, #56	; 0x38
 800d698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d69c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d6a0:	e7db      	b.n	800d65a <__kernel_rem_pio2+0x30a>
 800d6a2:	a90e      	add	r1, sp, #56	; 0x38
 800d6a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	430a      	orrs	r2, r1
 800d6ac:	e78b      	b.n	800d5c6 <__kernel_rem_pio2+0x276>
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d6b4:	2900      	cmp	r1, #0
 800d6b6:	d0fa      	beq.n	800d6ae <__kernel_rem_pio2+0x35e>
 800d6b8:	9a08      	ldr	r2, [sp, #32]
 800d6ba:	4422      	add	r2, r4
 800d6bc:	00d2      	lsls	r2, r2, #3
 800d6be:	a922      	add	r1, sp, #136	; 0x88
 800d6c0:	18e3      	adds	r3, r4, r3
 800d6c2:	9206      	str	r2, [sp, #24]
 800d6c4:	440a      	add	r2, r1
 800d6c6:	9302      	str	r3, [sp, #8]
 800d6c8:	f10b 0108 	add.w	r1, fp, #8
 800d6cc:	f102 0308 	add.w	r3, r2, #8
 800d6d0:	1c66      	adds	r6, r4, #1
 800d6d2:	910a      	str	r1, [sp, #40]	; 0x28
 800d6d4:	2500      	movs	r5, #0
 800d6d6:	930d      	str	r3, [sp, #52]	; 0x34
 800d6d8:	9b02      	ldr	r3, [sp, #8]
 800d6da:	42b3      	cmp	r3, r6
 800d6dc:	da04      	bge.n	800d6e8 <__kernel_rem_pio2+0x398>
 800d6de:	461c      	mov	r4, r3
 800d6e0:	e6a6      	b.n	800d430 <__kernel_rem_pio2+0xe0>
 800d6e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e7e3      	b.n	800d6b0 <__kernel_rem_pio2+0x360>
 800d6e8:	9b06      	ldr	r3, [sp, #24]
 800d6ea:	18ef      	adds	r7, r5, r3
 800d6ec:	ab22      	add	r3, sp, #136	; 0x88
 800d6ee:	441f      	add	r7, r3
 800d6f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d6f6:	f7f2 ff25 	bl	8000544 <__aeabi_i2d>
 800d6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6fc:	461c      	mov	r4, r3
 800d6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d700:	e9c7 0100 	strd	r0, r1, [r7]
 800d704:	eb03 0b05 	add.w	fp, r3, r5
 800d708:	2700      	movs	r7, #0
 800d70a:	f04f 0800 	mov.w	r8, #0
 800d70e:	f04f 0900 	mov.w	r9, #0
 800d712:	9b07      	ldr	r3, [sp, #28]
 800d714:	429f      	cmp	r7, r3
 800d716:	dd08      	ble.n	800d72a <__kernel_rem_pio2+0x3da>
 800d718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d71a:	aa72      	add	r2, sp, #456	; 0x1c8
 800d71c:	18eb      	adds	r3, r5, r3
 800d71e:	4413      	add	r3, r2
 800d720:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800d724:	3601      	adds	r6, #1
 800d726:	3508      	adds	r5, #8
 800d728:	e7d6      	b.n	800d6d8 <__kernel_rem_pio2+0x388>
 800d72a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d72e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d732:	f7f2 ff71 	bl	8000618 <__aeabi_dmul>
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	4640      	mov	r0, r8
 800d73c:	4649      	mov	r1, r9
 800d73e:	f7f2 fdb5 	bl	80002ac <__adddf3>
 800d742:	3701      	adds	r7, #1
 800d744:	4680      	mov	r8, r0
 800d746:	4689      	mov	r9, r1
 800d748:	e7e3      	b.n	800d712 <__kernel_rem_pio2+0x3c2>
 800d74a:	3d01      	subs	r5, #1
 800d74c:	e741      	b.n	800d5d2 <__kernel_rem_pio2+0x282>
 800d74e:	f1ca 0000 	rsb	r0, sl, #0
 800d752:	ec47 6b10 	vmov	d0, r6, r7
 800d756:	f000 fa83 	bl	800dc60 <scalbn>
 800d75a:	ec57 6b10 	vmov	r6, r7, d0
 800d75e:	2200      	movs	r2, #0
 800d760:	4b99      	ldr	r3, [pc, #612]	; (800d9c8 <__kernel_rem_pio2+0x678>)
 800d762:	ee10 0a10 	vmov	r0, s0
 800d766:	4639      	mov	r1, r7
 800d768:	f7f3 f9dc 	bl	8000b24 <__aeabi_dcmpge>
 800d76c:	b1f8      	cbz	r0, 800d7ae <__kernel_rem_pio2+0x45e>
 800d76e:	2200      	movs	r2, #0
 800d770:	4b96      	ldr	r3, [pc, #600]	; (800d9cc <__kernel_rem_pio2+0x67c>)
 800d772:	4630      	mov	r0, r6
 800d774:	4639      	mov	r1, r7
 800d776:	f7f2 ff4f 	bl	8000618 <__aeabi_dmul>
 800d77a:	f7f3 f9fd 	bl	8000b78 <__aeabi_d2iz>
 800d77e:	4680      	mov	r8, r0
 800d780:	f7f2 fee0 	bl	8000544 <__aeabi_i2d>
 800d784:	2200      	movs	r2, #0
 800d786:	4b90      	ldr	r3, [pc, #576]	; (800d9c8 <__kernel_rem_pio2+0x678>)
 800d788:	f7f2 ff46 	bl	8000618 <__aeabi_dmul>
 800d78c:	460b      	mov	r3, r1
 800d78e:	4602      	mov	r2, r0
 800d790:	4639      	mov	r1, r7
 800d792:	4630      	mov	r0, r6
 800d794:	f7f2 fd88 	bl	80002a8 <__aeabi_dsub>
 800d798:	f7f3 f9ee 	bl	8000b78 <__aeabi_d2iz>
 800d79c:	1c65      	adds	r5, r4, #1
 800d79e:	ab0e      	add	r3, sp, #56	; 0x38
 800d7a0:	f10a 0a18 	add.w	sl, sl, #24
 800d7a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d7a8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d7ac:	e719      	b.n	800d5e2 <__kernel_rem_pio2+0x292>
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	4639      	mov	r1, r7
 800d7b2:	f7f3 f9e1 	bl	8000b78 <__aeabi_d2iz>
 800d7b6:	ab0e      	add	r3, sp, #56	; 0x38
 800d7b8:	4625      	mov	r5, r4
 800d7ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d7be:	e710      	b.n	800d5e2 <__kernel_rem_pio2+0x292>
 800d7c0:	ab0e      	add	r3, sp, #56	; 0x38
 800d7c2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d7c6:	f7f2 febd 	bl	8000544 <__aeabi_i2d>
 800d7ca:	4642      	mov	r2, r8
 800d7cc:	464b      	mov	r3, r9
 800d7ce:	f7f2 ff23 	bl	8000618 <__aeabi_dmul>
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d7d8:	4b7c      	ldr	r3, [pc, #496]	; (800d9cc <__kernel_rem_pio2+0x67c>)
 800d7da:	4640      	mov	r0, r8
 800d7dc:	4649      	mov	r1, r9
 800d7de:	f7f2 ff1b 	bl	8000618 <__aeabi_dmul>
 800d7e2:	3f01      	subs	r7, #1
 800d7e4:	4680      	mov	r8, r0
 800d7e6:	4689      	mov	r9, r1
 800d7e8:	e708      	b.n	800d5fc <__kernel_rem_pio2+0x2ac>
 800d7ea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800d7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800d7f6:	f7f2 ff0f 	bl	8000618 <__aeabi_dmul>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	4640      	mov	r0, r8
 800d800:	4649      	mov	r1, r9
 800d802:	f7f2 fd53 	bl	80002ac <__adddf3>
 800d806:	3701      	adds	r7, #1
 800d808:	4680      	mov	r8, r0
 800d80a:	4689      	mov	r9, r1
 800d80c:	9b04      	ldr	r3, [sp, #16]
 800d80e:	429f      	cmp	r7, r3
 800d810:	dc01      	bgt.n	800d816 <__kernel_rem_pio2+0x4c6>
 800d812:	45ba      	cmp	sl, r7
 800d814:	dae9      	bge.n	800d7ea <__kernel_rem_pio2+0x49a>
 800d816:	ab4a      	add	r3, sp, #296	; 0x128
 800d818:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d81c:	e9c3 8900 	strd	r8, r9, [r3]
 800d820:	f10a 0a01 	add.w	sl, sl, #1
 800d824:	3e08      	subs	r6, #8
 800d826:	e6f0      	b.n	800d60a <__kernel_rem_pio2+0x2ba>
 800d828:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d82a:	2b03      	cmp	r3, #3
 800d82c:	d85b      	bhi.n	800d8e6 <__kernel_rem_pio2+0x596>
 800d82e:	e8df f003 	tbb	[pc, r3]
 800d832:	264a      	.short	0x264a
 800d834:	0226      	.short	0x0226
 800d836:	ab9a      	add	r3, sp, #616	; 0x268
 800d838:	441c      	add	r4, r3
 800d83a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d83e:	46a2      	mov	sl, r4
 800d840:	46ab      	mov	fp, r5
 800d842:	f1bb 0f00 	cmp.w	fp, #0
 800d846:	dc6c      	bgt.n	800d922 <__kernel_rem_pio2+0x5d2>
 800d848:	46a2      	mov	sl, r4
 800d84a:	46ab      	mov	fp, r5
 800d84c:	f1bb 0f01 	cmp.w	fp, #1
 800d850:	f300 8086 	bgt.w	800d960 <__kernel_rem_pio2+0x610>
 800d854:	2000      	movs	r0, #0
 800d856:	2100      	movs	r1, #0
 800d858:	2d01      	cmp	r5, #1
 800d85a:	f300 80a0 	bgt.w	800d99e <__kernel_rem_pio2+0x64e>
 800d85e:	9b02      	ldr	r3, [sp, #8]
 800d860:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d864:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800d868:	2b00      	cmp	r3, #0
 800d86a:	f040 809e 	bne.w	800d9aa <__kernel_rem_pio2+0x65a>
 800d86e:	9b01      	ldr	r3, [sp, #4]
 800d870:	e9c3 7800 	strd	r7, r8, [r3]
 800d874:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d878:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d87c:	e033      	b.n	800d8e6 <__kernel_rem_pio2+0x596>
 800d87e:	3408      	adds	r4, #8
 800d880:	ab4a      	add	r3, sp, #296	; 0x128
 800d882:	441c      	add	r4, r3
 800d884:	462e      	mov	r6, r5
 800d886:	2000      	movs	r0, #0
 800d888:	2100      	movs	r1, #0
 800d88a:	2e00      	cmp	r6, #0
 800d88c:	da3a      	bge.n	800d904 <__kernel_rem_pio2+0x5b4>
 800d88e:	9b02      	ldr	r3, [sp, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d03d      	beq.n	800d910 <__kernel_rem_pio2+0x5c0>
 800d894:	4602      	mov	r2, r0
 800d896:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d89a:	9c01      	ldr	r4, [sp, #4]
 800d89c:	e9c4 2300 	strd	r2, r3, [r4]
 800d8a0:	4602      	mov	r2, r0
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d8a8:	f7f2 fcfe 	bl	80002a8 <__aeabi_dsub>
 800d8ac:	ae4c      	add	r6, sp, #304	; 0x130
 800d8ae:	2401      	movs	r4, #1
 800d8b0:	42a5      	cmp	r5, r4
 800d8b2:	da30      	bge.n	800d916 <__kernel_rem_pio2+0x5c6>
 800d8b4:	9b02      	ldr	r3, [sp, #8]
 800d8b6:	b113      	cbz	r3, 800d8be <__kernel_rem_pio2+0x56e>
 800d8b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8bc:	4619      	mov	r1, r3
 800d8be:	9b01      	ldr	r3, [sp, #4]
 800d8c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d8c4:	e00f      	b.n	800d8e6 <__kernel_rem_pio2+0x596>
 800d8c6:	ab9a      	add	r3, sp, #616	; 0x268
 800d8c8:	441c      	add	r4, r3
 800d8ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d8ce:	2000      	movs	r0, #0
 800d8d0:	2100      	movs	r1, #0
 800d8d2:	2d00      	cmp	r5, #0
 800d8d4:	da10      	bge.n	800d8f8 <__kernel_rem_pio2+0x5a8>
 800d8d6:	9b02      	ldr	r3, [sp, #8]
 800d8d8:	b113      	cbz	r3, 800d8e0 <__kernel_rem_pio2+0x590>
 800d8da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8de:	4619      	mov	r1, r3
 800d8e0:	9b01      	ldr	r3, [sp, #4]
 800d8e2:	e9c3 0100 	strd	r0, r1, [r3]
 800d8e6:	9b06      	ldr	r3, [sp, #24]
 800d8e8:	f003 0007 	and.w	r0, r3, #7
 800d8ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d8f0:	ecbd 8b02 	vpop	{d8}
 800d8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d8fc:	f7f2 fcd6 	bl	80002ac <__adddf3>
 800d900:	3d01      	subs	r5, #1
 800d902:	e7e6      	b.n	800d8d2 <__kernel_rem_pio2+0x582>
 800d904:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d908:	f7f2 fcd0 	bl	80002ac <__adddf3>
 800d90c:	3e01      	subs	r6, #1
 800d90e:	e7bc      	b.n	800d88a <__kernel_rem_pio2+0x53a>
 800d910:	4602      	mov	r2, r0
 800d912:	460b      	mov	r3, r1
 800d914:	e7c1      	b.n	800d89a <__kernel_rem_pio2+0x54a>
 800d916:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d91a:	f7f2 fcc7 	bl	80002ac <__adddf3>
 800d91e:	3401      	adds	r4, #1
 800d920:	e7c6      	b.n	800d8b0 <__kernel_rem_pio2+0x560>
 800d922:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800d926:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d92a:	4640      	mov	r0, r8
 800d92c:	ec53 2b17 	vmov	r2, r3, d7
 800d930:	4649      	mov	r1, r9
 800d932:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d936:	f7f2 fcb9 	bl	80002ac <__adddf3>
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
 800d93e:	4606      	mov	r6, r0
 800d940:	460f      	mov	r7, r1
 800d942:	4640      	mov	r0, r8
 800d944:	4649      	mov	r1, r9
 800d946:	f7f2 fcaf 	bl	80002a8 <__aeabi_dsub>
 800d94a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d94e:	f7f2 fcad 	bl	80002ac <__adddf3>
 800d952:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d956:	e9ca 0100 	strd	r0, r1, [sl]
 800d95a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800d95e:	e770      	b.n	800d842 <__kernel_rem_pio2+0x4f2>
 800d960:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800d964:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d968:	4630      	mov	r0, r6
 800d96a:	ec53 2b17 	vmov	r2, r3, d7
 800d96e:	4639      	mov	r1, r7
 800d970:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d974:	f7f2 fc9a 	bl	80002ac <__adddf3>
 800d978:	4602      	mov	r2, r0
 800d97a:	460b      	mov	r3, r1
 800d97c:	4680      	mov	r8, r0
 800d97e:	4689      	mov	r9, r1
 800d980:	4630      	mov	r0, r6
 800d982:	4639      	mov	r1, r7
 800d984:	f7f2 fc90 	bl	80002a8 <__aeabi_dsub>
 800d988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d98c:	f7f2 fc8e 	bl	80002ac <__adddf3>
 800d990:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d994:	e9ca 0100 	strd	r0, r1, [sl]
 800d998:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800d99c:	e756      	b.n	800d84c <__kernel_rem_pio2+0x4fc>
 800d99e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d9a2:	f7f2 fc83 	bl	80002ac <__adddf3>
 800d9a6:	3d01      	subs	r5, #1
 800d9a8:	e756      	b.n	800d858 <__kernel_rem_pio2+0x508>
 800d9aa:	9b01      	ldr	r3, [sp, #4]
 800d9ac:	9a01      	ldr	r2, [sp, #4]
 800d9ae:	601f      	str	r7, [r3, #0]
 800d9b0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d9b4:	605c      	str	r4, [r3, #4]
 800d9b6:	609d      	str	r5, [r3, #8]
 800d9b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d9bc:	60d3      	str	r3, [r2, #12]
 800d9be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d9c2:	6110      	str	r0, [r2, #16]
 800d9c4:	6153      	str	r3, [r2, #20]
 800d9c6:	e78e      	b.n	800d8e6 <__kernel_rem_pio2+0x596>
 800d9c8:	41700000 	.word	0x41700000
 800d9cc:	3e700000 	.word	0x3e700000

0800d9d0 <__kernel_sin>:
 800d9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d4:	ec55 4b10 	vmov	r4, r5, d0
 800d9d8:	b085      	sub	sp, #20
 800d9da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d9de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d9e2:	ed8d 1b00 	vstr	d1, [sp]
 800d9e6:	9002      	str	r0, [sp, #8]
 800d9e8:	da06      	bge.n	800d9f8 <__kernel_sin+0x28>
 800d9ea:	ee10 0a10 	vmov	r0, s0
 800d9ee:	4629      	mov	r1, r5
 800d9f0:	f7f3 f8c2 	bl	8000b78 <__aeabi_d2iz>
 800d9f4:	2800      	cmp	r0, #0
 800d9f6:	d051      	beq.n	800da9c <__kernel_sin+0xcc>
 800d9f8:	4622      	mov	r2, r4
 800d9fa:	462b      	mov	r3, r5
 800d9fc:	4620      	mov	r0, r4
 800d9fe:	4629      	mov	r1, r5
 800da00:	f7f2 fe0a 	bl	8000618 <__aeabi_dmul>
 800da04:	4682      	mov	sl, r0
 800da06:	468b      	mov	fp, r1
 800da08:	4602      	mov	r2, r0
 800da0a:	460b      	mov	r3, r1
 800da0c:	4620      	mov	r0, r4
 800da0e:	4629      	mov	r1, r5
 800da10:	f7f2 fe02 	bl	8000618 <__aeabi_dmul>
 800da14:	a341      	add	r3, pc, #260	; (adr r3, 800db1c <__kernel_sin+0x14c>)
 800da16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1a:	4680      	mov	r8, r0
 800da1c:	4689      	mov	r9, r1
 800da1e:	4650      	mov	r0, sl
 800da20:	4659      	mov	r1, fp
 800da22:	f7f2 fdf9 	bl	8000618 <__aeabi_dmul>
 800da26:	a33f      	add	r3, pc, #252	; (adr r3, 800db24 <__kernel_sin+0x154>)
 800da28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da2c:	f7f2 fc3c 	bl	80002a8 <__aeabi_dsub>
 800da30:	4652      	mov	r2, sl
 800da32:	465b      	mov	r3, fp
 800da34:	f7f2 fdf0 	bl	8000618 <__aeabi_dmul>
 800da38:	a33c      	add	r3, pc, #240	; (adr r3, 800db2c <__kernel_sin+0x15c>)
 800da3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da3e:	f7f2 fc35 	bl	80002ac <__adddf3>
 800da42:	4652      	mov	r2, sl
 800da44:	465b      	mov	r3, fp
 800da46:	f7f2 fde7 	bl	8000618 <__aeabi_dmul>
 800da4a:	a33a      	add	r3, pc, #232	; (adr r3, 800db34 <__kernel_sin+0x164>)
 800da4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da50:	f7f2 fc2a 	bl	80002a8 <__aeabi_dsub>
 800da54:	4652      	mov	r2, sl
 800da56:	465b      	mov	r3, fp
 800da58:	f7f2 fdde 	bl	8000618 <__aeabi_dmul>
 800da5c:	a337      	add	r3, pc, #220	; (adr r3, 800db3c <__kernel_sin+0x16c>)
 800da5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da62:	f7f2 fc23 	bl	80002ac <__adddf3>
 800da66:	9b02      	ldr	r3, [sp, #8]
 800da68:	4606      	mov	r6, r0
 800da6a:	460f      	mov	r7, r1
 800da6c:	b9db      	cbnz	r3, 800daa6 <__kernel_sin+0xd6>
 800da6e:	4602      	mov	r2, r0
 800da70:	460b      	mov	r3, r1
 800da72:	4650      	mov	r0, sl
 800da74:	4659      	mov	r1, fp
 800da76:	f7f2 fdcf 	bl	8000618 <__aeabi_dmul>
 800da7a:	a325      	add	r3, pc, #148	; (adr r3, 800db10 <__kernel_sin+0x140>)
 800da7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da80:	f7f2 fc12 	bl	80002a8 <__aeabi_dsub>
 800da84:	4642      	mov	r2, r8
 800da86:	464b      	mov	r3, r9
 800da88:	f7f2 fdc6 	bl	8000618 <__aeabi_dmul>
 800da8c:	4602      	mov	r2, r0
 800da8e:	460b      	mov	r3, r1
 800da90:	4620      	mov	r0, r4
 800da92:	4629      	mov	r1, r5
 800da94:	f7f2 fc0a 	bl	80002ac <__adddf3>
 800da98:	4604      	mov	r4, r0
 800da9a:	460d      	mov	r5, r1
 800da9c:	ec45 4b10 	vmov	d0, r4, r5
 800daa0:	b005      	add	sp, #20
 800daa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daa6:	2200      	movs	r2, #0
 800daa8:	4b1b      	ldr	r3, [pc, #108]	; (800db18 <__kernel_sin+0x148>)
 800daaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daae:	f7f2 fdb3 	bl	8000618 <__aeabi_dmul>
 800dab2:	4632      	mov	r2, r6
 800dab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dab8:	463b      	mov	r3, r7
 800daba:	4640      	mov	r0, r8
 800dabc:	4649      	mov	r1, r9
 800dabe:	f7f2 fdab 	bl	8000618 <__aeabi_dmul>
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daca:	f7f2 fbed 	bl	80002a8 <__aeabi_dsub>
 800dace:	4652      	mov	r2, sl
 800dad0:	465b      	mov	r3, fp
 800dad2:	f7f2 fda1 	bl	8000618 <__aeabi_dmul>
 800dad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dada:	f7f2 fbe5 	bl	80002a8 <__aeabi_dsub>
 800dade:	a30c      	add	r3, pc, #48	; (adr r3, 800db10 <__kernel_sin+0x140>)
 800dae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae4:	4606      	mov	r6, r0
 800dae6:	460f      	mov	r7, r1
 800dae8:	4640      	mov	r0, r8
 800daea:	4649      	mov	r1, r9
 800daec:	f7f2 fd94 	bl	8000618 <__aeabi_dmul>
 800daf0:	4602      	mov	r2, r0
 800daf2:	460b      	mov	r3, r1
 800daf4:	4630      	mov	r0, r6
 800daf6:	4639      	mov	r1, r7
 800daf8:	f7f2 fbd8 	bl	80002ac <__adddf3>
 800dafc:	4602      	mov	r2, r0
 800dafe:	460b      	mov	r3, r1
 800db00:	4620      	mov	r0, r4
 800db02:	4629      	mov	r1, r5
 800db04:	f7f2 fbd0 	bl	80002a8 <__aeabi_dsub>
 800db08:	e7c6      	b.n	800da98 <__kernel_sin+0xc8>
 800db0a:	bf00      	nop
 800db0c:	f3af 8000 	nop.w
 800db10:	55555549 	.word	0x55555549
 800db14:	3fc55555 	.word	0x3fc55555
 800db18:	3fe00000 	.word	0x3fe00000
 800db1c:	5acfd57c 	.word	0x5acfd57c
 800db20:	3de5d93a 	.word	0x3de5d93a
 800db24:	8a2b9ceb 	.word	0x8a2b9ceb
 800db28:	3e5ae5e6 	.word	0x3e5ae5e6
 800db2c:	57b1fe7d 	.word	0x57b1fe7d
 800db30:	3ec71de3 	.word	0x3ec71de3
 800db34:	19c161d5 	.word	0x19c161d5
 800db38:	3f2a01a0 	.word	0x3f2a01a0
 800db3c:	1110f8a6 	.word	0x1110f8a6
 800db40:	3f811111 	.word	0x3f811111

0800db44 <fabs>:
 800db44:	ec51 0b10 	vmov	r0, r1, d0
 800db48:	ee10 2a10 	vmov	r2, s0
 800db4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800db50:	ec43 2b10 	vmov	d0, r2, r3
 800db54:	4770      	bx	lr
	...

0800db58 <floor>:
 800db58:	ec51 0b10 	vmov	r0, r1, d0
 800db5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800db64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800db68:	2e13      	cmp	r6, #19
 800db6a:	460c      	mov	r4, r1
 800db6c:	ee10 5a10 	vmov	r5, s0
 800db70:	4680      	mov	r8, r0
 800db72:	dc34      	bgt.n	800dbde <floor+0x86>
 800db74:	2e00      	cmp	r6, #0
 800db76:	da16      	bge.n	800dba6 <floor+0x4e>
 800db78:	a335      	add	r3, pc, #212	; (adr r3, 800dc50 <floor+0xf8>)
 800db7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db7e:	f7f2 fb95 	bl	80002ac <__adddf3>
 800db82:	2200      	movs	r2, #0
 800db84:	2300      	movs	r3, #0
 800db86:	f7f2 ffd7 	bl	8000b38 <__aeabi_dcmpgt>
 800db8a:	b148      	cbz	r0, 800dba0 <floor+0x48>
 800db8c:	2c00      	cmp	r4, #0
 800db8e:	da59      	bge.n	800dc44 <floor+0xec>
 800db90:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800db94:	4a30      	ldr	r2, [pc, #192]	; (800dc58 <floor+0x100>)
 800db96:	432b      	orrs	r3, r5
 800db98:	2500      	movs	r5, #0
 800db9a:	42ab      	cmp	r3, r5
 800db9c:	bf18      	it	ne
 800db9e:	4614      	movne	r4, r2
 800dba0:	4621      	mov	r1, r4
 800dba2:	4628      	mov	r0, r5
 800dba4:	e025      	b.n	800dbf2 <floor+0x9a>
 800dba6:	4f2d      	ldr	r7, [pc, #180]	; (800dc5c <floor+0x104>)
 800dba8:	4137      	asrs	r7, r6
 800dbaa:	ea01 0307 	and.w	r3, r1, r7
 800dbae:	4303      	orrs	r3, r0
 800dbb0:	d01f      	beq.n	800dbf2 <floor+0x9a>
 800dbb2:	a327      	add	r3, pc, #156	; (adr r3, 800dc50 <floor+0xf8>)
 800dbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb8:	f7f2 fb78 	bl	80002ac <__adddf3>
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	f7f2 ffba 	bl	8000b38 <__aeabi_dcmpgt>
 800dbc4:	2800      	cmp	r0, #0
 800dbc6:	d0eb      	beq.n	800dba0 <floor+0x48>
 800dbc8:	2c00      	cmp	r4, #0
 800dbca:	bfbe      	ittt	lt
 800dbcc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800dbd0:	fa43 f606 	asrlt.w	r6, r3, r6
 800dbd4:	19a4      	addlt	r4, r4, r6
 800dbd6:	ea24 0407 	bic.w	r4, r4, r7
 800dbda:	2500      	movs	r5, #0
 800dbdc:	e7e0      	b.n	800dba0 <floor+0x48>
 800dbde:	2e33      	cmp	r6, #51	; 0x33
 800dbe0:	dd0b      	ble.n	800dbfa <floor+0xa2>
 800dbe2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dbe6:	d104      	bne.n	800dbf2 <floor+0x9a>
 800dbe8:	ee10 2a10 	vmov	r2, s0
 800dbec:	460b      	mov	r3, r1
 800dbee:	f7f2 fb5d 	bl	80002ac <__adddf3>
 800dbf2:	ec41 0b10 	vmov	d0, r0, r1
 800dbf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbfa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800dbfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc02:	fa23 f707 	lsr.w	r7, r3, r7
 800dc06:	4207      	tst	r7, r0
 800dc08:	d0f3      	beq.n	800dbf2 <floor+0x9a>
 800dc0a:	a311      	add	r3, pc, #68	; (adr r3, 800dc50 <floor+0xf8>)
 800dc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc10:	f7f2 fb4c 	bl	80002ac <__adddf3>
 800dc14:	2200      	movs	r2, #0
 800dc16:	2300      	movs	r3, #0
 800dc18:	f7f2 ff8e 	bl	8000b38 <__aeabi_dcmpgt>
 800dc1c:	2800      	cmp	r0, #0
 800dc1e:	d0bf      	beq.n	800dba0 <floor+0x48>
 800dc20:	2c00      	cmp	r4, #0
 800dc22:	da02      	bge.n	800dc2a <floor+0xd2>
 800dc24:	2e14      	cmp	r6, #20
 800dc26:	d103      	bne.n	800dc30 <floor+0xd8>
 800dc28:	3401      	adds	r4, #1
 800dc2a:	ea25 0507 	bic.w	r5, r5, r7
 800dc2e:	e7b7      	b.n	800dba0 <floor+0x48>
 800dc30:	2301      	movs	r3, #1
 800dc32:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800dc36:	fa03 f606 	lsl.w	r6, r3, r6
 800dc3a:	4435      	add	r5, r6
 800dc3c:	4545      	cmp	r5, r8
 800dc3e:	bf38      	it	cc
 800dc40:	18e4      	addcc	r4, r4, r3
 800dc42:	e7f2      	b.n	800dc2a <floor+0xd2>
 800dc44:	2500      	movs	r5, #0
 800dc46:	462c      	mov	r4, r5
 800dc48:	e7aa      	b.n	800dba0 <floor+0x48>
 800dc4a:	bf00      	nop
 800dc4c:	f3af 8000 	nop.w
 800dc50:	8800759c 	.word	0x8800759c
 800dc54:	7e37e43c 	.word	0x7e37e43c
 800dc58:	bff00000 	.word	0xbff00000
 800dc5c:	000fffff 	.word	0x000fffff

0800dc60 <scalbn>:
 800dc60:	b570      	push	{r4, r5, r6, lr}
 800dc62:	ec55 4b10 	vmov	r4, r5, d0
 800dc66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800dc6a:	4606      	mov	r6, r0
 800dc6c:	462b      	mov	r3, r5
 800dc6e:	b9aa      	cbnz	r2, 800dc9c <scalbn+0x3c>
 800dc70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dc74:	4323      	orrs	r3, r4
 800dc76:	d03b      	beq.n	800dcf0 <scalbn+0x90>
 800dc78:	4b31      	ldr	r3, [pc, #196]	; (800dd40 <scalbn+0xe0>)
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	ee10 0a10 	vmov	r0, s0
 800dc82:	f7f2 fcc9 	bl	8000618 <__aeabi_dmul>
 800dc86:	4b2f      	ldr	r3, [pc, #188]	; (800dd44 <scalbn+0xe4>)
 800dc88:	429e      	cmp	r6, r3
 800dc8a:	4604      	mov	r4, r0
 800dc8c:	460d      	mov	r5, r1
 800dc8e:	da12      	bge.n	800dcb6 <scalbn+0x56>
 800dc90:	a327      	add	r3, pc, #156	; (adr r3, 800dd30 <scalbn+0xd0>)
 800dc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc96:	f7f2 fcbf 	bl	8000618 <__aeabi_dmul>
 800dc9a:	e009      	b.n	800dcb0 <scalbn+0x50>
 800dc9c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dca0:	428a      	cmp	r2, r1
 800dca2:	d10c      	bne.n	800dcbe <scalbn+0x5e>
 800dca4:	ee10 2a10 	vmov	r2, s0
 800dca8:	4620      	mov	r0, r4
 800dcaa:	4629      	mov	r1, r5
 800dcac:	f7f2 fafe 	bl	80002ac <__adddf3>
 800dcb0:	4604      	mov	r4, r0
 800dcb2:	460d      	mov	r5, r1
 800dcb4:	e01c      	b.n	800dcf0 <scalbn+0x90>
 800dcb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dcba:	460b      	mov	r3, r1
 800dcbc:	3a36      	subs	r2, #54	; 0x36
 800dcbe:	4432      	add	r2, r6
 800dcc0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dcc4:	428a      	cmp	r2, r1
 800dcc6:	dd0b      	ble.n	800dce0 <scalbn+0x80>
 800dcc8:	ec45 4b11 	vmov	d1, r4, r5
 800dccc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800dd38 <scalbn+0xd8>
 800dcd0:	f000 f83c 	bl	800dd4c <copysign>
 800dcd4:	a318      	add	r3, pc, #96	; (adr r3, 800dd38 <scalbn+0xd8>)
 800dcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcda:	ec51 0b10 	vmov	r0, r1, d0
 800dcde:	e7da      	b.n	800dc96 <scalbn+0x36>
 800dce0:	2a00      	cmp	r2, #0
 800dce2:	dd08      	ble.n	800dcf6 <scalbn+0x96>
 800dce4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dce8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dcec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dcf0:	ec45 4b10 	vmov	d0, r4, r5
 800dcf4:	bd70      	pop	{r4, r5, r6, pc}
 800dcf6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dcfa:	da0d      	bge.n	800dd18 <scalbn+0xb8>
 800dcfc:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dd00:	429e      	cmp	r6, r3
 800dd02:	ec45 4b11 	vmov	d1, r4, r5
 800dd06:	dce1      	bgt.n	800dccc <scalbn+0x6c>
 800dd08:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800dd30 <scalbn+0xd0>
 800dd0c:	f000 f81e 	bl	800dd4c <copysign>
 800dd10:	a307      	add	r3, pc, #28	; (adr r3, 800dd30 <scalbn+0xd0>)
 800dd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd16:	e7e0      	b.n	800dcda <scalbn+0x7a>
 800dd18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd1c:	3236      	adds	r2, #54	; 0x36
 800dd1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dd22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dd26:	4620      	mov	r0, r4
 800dd28:	4629      	mov	r1, r5
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	4b06      	ldr	r3, [pc, #24]	; (800dd48 <scalbn+0xe8>)
 800dd2e:	e7b2      	b.n	800dc96 <scalbn+0x36>
 800dd30:	c2f8f359 	.word	0xc2f8f359
 800dd34:	01a56e1f 	.word	0x01a56e1f
 800dd38:	8800759c 	.word	0x8800759c
 800dd3c:	7e37e43c 	.word	0x7e37e43c
 800dd40:	43500000 	.word	0x43500000
 800dd44:	ffff3cb0 	.word	0xffff3cb0
 800dd48:	3c900000 	.word	0x3c900000

0800dd4c <copysign>:
 800dd4c:	ec51 0b10 	vmov	r0, r1, d0
 800dd50:	ee11 0a90 	vmov	r0, s3
 800dd54:	ee10 2a10 	vmov	r2, s0
 800dd58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dd5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800dd60:	ea41 0300 	orr.w	r3, r1, r0
 800dd64:	ec43 2b10 	vmov	d0, r2, r3
 800dd68:	4770      	bx	lr
	...

0800dd6c <_init>:
 800dd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6e:	bf00      	nop
 800dd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd72:	bc08      	pop	{r3}
 800dd74:	469e      	mov	lr, r3
 800dd76:	4770      	bx	lr

0800dd78 <_fini>:
 800dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7a:	bf00      	nop
 800dd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd7e:	bc08      	pop	{r3}
 800dd80:	469e      	mov	lr, r3
 800dd82:	4770      	bx	lr
